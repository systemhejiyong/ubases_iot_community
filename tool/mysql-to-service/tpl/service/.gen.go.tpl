// Code generated by sgen,{{.CurrentTime}}. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"{{.DBModelPackage}}"
	"{{.DBOrmPackage}}"
	proto "{{.ProtoPackage}}"
	"{{.ConvertPackage}}"
)

type {{.ModelName}}Svc struct {
	Ctx context.Context
}

//创建{{.ModelName}}
func (s *{{.ModelName}}Svc) Create{{.ModelName}}(req *proto.{{.ModelName}}) (*proto.{{.ModelName}}, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).{{.TableModelName}}
	do := t.WithContext(context.Background())
	dbObj := convert.{{.ModelName}}_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("Create{{.ModelName}} error : %s", err.Error())
		return nil,err
	}
	return req, err
}

//根据条件删除{{.ModelName}}
func (s *{{.ModelName}}Svc) Delete{{.ModelName}}(req *proto.{{.ModelName}}) (*proto.{{.ModelName}}, error) {
    t := orm.Use(iotmodel.GetDB()).{{.TableModelName}}
    do := t.WithContext(context.Background())
    // fixme 请检查条件
    {{range $i, $v := .Fields}}{{if or (eq $v.DataType "bigint") (eq $v.DataType "tinyint") (eq $v.DataType "int") (eq $v.DataType "integer") (eq $v.DataType "smallint") (eq $v.DataType "mediumint") (eq $v.DataType "year") (eq $v.DataType "boolean")}}
    if req.{{case2CamelAndUcfirst $v.ColumnName}} != 0 {//整数
        do = do.Where(t.{{case2CamelAndUcfirst $v.ColumnName}}.Eq(req.{{case2CamelAndUcfirst $v.ColumnName}}))
    }{{else if or (eq $v.DataType "char") (eq $v.DataType "varchar") (eq $v.DataType "tinytext") (eq $v.DataType "mediumtext") (eq $v.DataType "longtext") (eq $v.DataType "text") (eq $v.DataType "json") (eq $v.DataType "enum")}}
    if req.{{case2CamelAndUcfirst $v.ColumnName}} != "" {//字符串
        do = do.Where(t.{{case2CamelAndUcfirst $v.ColumnName}}.Eq(req.{{case2CamelAndUcfirst $v.ColumnName}}))
    }{{end}}{{end}}
    _,err := do.Delete()
    if err != nil {
        logger.Errorf("Delete{{.ModelName}} error : %s", err.Error())
		return nil,err
    }
    return req, err
}

//根据数据库表主键删除{{.ModelName}}
func (s *{{.ModelName}}Svc) DeleteById{{.ModelName}}(req *proto.{{.ModelName}}) (*proto.{{.ModelName}}, error) {
    t := orm.Use(iotmodel.GetDB()).{{.TableModelName}}
    do := t.WithContext(context.Background())
    // fixme 请检查条件
    {{range $i, $v := .Fields}}{{if $v.IsPrimarykey }}{{if or (eq $v.DataType "bigint") (eq $v.DataType "tinyint") (eq $v.DataType "int") (eq $v.DataType "integer") (eq $v.DataType "smallint") (eq $v.DataType "mediumint") }}
    if req.{{case2CamelAndUcfirst $v.ColumnName}} != 0 {//整数
        do = do.Where(t.{{case2CamelAndUcfirst $v.ColumnName}}.Eq(req.{{case2CamelAndUcfirst $v.ColumnName}}))
    }{{else if or (eq $v.DataType "char") (eq $v.DataType "varchar") (eq $v.DataType "tinytext") (eq $v.DataType "mediumtext") (eq $v.DataType "longtext") (eq $v.DataType "text") (eq $v.DataType "json") (eq $v.DataType "enum")}}
    if req.{{case2CamelAndUcfirst $v.ColumnName}} != "" {//字符串
        do = do.Where(t.{{case2CamelAndUcfirst $v.ColumnName}}.Eq(req.{{case2CamelAndUcfirst $v.ColumnName}}))
    }{{end}}{{end}}{{end}}
   _,err := do.Delete()
    if err != nil {
        logger.Errorf("DeleteById{{.ModelName}} error : %s", err.Error())
		return nil,err
    }
    return req, err
}

//根据数据库表主键批量删除{{.ModelName}}
func (s *{{.ModelName}}Svc) DeleteByIds{{.ModelName}}(req *proto.{{.ModelName}}BatchDeleteRequest) (*proto.{{.ModelName}}BatchDeleteRequest, error) {
    var err error
    for _,k := range req.Keys {
        t := orm.Use(iotmodel.GetDB()).{{.TableModelName}}
        do := t.WithContext(context.Background())
        {{range $i, $v := .Fields}} {{if $v.IsPrimarykey }}
        do = do.Where(t.{{case2CamelAndUcfirst $v.ColumnName}}.Eq(k.{{case2CamelAndUcfirst $v.ColumnName}}))
        {{end}}{{end}}
         _,err = do.Delete()
         if err != nil {
             logger.Errorf("DeleteByIds{{.ModelName}} error : %s", err.Error())
             break
         }
    }
    return req, err
}

//根据主键更新{{.ModelName}}
func (s *{{.ModelName}}Svc) Update{{.ModelName}}(req *proto.{{.ModelName}}) (*proto.{{.ModelName}}, error) {
	t := orm.Use(iotmodel.GetDB()).{{.TableModelName}}
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField  []field.Expr
    {{range $i, $v := .Fields}}{{if not $v.IsPrimarykey }}{{if or (eq $v.DataType "bigint") (eq $v.DataType "tinyint") (eq $v.DataType "int") (eq $v.DataType "integer") (eq $v.DataType "smallint") (eq $v.DataType "mediumint") (eq $v.DataType "year") (eq $v.DataType "boolean")}}
    if req.{{case2CamelAndUcfirst $v.ColumnName}} != 0 {//整数
        updateField = append(updateField,t.{{case2CamelAndUcfirst $v.ColumnName}})
    }{{else if or (eq $v.DataType "char") (eq $v.DataType "varchar") (eq $v.DataType "tinytext") (eq $v.DataType "mediumtext") (eq $v.DataType "longtext") (eq $v.DataType "text") (eq $v.DataType "json") (eq $v.DataType "enum")}}
    if req.{{case2CamelAndUcfirst $v.ColumnName}} != "" {//字符串
        updateField = append(updateField,t.{{case2CamelAndUcfirst $v.ColumnName}})
    }{{end}}{{end}}{{end}}
    if len(updateField) > 0 {
        do = do.Select(updateField...)
    }
    //主键条件
    HasPrimaryKey := false
    {{range $i, $v := .Fields}} {{if $v.IsPrimarykey }} {{if or (eq $v.DataType "bigint") (eq $v.DataType "tinyint") (eq $v.DataType "int") (eq $v.DataType "integer") (eq $v.DataType "smallint") (eq $v.DataType "mediumint") (eq $v.DataType "year") (eq $v.DataType "boolean")}}
    if req.{{case2CamelAndUcfirst $v.ColumnName}} != 0 {//整数
        do = do.Where(t.{{case2CamelAndUcfirst $v.ColumnName}}.Eq(req.{{case2CamelAndUcfirst $v.ColumnName}}))
        HasPrimaryKey = true
    }{{else if or (eq $v.DataType "char") (eq $v.DataType "varchar") (eq $v.DataType "tinytext") (eq $v.DataType "mediumtext") (eq $v.DataType "longtext") (eq $v.DataType "text") (eq $v.DataType "json") (eq $v.DataType "enum")}}
    if req.{{case2CamelAndUcfirst $v.ColumnName}} != "" {//字符串
        do = do.Where(t.{{case2CamelAndUcfirst $v.ColumnName}}.Eq(req.{{case2CamelAndUcfirst $v.ColumnName}}))
        HasPrimaryKey = true
    }{{end}}{{end}}{{end}}

    if !HasPrimaryKey {
        logger.Error("Update{{.ModelName}} error : Missing condition")
        return nil,errors.New("Missing condition")
    }

	dbObj := convert.{{.ModelName}}_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("Update{{.ModelName}} error : %s", err.Error())
		return nil,err
	}
	return req, err
}

////根据主键更新所有字段{{.ModelName}}
func (s *{{.ModelName}}Svc) UpdateAll{{.ModelName}}(req *proto.{{.ModelName}}) (*proto.{{.ModelName}}, error) {
	t := orm.Use(iotmodel.GetDB()).{{.TableModelName}}
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField  []field.Expr
    {{range $i, $v := .Fields}} {{if and (not $v.IsPrimarykey) (ne $v.ColumnName "deleted_at") (ne $v.ColumnName "created_at") (ne $v.ColumnName "updated_at") }}
        updateField = append(updateField,t.{{case2CamelAndUcfirst $v.ColumnName}}){{end}}{{end}}
    if len(updateField) > 0 {
        do = do.Select(updateField...)
    }
    //主键条件
    HasPrimaryKey := false {{range $i, $v := .Fields}} {{if $v.IsPrimarykey }} {{if or (eq $v.DataType "bigint") (eq $v.DataType "tinyint") (eq $v.DataType "int") (eq $v.DataType "integer") (eq $v.DataType "smallint") (eq $v.DataType "mediumint") (eq $v.DataType "year") (eq $v.DataType "boolean")}}
    if req.{{case2CamelAndUcfirst $v.ColumnName}} != 0 {//整数
        do = do.Where(t.{{case2CamelAndUcfirst $v.ColumnName}}.Eq(req.{{case2CamelAndUcfirst $v.ColumnName}}))
        HasPrimaryKey = true
    }{{else if or (eq $v.DataType "char") (eq $v.DataType "varchar") (eq $v.DataType "tinytext") (eq $v.DataType "mediumtext") (eq $v.DataType "longtext") (eq $v.DataType "text") (eq $v.DataType "json") (eq $v.DataType "enum")}}
    if req.{{case2CamelAndUcfirst $v.ColumnName}} != "" {//字符串
        do = do.Where(t.{{case2CamelAndUcfirst $v.ColumnName}}.Eq(req.{{case2CamelAndUcfirst $v.ColumnName}}))
        HasPrimaryKey = true
    }{{end}}{{end}}{{end}}
    if !HasPrimaryKey {
        logger.Error("UpdateAll{{.ModelName}} error : Missing condition")
        return nil,errors.New("Missing condition")
    }
	dbObj := convert.{{.ModelName}}_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAll{{.ModelName}} error : %s", err.Error())
		return nil,err
	}
	return req, err
}

func (s *{{.ModelName}}Svc) UpdateFields{{.ModelName}}(req *proto.{{.ModelName}}UpdateFieldsRequest) (*proto.{{.ModelName}}, error) {
    t := orm.Use(iotmodel.GetDB()).{{.TableModelName}}
	do := t.WithContext(context.Background())

	var updateField  []field.Expr
	for _,v:=range req.Fields {
	    col, ok := t.GetFieldByName(v)
        if ok {
          updateField = append(updateField,col)
        }
    }
	if len(updateField) == 0 {
		err := errors.New("UpdateFields{{.ModelName}} error : missing updateField")
		logger.Error(err)
		return nil,err
	}
	do = do.Select(updateField...)

    //主键条件
    HasPrimaryKey := false {{range $i, $v := .Fields}} {{if $v.IsPrimarykey }} {{if or (eq $v.DataType "bigint") (eq $v.DataType "tinyint") (eq $v.DataType "int") (eq $v.DataType "integer") (eq $v.DataType "smallint") (eq $v.DataType "mediumint") (eq $v.DataType "year") (eq $v.DataType "boolean")}}
    if req.Data.{{case2CamelAndUcfirst $v.ColumnName}} != 0 {//整数
        do = do.Where(t.{{case2CamelAndUcfirst $v.ColumnName}}.Eq(req.Data.{{case2CamelAndUcfirst $v.ColumnName}}))
        HasPrimaryKey = true
    }{{else if or (eq $v.DataType "char") (eq $v.DataType "varchar") (eq $v.DataType "tinytext") (eq $v.DataType "mediumtext") (eq $v.DataType "longtext") (eq $v.DataType "text") (eq $v.DataType "json") (eq $v.DataType "enum")}}
    if req.Data.{{case2CamelAndUcfirst $v.ColumnName}} != "" {//字符串
        do = do.Where(t.{{case2CamelAndUcfirst $v.ColumnName}}.Eq(req.Data.{{case2CamelAndUcfirst $v.ColumnName}}))
        HasPrimaryKey = true
    }{{end}}{{end}}{{end}}
    if !HasPrimaryKey {
        logger.Error("UpdateFields{{.ModelName}} error : Missing condition")
        return nil,errors.New("Missing condition")
    }
	dbObj := convert.{{.ModelName}}_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFields{{.ModelName}} error : %s", err.Error())
		return nil,err
	}
	return req.Data, nil
}

//根据非空条件查找{{.ModelName}}
func (s *{{.ModelName}}Svc) Find{{.ModelName}}(req *proto.{{.ModelName}}Filter) (*proto.{{.ModelName}}, error) {
	t := orm.Use(iotmodel.GetDB()).{{.TableModelName}}
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
    {{range $i, $v := .Fields}}{{if or (eq $v.DataType "bigint") (eq $v.DataType "tinyint") (eq $v.DataType "int") (eq $v.DataType "integer") (eq $v.DataType "smallint") (eq $v.DataType "mediumint") (eq $v.DataType "year") (eq $v.DataType "boolean")}}
    if req.{{case2CamelAndUcfirst $v.ColumnName}} != 0 {//整数
        do = do.Where(t.{{case2CamelAndUcfirst $v.ColumnName}}.Eq(req.{{case2CamelAndUcfirst $v.ColumnName}}))
    }{{else if or (eq $v.DataType "char") (eq $v.DataType "varchar") (eq $v.DataType "tinytext") (eq $v.DataType "mediumtext") (eq $v.DataType "longtext") (eq $v.DataType "text") (eq $v.DataType "json") (eq $v.DataType "enum")}}
    if req.{{case2CamelAndUcfirst $v.ColumnName}} != "" {//字符串
        do = do.Where(t.{{case2CamelAndUcfirst $v.ColumnName}}.Eq(req.{{case2CamelAndUcfirst $v.ColumnName}}))
    }{{end}}{{end}}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("Find{{.ModelName}} error : %s", err.Error())
		return nil,err
	}
	res := convert.{{.ModelName}}_db2pb(dbObj)
	return res, err
}

//根据数据库表主键查找{{.ModelName}}
func (s *{{.ModelName}}Svc) FindById{{.ModelName}}(req *proto.{{.ModelName}}Filter) (*proto.{{.ModelName}}, error) {
	t := orm.Use(iotmodel.GetDB()).{{.TableModelName}}
	do := t.WithContext(context.Background())
    // fixme 请检查条件和校验参数
    {{range $i, $v := .Fields}}{{if $v.IsPrimarykey }}{{if or (eq $v.DataType "bigint") (eq $v.DataType "tinyint") (eq $v.DataType "int") (eq $v.DataType "integer") (eq $v.DataType "smallint") (eq $v.DataType "mediumint") (eq $v.DataType "year") (eq $v.DataType "boolean")}}
    if req.{{case2CamelAndUcfirst $v.ColumnName}} != 0 {//整数
        do = do.Where(t.{{case2CamelAndUcfirst $v.ColumnName}}.Eq(req.{{case2CamelAndUcfirst $v.ColumnName}}))
    }{{else if or (eq $v.DataType "char") (eq $v.DataType "varchar") (eq $v.DataType "tinytext") (eq $v.DataType "mediumtext") (eq $v.DataType "longtext") (eq $v.DataType "text") (eq $v.DataType "json") (eq $v.DataType "enum")}}
    if req.{{case2CamelAndUcfirst $v.ColumnName}} != "" {//字符串
        do = do.Where(t.{{case2CamelAndUcfirst $v.ColumnName}}.Eq(req.{{case2CamelAndUcfirst $v.ColumnName}}))
    }{{end}}{{end}}{{end}}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindById{{.ModelName}} error : %s", err.Error())
		return nil,err
	}
	res := convert.{{.ModelName}}_db2pb(dbObj)
	return res, err
}

//根据分页条件查找{{.ModelName}},请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *{{.ModelName}}Svc) GetList{{.ModelName}}(req *proto.{{.ModelName}}ListRequest) ([]*proto.{{.ModelName}}, int64, error) {
    // fixme 请检查条件和校验参数
    var err error
    t := orm.Use(iotmodel.GetDB()).{{.TableModelName}}
    do := t.WithContext(context.Background())
    query := req.Query
    if query != nil {
        {{range $i, $v := .Fields}}{{if or (eq $v.DataType "bigint") (eq $v.DataType "tinyint") (eq $v.DataType "int") (eq $v.DataType "integer") (eq $v.DataType "smallint") (eq $v.DataType "mediumint") (eq $v.DataType "year") (eq $v.DataType "boolean")}}
        if query.{{case2CamelAndUcfirst $v.ColumnName}} != 0 {//整数
            do = do.Where(t.{{case2CamelAndUcfirst $v.ColumnName}}.Eq(query.{{case2CamelAndUcfirst $v.ColumnName}}))
        }{{else if or (eq $v.DataType "char") (eq $v.DataType "varchar") (eq $v.DataType "tinytext") (eq $v.DataType "mediumtext") (eq $v.DataType "longtext") (eq $v.DataType "text") (eq $v.DataType "json") (eq $v.DataType "enum")}}
        if query.{{case2CamelAndUcfirst $v.ColumnName}} != "" {//字符串
            do = do.Where(t.{{case2CamelAndUcfirst $v.ColumnName}}.Like("%" + query.{{case2CamelAndUcfirst $v.ColumnName}} + "%"))
        }{{end}}{{end}}
    }
    orderCol, ok := t.GetFieldByName(req.OrderKey)
    if !ok { {{range $i, $v := .Fields}}{{if $v.IsPrimarykey }}
        orderCol = t.{{case2CamelAndUcfirst $v.ColumnName}}{{end}}{{end}}
    }
    if req.OrderDesc != "" {
        do = do.Order(orderCol.Desc())
    } else {
        do = do.Order(orderCol)
    }

	var list []*model.{{.TableModelName}}
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
	    logger.Errorf("GetList{{.ModelName}} error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
	     return nil, total, nil
	}
	result := make([]*proto.{{.ModelName}},len(list))
    for i, v := range list {
        result[i] = convert.{{.ModelName}}_db2pb(v)
    }
    return result, total, nil
}


