// Code generated by sgen,{{.CurrentTime}}. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
    "context"


    proto "{{.ProtoPackage}}"
    "{{.ServicePackage}}"
)

type {{.ModelName}}Handler struct{}

//创建
func (h *{{.ModelName}}Handler) Create(ctx context.Context, req *proto.{{.ModelName}},resp *proto.Response)  error {
    s := service.{{.ModelName}}Svc{Ctx: ctx}
	_, err := s.Create{{.ModelName}}(req)
    SetResponse(resp, err)
	return nil
}

//匹配多条件删除
func (h *{{.ModelName}}Handler) Delete(ctx context.Context, req *proto.{{.ModelName}},resp *proto.Response) error {
    s := service.{{.ModelName}}Svc{Ctx: ctx}
	_, err := s.Delete{{.ModelName}}(req)
    SetResponse(resp, err)
	return nil
}

//匹配ID删除
func (h *{{.ModelName}}Handler) DeleteById(ctx context.Context, req *proto.{{.ModelName}},resp *proto.Response) error {
    s := service.{{.ModelName}}Svc{Ctx: ctx}
	_, err := s.DeleteById{{.ModelName}}(req)
    SetResponse(resp, err)
	return nil
}

//根据主键批量删除
func (h *{{.ModelName}}Handler) DeleteByIds(ctx context.Context, req *proto.{{.ModelName}}BatchDeleteRequest,resp *proto.Response) error {
    s := service.{{.ModelName}}Svc{Ctx: ctx}
	_, err := s.DeleteByIds{{.ModelName}}(req)
    SetResponse(resp, err)
	return nil
}

//更新
func (h *{{.ModelName}}Handler) Update(ctx context.Context, req *proto.{{.ModelName}},resp *proto.Response) error {
    s := service.{{.ModelName}}Svc{Ctx: ctx}
	_, err := s.Update{{.ModelName}}(req)
    SetResponse(resp, err)
	return nil
}

//根据主键更新所有字段
func (h *{{.ModelName}}Handler) UpdateAll(ctx context.Context, req *proto.{{.ModelName}},resp *proto.Response) error {
    s := service.{{.ModelName}}Svc{Ctx: ctx}
	_, err := s.UpdateAll{{.ModelName}}(req)
    SetResponse(resp, err)
	return nil
}

//根据主键更新指定列
func (h *{{.ModelName}}Handler) UpdateFields(ctx context.Context, req *proto.{{.ModelName}}UpdateFieldsRequest,resp *proto.Response) error {
    s := service.{{.ModelName}}Svc{Ctx: ctx}
	_, err := s.UpdateFields{{.ModelName}}(req)
    SetResponse(resp, err)
	return nil
}

//多条件查找，返回单条数据
func (h *{{.ModelName}}Handler) Find(ctx context.Context, req *proto.{{.ModelName}}Filter,resp *proto.{{.ModelName}}Response)  error {
    s := service.{{.ModelName}}Svc{Ctx: ctx}
	data, err := s.Find{{.ModelName}}(req)
    h.SetResponse(resp, data, err)
	return nil
}

//根据ID查找，返回单条数据
func (h *{{.ModelName}}Handler) FindById(ctx context.Context, req *proto.{{.ModelName}}Filter,resp *proto.{{.ModelName}}Response) error {
    s := service.{{.ModelName}}Svc{Ctx: ctx}
	data, err := s.FindById{{.ModelName}}(req)
	h.SetResponse(resp, data, err)
	return nil
}

//查找，支持分页，可返回多条数据
func (h *{{.ModelName}}Handler) Lists(ctx context.Context, req *proto.{{.ModelName}}ListRequest,resp *proto.{{.ModelName}}Response) error {
    s := service.{{.ModelName}}Svc{Ctx: ctx}
    data, total, err := s.GetList{{.ModelName}}(req)
    h.SetPageResponse(resp, data, total, err)
	return nil
}


func (h *{{.ModelName}}Handler) SetResponse(resp *proto.{{.ModelName}}Response, data *proto.{{.ModelName}}, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *{{.ModelName}}Handler) SetPageResponse(resp *proto.{{.ModelName}}Response, list []*proto.{{.ModelName}}, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
