// Code generated by sgen.exe,2022-10-24 09:40:31. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_app_oem_service/service"
	"cloud_platform/iot_common/ioterrs"
	proto "cloud_platform/iot_proto/protos/protosService"
	goerrors "go-micro.dev/v4/errors"
)

type OemAppFlashScreenHandler struct{}

// 创建
func (h *OemAppFlashScreenHandler) Create(ctx context.Context, req *proto.OemAppFlashScreen, resp *proto.Response) error {
	s := service.OemAppFlashScreenSvc{Ctx: ctx}
	_, err := s.CreateOemAppFlashScreen(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenCreate)
	}
	return nil
}

// 匹配多条件删除
func (h *OemAppFlashScreenHandler) Delete(ctx context.Context, req *proto.OemAppFlashScreen, resp *proto.Response) error {
	s := service.OemAppFlashScreenSvc{Ctx: ctx}
	_, err := s.DeleteOemAppFlashScreen(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenDelete)
	}
	return nil
}

// 匹配ID删除
func (h *OemAppFlashScreenHandler) DeleteById(ctx context.Context, req *proto.OemAppFlashScreen, resp *proto.Response) error {
	s := service.OemAppFlashScreenSvc{Ctx: ctx}
	_, err := s.DeleteByIdOemAppFlashScreen(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenDelete)
	}
	return nil
}

// 根据主键批量删除
func (h *OemAppFlashScreenHandler) DeleteByIds(ctx context.Context, req *proto.OemAppFlashScreenBatchDeleteRequest, resp *proto.Response) error {
	s := service.OemAppFlashScreenSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOemAppFlashScreen(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenDelete)
	}
	return nil
}

// 更新
func (h *OemAppFlashScreenHandler) Update(ctx context.Context, req *proto.OemAppFlashScreen, resp *proto.Response) error {
	s := service.OemAppFlashScreenSvc{Ctx: ctx}
	_, err := s.UpdateOemAppFlashScreen(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenUpdate)
	}
	return nil
}

// 根据主键更新所有字段
func (h *OemAppFlashScreenHandler) UpdateAll(ctx context.Context, req *proto.OemAppFlashScreen, resp *proto.Response) error {
	s := service.OemAppFlashScreenSvc{Ctx: ctx}
	_, err := s.UpdateAllOemAppFlashScreen(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenUpdate)
	}
	return nil
}

// 根据主键更新指定列
func (h *OemAppFlashScreenHandler) UpdateFields(ctx context.Context, req *proto.OemAppFlashScreenUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OemAppFlashScreenSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOemAppFlashScreen(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenUpdate)
	}
	return nil
}

// 多条件查找，返回单条数据
func (h *OemAppFlashScreenHandler) Find(ctx context.Context, req *proto.OemAppFlashScreenFilter, resp *proto.OemAppFlashScreenResponse) error {
	s := service.OemAppFlashScreenSvc{Ctx: ctx}
	data, err := s.FindOemAppFlashScreen(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OemAppFlashScreenHandler) FindById(ctx context.Context, req *proto.OemAppFlashScreenFilter, resp *proto.OemAppFlashScreenResponse) error {
	s := service.OemAppFlashScreenSvc{Ctx: ctx}
	data, err := s.FindByIdOemAppFlashScreen(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OemAppFlashScreenHandler) Lists(ctx context.Context, req *proto.OemAppFlashScreenListRequest, resp *proto.OemAppFlashScreenResponse) error {
	s := service.OemAppFlashScreenSvc{Ctx: ctx}
	data, total, err := s.GetListOemAppFlashScreen(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenList)
	}
	h.SetPageResponse(resp, data, total)
	return nil
}

func (h *OemAppFlashScreenHandler) SetResponse(resp *proto.OemAppFlashScreenResponse, data *proto.OemAppFlashScreen) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	if data != nil {
		resp.Total = 1
		resp.Data = append(resp.Data, data)
	}
}

func (h *OemAppFlashScreenHandler) SetPageResponse(resp *proto.OemAppFlashScreenResponse, list []*proto.OemAppFlashScreen, total int64) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	resp.Total = total
	resp.Data = list
}

// 多条件查找，返回单条数据
func (h *OemAppFlashScreenHandler) GetFlashScreen(ctx context.Context, req *proto.OemAppFlashScreenRequest, resp *proto.OemAppFlashScreenResponse) error {
	s := service.OemAppFlashScreenSvc{Ctx: ctx}
	data, err := s.GetOemAppFlashScreen(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenGet)
	}
	h.SetPageResponse(resp, data, int64(len(data)))
	return nil
}
