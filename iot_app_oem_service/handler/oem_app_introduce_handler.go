// Code generated by sgen.exe,2022-06-02 11:15:11. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_app_oem_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OemAppIntroduceHandler struct{}

// 复制
func (h *OemAppIntroduceHandler) Copy(ctx context.Context, req *proto.OemAppIntroduceCopyRequest, resp *proto.Response) error {
	s := service.OemAppIntroduceSvc{Ctx: ctx}
	err := s.CopyOemAppIntroduce(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
	}
	return nil
}

// 启用
func (h *OemAppIntroduceHandler) Enable(ctx context.Context, req *proto.OemAppIntroduce, resp *proto.Response) error {
	s := service.OemAppIntroduceSvc{Ctx: ctx}
	_, err := s.EnableOemAppIntroduce(req)
	SetResponse(resp, err)
	return nil
}

// 创建
func (h *OemAppIntroduceHandler) Create(ctx context.Context, req *proto.OemAppIntroduce, resp *proto.Response) error {
	s := service.OemAppIntroduceSvc{Ctx: ctx}
	_, err := s.CreateOemAppIntroduce(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *OemAppIntroduceHandler) Delete(ctx context.Context, req *proto.OemAppIntroduce, resp *proto.Response) error {
	s := service.OemAppIntroduceSvc{Ctx: ctx}
	_, err := s.DeleteOemAppIntroduce(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *OemAppIntroduceHandler) DeleteById(ctx context.Context, req *proto.OemAppIntroduce, resp *proto.Response) error {
	s := service.OemAppIntroduceSvc{Ctx: ctx}
	_, err := s.DeleteByIdOemAppIntroduce(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *OemAppIntroduceHandler) DeleteByIds(ctx context.Context, req *proto.OemAppIntroduceBatchDeleteRequest, resp *proto.Response) error {
	s := service.OemAppIntroduceSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOemAppIntroduce(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *OemAppIntroduceHandler) Update(ctx context.Context, req *proto.OemAppIntroduce, resp *proto.Response) error {
	s := service.OemAppIntroduceSvc{Ctx: ctx}
	_, err := s.UpdateOemAppIntroduce(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *OemAppIntroduceHandler) UpdateAll(ctx context.Context, req *proto.OemAppIntroduce, resp *proto.Response) error {
	s := service.OemAppIntroduceSvc{Ctx: ctx}
	_, err := s.UpdateAllOemAppIntroduce(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *OemAppIntroduceHandler) UpdateFields(ctx context.Context, req *proto.OemAppIntroduceUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OemAppIntroduceSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOemAppIntroduce(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *OemAppIntroduceHandler) Find(ctx context.Context, req *proto.OemAppIntroduceFilter, resp *proto.OemAppIntroduceResponse) error {
	s := service.OemAppIntroduceSvc{Ctx: ctx}
	data, err := s.FindOemAppIntroduce(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OemAppIntroduceHandler) FindById(ctx context.Context, req *proto.OemAppIntroduceFilter, resp *proto.OemAppIntroduceResponse) error {
	s := service.OemAppIntroduceSvc{Ctx: ctx}
	data, err := s.FindByIdOemAppIntroduce(req)
	h.SetResponse(resp, data, err)
	return nil
}

func (h *OemAppIntroduceHandler) GetLastVersion(ctx context.Context, req *proto.OemAppIntroduceFilter, resp *proto.OemAppIntroduceLastResponse) error {
	s := service.OemAppIntroduceSvc{Ctx: ctx}
	userAgreementRemind, userAgreementVer,privacyPolicyRemind,privacyPolicyVer, err := s.GetLastVersion(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.UserAgreementRemind = userAgreementRemind
		resp.UserAgreementVer = userAgreementVer
		resp.PrivacyPolicyRemind = privacyPolicyRemind
		resp.PrivacyPolicyVer = privacyPolicyVer
	}
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OemAppIntroduceHandler) Lists(ctx context.Context, req *proto.OemAppIntroduceListRequest, resp *proto.OemAppIntroduceResponse) error {
	s := service.OemAppIntroduceSvc{Ctx: ctx}
	data, total, err := s.GetListOemAppIntroduce(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OemAppIntroduceHandler) IntroduceList(ctx context.Context, req *proto.OemAppIntroduceListRequest, resp *proto.OemAppIntroduceListResponse) error {
	s := service.OemAppIntroduceSvc{Ctx: ctx}
	data, err := s.GetOemAppIntroduceList2(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Data = data

	}
	return nil
}

func (h *OemAppIntroduceHandler) SetResponse(resp *proto.OemAppIntroduceResponse, data *proto.OemAppIntroduce, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *OemAppIntroduceHandler) SetPageResponse(resp *proto.OemAppIntroduceResponse, list []*proto.OemAppIntroduce, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
