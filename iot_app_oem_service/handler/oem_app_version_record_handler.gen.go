// Code generated by sgen.exe,2022-11-02 17:18:03. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_app_oem_service/service"
	"cloud_platform/iot_common/ioterrs"
	proto "cloud_platform/iot_proto/protos/protosService"

	goerrors "go-micro.dev/v4/errors"
)

type OemAppVersionRecordHandler struct{}

// 创建
func (h *OemAppVersionRecordHandler) Create(ctx context.Context, req *proto.OemAppVersionRecord, resp *proto.Response) error {
	s := service.OemAppVersionRecordSvc{Ctx: ctx}
	_, err := s.CreateOemAppVersionRecord(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBOemAppVersionRecordCreate)
	}
	return nil
}

// 匹配多条件删除
func (h *OemAppVersionRecordHandler) Delete(ctx context.Context, req *proto.OemAppVersionRecord, resp *proto.Response) error {
	s := service.OemAppVersionRecordSvc{Ctx: ctx}
	_, err := s.DeleteOemAppVersionRecord(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBOemAppVersionRecordDelete)
	}
	return nil
}

// 匹配ID删除
func (h *OemAppVersionRecordHandler) DeleteById(ctx context.Context, req *proto.OemAppVersionRecord, resp *proto.Response) error {
	s := service.OemAppVersionRecordSvc{Ctx: ctx}
	_, err := s.DeleteByIdOemAppVersionRecord(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBOemAppVersionRecordDelete)
	}
	return nil
}

// 根据主键批量删除
func (h *OemAppVersionRecordHandler) DeleteByIds(ctx context.Context, req *proto.OemAppVersionRecordBatchDeleteRequest, resp *proto.Response) error {
	s := service.OemAppVersionRecordSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOemAppVersionRecord(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBOemAppVersionRecordDelete)
	}
	return nil
}

// 更新
func (h *OemAppVersionRecordHandler) Update(ctx context.Context, req *proto.OemAppVersionRecord, resp *proto.Response) error {
	s := service.OemAppVersionRecordSvc{Ctx: ctx}
	_, err := s.UpdateOemAppVersionRecord(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBOemAppVersionRecordUpdate)
	}
	return nil
}

// 根据主键更新所有字段
func (h *OemAppVersionRecordHandler) UpdateAll(ctx context.Context, req *proto.OemAppVersionRecord, resp *proto.Response) error {
	s := service.OemAppVersionRecordSvc{Ctx: ctx}
	_, err := s.UpdateAllOemAppVersionRecord(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBOemAppVersionRecordUpdate)
	}
	return nil
}

// 根据主键更新指定列
func (h *OemAppVersionRecordHandler) UpdateFields(ctx context.Context, req *proto.OemAppVersionRecordUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OemAppVersionRecordSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOemAppVersionRecord(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBOemAppVersionRecordUpdate)
	}
	return nil
}

// 多条件查找，返回单条数据
func (h *OemAppVersionRecordHandler) Find(ctx context.Context, req *proto.OemAppVersionRecordFilter, resp *proto.OemAppVersionRecordResponse) error {
	s := service.OemAppVersionRecordSvc{Ctx: ctx}
	data, err := s.FindOemAppVersionRecord(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBOemAppVersionRecordGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OemAppVersionRecordHandler) FindById(ctx context.Context, req *proto.OemAppVersionRecordFilter, resp *proto.OemAppVersionRecordResponse) error {
	s := service.OemAppVersionRecordSvc{Ctx: ctx}
	data, err := s.FindByIdOemAppVersionRecord(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBOemAppVersionRecordGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OemAppVersionRecordHandler) Lists(ctx context.Context, req *proto.OemAppVersionRecordListRequest, resp *proto.OemAppVersionRecordResponse) error {
	s := service.OemAppVersionRecordSvc{Ctx: ctx}
	data, total, err := s.GetListOemAppVersionRecord(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBOemAppVersionRecordList)
	}
	h.SetPageResponse(resp, data, total)
	return nil
}

func (h *OemAppVersionRecordHandler) SetResponse(resp *proto.OemAppVersionRecordResponse, data *proto.OemAppVersionRecord) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	if data != nil {
		resp.Total = 1
		resp.Data = append(resp.Data, data)
	}
}

func (h *OemAppVersionRecordHandler) SetPageResponse(resp *proto.OemAppVersionRecordResponse, list []*proto.OemAppVersionRecord, total int64) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	resp.Total = total
	resp.Data = list
}
