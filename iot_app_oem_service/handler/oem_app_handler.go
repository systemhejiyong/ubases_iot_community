// Code generated by sgen.exe,2022-05-31 16:29:04. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_app_oem_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OemAppHandler struct{}

// 创建
func (h *OemAppHandler) Create(ctx context.Context, req *proto.OemApp, resp *proto.Response) error {
	s := service.OemAppSvc{Ctx: ctx}
	_, err := s.CreateOemApp(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *OemAppHandler) Delete(ctx context.Context, req *proto.OemApp, resp *proto.Response) error {
	s := service.OemAppSvc{Ctx: ctx}
	_, err := s.DeleteOemApp(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *OemAppHandler) DeleteById(ctx context.Context, req *proto.OemApp, resp *proto.Response) error {
	s := service.OemAppSvc{Ctx: ctx}
	_, err := s.DeleteByIdOemApp(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *OemAppHandler) DeleteByIds(ctx context.Context, req *proto.OemAppBatchDeleteRequest, resp *proto.Response) error {
	s := service.OemAppSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOemApp(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *OemAppHandler) Update(ctx context.Context, req *proto.OemApp, resp *proto.Response) error {
	s := service.OemAppSvc{Ctx: ctx}
	_, err := s.UpdateOemApp(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *OemAppHandler) UpdateAll(ctx context.Context, req *proto.OemApp, resp *proto.Response) error {
	s := service.OemAppSvc{Ctx: ctx}
	_, err := s.UpdateAllOemApp(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *OemAppHandler) UpdateFields(ctx context.Context, req *proto.OemAppUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OemAppSvc{Ctx: ctx}

	b := true
	if len(req.Fields) == 1 {
		//变更名称的时候有单独的逻辑
		if req.Fields[0] == "name" {
			b = false
			_, err := s.UpdateFieldsOemApp(req)
			SetResponse(resp, err)
		}
	}
	if b == true {
		_, err := s.UpdateFieldsOemApp(req)
		SetResponse(resp, err)
	}

	return nil
}

// 多条件查找，返回单条数据
func (h *OemAppHandler) Find(ctx context.Context, req *proto.OemAppFilter, resp *proto.OemAppResponse) error {
	s := service.OemAppSvc{Ctx: ctx}
	data, err := s.FindOemApp(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OemAppHandler) FindById(ctx context.Context, req *proto.OemAppFilter, resp *proto.OemAppResponse) error {
	s := service.OemAppSvc{Ctx: ctx}
	data, err := s.FindByIdOemApp(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OemAppHandler) Lists(ctx context.Context, req *proto.OemAppListRequest, resp *proto.OemAppResponse) error {
	s := service.OemAppSvc{Ctx: ctx}
	data, total, err := s.GetListOemApp(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *OemAppHandler) Build(ctx context.Context, req *proto.OemAppBuildReq, resp *proto.OemAppBuildRes) error {
	s := service.OemAppSvc{Ctx: ctx}
	err := s.Build(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
	}
	return nil
}

func (h *OemAppHandler) UpdateVersion(ctx context.Context, req *proto.OemAppUpdateVersionReq, resp *proto.OemAppUpdateVersionRes) error {
	s := service.OemAppSvc{Ctx: ctx}
	err := s.OemAppUpdateVersion(req.AppId, req.OldVersion, req.NewVersion)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
	}
	return nil
}

func (h *OemAppHandler) SaveIcon(ctx context.Context, req *proto.OemAppSaveIconReq, resp *proto.OemAppSaveIconRes) error {
	s := service.OemAppSvc{Ctx: ctx}
	err := s.OemAppSaveIcon(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
	}
	return nil
}

func (h *OemAppHandler) SetResponse(resp *proto.OemAppResponse, data *proto.OemApp, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *OemAppHandler) SetPageResponse(resp *proto.OemAppResponse, list []*proto.OemApp, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}

func (h *OemAppHandler) ListsByAppKeys(ctx context.Context, req *proto.ListsByAppKeysRequest, resp *proto.OemAppResponse) error {
	s := service.OemAppSvc{Ctx: ctx}
	data, total, err := s.ListsByAppKeys(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

// 取消构建
func (h *OemAppHandler) CancelBuild(ctx context.Context, req *proto.OemAppBuildReq, resp *proto.OemAppBuildRes) error {
	s := service.OemAppSvc{Ctx: ctx}
	err := s.CancelBuild(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
	}
	return nil
}
