// Code generated by sgen.exe,2022-10-24 09:40:31. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"cloud_platform/iot_app_oem_service/service"
	"cloud_platform/iot_common/ioterrs"
	proto "cloud_platform/iot_proto/protos/protosService"
	"context"
	goerrors "go-micro.dev/v4/errors"
)

type OemAppFlashScreenUserHandler struct{}

// 创建
func (h *OemAppFlashScreenUserHandler) Create(ctx context.Context, req *proto.OemAppFlashScreenUser, resp *proto.Response) error {
	s := service.OemAppFlashScreenUserSvc{Ctx: ctx}
	_, err := s.CreateOemAppFlashScreenUser(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenUserCreate)
	}
	return nil
}

// 匹配多条件删除
func (h *OemAppFlashScreenUserHandler) Delete(ctx context.Context, req *proto.OemAppFlashScreenUser, resp *proto.Response) error {
	s := service.OemAppFlashScreenUserSvc{Ctx: ctx}
	_, err := s.DeleteOemAppFlashScreenUser(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenUserDelete)
	}
	return nil
}

// 匹配ID删除
func (h *OemAppFlashScreenUserHandler) DeleteById(ctx context.Context, req *proto.OemAppFlashScreenUser, resp *proto.Response) error {
	s := service.OemAppFlashScreenUserSvc{Ctx: ctx}
	_, err := s.DeleteByIdOemAppFlashScreenUser(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenUserDelete)
	}
	return nil
}

// 根据主键批量删除
func (h *OemAppFlashScreenUserHandler) DeleteByIds(ctx context.Context, req *proto.OemAppFlashScreenUserBatchDeleteRequest, resp *proto.Response) error {
	s := service.OemAppFlashScreenUserSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOemAppFlashScreenUser(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenUserDelete)
	}
	return nil
}

// 更新
func (h *OemAppFlashScreenUserHandler) Update(ctx context.Context, req *proto.OemAppFlashScreenUser, resp *proto.Response) error {
	s := service.OemAppFlashScreenUserSvc{Ctx: ctx}
	_, err := s.UpdateOemAppFlashScreenUser(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenUserUpdate)
	}
	return nil
}

// 根据主键更新所有字段
func (h *OemAppFlashScreenUserHandler) UpdateAll(ctx context.Context, req *proto.OemAppFlashScreenUser, resp *proto.Response) error {
	s := service.OemAppFlashScreenUserSvc{Ctx: ctx}
	_, err := s.UpdateAllOemAppFlashScreenUser(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenUserUpdate)
	}
	return nil
}

// 根据主键更新指定列
func (h *OemAppFlashScreenUserHandler) UpdateFields(ctx context.Context, req *proto.OemAppFlashScreenUserUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OemAppFlashScreenUserSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOemAppFlashScreenUser(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenUserUpdate)
	}
	return nil
}

// 多条件查找，返回单条数据
func (h *OemAppFlashScreenUserHandler) Find(ctx context.Context, req *proto.OemAppFlashScreenUserFilter, resp *proto.OemAppFlashScreenUserResponse) error {
	s := service.OemAppFlashScreenUserSvc{Ctx: ctx}
	data, err := s.FindOemAppFlashScreenUser(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenUserGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OemAppFlashScreenUserHandler) FindById(ctx context.Context, req *proto.OemAppFlashScreenUserFilter, resp *proto.OemAppFlashScreenUserResponse) error {
	s := service.OemAppFlashScreenUserSvc{Ctx: ctx}
	data, err := s.FindByIdOemAppFlashScreenUser(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenUserGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OemAppFlashScreenUserHandler) Lists(ctx context.Context, req *proto.OemAppFlashScreenUserListRequest, resp *proto.OemAppFlashScreenUserResponse) error {
	s := service.OemAppFlashScreenUserSvc{Ctx: ctx}
	data, total, err := s.GetListOemAppFlashScreenUser(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenUserList)
	}
	h.SetPageResponse(resp, data, total)
	return nil
}

func (h *OemAppFlashScreenUserHandler) SetResponse(resp *proto.OemAppFlashScreenUserResponse, data *proto.OemAppFlashScreenUser) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	if data != nil {
		resp.Total = 1
		resp.Data = append(resp.Data, data)
	}
}

func (h *OemAppFlashScreenUserHandler) SetPageResponse(resp *proto.OemAppFlashScreenUserResponse, list []*proto.OemAppFlashScreenUser, total int64) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	resp.Total = total
	resp.Data = list
}

// 创建
func (h *OemAppFlashScreenUserHandler) CreateBatch(ctx context.Context, req *proto.OemAppFlashScreenUserBatch, resp *proto.Response) error {
	s := service.OemAppFlashScreenUserSvc{Ctx: ctx}
	_, err := s.CreateOemAppFlashScreenUserBatch(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBFlashScreenUserCreate)
	}
	return nil
}
