// Code generated by sgen.exe,2022-05-31 16:29:04. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotstruct"
	"context"
	"crypto/md5"
	"crypto/rsa"
	"crypto/sha1"
	"crypto/sha256"
	"encoding/hex"
	"errors"
	"fmt"
	"sort"

	"github.com/opentracing/opentracing-go/log"

	"golang.org/x/crypto/pkcs12"

	"go-micro.dev/v4/logger"
	"google.golang.org/protobuf/types/known/timestamppb"

	"gorm.io/gen/field"

	"cloud_platform/iot_app_oem_service/config"
	"cloud_platform/iot_app_oem_service/convert"
	"cloud_platform/iot_app_oem_service/rpc/rpcClient"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app_oem/model"
	"cloud_platform/iot_model/db_app_oem/orm"
	proto "cloud_platform/iot_proto/protos/protosService"

	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotlogger"
	"cloud_platform/iot_common/iotutil"
	"time"

	"io/ioutil"
	"os"
	"os/exec"
	"strings"

	"go-micro.dev/v4/metadata"

	"cloud_platform/iot_common/iotnats/jetstream"
	"regexp"
	"strconv"

	"cloud_platform/iot_common/iotoss/file_store"

	"path/filepath"

	json "github.com/json-iterator/go"
	"github.com/nats-io/nats.go"
)

type OemAppSvc struct {
	Ctx       context.Context
	NotifyUrl string
}

// 打包文件的目录
// var DirTempBuildRecord = "/usr/local/bat/temp/build_record"
var DirTempBuildRecord = iotconst.GetBuildRecordDir()

// keystore文件生成的目录
// var DirKeytoolFile = "/usr/local/bat/temp/keytool"
var DirKeytoolFile = iotconst.GetKeytoolDir()

// 默认启动图的路径
// var DirLaunchScreenDefaultImage = "/usr/local/bat/temp/defaultImage"
var DirLaunchScreenDefaultImage = iotconst.GetLaunchScreenDefaultImageDir()

// 推送打包消息的主题
const BUILD_APP = "buildapp"

// 当前环境[用于判断打包回调环境url]
var OemAppEnv = ""

// oemapp打包脚本区域服务URL
var RegionServerUrl = ""

func (s *OemAppSvc) GetOemAppEnv() string {
	if OemAppEnv == "" {
		OemAppEnv = os.Getenv("ENVIRONMENT")
	}
	return OemAppEnv
}

// 根据数据字典类型获取字典数据列表
func (s *OemAppSvc) GetBaseDataValueList(dictType string) []*proto.ConfigDictData {
	//TODO 需要增加缓存
	res, err := rpcClient.ClientConfigDictDataServerService.Lists(s.Ctx, &proto.ConfigDictDataListRequest{
		Query: &proto.ConfigDictData{
			DictType: dictType,
		},
	})
	if err != nil {
		logger.Error(err.Error())
	}
	//排序
	if len(res.Data) > 1 {
		s.SortDictList(res.Data)
	}
	return res.Data
}

// 字典排序
func (s *OemAppSvc) SortDictList(list []*proto.ConfigDictData) {
	sort.Slice(list, func(i, j int) bool { // asc
		return list[i].DictSort < list[j].DictSort
	})
}

// 根据数据字典类型.获取数据值.(ctx  解决在携程里面调用的问题)
func (s *OemAppSvc) GetBaseDataValue(dictType string, isImg int, ctx context.Context) map[string]interface{} {
	res, err := rpcClient.ClientConfigDictDataServerService.Lists(ctx, &proto.ConfigDictDataListRequest{
		Page:     1,
		PageSize: 100000,
		Query: &proto.ConfigDictData{
			DictType: dictType,
		},
	})
	if err != nil {
		logger.Error(err.Error())
	}
	var dicMap = make(map[string]interface{})
	for _, v := range res.Data {
		dicMap[v.DictLabel] = v.DictValue
		if isImg == 1 && v.Listimg != "" {
			dicMap[v.DictLabel] = v.Listimg
		}
	}
	return dicMap
}

// 获取基础数据配置的回调地址.
func (s *OemAppSvc) GetNotifyUrl(ctx context.Context) string {
	if s.NotifyUrl == "" {
		mp := s.GetBaseDataValue("oem_app_build_notify", 0, ctx)
		evn := s.GetOemAppEnv()
		s.NotifyUrl = iotutil.ToString(mp[evn])
	}
	return s.NotifyUrl
}

// 获取区域服务URL
func (s *OemAppSvc) GetBuildRegionServerUrl(ctx context.Context) string {
	if RegionServerUrl == "" {
		mp := s.GetBaseDataValue("oem_app_build_region_server_url", 0, ctx)
		evn := s.GetOemAppEnv()
		RegionServerUrl = iotutil.ToString(mp[evn])
	}
	return RegionServerUrl
}

// 获取区域服务URL
func (s *OemAppSvc) GetOemAppPackageExists(ctx context.Context, platform string) string {
	mp := s.GetBaseDataValue("oem_app_package_exists", 0, ctx)
	return iotutil.ToString(mp[platform])
}

func (s *OemAppSvc) CheckAddOemApp(req *proto.OemApp) error {
	app, err := s.FindOemApp(&proto.OemAppFilter{
		Name:     req.Name,
		TenantId: req.TenantId,
	})
	if err != nil && err.Error() != "record not found" {
		return err
	}
	if app != nil && app.Id > 0 {
		return errors.New("app名称已经存在")
	}

	//IOS包名是否能重复
	isAndroid := s.GetOemAppPackageExists(s.Ctx, "android")
	if isAndroid != "1" {
		aCom, errAcom := s.FindOemApp(&proto.OemAppFilter{
			AndroidPkgName: req.AndroidPkgName,
		})
		if errAcom != nil && errAcom.Error() != "record not found" {
			return errAcom
		}
		if aCom != nil && aCom.Id > 0 {
			return errors.New("Android应用包名已经存在")
		}
	}

	//IOS包名是否能重复
	isIos := s.GetOemAppPackageExists(s.Ctx, "ios")
	if isIos != "1" {
		iCom, errIcom := s.FindOemApp(&proto.OemAppFilter{
			IosPkgName: req.IosPkgName,
		})
		if errIcom != nil && errIcom.Error() != "record not found" {
			return errIcom
		}
		if iCom != nil && iCom.Id > 0 {
			return errors.New("iOS应用包名已经存在")
		}
	}
	return nil
}

// 创建OemApp
func (s *OemAppSvc) CreateOemApp(req *proto.OemApp) (*proto.OemApp, error) {

	userid, _ := metadata.Get(s.Ctx, "userid")
	tenantid, _ := metadata.Get(s.Ctx, "tenantid")
	req.TenantId = tenantid

	errCheck := s.CheckAddOemApp(req)
	if errCheck != nil {
		return nil, errCheck
	}

	//生成appkey 24和appSecret  30
	req.AppKey = iotutil.GetSecret(24)
	req.AppSecret = iotutil.GetSecret(30)

	// fixme 请在这里校验参数
	q := orm.Use(iotmodel.GetDB())
	t := q.TOemApp
	do := t.WithContext(context.Background())

	dbObj := convert.OemApp_pb2db(req)
	dbObj.TenantId = tenantid
	dbObj.CreatedAt = time.Now()
	dbObj.CreatedBy = iotutil.ToInt64(userid)
	dbObj.UpdatedAt = time.Now()
	dbObj.UpdatedBy = iotutil.ToInt64(userid)
	dbObj.AppBuildVersion = 1

	// tAppTemplate := q.TOemAppTemplate
	// appTemplateList, err := tAppTemplate.WithContext(context.Background()).Where(tAppTemplate.Status.Eq(1)).Find()
	// if err != nil {
	// 	return nil, err
	// }
	// if len(appTemplateList) == 0 {
	// 	return nil, errors.New("请先配置APP模板")
	// } else {
	// 	dbObj.AppTemplateId = appTemplateList[0].Id
	// 	dbObj.AppTemplateVersion = appTemplateList[0].Version
	// 	dbObj.AppType = appTemplateList[0].Type
	// }
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOemApp error : %s", err.Error())
		return nil, err
	}
	logger.Info("exec Create success.")

	//保存版本信息
	s.UpdateVersionStatus(dbObj.Id)

	//ui_config  界面配置初始化

	//获取默认底部菜单集合.
	var menu = OemAppDefMenuSvc{}
	menuDataList, _, errMenu := menu.GetListOemAppDefMenu(&proto.OemAppDefMenuListRequest{
		Page:     1,
		PageSize: 1000000,
		Query: &proto.OemAppDefMenu{
			Required: 1,
		},
	})
	if errMenu != nil {
		return nil, errMenu
	}
	logger.Info("exec GetListOemAppDefMenu success.")
	var buttomMenu = make(map[string]interface{})
	//TODO  需要改为默认值[建议后续把默认值配置到字典]
	buttomMenu["selColor"] = "#3B7CFF"
	buttomMenu["defColor"] = "#343A40"
	var menuList []map[string]interface{}
	for _, v := range menuDataList {
		var tmp = make(map[string]interface{})
		tmp["menuId"] = iotutil.ToString(v.Id)
		tmp["menuKey"] = v.MenuKey
		tmp["required"] = v.Required
		tmp["selImage"] = v.SelImage
		tmp["defImage"] = v.DefImage
		tmp["name"] = v.Name
		tmp["position"] = v.Position
		menuList = append(menuList, tmp)
	}
	buttomMenu["menuList"] = menuList
	strJsonButtomMenu := iotutil.ToStringByUrl(buttomMenu)

	uiId := iotutil.GetNextSeqInt64()

	//获取默认主题色
	mapThemeColors := s.GetBaseDataValue("oem_app_default_theme_colors", 0, s.Ctx)
	mapThemeColors["id"] = iotutil.ToString(uiId)
	mapThemeColors["appId"] = iotutil.ToString(dbObj.Id)
	mapThemeColors["baseColorIndex"] = iotutil.ToInt32(mapThemeColors["baseColorIndex"])
	mapThemeColors["lightness"] = iotutil.ToInt32(mapThemeColors["lightness"])
	strThemeColors := iotutil.ToString(mapThemeColors)

	//获取默认个性化[获取图片]
	mapPersonalize := s.GetBaseDataValue("oem_app_default_personalize", 1, s.Ctx)
	mapPersonalize["id"] = iotutil.ToString(uiId)
	mapPersonalize["appId"] = iotutil.ToString(dbObj.Id)
	strPersonalize := iotutil.ToString(mapPersonalize)

	//默认房间
	strRoomList := ""
	roomlist := s.GetBaseDataValueList("default_rooms")
	if len(roomlist) > 0 {
		var mapRoomList = make([]map[string]interface{}, 0)
		for _, v := range roomlist {
			var mapRoom = make(map[string]interface{})
			mapRoom["roomId"] = iotutil.ToString(iotutil.GetNextSeqInt64())
			mapRoom["roomName"] = v.DictLabel
			mapRoom["roomImage"] = v.Listimg
			mapRoom["roomSort"] = v.DictSort
			mapRoomList = append(mapRoomList, mapRoom)
		}
		strRoomList = iotutil.ToStringByUrl(mapRoomList)
	}
	//默认房间自定义图标
	strRoomIconList := ""
	roomIconList := s.GetBaseDataValueList("room_icons")
	if len(roomIconList) > 0 {
		var arrRoomIconList = make([]string, 0)
		for _, v := range roomIconList {
			if v.Listimg != "" {
				arrRoomIconList = append(arrRoomIconList, v.Listimg)
			}
		}
		strRoomIconList = iotutil.ToStringByUrl(arrRoomIconList)
	}

	// 生成自定义app ios 57x57 512x512应用图标，用于生成plist文件
	strIosLaunchScreen := ""
	if req.AppDevType == 2 {
		strIosLaunchScreen, err = s.GenCustomAppIconForPlist(req.AppIconUrl)
		if err != nil {
			return nil, err
		}
	}

	//ui_config  界面配置初始化
	var ui = OemAppUiConfigSvc{}
	_, errUi := ui.CreateOemAppUiConfig(&proto.OemAppUiConfig{
		Id:              uiId,
		AppId:           dbObj.Id,
		Version:         dbObj.Version,
		IconUrl:         req.AppIconUrl,
		IosLaunchScreen: strIosLaunchScreen,
		BottomMenu:      strJsonButtomMenu,
		ThemeColors:     strThemeColors,
		Personalize:     strPersonalize,
		Room:            strRoomList,
		RoomIcons:       strRoomIconList,
	})
	if errUi != nil {
		return nil, errUi
	}
	logger.Info("exec CreateOemAppUiConfig success.")
	//ui_config  界面配置初始化 END

	//function_config 功能配置初始化
	var fun = OemAppFunctionConfigSvc{}
	_, errFun := fun.CreateOemAppFunctionConfig(&proto.OemAppFunctionConfig{
		Id:      iotutil.GetNextSeqInt64(),
		AppId:   dbObj.Id,
		Version: dbObj.Version,
		//默认值 1
		AboutUs:       1,
		Eula:          1,
		PrivacyPolicy: 1,
		Weather:       1,
	})
	if errFun != nil {
		return nil, errFun
	}
	logger.Info("exec CreateOemAppFunctionConfig success.")

	//ios_cert IOS证书初始化
	var iosCert = OemAppIosCertSvc{}
	_, errIosCert := iosCert.CreateOemAppIosCert(&proto.OemAppIosCert{
		Id:      iotutil.GetNextSeqInt64(),
		AppId:   dbObj.Id,
		Version: dbObj.Version,
	})
	if errIosCert != nil {
		return nil, errIosCert
	}
	logger.Info("exec CreateOemAppIosCert success.")

	//android_cert Android证书初始化
	var androidCert = OemAppAndroidCertSvc{}

	androidCertId := iotutil.GetNextSeqInt64()
	_, errAndroidCert := androidCert.CreateOemAppAndroidCert(&proto.OemAppAndroidCert{
		Id:      androidCertId,
		AppId:   dbObj.Id,
		Version: dbObj.Version,
		Resign:  1,
	})
	if errAndroidCert != nil {
		return nil, errAndroidCert
	}
	logger.Info("exec CreateOemAppAndroidCert success.")

	//创建携程去创建keystore文件并且更新db
	diyCtx := s.CopyNewContext(s.Ctx)
	go func() {
		s.CreateKeystore(androidCertId, diyCtx)
	}()

	//push_cert  push证书初始化
	var pushCert = OemAppPushCertSvc{}
	_, errPushCert := pushCert.CreateOemAppPushCert(&proto.OemAppPushCert{
		Id:      iotutil.GetNextSeqInt64(),
		AppId:   dbObj.Id,
		Version: dbObj.Version,
	})
	if errPushCert != nil {
		return nil, errPushCert
	}
	logger.Info("exec CreateOemAppPushCert success.")
	//复制反馈问题类型
	s.CopyFeedbackTypes(q, dbObj)
	//累加模板使用次数
	appT := OemAppTemplateSvc{}
	appT.OemAppTemplateAddCount(req.AppTemplateId)
	return req, err
}

// 复制反馈问题类型
func (s *OemAppSvc) CopyFeedbackTypes(q *orm.Query, dbObj *model.TOemApp) {
	//转存反馈问题类型
	feedbackTypes := s.GetBaseDataValueList("feedback_question_type")
	if len(feedbackTypes) > 0 {
		var feedbackTypeList = make([]*model.TOemFeedbackType, 0)
		for _, v := range feedbackTypes {
			feedbackTypeList = append(feedbackTypeList, &model.TOemFeedbackType{
				Id:     iotutil.GetNextSeqInt64(),
				Name:   v.DictLabel,
				AppId:  dbObj.Id,
				AppKey: dbObj.AppKey,
				Sort:   v.DictSort,
			})
		}
		err := q.TOemFeedbackType.WithContext(context.Background()).Create(feedbackTypeList...)
		if err != nil {
			logger.Error("CopyFeedbackTypes error:" + err.Error())
		}
	}
}

// 创建一个keystore证书,并且更新到db
func (s *OemAppSvc) CreateKeystore(androidCertId int64, ctx context.Context) {
	start := time.Now()
	iotlogger.LogHelper.Infof("CreateKeystore,start,Id=%d.", androidCertId)
	defer func() {
		iotlogger.LogHelper.Infof("CreateKeystore,end,Id=%d.time=%fs", androidCertId, time.Since(start).Seconds())
		if r := recover(); r != nil {
			iotlogger.LogHelper.Errorf("CreateKeystore error, msg: %s", r.(error).Error())
		}
	}()

	//keystore 生成
	keypass := iotutil.GetRandomNumber(6)
	storepass := keypass

	RandomFileName := iotutil.GetRandomPureString(20)

	alias := "alias_" + iotutil.GetRandomNumber(8)

	var reqTool = convert.KeyToolEntity{
		// Storepass string             // storepass keystore 文件存储密码
		Storepass: storepass,
		// Keypass string               // keypass 私钥加解密密码
		Keypass: keypass,
		// Alias string                 // alias 实体别名(包括证书私钥)
		Alias: alias,
		// Dname map[string]string      // dname 证书个人信息 CN=公司名,OU=部门,O=公司名,L=市,ST=湖南,C=国籍(CN)
		Dname: make(map[string]string),
		// Keyalt string                // keyalt 采用公钥算法，默认是DSA
		Keyalt: "RSA",
		// Keysize string               // keysize 密钥长度(DSA算法对应的默认算法是sha1withDSA，不支持2048长度，此时需指定RSA)
		Keysize: "2048",
		// Validity string              // validity 有效期 18250 单位/天  默认50年
		Validity: "18250",
		// KeystoreName string          // keystore 指定keystore文件文件名, 不带后缀
		KeystoreName: RandomFileName,
	}
	//TODO 需要改为开发者自己的组织信息
	reqTool.Dname["CN"] = "长沙博安通"
	reqTool.Dname["OU"] = "iot云事业部"
	reqTool.Dname["O"] = "长沙博安通"
	reqTool.Dname["L"] = "长沙"
	reqTool.Dname["ST"] = "湖南"
	reqTool.Dname["C"] = "中国"

	storeFile, errStoreFile := s.OutputKeystoreFile(reqTool)
	if errStoreFile != nil {
		logger.Error("exec OutputKeystoreFile error:" + errStoreFile.Error())
	}
	logger.Info("exec OutputKeystoreFile success.")

	md5, sha1, sha256, errSha := s.GetKeystoreFingerprint(storeFile, keypass)
	if errSha != nil {
		logger.Error("exec GetKeystoreShas error:" + errSha.Error())
	}
	logger.Info("exec GetKeystoreShas success.")

	//华为应用签名
	huawei_PlaySign, err := createPlaySign(1, storeFile, alias, storepass, keypass)
	if err != nil {
		logger.Errorf("createPlaySign失败:%s", err.Error())
	}

	//谷歌应用签名
	google_PlaySign, err1 := createPlaySign(2, storeFile, alias, storepass, keypass)
	if err1 != nil {
		logger.Errorf("createPlaySign失败:%s", err1.Error())
	}

	var aCert = OemAppAndroidCertSvc{}
	aCert.Ctx = ctx
	_, err = aCert.UpdateKeystoreData(&proto.OemAppAndroidCert{
		Id:             androidCertId,
		Keypass:        keypass,
		Storepass:      storepass,
		Keystore:       storeFile, //带全路径的文件名
		KsMd5:          md5,
		KsSha1:         sha1,
		KsSha256:       sha256,
		AliasKeytool:   reqTool.Alias,
		HwSignCert:     huawei_PlaySign,
		GoogleSignCert: google_PlaySign,
	})
	if err != nil {
		logger.Error("exec UpdateFieldsOemAppAndroidCert error:" + err.Error())
	}
}

// flag = 1 华为
// java -jar pepk.jar --keystore test.jks --alias test --output=output.zip
// --encryptionkey=034200041E224EE22B45D19B23DB91BA9F52DE0A06513E03A5821409B34976FDEED6E0A47DBA48CC249DD93734A6C5D9A0F43461F9E140F278A5D2860846C2CF5D2C3C02
// --include-cert
// flag = 2 google
// java -jar pepk.jar --keystore=foo.keystore --alias=foo --output=output.zip --include-cert
// --encryptionkey=eb10fe8f7c7c9df715022017b00c6471f8ba8170b13049a11e6c09ffe3056a104a3bbe4ac5a955f4ba4fe93fc8cef27558a3eb9d2a529a2092761fb833b656cd48b9de6a
const HUAWEI_ENCRYPTIONKEY = "034200041E224EE22B45D19B23DB91BA9F52DE0A06513E03A5821409B34976FDEED6E0A47DBA48CC249DD93734A6C5D9A0F43461F9E140F278A5D2860846C2CF5D2C3C02"
const GOOGLE_ENCRYPTIONKEY = "eb10fe8f7c7c9df715022017b00c6471f8ba8170b13049a11e6c09ffe3056a104a3bbe4ac5a955f4ba4fe93fc8cef27558a3eb9d2a529a2092761fb833b656cd48b9de6a"

func CreatePlaySignTest() {
	x, err := createPlaySign(1, "xiaopo.keystore", "xp", "AIthinker2021", "AIthinker2021")
	if err != nil {
		log.Error(err)
	}
	fmt.Println(x)

	x1, err1 := createPlaySign(2, "xiaopo.keystore", "xp", "AIthinker2021", "AIthinker2021")
	if err1 != nil {
		log.Error(err1)
	}
	fmt.Println(x1)
}

func createPlaySign(flag int, keystorefile, alias, storePass, keyPass string) (string, error) {
	outFile := ""
	key := ""
	switch flag {
	case 1:
		key = HUAWEI_ENCRYPTIONKEY
		zipName := "pepk_huawei" + iotutil.GetSecret(5) + ".zip"
		outFile = GetDirPath(DirKeytoolFile, zipName)
	case 2:
		key = GOOGLE_ENCRYPTIONKEY
		zipName := "pepk_google" + iotutil.GetSecret(5) + ".zip"
		outFile = GetDirPath(DirKeytoolFile, zipName)
	default:
		return "", fmt.Errorf("flag error.%d", flag)
	}
	cmdJava := exec.Command("java", "-jar", "pepk.jar", fmt.Sprintf("--keystore=%s", keystorefile), fmt.Sprintf("--alias=%s", alias),
		fmt.Sprintf("--output=%s", outFile), "--include-cert", fmt.Sprintf("--keystore-pass=%s", storePass),
		fmt.Sprintf("--key-pass=%s", keyPass), fmt.Sprintf("--encryptionkey=%s", key))
	err := cmdJava.Run()
	if err != nil {
		return "", err
	}
	return outFile, nil
}

// 根据条件删除OemApp
func (s *OemAppSvc) DeleteOemApp(req *proto.OemApp) (*proto.OemApp, error) {
	t := orm.Use(iotmodel.GetDB()).TOemApp
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.AppSecret != "" { //字符串
		do = do.Where(t.AppSecret.Eq(req.AppSecret))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.IosPkgName != "" { //字符串
		do = do.Where(t.IosPkgName.Eq(req.IosPkgName))
	}
	if req.AndroidPkgName != "" { //字符串
		do = do.Where(t.AndroidPkgName.Eq(req.AndroidPkgName))
	}
	if req.Channel != "" { //字符串
		do = do.Where(t.Channel.Eq(req.Channel))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.AmapKey != "" { //字符串
		do = do.Where(t.AmapKey.Eq(req.AmapKey))
	}
	if req.GooglemapKey != "" { //字符串
		do = do.Where(t.GooglemapKey.Eq(req.GooglemapKey))
	}
	if req.Region != 0 { //整数
		do = do.Where(t.Region.Eq(req.Region))
	}
	if req.CurrentStep != 0 { //整数
		do = do.Where(t.CurrentStep.Eq(req.CurrentStep))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.AppTemplateId != 0 {
		do = do.Where(t.AppTemplateId.Eq(req.AppTemplateId))
	}
	if req.AppTemplateVersion != "" {
		do = do.Where(t.AppTemplateVersion.Eq(req.AppTemplateVersion))
	}
	if req.AppType != 0 {
		do = do.Where(t.AppType.Eq(req.AppType))
	}
	if req.AppDevType != 0 {
		do = do.Where(t.AppDevType.Eq(req.AppDevType))
	}
	if req.IosVersion != "" { //字符串
		do = do.Where(t.IosVersion.Eq(req.IosVersion))
	}
	if req.AndroidInterVersion != "" { //字符串
		do = do.Where(t.AndroidInterVersion.Eq(req.AndroidInterVersion))
	}
	if req.AndroidOuterVersion != "" { //字符串
		do = do.Where(t.AndroidOuterVersion.Eq(req.AndroidOuterVersion))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOemApp error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OemApp
func (s *OemAppSvc) DeleteByIdOemApp(req *proto.OemApp) (*proto.OemApp, error) {
	t := orm.Use(iotmodel.GetDB()).TOemApp
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	//删除：只有未曾上架过的app，而且状态是配置中的APP可以删除，其他状态不可删除
	app, errApp := s.FindByIdOemApp(&proto.OemAppFilter{
		Id: req.Id,
	})
	if errApp != nil {
		return nil, errApp
	}
	if app != nil && app.Status != 1 {
		return nil, errors.New("该状态下不可删除")
	}

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOemApp error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OemApp
func (s *OemAppSvc) DeleteByIdsOemApp(req *proto.OemAppBatchDeleteRequest) (*proto.OemAppBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOemApp
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOemApp error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OemApp
func (s *OemAppSvc) UpdateOemApp(req *proto.OemApp) (*proto.OemApp, error) {
	t := orm.Use(iotmodel.GetDB()).TOemApp
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.AppKey != "" { //字符串
		updateField = append(updateField, t.AppKey)
	}
	if req.AppSecret != "" { //字符串
		updateField = append(updateField, t.AppSecret)
	}
	if req.Name != "" { //字符串
		updateField = append(updateField, t.Name)
	}
	if req.Version != "" { //字符串
		updateField = append(updateField, t.Version)
	}
	if req.IosPkgName != "" { //字符串
		updateField = append(updateField, t.IosPkgName)
	}
	if req.AndroidPkgName != "" { //字符串
		updateField = append(updateField, t.AndroidPkgName)
	}
	if req.Channel != "" { //字符串
		updateField = append(updateField, t.Channel)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.AmapKey != "" { //字符串
		updateField = append(updateField, t.AmapKey)
	}
	if req.GooglemapKey != "" { //字符串
		updateField = append(updateField, t.GooglemapKey)
	}
	if req.Region != 0 { //整数
		updateField = append(updateField, t.Region)
	}
	if req.CurrentStep != 0 { //整数
		updateField = append(updateField, t.CurrentStep)
	}
	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.TenantId)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if req.AppTemplateId != 0 {
		updateField = append(updateField, t.AppTemplateId)
	}
	if req.AppTemplateVersion != "" {
		updateField = append(updateField, t.AppTemplateVersion)
	}
	if req.AppType != 0 {
		updateField = append(updateField, t.AppType)
	}
	if req.AppDevType != 0 {
		updateField = append(updateField, t.AppDevType)
	}
	if req.AppIconUrl != "" {
		updateField = append(updateField, t.AppIconUrl)
	}
	if req.IosVersion != "" { //字符串
		updateField = append(updateField, t.IosVersion)
	}
	if req.AndroidInterVersion != "" { //字符串
		updateField = append(updateField, t.AndroidInterVersion)
	}
	if req.AndroidOuterVersion != "" { //字符串
		updateField = append(updateField, t.AndroidOuterVersion)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOemApp error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OemApp_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOemApp error : %s", err.Error())
		return nil, err
	}

	//保存版本信息
	s.UpdateVersionStatus(req.Id)
	return req, err
}

// //根据主键更新所有字段OemApp
func (s *OemAppSvc) UpdateAllOemApp(req *proto.OemApp) (*proto.OemApp, error) {
	t := orm.Use(iotmodel.GetDB()).TOemApp
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.AppKey)
	updateField = append(updateField, t.AppSecret)
	updateField = append(updateField, t.Name)
	updateField = append(updateField, t.Version)
	updateField = append(updateField, t.IosPkgName)
	updateField = append(updateField, t.AndroidPkgName)
	updateField = append(updateField, t.Channel)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.AmapKey)
	updateField = append(updateField, t.GooglemapKey)
	updateField = append(updateField, t.Region)
	updateField = append(updateField, t.CurrentStep)
	updateField = append(updateField, t.TenantId)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	updateField = append(updateField, t.AppTemplateId)
	updateField = append(updateField, t.AppTemplateVersion)
	updateField = append(updateField, t.AppType)
	updateField = append(updateField, t.AppDevType)
	updateField = append(updateField, t.AppIconUrl)
	updateField = append(updateField, t.IosVersion)
	updateField = append(updateField, t.AndroidInterVersion)
	updateField = append(updateField, t.AndroidOuterVersion)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOemApp error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemApp_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOemApp error : %s", err.Error())
		return nil, err
	}
	//保存版本信息
	s.UpdateVersionStatus(dbObj.Id)

	return req, err
}

func (s *OemAppSvc) UpdateFieldsOemAppChangeName(req *proto.OemAppUpdateFieldsRequest) (*proto.OemApp, error) {

	//判断状态
	app, errApp := s.FindByIdOemApp(&proto.OemAppFilter{
		Id: req.Data.Id,
	})
	if errApp != nil {
		return nil, errApp
	}
	if app.Status == 2 || app.Status == 5 {
		return nil, errors.New("app状态为[构建中]和[已上架]不能修改app名称")
	}
	//调用公共方法修改状态.
	//需要判断是否是自定义app更新，如果是，需要根据app应用图标重新生成57x57, 512x512的图标
	if len(req.Data.AppIconUrl) != 0 {
		//ui_config  界面配置初始化
		var ui = OemAppUiConfigSvc{}
		respUi, err := ui.FindOemAppUiConfig(&proto.OemAppUiConfigFilter{
			AppId:   req.Data.Id,
			Version: "1.0.0",
		})
		if err != nil {
			return nil, err
		}
		url, err := s.GenCustomAppIconForPlist(req.Data.AppIconUrl)
		if err != nil {
			return nil, err
		}
		_, err = ui.UpdateFieldsOemAppUiConfig(&proto.OemAppUiConfigUpdateFieldsRequest{
			Fields: []string{"icon_url", "ios_launch_screen"},
			Data: &proto.OemAppUiConfig{
				Id:              respUi.Id,
				IconUrl:         req.Data.AppIconUrl,
				IosLaunchScreen: url,
			},
		})
		if err != nil {
			return nil, err
		}
	}
	res, err := s.UpdateFieldsOemApp(req)
	return res, err
}

func (s *OemAppSvc) UpdateFieldsOemApp(req *proto.OemAppUpdateFieldsRequest) (*proto.OemApp, error) {
	t := orm.Use(iotmodel.GetDB()).TOemApp
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOemApp error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOemApp error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemApp_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOemApp error : %s", err.Error())
		return nil, err
	}

	//保存版本信息
	s.UpdateVersionStatus(req.Data.Id)

	if dbObj.AppTemplateId != 0 {
		//累加模板使用次数
		appT := OemAppTemplateSvc{}
		appT.OemAppTemplateAddCount(dbObj.AppTemplateId)
	}
	//需要判断是否是自定义app更新，如果是，需要根据app应用图标重新生成57x57, 512x512的图标
	if len(req.Data.AppIconUrl) != 0 {
		//ui_config  界面配置初始化
		var ui = OemAppUiConfigSvc{}
		respUi, err := ui.FindOemAppUiConfig(&proto.OemAppUiConfigFilter{
			AppId:   req.Data.Id,
			Version: "1.0.0",
		})
		if err != nil {
			return nil, err
		}
		url, err := s.GenCustomAppIconForPlist(req.Data.AppIconUrl)
		if err != nil {
			return nil, err
		}
		_, err = ui.UpdateFieldsOemAppUiConfig(&proto.OemAppUiConfigUpdateFieldsRequest{
			Fields: []string{"icon_url", "ios_launch_screen"},
			Data: &proto.OemAppUiConfig{
				Id:              respUi.Id,
				IconUrl:         req.Data.AppIconUrl,
				IosLaunchScreen: url,
			},
		})
		if err != nil {
			return nil, err
		}
	}
	return req.Data, nil
}

// 根据非空条件查找OemApp
func (s *OemAppSvc) FindOemApp(req *proto.OemAppFilter) (*proto.OemApp, error) {
	t := orm.Use(iotmodel.GetDB()).TOemApp
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.AppSecret != "" { //字符串
		do = do.Where(t.AppSecret.Eq(req.AppSecret))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.IosPkgName != "" { //字符串
		do = do.Where(t.IosPkgName.Eq(req.IosPkgName))
	}
	if req.AndroidPkgName != "" { //字符串
		do = do.Where(t.AndroidPkgName.Eq(req.AndroidPkgName))
	}
	if req.Channel != "" { //字符串
		do = do.Where(t.Channel.Eq(req.Channel))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.AmapKey != "" { //字符串
		do = do.Where(t.AmapKey.Eq(req.AmapKey))
	}
	if req.GooglemapKey != "" { //字符串
		do = do.Where(t.GooglemapKey.Eq(req.GooglemapKey))
	}
	if req.Region != 0 { //整数
		do = do.Where(t.Region.Eq(req.Region))
	}
	if req.CurrentStep != 0 { //整数
		do = do.Where(t.CurrentStep.Eq(req.CurrentStep))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.AppTemplateId != 0 {
		do = do.Where(t.AppTemplateId.Eq(req.AppTemplateId))
	}
	if req.AppTemplateVersion != "" {
		do = do.Where(t.AppTemplateVersion.Eq(req.AppTemplateVersion))
	}
	if req.AppType != 0 {
		do = do.Where(t.AppType.Eq(req.AppType))
	}
	if req.AppDevType != 0 {
		do = do.Where(t.AppDevType.Eq(req.AppDevType))
	}
	if req.IosVersion != "" { //字符串
		do = do.Where(t.IosVersion.Eq(req.IosVersion))
	}
	if req.AndroidInterVersion != "" { //字符串
		do = do.Where(t.AndroidInterVersion.Eq(req.AndroidInterVersion))
	}
	if req.AndroidOuterVersion != "" { //字符串
		do = do.Where(t.AndroidOuterVersion.Eq(req.AndroidOuterVersion))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOemApp error : %s", err.Error())
		return nil, err
	}
	res := convert.OemApp_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OemApp
func (s *OemAppSvc) FindByIdOemApp(req *proto.OemAppFilter) (*proto.OemApp, error) {
	t := orm.Use(iotmodel.GetDB()).TOemApp
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOemApp error : %s", err.Error())
		return nil, err
	}
	res := convert.OemApp_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OemApp,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OemAppSvc) GetListOemApp(req *proto.OemAppListRequest) ([]*proto.OemApp, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOemApp
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		//是否默认APP
		if query.IsDefault == 1 { //整数
			do = do.Where(t.IsDefault.Eq(1)) //获取默认的APP列表
		} else if query.IsDefault == 2 { //整数
			do = do.Where(t.IsDefault.Eq(0)) //获取非默认APP列表
		}
		if query.AppKey != "" { //字符串
			do = do.Where(t.AppKey.Like("%" + query.AppKey + "%"))
		}
		if query.AppSecret != "" { //字符串
			do = do.Where(t.AppSecret.Like("%" + query.AppSecret + "%"))
		}
		if query.Name != "" { //字符串
			do = do.Where(t.Name.Like("%" + query.Name + "%"))
		}
		if query.Version != "" { //字符串
			do = do.Where(t.Version.Like("%" + query.Version + "%"))
		}
		if query.IosPkgName != "" { //字符串
			do = do.Where(t.IosPkgName.Like("%" + query.IosPkgName + "%"))
		}
		if query.AndroidPkgName != "" { //字符串
			do = do.Where(t.AndroidPkgName.Like("%" + query.AndroidPkgName + "%"))
		}
		if query.Channel != "" { //字符串
			do = do.Where(t.Channel.Like("%" + query.Channel + "%"))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.AmapKey != "" { //字符串
			do = do.Where(t.AmapKey.Like("%" + query.AmapKey + "%"))
		}
		if query.GooglemapKey != "" { //字符串
			do = do.Where(t.GooglemapKey.Like("%" + query.GooglemapKey + "%"))
		}
		if query.Region != 0 { //整数
			do = do.Where(t.Region.Eq(query.Region))
		}
		if query.CurrentStep != 0 { //整数
			do = do.Where(t.CurrentStep.Eq(query.CurrentStep))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Eq(query.TenantId))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
		if query.AppTemplateId != 0 {
			do = do.Where(t.AppTemplateId.Eq(query.AppTemplateId))
		}
		if query.AppTemplateVersion != "" {
			do = do.Where(t.AppTemplateVersion.Eq(query.AppTemplateVersion))
		}
		if query.AppType != 0 {
			do = do.Where(t.AppType.Eq(query.AppType))
		}
		if query.AppDevType != 0 {
			do = do.Where(t.AppDevType.Eq(query.AppDevType))
		}
		if query.IosVersion != "" { //字符串
			do = do.Where(t.IosVersion.Like("%" + query.IosVersion + "%"))
		}
		if query.AndroidInterVersion != "" { //字符串
			do = do.Where(t.AndroidInterVersion.Like("%" + query.AndroidInterVersion + "%"))
		}
		if query.AndroidOuterVersion != "" { //字符串
			do = do.Where(t.AndroidOuterVersion.Like("%" + query.AndroidOuterVersion + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.CreatedAt
	}
	if req.OrderDesc == "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOemApp
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOemApp error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OemApp, len(list))
	for i, v := range list {
		result[i] = convert.OemApp_db2pb(v)
	}
	return result, total, nil
}

// 复制一个新的上下文. 通常在携程中使用.
func (s *OemAppSvc) CopyNewContext(old context.Context) context.Context {

	userid, _ := metadata.Get(old, "userid")
	tenandId, _ := metadata.Get(old, "tenantid")
	token, _ := metadata.Get(old, "token")
	//新建一个ctx 在携程中使用.
	ctxDiy := metadata.NewContext(context.Background(), map[string]string{
		"userid":   userid,
		"tenantid": tenandId,
		"token":    token,
	})
	return ctxDiy
}

func (s *OemAppSvc) Build(reqs *proto.OemAppBuildReq) error {
	appID := iotutil.ToInt64(reqs.AppId)

	// userid, _ := metadata.Get(s.Ctx, "userid")
	// tenandId, _ := metadata.Get(s.Ctx, "tenantid")
	// token, _ := metadata.Get(s.Ctx, "token")

	// //新建一个ctx 在携程中使用.
	// ctxDiy := metadata.NewContext(context.Background(),map[string]string{
	//         "userid":   userid,
	// 		"tenantid": tenandId,
	// 		"token":    token,
	// })
	ctxDiy := s.CopyNewContext(s.Ctx)

	//查询APP信息
	t := orm.Use(iotmodel.GetDB()).TOemApp
	appInfo, err := t.WithContext(context.Background()).Where(t.Id.Eq(appID)).First()
	if err != nil {
		return err
	}
	var arrBuild = make([]convert.BuildRecordReq, 0)
	for _, vv := range reqs.Os {
		bu := convert.BuildRecordReq{
			Id:      iotutil.GetNextSeqInt64(),
			AppId:   appID,
			Version: reqs.Version,
			ResUrl:  "",
			ResMd5:  "",
			Os:      iotutil.ToInt32(vv),
			Region:  1,
			Status:  2,
		}
		arrBuild = append(arrBuild, bu)

		//先入库.后打包构建.
		var buildSvc = OemAppBuildRecordSvc{}
		buildSvc.Ctx = s.Ctx
		startTime := time.Now()
		endTime := startTime.Add(2 * time.Hour)
		startTimepb := timestamppb.New(startTime)
		endTimepb := timestamppb.New(endTime)
		_, errBuild := buildSvc.CreateOemAppBuildRecord(&proto.OemAppBuildRecord{
			Id:                 bu.Id,
			AppId:              bu.AppId,
			Version:            bu.Version,
			ResUrl:             bu.ResUrl,
			ResMd5:             bu.ResMd5,
			StartTime:          startTimepb,
			EndTime:            endTimepb,
			Os:                 bu.Os,
			Region:             1,
			Status:             2,
			AppTemplateId:      appInfo.AppTemplateId,
			AppTemplateVersion: appInfo.AppTemplateVersion,
		})
		if errBuild != nil {
			iotlogger.LogHelper.Error("OemAppSvc Insert Build errBuild Error: " + errBuild.Error())
		}
	}

	go func() {
		defer iotutil.PanicHandler()

		var oemapp = OemAppSvc{}
		oemapp.Ctx = ctxDiy
		resApp, errApp := oemapp.FindByIdOemApp(&proto.OemAppFilter{
			Id: appID,
		})
		if errApp != nil {
			iotlogger.LogHelper.Error("OemAppSvc Build errApp Error: " + errApp.Error())
			return
		}
		appName := resApp.Name
		appEnName := resApp.NameEn
		if resApp.NameEn == "" {
			appEnName = resApp.Name
		}

		//查询APP模板
		var appTemplate = OemAppTemplateSvc{}
		resAppTemplate, errTemp := appTemplate.FindByIdOemAppTemplate(&proto.OemAppTemplateFilter{Id: resApp.AppTemplateId})
		if errTemp != nil {
			iotlogger.LogHelper.Error("OemAppTemplateSvc Build errApp Error: " + errApp.Error())
			return
		}

		//开始构建语言包
		langJson, errLang := s.GetAppInitLangs(resApp.AppKey, ctxDiy)
		if errLang != nil {
			iotlogger.LogHelper.Error("OemAppSvc Build errApp  GetAppInitLangs  Error: " + errLang.Error())
			return
		}

		//获取logo图地址
		var ui = OemAppUiConfigSvc{}
		ui.Ctx = ctxDiy
		resUi, errUi := ui.FindOemAppUiConfig(&proto.OemAppUiConfigFilter{
			AppId:   appID,
			Version: reqs.Version,
		})
		if errUi != nil {
			iotlogger.LogHelper.Error("OemAppSvc Build errUi Error: " + errUi.Error())
			return
		}

		//Android 证书.
		var aCert = OemAppAndroidCertSvc{}
		aCert.Ctx = ctxDiy
		var resACert *proto.OemAppAndroidCert
		if iotutil.ArraysExistsString(reqs.Os, "2") || iotutil.ArraysExistsString(reqs.Os, "3") {
			var errACert error
			resACert, errACert = aCert.FindOemAppAndroidCert(&proto.OemAppAndroidCertFilter{
				AppId:   appID,
				Version: reqs.Version,
			})
			if errACert != nil {
				iotlogger.LogHelper.Error("OemAppSvc Build errACert Error: " + errACert.Error())
				return
			}
		}

		//IOS 证书
		var iCert = OemAppIosCertSvc{}
		iCert.Ctx = ctxDiy
		var resICert *proto.OemAppIosCert
		var errICert error
		if iotutil.ArraysExistsString(reqs.Os, "1") {
			resICert, errICert = iCert.FindOemAppIosCert(&proto.OemAppIosCertFilter{
				AppId:   appID,
				Version: reqs.Version,
			})
			if errICert != nil {
				iotlogger.LogHelper.Error("OemAppSvc Build errICert Error: " + errICert.Error())
				return
			}
		}

		//push证书
		var aPush = OemAppPushCertSvc{}
		aPush.Ctx = ctxDiy
		resAPush, errAPush := aPush.FindOemAppPushCert(&proto.OemAppPushCertFilter{
			AppId:   appID,
			Version: reqs.Version,
		})
		if errAPush != nil {
			iotlogger.LogHelper.Error("OemAppSvc Build errAPush Error: " + errAPush.Error())
			return
		}

		//功能配置
		var con = OemAppFunctionConfigSvc{}
		con.Ctx = ctxDiy
		resCon, errCon := con.FindOemAppFunctionConfig(&proto.OemAppFunctionConfigFilter{
			AppId:   appID,
			Version: reqs.Version,
		})
		if errCon != nil {
			iotlogger.LogHelper.Error("OemAppSvc Build errCon Error: " + errCon.Error())
			return
		}

		for _, v := range arrBuild {
			//1 ios, 2 android 3 android 海外
			//生成zip包 所需要的数据结构
			var bm = convert.BuildAppEntity{}
			bm.HTML5Folder.Lang = langJson

			//logo图
			bm.Logo1024 = resUi.IconUrl
			if v.Os == 1 {
				//ios启动图
				iosLaunchScreen := iotutil.JsonToMap(resUi.IosLaunchScreen)
				//配合献敏, 只有用户上传了ios启动图. 才会把启动图打包. 如果用户未上传献敏会自己处理启动图
				if iosLaunchScreen["isUse"] != nil && iotutil.ToString(iosLaunchScreen["isUse"]) == "1" {
					bm.IosFolder.LaunchScreen640x960 = iotutil.ToString(iosLaunchScreen["smallImage"])
					bm.IosFolder.LaunchScreen1080x1920 = iotutil.ToString(iosLaunchScreen["mediumImage"])
					bm.IosFolder.LaunchScreen1242x2688 = iotutil.ToString(iosLaunchScreen["bigImage"])
				}
			} else {
				//配合献敏, 只有用户上传了ios启动图. 才会把启动图打包. 如果用户未上传献敏会自己处理启动图
				androidLaunchScreen := iotutil.JsonToMap(resUi.AndroidLaunchScreen)
				if androidLaunchScreen["isUse"] != nil && iotutil.ToString(androidLaunchScreen["isUse"]) == "1" {
					bm.AndroidFolder.LaunchScreen1080x1920 = iotutil.ToString(androidLaunchScreen["smallImage"])
					bm.AndroidFolder.LaunchScreen1080x2160 = iotutil.ToString(androidLaunchScreen["mediumImage"])
					bm.AndroidFolder.LaunchScreen1080x2400 = iotutil.ToString(androidLaunchScreen["bigImage"])
				}
			}

			//个性化
			personalize := iotutil.JsonToMap(resUi.Personalize)
			bm.HTML5Folder.Images.Avatar = iotutil.ToString(personalize["defaultAvatarUrl"])
			bm.HTML5Folder.Images.Background = iotutil.ToString(personalize["loginRegisterBackgroundUrl"])
			bm.HTML5Folder.Images.Logo = iotutil.ToString(personalize["loginRegisterLogoUrl"])
			bm.HTML5Folder.Images.NoData = iotutil.ToString(personalize["noDataUrl"])

			//Android 证书
			if v.Os == 2 || v.Os == 3 {
				bm.AndroidFolder.AndroidKeystore = resACert.Keystore
			}
			//IOS 证书
			if v.Os == 1 {
				bm.IosFolder.Distribution = resICert.DistCert
				bm.IosFolder.IosMobileprovision = resICert.DistProvision
				bm.IosFolder.IosMobileprovisionOfficial = resICert.DistCertOfficial
			}

			//push证书
			if v.Os == 2 || v.Os == 3 {
				if resAPush.Huawei != "" {
					huawei := iotutil.JsonToMap(resAPush.Huawei)
					bm.AndroidFolder.AgconnectServices = iotutil.ToString(huawei["huaweiJson"])
				}
				if resAPush.Fcm != "" {
					fcm := iotutil.JsonToMap(resAPush.Fcm)
					bm.AndroidFolder.GoogleServices = iotutil.ToString(fcm["fcmJson"])
				}
			}
			if v.Os == 1 {
				if resAPush.Apns != "" {
					apns := iotutil.JsonToMap(resAPush.Apns)
					bm.IosFolder.Push = iotutil.ToString(apns["apnsCert"])
				}
			}
			//构建id
			buildId := v.Id
			//初始化
			bm.CommonSh = make(map[string]interface{})
			bm.HTML5Folder.GlobalJs = make(map[string]interface{})
			bm.HTML5Folder.GlobalLess = make(map[string]interface{})
			bm.HTML5Folder.GlobalDarkJs = make(map[string]interface{})
			//bm.CommonSh["app_id"] = iotutil.ToString(appID)
			//输出得到common.sh数据
			//resCon.Thirds
			s.OutputCommonSh(bm.CommonSh, int(v.Os), buildId, resApp, resACert, resICert, resAPush, resUi, resCon, resAppTemplate, ctxDiy)
			//输出得到global.js数据
			bm.HTML5Folder.GlobalJs["appName"] = appName
			bm.HTML5Folder.GlobalJs["appEnName"] = appEnName
			s.OutputGlobalJs(bm.HTML5Folder.GlobalJs, resApp, resUi, resCon, ctxDiy)
			s.OutputGlobalDarkJs(bm.HTML5Folder.GlobalDarkJs, resUi)
			//输出得到global.less数据
			s.OutputGlobalLess(bm.HTML5Folder.GlobalLess, bm.HTML5Folder.GlobalJs)

			//1.创建目录
			tmpDir := iotutil.GetRandomString(18) + "_" + iotutil.ToString(v.Os)
			dirname := s.CreateDir(tmpDir)
			//2.下载文件
			s.DownloadBuildFile(bm, dirname)
			//3.创建 common.sh
			s.CreateCommonSh(bm.CommonSh, dirname)
			//4.创建 global.js
			s.CreateGlobalJs(bm.HTML5Folder.GlobalJs, dirname)
			s.CreateGlobalDarkJs(bm.HTML5Folder.GlobalDarkJs, dirname)
			//5.创建 global.less
			s.CreateGlobalLess(bm.HTML5Folder.GlobalLess, dirname)
			//6.创建语言包的js
			s.CreateLangJs(langJson, dirname)

			//6.打包成zip
			zipName := iotutil.ToString(buildId) + ".zip"
			//zip带文件名的全路径

			//zipFilePath := DirTempBuildRecord+"/"+zipName
			zipFilePath := GetDirPath(DirTempBuildRecord, zipName) //strings.Join([]string{DirTempBuildRecord, zipName}, string(filepath.Separator))

			iotutil.Zip(dirname, zipFilePath)
			//7.zip 上传到oss
			zipUrl, errZipUpload := s.thirdUpload(zipName, zipFilePath)
			if errZipUpload != nil {
				logger.Error("OemAppSvc Build errZipUpload Error: " + errZipUpload.Error())
				//return errZipUpload
			}
			//获取zip包的md5
			zipMd5, _ := iotutil.FileMD5(zipFilePath)

			//7.修改构建数据
			var buildSvc = OemAppBuildRecordSvc{}
			buildSvc.Ctx = ctxDiy
			buildSvc.UpdateUrlAndMd5(&proto.OemAppBuildRecord{
				Id:     v.Id,
				ResUrl: zipUrl,
				ResMd5: zipMd5,
			})
			//8.提交构建请求服务
			bos := "ios"
			if v.Os != 1 {
				bos = "android"
			}
			s.PulisherBuildMessage(iotstruct.BuildInfo{
				ID:       iotutil.ToString(buildId),
				OS:       bos,
				ZipUrl:   zipUrl,
				ZipMd5:   zipMd5,
				NotifUrl: s.GetNotifyUrl(ctxDiy),
				Time:     time.Now().Unix(),
				Type:     1,
			})

		}
	}()

	//更新构建状态
	_, errUp := s.UpdateFieldsOemApp(&proto.OemAppUpdateFieldsRequest{
		Fields: []string{"status"},
		Data: &proto.OemApp{
			Id:     appID,
			Status: 2,
		},
	})
	if errUp != nil {
		iotlogger.LogHelper.Error("OemAppSvc Build errUp Error: " + errUp.Error())
		return errUp
	}

	//保存版本信息
	s.UpdateVersionStatus(appID)
	return nil
}

// 拼凑文件或目录的路径
func GetDirPath(dirName string, name string) string {
	return strings.Join([]string{dirName, name}, string(filepath.Separator))
}

// 拼凑文件或目录的路径 二层
func GetDirPath2(dirName string, dirName2, name string) string {
	return GetDirPath(GetDirPath(dirName, dirName2), name)
}

// 拼凑文件或目录的路径 三层
func GetDirPath3(dirName, dirName2, dirName3 string, name string) string {
	return GetDirPath(GetDirPath(GetDirPath(dirName, dirName2), dirName3), name)
}

func (s *OemAppSvc) CreateGlobalLess(less map[string]interface{}, path string) {
	var val strings.Builder
	for k, v := range less {
		val.WriteString(k + ": " + iotutil.ToString(v) + ";\n")
	}
	f := GetDirPath2(path, "HTML5", "global.less")
	iotutil.WriteFile(f, val.String())
}

func (s *OemAppSvc) CreateLangJs(langs map[string]map[string]interface{}, path string) {
	for k, v := range langs {
		val := "export default " + iotutil.ToString(v)
		f := GetDirPath3(path, "HTML5", "lang", k+".js")
		iotutil.WriteFile(f, val)
	}
}

func (s *OemAppSvc) CreateGlobalJs(js map[string]interface{}, path string) {
	var val strings.Builder
	val.WriteString("export default ")
	val.WriteString(iotutil.ToStringByUrl(js))
	f := GetDirPath2(path, "HTML5", "global.js")
	iotutil.WriteFile(f, val.String())
}

func (s *OemAppSvc) CreateGlobalDarkJs(js map[string]interface{}, path string) {
	var val strings.Builder
	val.WriteString("export default ")
	val.WriteString(iotutil.ToStringByUrl(js))
	f := GetDirPath2(path, "HTML5", "globalDark.js")
	iotutil.WriteFile(f, val.String())
}

// 创建 common.sh
func (s *OemAppSvc) CreateCommonSh(csh map[string]interface{}, path string) {
	var sh strings.Builder
	for k, v := range csh {
		sh.WriteString("readonly " + k + "=" + "\"" + iotutil.ToString(v) + "\"" + "\n")
	}
	f := GetDirPath(path, "common.sh")
	iotutil.WriteFile(f, sh.String())

}

func (s *OemAppSvc) DownloadBuildFile(bm convert.BuildAppEntity, dirname string) error {

	//此处后续考虑批量异步下载

	err := iotutil.DownloadFile(bm.Logo1024, GetDirPath(dirname, "1024.png"))
	if err != nil {
		return fmt.Errorf("DownloadFile %s(url:%s) error:%s", "1024.png", bm.Logo1024, err.Error())
	}
	if bm.AndroidFolder.LaunchScreen1080x1920 != "" {
		err = iotutil.DownloadFile(bm.AndroidFolder.LaunchScreen1080x1920, GetDirPath2(dirname, "android", "1080_1920.png"))
		if err != nil {
			return fmt.Errorf("DownloadFile %s(url:%s) error:%s", "1080_1920.png", bm.AndroidFolder.LaunchScreen1080x1920, err.Error())
		}
		err = iotutil.DownloadFile(bm.AndroidFolder.LaunchScreen1080x2160, GetDirPath2(dirname, "android", "1080_2160.png")) //dirname+"/android/1080_2160.png")
		if err != nil {
			return fmt.Errorf("DownloadFile %s(url:%s) error:%s", "1080_2160.png", bm.AndroidFolder.LaunchScreen1080x2160, err.Error())
		}
		err = iotutil.DownloadFile(bm.AndroidFolder.LaunchScreen1080x2400, GetDirPath2(dirname, "android", "1080_2400.png")) //dirname+"/android/1080_2400.png")
		if err != nil {
			return fmt.Errorf("DownloadFile %s(url:%s) error:%s", "1080_2400.png", bm.AndroidFolder.LaunchScreen1080x2400, err.Error())
		}
	}

	if bm.AndroidFolder.AgconnectServices != "" {
		err = iotutil.DownloadFile(bm.AndroidFolder.AgconnectServices, GetDirPath2(dirname, "android", "agconnect-services.json"))
		if err != nil {
			return fmt.Errorf("DownloadFile %s(url:%s) error:%s", "agconnect-services.json", bm.AndroidFolder.AgconnectServices, err.Error())
		}
	}
	if bm.AndroidFolder.GoogleServices != "" {
		err = iotutil.DownloadFile(bm.AndroidFolder.GoogleServices, GetDirPath2(dirname, "android", "google-services.json"))
		if err != nil {
			return fmt.Errorf("DownloadFile %s(url:%s) error:%s", "google-services.json", bm.AndroidFolder.GoogleServices, err.Error())
		}
	}

	//iotutil.DownloadFile(bm.AndroidFolder.AndroidKeystore,dirname+"/android/android.keystore")
	if bm.AndroidFolder.AndroidKeystore != "" {
		iotutil.CopyFile(bm.AndroidFolder.AndroidKeystore, GetDirPath2(dirname, "android", "android.keystore"))
	}

	if bm.IosFolder.LaunchScreen640x960 != "" {
		err = iotutil.DownloadFile(bm.IosFolder.LaunchScreen640x960, GetDirPath2(dirname, "ios", "640_960.png"))
		if err != nil {
			return fmt.Errorf("DownloadFile %s(url:%s) error:%s", "640_960.png", bm.IosFolder.LaunchScreen640x960, err.Error())
		}
		err = iotutil.DownloadFile(bm.IosFolder.LaunchScreen1080x1920, GetDirPath2(dirname, "ios", "1080_1920.png")) //dirname+"/ios/1080_1920.png")
		if err != nil {
			return fmt.Errorf("DownloadFile %s(url:%s) error:%s", "1080_1920.png", bm.IosFolder.LaunchScreen1080x1920, err.Error())
		}
		err = iotutil.DownloadFile(bm.IosFolder.LaunchScreen1242x2688, GetDirPath2(dirname, "ios", "1242_2688.png")) //dirname+"/ios/1242_2688.png")
		if err != nil {
			return fmt.Errorf("DownloadFile %s(url:%s) error:%s", "1242_2688.png", bm.IosFolder.LaunchScreen1242x2688, err.Error())
		}
	}

	if bm.IosFolder.Distribution != "" {
		err = iotutil.DownloadFile(bm.IosFolder.IosMobileprovision, GetDirPath2(dirname, "ios", "adhoc.mobileprovision"))
		if err != nil {
			return fmt.Errorf("DownloadFile %s(url:%s) error:%s", "adhoc.mobileprovision", bm.IosFolder.IosMobileprovision, err.Error())
		}
		err = iotutil.DownloadFile(bm.IosFolder.IosMobileprovisionOfficial, GetDirPath2(dirname, "ios", "appstore.mobileprovision"))
		if err != nil {
			return fmt.Errorf("DownloadFile %s(url:%s) error:%s", "appstore.mobileprovision", bm.IosFolder.IosMobileprovisionOfficial, err.Error())
		}
		err = iotutil.DownloadFile(bm.IosFolder.Distribution, GetDirPath2(dirname, "ios", "distribution.p12"))
		if err != nil {
			return fmt.Errorf("DownloadFile %s(url:%s) error:%s", "distribution.p12", bm.IosFolder.Distribution, err.Error())
		}
		err = iotutil.DownloadFile(bm.IosFolder.Push, GetDirPath2(dirname, "ios", "push.p12"))
		if err != nil {
			return fmt.Errorf("DownloadFile %s(url:%s) error:%s", "push.p12", bm.IosFolder.Push, err.Error())
		}
	}

	err = iotutil.DownloadFile(bm.HTML5Folder.Images.Avatar, GetDirPath3(dirname, "HTML5", "images", "avatar.png"))
	if err != nil {
		return fmt.Errorf("DownloadFile %s(url:%s) error:%s", "avatar.png", bm.HTML5Folder.Images.Avatar, err.Error())
	}
	err = iotutil.DownloadFile(bm.HTML5Folder.Images.Background, GetDirPath3(dirname, "HTML5", "images", "background.png")) //dirname+"/HTML5/images/background.png")
	if err != nil {
		return fmt.Errorf("DownloadFile %s(url:%s) error:%s", "background.png", bm.HTML5Folder.Images.Background, err.Error())
	}
	err = iotutil.DownloadFile(bm.HTML5Folder.Images.Logo, GetDirPath3(dirname, "HTML5", "images", "logo.png")) //dirname+"/HTML5/images/logo.png")
	if err != nil {
		return fmt.Errorf("DownloadFile %s(url:%s) error:%s", "logo.png", bm.HTML5Folder.Images.Logo, err.Error())
	}
	err = iotutil.DownloadFile(bm.HTML5Folder.Images.NoData, GetDirPath3(dirname, "HTML5", "images", "noData.png")) //dirname+"/HTML5/images/noData.png")
	if err != nil {
		return fmt.Errorf("DownloadFile %s(url:%s) error:%s", "noData.png", bm.HTML5Folder.Images.NoData, err.Error())
	}
	return nil
}

// func (s *OemAppSvc) GetZipFilePath(name string)string{
//     return DirTempBuildRecord+"/"+name
// }

func (s *OemAppSvc) CreateDir(dirname string) string {
	//p := DirTemp+"/build_record" //iotutil.GetCurrentPath()
	dirnamePath := GetDirPath(DirTempBuildRecord, dirname) //strings.Join([]string{DirTempBuildRecord, dirname}, string(filepath.Separator))   //DirTempBuildRecord+"/"+dirname
	iotutil.IsNotExistMkDir(dirnamePath)
	iotutil.IsNotExistMkDir(GetDirPath(dirnamePath, "android"))
	iotutil.IsNotExistMkDir(GetDirPath(dirnamePath, "ios"))
	dirHtml5 := GetDirPath(dirnamePath, "HTML5")
	iotutil.IsNotExistMkDir(dirHtml5)

	iotutil.IsNotExistMkDir(GetDirPath(dirHtml5, "images"))
	iotutil.IsNotExistMkDir(GetDirPath(dirHtml5, "lang"))

	// iotutil.IsNotExistMkDir(dirnamePath+"/android")
	// iotutil.IsNotExistMkDir(dirnamePath+"/HTML5")
	// iotutil.IsNotExistMkDir(dirnamePath+"/HTML5/images")
	// iotutil.IsNotExistMkDir(dirnamePath+"/ios")
	return dirnamePath
}

func (s *OemAppSvc) ConvertMenuKeyByLang(menuKey string, pstion string) string {

	res := ""
	//index_tab_home, index_tab_mine,index_tab_smart, index_tab_3, index_tab_3
	if pstion == "3" {
		res = "index_tab_3"
	} else if pstion == "4" {
		res = "index_tab_4"
	}
	if res == "" {
		if menuKey == "/home" {
			res = "index_tab_home"
		} else if menuKey == "/mine" {
			res = "index_tab_mine"
		} else if menuKey == "/noopsyche" {
			res = "index_tab_smart"
		}
	}
	return res
}

func (s *OemAppSvc) OutputCommonSh(csh map[string]interface{}, os int, buildId int64, app *proto.OemApp,
	aCert *proto.OemAppAndroidCert,
	iCert *proto.OemAppIosCert,
	push *proto.OemAppPushCert, ui *proto.OemAppUiConfig,
	fConfig *proto.OemAppFunctionConfig,
	appTemplate *proto.OemAppTemplate,
	ctx context.Context) error {

	//#!/bin/zsh
	//# Android app包名，必填
	//csh["package_name"] = app.AndroidPkgName  //"com.aithinker.aihome"
	csh["package_name"] = app.AndroidPkgName //"com.aithinker.aihome"  先写死方便测试

	//# iOS app包名，必填
	//csh["bundle_identifier"] =   app.IosPkgName //"com.aithinker.aihome"
	csh["bundle_identifier"] = app.IosPkgName //"com.aithinker.iot.aihome" //"com.aithinker.aihome" 先写死方便测试

	//# app名称，这个放到多语言里？必填
	csh["app_name_zh"] = app.Name //"爱星云"
	if app.NameEn == "" {
		app.NameEn = app.Name
	}
	csh["app_name_en"] = app.NameEn

	//# iOS 版本号: CFBundleShortVersionString ; iOS 构建版本号: CFBundleVersion
	//# Android 版本号: versionName ; Android 构建版本号：versionCode
	//# 版本号 字符串类型，必填
	csh["app_version"] = app.Version //"1.0.0"
	//# 构建版本号 int类型，每次递增，必填
	csh["app_build_version"] = iotutil.GetInt32AndDef(app.AppBuildVersion, 1)
	//# 打包类型: debug: 测试版本； release: 上架版本；必填
	if os == 1 {
		csh["build_type"] = "debug"
	} else {
		csh["build_type"] = "release"
	}

	//# 是否打包国内版本 CN: 国内； other: 国外，必填
	csh["android_build_region"] = "CN" //待斟酌
	//当生成海外安卓包的时候
	if os == 3 {
		csh["android_build_region"] = "other"
	}

	//# Android 原生源码模板版本号，目前固定用master，必填
	//csh["android_native_code_template_branch"] = "master"
	//# iOS 原生源码模板版本号，目前固定用master，必填
	//csh["ios_native_code_template_branch"] = "master"
	//# h5 原生源码模板版本号，目前固定用master，必填
	//csh["h5_code_template_branch"] = "master"

	//# Android 源码git地址，必填
	//csh["android_native_code_git"] = "https://e.coding.net/axk/BAT_AIoT_PaaS/iot-app-android-public-template.git"
	//# iOS 源码git地址，必填
	//csh["ios_native_code_git"] = "https://e.coding.net/axk/BAT_AIoT_PaaS/iot-app-ios-public-template.git"

	//# h5 源码git地址，必填
	if appTemplate != nil && appTemplate.GitUrl != "" {
		csh["code_git"] = appTemplate.GitUrl
		csh["code_version"] = appTemplate.Version

		//TODO 历史预留，之后删除
		csh["h5_code_git"] = appTemplate.GitUrl
		csh["h5_code_template_branch"] = appTemplate.Version
		csh["android_native_code_template_branch"] = appTemplate.Version
		csh["ios_native_code_template_branch"] = appTemplate.Version
	} else {
		return errors.New("未绑定代码仓库")
	}
	if aCert != nil {
		//# Android app 重签名的证书sha256值，选填
		android_app_resign_sha256 := ""
		if aCert.CertSha256 != "" {
			android_app_resign_sha256 = aCert.CertSha256
		}
		csh["android_app_resign_sha256"] = android_app_resign_sha256

		//# Android keystore 文件，必填
		csh["android_keystore_keypass"] = aCert.Keypass
		csh["android_keystore_storepass"] = aCert.Storepass
		csh["android_keystore_alias"] = aCert.AliasKeytool
	} else {
		csh["android_app_resign_sha256"] = ""
		//# Android keystore 文件，必填
		csh["android_keystore_keypass"] = ""
		csh["android_keystore_storepass"] = ""
		csh["android_keystore_alias"] = ""
	}

	//# iOS 证书文件，必填
	if iCert != nil {
		csh["ios_archive_p12_pass"] = iCert.DistCertSecret
	} else {
		csh["ios_archive_p12_pass"] = ""
	}

	if os == 1 {
		if push.Apns != "" {
			apns := iotutil.JsonToMap(push.Apns)
			csh["ios_push_p12_pass"] = iotutil.ToString(apns["apnsSecret"])
		}
	} else {
		csh["ios_push_p12_pass"] = ""
	}

	if os == 2 || os == 3 {
		//# 以下推送选填
		if push.Xiaomi != "" {
			mi := iotutil.JsonToMap(push.Xiaomi)
			csh["xiaomi_appid"] = iotutil.ToString(mi["miId"])
			csh["xiaomi_appkey"] = iotutil.ToString(mi["miKey"])
		}

		if push.Vivo != "" {
			vivo := iotutil.JsonToMap(push.Vivo)
			csh["vivo_appid"] = iotutil.ToString(vivo["vivoId"])
			csh["vivo_appkey"] = iotutil.ToString(vivo["vivoKey"])
		}

		if push.Oppo != "" {
			oppo := iotutil.JsonToMap(push.Oppo)
			csh["oppo_appid"] = iotutil.ToString(oppo["oppoId"])
			csh["oppo_appkey"] = iotutil.ToString(oppo["oppoKey"])
			csh["oppo_appsecret"] = iotutil.ToString(oppo["oppoSecret"])
		}
		csh["meizu_appid"] = ""
		csh["meizu_appkey"] = ""
		csh["honor_appid"] = ""

	} else {
		csh["jpush_appkey"] = ""
		csh["xiaomi_appid"] = ""
		csh["xiaomi_appkey"] = ""
		csh["vivo_appid"] = ""
		csh["vivo_appkey"] = ""
		csh["oppo_appid"] = ""
		csh["oppo_appkey"] = ""
		csh["oppo_appsecret"] = ""
		csh["meizu_appid"] = ""
		csh["meizu_appkey"] = ""
		csh["honor_appid"] = ""
	}

	//# 极光推送的key  ios和Android 都需要.
	if push.Jpush != "" {
		jpush := iotutil.JsonToMap(push.Jpush)
		//# 极光推送，必填
		csh["jpush_appkey"] = iotutil.ToString(jpush["jpushKey"])
	}

	//# 地图相关key
	//# 高德地图，选填
	csh["amap_appkey"] = app.AmapKey
	//# 谷歌地图，选填
	csh["google_map_appkey"] = app.GooglemapKey

	//# 第三方登录相关 key，选填
	csh["wechat_appid"] = ""
	//# iOS 微信登录 需要的，如果填了微信appid，则必填，否则选填
	//csh["weixin_associated_domains"] = ""
	csh["facebook_appid"] = ""

	if fConfig.Thirds != "" {
		thirds := make([]map[string]interface{}, 0)
		err := json.Unmarshal([]byte(fConfig.Thirds), &thirds)
		if err == nil {
			//TODO 输出错误，则错误影响微信登录
			iotlogger.LogHelper.Error(err)
		}
		for _, third := range thirds {
			code := third["code"].(string)
			appId := third["appId"].(string)
			csh[fmt.Sprintf("%s_appid", code)] = appId
		}
	}

	//# 启动图片背景色，当使用背景图片时此值为空，选填
	csh["icon_background_color"] = ""

	//# 两个主题设，必填

	tcolor1 := "#2894FF"
	tcolor2 := "#FCFCFC"
	if ui.ThemeColors != "" {
		theme := iotutil.JsonToMap(ui.ThemeColors)
		tcolor1 = iotutil.ToString(theme["baseColor1"])
		tcolor2 = iotutil.ToString(theme["baseColor2"])
	}
	csh["theme_color"] = tcolor1
	csh["night_theme_color"] = tcolor2

	//# 上传地址，必填
	//csh["upload_url"] = "http://192.168.50.151:8080/v1/platform/web/open/oem/app/buildFinishNotify"  //"https://www.xxx.com/upload/xxx?appid"
	csh["upload_url"] = s.GetNotifyUrl(ctx)
	//# 上传用的账号密码？必填？
	csh["upload_username"] = ""
	csh["upload_password"] = ""
	//# 打包id，必填
	csh["build_id"] = buildId
	csh["app_id"] = app.Id
	csh["app_key"] = app.AppKey
	csh["tenant_id"] = app.TenantId

	//后面加的填空
	csh["honor_appkey"] = ""
	csh["weibo_redirect_url"] = ""
	//{appKey}.open.iot-aithings.com

	//csh["associated_domains"] = fmt.Sprintf("%s.%s", app.AppKey, config.Global.AppBuild.AssociatedDomains)
	associatedDomains := config.Global.AppBuild.AssociatedDomains
	if strings.Index(associatedDomains, "%s") != -1 {
		associatedDomains = fmt.Sprintf(associatedDomains, app.AppKey)
	}
	csh["associated_domains"] = associatedDomains
	csh["alipay_appid"] = ""
	csh["weibo_appkey"] = ""
	csh["weibo_appkey"] = ""
	return nil
}

// global.js
func (s *OemAppSvc) OutputGlobalJs(js map[string]interface{}, app *proto.OemApp, ui *proto.OemAppUiConfig,
	con *proto.OemAppFunctionConfig, ctx context.Context) {
	//主题颜色
	theme := iotutil.JsonToMap(ui.ThemeColors)
	//菜单
	menu := iotutil.JsonToMap(ui.BottomMenu)

	themeColor := iotutil.ToString(theme["baseColor1"])
	js["themeColor"] = themeColor
	bgColor := iotutil.ToString(theme["baseColor2"])            //  "#3B7CFF"           // 主题色
	js["bgColor"] = bgColor                                     //  "#F4F8FE"              // 背景色
	js["assistColor"] = iotutil.ToString(theme["waringColor"])  //  "#FF3333"          // 辅助色，强烈告警颜色
	js["switchColor"] = iotutil.ToString(theme["successColor"]) //  "#38CB52"          // 成功、开关类颜色
	js["tipsColor"] = iotutil.ToString(theme["messageColor"])   //  "#3B7CFF"            // 提示指引色
	ligh := iotutil.ToFloat64(theme["lightness"])
	js["overlayOpacity"] = ligh / 100                       //  0.5             // 蒙版透明度
	js["menuDefColor"] = iotutil.ToString(menu["defColor"]) //  "#343A40"         // 菜单默认颜色
	js["menuSelColor"] = iotutil.ToString(menu["selColor"]) //  "#3B7CFF"         // 菜单选择颜色

	//是否浅色模式
	isColorMode := s.ColorMode(bgColor)
	if isColorMode {
		for k, v := range config.Global.GlobalApp.Color.LightColour {
			js[k] = v
		}
		if _, ok := config.Global.GlobalApp.Color.LightColour["dialogSpecialColor"]; !ok {
			config.Global.GlobalApp.Color.LightColour["dialogSpecialColor"] = "#F4F8FE"
		}
		if _, ok := config.Global.GlobalApp.Color.LightColour["specialColor"]; !ok {
			config.Global.GlobalApp.Color.LightColour["specialColor"] = "#F4F8FE"
		}
		js["dialogSpecialColor"] = config.Global.GlobalApp.Color.LightColour["dialogSpecialColor"] //"#F4F8FE" //特殊颜色，弹窗深色是计算
		js["specialColor"] = config.Global.GlobalApp.Color.LightColour["specialColor"]             //"#F4F8FE" "#FFFFFF"       // 特殊颜色

	} else {
		for k, v := range config.Global.GlobalApp.Color.Dark {
			js[k] = v
		}
		if _, ok := config.Global.GlobalApp.Color.Dark["dialogSpecialColor"]; !ok {
			config.Global.GlobalApp.Color.Dark["dialogSpecialColor"] = "#FFFFFF"
		}
		if _, ok := config.Global.GlobalApp.Color.Dark["specialColor"]; !ok {
			config.Global.GlobalApp.Color.Dark["specialColor"] = "#FFFFFF"
		}
		dialogSpecialColor := iotutil.ToString(config.Global.GlobalApp.Color.Dark["dialogSpecialColor"])
		specialColor := iotutil.ToString(config.Global.GlobalApp.Color.Dark["specialColor"])
		js["dialogSpecialColor"] = s.ColourBlend(bgColor, dialogSpecialColor, 0.05) ////特殊颜色，弹窗深色是计算
		js["specialColor"] = s.ColourBlend(bgColor, specialColor, 0.05)             //特殊颜色
	}
	//数据库中的菜单列表
	menulist := menu["menuList"].([]interface{})
	//排序
	s.SortOemAppDefMenu(menulist)

	//新的菜单列表[按要求的格式]
	var newMenuList = make([]map[string]interface{}, 0)
	//把库中的菜单列表按要求赋值到新的菜单列表上.
	for _, vv := range menulist {
		var newMenu = make(map[string]interface{})
		v := vv.(map[string]interface{})
		newMenu["sort"] = v["position"]
		name := s.ConvertMenuKeyByLang(iotutil.ToString(v["menuKey"]), iotutil.ToString(v["position"]))
		newMenu["name"] = name
		newMenu["type"] = v["required"]
		link := v["menuKey"]
		//自定义菜单位置的话. link 等于 webUrl
		if iotutil.ToString(v["position"]) == "3" || iotutil.ToString(v["position"]) == "4" {
			link = v["webUrl"]
		}
		newMenu["link"] = link //v["menuKey"]
		newMenu["defImage"] = v["defImage"]
		newMenu["selImage"] = v["selImage"]
		newMenuList = append(newMenuList, newMenu)
	}

	js["menuItems"] = newMenuList //iotutil.ToString(newMenuList)
	js["aboutUs"] = con.AboutUs   // 是否支持关于我们
	js["eula"] = "1"              //con.Eula                          // 是否支持用户协议
	js["privacyPolicy"] = "1"     //con.PrivacyPolicy                 // 是否支持隐私政策
	js["weather"] = con.Weather   //天气
	//语种支持
	voices := make(map[string]string, 0)
	voices["alexa"] = "2"
	voices["google"] = "2"
	voices["tianmao"] = "2"
	voices["xiaomi"] = "2"
	if con.Voices != "" {
		dlist := iotutil.JsonToMapArray(con.Voices)
		if dlist != nil && len(dlist) > 0 {
			for _, v := range dlist {
				code := iotutil.ToString(v["code"])
				voices[code] = "1"
			}
		}
	}

	js["appKey"] = app.AppKey                  //"tewjtlltjewlgnwel"      // 租户appkey
	js["tenantId"] = app.TenantId              //  "32545674631468"       // 租户ID
	js["url"] = s.GetBuildRegionServerUrl(ctx) //"http://120.77.64.252:30022" // 区域服务URL-开发环境

}

// global.js
func (s *OemAppSvc) OutputGlobalDarkJs(js map[string]interface{}, ui *proto.OemAppUiConfig) {
	//主题颜色
	theme := iotutil.JsonToMap(ui.ThemeColors)
	themeColor := iotutil.ToString(theme["baseColor1"])
	bgColor := iotutil.ToString(theme["baseColor2"]) //  "#3B7CFF"           // 主题色
	js["themeColor"] = themeColor
	js["bgColor"] = bgColor
	for k, v := range config.Global.GlobalApp.Color.Dark {
		js[k] = v
	}
	if _, ok := config.Global.GlobalApp.Color.Dark["dialogSpecialColor"]; !ok {
		config.Global.GlobalApp.Color.Dark["dialogSpecialColor"] = "#FFFFFF"
	}
	if _, ok := config.Global.GlobalApp.Color.Dark["specialColor"]; !ok {
		config.Global.GlobalApp.Color.Dark["specialColor"] = "#FFFFFF"
	}
	js["dialogSpecialColor"] = config.Global.GlobalApp.Color.Dark["dialogSpecialColor"] //"#F4F8FE" //特殊颜色，弹窗深色是计算
	js["specialColor"] = config.Global.GlobalApp.Color.Dark["specialColor"]             //"#F4F8FE" "#FFFFFF"       // 特殊颜色
}

// 菜单进行升序
func (s *OemAppSvc) SortOemAppDefMenu(list []interface{}) {
	sort.Slice(list, func(i, j int) bool { // asc
		var iNewData = list[i].(map[string]interface{})
		var jNewData = list[j].(map[string]interface{})
		ipos := iotutil.ToInt32(iNewData["position"])
		jpost := iotutil.ToInt32(jNewData["position"])
		return ipos < jpost
	})
}

// global.less
func (s *OemAppSvc) OutputGlobalLess(less map[string]interface{}, jsh map[string]interface{}) {
	less["@theme-color"] = jsh["themeColor"]               //"#3B7CFF"        // 主题色
	less["@bg-color"] = jsh["bgColor"]                     //"#F4F8FE"           // 背景色
	less["@assist-color"] = jsh["assistColor"]             // "#FF3333"       // 辅助色，强烈告警颜色
	less["@switch-color"] = jsh["switchColor"]             // "#38CB52"       // 成功、开关类颜色
	less["@tips-color"] = jsh["tipsColor"]                 // "#3B7CFF"         // 提示指引色
	less["@overlay-opacity"] = jsh["overlayOpacity"]       // "0.5"          // 蒙版透明度
	less["@menu-def-color"] = jsh["menuDefColor"]          // "#343A40"     // 菜单默认颜色
	less["@menu-sel-color"] = jsh["menuSelColor"]          // "#3B7CFF"     // 菜单选择颜色
	less["@main-color"] = jsh["mainColor"]                 // "#343A40"    // 重要文字
	less["@plain-color"] = jsh["plainColor"]               // "#70757D"    // 普通文字
	less["@secondary-color"] = jsh["secondaryColor"]       // "#8392A7 "   // 次要信息
	less["@card-bg-color"] = jsh["cardBgColor"]            // "#FFFFFF"      // 卡片底色
	less["@dialog-bg-color"] = jsh["dialogBgColor"]        // "#FFFFFF"    // 弹窗底色
	less["@dialog-btn-bg-color"] = jsh["dialogBtnBgColor"] // "#F4F8FE"// 弹窗操作按钮底色
	less["@divider-color"] = jsh["dividerColor"]           // "#F4F8FE "     // 分割线
	less["@arrow-right-color"] = jsh["arrowRightColor"]    // "#8392A7 " // 列表右侧箭头
	less["@arrow-left-color"] = jsh["arrowLeftColor"]      // "#70757D"   // 导航栏左侧返回箭头
	less["@special-color"] = jsh["specialColor"]           // "#FEFEFE"      // 特殊颜色
	less["@line-color"] = jsh["lineColor"]
	less["@ring-color"] = jsh["ringColor"]
	less["@solid-color"] = jsh["solidColor"]
	less["@no-selected-bg-color"] = jsh["noSelectedBgColor"]
	less["@no-selected-bnt-bg-color"] = jsh["noSelectedBntBgColor"]
	//less["@no-selected-color"] = jsh["noSelectedColor"]

	//less["@search-color"] = jsh["searchColor"]
	less["@circle-color"] = jsh["circleColor"]
	//less["@account-color"] = jsh["accountColor"]
	less["@share-color"] = jsh["shareColor"]
	less["@guanji-color"] = jsh["guanjiColor"]
	less["@guanji-bg-color"] = jsh["guanjiBgColor"]

	less["@dashed-color"] = jsh["dashedColor"]
	less["@offLine-card-bg-color"] = jsh["offLineCardBgColor"]

	less["@onLine-card-bg-color"] = jsh["onLineCardBgColor"]

	less["@dialog-special-color"] = jsh["dialogSpecialColor"]

	less["@card-shadow"] = jsh["cardShadow"]
	less["@bottom-shadow"] = jsh["bottomShadow"]

}

// func (s *OemAppSvc) GetKeyToolExePath() string {
//     p := iotutil.GetCurrentPath()
// 	p = strings.Replace(p,"/service","",1)
// 	p = p+"/keystore"
// 	pe := p+"/keytool.exe"
//     return pe
// }

// func (s *OemAppSvc) GetKeyToolDirPath() string{

//     tempPathDir := "/usr/local/bat/keytool"

//     return tempPathDir

// }

// func (s *OemAppSvc) OutputKeystoreFile(req convert.KeyToolEntity )(string,error){
// 	//keytool -genkeypair -alias serverkey -keypass 111111 -storepass 111111 -dname "C=CN,ST=GD,L=SZ,O=vihoo,OU=dev,CN=vihoo.com" -keyalg RSA -keysize 2048 -validity 3650 -keystore server.keystore
// 	// storepass keystore 文件存储密码
// 	// keypass 私钥加解密密码
// 	// alias 实体别名(包括证书私钥)
// 	// dname 证书个人信息 CN=公司名,OU=部门,O=公司名,L=市,ST=湖南,C=国籍(CN)
// 	// keyalt 采用公钥算法，默认是DSA
// 	// keysize 密钥长度(DSA算法对应的默认算法是sha1withDSA，不支持2048长度，此时需指定RSA)
// 	// validity 有效期
// 	// keystore 指定keystore文件
//     p := s.GetDirPath()
// 	storeFileName := req.KeystoreName+".keystore"
//     storeFilePathName := p+"/files/"+storeFileName
// 	//pe := s.GetKeyToolExePath()
// 	err := exec.Command("keytool", "-genkeypair","-alias",req.Alias ,"-keypass",req.Keypass,"-storepass",req.Storepass,"-dname","C="+req.Dname["C"]+",ST="+req.Dname["ST"]+",L="+req.Dname["L"]+",O="+req.Dname["O"]+",OU="+req.Dname["OU"]+",CN="+req.Dname["CN"]+"","-keyalg",
// 	req.Keyalt,"-keysize", req.Keysize,"-validity",req.Validity,"-keystore",storeFilePathName,"-storetype","PKCS12").Run()

// 	if err != nil{
// 		return "", err
// 	}
//     //带全路径的文件名, 单独的文件名
//     return storeFilePathName,nil

// }

// 参考  https://developer.aliyun.com/article/617244
// 产生keystoken文件
func (s *OemAppSvc) OutputKeystoreFile(req convert.KeyToolEntity) (string, error) {
	//keytool -genkeypair -alias serverkey -keypass 111111 -storepass 111111 -dname "C=CN,ST=GD,L=SZ,O=vihoo,OU=dev,CN=vihoo.com" -keyalg RSA -keysize 2048 -validity 3650 -keystore server.keystore
	// storepass keystore 文件存储密码
	// keypass 私钥加解密密码
	// alias 实体别名(包括证书私钥)
	// dname 证书个人信息 CN=公司名,OU=部门,O=公司名,L=市,ST=湖南,C=国籍(CN)
	// keyalt 采用公钥算法，默认是DSA
	// keysize 密钥长度(DSA算法对应的默认算法是sha1withDSA，不支持2048长度，此时需指定RSA)
	// validity 有效期
	// keystore 指定keystore文件
	// p := iotutil.GetCurrentPath()
	// p = strings.Replace(p,"/service","",1)
	// p = p+"/keystore"
	storeFileName := req.KeystoreName + ".keystore"
	//storeFilePathName := p+"/files/"+storeFileName
	errDir := iotutil.MkDir(DirKeytoolFile)
	if errDir != nil {
		logger.Error("目录创建错误[" + DirKeytoolFile + "],错误:" + errDir.Error())
	}
	storeFilePathName := GetDirPath(DirKeytoolFile, storeFileName) //  DirKeytoolFile +"/"+storeFileName
	//pe := s.GetKeyToolExePath()
	//err := exec.Command("keytool", "-genkeypair", "-alias", req.Alias, "-keypass", req.Keypass, "-storepass", req.Storepass, "-dname", "C="+req.Dname["C"]+",ST="+req.Dname["ST"]+",L="+req.Dname["L"]+",O="+req.Dname["O"]+",OU="+req.Dname["OU"]+",CN="+req.Dname["CN"]+"", "-keyalg",
	//	req.Keyalt, "-keysize", req.Keysize, "-validity", req.Validity, "-keystore", storeFilePathName, "-storetype", "PKCS12").Run()
	commandParams := []string{
		"-genkeypair", "-alias", req.Alias, "-keypass", req.Keypass, "-storepass", req.Storepass, "-dname", "C=" + req.Dname["C"] + ",ST=" + req.Dname["ST"] + ",L=" + req.Dname["L"] + ",O=" + req.Dname["O"] + ",OU=" + req.Dname["OU"] + ",CN=" + req.Dname["CN"] + "", "-keyalg",
		req.Keyalt, "-keysize", req.Keysize, "-validity", req.Validity, "-keystore", storeFilePathName, "-storetype", "PKCS12",
	}
	strCommand := strings.Join(commandParams, " ")
	iotlogger.LogHelper.Info("commang: keytool ", strCommand)
	err := exec.Command("keytool", commandParams...).Run()

	iotlogger.LogHelper.Info("============================keytools-start====================================")
	iotlogger.LogHelper.Info(storeFilePathName)
	iotlogger.LogHelper.Info(iotutil.ToString(req))
	iotlogger.LogHelper.Info("=============================keytools-end===================================")

	if err != nil {
		return "", err
	}
	//带全路径的文件名, 单独的文件名
	return storeFilePathName, nil

}

// 根据keystore文件获取md5,sha1,sha256的值
func (s *OemAppSvc) GetKeystoreShas(keystoreFileName string, storepass string) (string, string, string, error) {

	//str,err := s.ReadKeyStoreInfo("server.keystore","111111")
	str, err := s.ReadKeyStoreInfo(keystoreFileName, storepass)
	if err != nil {
		return "", "", "", err
	}
	logger.Info("=====================GetKeystoreShas start=============================================")
	logger.Info(str)
	logger.Info("=====================GetKeystoreShas end=============================================")
	var regMD5 = regexp.MustCompile(`MD5:(.*)`)
	var regSHA1 = regexp.MustCompile(`SHA1: (.*)`)
	var regSHA256 = regexp.MustCompile(`SHA256:(.*)`)

	md5Line := regMD5.FindString(str)
	sha1Line := regSHA1.FindString(str)
	sha256Line := regSHA256.FindString(str)

	logger.Info(md5Line + "|" + sha1Line + "|")

	// fmt.Println(md5Line)
	logger.Info("md5---->", s.getLastString(md5Line))
	// fmt.Println(sha1Line)
	logger.Info("sha1---->", s.getLastString(sha1Line))
	// fmt.Println(sha256Line)
	logger.Info("sha256---->", s.getLastString(sha256Line))
	return s.getLastString(md5Line), s.getLastString(sha1Line), s.getLastString(sha256Line), nil
}

func (s *OemAppSvc) GetKeystoreFingerprint(keystoreFileName string, storepass string) (string, string, string, error) {
	keystore, err := ioutil.ReadFile(keystoreFileName)
	if err != nil {
		return "", "", "", err
	}
	priv, cert, err := pkcs12.Decode(keystore, storepass)
	if err != nil {
		return "", "", "", err
	}
	if err := priv.(*rsa.PrivateKey).Validate(); err != nil {
		return "", "", "", err
	}
	MD5 := md5.Sum(cert.Raw)
	retMD5 := iotutil.InsertColon(strings.ToUpper(hex.EncodeToString(MD5[:])), 2)
	sha1 := sha1.Sum(cert.Raw)
	retsha1 := iotutil.InsertColon(strings.ToUpper(hex.EncodeToString(sha1[:])), 2)
	sha256 := sha256.Sum256(cert.Raw)
	retsha256 := iotutil.InsertColon(strings.ToUpper(hex.EncodeToString(sha256[:])), 2)
	return retMD5, retsha1, retsha256, nil
}

func (s *OemAppSvc) ReadKeyStoreInfo(file string, pass string) (string, error) {
	//pe := s.GetKeyToolExePath()
	//cmd := exec.Command("keytool", "-v","-list", "-keystore",file,"-storepass",pass)
	cmd := exec.Command("keytool", "-v", "-list", "-keystore", file, "-storepass", pass)
	tmpFile, err := ioutil.TempFile(os.TempDir(), "key"+strconv.Itoa(int(time.Now().Unix())))
	if err != nil {
		return "", err
	}
	defer os.Remove(tmpFile.Name())
	cmd.Stdout = tmpFile
	cmd.Stderr = tmpFile
	err = cmd.Start()
	if err != nil {
		return "", err
	}
	err = cmd.Wait()
	tmpFile.Close()
	if err != nil {
		buf, _ := ioutil.ReadFile(tmpFile.Name())
		return "", errors.New(string(buf))
	}
	buf, err := ioutil.ReadFile(tmpFile.Name())
	return string(buf), err
}

func (s *OemAppSvc) getLastString(str string) string {
	list := strings.Split(str, " ")
	if len(list) > 0 {
		return list[len(list)-1]
	}
	return ""
}

/**
 * 颜色模式
 * @param {array} bgColor rgb数组
 * @returns 浅色模式: true  深色模式：false
 */
func (s *OemAppSvc) ColorMode(bgColor string) bool {

	n1, _ := strconv.ParseInt(bgColor[1:3], 16, 32)
	n2, _ := strconv.ParseInt(bgColor[3:5], 16, 32)
	n3, _ := strconv.ParseInt(bgColor[5:7], 16, 32)

	r1 := iotutil.ToFloat32(n1)
	g1 := iotutil.ToFloat32(n2)
	b1 := iotutil.ToFloat32(n3)
	return 0.213*r1+0.715*g1+0.072*b1 >= 255/2
}

/**
 * 两个颜色混合
 * @param {*} c1  #562562
 * @param {*} c2  #562562
 * @param {*} ratio  0.05
 * @returns
 */
func (s *OemAppSvc) ColourBlend(c1 string, c2 string, ratio float64) string {
	//ratio := Math.max(Math.min(Number(ratio), 1), 0)

	// ratio = Math.max(Math.min(Number(ratio), 1), 0)
	// let r1 = parseInt(c1.substring(1, 3), 16)
	// let g1 = parseInt(c1.substring(3, 5), 16)
	// let b1 = parseInt(c1.substring(5, 7), 16)
	// let r2 = parseInt(c2.substring(1, 3), 16)
	// let g2 = parseInt(c2.substring(3, 5), 16)
	// let b2 = parseInt(c2.substring(5, 7), 16)
	r1 := iotutil.ToFloat64(iotutil.Convert16To10(c1[1:3]))
	g1 := iotutil.ToFloat64(iotutil.Convert16To10(c1[3:5]))
	b1 := iotutil.ToFloat64(iotutil.Convert16To10(c1[5:7]))
	r2 := iotutil.ToFloat64(iotutil.Convert16To10(c2[1:3]))
	g2 := iotutil.ToFloat64(iotutil.Convert16To10(c2[3:5]))
	b2 := iotutil.ToFloat64(iotutil.Convert16To10(c2[5:7]))

	// let r = Math.round(r1 * (1 - ratio) + r2 * ratio)
	// let g = Math.round(g1 * (1 - ratio) + g2 * ratio)
	// let b = Math.round(b1 * (1 - ratio) + b2 * ratio)
	r := iotutil.Round4s5r(r1*(1-ratio) + r2*ratio)
	g := iotutil.Round4s5r(g1*(1-ratio) + g2*ratio)
	b := iotutil.Round4s5r(b1*(1-ratio) + b2*ratio)

	//r = ('0' + (r || 0).toString(16)).slice(-2)
	//g = ('0' + (g || 0).toString(16)).slice(-2)
	//b = ('0' + (b || 0).toString(16)).slice(-2)
	rStr := strconv.FormatInt(r, 16)
	gStr := strconv.FormatInt(g, 16)
	bStr := strconv.FormatInt(b, 16)
	val := strings.ToUpper("#" + rStr + gStr + bStr)
	return val

}

func (s *OemAppSvc) thirdUpload(name string, path string) (string, error) {
	newName := iotutil.ConnectPath("oem", name)
	switch config.Global.Oss.UseOss {
	case "ali":
		return s.ossUpload(newName, path)
	case "qiniu":
		return s.qiniuUpload(newName, path)
	case "s3":
		return s.s3Upload(newName, path)
	}
	return "", nil
}

func (s *OemAppSvc) ossUpload(name string, path string) (string, error) {
	cnf := config.Global.Oss.Ali
	oss := file_store.OXS{
		Endpoint:        cnf.Endpoint,
		AccessKeyID:     cnf.AccessKeyID,
		AccessKeySecret: cnf.AccessKeySecret,
		BucketName:      cnf.BucketName,
	}
	ossType := oss.Setup(file_store.AliYunOSS)
	err := ossType.UpLoad(name, path)
	if err != nil {
		return "", err
	}
	url := ossType.GetPublicUrl(name)
	return url, nil
}

func (s *OemAppSvc) qiniuUpload(name string, path string) (string, error) {
	cnf := config.Global.Oss.Qiniu
	oss := file_store.OXS{
		Endpoint:        cnf.Endpoint,
		AccessKeyID:     cnf.AccessKeyID,
		AccessKeySecret: cnf.AccessKeySecret,
		BucketName:      cnf.BucketName,
	}
	ossType := oss.Setup(file_store.QiNiuKodo)
	err := ossType.UpLoad(name, path)
	if err != nil {
		return "", err
	}
	url := ossType.GetPublicUrl(name)
	return url, nil //fmt.Sprintf("https://%s/%s", oss.Endpoint, url), nil
}

func (s *OemAppSvc) s3Upload(name string, path string) (string, error) {
	cnf := config.Global.Oss.S3
	oss := file_store.OXS{
		Endpoint:        cnf.Endpoint,
		AccessKeyID:     cnf.AccessKeyID,
		AccessKeySecret: cnf.AccessKeySecret,
		BucketName:      cnf.BucketName,
		Region:          cnf.Region,
	}
	ossType := oss.Setup(file_store.AwsS3Kodo)
	err := ossType.UpLoad(name, path)
	if err != nil {
		return "", err
	}
	url := ossType.GetPublicUrl(name)
	return url, nil
}

func (s *OemAppSvc) PulisherBuildMessage(bi iotstruct.BuildInfo) error {
	addrs := config.Global.Nats.Addrs
	p, err := jetstream.NewJSPublisher("build_app_message", BUILD_APP, BUILD_APP+"."+bi.OS, connerrhandler, addrs...)
	if err != nil {
		return err
	}
	//2 发布消息
	buf, err := json.Marshal(bi)
	if err != nil {
		return err
	}

	err = p.PublishEx([]byte(buf), handler)
	if err != nil {
		//log.Println(err.Error())
	} else {
		//log.Println("消息发送成功:", buf)
	}
	time.Sleep(5 * time.Second)
	//3 当不需要时关闭
	p.Close()
	return nil
}
func connerrhandler(conn *nats.Conn, err error) {

}
func handler(msg *nats.Msg, err error) {

}

func (s *OemAppSvc) OemAppUpdateVersion(appId int64, oldVersion string, newVersion string) error {
	//查询APP
	oemApp, err := s.FindByIdOemApp(&proto.OemAppFilter{Id: appId})
	if err != nil {
		return err
	}

	var ui = OemAppUiConfigSvc{}
	uidata, _ := ui.FindOemAppUiConfig(&proto.OemAppUiConfigFilter{
		AppId:   appId,
		Version: oldVersion,
	})
	uidata.Version = newVersion
	uidata.Id = iotutil.GetNextSeqInt64()
	ui.CreateOemAppUiConfig(uidata)

	var push = OemAppPushCertSvc{}
	pushData, _ := push.FindOemAppPushCert(&proto.OemAppPushCertFilter{
		AppId:   appId,
		Version: oldVersion,
	})
	pushData.Version = newVersion
	pushData.Id = iotutil.GetNextSeqInt64()
	push.CreateOemAppPushCert(pushData)

	var icert = OemAppIosCertSvc{}
	icertData, _ := icert.FindOemAppIosCert(&proto.OemAppIosCertFilter{
		AppId:   appId,
		Version: oldVersion,
	})
	icertData.Version = newVersion
	icertData.Id = iotutil.GetNextSeqInt64()
	icert.CreateOemAppIosCert(icertData)

	var fun = OemAppFunctionConfigSvc{}
	funData, _ := fun.FindOemAppFunctionConfig(&proto.OemAppFunctionConfigFilter{
		AppId:   appId,
		Version: oldVersion,
	})
	funData.Version = newVersion
	funData.Id = iotutil.GetNextSeqInt64()
	fun.CreateOemAppFunctionConfig(funData)

	var acert = OemAppAndroidCertSvc{}
	acertData, _ := acert.FindOemAppAndroidCert(&proto.OemAppAndroidCertFilter{
		AppId:   appId,
		Version: oldVersion,
	})
	acertData.Version = newVersion
	acertData.Id = iotutil.GetNextSeqInt64()
	acert.CreateOemAppAndroidCert(acertData)

	_, errApp := s.UpdateFieldsOemApp(&proto.OemAppUpdateFieldsRequest{
		Fields: []string{"status", "version", "current_step", "app_build_version"},
		Data: &proto.OemApp{
			Id:              appId,
			Version:         newVersion,
			AppBuildVersion: oemApp.AppBuildVersion + 1, //构建版本自动加一
			Status:          1,
			CurrentStep:     1,
		},
	})
	if errApp != nil {
		return errApp
	}

	//保存版本信息
	s.UpdateVersionStatus(appId)

	return nil
}

func (s *OemAppSvc) OemAppSaveIcon(req *proto.OemAppSaveIconReq) error {

	//diyCtx := s.CopyNewContext(s.Ctx)

	//go func ()  {
	var ui = OemAppUiConfigSvc{}
	var appSvc = OemAppSvc{}
	ui.Ctx = s.Ctx
	resUi, errUi := ui.FindByIdOemAppUiConfig(&proto.OemAppUiConfigFilter{
		Id: req.Id,
	})
	if errUi != nil {
		logger.Error("OemAppSaveIcon FindByIdOemAppUiConfig Error:" + errUi.Error())
		//return errUi
	}

	tempPathDir := DirLaunchScreenDefaultImage
	//创建目录
	errMkDir := iotutil.MkDir(tempPathDir)
	if errMkDir != nil {
		logger.Error("创建目录" + tempPathDir + "错误:" + errMkDir.Error())
	}

	logoPath := GetDirPath(tempPathDir, iotutil.GetRandomPureString(20)+"_logo.png") // tempPathDir+"/"+iotutil.GetRandomPureString(20)+"_logo.png"
	logoUrl := req.IconUrl
	//下载logoPath
	errlogo := iotutil.DownloadFile(logoUrl, logoPath)
	if errlogo != nil {
		logger.Error("下载logo图片失败. [" + logoPath + "],[" + logoUrl + "]" + "错误:" + errlogo.Error())
	}

	var iosImg = make(map[string]interface{})
	if resUi.IosLaunchScreen != "" {
		iosImg = iotutil.JsonToMap(resUi.IosLaunchScreen)
	} else {
		iosImg["id"] = iotutil.ToString(req.Id)
		////配合献敏, 只有用户上传了ios启动图. 才会把启动图打包. 如果用户未上传献敏会自己处理启动图
		iosImg["isUse"] = 2
	}

	if iosImg["smallImage"] == nil || iotutil.ToString(iosImg["smallImage"]) == "" {
		//640x960开始生成各种规格的图片.
		imgName640x960 := iotutil.GetRandomPureString(20) + ".png"

		imgAllPath640x960 := GetDirPath(tempPathDir, imgName640x960) //tempPathDir +"/"+ imgName640x960
		//先把logo调整到 144x144.然后再设置圆角再加白色背景
		//iotutil.ImageResize(logoPath,imgAllPath640x960,144,144)
		iotutil.GenLaunchImageFromIcon(logoPath, imgAllPath640x960, 640, 960, 16)
		var err640x960 error
		imgUrl640x960, err640x960 := s.thirdUpload(imgName640x960, imgAllPath640x960)
		if err640x960 != nil {
			logger.Error("OemAppExecDefaultImages oss upload Error: " + err640x960.Error())
		}
		iosImg["smallImage"] = imgUrl640x960
	}
	if iosImg["mediumImage"] == nil || iotutil.ToString(iosImg["mediumImage"]) == "" {
		//1080x1920开始生成各种规格的图片.
		imgName1080x1920 := iotutil.GetRandomPureString(20) + ".png"
		imgAllPath1080x1920 := GetDirPath(tempPathDir, imgName1080x1920) //tempPathDir +"/"+ imgName1080x1920
		//先把logo调整到 216x216.然后再设置圆角再加白色背景
		//iotutil.ImageResize(logoPath,imgAllPath1080x1920,216,216)
		iotutil.GenLaunchImageFromIcon(logoPath, imgAllPath1080x1920, 1080, 1920, 24)
		imgUrl1080x1920, err1080x1920 := s.thirdUpload(imgName1080x1920, imgAllPath1080x1920)
		if err1080x1920 != nil {
			logger.Error("OemAppExecDefaultImages oss upload Error: " + err1080x1920.Error())
		}
		iosImg["mediumImage"] = imgUrl1080x1920
	}

	if iosImg["bigImage"] == nil || iotutil.ToString(iosImg["bigImage"]) == "" {
		//1242x2688开始生成各种规格的图片.
		imgName1242x2688 := iotutil.GetRandomPureString(20) + ".png"
		imgAllPath1242x2688 := GetDirPath(tempPathDir, imgName1242x2688) //tempPathDir +"/"+ imgName1242x2688
		//先把logo调整到 216x216.然后再设置圆角再加白色背景
		//iotutil.ImageResize(logoPath,imgAllPath1242x2688,216,216)
		iotutil.GenLaunchImageFromIcon(logoPath, imgAllPath1242x2688, 1242, 2688, 24)

		imgUrl1242x2688, err1242x2688 := s.thirdUpload(imgName1242x2688, imgAllPath1242x2688)
		if err1242x2688 != nil {
			logger.Error("OemAppExecDefaultImages oss upload Error: " + err1242x2688.Error())
		}
		iosImg["bigImage"] = imgUrl1242x2688
	}

	var androidImg = make(map[string]interface{})
	if resUi.AndroidLaunchScreen != "" {
		androidImg = iotutil.JsonToMap(resUi.AndroidLaunchScreen)
	} else {
		androidImg["id"] = iotutil.ToString(req.Id)
		////配合献敏, 只有用户上传了ios启动图. 才会把启动图打包. 如果用户未上传献敏会自己处理启动图
		androidImg["isUse"] = 2
	}

	if androidImg["smallImage"] == nil || iotutil.ToString(androidImg["smallImage"]) == "" {
		//1080x1920开始生成各种规格的图片.
		imgName1080x1920 := iotutil.GetRandomPureString(20) + ".png"
		imgAllPath1080x1920 := GetDirPath(tempPathDir, imgName1080x1920) //tempPathDir +"/"+ imgName1080x1920
		//先把logo调整到 216x216.然后再设置圆角再加白色背景
		//iotutil.ImageResize(logoPath,imgAllPath1080x1920,216,216)
		iotutil.GenLaunchImageFromIcon(logoPath, imgAllPath1080x1920, 1080, 1920, 24)
		imgUrl1080x1920, err1080x1920 := s.thirdUpload(imgName1080x1920, imgAllPath1080x1920)
		if err1080x1920 != nil {
			logger.Error("OemAppExecDefaultImages oss upload Error: " + err1080x1920.Error())
		}
		androidImg["smallImage"] = imgUrl1080x1920
	}

	if androidImg["mediumImage"] == nil || iotutil.ToString(androidImg["mediumImage"]) == "" {
		//640x960开始生成各种规格的图片.
		imgName1080x2160 := iotutil.GetRandomPureString(20) + ".png"
		imgAllPath1080x2160 := GetDirPath(tempPathDir, imgName1080x2160) //tempPathDir +"/"+ imgName1080x2160
		//先把logo调整到 216x216.然后再设置圆角再加白色背景
		//iotutil.ImageResize(logoPath,imgAllPath1080x2160,216,216)
		iotutil.GenLaunchImageFromIcon(logoPath, imgAllPath1080x2160, 1080, 2160, 24)
		imgUrl1080x2160, err1080x2160 := s.thirdUpload(imgName1080x2160, imgAllPath1080x2160)
		if err1080x2160 != nil {
			logger.Error("OemAppExecDefaultImages oss upload Error: " + err1080x2160.Error())
		}
		androidImg["mediumImage"] = imgUrl1080x2160
	}

	if androidImg["bigImage"] == nil || iotutil.ToString(androidImg["bigImage"]) == "" {
		//1242x2688开始生成各种规格的图片.
		imgName1080x2400 := iotutil.GetRandomPureString(20) + ".png"
		imgAllPath1080x2400 := GetDirPath(tempPathDir, imgName1080x2400) //tempPathDir +"/"+ imgName1080x2400
		//先把logo调整到 216x216.然后再设置圆角再加白色背景
		//iotutil.ImageResize(logoPath,imgAllPath1080x2400,216,216)
		iotutil.GenLaunchImageFromIcon(logoPath, imgAllPath1080x2400, 1080, 2400, 24)
		imgUrl1080x2400, err1080x2400 := s.thirdUpload(imgName1080x2400, imgAllPath1080x2400)
		if err1080x2400 != nil {
			logger.Error("OemAppExecDefaultImages oss upload Error: " + err1080x2400.Error())
		}
		androidImg["bigImage"] = imgUrl1080x2400
	}

	strIosJson := iotutil.ToStringByUrl(iosImg)
	strAndroidJson := iotutil.ToStringByUrl(androidImg)

	_, errUp := ui.UpdateFieldsOemAppUiConfig(&proto.OemAppUiConfigUpdateFieldsRequest{
		Fields: []string{"ios_launch_screen", "android_launch_screen", "icon_url"},
		Data: &proto.OemAppUiConfig{
			Id:                  req.Id,
			IosLaunchScreen:     strIosJson,
			AndroidLaunchScreen: strAndroidJson,
			IconUrl:             req.IconUrl,
		},
	})
	if errUp != nil {
		logger.Error("OemAppSaveIcon UpdateFieldsOemAppUiConfig Error:" + errUp.Error())
	}
	_, errUp = appSvc.UpdateFieldsOemApp(&proto.OemAppUpdateFieldsRequest{
		Fields: []string{"app_icon_url"},
		Data: &proto.OemApp{
			Id:         resUi.AppId,
			AppIconUrl: req.IconUrl,
		},
	})
	if errUp != nil {
		logger.Error("OemAppSaveIcon UpdateFieldsOemApp Error:" + errUp.Error())
	}
	//}
	return nil
}

// 根据分页条件查找OemApp,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OemAppSvc) ListsByAppKeys(req *proto.ListsByAppKeysRequest) ([]*proto.OemApp, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOemApp
	do := t.WithContext(context.Background())

	if len(req.AppKeys) == 0 { //
		return make([]*proto.OemApp, 0), 0, nil
	}
	do = do.Where(t.AppKey.In(req.AppKeys...))
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	var list []*model.TOemApp
	var total int64

	list, err = do.Find()
	total = int64(len(list))
	if err != nil {
		logger.Errorf("GetListOemApp error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OemApp, len(list))
	for i, v := range list {
		result[i] = convert.OemApp_db2pb(v)
	}
	return result, total, nil
}

func (s *OemAppSvc) GetAppInitLangs(appKey string, ctx context.Context) (map[string]map[string]interface{}, error) {
	//优先下载自己的资源
	crs, err := rpcClient.ClientLangCustomResourceService.Lists(ctx, &proto.LangCustomResourcesListRequest{
		Query: &proto.LangCustomResources{
			AppKey: appKey,
		},
	})
	if err == nil && crs.Code == 200 && crs.Data != nil && len(crs.Data) > 0 {
		resLang := s.LangCustomResultConvert(crs.Data)
		return resLang, nil
	}

	rep, err := rpcClient.ClientLangResourcesService.Lists(ctx, &proto.LangResourcesListRequest{
		Query: &proto.LangResources{BelongType: 3},
	})
	if err != nil {
		return nil, err
	}
	if rep.Code != 200 {
		return nil, errors.New(rep.Message)
	}
	resLang := s.LangResultConvert(rep.Data)
	return resLang, nil

}

func (s *OemAppSvc) LangCustomResultConvert(res []*proto.LangCustomResources) map[string]map[string]interface{} {
	dateList := map[string]map[string]interface{}{}
	for _, v := range res {
		lang := v.Lang
		_, ok := dateList[lang]
		if !ok {
			dateList[lang] = map[string]interface{}{}
		}
		//list = append(list, map[string]interface{}{
		//	v.Code:v.Value,
		//})
		dateList[lang][v.Code] = v.Value
	}
	return dateList
}

func (s *OemAppSvc) LangResultConvert(res []*proto.LangResources) map[string]map[string]interface{} {
	dateList := map[string]map[string]interface{}{}
	for _, v := range res {
		lang := v.Lang
		_, ok := dateList[lang]
		if !ok {
			dateList[lang] = map[string]interface{}{}
		}
		//list = append(list, map[string]interface{}{
		//	v.Code:v.Value,
		//})
		dateList[lang][v.Code] = v.Value
	}
	return dateList
}

func (s *OemAppSvc) UpdateVersionStatus(id int64) {
	var err error
	q := orm.Use(iotmodel.GetDB())
	err = q.Transaction(func(tx *orm.Query) error {
		var vstatus VersionStatus
		err = tx.TOemApp.WithContext(context.Background()).Select(tx.TOemApp.Version, tx.TOemApp.Status).Where(tx.TOemApp.Id.Eq(id)).Scan(&vstatus)
		if err != nil {
			return err
		}
		_, err = tx.TOemAppVersionRecord.WithContext(context.Background()).Where(tx.TOemAppVersionRecord.AppId.Eq(id), tx.TOemAppVersionRecord.Version.Eq(vstatus.Version)).Delete()
		if err != nil {
			return err
		}
		ver := model.TOemAppVersionRecord{AppId: id, Version: vstatus.Version, Status: vstatus.Status, UpdatedAt: time.Now()}
		return tx.TOemAppVersionRecord.WithContext(context.Background()).Create(&ver)
	})
	if err != nil {
		iotlogger.LogHelper.Errorf("UpdateVersionStatus保存oem app版本状态错误:%s", err.Error())
	}
}

type VersionStatus struct {
	Version string
	Status  int32
}

func (s *OemAppSvc) GenCustomAppIconForPlist(iconUrl string) (string, error) {
	tempPathDir := DirLaunchScreenDefaultImage
	//创建目录
	err := iotutil.MkDir(tempPathDir)
	if err != nil {
		logger.Error("创建目录" + tempPathDir + "错误:" + err.Error())
		return "", err
	}

	logoPath := GetDirPath(tempPathDir, iotutil.GetRandomPureString(20)+"_logo.png") // tempPathDir+"/"+iotutil.GetRandomPureString(20)+"_logo.png"
	logoUrl := iconUrl
	//下载logoPath
	err = iotutil.DownloadFile(logoUrl, logoPath)
	if err != nil {
		logger.Error("下载logo图片失败. [" + logoPath + "],[" + logoUrl + "]" + "错误:" + err.Error())
		return "", err
	}

	var iosImg = make(map[string]interface{})

	//57x57开始生成各种规格的图片.
	imgName57x57 := iotutil.GetRandomPureString(20) + ".png"
	imgAllPath57x57 := GetDirPath(tempPathDir, imgName57x57) //tempPathDir +"/"+ imgName640x960
	//先把logo调整到 144x144.然后再设置圆角再加白色背景
	//iotutil.ImageResize(logoPath,imgAllPath57x57,144,144)
	iotutil.GenLaunchImageFromIcon(logoPath, imgAllPath57x57, 57, 57, 16)
	imgUrl57x57, err := s.thirdUpload(imgName57x57, imgAllPath57x57)
	if err != nil {
		logger.Error("OemAppExecDefaultImages oss upload Error: " + err.Error())
		return "", err
	}
	iosImg["displayImage"] = imgUrl57x57

	//512x512开始生成各种规格的图片.
	imgName512x512 := iotutil.GetRandomPureString(20) + ".png"
	imgAllPath512x512 := GetDirPath(tempPathDir, imgName512x512) //tempPathDir +"/"+ imgName640x960
	//先把logo调整到 144x144.然后再设置圆角再加白色背景
	//iotutil.ImageResize(logoPath,imgAllPath512x512,144,144)
	iotutil.GenLaunchImageFromIcon(logoPath, imgAllPath512x512, 512, 512, 16)
	imgUrl512x512, err := s.thirdUpload(imgName512x512, imgAllPath512x512)
	if err != nil {
		logger.Error("OemAppExecDefaultImages oss upload Error: " + err.Error())
		return "", err
	}
	iosImg["fullSizeImage"] = imgUrl512x512
	data, err := json.Marshal(iosImg)
	if err != nil {
		return "", err
	}
	return string(data), nil
}

func (s *OemAppSvc) CancelBuild(reqs *proto.OemAppBuildReq) error {
	appID := iotutil.ToInt64(reqs.AppId)
	buildId := iotutil.ToInt64(reqs.BuildId)

	//查询APP信息
	t := orm.Use(iotmodel.GetDB()).TOemApp
	_, err := t.WithContext(context.Background()).Where(t.Id.Eq(appID)).First()
	if err != nil {
		return err
	}

	var buildSvc = OemAppBuildRecordSvc{}
	// 查询构建记录
	buildInfo, err := buildSvc.FindByIdOemAppBuildRecord(&proto.OemAppBuildRecordFilter{Id: buildId})
	if err != nil {
		return err
	}

	//状态非构建中不需要推送
	if buildInfo.Status != 2 {
		return nil
	}

	//修改构建状态（修改构建失败，原因为用户取消）
	buildResultMsg := "用户主动取消构建"
	buildSvc.UpdateFieldsOemAppBuildRecord(&proto.OemAppBuildRecordUpdateFieldsRequest{Fields: []string{"status", "build_result_msg"}, Data: &proto.OemAppBuildRecord{Status: 4, BuildResultMsg: buildResultMsg, Id: buildId}})

	bos := "ios"
	if buildInfo.Os != 1 {
		bos = "android"
	}
	//推送构建取消消息
	s.PulisherBuildMessage(iotstruct.BuildInfo{
		ID:   iotutil.ToString(buildId),
		OS:   bos,
		Time: time.Now().Unix(),
		Type: 2,
	})
	iotlogger.LogHelper.Infof("CancelBuild,buildId=%v", buildId)
	return nil
}
