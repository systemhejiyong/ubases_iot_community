// Code generated by sgen.exe,2022-07-14 15:10:14. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"google.golang.org/protobuf/types/known/timestamppb"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_oem_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app_oem/model"
	"cloud_platform/iot_model/db_app_oem/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OemAppEntrySvc struct {
	Ctx context.Context
}

// 创建OemAppEntry
func (s *OemAppEntrySvc) CreateOemAppEntry(req *proto.OemAppEntry) (*proto.OemAppEntry, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOemAppEntry
	do := t.WithContext(context.Background())
	dbObj := convert.OemAppEntry_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOemAppEntry error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OemAppEntry
func (s *OemAppEntrySvc) DeleteOemAppEntry(req *proto.OemAppEntry) (*proto.OemAppEntry, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppEntry
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.Title != "" { //字符串
		do = do.Where(t.Title.Eq(req.Title))
	}
	if req.Content != "" { //字符串
		do = do.Where(t.Content.Eq(req.Content))
	}
	if req.SetingId != 0 { //整数
		do = do.Where(t.SetingId.Eq(req.SetingId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOemAppEntry error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OemAppEntry
func (s *OemAppEntrySvc) DeleteByIdOemAppEntry(req *proto.OemAppEntry) (*proto.OemAppEntry, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppEntry
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOemAppEntry error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OemAppEntry
func (s *OemAppEntrySvc) DeleteByIdsOemAppEntry(req *proto.OemAppEntryBatchDeleteRequest) (*proto.OemAppEntryBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOemAppEntry
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOemAppEntry error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OemAppEntry
func (s *OemAppEntrySvc) UpdateOemAppEntry(req *proto.OemAppEntry) (*proto.OemAppEntry, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppEntry
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Lang != "" { //字符串
		updateField = append(updateField, t.Lang)
	}
	if req.Title != "" { //字符串
		updateField = append(updateField, t.Title)
	}
	if req.Content != "" { //字符串
		updateField = append(updateField, t.Content)
	}
	if req.SetingId != 0 { //整数
		updateField = append(updateField, t.SetingId)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOemAppEntry error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OemAppEntry_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOemAppEntry error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OemAppEntry
func (s *OemAppEntrySvc) UpdateAllOemAppEntry(req *proto.OemAppEntry) (*proto.OemAppEntry, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppEntry
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Lang)
	updateField = append(updateField, t.Title)
	updateField = append(updateField, t.Content)
	updateField = append(updateField, t.SetingId)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOemAppEntry error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppEntry_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOemAppEntry error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OemAppEntrySvc) UpdateFieldsOemAppEntry(req *proto.OemAppEntryUpdateFieldsRequest) (*proto.OemAppEntry, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppEntry
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOemAppEntry error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOemAppEntry error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppEntry_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOemAppEntry error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OemAppEntry
func (s *OemAppEntrySvc) FindOemAppEntry(req *proto.OemAppEntryFilter) (*proto.OemAppEntry, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppEntry
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.Title != "" { //字符串
		do = do.Where(t.Title.Eq(req.Title))
	}
	if req.Content != "" { //字符串
		do = do.Where(t.Content.Eq(req.Content))
	}
	if req.SetingId != 0 { //整数
		do = do.Where(t.SetingId.Eq(req.SetingId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOemAppEntry error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppEntry_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OemAppEntry
func (s *OemAppEntrySvc) FindByIdOemAppEntry(req *proto.OemAppEntryFilter) (*proto.OemAppEntry, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppEntry
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOemAppEntry error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppEntry_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OemAppEntry,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OemAppEntrySvc) GetListOemAppEntry(req *proto.OemAppEntryListRequest) ([]*proto.OemAppEntry, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOemAppEntry
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Lang != "" { //字符串
			do = do.Where(t.Lang.Like("%" + query.Lang + "%"))
		}
		if query.Title != "" { //字符串
			do = do.Where(t.Title.Like("%" + query.Title + "%"))
		}
		if query.Content != "" { //字符串
			do = do.Where(t.Content.Like("%" + query.Content + "%"))
		}
		if query.SetingId != 0 { //整数
			do = do.Where(t.SetingId.Eq(query.SetingId))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOemAppEntry
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOemAppEntry error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OemAppEntry, len(list))
	for i, v := range list {
		result[i] = convert.OemAppEntry_db2pb(v)
	}
	return result, total, nil
}

func (s *OemAppEntrySvc) GetListOemAppEntryListDiy(req *proto.OemAppEntryListDiyRequqest) ([]*proto.OemAppEntryDiy, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	q := orm.Use(iotmodel.GetDB())
	tSetting := q.TOemAppEntrySeting
	tDir := q.TOemAppDocDir
	tEntry := q.TOemAppEntry

	do := tSetting.WithContext(context.Background()).
		Join(tDir, tSetting.DirId.EqCol(tDir.Id)).
		Join(tEntry, tSetting.Id.EqCol(tEntry.SetingId))

	if req.DocId > 0 {
		do = do.Where(tDir.DocId.Eq(req.DocId))
	}
	if req.DirId > 0 {
		//获取下级目录id
		var dirSvr = OemAppDocDirSvc{}
		ids, errIds := dirSvr.FindOemAppDocDirByIds(req.DirId)
		if errIds != nil {
			return nil, 0, errIds
		}
		do = do.Where(tDir.Id.In(ids...))
	}
	if req.IsEnable > 0 {
		do = do.Where(tSetting.IsEnable.Eq(req.IsEnable))
	}
	if req.IsNormal > 0 {
		do = do.Where(tSetting.IsNormal.Eq(req.IsNormal))
	}
	if req.Lang != "" {
		do = do.Where(tEntry.Lang.Eq(req.Lang))
	}
	if req.Title != "" {
		do = do.Where(tEntry.Title.Like("%" + req.Title + "%"))
	}

	do = do.Order(tSetting.Sort, tEntry.UpdatedAt.Desc())

	var list []*struct {
		SetingId  int64     `gorm:"column:seting_id" json:"setingId"` // 设置id
		DocId     int64     `gorm:"column:doc_id" json:"docId"`       // 文档id
		DirId     int64     `gorm:"column:dir_id" json:"dirId"`       // 目录id
		Lang      string    `gorm:"column:lang" json:"lang"`          // 语种编码
		Title     string    `gorm:"column:title" json:"title"`        // 标题
		IsNormal  int32     `gorm:"column:is_normal" json:"isNormal"` // 是否常见
		IsEnable  int32     `gorm:"column:is_enable" json:"isEnable"` // 是否启用
		DirName   string    `gorm:"column:dir_name" json:"dirName"`   // 目录名称
		Sort      int64     `gorm:"column:sort" json:"sort"`
		UpdatedAt time.Time `gorm:"column:updated_at" json:"updatedAt"` // 更新时间
	}

	var total int64
	if req.PageSize <= 0 {
		req.PageSize = 10
	}

	limit := req.PageSize
	if req.Page == 0 {
		req.Page = 1
	}
	offset := req.PageSize * (req.Page - 1)
	total, err = do.Select(
		tSetting.Id.As("seting_id"), tEntry.Title, tDir.DirName, tSetting.IsEnable, tSetting.IsNormal, tEntry.UpdatedAt, tEntry.Lang, tDir.DocId, tDir.Id.As("dir_id"), tSetting.Sort,
	).ScanByPage(&list, int(offset), int(limit))

	if err != nil {
		logger.Errorf("GetListOemAppEntry error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}

	var rsList = make([]*proto.OemAppEntryDiy, 0)

	for _, v := range list {
		rsList = append(rsList, &proto.OemAppEntryDiy{
			SetingId:  v.SetingId,
			DocId:     v.DocId,
			DirId:     v.DirId,
			Lang:      v.Lang,
			Title:     v.Title,
			IsNormal:  v.IsNormal,
			IsEnable:  v.IsEnable,
			DirName:   v.DirName,
			Sort:      v.Sort,
			UpdatedAt: timestamppb.New(v.UpdatedAt),
		})
	}
	return rsList, total, nil
}

// 创建CreateOemAppEntryBatch
func (s *OemAppEntrySvc) CreateOemAppEntryBatch(req *proto.OemAppEntryBatchRequest) (*proto.OemAppEntryBatchRequest, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOemAppEntry
	do := t.WithContext(context.Background())
	reqBatch := make([]*model.TOemAppEntry, 0)
	for i := range req.OemAppEntrys {
		reqBatch = append(reqBatch, convert.OemAppEntry_pb2db(req.OemAppEntrys[i]))
	}
	err := do.CreateInBatches(reqBatch, len(reqBatch))
	if err != nil {
		logger.Errorf("CreateOemAppEntryBatch error : %s", err.Error())
		return nil, err
	}
	return req, err
}
