// Code generated by sgen,2023-09-15 15:31:43. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_oem_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app_oem/model"
	"cloud_platform/iot_model/db_app_oem/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OemAppDebuggerSvc struct {
	Ctx context.Context
}

// 创建OemAppDebugger
func (s *OemAppDebuggerSvc) CreateOemAppDebugger(req *proto.OemAppDebugger) (*proto.OemAppDebugger, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOemAppDebugger
	do := t.WithContext(context.Background())
	dbObj := convert.OemAppDebugger_pb2db(req)
	dbObj.Status = 1
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOemAppDebugger error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OemAppDebugger
func (s *OemAppDebuggerSvc) DeleteOemAppDebugger(req *proto.OemAppDebugger) (*proto.OemAppDebugger, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDebugger
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.UserName != "" { //字符串
		do = do.Where(t.UserName.Eq(req.UserName))
	}
	if req.RegionId != 0 { //整数
		do = do.Where(t.RegionId.Eq(req.RegionId))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOemAppDebugger error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OemAppDebugger
func (s *OemAppDebuggerSvc) DeleteByIdOemAppDebugger(req *proto.OemAppDebugger) (*proto.OemAppDebugger, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDebugger
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOemAppDebugger error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OemAppDebugger
func (s *OemAppDebuggerSvc) DeleteByIdsOemAppDebugger(req *proto.OemAppDebuggerBatchDeleteRequest) (*proto.OemAppDebuggerBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOemAppDebugger
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOemAppDebugger error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OemAppDebugger
func (s *OemAppDebuggerSvc) UpdateOemAppDebugger(req *proto.OemAppDebugger) (*proto.OemAppDebugger, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDebugger
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.AppKey != "" { //字符串
		updateField = append(updateField, t.AppKey)
	}
	if req.UserId != 0 { //整数
		updateField = append(updateField, t.UserId)
	}
	if req.UserName != "" { //字符串
		updateField = append(updateField, t.UserName)
	}
	if req.RegionId != 0 { //整数
		updateField = append(updateField, t.RegionId)
	}
	if req.Remark != "" { //字符串
		updateField = append(updateField, t.Remark)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOemAppDebugger error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OemAppDebugger_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOemAppDebugger error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OemAppDebugger
func (s *OemAppDebuggerSvc) UpdateAllOemAppDebugger(req *proto.OemAppDebugger) (*proto.OemAppDebugger, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDebugger
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.AppKey)
	updateField = append(updateField, t.UserId)
	updateField = append(updateField, t.UserName)
	updateField = append(updateField, t.RegionId)
	updateField = append(updateField, t.Remark)
	updateField = append(updateField, t.CreatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOemAppDebugger error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppDebugger_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOemAppDebugger error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OemAppDebuggerSvc) UpdateFieldsOemAppDebugger(req *proto.OemAppDebuggerUpdateFieldsRequest) (*proto.OemAppDebugger, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDebugger
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOemAppDebugger error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOemAppDebugger error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppDebugger_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOemAppDebugger error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OemAppDebugger
func (s *OemAppDebuggerSvc) FindOemAppDebugger(req *proto.OemAppDebuggerFilter) (*proto.OemAppDebugger, error) {
	q := orm.Use(iotmodel.GetDB())
	t := q.TOemAppDebugger
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.UserName != "" { //字符串
		do = do.Where(t.UserName.Eq(req.UserName))
	}
	if req.RegionId != 0 { //整数
		do = do.Where(t.RegionId.Eq(req.RegionId))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOemAppDebugger error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppDebugger_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OemAppDebugger
func (s *OemAppDebuggerSvc) FindByIdOemAppDebugger(req *proto.OemAppDebuggerFilter) (*proto.OemAppDebugger, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDebugger
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOemAppDebugger error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppDebugger_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OemAppDebugger,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OemAppDebuggerSvc) GetListOemAppDebugger(req *proto.OemAppDebuggerListRequest) ([]*proto.OemAppDebugger, int64, error) {
	var err error
	q := orm.Use(iotmodel.GetDB())
	t := q.TOemAppDebugger
	tApp := q.TOemApp
	do := t.WithContext(context.Background()).Join(tApp, tApp.AppKey.EqCol(t.AppKey))
	query := req.Query
	if query != nil {
		do = do.Where(tApp.TenantId.Eq(req.Query.TenantId)) //必须传递租户Id
		if query.Id != 0 {                                  //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.AppKey != "" { //字符串
			do = do.Where(t.AppKey.Like("%" + query.AppKey + "%"))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.UserName != "" { //字符串
			do = do.Where(t.UserName.Like("%" + query.UserName + "%"))
		}
		if query.RegionId != 0 { //整数
			do = do.Where(t.RegionId.Eq(query.RegionId))
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []struct {
		model.TOemAppDebugger
		AppKey     string `gorm:"column:app_key" json:"app_key"`
		AppName    string `gorm:"column:name" json:"name"`
		AppIconUrl string `gorm:"column:app_icon_url" json:"app_icon_url"`
	}
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do.Select(t.ALL, tApp.AppKey, tApp.AppIconUrl, tApp.Name).ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOemAppDebugger error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OemAppDebugger, len(list))
	for i, v := range list {
		result[i] = convert.OemAppDebugger_db2pb(&v.TOemAppDebugger)
		result[i].AppName = v.AppName
		result[i].AppKey = v.AppKey
		result[i].AppImg = v.AppIconUrl
	}
	return result, total, nil
}
