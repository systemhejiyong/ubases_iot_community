// Code generated by sgen.exe,2022-05-31 16:29:04. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_oem_service/convert"
	"cloud_platform/iot_common/iotutil"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app_oem/model"
	"cloud_platform/iot_model/db_app_oem/orm"
	proto "cloud_platform/iot_proto/protos/protosService"

	"go-micro.dev/v4/metadata"
)

type OemAppDefMenuSvc struct {
	Ctx context.Context
}

func (s *OemAppDefMenuSvc) CheckRequired(req *proto.OemAppDefMenu, t int) error {
	//保存的时候.
	// if req.Id <= 0{
	//     //一个位置, 只能有一个必须
	//     def, _ := s.FindOemAppDefMenu(&proto.OemAppDefMenuFilter{
	//         //Position: req.Position,
	//         //Required: req.Required,
	//         MenuKey: req.MenuKey,
	//     })
	//     if def != nil{
	//         return errors.New("菜单标识,已经存在不可再添加")
	//     }
	// }
	// //编辑的时候.
	// if req.Id > 1{
	//新增的时候
	if t == 0 {
		resP, _ := s.FindOemAppDefMenu(&proto.OemAppDefMenuFilter{
			Position: req.Position,
		})
		if resP != nil && resP.Id > 0 {
			return errors.New("位置标识,已经存在不可选择")
		}

		defs, _ := s.FindOemAppDefMenu(&proto.OemAppDefMenuFilter{
			MenuKey: req.MenuKey,
		})
		if defs != nil && defs.Id > 0 {
			return errors.New("菜单标识,已经存在不可选择")
		}
	}

	//修改的时候
	if t == 1 {
		resP, _ := s.FindOemAppDefMenu(&proto.OemAppDefMenuFilter{
			Position: req.Position,
		})
		if resP != nil && resP.Id != req.Id {
			return errors.New("位置标识,已经存在不可选择")
		}

		defs, _ := s.FindOemAppDefMenu(&proto.OemAppDefMenuFilter{
			MenuKey: req.MenuKey,
		})
		if defs != nil && defs.Id != req.Id {
			return errors.New("菜单标识,已经存在不可选择")
		}
	}

	//}
	return nil
}

// 创建OemAppDefMenu
func (s *OemAppDefMenuSvc) CreateOemAppDefMenu(req *proto.OemAppDefMenu) (*proto.OemAppDefMenu, error) {

	userid, _ := metadata.Get(s.Ctx, "userid")

	errCheck := s.CheckRequired(req, 0)
	if errCheck != nil {
		return nil, errCheck
	}

	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOemAppDefMenu
	do := t.WithContext(context.Background())
	dbObj := convert.OemAppDefMenu_pb2db(req)
	dbObj.CreatedAt = time.Now()
	dbObj.CreatedBy = iotutil.ToInt64(userid)
	dbObj.UpdatedAt = time.Now()
	dbObj.UpdatedBy = iotutil.ToInt64(userid)
	err := do.Create(dbObj)

	if err != nil {
		logger.Errorf("CreateOemAppDefMenu error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OemAppDefMenu
func (s *OemAppDefMenuSvc) DeleteOemAppDefMenu(req *proto.OemAppDefMenu) (*proto.OemAppDefMenu, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDefMenu
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.MenuKey != "" { //字符串
		do = do.Where(t.MenuKey.Eq(req.MenuKey))
	}
	if req.Position != 0 { //整数
		do = do.Where(t.Position.Eq(req.Position))
	}
	if req.DefImage != "" { //字符串
		do = do.Where(t.DefImage.Eq(req.DefImage))
	}
	if req.SelImage != "" { //字符串
		do = do.Where(t.SelImage.Eq(req.SelImage))
	}
	if req.Required != 0 { //整数
		do = do.Where(t.Required.Eq(req.Required))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOemAppDefMenu error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OemAppDefMenu
func (s *OemAppDefMenuSvc) DeleteByIdOemAppDefMenu(req *proto.OemAppDefMenu) (*proto.OemAppDefMenu, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDefMenu
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOemAppDefMenu error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OemAppDefMenu
func (s *OemAppDefMenuSvc) DeleteByIdsOemAppDefMenu(req *proto.OemAppDefMenuBatchDeleteRequest) (*proto.OemAppDefMenuBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOemAppDefMenu
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOemAppDefMenu error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OemAppDefMenu
func (s *OemAppDefMenuSvc) UpdateOemAppDefMenu(req *proto.OemAppDefMenu) (*proto.OemAppDefMenu, error) {

	userid, _ := metadata.Get(s.Ctx, "userid")

	errCheck := s.CheckRequired(req, 1)
	if errCheck != nil {
		return nil, errCheck
	}

	t := orm.Use(iotmodel.GetDB()).TOemAppDefMenu
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Name != "" { //字符串
		updateField = append(updateField, t.Name)
	}
	if req.MenuKey != "" { //字符串
		updateField = append(updateField, t.MenuKey)
	}
	if req.Position != 0 { //整数
		updateField = append(updateField, t.Position)
	}
	if req.DefImage != "" { //字符串
		updateField = append(updateField, t.DefImage)
	}
	if req.SelImage != "" { //字符串
		updateField = append(updateField, t.SelImage)
	}
	if req.Required != 0 { //整数
		updateField = append(updateField, t.Required)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOemAppDefMenu error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OemAppDefMenu_pb2db(req)
	dbObj.UpdatedBy = iotutil.ToInt64(userid)
	dbObj.UpdatedAt = time.Now()

	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOemAppDefMenu error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OemAppDefMenu
func (s *OemAppDefMenuSvc) UpdateAllOemAppDefMenu(req *proto.OemAppDefMenu) (*proto.OemAppDefMenu, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDefMenu
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Name)
	updateField = append(updateField, t.MenuKey)
	updateField = append(updateField, t.Position)
	updateField = append(updateField, t.DefImage)
	updateField = append(updateField, t.SelImage)
	updateField = append(updateField, t.Required)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOemAppDefMenu error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppDefMenu_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOemAppDefMenu error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OemAppDefMenuSvc) UpdateFieldsOemAppDefMenu(req *proto.OemAppDefMenuUpdateFieldsRequest) (*proto.OemAppDefMenu, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDefMenu
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOemAppDefMenu error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOemAppDefMenu error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppDefMenu_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOemAppDefMenu error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OemAppDefMenu
func (s *OemAppDefMenuSvc) FindOemAppDefMenu(req *proto.OemAppDefMenuFilter) (*proto.OemAppDefMenu, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDefMenu
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.MenuKey != "" { //字符串
		do = do.Where(t.MenuKey.Eq(req.MenuKey))
	}
	if req.Position != 0 { //整数
		do = do.Where(t.Position.Eq(req.Position))
	}
	if req.DefImage != "" { //字符串
		do = do.Where(t.DefImage.Eq(req.DefImage))
	}
	if req.SelImage != "" { //字符串
		do = do.Where(t.SelImage.Eq(req.SelImage))
	}
	if req.Required != 0 { //整数
		do = do.Where(t.Required.Eq(req.Required))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOemAppDefMenu error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppDefMenu_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OemAppDefMenu
func (s *OemAppDefMenuSvc) FindByIdOemAppDefMenu(req *proto.OemAppDefMenuFilter) (*proto.OemAppDefMenu, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDefMenu
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOemAppDefMenu error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppDefMenu_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OemAppDefMenu,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OemAppDefMenuSvc) GetListOemAppDefMenu(req *proto.OemAppDefMenuListRequest) ([]*proto.OemAppDefMenu, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOemAppDefMenu
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Name != "" { //字符串
			do = do.Where(t.Name.Like("%" + query.Name + "%"))
		}
		if query.MenuKey != "" { //字符串
			do = do.Where(t.MenuKey.Like("%" + query.MenuKey + "%"))
		}
		if query.Position != 0 { //整数
			do = do.Where(t.Position.Eq(query.Position))
		}
		if query.DefImage != "" { //字符串
			do = do.Where(t.DefImage.Like("%" + query.DefImage + "%"))
		}
		if query.SelImage != "" { //字符串
			do = do.Where(t.SelImage.Like("%" + query.SelImage + "%"))
		}
		if query.Required != 0 { //整数
			do = do.Where(t.Required.Eq(query.Required))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOemAppDefMenu
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOemAppDefMenu error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OemAppDefMenu, len(list))
	for i, v := range list {
		result[i] = convert.OemAppDefMenu_db2pb(v)
	}
	return result, total, nil
}
