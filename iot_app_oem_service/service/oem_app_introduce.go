// Code generated by sgen.exe,2022-06-02 11:15:11. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"

	"gorm.io/gen/field"

	"cloud_platform/iot_app_oem_service/convert"
	"cloud_platform/iot_common/iotutil"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app_oem/model"
	"cloud_platform/iot_model/db_app_oem/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"time"

	"go-micro.dev/v4/metadata"
)

type OemAppIntroduceSvc struct {
	Ctx context.Context
}

func (s *OemAppIntroduceSvc) EnableOemAppIntroduce(req *proto.OemAppIntroduce) (*proto.OemAppIntroduce, error) {
	if req.AppId == 0 {
		return nil, errors.New("appId not found")
	}
	if req.Version == "" {
		return nil, errors.New("版本号不能为空")
	}
	if req.ContentType == 0 {
		return nil, errors.New("文档类型不能为空")
	}
	t := orm.Use(iotmodel.GetDB()).TOemAppIntroduce
	do := t.WithContext(context.Background())
	_, err := do.Where(t.AppId.Eq(req.AppId), t.ContentType.Eq(req.ContentType)).UpdateColumn(t.Status, 3)
	if err != nil {
		logger.Errorf("UpdateStatusOemAppIntroduce error : %s", err.Error())
		return nil, err
	}
	_, err = do.Where(t.AppId.Eq(req.AppId), t.ContentType.Eq(req.ContentType), t.Version.Eq(req.Version)).UpdateColumn(t.Status, 1)
	if err != nil {
		logger.Errorf("UpdateStatusOemAppIntroduce error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 创建OemAppIntroduce
func (s *OemAppIntroduceSvc) CreateOemAppIntroduce(req *proto.OemAppIntroduce) (*proto.OemAppIntroduce, error) {
	userid, _ := metadata.Get(s.Ctx, "userid")
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOemAppIntroduce
	do := t.WithContext(context.Background())
	dbObj := convert.OemAppIntroduce_pb2db(req)

	dbObj.CreatedAt = time.Now()
	dbObj.CreatedBy = iotutil.ToInt64(userid)
	dbObj.UpdatedAt = time.Now()
	dbObj.UpdatedBy = iotutil.ToInt64(userid)

	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOemAppIntroduce error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OemAppIntroduce
func (s *OemAppIntroduceSvc) DeleteOemAppIntroduce(req *proto.OemAppIntroduce) (*proto.OemAppIntroduce, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppIntroduce
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Content != "" { //字符串
		do = do.Where(t.Content.Eq(req.Content))
	}
	if req.ContentUrl != "" { //字符串
		do = do.Where(t.ContentUrl.Eq(req.ContentUrl))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.ContentType != 0 { //整数
		do = do.Where(t.ContentType.Eq(req.ContentType))
	}
	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
	}
	if req.VoiceCode != "" { //整数
		do = do.Where(t.VoiceCode.Eq(req.VoiceCode))
	}

	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOemAppIntroduce error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OemAppIntroduce
func (s *OemAppIntroduceSvc) DeleteByIdOemAppIntroduce(req *proto.OemAppIntroduce) (*proto.OemAppIntroduce, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppIntroduce
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOemAppIntroduce error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OemAppIntroduce
func (s *OemAppIntroduceSvc) DeleteByIdsOemAppIntroduce(req *proto.OemAppIntroduceBatchDeleteRequest) (*proto.OemAppIntroduceBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOemAppIntroduce
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOemAppIntroduce error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OemAppIntroduce
func (s *OemAppIntroduceSvc) UpdateOemAppIntroduce(req *proto.OemAppIntroduce) (*proto.OemAppIntroduce, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppIntroduce
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Content != "" { //字符串
		updateField = append(updateField, t.Content)
	}
	if req.ContentUrl != "" { //字符串
		updateField = append(updateField, t.ContentUrl)
	}
	if req.Lang != "" { //字符串
		updateField = append(updateField, t.Lang)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.ContentType != 0 { //整数
		updateField = append(updateField, t.ContentType)
	}
	if req.AppId != 0 { //整数
		updateField = append(updateField, t.AppId)
	}
	if req.Version != "" { //字符串
		updateField = append(updateField, t.Version)
	}
	if req.VoiceCode != "" {
		updateField = append(updateField, t.VoiceCode)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOemAppIntroduce error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OemAppIntroduce_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOemAppIntroduce error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OemAppIntroduce
func (s *OemAppIntroduceSvc) UpdateAllOemAppIntroduce(req *proto.OemAppIntroduce) (*proto.OemAppIntroduce, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppIntroduce
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Content)
	updateField = append(updateField, t.ContentUrl)
	updateField = append(updateField, t.Lang)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.ContentType)
	updateField = append(updateField, t.AppId)
	updateField = append(updateField, t.VoiceCode)
	updateField = append(updateField, t.Version)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOemAppIntroduce error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppIntroduce_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOemAppIntroduce error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OemAppIntroduceSvc) UpdateFieldsOemAppIntroduce(req *proto.OemAppIntroduceUpdateFieldsRequest) (*proto.OemAppIntroduce, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppIntroduce
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOemAppIntroduce error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOemAppIntroduce error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppIntroduce_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOemAppIntroduce error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OemAppIntroduce
func (s *OemAppIntroduceSvc) FindOemAppIntroduce(req *proto.OemAppIntroduceFilter) (*proto.OemAppIntroduce, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppIntroduce
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Content != "" { //字符串
		do = do.Where(t.Content.Eq(req.Content))
	}
	if req.ContentUrl != "" { //字符串
		do = do.Where(t.ContentUrl.Eq(req.ContentUrl))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.ContentType != 0 { //整数
		do = do.Where(t.ContentType.Eq(req.ContentType))
	}
	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
	}
	if req.VoiceCode != "" {
		do = do.Where(t.VoiceCode.Eq(req.VoiceCode))
	}
	if req.AppKey != "" {
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOemAppIntroduce error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppIntroduce_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OemAppIntroduce
func (s *OemAppIntroduceSvc) FindByIdOemAppIntroduce(req *proto.OemAppIntroduceFilter) (*proto.OemAppIntroduce, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppIntroduce
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOemAppIntroduce error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppIntroduce_db2pb(dbObj)
	return res, err
}

// 获取列表(自定义)
func (s *OemAppIntroduceSvc) GetOemAppIntroduceList2(req *proto.OemAppIntroduceListRequest) ([]*proto.OemAppIntroduceModelResponse, error) {
	rows, errRows := iotmodel.GetDB().Table("t_oem_app_introduce").Select("version,min(created_at) as created_at,max(updated_at) as updated_at,count(1) lang_count ,min(`status`) as `status`, min(app_id) as app_id, min(content_type) as content_type").Where("app_id = ? and content_type = ?", req.Query.AppId, req.Query.ContentType).Group("version").Rows()
	if errRows != nil {
		return nil, errRows
	}
	var res = []*proto.OemAppIntroduceModelResponse{}
	for rows.Next() {
		var tmp = make(map[string]interface{}, 0)
		rows.Scan(tmp)
		iotmodel.GetDB().ScanRows(rows, tmp)
		res = append(res, &proto.OemAppIntroduceModelResponse{
			Version:     iotutil.ToString(tmp["version"]),
			UpdatedAt:   tmp["updated_at"].(time.Time).Unix(),
			CreatedAt:   tmp["created_at"].(time.Time).Unix(),
			LangCount:   iotutil.ToInt32(tmp["lang_count"]),
			Status:      iotutil.ToInt32(tmp["status"]),
			AppId:       iotutil.ToInt64(tmp["app_id"]),
			ContentType: iotutil.ToInt32(tmp["content_type"]),
		})
	}
	return res, nil
}

// 根据分页条件查找OemAppIntroduce,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OemAppIntroduceSvc) GetListOemAppIntroduce(req *proto.OemAppIntroduceListRequest) ([]*proto.OemAppIntroduce, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOemAppIntroduce
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Content != "" { //字符串
			do = do.Where(t.Content.Like("%" + query.Content + "%"))
		}
		if query.ContentUrl != "" { //字符串
			do = do.Where(t.ContentUrl.Like("%" + query.ContentUrl + "%"))
		}
		if query.Lang != "" { //字符串
			do = do.Where(t.Lang.Like("%" + query.Lang + "%"))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.ContentType != 0 { //整数
			do = do.Where(t.ContentType.Eq(query.ContentType))
		}
		if query.AppId != 0 { //整数
			do = do.Where(t.AppId.Eq(query.AppId))
		}
		if query.AppKey != "" {
			do = do.Where(t.AppKey.Eq(query.AppKey))
		}
		if query.VoiceCode != "" {
			do = do.Where(t.VoiceCode.Eq(query.VoiceCode))
		}
		if query.Version != "" { //字符串
			do = do.Where(t.Version.Like("%" + query.Version + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOemAppIntroduce
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOemAppIntroduce error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OemAppIntroduce, len(list))
	for i, v := range list {
		result[i] = convert.OemAppIntroduce_db2pb(v)
	}
	return result, total, nil
}
