// Code generated by sgen.exe,2022-11-04 09:15:25. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_oem_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app_oem/model"
	"cloud_platform/iot_model/db_app_oem/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OemAppFunctionConfigSvc struct {
	Ctx context.Context
}

// 创建OemAppFunctionConfig
func (s *OemAppFunctionConfigSvc) CreateOemAppFunctionConfig(req *proto.OemAppFunctionConfig) (*proto.OemAppFunctionConfig, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOemAppFunctionConfig
	do := t.WithContext(context.Background())
	dbObj := convert.OemAppFunctionConfig_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOemAppFunctionConfig error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OemAppFunctionConfig
func (s *OemAppFunctionConfigSvc) DeleteOemAppFunctionConfig(req *proto.OemAppFunctionConfig) (*proto.OemAppFunctionConfig, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppFunctionConfig
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.AboutUs != 0 { //整数
		do = do.Where(t.AboutUs.Eq(req.AboutUs))
	}
	if req.Eula != 0 { //整数
		do = do.Where(t.Eula.Eq(req.Eula))
	}
	if req.PrivacyPolicy != 0 { //整数
		do = do.Where(t.PrivacyPolicy.Eq(req.PrivacyPolicy))
	}
	if req.Weather != 0 { //整数
		do = do.Where(t.Weather.Eq(req.Weather))
	}
	if req.Voices != "" { //字符串
		do = do.Where(t.Voices.Eq(req.Voices))
	}
	if req.Thirds != "" { //字符串
		do = do.Where(t.Thirds.Eq(req.Thirds))
	}
	if req.AutoUpgrade != "" { //字符串
		do = do.Where(t.AutoUpgrade.Eq(req.AutoUpgrade))
	}
	if req.Geo != 0 { //整数
		do = do.Where(t.Geo.Eq(req.Geo))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOemAppFunctionConfig error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OemAppFunctionConfig
func (s *OemAppFunctionConfigSvc) DeleteByIdOemAppFunctionConfig(req *proto.OemAppFunctionConfig) (*proto.OemAppFunctionConfig, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppFunctionConfig
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOemAppFunctionConfig error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OemAppFunctionConfig
func (s *OemAppFunctionConfigSvc) DeleteByIdsOemAppFunctionConfig(req *proto.OemAppFunctionConfigBatchDeleteRequest) (*proto.OemAppFunctionConfigBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOemAppFunctionConfig
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOemAppFunctionConfig error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OemAppFunctionConfig
func (s *OemAppFunctionConfigSvc) UpdateOemAppFunctionConfig(req *proto.OemAppFunctionConfig) (*proto.OemAppFunctionConfig, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppFunctionConfig
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.AppId != 0 { //整数
		updateField = append(updateField, t.AppId)
	}
	if req.Version != "" { //字符串
		updateField = append(updateField, t.Version)
	}
	if req.AboutUs != 0 { //整数
		updateField = append(updateField, t.AboutUs)
	}
	if req.Eula != 0 { //整数
		updateField = append(updateField, t.Eula)
	}
	if req.PrivacyPolicy != 0 { //整数
		updateField = append(updateField, t.PrivacyPolicy)
	}
	if req.Weather != 0 { //整数
		updateField = append(updateField, t.Weather)
	}
	if req.Voices != "" { //字符串
		updateField = append(updateField, t.Voices)
	}
	if req.Thirds != "" { //字符串
		updateField = append(updateField, t.Thirds)
	}
	if req.AutoUpgrade != "" { //字符串
		updateField = append(updateField, t.AutoUpgrade)
	}
	if req.Geo != 0 { //整数
		updateField = append(updateField, t.Geo)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOemAppFunctionConfig error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OemAppFunctionConfig_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOemAppFunctionConfig error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OemAppFunctionConfig
func (s *OemAppFunctionConfigSvc) UpdateAllOemAppFunctionConfig(req *proto.OemAppFunctionConfig) (*proto.OemAppFunctionConfig, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppFunctionConfig
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.AppId)
	updateField = append(updateField, t.Version)
	updateField = append(updateField, t.AboutUs)
	updateField = append(updateField, t.Eula)
	updateField = append(updateField, t.PrivacyPolicy)
	updateField = append(updateField, t.Weather)
	updateField = append(updateField, t.Voices)
	updateField = append(updateField, t.Thirds)
	updateField = append(updateField, t.AutoUpgrade)
	updateField = append(updateField, t.Geo)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOemAppFunctionConfig error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppFunctionConfig_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOemAppFunctionConfig error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OemAppFunctionConfigSvc) UpdateFieldsOemAppFunctionConfig(req *proto.OemAppFunctionConfigUpdateFieldsRequest) (*proto.OemAppFunctionConfig, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppFunctionConfig
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOemAppFunctionConfig error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOemAppFunctionConfig error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppFunctionConfig_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOemAppFunctionConfig error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OemAppFunctionConfig
func (s *OemAppFunctionConfigSvc) FindOemAppFunctionConfig(req *proto.OemAppFunctionConfigFilter) (*proto.OemAppFunctionConfig, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppFunctionConfig
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.AboutUs != 0 { //整数
		do = do.Where(t.AboutUs.Eq(req.AboutUs))
	}
	if req.Eula != 0 { //整数
		do = do.Where(t.Eula.Eq(req.Eula))
	}
	if req.PrivacyPolicy != 0 { //整数
		do = do.Where(t.PrivacyPolicy.Eq(req.PrivacyPolicy))
	}
	if req.Weather != 0 { //整数
		do = do.Where(t.Weather.Eq(req.Weather))
	}
	if req.Voices != "" { //字符串
		do = do.Where(t.Voices.Eq(req.Voices))
	}
	if req.Thirds != "" { //字符串
		do = do.Where(t.Thirds.Eq(req.Thirds))
	}
	if req.AutoUpgrade != "" { //字符串
		do = do.Where(t.AutoUpgrade.Eq(req.AutoUpgrade))
	}
	if req.Geo != 0 { //整数
		do = do.Where(t.Geo.Eq(req.Geo))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOemAppFunctionConfig error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppFunctionConfig_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OemAppFunctionConfig
func (s *OemAppFunctionConfigSvc) FindByIdOemAppFunctionConfig(req *proto.OemAppFunctionConfigFilter) (*proto.OemAppFunctionConfig, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppFunctionConfig
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOemAppFunctionConfig error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppFunctionConfig_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OemAppFunctionConfig,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OemAppFunctionConfigSvc) GetListOemAppFunctionConfig(req *proto.OemAppFunctionConfigListRequest) ([]*proto.OemAppFunctionConfig, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOemAppFunctionConfig
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.AppId != 0 { //整数
			do = do.Where(t.AppId.Eq(query.AppId))
		}
		if query.Version != "" { //字符串
			do = do.Where(t.Version.Like("%" + query.Version + "%"))
		}
		if query.AboutUs != 0 { //整数
			do = do.Where(t.AboutUs.Eq(query.AboutUs))
		}
		if query.Eula != 0 { //整数
			do = do.Where(t.Eula.Eq(query.Eula))
		}
		if query.PrivacyPolicy != 0 { //整数
			do = do.Where(t.PrivacyPolicy.Eq(query.PrivacyPolicy))
		}
		if query.Weather != 0 { //整数
			do = do.Where(t.Weather.Eq(query.Weather))
		}
		if query.Voices != "" { //字符串
			do = do.Where(t.Voices.Like("%" + query.Voices + "%"))
		}
		if query.Thirds != "" { //字符串
			do = do.Where(t.Thirds.Like("%" + query.Thirds + "%"))
		}
		if query.AutoUpgrade != "" { //字符串
			do = do.Where(t.AutoUpgrade.Like("%" + query.AutoUpgrade + "%"))
		}
		if query.Geo != 0 { //整数
			do = do.Where(t.Geo.Eq(query.Geo))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOemAppFunctionConfig
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOemAppFunctionConfig error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OemAppFunctionConfig, len(list))
	for i, v := range list {
		result[i] = convert.OemAppFunctionConfig_db2pb(v)
	}
	return result, total, nil
}
