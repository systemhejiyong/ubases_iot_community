// Code generated by sgen.exe,2022-11-16 16:26:52. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"google.golang.org/protobuf/types/known/timestamppb"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_oem_service/convert"
	"cloud_platform/iot_common/iotutil"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app_oem/model"
	"cloud_platform/iot_model/db_app_oem/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"go-micro.dev/v4/metadata"
)

type OemAppDocSvc struct {
	Ctx context.Context
}

// 创建OemAppDoc
func (s *OemAppDocSvc) CreateOemAppDoc(req *proto.OemAppDoc) (*proto.OemAppDoc, error) {
	// fixme 请在这里校验参数
	userid, _ := metadata.Get(s.Ctx, "userid")
	tenantid, _ := metadata.Get(s.Ctx, "tenantid")
	req.TenantId = tenantid
	req.CreatedAt = timestamppb.New(time.Now())
	req.CreatedBy = iotutil.ToInt64(userid)
	req.UpdatedAt = timestamppb.New(time.Now())
	req.UpdatedBy = iotutil.ToInt64(userid)
	// req.Id = iotutil.GetNextSeqInt64()
	t := orm.Use(iotmodel.GetDB()).TOemAppDoc
	do := t.WithContext(context.Background())
	dbObj := convert.OemAppDoc_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOemAppDoc error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OemAppDoc
func (s *OemAppDocSvc) DeleteOemAppDoc(req *proto.OemAppDoc) (*proto.OemAppDoc, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDoc
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.Apps != "" { //字符串
		do = do.Where(t.Apps.Eq(req.Apps))
	}
	if req.Langs != "" { //字符串
		do = do.Where(t.Langs.Eq(req.Langs))
	}
	if req.RemainLang != "" { //字符串
		do = do.Where(t.RemainLang.Eq(req.RemainLang))
	}
	if req.IsSucceedPubDoc != 0 { //整数
		do = do.Where(t.IsSucceedPubDoc.Eq(req.IsSucceedPubDoc))
	}
	if req.SucceedPubDoc != "" { //字符串
		do = do.Where(t.SucceedPubDoc.Eq(req.SucceedPubDoc))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.HelpCenterName != "" { //整数
		do = do.Where(t.HelpCenterName.Eq(req.HelpCenterName))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOemAppDoc error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OemAppDoc
func (s *OemAppDocSvc) DeleteByIdOemAppDoc(req *proto.OemAppDoc) (*proto.OemAppDoc, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDoc
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOemAppDoc error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OemAppDoc
func (s *OemAppDocSvc) DeleteByIdsOemAppDoc(req *proto.OemAppDocBatchDeleteRequest) (*proto.OemAppDocBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOemAppDoc
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOemAppDoc error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OemAppDoc
func (s *OemAppDocSvc) UpdateOemAppDoc(req *proto.OemAppDoc) (*proto.OemAppDoc, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDoc
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Name != "" { //字符串
		updateField = append(updateField, t.Name)
	}
	if req.Apps != "" { //字符串
		updateField = append(updateField, t.Apps)
	}
	if req.Langs != "" { //字符串
		updateField = append(updateField, t.Langs)
	}
	if req.RemainLang != "" { //字符串
		updateField = append(updateField, t.RemainLang)
	}
	if req.IsSucceedPubDoc != 0 { //整数
		updateField = append(updateField, t.IsSucceedPubDoc)
	}
	if req.SucceedPubDoc != "" { //字符串
		updateField = append(updateField, t.SucceedPubDoc)
	}
	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.TenantId)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if req.HelpCenterName != "" { //整数
		updateField = append(updateField, t.HelpCenterName)
	}
	if req.Version != "" { //字符串
		updateField = append(updateField, t.Version)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOemAppDoc error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OemAppDoc_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOemAppDoc error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OemAppDoc
func (s *OemAppDocSvc) UpdateAllOemAppDoc(req *proto.OemAppDoc) (*proto.OemAppDoc, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDoc
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Name)
	updateField = append(updateField, t.Apps)
	updateField = append(updateField, t.Langs)
	updateField = append(updateField, t.RemainLang)
	updateField = append(updateField, t.IsSucceedPubDoc)
	updateField = append(updateField, t.SucceedPubDoc)
	updateField = append(updateField, t.TenantId)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	updateField = append(updateField, t.HelpCenterName)
	updateField = append(updateField, t.Version)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOemAppDoc error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppDoc_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOemAppDoc error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OemAppDocSvc) UpdateFieldsOemAppDoc(req *proto.OemAppDocUpdateFieldsRequest) (*proto.OemAppDoc, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDoc
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOemAppDoc error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOemAppDoc error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	userid, _ := metadata.Get(s.Ctx, "userid")
	req.Data.UpdatedBy = iotutil.ToInt64(userid)
	req.Data.UpdatedAt = timestamppb.New(time.Now())
	dbObj := convert.OemAppDoc_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOemAppDoc error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OemAppDoc
func (s *OemAppDocSvc) FindOemAppDoc(req *proto.OemAppDocFilter) (*proto.OemAppDoc, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDoc
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.Apps != "" { //字符串
		do = do.Where(t.Apps.Eq(req.Apps))
	}
	if req.Langs != "" { //字符串
		do = do.Where(t.Langs.Eq(req.Langs))
	}
	if req.RemainLang != "" { //字符串
		do = do.Where(t.RemainLang.Eq(req.RemainLang))
	}
	if req.IsSucceedPubDoc != 0 { //整数
		do = do.Where(t.IsSucceedPubDoc.Eq(req.IsSucceedPubDoc))
	}
	if req.SucceedPubDoc != "" { //字符串
		do = do.Where(t.SucceedPubDoc.Eq(req.SucceedPubDoc))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.HelpCenterName != "" { //整数
		do = do.Where(t.HelpCenterName.Eq(req.HelpCenterName))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOemAppDoc error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppDoc_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OemAppDoc
func (s *OemAppDocSvc) FindByIdOemAppDoc(req *proto.OemAppDocFilter) (*proto.OemAppDoc, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppDoc
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOemAppDoc error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppDoc_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OemAppDoc,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OemAppDocSvc) GetListOemAppDoc(req *proto.OemAppDocListRequest) ([]*proto.OemAppDoc, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOemAppDoc
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Name != "" { //字符串
			do = do.Where(t.Name.Like("%" + query.Name + "%"))
		}
		if query.Apps != "" { //字符串
			do = do.Where(t.Apps.Like("%" + query.Apps + "%"))
		}
		if query.Langs != "" { //字符串
			do = do.Where(t.Langs.Like("%" + query.Langs + "%"))
		}
		if query.RemainLang != "" { //字符串
			do = do.Where(t.RemainLang.Like("%" + query.RemainLang + "%"))
		}
		if query.IsSucceedPubDoc != 0 { //整数
			do = do.Where(t.IsSucceedPubDoc.Eq(query.IsSucceedPubDoc))
		}
		if query.SucceedPubDoc != "" { //字符串
			do = do.Where(t.SucceedPubDoc.Like("%" + query.SucceedPubDoc + "%"))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Like("%" + query.TenantId + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
		if query.HelpCenterName != "" { //整数
			do = do.Where(t.HelpCenterName.Eq(query.HelpCenterName))
		}
		if query.Version != "" { //字符串
			do = do.Where(t.Version.Like("%" + query.Version + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.CreatedAt
		req.OrderDesc = "desc"
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOemAppDoc
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOemAppDoc error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OemAppDoc, len(list))
	for i, v := range list {
		result[i] = convert.OemAppDoc_db2pb(v)
	}
	return result, total, nil
}
