// Code generated by sgen.exe,2022-10-24 08:40:57. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_oem_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app_oem/model"
	"cloud_platform/iot_model/db_app_oem/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OemFeedbackTypeSvc struct {
	Ctx context.Context
}

// 创建OemFeedbackType
func (s *OemFeedbackTypeSvc) CreateOemFeedbackType(req *proto.OemFeedbackType) (*proto.OemFeedbackType, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOemFeedbackType
	do := t.WithContext(context.Background())
	dbObj := convert.OemFeedbackType_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOemFeedbackType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OemFeedbackType
func (s *OemFeedbackTypeSvc) DeleteOemFeedbackType(req *proto.OemFeedbackType) (*proto.OemFeedbackType, error) {
	t := orm.Use(iotmodel.GetDB()).TOemFeedbackType
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.Sort != 0 { //整数
		do = do.Where(t.Sort.Eq(req.Sort))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOemFeedbackType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OemFeedbackType
func (s *OemFeedbackTypeSvc) DeleteByIdOemFeedbackType(req *proto.OemFeedbackType) (*proto.OemFeedbackType, error) {
	t := orm.Use(iotmodel.GetDB()).TOemFeedbackType
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOemFeedbackType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OemFeedbackType
func (s *OemFeedbackTypeSvc) DeleteByIdsOemFeedbackType(req *proto.OemFeedbackTypeBatchDeleteRequest) (*proto.OemFeedbackTypeBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOemFeedbackType
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOemFeedbackType error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OemFeedbackType
func (s *OemFeedbackTypeSvc) UpdateOemFeedbackType(req *proto.OemFeedbackType) (*proto.OemFeedbackType, error) {
	t := orm.Use(iotmodel.GetDB()).TOemFeedbackType
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Name != "" { //字符串
		updateField = append(updateField, t.Name)
	}
	if req.AppId != 0 { //整数
		updateField = append(updateField, t.AppId)
	}
	if req.AppKey != "" { //字符串
		updateField = append(updateField, t.AppKey)
	}
	if req.Sort != 0 { //整数
		updateField = append(updateField, t.Sort)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOemFeedbackType error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OemFeedbackType_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOemFeedbackType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OemFeedbackType
func (s *OemFeedbackTypeSvc) UpdateAllOemFeedbackType(req *proto.OemFeedbackType) (*proto.OemFeedbackType, error) {
	t := orm.Use(iotmodel.GetDB()).TOemFeedbackType
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Name)
	updateField = append(updateField, t.AppId)
	updateField = append(updateField, t.AppKey)
	updateField = append(updateField, t.Sort)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOemFeedbackType error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemFeedbackType_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOemFeedbackType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OemFeedbackTypeSvc) UpdateFieldsOemFeedbackType(req *proto.OemFeedbackTypeUpdateFieldsRequest) (*proto.OemFeedbackType, error) {
	t := orm.Use(iotmodel.GetDB()).TOemFeedbackType
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOemFeedbackType error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOemFeedbackType error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemFeedbackType_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOemFeedbackType error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OemFeedbackType
func (s *OemFeedbackTypeSvc) FindOemFeedbackType(req *proto.OemFeedbackTypeFilter) (*proto.OemFeedbackType, error) {
	t := orm.Use(iotmodel.GetDB()).TOemFeedbackType
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.Sort != 0 { //整数
		do = do.Where(t.Sort.Eq(req.Sort))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOemFeedbackType error : %s", err.Error())
		return nil, err
	}
	res := convert.OemFeedbackType_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OemFeedbackType
func (s *OemFeedbackTypeSvc) FindByIdOemFeedbackType(req *proto.OemFeedbackTypeFilter) (*proto.OemFeedbackType, error) {
	t := orm.Use(iotmodel.GetDB()).TOemFeedbackType
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOemFeedbackType error : %s", err.Error())
		return nil, err
	}
	res := convert.OemFeedbackType_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OemFeedbackType,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OemFeedbackTypeSvc) GetListOemFeedbackType(req *proto.OemFeedbackTypeListRequest) ([]*proto.OemFeedbackType, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOemFeedbackType
	tApp := orm.Use(iotmodel.GetDB()).TOemApp
	do := t.WithContext(context.Background()).LeftJoin(tApp, tApp.Id.EqCol(t.AppId))
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Name != "" { //字符串
			do = do.Where(t.Name.Like("%" + query.Name + "%"))
		}
		if query.AppId != 0 { //整数
			do = do.Where(t.AppId.Eq(query.AppId))
		}
		if query.AppKey != "" { //字符串
			do = do.Where(t.AppKey.Like("%" + query.AppKey + "%"))
		}
		if query.Sort != 0 { //整数
			do = do.Where(t.Sort.Eq(query.Sort))
		}
		if query.TenantId != "" {
			do = do.Where(tApp.TenantId.Eq(query.TenantId))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.Sort)
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol)
		} else {
			do = do.Order(orderCol.Desc())
		}
	}

	var list []*struct {
		model.TOemFeedbackType
		Appname string `json:"appname"`
	}
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do.Select(t.ALL, tApp.Name.As("appname")).ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Select(t.ALL, tApp.Name.As("appname")).Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOemFeedbackType error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OemFeedbackType, len(list))
	for i, v := range list {
		r := convert.OemFeedbackType_db2pb(&v.TOemFeedbackType)
		r.AppName = v.Appname
		result[i] = r
	}
	return result, total, nil
}
