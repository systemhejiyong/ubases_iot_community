// Code generated by sgen.exe,2022-10-24 09:40:31. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_oem_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app_oem/model"
	"cloud_platform/iot_model/db_app_oem/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OemAppFlashScreenSvc struct {
	Ctx context.Context
}

// 创建OemAppFlashScreen
func (s *OemAppFlashScreenSvc) CreateOemAppFlashScreen(req *proto.OemAppFlashScreen) (*proto.OemAppFlashScreen, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOemAppFlashScreen
	do := t.WithContext(context.Background())
	dbObj := convert.OemAppFlashScreen_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOemAppFlashScreen error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OemAppFlashScreen
func (s *OemAppFlashScreenSvc) DeleteOemAppFlashScreen(req *proto.OemAppFlashScreen) (*proto.OemAppFlashScreen, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppFlashScreen
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.AppName != "" { //字符串
		do = do.Where(t.AppName.Eq(req.AppName))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.AppVersion != "" { //字符串
		do = do.Where(t.AppVersion.Eq(req.AppVersion))
	}
	if req.PutinUser != 0 { //整数
		do = do.Where(t.PutinUser.Eq(req.PutinUser))
	}
	if req.OpenPageType != 0 { //整数
		do = do.Where(t.OpenPageType.Eq(req.OpenPageType))
	}
	if req.AppPageType != 0 { //整数
		do = do.Where(t.AppPageType.Eq(req.AppPageType))
	}
	if req.OpenPageUrl != "" { //字符串
		do = do.Where(t.OpenPageUrl.Eq(req.OpenPageUrl))
	}
	if req.ShowTime != 0 { //整数
		do = do.Where(t.ShowTime.Eq(req.ShowTime))
	}
	if req.PutinImgUrls != "" { //字符串
		do = do.Where(t.PutinImgUrls.Eq(req.PutinImgUrls))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOemAppFlashScreen error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OemAppFlashScreen
func (s *OemAppFlashScreenSvc) DeleteByIdOemAppFlashScreen(req *proto.OemAppFlashScreen) (*proto.OemAppFlashScreen, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppFlashScreen
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOemAppFlashScreen error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OemAppFlashScreen
func (s *OemAppFlashScreenSvc) DeleteByIdsOemAppFlashScreen(req *proto.OemAppFlashScreenBatchDeleteRequest) (*proto.OemAppFlashScreenBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOemAppFlashScreen
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOemAppFlashScreen error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OemAppFlashScreen
func (s *OemAppFlashScreenSvc) UpdateOemAppFlashScreen(req *proto.OemAppFlashScreen) (*proto.OemAppFlashScreen, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppFlashScreen
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.TenantId)
	}
	if req.Name != "" { //字符串
		updateField = append(updateField, t.Name)
	}
	if req.AppName != "" { //字符串
		updateField = append(updateField, t.AppName)
	}
	if req.AppKey != "" { //字符串
		updateField = append(updateField, t.AppKey)
	}
	if req.AppVersion != "" { //字符串
		updateField = append(updateField, t.AppVersion)
	}
	if req.PutinUser != 0 { //整数
		updateField = append(updateField, t.PutinUser)
	}
	if req.OpenPageType != 0 { //整数
		updateField = append(updateField, t.OpenPageType)
	}
	if req.AppPageType != 0 { //整数
		updateField = append(updateField, t.AppPageType)
	}
	if req.OpenPageUrl != "" { //字符串
		updateField = append(updateField, t.OpenPageUrl)
	}
	if req.StartTime != nil { //整数
		updateField = append(updateField, t.StartTime)
	}
	if req.EndTime != nil { //整数
		updateField = append(updateField, t.EndTime)
	}
	if req.ShowTime != 0 { //整数
		updateField = append(updateField, t.ShowTime)
	}
	if req.PutinImgUrls != "" { //字符串
		updateField = append(updateField, t.PutinImgUrls)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOemAppFlashScreen error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OemAppFlashScreen_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOemAppFlashScreen error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OemAppFlashScreen
func (s *OemAppFlashScreenSvc) UpdateAllOemAppFlashScreen(req *proto.OemAppFlashScreen) (*proto.OemAppFlashScreen, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppFlashScreen
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.TenantId)
	updateField = append(updateField, t.Name)
	updateField = append(updateField, t.AppName)
	updateField = append(updateField, t.AppKey)
	updateField = append(updateField, t.AppVersion)
	updateField = append(updateField, t.PutinUser)
	updateField = append(updateField, t.OpenPageType)
	updateField = append(updateField, t.AppPageType)
	updateField = append(updateField, t.OpenPageUrl)
	updateField = append(updateField, t.StartTime)
	updateField = append(updateField, t.EndTime)
	updateField = append(updateField, t.ShowTime)
	updateField = append(updateField, t.PutinImgUrls)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOemAppFlashScreen error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppFlashScreen_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOemAppFlashScreen error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OemAppFlashScreenSvc) UpdateFieldsOemAppFlashScreen(req *proto.OemAppFlashScreenUpdateFieldsRequest) (*proto.OemAppFlashScreen, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppFlashScreen
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOemAppFlashScreen error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOemAppFlashScreen error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppFlashScreen_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOemAppFlashScreen error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OemAppFlashScreen
func (s *OemAppFlashScreenSvc) FindOemAppFlashScreen(req *proto.OemAppFlashScreenFilter) (*proto.OemAppFlashScreen, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppFlashScreen
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.AppName != "" { //字符串
		do = do.Where(t.AppName.Eq(req.AppName))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.AppVersion != "" { //字符串
		do = do.Where(t.AppVersion.Eq(req.AppVersion))
	}
	if req.PutinUser != 0 { //整数
		do = do.Where(t.PutinUser.Eq(req.PutinUser))
	}
	if req.OpenPageType != 0 { //整数
		do = do.Where(t.OpenPageType.Eq(req.OpenPageType))
	}
	if req.AppPageType != 0 { //整数
		do = do.Where(t.AppPageType.Eq(req.AppPageType))
	}
	if req.OpenPageUrl != "" { //字符串
		do = do.Where(t.OpenPageUrl.Eq(req.OpenPageUrl))
	}
	if req.ShowTime != 0 { //整数
		do = do.Where(t.ShowTime.Eq(req.ShowTime))
	}
	if req.PutinImgUrls != "" { //字符串
		do = do.Where(t.PutinImgUrls.Eq(req.PutinImgUrls))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOemAppFlashScreen error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppFlashScreen_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OemAppFlashScreen
func (s *OemAppFlashScreenSvc) FindByIdOemAppFlashScreen(req *proto.OemAppFlashScreenFilter) (*proto.OemAppFlashScreen, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppFlashScreen
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOemAppFlashScreen error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppFlashScreen_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OemAppFlashScreen,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OemAppFlashScreenSvc) GetListOemAppFlashScreen(req *proto.OemAppFlashScreenListRequest) ([]*proto.OemAppFlashScreen, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOemAppFlashScreen
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Like("%" + query.TenantId + "%"))
		}
		if query.Name != "" { //字符串
			do = do.Where(t.Name.Like("%" + query.Name + "%"))
		}
		if query.AppName != "" { //字符串
			do = do.Where(t.AppName.Like("%" + query.AppName + "%"))
		}
		if query.AppKey != "" { //字符串
			do = do.Where(t.AppKey.Like("%" + query.AppKey + "%"))
		}
		if query.AppVersion != "" { //字符串
			do = do.Where(t.AppVersion.Like("%" + query.AppVersion + "%"))
		}
		if query.PutinUser != 0 { //整数
			do = do.Where(t.PutinUser.Eq(query.PutinUser))
		}
		if query.OpenPageType != 0 { //整数
			do = do.Where(t.OpenPageType.Eq(query.OpenPageType))
		}
		if query.AppPageType != 0 { //整数
			do = do.Where(t.AppPageType.Eq(query.AppPageType))
		}
		if query.OpenPageUrl != "" { //字符串
			do = do.Where(t.OpenPageUrl.Like("%" + query.OpenPageUrl + "%"))
		}
		if query.ShowTime != 0 { //整数
			do = do.Where(t.ShowTime.Eq(query.ShowTime))
		}
		if query.PutinImgUrls != "" { //字符串
			do = do.Where(t.PutinImgUrls.Like("%" + query.PutinImgUrls + "%"))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOemAppFlashScreen
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOemAppFlashScreen error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OemAppFlashScreen, len(list))
	for i, v := range list {
		result[i] = convert.OemAppFlashScreen_db2pb(v)
	}
	return result, total, nil
}

// 根据非空条件查找OemAppFlashScreen
func (s *OemAppFlashScreenSvc) GetOemAppFlashScreen(req *proto.OemAppFlashScreenRequest) ([]*proto.OemAppFlashScreen, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppFlashScreen
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.AppVersion.Lte(req.Version))
	}
	do = do.Where(t.Status.Eq(2))
	do = do.Where(t.EndTime.Gt(time.Now()))
	do = do.Order(t.StartTime, t.EndTime)
	list, err := do.Find()
	if err != nil {
		logger.Errorf("GetOemAppFlashScreen error : %s", err.Error())
		return nil, err
	}
	if len(list) == 0 {
		return nil, nil
	}
	result := make([]*proto.OemAppFlashScreen, len(list))
	for i, v := range list {
		result[i] = convert.OemAppFlashScreen_db2pb(v)
	}
	return result, nil
}
