// Code generated by sgen.exe,2022-10-24 08:40:52. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"encoding/json"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_oem_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app_oem/model"
	"cloud_platform/iot_model/db_app_oem/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OemAppAssistReleaseSvc struct {
	Ctx context.Context
}

// 创建OemAppAssistRelease
func (s *OemAppAssistReleaseSvc) CreateOemAppAssistRelease(req *proto.OemAppAssistRelease) (*proto.OemAppAssistRelease, error) {
	q := orm.Use(iotmodel.GetDB())
	var err error
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TOemAppAssistRelease
		do := t.WithContext(context.Background())
		req.Id = iotutil.GetNextSeqInt64()
		req.Status = 2
		dbObj := convert.OemAppAssistRelease_pb2db(req)
		err := do.Create(dbObj)
		if err != nil {
			return err
		}
		tMarket := tx.TOemAppAssistReleaseMarket
		doMarket := tMarket.WithContext(context.Background())

		markets := []*model.TOemAppAssistReleaseMarket{}
		for _, market := range req.ReleaseMarkets {
			markets = append(markets, &model.TOemAppAssistReleaseMarket{
				Id:              iotutil.GetNextSeqInt64(),
				MarketId:        market.MarketId,
				ReleaseStatus:   2,
				AssistReleaseId: req.Id,
				IsCheck:         market.IsCheck,
			})
		}
		err = doMarket.Create(markets...)
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("CreateOemAppAssistRelease error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OemAppAssistRelease
func (s *OemAppAssistReleaseSvc) DeleteOemAppAssistRelease(req *proto.OemAppAssistRelease) (*proto.OemAppAssistRelease, error) {
	q := orm.Use(iotmodel.GetDB())
	var err error
	if req.Id == 0 {
		return nil, errors.New("上架记录Id不能为空")
	}
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TOemAppAssistRelease
		do := t.WithContext(context.Background())
		if req.Id != 0 { //整数
			do = do.Where(t.Id.Eq(req.Id))
		}
		if req.DevelopId != 0 { //整数
			do = do.Where(t.DevelopId.Eq(req.DevelopId))
		}
		if req.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Eq(req.TenantId))
		}
		if req.DevelopPhone != "" { //字符串
			do = do.Where(t.DevelopPhone.Eq(req.DevelopPhone))
		}
		if req.AppKey != "" { //字符串
			do = do.Where(t.AppKey.Eq(req.AppKey))
		}
		if req.AppVersion != "" { //字符串
			do = do.Where(t.AppVersion.Eq(req.AppVersion))
		}
		if req.AppTemplateId != 0 { //整数
			do = do.Where(t.AppTemplateId.Eq(req.AppTemplateId))
		}
		if req.AppTemplateVersion != "" { //字符串
			do = do.Where(t.AppTemplateVersion.Eq(req.AppTemplateVersion))
		}
		if req.SkinId != 0 { //整数
			do = do.Where(t.SkinId.Eq(req.SkinId))
		}
		if req.Status != 0 { //整数
			do = do.Where(t.Status.Eq(req.Status))
		}
		if req.Remark != "" { //字符串
			do = do.Where(t.Remark.Eq(req.Remark))
		}
		if req.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
		}
		if req.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
		}
		_, err = do.Delete()
		if err != nil {
			return err
		}
		_, err = tx.TOemAppAssistReleaseMarket.WithContext(context.Background()).
			Where(tx.TOemAppAssistReleaseMarket.AssistReleaseId.Eq(req.Id)).Delete()
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("DeleteOemAppAssistRelease error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OemAppAssistRelease
func (s *OemAppAssistReleaseSvc) DeleteByIdOemAppAssistRelease(req *proto.OemAppAssistRelease) (*proto.OemAppAssistRelease, error) {
	q := orm.Use(iotmodel.GetDB())
	var err error
	if req.Id == 0 {
		return nil, errors.New("上架记录Id不能为空")
	}
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TOemAppAssistRelease
		do := t.WithContext(context.Background())
		do = do.Where(t.Id.Eq(req.Id))
		_, err = do.Delete()
		if err != nil {
			return err
		}
		_, err = tx.TOemAppAssistReleaseMarket.WithContext(context.Background()).
			Where(tx.TOemAppAssistReleaseMarket.AssistReleaseId.Eq(req.Id)).Delete()
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("DeleteOemAppAssistRelease error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OemAppAssistRelease
func (s *OemAppAssistReleaseSvc) DeleteByIdsOemAppAssistRelease(req *proto.OemAppAssistReleaseBatchDeleteRequest) (*proto.OemAppAssistReleaseBatchDeleteRequest, error) {
	var err error
	var ids []int64
	for _, k := range req.Keys {
		ids = append(ids, k.Id)
	}
	q := orm.Use(iotmodel.GetDB())
	if len(ids) == 0 {
		return nil, errors.New("上架记录Id不能为空")
	}
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TOemAppAssistRelease
		do := t.WithContext(context.Background())
		do = do.Where(t.Id.In(ids...))
		_, err = do.Delete()
		if err != nil {
			return err
		}
		_, err = tx.TOemAppAssistReleaseMarket.WithContext(context.Background()).
			Where(tx.TOemAppAssistReleaseMarket.AssistReleaseId.In(ids...)).Delete()
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("DeleteOemAppAssistRelease error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据主键更新OemAppAssistRelease
func (s *OemAppAssistReleaseSvc) UpdateOemAppAssistRelease(req *proto.OemAppAssistRelease) (*proto.OemAppAssistRelease, error) {
	q := orm.Use(iotmodel.GetDB())
	var err error
	if req.Id == 0 {
		return nil, errors.New("上架记录Id不能为空")
	}
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TOemAppAssistRelease
		do := t.WithContext(context.Background())
		//要更新的字段,不包括主键
		var updateField []field.Expr

		if req.DevelopId != 0 { //整数
			updateField = append(updateField, t.DevelopId)
		}
		if req.TenantId != "" { //字符串
			updateField = append(updateField, t.TenantId)
		}
		if req.DevelopPhone != "" { //字符串
			updateField = append(updateField, t.DevelopPhone)
		}
		if req.AppKey != "" { //字符串
			updateField = append(updateField, t.AppKey)
		}
		if req.AppVersion != "" { //字符串
			updateField = append(updateField, t.AppVersion)
		}
		if req.AppTemplateId != 0 { //整数
			updateField = append(updateField, t.AppTemplateId)
		}
		if req.AppTemplateVersion != "" { //字符串
			updateField = append(updateField, t.AppTemplateVersion)
		}
		if req.SkinId != 0 { //整数
			updateField = append(updateField, t.SkinId)
		}
		if req.Status != 0 { //整数
			updateField = append(updateField, t.Status)
		}
		if req.StartTime != nil {
			updateField = append(updateField, t.StartTime)
		}
		if req.EndTime != nil {
			updateField = append(updateField, t.EndTime)
		}
		if req.Remark != "" { //字符串
			updateField = append(updateField, t.Remark)
		}
		if req.CreatedBy != 0 { //整数
			updateField = append(updateField, t.CreatedBy)
		}
		if req.UpdatedBy != 0 { //整数
			updateField = append(updateField, t.UpdatedBy)
		}
		if len(updateField) > 0 {
			do = do.Select(updateField...)
		}
		//主键条件
		HasPrimaryKey := false

		if req.Id != 0 { //整数
			do = do.Where(t.Id.Eq(req.Id))
			HasPrimaryKey = true
		}
		if !HasPrimaryKey {
			return errors.New("Missing condition")
		}
		dbObj := convert.OemAppAssistRelease_pb2db(req)
		_, err := do.Updates(dbObj)
		if err != nil {
			return err
		}
		tMarket := tx.TOemAppAssistReleaseMarket
		doMarket := tMarket.WithContext(context.Background())
		_, err = doMarket.Where(tMarket.AssistReleaseId.Eq(req.Id)).Delete()
		if err != nil {
			return err
		}
		markets := []*model.TOemAppAssistReleaseMarket{}
		for _, market := range req.ReleaseMarkets {
			r := &model.TOemAppAssistReleaseMarket{
				Id:              iotutil.GetNextSeqInt64(),
				MarketId:        market.MarketId,
				ReleaseStatus:   market.ReleaseStatus,
				AssistReleaseId: market.AssistReleaseId,
				IsCheck:         market.IsCheck,
			}
			if market.FinishTime != 0 {
				r.FinishTime = time.Unix(market.FinishTime, 0)
			}
			markets = append(markets, r)
		}
		err = doMarket.Create(markets...)
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("UpdateOemAppAssistRelease error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OemAppAssistRelease
func (s *OemAppAssistReleaseSvc) UpdateAllOemAppAssistRelease(req *proto.OemAppAssistRelease) (*proto.OemAppAssistRelease, error) {
	q := orm.Use(iotmodel.GetDB())
	var err error
	if req.Id == 0 {
		return nil, errors.New("上架记录Id不能为空")
	}
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TOemAppAssistRelease
		do := t.WithContext(context.Background())
		//要更新的字段,不包括主键
		var updateField []field.Expr

		updateField = append(updateField, t.DevelopId)
		updateField = append(updateField, t.TenantId)
		updateField = append(updateField, t.DevelopPhone)
		updateField = append(updateField, t.AppKey)
		updateField = append(updateField, t.AppVersion)
		updateField = append(updateField, t.AppTemplateId)
		updateField = append(updateField, t.AppTemplateVersion)
		updateField = append(updateField, t.SkinId)
		updateField = append(updateField, t.StartTime)
		updateField = append(updateField, t.EndTime)
		updateField = append(updateField, t.Status)
		updateField = append(updateField, t.Remark)
		updateField = append(updateField, t.CreatedBy)
		updateField = append(updateField, t.UpdatedBy)
		if len(updateField) > 0 {
			do = do.Select(updateField...)
		}
		//主键条件
		HasPrimaryKey := false
		if req.Id != 0 { //整数
			do = do.Where(t.Id.Eq(req.Id))
			HasPrimaryKey = true
		}
		if !HasPrimaryKey {
			return errors.New("Missing condition")
		}
		dbObj := convert.OemAppAssistRelease_pb2db(req)
		_, err := do.Updates(dbObj)
		if err != nil {
			return err
		}
		tMarket := tx.TOemAppAssistReleaseMarket
		doMarket := tMarket.WithContext(context.Background())
		_, err = doMarket.Where(tMarket.AssistReleaseId.Eq(req.Id)).Delete()
		if err != nil {
			return err
		}
		markets := []*model.TOemAppAssistReleaseMarket{}
		for _, market := range req.ReleaseMarkets {
			r := &model.TOemAppAssistReleaseMarket{
				Id:              iotutil.GetNextSeqInt64(),
				MarketId:        market.MarketId,
				ReleaseStatus:   market.ReleaseStatus,
				AssistReleaseId: market.AssistReleaseId,
				IsCheck:         market.IsCheck,
			}
			if market.FinishTime != 0 {
				r.FinishTime = time.Unix(market.FinishTime, 0)
			}
			markets = append(markets, r)
		}
		err = doMarket.Create(markets...)
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("UpdateAllOemAppAssistRelease error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OemAppAssistReleaseSvc) UpdateFieldsOemAppAssistRelease(req *proto.OemAppAssistReleaseUpdateFieldsRequest) (*proto.OemAppAssistRelease, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppAssistRelease
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOemAppAssistRelease error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOemAppAssistRelease error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppAssistRelease_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOemAppAssistRelease error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OemAppAssistRelease
func (s *OemAppAssistReleaseSvc) FindOemAppAssistRelease(req *proto.OemAppAssistReleaseFilter) (*proto.OemAppAssistRelease, error) {
	q := orm.Use(iotmodel.GetDB())
	t := q.TOemAppAssistRelease
	do := t.WithContext(context.Background())
	tSkin := q.TOemAppTemplateSkin
	do = do.LeftJoin(tSkin, tSkin.Id.EqCol(t.SkinId))

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.DevelopId != 0 { //整数
		do = do.Where(t.DevelopId.Eq(req.DevelopId))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.DevelopPhone != "" { //字符串
		do = do.Where(t.DevelopPhone.Eq(req.DevelopPhone))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.AppVersion != "" { //字符串
		do = do.Where(t.AppVersion.Eq(req.AppVersion))
	}
	if req.AppTemplateId != 0 { //整数
		do = do.Where(t.AppTemplateId.Eq(req.AppTemplateId))
	}
	if req.AppTemplateVersion != "" { //字符串
		do = do.Where(t.AppTemplateVersion.Eq(req.AppTemplateVersion))
	}
	if req.SkinId != 0 { //整数
		do = do.Where(t.SkinId.Eq(req.SkinId))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.IsCheckSkin {
		do = do.Where(t.StartTime.Lte(time.Now()), t.EndTime.Gte(time.Now()))
	}
	var res struct {
		*model.TOemAppAssistRelease
		SkinName string
		SkinKey  string
	}
	err := do.Select(t.ALL, tSkin.Name.As("skin_name"), tSkin.Code.As("skin_key")).Scan(&res)
	if err != nil {
		logger.Errorf("FindOemAppAssistRelease error : %s", err.Error())
		return nil, err
	}
	if res.TOemAppAssistRelease == nil || res.SkinKey == "" {
		return nil, errors.New("未找到数据")
	}
	resultObj := convert.OemAppAssistRelease_db2pb(res.TOemAppAssistRelease)
	resultObj.SkinKey = res.SkinKey
	resultObj.SkinName = res.SkinName
	return resultObj, err
}

// 根据数据库表主键查找OemAppAssistRelease
func (s *OemAppAssistReleaseSvc) FindByIdOemAppAssistRelease(req *proto.OemAppAssistReleaseFilter) (*proto.OemAppAssistRelease, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppAssistRelease
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOemAppAssistRelease error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppAssistRelease_db2pb(dbObj)

	tMarket := orm.Use(iotmodel.GetDB()).TOemAppAssistReleaseMarket
	doMarket := tMarket.WithContext(context.Background())
	marketList, err := doMarket.Where(tMarket.AssistReleaseId.Eq(req.Id)).Find()
	if err == nil {
		markets := []*proto.ReleaseMarket{}
		for _, market := range marketList {
			r := &proto.ReleaseMarket{
				MarketId:        market.MarketId,
				MarketName:      market.MarketName,
				FinishTime:      market.FinishTime.Unix(),
				ReleaseStatus:   market.ReleaseStatus,
				AssistReleaseId: market.AssistReleaseId,
				IsCheck:         market.IsCheck,
			}
			markets = append(markets, r)
		}
		res.ReleaseMarkets = markets
	}
	return res, err
}

// 根据分页条件查找OemAppAssistRelease,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OemAppAssistReleaseSvc) GetListOemAppAssistRelease(req *proto.OemAppAssistReleaseListRequest) ([]*proto.OemAppAssistRelease, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOemAppAssistRelease
	tSkin := orm.Use(iotmodel.GetDB()).TOemAppTemplateSkin
	tApp := orm.Use(iotmodel.GetDB()).TOemApp
	do := t.WithContext(context.Background()).
		LeftJoin(tApp, tApp.AppKey.EqCol(t.AppKey)).
		LeftJoin(tSkin, tSkin.Id.EqCol(t.SkinId))
	query := req.Query
	if query != nil {
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.DevelopId != 0 { //整数
			do = do.Where(t.DevelopId.Eq(query.DevelopId))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Like("%" + query.TenantId + "%"))
		}
		if query.DevelopPhone != "" { //字符串
			do = do.Where(t.DevelopPhone.Like("%" + query.DevelopPhone + "%"))
		}
		if query.AppKey != "" { //字符串
			do = do.Where(t.AppKey.Like("%" + query.AppKey + "%"))
		}
		if query.AppVersion != "" { //字符串
			do = do.Where(t.AppVersion.Like("%" + query.AppVersion + "%"))
		}
		if query.AppTemplateId != 0 { //整数
			do = do.Where(t.AppTemplateId.Eq(query.AppTemplateId))
		}
		if query.AppName != "" {
			do = do.Where(tApp.Name.Like("%" + query.AppName + "%"))
		}
		if query.AppTemplateVersion != "" { //字符串
			do = do.Where(t.AppTemplateVersion.Like(query.AppTemplateVersion))
		}
		if query.SkinId != 0 { //整数
			do = do.Where(t.SkinId.Eq(query.SkinId))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.CreatedAt.Desc())
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []struct {
		model.TOemAppAssistRelease
		SkinName string `gorm:"column:skinName"`
		AppName  string `gorm:"column:appName"`
	}
	do = do.Select(t.ALL, tApp.Name.As("appName"), tSkin.Name.As("skinName"))
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do.ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOemAppAssistRelease error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	releaseIds := []int64{}
	for _, v := range list {
		releaseIds = append(releaseIds, v.Id)
	}
	tMarket := orm.Use(iotmodel.GetDB()).TOemAppAssistReleaseMarket
	doMarket := tMarket.WithContext(context.Background())
	marketList, err := doMarket.Where(tMarket.AssistReleaseId.In(releaseIds...)).Find()
	marketMap := map[int64][]*proto.ReleaseMarket{}
	if err == nil {
		for _, market := range marketList {
			rMarket := &proto.ReleaseMarket{
				MarketId:        market.MarketId,
				MarketName:      market.MarketName,
				ReleaseStatus:   market.ReleaseStatus,
				AssistReleaseId: market.AssistReleaseId,
				FinishTime:      market.FinishTime.Unix(),
				IsCheck:         market.IsCheck,
			}
			if marketMap[market.AssistReleaseId] == nil {
				marketMap[market.AssistReleaseId] = []*proto.ReleaseMarket{}
			}
			marketMap[market.AssistReleaseId] = append(marketMap[market.AssistReleaseId], rMarket)
		}
	}

	result := make([]*proto.OemAppAssistRelease, len(list))
	for i, v := range list {
		result[i] = convert.OemAppAssistRelease_db2pb(&v.TOemAppAssistRelease)
		result[i].AppName = v.AppName
		result[i].SkinName = v.SkinName
		if v, ok := marketMap[v.Id]; ok {
			result[i].ReleaseMarkets = v
		}
	}
	return result, total, nil
}

type AppVersionItem struct {
	AppId         int64
	Version       string
	AppTemplateId int64
}

func (s *OemAppAssistReleaseSvc) DeveloperAppList(req *proto.DeveloperAppListRequest) ([]*proto.DeveloperAppList, error) {
	var (
		appsMap map[int64]*proto.DeveloperAppList = make(map[int64]*proto.DeveloperAppList)
		err     error
	)
	q := orm.Use(iotmodel.GetDB())
	tApp := q.TOemApp
	tAppBuild := q.TOemAppBuildRecord
	tAppTemplate := q.TOemAppTemplate
	tAppTemplateSkin := q.TOemAppTemplateSkin
	//查询APP列表
	//状态，要定义数据字典 , tApp.Status.Eq()
	//1.配置中:        跳转到第一步
	//2.构建中:       跳转到第四步(构建中页面)
	//3.构建完成:     跳转到第四步(构建完成页面)
	//4.上架中:       跳转到第五步(上架操作页面)
	//5.已上架:       跳转到第五步(已经上架页面)
	appList, err := tApp.WithContext(context.Background()).Where(tApp.TenantId.Eq(req.TenantId)).Find()
	if err != nil {
		return nil, err
	}
	if len(appList) == 0 {
		return []*proto.DeveloperAppList{}, nil
	}
	appIds := make([]int64, 0)
	appTemplateIds := make([]int64, 0)
	appTemplateMap := make(map[int64]int64, 0)
	for _, app := range appList {
		appIds = append(appIds, app.Id)
		if app.AppTemplateId == 0 {
			continue
		}
		if _, ok := appTemplateMap[app.AppTemplateId]; !ok {
			appTemplateMap[app.AppTemplateId] = 1
			appTemplateIds = append(appTemplateIds, app.AppTemplateId)
		}
		appsMap[app.Id] = &proto.DeveloperAppList{
			AppAndroidPkg: app.AndroidPkgName,
			AppId:         app.Id,
			AppIosPkg:     app.IosPkgName,
			AppKey:        app.AppKey,
			AppName:       app.Name,
		}
	}
	//获取APP版本列表
	var appVersion []AppVersionItem
	err = tAppBuild.WithContext(context.Background()).Where(tAppBuild.AppId.In(appIds...)).Group(tAppBuild.AppId, tAppBuild.Version, tAppBuild.AppTemplateId).Select(
		tAppBuild.AppId, tAppBuild.Version, tAppBuild.AppTemplateId).Scan(&appVersion)
	if err != nil {
		return nil, err
	}
	var appVersionMap map[int64][]AppVersionItem = make(map[int64][]AppVersionItem)
	for _, app := range appVersion {
		appVersionMap[app.AppId] = append(appVersionMap[app.AppId], app)
	}
	//获取APP模板版本信息
	appTemplates, err := tAppTemplate.WithContext(context.Background()).Where(tAppTemplate.Id.In(appTemplateIds...)).Find()
	if err != nil {
		return nil, err
	}
	var appTemplatesMap map[int64]*model.TOemAppTemplate = make(map[int64]*model.TOemAppTemplate)
	for _, appTemplate := range appTemplates {
		appTemplatesMap[appTemplate.Id] = appTemplate
	}
	//获取APP模板皮肤列表
	appTemplateSkins, err := tAppTemplateSkin.WithContext(context.Background()).Where(tAppTemplateSkin.AppTemplateId.In(appTemplateIds...)).Find()
	if err != nil {
		return nil, err
	}
	var appTemplateSkinsMap map[int64][]*model.TOemAppTemplateSkin = make(map[int64][]*model.TOemAppTemplateSkin)
	for _, skin := range appTemplateSkins {
		appTemplateSkinsMap[skin.AppTemplateId] = append(appTemplateSkinsMap[skin.AppTemplateId], skin)
	}
	resList := make([]*proto.DeveloperAppList, 0)
	for _, app := range appList {
		row := &proto.DeveloperAppList{
			AppAndroidPkg: app.AndroidPkgName,
			AppId:         app.Id,
			AppIosPkg:     app.IosPkgName,
			AppKey:        app.AppKey,
			AppName:       app.Name,
			AppVersions:   make([]*proto.AppVersionItem, 0),
		}

		for _, v := range appVersionMap[app.Id] {
			item := &proto.AppVersionItem{
				AppTemplateId: v.AppTemplateId,
				AppVersion:    v.Version,
			}
			if appTemplate, ok := appTemplatesMap[v.AppTemplateId]; ok {
				item.AppTemplateVersion = appTemplate.Version
				item.AppTemplateId = appTemplate.Id
			}
			for _, skin := range appTemplateSkinsMap[v.AppTemplateId] {
				var images []string = make([]string, 0)
				json.Unmarshal([]byte(skin.PreviewImages), &images)
				item.AppTemplateSkins = append(item.AppTemplateSkins, &proto.AppTemplateSkinItem{
					SkinImgs: images,
					SkinKey:  iotutil.ToString(skin.Id),
					SkinName: skin.Name,
				})
			}
			row.AppVersions = append(row.AppVersions, item)
		}
		resList = append(resList, row)
	}
	return resList, nil
}
