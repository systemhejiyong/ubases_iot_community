// Code generated by sgen.exe,2022-06-13 11:04:42. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_oem_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app_oem/model"
	"cloud_platform/iot_model/db_app_oem/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OemAppAndroidCertSvc struct {
	Ctx context.Context
}

// 创建OemAppAndroidCert
func (s *OemAppAndroidCertSvc) CreateOemAppAndroidCert(req *proto.OemAppAndroidCert) (*proto.OemAppAndroidCert, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOemAppAndroidCert
	do := t.WithContext(context.Background())
	dbObj := convert.OemAppAndroidCert_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOemAppAndroidCert error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OemAppAndroidCert
func (s *OemAppAndroidCertSvc) DeleteOemAppAndroidCert(req *proto.OemAppAndroidCert) (*proto.OemAppAndroidCert, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppAndroidCert
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.Resign != 0 { //整数
		do = do.Where(t.Resign.Eq(req.Resign))
	}
	if req.CertSha256 != "" { //字符串
		do = do.Where(t.CertSha256.Eq(req.CertSha256))
	}
	if req.Keypass != "" { //字符串
		do = do.Where(t.Keypass.Eq(req.Keypass))
	}
	if req.Storepass != "" { //字符串
		do = do.Where(t.Storepass.Eq(req.Storepass))
	}
	if req.AliasKeytool != "" { //字符串
		do = do.Where(t.AliasKeytool.Eq(req.AliasKeytool))
	}
	if req.Keystore != "" { //字符串
		do = do.Where(t.Keystore.Eq(req.Keystore))
	}
	if req.KsMd5 != "" { //字符串
		do = do.Where(t.KsMd5.Eq(req.KsMd5))
	}
	if req.KsSha1 != "" { //字符串
		do = do.Where(t.KsSha1.Eq(req.KsSha1))
	}
	if req.KsSha256 != "" { //字符串
		do = do.Where(t.KsSha256.Eq(req.KsSha256))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOemAppAndroidCert error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OemAppAndroidCert
func (s *OemAppAndroidCertSvc) DeleteByIdOemAppAndroidCert(req *proto.OemAppAndroidCert) (*proto.OemAppAndroidCert, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppAndroidCert
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOemAppAndroidCert error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OemAppAndroidCert
func (s *OemAppAndroidCertSvc) DeleteByIdsOemAppAndroidCert(req *proto.OemAppAndroidCertBatchDeleteRequest) (*proto.OemAppAndroidCertBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOemAppAndroidCert
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOemAppAndroidCert error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OemAppAndroidCert
func (s *OemAppAndroidCertSvc) UpdateOemAppAndroidCert(req *proto.OemAppAndroidCert) (*proto.OemAppAndroidCert, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppAndroidCert
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.AppId != 0 { //整数
		updateField = append(updateField, t.AppId)
	}
	if req.Version != "" { //字符串
		updateField = append(updateField, t.Version)
	}
	if req.Resign != 0 { //整数
		updateField = append(updateField, t.Resign)
	}
	if req.CertSha256 != "" { //字符串
		updateField = append(updateField, t.CertSha256)
	}
	if req.Keypass != "" { //字符串
		updateField = append(updateField, t.Keypass)
	}
	if req.Storepass != "" { //字符串
		updateField = append(updateField, t.Storepass)
	}
	if req.AliasKeytool != "" { //字符串
		updateField = append(updateField, t.AliasKeytool)
	}
	if req.Keystore != "" { //字符串
		updateField = append(updateField, t.Keystore)
	}
	if req.KsMd5 != "" { //字符串
		updateField = append(updateField, t.KsMd5)
	}
	if req.KsSha1 != "" { //字符串
		updateField = append(updateField, t.KsSha1)
	}
	if req.KsSha256 != "" { //字符串
		updateField = append(updateField, t.KsSha256)
	}
	if req.GoogleSignCert != "" { //字符串
		updateField = append(updateField, t.GoogleSignCert)
	}
	if req.HwSignCert != "" { //字符串
		updateField = append(updateField, t.HwSignCert)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOemAppAndroidCert error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OemAppAndroidCert_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOemAppAndroidCert error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 只更新cert_sha256和resign
func (s *OemAppAndroidCertSvc) UpdateAllOemAppAndroidCert(req *proto.OemAppAndroidCert) (*proto.OemAppAndroidCert, error) {
	iotmodel.GetDB().Exec("UPDATE `t_oem_app_android_cert` SET `cert_sha256`=?,`resign`=? WHERE `id`=?", req.CertSha256, req.Resign, req.Id)
	return nil, nil
}

func (s *OemAppAndroidCertSvc) UpdateKeystoreData(req *proto.OemAppAndroidCert) (*proto.OemAppAndroidCert, error) {
	//"keypass","storepass","keystore","ks_md5","ks_sha1","ks_sha256","alias_keytool"
	iotmodel.GetDB().Exec("UPDATE `t_oem_app_android_cert` SET `keypass`=?,`storepass`=?,`keystore`=?,`ks_md5`=?,`ks_sha1`=?, `ks_sha256`=?,`alias_keytool`=?, `hw_sign_cert`=?, `google_sign_cert`=? WHERE `id`=?",
		req.Keypass, req.Storepass, req.Keystore, req.KsMd5, req.KsSha1, req.KsSha256, req.AliasKeytool, req.HwSignCert, req.GoogleSignCert, req.Id)
	return nil, nil
}

func (s *OemAppAndroidCertSvc) UpdateFieldsOemAppAndroidCert(req *proto.OemAppAndroidCertUpdateFieldsRequest) (*proto.OemAppAndroidCert, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppAndroidCert
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOemAppAndroidCert error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOemAppAndroidCert error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppAndroidCert_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOemAppAndroidCert error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OemAppAndroidCert
func (s *OemAppAndroidCertSvc) FindOemAppAndroidCert(req *proto.OemAppAndroidCertFilter) (*proto.OemAppAndroidCert, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppAndroidCert
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.Resign != 0 { //整数
		do = do.Where(t.Resign.Eq(req.Resign))
	}
	if req.CertSha256 != "" { //字符串
		do = do.Where(t.CertSha256.Eq(req.CertSha256))
	}
	if req.Keypass != "" { //字符串
		do = do.Where(t.Keypass.Eq(req.Keypass))
	}
	if req.Storepass != "" { //字符串
		do = do.Where(t.Storepass.Eq(req.Storepass))
	}
	if req.AliasKeytool != "" { //字符串
		do = do.Where(t.AliasKeytool.Eq(req.AliasKeytool))
	}
	if req.Keystore != "" { //字符串
		do = do.Where(t.Keystore.Eq(req.Keystore))
	}
	if req.KsMd5 != "" { //字符串
		do = do.Where(t.KsMd5.Eq(req.KsMd5))
	}
	if req.KsSha1 != "" { //字符串
		do = do.Where(t.KsSha1.Eq(req.KsSha1))
	}
	if req.KsSha256 != "" { //字符串
		do = do.Where(t.KsSha256.Eq(req.KsSha256))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOemAppAndroidCert error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppAndroidCert_db2pb(dbObj)
	return res, err
}

// 重新生成keystore文件.
func (s *OemAppAndroidCertSvc) Regenerate(req *proto.OemAppAndroidCertFilter) (*proto.OemAppAndroidCert, error) {
	var app = OemAppSvc{}
	//diyCtx := app.CopyNewContext(s.Ctx)
	//go func() {
	//暂时同步生成,如果过慢就改成异步
	app.CreateKeystore(req.Id, s.Ctx)
	//}()

	return nil, nil
}

// 根据数据库表主键查找OemAppAndroidCert
func (s *OemAppAndroidCertSvc) FindByIdOemAppAndroidCert(req *proto.OemAppAndroidCertFilter) (*proto.OemAppAndroidCert, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppAndroidCert
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOemAppAndroidCert error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppAndroidCert_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OemAppAndroidCert,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OemAppAndroidCertSvc) GetListOemAppAndroidCert(req *proto.OemAppAndroidCertListRequest) ([]*proto.OemAppAndroidCert, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOemAppAndroidCert
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.AppId != 0 { //整数
			do = do.Where(t.AppId.Eq(query.AppId))
		}
		if query.Version != "" { //字符串
			do = do.Where(t.Version.Like("%" + query.Version + "%"))
		}
		if query.Resign != 0 { //整数
			do = do.Where(t.Resign.Eq(query.Resign))
		}
		if query.CertSha256 != "" { //字符串
			do = do.Where(t.CertSha256.Like("%" + query.CertSha256 + "%"))
		}
		if query.Keypass != "" { //字符串
			do = do.Where(t.Keypass.Like("%" + query.Keypass + "%"))
		}
		if query.Storepass != "" { //字符串
			do = do.Where(t.Storepass.Like("%" + query.Storepass + "%"))
		}
		if query.AliasKeytool != "" { //字符串
			do = do.Where(t.AliasKeytool.Like("%" + query.AliasKeytool + "%"))
		}
		if query.Keystore != "" { //字符串
			do = do.Where(t.Keystore.Like("%" + query.Keystore + "%"))
		}
		if query.KsMd5 != "" { //字符串
			do = do.Where(t.KsMd5.Like("%" + query.KsMd5 + "%"))
		}
		if query.KsSha1 != "" { //字符串
			do = do.Where(t.KsSha1.Like("%" + query.KsSha1 + "%"))
		}
		if query.KsSha256 != "" { //字符串
			do = do.Where(t.KsSha256.Like("%" + query.KsSha256 + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOemAppAndroidCert
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOemAppAndroidCert error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OemAppAndroidCert, len(list))
	for i, v := range list {
		result[i] = convert.OemAppAndroidCert_db2pb(v)
	}
	return result, total, nil
}
