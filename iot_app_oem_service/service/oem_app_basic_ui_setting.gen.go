// Code generated by sgen.exe,2022-10-24 08:40:53. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_oem_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app_oem/model"
	"cloud_platform/iot_model/db_app_oem/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OemAppBasicUiSettingSvc struct {
	Ctx context.Context
}

// 创建OemAppBasicUiSetting
func (s *OemAppBasicUiSettingSvc) CreateOemAppBasicUiSetting(req *proto.OemAppBasicUiSetting) (*proto.OemAppBasicUiSetting, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOemAppBasicUiSetting
	do := t.WithContext(context.Background())
	req.Id = iotutil.GetNextSeqInt64()
	dbObj := convert.OemAppBasicUiSetting_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOemAppBasicUiSetting error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OemAppBasicUiSetting
func (s *OemAppBasicUiSettingSvc) DeleteOemAppBasicUiSetting(req *proto.OemAppBasicUiSetting) (*proto.OemAppBasicUiSetting, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppBasicUiSetting
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Type != "" { //字符串
		do = do.Where(t.Type.Eq(req.Type))
	}
	if req.Desc != "" { //字符串
		do = do.Where(t.Desc.Eq(req.Desc))
	}
	if req.DescEn != "" { //字符串
		do = do.Where(t.DescEn.Eq(req.DescEn))
	}
	if req.Sort != 0 { //整数
		do = do.Where(t.Sort.Eq(req.Sort))
	}
	if req.PageJson != "" { //字符串
		do = do.Where(t.PageJson.Eq(req.PageJson))
	}
	if req.PreviewPageJson != "" { //字符串
		do = do.Where(t.PreviewPageJson.Eq(req.PreviewPageJson))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOemAppBasicUiSetting error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OemAppBasicUiSetting
func (s *OemAppBasicUiSettingSvc) DeleteByIdOemAppBasicUiSetting(req *proto.OemAppBasicUiSetting) (*proto.OemAppBasicUiSetting, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppBasicUiSetting
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOemAppBasicUiSetting error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OemAppBasicUiSetting
func (s *OemAppBasicUiSettingSvc) DeleteByIdsOemAppBasicUiSetting(req *proto.OemAppBasicUiSettingBatchDeleteRequest) (*proto.OemAppBasicUiSettingBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOemAppBasicUiSetting
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOemAppBasicUiSetting error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OemAppBasicUiSetting
func (s *OemAppBasicUiSettingSvc) UpdateOemAppBasicUiSetting(req *proto.OemAppBasicUiSetting) (*proto.OemAppBasicUiSetting, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppBasicUiSetting
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Type != "" { //字符串
		updateField = append(updateField, t.Type)
	}
	if req.Desc != "" { //字符串
		updateField = append(updateField, t.Desc)
	}
	if req.DescEn != "" { //字符串
		updateField = append(updateField, t.DescEn)
	}
	if req.Sort != 0 { //整数
		updateField = append(updateField, t.Sort)
	}
	if req.PageJson != "" { //字符串
		updateField = append(updateField, t.PageJson)
	}
	if req.PreviewPageJson != "" { //字符串
		updateField = append(updateField, t.PreviewPageJson)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOemAppBasicUiSetting error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OemAppBasicUiSetting_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOemAppBasicUiSetting error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OemAppBasicUiSetting
func (s *OemAppBasicUiSettingSvc) UpdateAllOemAppBasicUiSetting(req *proto.OemAppBasicUiSetting) (*proto.OemAppBasicUiSetting, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppBasicUiSetting
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Type)
	updateField = append(updateField, t.Desc)
	updateField = append(updateField, t.DescEn)
	updateField = append(updateField, t.Sort)
	updateField = append(updateField, t.PageJson)
	updateField = append(updateField, t.PreviewPageJson)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOemAppBasicUiSetting error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppBasicUiSetting_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOemAppBasicUiSetting error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OemAppBasicUiSettingSvc) UpdateFieldsOemAppBasicUiSetting(req *proto.OemAppBasicUiSettingUpdateFieldsRequest) (*proto.OemAppBasicUiSetting, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppBasicUiSetting
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOemAppBasicUiSetting error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOemAppBasicUiSetting error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppBasicUiSetting_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOemAppBasicUiSetting error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OemAppBasicUiSetting
func (s *OemAppBasicUiSettingSvc) FindOemAppBasicUiSetting(req *proto.OemAppBasicUiSettingFilter) (*proto.OemAppBasicUiSetting, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppBasicUiSetting
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Type != "" { //字符串
		do = do.Where(t.Type.Eq(req.Type))
	}
	if req.Desc != "" { //字符串
		do = do.Where(t.Desc.Eq(req.Desc))
	}
	if req.DescEn != "" { //字符串
		do = do.Where(t.DescEn.Eq(req.DescEn))
	}
	if req.Sort != 0 { //整数
		do = do.Where(t.Sort.Eq(req.Sort))
	}
	if req.PageJson != "" { //字符串
		do = do.Where(t.PageJson.Eq(req.PageJson))
	}
	if req.PreviewPageJson != "" { //字符串
		do = do.Where(t.PreviewPageJson.Eq(req.PreviewPageJson))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOemAppBasicUiSetting error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppBasicUiSetting_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OemAppBasicUiSetting
func (s *OemAppBasicUiSettingSvc) FindByIdOemAppBasicUiSetting(req *proto.OemAppBasicUiSettingFilter) (*proto.OemAppBasicUiSetting, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppBasicUiSetting
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOemAppBasicUiSetting error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppBasicUiSetting_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OemAppBasicUiSetting,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OemAppBasicUiSettingSvc) GetListOemAppBasicUiSetting(req *proto.OemAppBasicUiSettingListRequest) ([]*proto.OemAppBasicUiSetting, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOemAppBasicUiSetting
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Type != "" { //字符串
			do = do.Where(t.Type.Like("%" + query.Type + "%"))
		}
		if query.Desc != "" { //字符串
			do = do.Where(t.Desc.Like("%" + query.Desc + "%"))
		}
		if query.DescEn != "" { //字符串
			do = do.Where(t.DescEn.Like("%" + query.DescEn + "%"))
		}
		if query.Sort != 0 { //整数
			do = do.Where(t.Sort.Eq(query.Sort))
		}
		if query.PageJson != "" { //字符串
			do = do.Where(t.PageJson.Like("%" + query.PageJson + "%"))
		}
		if query.PreviewPageJson != "" { //字符串
			do = do.Where(t.PreviewPageJson.Like("%" + query.PreviewPageJson + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOemAppBasicUiSetting
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOemAppBasicUiSetting error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OemAppBasicUiSetting, len(list))
	for i, v := range list {
		result[i] = convert.OemAppBasicUiSetting_db2pb(v)
	}
	return result, total, nil
}
