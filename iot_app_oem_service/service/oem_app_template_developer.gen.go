// Code generated by sgen.exe,2022-10-24 08:40:55. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_oem_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app_oem/model"
	"cloud_platform/iot_model/db_app_oem/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OemAppTemplateDeveloperSvc struct {
	Ctx context.Context
}

// CopyOemAppTemplateFunction
func (s *OemAppTemplateDeveloperSvc) CopyOemAppTemplateDeveloper(tx *orm.Query, appTemplateId, newAppTemplateId int64) error {
	t := tx.TOemAppTemplateDeveloper
	do := t.WithContext(context.Background())
	list, err := do.Where(t.AppTemplateId.Eq(appTemplateId)).Find()
	if err != nil {
		return err
	}
	saveList := make([]*model.TOemAppTemplateDeveloper, 0)
	for _, deve := range list {
		deve.Id = iotutil.GetNextSeqInt64()
		deve.AppTemplateId = newAppTemplateId
		saveList = append(saveList, deve)
	}
	if len(saveList) == 0 {
		return nil
	}
	err = do.Create(saveList...)
	if err != nil {
		return err
	}
	return err
}

// 创建OemAppTemplateDeveloper
func (s *OemAppTemplateDeveloperSvc) CreateOemAppTemplateDeveloper(req *proto.OemAppTemplateDeveloper) (*proto.OemAppTemplateDeveloper, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOemAppTemplateDeveloper
	do := t.WithContext(context.Background())
	req.Id = iotutil.GetNextSeqInt64()
	dbObj := convert.OemAppTemplateDeveloper_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOemAppTemplateDeveloper error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OemAppTemplateDeveloper
func (s *OemAppTemplateDeveloperSvc) DeleteOemAppTemplateDeveloper(req *proto.OemAppTemplateDeveloper) (*proto.OemAppTemplateDeveloper, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppTemplateDeveloper
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.AppTemplateId != 0 { //整数
		do = do.Where(t.AppTemplateId.Eq(req.AppTemplateId))
	}
	if req.DeveloperId != 0 { //整数
		do = do.Where(t.DeveloperId.Eq(req.DeveloperId))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOemAppTemplateDeveloper error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OemAppTemplateDeveloper
func (s *OemAppTemplateDeveloperSvc) DeleteByIdOemAppTemplateDeveloper(req *proto.OemAppTemplateDeveloper) (*proto.OemAppTemplateDeveloper, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppTemplateDeveloper
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOemAppTemplateDeveloper error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OemAppTemplateDeveloper
func (s *OemAppTemplateDeveloperSvc) DeleteByIdsOemAppTemplateDeveloper(req *proto.OemAppTemplateDeveloperBatchDeleteRequest) (*proto.OemAppTemplateDeveloperBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOemAppTemplateDeveloper
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOemAppTemplateDeveloper error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OemAppTemplateDeveloper
func (s *OemAppTemplateDeveloperSvc) UpdateOemAppTemplateDeveloper(req *proto.OemAppTemplateDeveloper) (*proto.OemAppTemplateDeveloper, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppTemplateDeveloper
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.AppTemplateId != 0 { //整数
		updateField = append(updateField, t.AppTemplateId)
	}
	if req.DeveloperId != 0 { //整数
		updateField = append(updateField, t.DeveloperId)
	}
	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.TenantId)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOemAppTemplateDeveloper error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OemAppTemplateDeveloper_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOemAppTemplateDeveloper error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OemAppTemplateDeveloper
func (s *OemAppTemplateDeveloperSvc) UpdateAllOemAppTemplateDeveloper(req *proto.OemAppTemplateDeveloper) (*proto.OemAppTemplateDeveloper, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppTemplateDeveloper
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.AppTemplateId)
	updateField = append(updateField, t.DeveloperId)
	updateField = append(updateField, t.TenantId)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOemAppTemplateDeveloper error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppTemplateDeveloper_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOemAppTemplateDeveloper error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OemAppTemplateDeveloperSvc) UpdateFieldsOemAppTemplateDeveloper(req *proto.OemAppTemplateDeveloperUpdateFieldsRequest) (*proto.OemAppTemplateDeveloper, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppTemplateDeveloper
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOemAppTemplateDeveloper error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOemAppTemplateDeveloper error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppTemplateDeveloper_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOemAppTemplateDeveloper error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OemAppTemplateDeveloper
func (s *OemAppTemplateDeveloperSvc) FindOemAppTemplateDeveloper(req *proto.OemAppTemplateDeveloperFilter) (*proto.OemAppTemplateDeveloper, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppTemplateDeveloper
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.AppTemplateId != 0 { //整数
		do = do.Where(t.AppTemplateId.Eq(req.AppTemplateId))
	}
	if req.DeveloperId != 0 { //整数
		do = do.Where(t.DeveloperId.Eq(req.DeveloperId))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOemAppTemplateDeveloper error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppTemplateDeveloper_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OemAppTemplateDeveloper
func (s *OemAppTemplateDeveloperSvc) FindByIdOemAppTemplateDeveloper(req *proto.OemAppTemplateDeveloperFilter) (*proto.OemAppTemplateDeveloper, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppTemplateDeveloper
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOemAppTemplateDeveloper error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppTemplateDeveloper_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OemAppTemplateDeveloper,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OemAppTemplateDeveloperSvc) GetListOemAppTemplateDeveloper(req *proto.OemAppTemplateDeveloperListRequest) ([]*proto.OemAppTemplateDeveloper, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOemAppTemplateDeveloper
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.AppTemplateId != 0 { //整数
			do = do.Where(t.AppTemplateId.Eq(query.AppTemplateId))
		}
		if query.DeveloperId != 0 { //整数
			do = do.Where(t.DeveloperId.Eq(query.DeveloperId))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Like("%" + query.TenantId + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOemAppTemplateDeveloper
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOemAppTemplateDeveloper error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OemAppTemplateDeveloper, len(list))
	for i, v := range list {
		result[i] = convert.OemAppTemplateDeveloper_db2pb(v)
	}
	return result, total, nil
}
