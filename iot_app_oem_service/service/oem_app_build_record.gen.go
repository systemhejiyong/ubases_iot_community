// Code generated by sgen.exe,2022-06-02 11:15:11. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_oem_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app_oem/model"
	"cloud_platform/iot_model/db_app_oem/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OemAppBuildRecordSvc struct {
	Ctx context.Context
}

// 创建OemAppBuildRecord
func (s *OemAppBuildRecordSvc) CreateOemAppBuildRecord(req *proto.OemAppBuildRecord) (*proto.OemAppBuildRecord, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOemAppBuildRecord
	do := t.WithContext(context.Background())
	dbObj := convert.OemAppBuildRecord_pb2db(req)
	dbObj.StartTime = time.Now()
	// dbObj.EndTime =
	err := do.Create(dbObj)

	if err != nil {
		logger.Errorf("CreateOemAppBuildRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OemAppBuildRecord
func (s *OemAppBuildRecordSvc) DeleteOemAppBuildRecord(req *proto.OemAppBuildRecord) (*proto.OemAppBuildRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppBuildRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.BuildId != "" { //字符串
		do = do.Where(t.BuildId.Eq(req.BuildId))
	}
	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.ResUrl != "" { //字符串
		do = do.Where(t.ResUrl.Eq(req.ResUrl))
	}
	if req.ResMd5 != "" { //字符串
		do = do.Where(t.ResMd5.Eq(req.ResMd5))
	}
	if req.Os != 0 { //整数
		do = do.Where(t.Os.Eq(req.Os))
	}
	if req.Region != 0 { //整数
		do = do.Where(t.Region.Eq(req.Region))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CommitId != "" { //字符串
		do = do.Where(t.CommitId.Eq(req.CommitId))
	}
	if req.BuildProgress != 0 { //整数
		do = do.Where(t.BuildProgress.Eq(req.BuildProgress))
	}
	if req.BuildResult != 0 { //整数
		do = do.Where(t.BuildResult.Eq(req.BuildResult))
	}
	if req.BuildResultMsg != "" { //字符串
		do = do.Where(t.BuildResultMsg.Eq(req.BuildResultMsg))
	}
	if req.PkgUrl != "" { //字符串
		do = do.Where(t.PkgUrl.Eq(req.PkgUrl))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOemAppBuildRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OemAppBuildRecord
func (s *OemAppBuildRecordSvc) DeleteByIdOemAppBuildRecord(req *proto.OemAppBuildRecord) (*proto.OemAppBuildRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppBuildRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOemAppBuildRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OemAppBuildRecord
func (s *OemAppBuildRecordSvc) DeleteByIdsOemAppBuildRecord(req *proto.OemAppBuildRecordBatchDeleteRequest) (*proto.OemAppBuildRecordBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOemAppBuildRecord
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOemAppBuildRecord error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OemAppBuildRecord
func (s *OemAppBuildRecordSvc) UpdateOemAppBuildRecord(req *proto.OemAppBuildRecord) (*proto.OemAppBuildRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppBuildRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.BuildId != "" { //字符串
		updateField = append(updateField, t.BuildId)
	}
	if req.AppId != 0 { //整数
		updateField = append(updateField, t.AppId)
	}
	if req.Version != "" { //字符串
		updateField = append(updateField, t.Version)
	}
	if req.ResUrl != "" { //字符串
		updateField = append(updateField, t.ResUrl)
	}
	if req.ResMd5 != "" { //字符串
		updateField = append(updateField, t.ResMd5)
	}
	if req.Os != 0 { //整数
		updateField = append(updateField, t.Os)
	}
	if req.Region != 0 { //整数
		updateField = append(updateField, t.Region)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.CommitId != "" { //字符串
		updateField = append(updateField, t.CommitId)
	}
	if req.BuildProgress != 0 { //整数
		updateField = append(updateField, t.BuildProgress)
	}
	if req.BuildResult != 0 { //整数
		updateField = append(updateField, t.BuildResult)
	}
	if req.BuildResultMsg != "" { //字符串
		updateField = append(updateField, t.BuildResultMsg)
	}
	if req.PkgUrl != "" { //字符串
		updateField = append(updateField, t.PkgUrl)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOemAppBuildRecord error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OemAppBuildRecord_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOemAppBuildRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OemAppBuildRecord
func (s *OemAppBuildRecordSvc) UpdateAllOemAppBuildRecord(req *proto.OemAppBuildRecord) (*proto.OemAppBuildRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppBuildRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.BuildId)
	updateField = append(updateField, t.AppId)
	updateField = append(updateField, t.Version)
	updateField = append(updateField, t.ResUrl)
	updateField = append(updateField, t.ResMd5)
	updateField = append(updateField, t.Os)
	updateField = append(updateField, t.Region)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.CommitId)
	updateField = append(updateField, t.BuildProgress)
	updateField = append(updateField, t.BuildResult)
	updateField = append(updateField, t.BuildResultMsg)
	updateField = append(updateField, t.PkgUrl)
	updateField = append(updateField, t.StartTime)
	updateField = append(updateField, t.EndTime)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOemAppBuildRecord error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppBuildRecord_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOemAppBuildRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 单独修改res_url和res_md5
func (s *OemAppBuildRecordSvc) UpdateUrlAndMd5(req *proto.OemAppBuildRecord) {
	iotmodel.GetDB().Exec("UPDATE `t_oem_app_build_record` SET `res_url`=?,`res_md5`=? WHERE `id`=?", req.ResUrl, req.ResMd5, req.Id)
}

func (s *OemAppBuildRecordSvc) UpdateFieldsOemAppBuildRecord(req *proto.OemAppBuildRecordUpdateFieldsRequest) (*proto.OemAppBuildRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppBuildRecord
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOemAppBuildRecord error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOemAppBuildRecord error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppBuildRecord_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOemAppBuildRecord error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OemAppBuildRecord
func (s *OemAppBuildRecordSvc) FindOemAppBuildRecord(req *proto.OemAppBuildRecordFilter) (*proto.OemAppBuildRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppBuildRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.BuildId != "" { //字符串
		do = do.Where(t.BuildId.Eq(req.BuildId))
	}
	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.ResUrl != "" { //字符串
		do = do.Where(t.ResUrl.Eq(req.ResUrl))
	}
	if req.ResMd5 != "" { //字符串
		do = do.Where(t.ResMd5.Eq(req.ResMd5))
	}
	if req.Os != 0 { //整数
		do = do.Where(t.Os.Eq(req.Os))
	}
	if req.Region != 0 { //整数
		do = do.Where(t.Region.Eq(req.Region))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CommitId != "" { //字符串
		do = do.Where(t.CommitId.Eq(req.CommitId))
	}
	if req.BuildProgress != 0 { //整数
		do = do.Where(t.BuildProgress.Eq(req.BuildProgress))
	}
	if req.BuildResult != 0 { //整数
		do = do.Where(t.BuildResult.Eq(req.BuildResult))
	}
	if req.BuildResultMsg != "" { //字符串
		do = do.Where(t.BuildResultMsg.Eq(req.BuildResultMsg))
	}
	if req.PkgUrl != "" { //字符串
		do = do.Where(t.PkgUrl.Eq(req.PkgUrl))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOemAppBuildRecord error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppBuildRecord_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OemAppBuildRecord
func (s *OemAppBuildRecordSvc) FindByIdOemAppBuildRecord(req *proto.OemAppBuildRecordFilter) (*proto.OemAppBuildRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppBuildRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOemAppBuildRecord error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppBuildRecord_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OemAppBuildRecord,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OemAppBuildRecordSvc) GetListOemAppBuildRecord(req *proto.OemAppBuildRecordListRequest) ([]*proto.OemAppBuildRecord, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOemAppBuildRecord
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.BuildId != "" { //字符串
			do = do.Where(t.BuildId.Like("%" + query.BuildId + "%"))
		}
		if query.AppId != 0 { //整数
			do = do.Where(t.AppId.Eq(query.AppId))
		}
		if query.Version != "" { //字符串
			do = do.Where(t.Version.Like("%" + query.Version + "%"))
		}
		if query.ResUrl != "" { //字符串
			do = do.Where(t.ResUrl.Like("%" + query.ResUrl + "%"))
		}
		if query.ResMd5 != "" { //字符串
			do = do.Where(t.ResMd5.Like("%" + query.ResMd5 + "%"))
		}
		if query.Os != 0 { //整数
			do = do.Where(t.Os.Eq(query.Os))
		}
		if query.Region != 0 { //整数
			do = do.Where(t.Region.Eq(query.Region))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.CommitId != "" { //字符串
			do = do.Where(t.CommitId.Like("%" + query.CommitId + "%"))
		}
		if query.BuildProgress != 0 { //整数
			do = do.Where(t.BuildProgress.Eq(query.BuildProgress))
		}
		if query.BuildResult != 0 { //整数
			do = do.Where(t.BuildResult.Eq(query.BuildResult))
		}
		if query.BuildResultMsg != "" { //字符串
			do = do.Where(t.BuildResultMsg.Like("%" + query.BuildResultMsg + "%"))
		}
		if query.PkgUrl != "" { //字符串
			do = do.Where(t.PkgUrl.Like("%" + query.PkgUrl + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOemAppBuildRecord
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOemAppBuildRecord error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OemAppBuildRecord, len(list))
	for i, v := range list {
		result[i] = convert.OemAppBuildRecord_db2pb(v)
	}
	return result, total, nil
}
