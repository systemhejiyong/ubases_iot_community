// Code generated by sgen,2023-02-24 14:26:51. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_oem_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app_oem/model"
	"cloud_platform/iot_model/db_app_oem/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OemAppCustomRecordSvc struct {
	Ctx context.Context
}

// 创建OemAppCustomRecord
func (s *OemAppCustomRecordSvc) CreateOemAppCustomRecord(req *proto.OemAppCustomRecord) (*proto.OemAppCustomRecord, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOemAppCustomRecord
	do := t.WithContext(context.Background())
	dbObj := convert.OemAppCustomRecord_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOemAppCustomRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OemAppCustomRecord
func (s *OemAppCustomRecordSvc) DeleteOemAppCustomRecord(req *proto.OemAppCustomRecord) (*proto.OemAppCustomRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppCustomRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.PkgUrl != "" { //字符串
		do = do.Where(t.PkgUrl.Eq(req.PkgUrl))
	}
	if req.PkgMd5 != "" { //字符串
		do = do.Where(t.PkgMd5.Eq(req.PkgMd5))
	}
	if req.Os != 0 { //整数
		do = do.Where(t.Os.Eq(req.Os))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.Description != "" { //字符串
		do = do.Where(t.Description.Eq(req.Description))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.PlistUrl != "" { //字符串
		do = do.Where(t.PlistUrl.Eq(req.PlistUrl))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOemAppCustomRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OemAppCustomRecord
func (s *OemAppCustomRecordSvc) DeleteByIdOemAppCustomRecord(req *proto.OemAppCustomRecord) (*proto.OemAppCustomRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppCustomRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOemAppCustomRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OemAppCustomRecord
func (s *OemAppCustomRecordSvc) DeleteByIdsOemAppCustomRecord(req *proto.OemAppCustomRecordBatchDeleteRequest) (*proto.OemAppCustomRecordBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOemAppCustomRecord
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOemAppCustomRecord error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OemAppCustomRecord
func (s *OemAppCustomRecordSvc) UpdateOemAppCustomRecord(req *proto.OemAppCustomRecord) (*proto.OemAppCustomRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppCustomRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.AppId != 0 { //整数
		updateField = append(updateField, t.AppId)
	}
	if req.Version != "" { //字符串
		updateField = append(updateField, t.Version)
	}
	if req.PkgUrl != "" { //字符串
		updateField = append(updateField, t.PkgUrl)
	}
	if req.PkgMd5 != "" { //字符串
		updateField = append(updateField, t.PkgMd5)
	}
	if req.Os != 0 { //整数
		updateField = append(updateField, t.Os)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.Description != "" { //字符串
		updateField = append(updateField, t.Description)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if req.PlistUrl != "" { //字符串
		updateField = append(updateField, t.PlistUrl)
	}
	if req.LaunchMarkets != "" { //字符串
		updateField = append(updateField, t.LaunchMarkets)
	}
	if req.RemindMode != 0 { //整数
		updateField = append(updateField, t.RemindMode)
	}
	if req.RemindDescEn != "" { //字符串
		updateField = append(updateField, t.RemindDescEn)
	}
	if req.RemindDesc != "" { //字符串
		updateField = append(updateField, t.RemindDesc)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOemAppCustomRecord error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OemAppCustomRecord_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOemAppCustomRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OemAppCustomRecord
func (s *OemAppCustomRecordSvc) UpdateAllOemAppCustomRecord(req *proto.OemAppCustomRecord) (*proto.OemAppCustomRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppCustomRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.AppId)
	updateField = append(updateField, t.Version)
	updateField = append(updateField, t.PkgUrl)
	updateField = append(updateField, t.PkgMd5)
	updateField = append(updateField, t.Os)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.Description)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	updateField = append(updateField, t.PlistUrl)
	updateField = append(updateField, t.LaunchMarkets)
	updateField = append(updateField, t.RemindMode)
	updateField = append(updateField, t.RemindDescEn)
	updateField = append(updateField, t.RemindDesc)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOemAppCustomRecord error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppCustomRecord_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOemAppCustomRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OemAppCustomRecordSvc) UpdateFieldsOemAppCustomRecord(req *proto.OemAppCustomRecordUpdateFieldsRequest) (*proto.OemAppCustomRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppCustomRecord
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOemAppCustomRecord error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOemAppCustomRecord error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppCustomRecord_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOemAppCustomRecord error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OemAppCustomRecord
func (s *OemAppCustomRecordSvc) FindOemAppCustomRecord(req *proto.OemAppCustomRecordFilter) (*proto.OemAppCustomRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppCustomRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.PkgUrl != "" { //字符串
		do = do.Where(t.PkgUrl.Eq(req.PkgUrl))
	}
	if req.PkgMd5 != "" { //字符串
		do = do.Where(t.PkgMd5.Eq(req.PkgMd5))
	}
	if req.Os != 0 { //整数
		do = do.Where(t.Os.Eq(req.Os))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.Description != "" { //字符串
		do = do.Where(t.Description.Eq(req.Description))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.PlistUrl != "" { //字符串
		do = do.Where(t.PlistUrl.Eq(req.PlistUrl))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOemAppCustomRecord error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppCustomRecord_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OemAppCustomRecord
func (s *OemAppCustomRecordSvc) FindByIdOemAppCustomRecord(req *proto.OemAppCustomRecordFilter) (*proto.OemAppCustomRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppCustomRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOemAppCustomRecord error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppCustomRecord_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OemAppCustomRecord,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OemAppCustomRecordSvc) GetListOemAppCustomRecord(req *proto.OemAppCustomRecordListRequest) ([]*proto.OemAppCustomRecord, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOemAppCustomRecord
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.AppId != 0 { //整数
			do = do.Where(t.AppId.Eq(query.AppId))
		}
		if query.Version != "" { //字符串
			do = do.Where(t.Version.Like("%" + query.Version + "%"))
		}
		if query.PkgUrl != "" { //字符串
			do = do.Where(t.PkgUrl.Like("%" + query.PkgUrl + "%"))
		}
		if query.PkgMd5 != "" { //字符串
			do = do.Where(t.PkgMd5.Like("%" + query.PkgMd5 + "%"))
		}
		if query.Os != 0 { //整数
			do = do.Where(t.Os.Eq(query.Os))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.Description != "" { //字符串
			do = do.Where(t.Description.Like("%" + query.Description + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
		if query.PlistUrl != "" { //字符串
			do = do.Where(t.PlistUrl.Like("%" + query.PlistUrl + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok || req.OrderKey == "version" {
		if req.OrderDesc == "asc" {
			do = do.Order(field.Func.VersionOrderByZeroFill(t.Version))
		} else {
			do = do.Order(field.Func.VersionOrderByZeroFill(t.Version).Desc())
		}
	} else {
		if req.OrderDesc != "asc" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*model.TOemAppCustomRecord
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOemAppCustomRecord error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OemAppCustomRecord, len(list))
	for i, v := range list {
		result[i] = convert.OemAppCustomRecord_db2pb(v)
	}
	return result, total, nil
}

// 获取APP最新版本信息
func (s *OemAppCustomRecordSvc) GetLastVersion(req *proto.OemAppCustomRecordFilter) ([]*proto.OemAppCustomRecord, error) {
	if req.AppId == 0 {
		return nil, errors.New("appId不能为空")
	}
	var err error
	t := orm.Use(iotmodel.GetDB()).TOemAppCustomRecord
	do := t.WithContext(context.Background())
	do = do.Where(t.AppId.Eq(req.AppId), t.Status.Eq(1), t.Os.Eq(req.Os))
	do = do.Order(field.Func.VersionOrderByZeroFill(t.Version).Desc())
	data , err := do.First()
	if err != nil {
		logger.Errorf("GetLastVersion error : %s", err.Error())
		return nil, err
	}
	result := make([]*proto.OemAppCustomRecord, 1)
	result[0] = convert.OemAppCustomRecord_db2pb(data)
	return result, nil
}
