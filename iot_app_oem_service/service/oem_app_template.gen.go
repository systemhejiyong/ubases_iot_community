// Code generated by sgen.exe,2022-10-24 08:40:55. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"
	"fmt"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_oem_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app_oem/model"
	"cloud_platform/iot_model/db_app_oem/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OemAppTemplateSvc struct {
	Ctx context.Context
}

func (s *OemAppTemplateSvc) OemAppTemplateAddCount(appTemplateId int64) error {
	if appTemplateId == 0 {
		return errors.New("APP模板不能为空")
	}
	var err error
	q := orm.Use(iotmodel.GetDB())
	//检查版本号是否存在
	tAppTemplate := q.TOemAppTemplate
	doAppTemplate := tAppTemplate.WithContext(context.Background())
	_, err = doAppTemplate.Where(tAppTemplate.Id.Eq(appTemplateId)).UpdateSimple(tAppTemplate.UseCount.Add(1))
	if err != nil {
		return err
	}
	return nil
}

// 创建OemAppTemplate
func (s *OemAppTemplateSvc) CopyOemAppTemplate(req *proto.OemAppTemplate) (*proto.OemAppTemplate, error) {
	if req.Id == 0 {
		return nil, errors.New("模板Id不能为空")
	}

	var err error
	var newId int64
	q := orm.Use(iotmodel.GetDB())

	//检查版本号是否存在
	tAppTemplate := q.TOemAppTemplate
	doAppTemplate := tAppTemplate.WithContext(context.Background())
	appTemplate, err := doAppTemplate.Where(tAppTemplate.Id.Eq(req.Id)).First()
	if err != nil {
		return nil, err
	}
	if err := s.existsOemAppTemplateVersion(&proto.OemAppTemplate{Type: appTemplate.Type, Version: req.Version}); err != nil {
		return nil, err
	}

	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TOemAppTemplate
		do1 := t.WithContext(context.Background())
		//复制APP模板信息
		newId = iotutil.GetNextSeqInt64()
		appTemplate.Id = newId
		appTemplate.Version = req.Version
		appTemplate.Status = 2
		appTemplate.UseCount = 0
		appTemplate.Name = appTemplate.Name + "-1"
		err = do1.Create(appTemplate)
		if err != nil {
			return err
		}
		//复制开发者信息
		deveSvc := OemAppTemplateDeveloperSvc{Ctx: s.Ctx}
		err = deveSvc.CopyOemAppTemplateDeveloper(tx, req.Id, newId)
		if err != nil {
			return err
		}
		//复制界面信息
		uiSvc := OemAppTemplateUiSvc{Ctx: s.Ctx}
		err = uiSvc.CopyOemAppTemplateUi(tx, req.Id, newId)
		if err != nil {
			return err
		}
		//复制菜单信息
		menuSvc := OemAppTemplateMenuSvc{Ctx: s.Ctx}
		err = menuSvc.CopyOemAppTemplateMenu(tx, req.Id, newId)
		if err != nil {
			return err
		}
		//复制扩展功能
		functionSvc := OemAppTemplateFunctionSvc{Ctx: s.Ctx}
		err = functionSvc.CopyOemAppTemplateFunction(tx, req.Id, newId)
		if err != nil {
			return err
		}
		//第三方服务
		thirdPartySvc := OemAppTemplateThirdPartySvc{Ctx: s.Ctx}
		err = thirdPartySvc.CopyOemAppTemplateThirdParty(tx, req.Id, newId)
		if err != nil {
			return err
		}
		//上架皮肤
		skinSvc := OemAppTemplateSkinSvc{Ctx: s.Ctx}
		err = skinSvc.CopyOemAppTemplateSkin(tx, req.Id, newId)
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("CopyOemAppTemplate error : %s", err.Error())
		return nil, err
	}
	req.Id = newId
	return req, err
}

// 创建OemAppTemplate
func (s *OemAppTemplateSvc) CreateOemAppTemplate(req *proto.OemAppTemplate) (*proto.OemAppTemplate, error) {
	//if req.Name == "" {
	//	return nil, errors.New("模板名称不能为空")
	//}
	if req.Version == "" {
		return nil, errors.New("模板版本号不能为空")
	}
	if req.Type == 0 {
		return nil, errors.New("模板类型不能为空")
	}
	if req.GitUrl == "" {
		return nil, errors.New("模板代码地址不能为空")
	}

	//APP模板版本重复
	if err := s.existsOemAppTemplateVersion(req); err != nil {
		return nil, err
	}
	var err error
	q := orm.Use(iotmodel.GetDB())
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TOemAppTemplate
		do := t.WithContext(context.Background())
		req.Id = iotutil.GetNextSeqInt64()
		dbObj := convert.OemAppTemplate_pb2db(req)
		dbObj.Status = 2
		dbObj.UseCount = 0
		err := do.Create(dbObj)
		if err != nil {
			return err
		}
		if len(req.Developers) > 0 {
			//查询绑定的开发者
			tDeveloper := tx.TOemAppTemplateDeveloper
			doDeveloper := tDeveloper.WithContext(context.Background())
			if err != nil {
				return err
			}
			saveDevelopers := []*model.TOemAppTemplateDeveloper{}
			for _, developer := range req.Developers {
				saveDevelopers = append(saveDevelopers, &model.TOemAppTemplateDeveloper{
					Id:            iotutil.GetNextSeqInt64(),
					AppTemplateId: req.Id,
					DeveloperId:   developer.DeveloperId,
					TenantId:      developer.TenantId,
					Account:       developer.Account,
					CompanyName:   developer.CompanyName,
				})
			}
			err = doDeveloper.Create(saveDevelopers...)
			if err != nil {
				return err
			}
		}
		return nil
	})
	if err != nil {
		logger.Errorf("CreateOemAppTemplate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OemAppTemplate
func (s *OemAppTemplateSvc) DeleteOemAppTemplate(req *proto.OemAppTemplate) (*proto.OemAppTemplate, error) {
	var err error
	q := orm.Use(iotmodel.GetDB())
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TOemAppTemplate
		do := t.WithContext(context.Background())
		if req.Id != 0 { //整数
			do = do.Where(t.Id.Eq(req.Id))
		}
		if req.Name != "" { //字符串
			do = do.Where(t.Name.Eq(req.Name))
		}
		if req.NameEn != "" { //字符串
			do = do.Where(t.NameEn.Eq(req.NameEn))
		}
		if req.Type != 0 { //整数
			do = do.Where(t.Type.Eq(req.Type))
		}
		if req.Version != "" { //字符串
			do = do.Where(t.Version.Eq(req.Version))
		}
		if req.GitUrl != "" { //字符串
			do = do.Where(t.GitUrl.Eq(req.GitUrl))
		}
		if req.Status != 0 { //整数
			do = do.Where(t.Status.Eq(req.Status))
		}
		if req.Remark != "" { //字符串
			do = do.Where(t.Remark.Eq(req.Remark))
		}
		if req.OpenRangeType != 0 { //整数
			do = do.Where(t.OpenRangeType.Eq(req.OpenRangeType))
		}
		_, err := do.Delete()
		if err != nil {
			return err
		}
		tDeveloper := tx.TOemAppTemplateDeveloper
		_, err = tDeveloper.WithContext(context.Background()).Where(tDeveloper.AppTemplateId.Eq(req.Id)).Delete()
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("DeleteOemAppTemplate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OemAppTemplate
func (s *OemAppTemplateSvc) DeleteByIdOemAppTemplate(req *proto.OemAppTemplate) (*proto.OemAppTemplate, error) {
	var err error
	q := orm.Use(iotmodel.GetDB())
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TOemAppTemplate
		do := t.WithContext(context.Background())
		if req.Id != 0 { //整数
			do = do.Where(t.Id.Eq(req.Id))
		}
		_, err := do.Delete()
		if err != nil {
			return err
		}
		tDeveloper := tx.TOemAppTemplateDeveloper
		_, err = tDeveloper.WithContext(context.Background()).Where(tDeveloper.AppTemplateId.Eq(req.Id)).Delete()
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("DeleteOemAppTemplate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OemAppTemplate
func (s *OemAppTemplateSvc) DeleteByIdsOemAppTemplate(req *proto.OemAppTemplateBatchDeleteRequest) (*proto.OemAppTemplateBatchDeleteRequest, error) {
	if len(req.Keys) == 0 {
		return nil, errors.New("参数异常")
	}
	var ids []int64
	for _, k := range req.Keys {
		ids = append(ids, k.Id)
	}
	var err error
	q := orm.Use(iotmodel.GetDB())
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TOemAppTemplate
		do := t.WithContext(context.Background())
		do = do.Where(t.Id.In(ids...))
		_, err := do.Delete()
		if err != nil {
			return err
		}
		tDeveloper := tx.TOemAppTemplateDeveloper
		_, err = tDeveloper.WithContext(context.Background()).Where(tDeveloper.AppTemplateId.In(ids...)).Delete()
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("DeleteOemAppTemplate error : %s", err.Error())
		return nil, err
	}

	return req, err
}

// 根据主键更新OemAppTemplate
func (s *OemAppTemplateSvc) UpdateOemAppTemplate(req *proto.OemAppTemplate) (*proto.OemAppTemplate, error) {
	var err error
	q := orm.Use(iotmodel.GetDB())
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TOemAppTemplate
		do := t.WithContext(context.Background())
		// fixme 请检查条件和校验参数
		//要更新的字段,不包括主键
		var updateField []field.Expr

		if req.Name != "" { //字符串
			updateField = append(updateField, t.Name)
		}
		if req.NameEn != "" { //字符串
			updateField = append(updateField, t.NameEn)
		}
		if req.Type != 0 { //整数
			updateField = append(updateField, t.Type)
		}
		if req.Version != "" { //字符串
			updateField = append(updateField, t.Version)
		}
		if req.GitUrl != "" { //字符串
			updateField = append(updateField, t.GitUrl)
		}
		if req.Status != 0 { //整数
			updateField = append(updateField, t.Status)
		}
		if req.Remark != "" { //字符串
			updateField = append(updateField, t.Remark)
		}
		if req.OpenRangeType != 0 { //整数
			updateField = append(updateField, t.OpenRangeType)
		}
		if req.CreatedBy != 0 { //整数
			updateField = append(updateField, t.CreatedBy)
		}
		if req.UpdatedBy != 0 { //整数
			updateField = append(updateField, t.UpdatedBy)
		}
		if len(updateField) > 0 {
			do = do.Select(updateField...)
		}
		//主键条件
		HasPrimaryKey := false

		if req.Id != 0 { //整数
			do = do.Where(t.Id.Eq(req.Id))
			HasPrimaryKey = true
		}

		if !HasPrimaryKey {
			return errors.New("Missing condition")
		}

		dbObj := convert.OemAppTemplate_pb2db(req)
		_, err := do.Updates(dbObj)
		if err != nil {
			return errors.New(fmt.Sprintf("UpdateOemAppTemplate error : %s", err.Error()))
		}
		//先删除开发者
		tDeveloper := tx.TOemAppTemplateDeveloper
		//developerList, err := tDeveloper.WithContext(context.Background()).Where(tDeveloper.AppTemplateId.Eq(req.Id)).Find()
		//if err != nil {
		//	return err
		//}
		//var dbDeveloperMap map[string]string = make(map[string]string)
		//var inDeveloperMap map[string]*proto.TemplateDeveloperItem = make(map[string]*proto.TemplateDeveloperItem)
		//for _, d := range developerList {
		//	if _, ok := dbDeveloperMap[d.Account]; !ok {
		//		dbDeveloperMap[d.Account] = d.Account
		//	}
		//}
		//for _, d := range req.Developers {
		//	if _, ok := inDeveloperMap[d.Account]; !ok {
		//		inDeveloperMap[d.Account] = d
		//	}
		//}
		//var addDeveloper []*proto.TemplateDeveloperItem = make([]*proto.TemplateDeveloperItem, 0)
		//var delDeveloper []string = make([]string, 0)
		////传入的数据库中没有的，新增
		//for _, d := range req.Developers {
		//	if _, ok := dbDeveloperMap[d.Account]; !ok {
		//		addDeveloper = append(addDeveloper, d)
		//	}
		//}
		////数据库中不存在的删除
		//for _, d := range dbDeveloperMap {
		//	if _, ok := inDeveloperMap[d]; !ok {
		//		delDeveloper = append(delDeveloper, d)
		//	}
		//}
		//_, err = tDeveloper.WithContext(context.Background()).Where(tDeveloper.AppTemplateId.Eq(req.Id), tDeveloper.Account.In(delDeveloper...)).Delete()
		_, err = tDeveloper.WithContext(context.Background()).Where(tDeveloper.AppTemplateId.Eq(req.Id)).Delete()
		if err != nil {
			return err
		}
		//绑定最新的开发者
		if len(req.Developers) > 0 {
			//查询绑定的开发者
			tDeveloper := tx.TOemAppTemplateDeveloper
			doDeveloper := tDeveloper.WithContext(context.Background())
			if err != nil {
				return err
			}
			saveDevelopers := []*model.TOemAppTemplateDeveloper{}
			for _, developer := range req.Developers {
				saveDevelopers = append(saveDevelopers, &model.TOemAppTemplateDeveloper{
					Id:            iotutil.GetNextSeqInt64(),
					AppTemplateId: req.Id,
					DeveloperId:   developer.DeveloperId,
					TenantId:      developer.TenantId,
					Account:       developer.Account,
					CompanyName:   developer.CompanyName,
				})
			}
			doDeveloper.Create(saveDevelopers...)
		}
		return nil
	})
	if err != nil {
		logger.Errorf("DeleteOemAppTemplate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OemAppTemplate
func (s *OemAppTemplateSvc) UpdateAllOemAppTemplate(req *proto.OemAppTemplate) (*proto.OemAppTemplate, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppTemplate
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr
	updateField = append(updateField, t.Name)
	updateField = append(updateField, t.NameEn)
	updateField = append(updateField, t.Type)
	updateField = append(updateField, t.Version)
	updateField = append(updateField, t.GitUrl)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.Remark)
	updateField = append(updateField, t.OpenRangeType)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOemAppTemplate error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppTemplate_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOemAppTemplate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OemAppTemplateSvc) UpdateFieldsOemAppTemplate(req *proto.OemAppTemplateUpdateFieldsRequest) (*proto.OemAppTemplate, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppTemplate
	do := t.WithContext(context.Background())
	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOemAppTemplate error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOemAppTemplate error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OemAppTemplate_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOemAppTemplate error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OemAppTemplate
func (s *OemAppTemplateSvc) FindOemAppTemplate(req *proto.OemAppTemplateFilter) (*proto.OemAppTemplate, error) {
	t := orm.Use(iotmodel.GetDB()).TOemAppTemplate
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.NameEn != "" { //字符串
		do = do.Where(t.NameEn.Eq(req.NameEn))
	}
	if req.Type != 0 { //整数
		do = do.Where(t.Type.Eq(req.Type))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.GitUrl != "" { //字符串
		do = do.Where(t.GitUrl.Eq(req.GitUrl))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.OpenRangeType != 0 { //整数
		do = do.Where(t.OpenRangeType.Eq(req.OpenRangeType))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOemAppTemplate error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppTemplate_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OemAppTemplate
func (s *OemAppTemplateSvc) FindByIdOemAppTemplate(req *proto.OemAppTemplateFilter) (*proto.OemAppTemplate, error) {
	q := orm.Use(iotmodel.GetDB())
	t := q.TOemAppTemplate
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOemAppTemplate error : %s", err.Error())
		return nil, err
	}
	res := convert.OemAppTemplate_db2pb(dbObj)

	//查询绑定的开发者
	tDeveloper := q.TOemAppTemplateDeveloper
	developers, err := tDeveloper.WithContext(context.Background()).
		Where(tDeveloper.AppTemplateId.Eq(req.Id)).Find()
	if err != nil {
		logger.Errorf("FindByIdOemAppTemplate TOemAppTemplateDeveloper error : %s", err.Error())
		return nil, err
	}
	for _, developer := range developers {
		res.Developers = append(res.Developers, &proto.TemplateDeveloperItem{
			DeveloperId: developer.DeveloperId,
			TenantId:    developer.TenantId,
			Account:     developer.Account,
			CompanyName: developer.CompanyName,
		})
	}
	return res, err
}

// 根据分页条件查找OemAppTemplate,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OemAppTemplateSvc) GetListOemAppTemplate(req *proto.OemAppTemplateListRequest) ([]*proto.OemAppTemplate, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOemAppTemplate
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Name != "" { //字符串
			do = do.Where(t.Name.Like("%" + query.Name + "%"))
		}
		if query.NameEn != "" { //字符串
			do = do.Where(t.NameEn.Like("%" + query.NameEn + "%"))
		}
		if query.Type != 0 { //整数
			do = do.Where(t.Type.Eq(query.Type))
		}
		if query.Version != "" { //字符串
			do = do.Where(t.Version.Like("%" + query.Version + "%"))
		}
		if query.GitUrl != "" { //字符串
			do = do.Where(t.GitUrl.Like("%" + query.GitUrl + "%"))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
		if query.OpenRangeType != 0 { //整数
			do = do.Where(t.OpenRangeType.Eq(query.OpenRangeType))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.CreatedAt.Desc())
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*model.TOemAppTemplate
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOemAppTemplate error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OemAppTemplate, len(list))
	for i, v := range list {
		result[i] = convert.OemAppTemplate_db2pb(v)
	}
	return result, total, nil
}

// 创建OemAppTemplate
func (s *OemAppTemplateSvc) existsOemAppTemplateVersion(req *proto.OemAppTemplate) error {
	var err error
	q := orm.Use(iotmodel.GetDB())
	//去重
	do := q.TOemAppTemplate.WithContext(context.Background()).
		Where(q.TOemAppTemplate.Type.Eq(req.Type), q.TOemAppTemplate.Version.Eq(req.Version))

	if req.Id != 0 {
		do = do.Where(q.TOemAppTemplate.Id.Neq(req.Id))
	}
	existsCount, err := do.Count()
	if err != nil {
		return err
	}
	if existsCount > 0 {
		return errors.New("APP模板版本号已存在！")
	}
	return nil
}
