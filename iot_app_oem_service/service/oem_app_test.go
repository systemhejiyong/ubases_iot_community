// Code generated by sgen.exe,2022-05-31 16:29:04. DO NOT EDIT.

// versions: v1.0.0

// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (

	//"cloud_platform/iot_common/iotutil"
	//"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_common/iotutil"
	"fmt"

	//"strconv"
	//"strings"
	"testing"
	//"os/exec"
	"path"
	"time"

	"go-micro.dev/v4/logger"
)

func TestOemAppSvc_Build(t *testing.T) {

	//ee := time.Now().Sub(time.Now().Unix(600, 0))
	//expires := time.Unix().Sub(time.Now())

	//fmt.Println(expires)
	//fmt.Println(ee)

	tsr := time.Hour * 2
	fmt.Println(tsr)

	var ids = make(map[string]string, 0)

	ids["123456"] = "789456"
	ids["123456789"] = "789456789"

	s := ids["123456888"]

	fmt.Println(s)

	iotutil.Zip("D:\\aa-works\\cloud_platform\\iot_app_oem_service\\temp\\build_record\\OEtPibG1AiOuY4dZT6_2", "D:\\aa-works\\cloud_platform\\iot_app_oem_service\\temp\\build_record\\4434562903223402496.zip")

	var a = 1
	var b = "123"
	if b == "123" && a == 1 {
		fmt.Println("yes")
	} else {
		fmt.Println("no")
	}

	n := path.Ext("/usr/local/bat/temp/templates/1024_1024.png")
	fmt.Println(n)

	iotutil.ImageResize("/usr/local/bat/temp/templates/1024_1024.png", "/usr/local/bat/temp/templates/57x57.png", 57, 57)

	// bgColor := "#3B7CFF"
	// fmt.Println(strconv.ParseInt(bgColor[1:3],16,32))
	// fmt.Println(strconv.ParseInt(bgColor[3:5],16,32))
	// fmt.Println(strconv.ParseInt(bgColor[5:7],16,32))

	// color := ColourBlend("#3B7CFF","#FFFFFF",0.05)
	// fmt.Println(color)

	// iotutil.MkDir("/usr/local/bat/temp/defaultImage")
	// err := iotutil.GenLaunchImageFromIcon("C:\\Users\\Husf\\Pictures\\500x500.png","/usr/local/bat/temp/defaultImage/logo.png",1080,1920)
	// if err != nil{
	// 	fmt.Println(err.Error())
	// }

	// p := iotutil.GetCurrentPath()
	// p = strings.Replace(p,"/service","",1)
	// p = p+"/keystore"

	// pe := p+"/keytool.exe"
	// storeFileName := "server.keystore"

	// err := exec.Command(pe, "-genkeypair","-alias","serverkey","-keypass","111111","-storepass","111111","-dname","C=CN,ST=GD,L=SZ,O=vihoo,OU=dev,CN=vihoo.com","-keyalg",
	// "RSA","-keysize","2048","-validity","3650","-keystore",p+"/files/"+storeFileName,"-storetype","PKCS12").Run()
	// //cmd.Run()
	// //output,err := cmd.CombinedOutput()
	// if err != nil{
	// 	fmt.Println(err.Error())
	// }
	//fmt.Println(fmt.Sprintf("%s", output))

	//转格式.
	//keytool -importkeystore -srckeystore server.keystore -destkeystore server.keystore -deststoretype pkcs12

	// cmd2 := exec.Command(pe,"-importkeystore","-srckeystore",p+"/"+storeFileName,"-destkeystore",p+"/"+storeFileName,"-deststoretype","pkcs12")

	// output2,err2 := cmd2.CombinedOutput()
	// if err2 != nil{
	// 	fmt.Println(err2.Error())
	// }
	// fmt.Println(fmt.Sprintf("%s", output2))

}

func TestKeytool(t *testing.T) {
	s := OemAppSvc{}

	md5, sha1, sha256, errSha := s.GetKeystoreFingerprint("D:\\Temp\\rbPGithbHbYGnbLtWdcR.keystore", "357405")
	if errSha != nil {
		logger.Error("exec GetKeystoreShas error:" + errSha.Error())
	}
	fmt.Println(md5, sha1, sha256)
	logger.Info("exec GetKeystoreShas success.")
}
