// Code generated by sgen,2023-06-02 13:48:12. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmPanelStudioBuildRecordSvc struct {
	Ctx context.Context
}

// 创建OpmPanelStudioBuildRecord
func (s *OpmPanelStudioBuildRecordSvc) CreateOpmPanelStudioBuildRecord(req *proto.OpmPanelStudioBuildRecord) (*proto.OpmPanelStudioBuildRecord, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOpmPanelStudioBuildRecord
	do := t.WithContext(context.Background())
	dbObj := convert.OpmPanelStudioBuildRecord_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmPanelStudioBuildRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OpmPanelStudioBuildRecord
func (s *OpmPanelStudioBuildRecordSvc) DeleteOpmPanelStudioBuildRecord(req *proto.OpmPanelStudioBuildRecord) (*proto.OpmPanelStudioBuildRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelStudioBuildRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.BuildId != "" { //字符串
		do = do.Where(t.BuildId.Eq(req.BuildId))
	}
	if req.PanelId != 0 { //整数
		do = do.Where(t.PanelId.Eq(req.PanelId))
	}
	if req.PanelType != 0 { //整数
		do = do.Where(t.PanelType.Eq(req.PanelType))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.ResUrl != "" { //字符串
		do = do.Where(t.ResUrl.Eq(req.ResUrl))
	}
	if req.ResMd5 != "" { //字符串
		do = do.Where(t.ResMd5.Eq(req.ResMd5))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CommitId != "" { //字符串
		do = do.Where(t.CommitId.Eq(req.CommitId))
	}
	if req.BuildProgress != 0 { //整数
		do = do.Where(t.BuildProgress.Eq(req.BuildProgress))
	}
	if req.BuildResult != 0 { //整数
		do = do.Where(t.BuildResult.Eq(req.BuildResult))
	}
	if req.BuildResultMsg != "" { //字符串
		do = do.Where(t.BuildResultMsg.Eq(req.BuildResultMsg))
	}
	if req.ZipUrl != "" { //字符串
		do = do.Where(t.ZipUrl.Eq(req.ZipUrl))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmPanelStudioBuildRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpmPanelStudioBuildRecord
func (s *OpmPanelStudioBuildRecordSvc) DeleteByIdOpmPanelStudioBuildRecord(req *proto.OpmPanelStudioBuildRecord) (*proto.OpmPanelStudioBuildRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelStudioBuildRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmPanelStudioBuildRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpmPanelStudioBuildRecord
func (s *OpmPanelStudioBuildRecordSvc) DeleteByIdsOpmPanelStudioBuildRecord(req *proto.OpmPanelStudioBuildRecordBatchDeleteRequest) (*proto.OpmPanelStudioBuildRecordBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmPanelStudioBuildRecord
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmPanelStudioBuildRecord error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpmPanelStudioBuildRecord
func (s *OpmPanelStudioBuildRecordSvc) UpdateOpmPanelStudioBuildRecord(req *proto.OpmPanelStudioBuildRecord) (*proto.OpmPanelStudioBuildRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelStudioBuildRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.BuildId != "" { //字符串
		updateField = append(updateField, t.BuildId)
	}
	if req.PanelId != 0 { //整数
		updateField = append(updateField, t.PanelId)
	}
	if req.PanelType != 0 { //整数
		updateField = append(updateField, t.PanelType)
	}
	if req.Version != "" { //字符串
		updateField = append(updateField, t.Version)
	}
	if req.ResUrl != "" { //字符串
		updateField = append(updateField, t.ResUrl)
	}
	if req.ResMd5 != "" { //字符串
		updateField = append(updateField, t.ResMd5)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.CommitId != "" { //字符串
		updateField = append(updateField, t.CommitId)
	}
	if req.BuildProgress != 0 { //整数
		updateField = append(updateField, t.BuildProgress)
	}
	if req.BuildResult != 0 { //整数
		updateField = append(updateField, t.BuildResult)
	}
	if req.BuildResultMsg != "" { //字符串
		updateField = append(updateField, t.BuildResultMsg)
	}
	if req.ZipUrl != "" { //字符串
		updateField = append(updateField, t.ZipUrl)
	}
	if req.OriginType != 0 {
		updateField = append(updateField, t.OriginType)
	}
	if req.AppKey != "" { //字符串
		updateField = append(updateField, t.AppKey)
	}
	if req.UserAccount != "" { //字符串
		updateField = append(updateField, t.UserAccount)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmPanelStudioBuildRecord error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmPanelStudioBuildRecord_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmPanelStudioBuildRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpmPanelStudioBuildRecord
func (s *OpmPanelStudioBuildRecordSvc) UpdateAllOpmPanelStudioBuildRecord(req *proto.OpmPanelStudioBuildRecord) (*proto.OpmPanelStudioBuildRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelStudioBuildRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.BuildId)
	updateField = append(updateField, t.PanelId)
	updateField = append(updateField, t.PanelType)
	updateField = append(updateField, t.Version)
	updateField = append(updateField, t.ResUrl)
	updateField = append(updateField, t.ResMd5)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.CommitId)
	updateField = append(updateField, t.BuildProgress)
	updateField = append(updateField, t.BuildResult)
	updateField = append(updateField, t.BuildResultMsg)
	updateField = append(updateField, t.ZipUrl)
	updateField = append(updateField, t.StartTime)
	updateField = append(updateField, t.EndTime)
	updateField = append(updateField, t.OriginType)
	updateField = append(updateField, t.UserAccount)
	updateField = append(updateField, t.AppKey)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmPanelStudioBuildRecord error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmPanelStudioBuildRecord_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmPanelStudioBuildRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmPanelStudioBuildRecordSvc) UpdateFieldsOpmPanelStudioBuildRecord(req *proto.OpmPanelStudioBuildRecordUpdateFieldsRequest) (*proto.OpmPanelStudioBuildRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelStudioBuildRecord
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmPanelStudioBuildRecord error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmPanelStudioBuildRecord error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmPanelStudioBuildRecord_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmPanelStudioBuildRecord error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmPanelStudioBuildRecord
func (s *OpmPanelStudioBuildRecordSvc) FindOpmPanelStudioBuildRecord(req *proto.OpmPanelStudioBuildRecordFilter) (*proto.OpmPanelStudioBuildRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelStudioBuildRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.BuildId != "" { //字符串
		do = do.Where(t.BuildId.Eq(req.BuildId))
	}
	if req.PanelId != 0 { //整数
		do = do.Where(t.PanelId.Eq(req.PanelId))
	}
	if req.PanelType != 0 { //整数
		do = do.Where(t.PanelType.Eq(req.PanelType))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.ResUrl != "" { //字符串
		do = do.Where(t.ResUrl.Eq(req.ResUrl))
	}
	if req.ResMd5 != "" { //字符串
		do = do.Where(t.ResMd5.Eq(req.ResMd5))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CommitId != "" { //字符串
		do = do.Where(t.CommitId.Eq(req.CommitId))
	}
	if req.BuildProgress != 0 { //整数
		do = do.Where(t.BuildProgress.Eq(req.BuildProgress))
	}
	if req.BuildResult != 0 { //整数
		do = do.Where(t.BuildResult.Eq(req.BuildResult))
	}
	if req.BuildResultMsg != "" { //字符串
		do = do.Where(t.BuildResultMsg.Eq(req.BuildResultMsg))
	}
	if req.ZipUrl != "" { //字符串
		do = do.Where(t.ZipUrl.Eq(req.ZipUrl))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmPanelStudioBuildRecord error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmPanelStudioBuildRecord_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpmPanelStudioBuildRecord
func (s *OpmPanelStudioBuildRecordSvc) FindByIdOpmPanelStudioBuildRecord(req *proto.OpmPanelStudioBuildRecordFilter) (*proto.OpmPanelStudioBuildRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelStudioBuildRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmPanelStudioBuildRecord error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmPanelStudioBuildRecord_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OpmPanelStudioBuildRecord,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmPanelStudioBuildRecordSvc) GetListOpmPanelStudioBuildRecord(req *proto.OpmPanelStudioBuildRecordListRequest) ([]*proto.OpmPanelStudioBuildRecord, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpmPanelStudioBuildRecord
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.BuildId != "" { //字符串
			do = do.Where(t.BuildId.Like("%" + query.BuildId + "%"))
		}
		if query.PanelId != 0 { //整数
			do = do.Where(t.PanelId.Eq(query.PanelId))
		}
		if query.PanelType != 0 { //整数
			do = do.Where(t.PanelType.Eq(query.PanelType))
		}
		if query.Version != "" { //字符串
			do = do.Where(t.Version.Like("%" + query.Version + "%"))
		}
		if query.ResUrl != "" { //字符串
			do = do.Where(t.ResUrl.Like("%" + query.ResUrl + "%"))
		}
		if query.ResMd5 != "" { //字符串
			do = do.Where(t.ResMd5.Like("%" + query.ResMd5 + "%"))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.CommitId != "" { //字符串
			do = do.Where(t.CommitId.Like("%" + query.CommitId + "%"))
		}
		if query.BuildProgress != 0 { //整数
			do = do.Where(t.BuildProgress.Eq(query.BuildProgress))
		}
		if query.BuildResult != 0 { //整数
			do = do.Where(t.BuildResult.Eq(query.BuildResult))
		}
		if query.BuildResultMsg != "" { //字符串
			do = do.Where(t.BuildResultMsg.Like("%" + query.BuildResultMsg + "%"))
		}
		if query.ZipUrl != "" { //字符串
			do = do.Where(t.ZipUrl.Like("%" + query.ZipUrl + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOpmPanelStudioBuildRecord
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmPanelStudioBuildRecord error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmPanelStudioBuildRecord, len(list))
	for i, v := range list {
		result[i] = convert.OpmPanelStudioBuildRecord_db2pb(v)
	}
	return result, total, nil
}

// 根据分页条件查找OpmPanelStudioBuildRecord,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmPanelStudioBuildRecordSvc) GetPreviewUsers(req *proto.OpmPanelStudioBuildRecordListRequest) ([]string, error) {
	if req.Query.PanelId == 0 {
		return nil, errors.New("PanelId is empty")
	}
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpmPanelStudioBuildRecord
	do := t.WithContext(context.Background())
	query := req.Query
	do = do.Where(t.PanelId.Eq(query.PanelId))
	list, err := do.Find()
	if err != nil {
		logger.Errorf("GetListOpmPanelStudioBuildRecord error : %s", err.Error())
		return nil, err
	}
	result := make([]string, len(list))
	if len(list) == 0 {
		return result, nil
	}
	for i, v := range list {
		if v.UserAccount != "" {
			result[i] = v.UserAccount
		}
	}
	return result, nil
}
