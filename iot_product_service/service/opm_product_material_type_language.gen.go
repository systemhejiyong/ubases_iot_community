// Code generated by sgen,2023-02-14 11:55:45. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_product_service/convert"
)

type OpmProductMaterialTypeLanguageSvc struct {
	Ctx context.Context
}

//创建OpmProductMaterialTypeLanguage
func (s *OpmProductMaterialTypeLanguageSvc) CreateOpmProductMaterialTypeLanguage(req *proto.OpmProductMaterialTypeLanguage) (*proto.OpmProductMaterialTypeLanguage, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialTypeLanguage
	do := t.WithContext(context.Background())
	dbObj := convert.OpmProductMaterialTypeLanguage_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmProductMaterialTypeLanguage error : %s", err.Error())
		return nil,err
	}
	return req, err
}

//根据条件删除OpmProductMaterialTypeLanguage
func (s *OpmProductMaterialTypeLanguageSvc) DeleteOpmProductMaterialTypeLanguage(req *proto.OpmProductMaterialTypeLanguage) (*proto.OpmProductMaterialTypeLanguage, error) {
    t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialTypeLanguage
    do := t.WithContext(context.Background())
    // fixme 请检查条件
    
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
    }
    if req.MaterialTypeId != 0 {//整数
        do = do.Where(t.MaterialTypeId.Eq(req.MaterialTypeId))
    }
    if req.Lang != "" {//字符串
        do = do.Where(t.Lang.Eq(req.Lang))
    }
    if req.Type != "" {//字符串
        do = do.Where(t.Type.Eq(req.Type))
    }
    _,err := do.Delete()
    if err != nil {
        logger.Errorf("DeleteOpmProductMaterialTypeLanguage error : %s", err.Error())
		return nil,err
    }
    return req, err
}

//根据数据库表主键删除OpmProductMaterialTypeLanguage
func (s *OpmProductMaterialTypeLanguageSvc) DeleteByIdOpmProductMaterialTypeLanguage(req *proto.OpmProductMaterialTypeLanguage) (*proto.OpmProductMaterialTypeLanguage, error) {
    t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialTypeLanguage
    do := t.WithContext(context.Background())
    // fixme 请检查条件
    
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
    }
   _,err := do.Delete()
    if err != nil {
        logger.Errorf("DeleteByIdOpmProductMaterialTypeLanguage error : %s", err.Error())
		return nil,err
    }
    return req, err
}

//根据数据库表主键批量删除OpmProductMaterialTypeLanguage
func (s *OpmProductMaterialTypeLanguageSvc) DeleteByIdsOpmProductMaterialTypeLanguage(req *proto.OpmProductMaterialTypeLanguageBatchDeleteRequest) (*proto.OpmProductMaterialTypeLanguageBatchDeleteRequest, error) {
    var err error
    for _,k := range req.Keys {
        t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialTypeLanguage
        do := t.WithContext(context.Background())
         
        do = do.Where(t.Id.Eq(k.Id))
           
         _,err = do.Delete()
         if err != nil {
             logger.Errorf("DeleteByIdsOpmProductMaterialTypeLanguage error : %s", err.Error())
             break
         }
    }
    return req, err
}

//根据主键更新OpmProductMaterialTypeLanguage
func (s *OpmProductMaterialTypeLanguageSvc) UpdateOpmProductMaterialTypeLanguage(req *proto.OpmProductMaterialTypeLanguage) (*proto.OpmProductMaterialTypeLanguage, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialTypeLanguage
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField  []field.Expr
    
    if req.MaterialTypeId != 0 {//整数
        updateField = append(updateField,t.MaterialTypeId)
    }
    if req.Lang != "" {//字符串
        updateField = append(updateField,t.Lang)
    }
    if req.Type != "" {//字符串
        updateField = append(updateField,t.Type)
    }
    if len(updateField) > 0 {
        do = do.Select(updateField...)
    }
    //主键条件
    HasPrimaryKey := false
      
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
        HasPrimaryKey = true
    }   

    if !HasPrimaryKey {
        logger.Error("UpdateOpmProductMaterialTypeLanguage error : Missing condition")
        return nil,errors.New("Missing condition")
    }

	dbObj := convert.OpmProductMaterialTypeLanguage_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmProductMaterialTypeLanguage error : %s", err.Error())
		return nil,err
	}
	return req, err
}

////根据主键更新所有字段OpmProductMaterialTypeLanguage
func (s *OpmProductMaterialTypeLanguageSvc) UpdateAllOpmProductMaterialTypeLanguage(req *proto.OpmProductMaterialTypeLanguage) (*proto.OpmProductMaterialTypeLanguage, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialTypeLanguage
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField  []field.Expr
      
        updateField = append(updateField,t.MaterialTypeId) 
        updateField = append(updateField,t.Lang) 
        updateField = append(updateField,t.Type)
    if len(updateField) > 0 {
        do = do.Select(updateField...)
    }
    //主键条件
    HasPrimaryKey := false   
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
        HasPrimaryKey = true
    }   
    if !HasPrimaryKey {
        logger.Error("UpdateAllOpmProductMaterialTypeLanguage error : Missing condition")
        return nil,errors.New("Missing condition")
    }
	dbObj := convert.OpmProductMaterialTypeLanguage_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmProductMaterialTypeLanguage error : %s", err.Error())
		return nil,err
	}
	return req, err
}

func (s *OpmProductMaterialTypeLanguageSvc) UpdateFieldsOpmProductMaterialTypeLanguage(req *proto.OpmProductMaterialTypeLanguageUpdateFieldsRequest) (*proto.OpmProductMaterialTypeLanguage, error) {
    t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialTypeLanguage
	do := t.WithContext(context.Background())

	var updateField  []field.Expr
	for _,v:=range req.Fields {
	    col, ok := t.GetFieldByName(v)
        if ok {
          updateField = append(updateField,col)
        }
    }
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmProductMaterialTypeLanguage error : missing updateField")
		logger.Error(err)
		return nil,err
	}
	do = do.Select(updateField...)

    //主键条件
    HasPrimaryKey := false   
    if req.Data.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Data.Id))
        HasPrimaryKey = true
    }   
    if !HasPrimaryKey {
        logger.Error("UpdateFieldsOpmProductMaterialTypeLanguage error : Missing condition")
        return nil,errors.New("Missing condition")
    }
	dbObj := convert.OpmProductMaterialTypeLanguage_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmProductMaterialTypeLanguage error : %s", err.Error())
		return nil,err
	}
	return req.Data, nil
}

//根据非空条件查找OpmProductMaterialTypeLanguage
func (s *OpmProductMaterialTypeLanguageSvc) FindOpmProductMaterialTypeLanguage(req *proto.OpmProductMaterialTypeLanguageFilter) (*proto.OpmProductMaterialTypeLanguage, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialTypeLanguage
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
    
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
    }
    if req.MaterialTypeId != 0 {//整数
        do = do.Where(t.MaterialTypeId.Eq(req.MaterialTypeId))
    }
    if req.Lang != "" {//字符串
        do = do.Where(t.Lang.Eq(req.Lang))
    }
    if req.Type != "" {//字符串
        do = do.Where(t.Type.Eq(req.Type))
    }
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmProductMaterialTypeLanguage error : %s", err.Error())
		return nil,err
	}
	res := convert.OpmProductMaterialTypeLanguage_db2pb(dbObj)
	return res, err
}

//根据数据库表主键查找OpmProductMaterialTypeLanguage
func (s *OpmProductMaterialTypeLanguageSvc) FindByIdOpmProductMaterialTypeLanguage(req *proto.OpmProductMaterialTypeLanguageFilter) (*proto.OpmProductMaterialTypeLanguage, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialTypeLanguage
	do := t.WithContext(context.Background())
    // fixme 请检查条件和校验参数
    
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
    }
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmProductMaterialTypeLanguage error : %s", err.Error())
		return nil,err
	}
	res := convert.OpmProductMaterialTypeLanguage_db2pb(dbObj)
	return res, err
}

//根据分页条件查找OpmProductMaterialTypeLanguage,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmProductMaterialTypeLanguageSvc) GetListOpmProductMaterialTypeLanguage(req *proto.OpmProductMaterialTypeLanguageListRequest) ([]*proto.OpmProductMaterialTypeLanguage, int64, error) {
    // fixme 请检查条件和校验参数
    var err error
    t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialTypeLanguage
    do := t.WithContext(context.Background())
    query := req.Query
    if query != nil {
        
        if query.Id != 0 {//整数
            do = do.Where(t.Id.Eq(query.Id))
        }
        if query.MaterialTypeId != 0 {//整数
            do = do.Where(t.MaterialTypeId.Eq(query.MaterialTypeId))
        }
        if query.Lang != "" {//字符串
            do = do.Where(t.Lang.Like("%" + query.Lang + "%"))
        }
        if query.Type != "" {//字符串
            do = do.Where(t.Type.Like("%" + query.Type + "%"))
        }
    }
    orderCol, ok := t.GetFieldByName(req.OrderKey)
    if !ok { 
        orderCol = t.Id
    }
    if req.OrderDesc != "" {
        do = do.Order(orderCol.Desc())
    } else {
        do = do.Order(orderCol)
    }

	var list []*model.TOpmProductMaterialTypeLanguage
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
	    logger.Errorf("GetListOpmProductMaterialTypeLanguage error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
	     return nil, total, nil
	}
	result := make([]*proto.OpmProductMaterialTypeLanguage,len(list))
    for i, v := range list {
        result[i] = convert.OpmProductMaterialTypeLanguage_db2pb(v)
    }
    return result, total, nil
}


