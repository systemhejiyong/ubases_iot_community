// Code generated by sgen.exe,2022-11-11 10:46:48. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
	"google.golang.org/protobuf/types/known/timestamppb"
)

type OpmProductMaterialsSvc struct {
	Ctx context.Context
}

// 创建OpmProductMaterials
func (s *OpmProductMaterialsSvc) CreateOpmProductMaterials(req *proto.OpmProductMaterials) (*proto.OpmProductMaterials, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterials
	do := t.WithContext(context.Background())
	dbObj := convert.OpmProductMaterials_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmProductMaterials error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OpmProductMaterials
func (s *OpmProductMaterialsSvc) DeleteOpmProductMaterials(req *proto.OpmProductMaterials) (*proto.OpmProductMaterials, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterials
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.ImageUrl != "" { //字符串
		do = do.Where(t.ImageUrl.Eq(req.ImageUrl))
	}
	if req.ProductPage != "" { //字符串
		do = do.Where(t.ProductPage.Eq(req.ProductPage))
	}
	if req.Count != 0 { //整数
		do = do.Where(t.Count.Eq(req.Count))
	}
	if req.BrandCode != "" { //字符串
		do = do.Where(t.BrandCode.Eq(req.BrandCode))
	}
	if req.FragranceCode != "" { //字符串
		do = do.Where(t.FragranceCode.Eq(req.FragranceCode))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmProductMaterials error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpmProductMaterials
func (s *OpmProductMaterialsSvc) DeleteByIdOpmProductMaterials(req *proto.OpmProductMaterials) (*proto.OpmProductMaterials, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterials
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmProductMaterials error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpmProductMaterials
func (s *OpmProductMaterialsSvc) DeleteByIdsOpmProductMaterials(req *proto.OpmProductMaterialsBatchDeleteRequest) (*proto.OpmProductMaterialsBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmProductMaterials
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmProductMaterials error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpmProductMaterials
func (s *OpmProductMaterialsSvc) UpdateOpmProductMaterials(req *proto.OpmProductMaterials) (*proto.OpmProductMaterials, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterials
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.TenantId)
	}
	if req.ImageUrl != "" { //字符串
		updateField = append(updateField, t.ImageUrl)
	}
	if req.ProductPage != "" { //字符串
		updateField = append(updateField, t.ProductPage)
	}
	if req.Count != 0 { //整数
		updateField = append(updateField, t.Count)
	}
	if req.BrandCode != "" { //字符串
		updateField = append(updateField, t.BrandCode)
	}
	if req.FragranceCode != "" { //字符串
		updateField = append(updateField, t.FragranceCode)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if req.MaterialTypeId != 0 { //整数
		updateField = append(updateField, t.MaterialTypeId)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmProductMaterials error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmProductMaterials_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmProductMaterials error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpmProductMaterials
func (s *OpmProductMaterialsSvc) UpdateAllOpmProductMaterials(req *proto.OpmProductMaterials) (*proto.OpmProductMaterials, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterials
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.TenantId)
	updateField = append(updateField, t.ImageUrl)
	updateField = append(updateField, t.ProductPage)
	updateField = append(updateField, t.Count)
	updateField = append(updateField, t.BrandCode)
	updateField = append(updateField, t.FragranceCode)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmProductMaterials error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmProductMaterials_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmProductMaterials error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmProductMaterialsSvc) UpdateFieldsOpmProductMaterials(req *proto.OpmProductMaterialsUpdateFieldsRequest) (*proto.OpmProductMaterials, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterials
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmProductMaterials error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmProductMaterials error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmProductMaterials_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmProductMaterials error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmProductMaterials
func (s *OpmProductMaterialsSvc) FindOpmProductMaterials(req *proto.OpmProductMaterialsFilter) (*proto.OpmProductMaterials, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterials
	tl := orm.Use(iotmodel.GetDB()).TOpmProductMaterialLanguage
	ttl := orm.Use(iotmodel.GetDB()).TOpmProductMaterialTypeLanguage
	var item TOpmProductMaterials
	do := t.WithContext(context.Background()).Select(t.ALL, tl.Lang, tl.Name, tl.BrandName, tl.FragranceName, tl.ProductAddress,
		tl.Variety, tl.Ingredient, tl.Effect, tl.Description, ttl.Type).LeftJoin(tl, t.Id.EqCol(tl.MaterialId)).
		LeftJoin(ttl, t.MaterialTypeId.EqCol(ttl.MaterialTypeId)).Where(tl.Lang.Eq(req.Lang), ttl.Lang.Eq(req.Lang))
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.ImageUrl != "" { //字符串
		do = do.Where(t.ImageUrl.Eq(req.ImageUrl))
	}
	if req.ProductPage != "" { //字符串
		do = do.Where(t.ProductPage.Eq(req.ProductPage))
	}
	if req.Count != 0 { //整数
		do = do.Where(t.Count.Eq(req.Count))
	}
	if req.BrandCode != "" { //字符串
		do = do.Where(t.BrandCode.Eq(req.BrandCode))
	}
	if req.FragranceCode != "" { //字符串
		do = do.Where(t.FragranceCode.Eq(req.FragranceCode))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	err := do.Scan(&item)
	if err != nil {
		logger.Errorf("FindOpmProductMaterials error : %s", err.Error())
		return nil, err
	}
	res := OpmProductMaterials_db2pb(&item)
	return res, err
}

// 根据数据库表主键查找OpmProductMaterials
func (s *OpmProductMaterialsSvc) FindByIdOpmProductMaterials(req *proto.OpmProductMaterialsFilter) (*proto.OpmProductMaterials, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterials
	tl := orm.Use(iotmodel.GetDB()).TOpmProductMaterialLanguage
	ttl := orm.Use(iotmodel.GetDB()).TOpmProductMaterialTypeLanguage
	var item TOpmProductMaterials
	err := t.WithContext(context.Background()).Select(t.ALL, tl.Id.As("materialLangId"), tl.Lang, tl.Name, tl.BrandName, tl.FragranceName, tl.ProductAddress,
		tl.Variety, tl.Ingredient, tl.Effect, tl.Description, ttl.Type).LeftJoin(tl, t.Id.EqCol(tl.MaterialId)).LeftJoin(ttl, t.MaterialTypeId.EqCol(ttl.MaterialTypeId)).
		Where(t.Id.Eq(req.Id), tl.Lang.Eq(req.Lang), ttl.Lang.Eq(req.Lang)).Scan(&item)
	if err != nil {
		return nil, err
	}

	res := OpmProductMaterials_db2pb(&item)
	return res, err
}

// 根据分页条件查找OpmProductMaterials,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmProductMaterialsSvc) GetListOpmProductMaterials(req *proto.OpmProductMaterialsListRequest) ([]*proto.OpmProductMaterials, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterials
	tl := orm.Use(iotmodel.GetDB()).TOpmProductMaterialLanguage
	ttl := orm.Use(iotmodel.GetDB()).TOpmProductMaterialTypeLanguage
	do := t.WithContext(context.Background()).Select(t.ALL, tl.Id.As("materialLangId"), tl.Lang, tl.Name, tl.BrandName, tl.FragranceName, tl.ProductAddress,
		tl.Variety, tl.Ingredient, tl.Effect, tl.Description, ttl.Type).LeftJoin(tl, t.Id.EqCol(tl.MaterialId)).LeftJoin(ttl, t.MaterialTypeId.EqCol(ttl.MaterialTypeId)).
		Where(tl.Lang.Eq(req.Query.Lang), ttl.Lang.Eq(req.Query.Lang))
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Name != "" { //字符串
			do = do.Where(tl.Name.Like("%" + query.Name + "%"))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Like("%" + query.TenantId + "%"))
		}
		if query.ImageUrl != "" { //字符串
			do = do.Where(t.ImageUrl.Like("%" + query.ImageUrl + "%"))
		}
		if query.ProductPage != "" { //字符串
			do = do.Where(t.ProductPage.Like("%" + query.ProductPage + "%"))
		}
		if query.Count != 0 { //整数
			do = do.Where(t.Count.Eq(query.Count))
		}
		if query.MaterialTypeId != 0 { //整数
			do = do.Where(t.MaterialTypeId.Eq(query.MaterialTypeId))
		}
		if query.BrandCode != "" { //字符串
			do = do.Where(t.BrandCode.Like("%" + query.BrandCode + "%"))
		}
		if query.FragranceCode != "" { //字符串
			do = do.Where(t.FragranceCode.Like("%" + query.FragranceCode + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*TOpmProductMaterials
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do.ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmProductMaterials error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmProductMaterials, len(list))
	for i, v := range list {
		result[i] = OpmProductMaterials_db2pb(v)
	}
	return result, total, nil
}

// 根据主键更新OpmProductMaterials
func (s *OpmProductMaterialsSvc) ClickOpmProductMaterials(req *proto.OpmProductMaterials) (*proto.OpmProductMaterials, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterials
	do := t.WithContext(context.Background())
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmProductMaterials error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	_, err := do.UpdateSimple(t.Count.Add(1))
	if err != nil {
		logger.Errorf("UpdateOpmProductMaterials error : %s", err.Error())
		return nil, err
	}
	return req, err
}

type TOpmProductMaterials struct {
	Id             int64     `gorm:"column:id;primaryKey" json:"id"`                        // 主键
	TenantId       string    `gorm:"column:tenant_id;not null" json:"tenantId"`             // 租户ID
	Name           string    `gorm:"column:name;not null" json:"name"`                      // 耗材名称
	Type           string    `gorm:"column:type;not null" json:"type"`                      // 耗材种类
	ImageUrl       string    `gorm:"column:image_url" json:"imageUrl"`                      // 耗材图片链接
	ProductPage    string    `gorm:"column:product_page" json:"productPage"`                // 商品页
	Count          int64     `gorm:"column:count;not null" json:"count"`                    // 点击量
	BrandCode      string    `gorm:"column:brand_code;not null" json:"brandCode"`           // 品牌编码
	BrandName      string    `gorm:"column:brand_name;not null" json:"brandName"`           // 品牌名称
	FragranceCode  string    `gorm:"column:fragrance_code;not null" json:"fragranceCode"`   // 香型编码
	FragranceName  string    `gorm:"column:fragrance_name;not null" json:"fragranceName"`   // 香型名称
	ProductAddress string    `gorm:"column:product_address;not null" json:"productAddress"` // 产地
	Variety        string    `gorm:"column:variety;not null" json:"variety"`                // 品种
	Ingredient     string    `gorm:"column:ingredient" json:"ingredient"`                   // 成分
	Effect         string    `gorm:"column:effect" json:"effect"`                           // 功效
	Description    string    `gorm:"column:description" json:"description"`                 // 描述
	CreatedBy      int64     `gorm:"column:created_by" json:"createdBy"`                    // 创建人
	CreatedAt      time.Time `gorm:"column:created_at" json:"createdAt"`                    // 创建时间
	UpdatedBy      int64     `gorm:"column:updated_by" json:"updatedBy"`                    // 修改人
	UpdatedAt      time.Time `gorm:"column:updated_at" json:"updatedAt"`                    // 修改时间
	Lang           string    `gorm:"column:lang" json:"lang"`
	MaterialLangId int64     `gorm:"column:materialLangId" json:"materialLangId"`
	MaterialTypeId int64     `gorm:"column:material_type_id" json:"materialTypeId"`
}

func OpmProductMaterials_db2pb(src *TOpmProductMaterials) *proto.OpmProductMaterials {
	if src == nil {
		return nil
	}
	pbObj := proto.OpmProductMaterials{
		Id:             src.Id,
		TenantId:       src.TenantId,
		Name:           src.Name,
		Type:           src.Type,
		ImageUrl:       src.ImageUrl,
		ProductPage:    src.ProductPage,
		Count:          src.Count,
		BrandCode:      src.BrandCode,
		BrandName:      src.BrandName,
		FragranceCode:  src.FragranceCode,
		FragranceName:  src.FragranceName,
		ProductAddress: src.ProductAddress,
		Variety:        src.Variety,
		Ingredient:     src.Ingredient,
		Effect:         src.Effect,
		Description:    src.Description,
		CreatedBy:      src.CreatedBy,
		CreatedAt:      timestamppb.New(src.CreatedAt),
		UpdatedBy:      src.UpdatedBy,
		UpdatedAt:      timestamppb.New(src.UpdatedAt),
		MaterialLangId: src.MaterialLangId,
		Lang:           src.Lang,
		MaterialTypeId: src.MaterialTypeId,
	}
	return &pbObj
}
