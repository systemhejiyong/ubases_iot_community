// Code generated by sgen.exe,2022-04-27 17:59:36. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotconst"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type TplDocumentTemplateSvc struct {
	Ctx context.Context
}

// 创建TplDocumentTemplate
func (s *TplDocumentTemplateSvc) CreateTplDocumentTemplate(req *proto.TplDocumentTemplate) (*proto.TplDocumentTemplate, error) {
	if req.TplType == "" || req.TplType == "0" {
		return nil, errors.New("模板类型不能为空")
	}
	if req.Lang == "" {
		return nil, errors.New("模板语言不能为空")
	}
	if req.TplName == "" {
		return nil, errors.New("模板名称不能为空")
	}
	//判断名称是否重复
	if isExists, err := s.existsByNameAndLang(req.TplType, req.Lang, 0); isExists {
		if err != nil {
			logger.Errorf("CreateTplDocumentTemplate error : %s", err.Error())
			return nil, err
		}
		return nil, errors.New("当前语言的模板已存在，无法重复创建")
	}

	t := orm.Use(iotmodel.GetDB()).TTplDocumentTemplate
	do := t.WithContext(context.Background())
	dbObj := convert.TplDocumentTemplate_pb2db(req)
	dbObj.Status = iotconst.UNSTART_STATE //默认未启动状态
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateTplDocumentTemplate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除TplDocumentTemplate
func (s *TplDocumentTemplateSvc) DeleteTplDocumentTemplate(req *proto.TplDocumentTemplate) (*proto.TplDocumentTemplate, error) {
	t := orm.Use(iotmodel.GetDB()).TTplDocumentTemplate
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TplCode != "" { //字符串
		do = do.Where(t.TplCode.Eq(req.TplCode))
	}
	if req.TplName != "" { //字符串
		do = do.Where(t.TplName.Eq(req.TplName))
	}
	if req.TplContent != "" { //字符串
		do = do.Where(t.TplContent.Eq(req.TplContent))
	}
	if req.TplParams != "" { //字符串
		do = do.Where(t.TplParams.Eq(req.TplParams))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.TplType != "" { //字符串
		do = do.Where(t.TplType.Eq(req.TplType))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteTplDocumentTemplate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除TplDocumentTemplate
func (s *TplDocumentTemplateSvc) DeleteByIdTplDocumentTemplate(req *proto.TplDocumentTemplate) (*proto.TplDocumentTemplate, error) {
	t := orm.Use(iotmodel.GetDB()).TTplDocumentTemplate
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdTplDocumentTemplate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除TplDocumentTemplate
func (s *TplDocumentTemplateSvc) DeleteByIdsTplDocumentTemplate(req *proto.TplDocumentTemplateBatchDeleteRequest) (*proto.TplDocumentTemplateBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TTplDocumentTemplate
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsTplDocumentTemplate error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新TplDocumentTemplate
func (s *TplDocumentTemplateSvc) UpdateTplDocumentTemplate(req *proto.TplDocumentTemplate) (*proto.TplDocumentTemplate, error) {
	if req.TplType == "" || req.TplType == "0" {
		return nil, errors.New("模板类型不能为空")
	}
	if req.Lang == "" {
		return nil, errors.New("模板语言不能为空")
	}
	if req.TplName == "" {
		return nil, errors.New("模板名称不能为空")
	}
	//判断名称是否重复
	if isExists, err := s.existsByNameAndLang(req.TplType, req.Lang, req.Id); isExists {
		if err != nil {
			logger.Errorf("UpdateTplDocumentTemplate error : %s", err.Error())
			return nil, err
		}
		return nil, errors.New("当前语言的模板已存在，无法重复创建")
	}

	t := orm.Use(iotmodel.GetDB()).TTplDocumentTemplate
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.TplCode != "" { //字符串
		updateField = append(updateField, t.TplCode)
	}
	if req.TplName != "" { //字符串
		updateField = append(updateField, t.TplName)
	}
	if req.TplContent != "" { //字符串
		updateField = append(updateField, t.TplContent)
	}
	if req.TplParams != "" { //字符串
		updateField = append(updateField, t.TplParams)
	}
	if req.Lang != "" { //字符串
		updateField = append(updateField, t.Lang)
	}
	if req.TplType != "" { //字符串
		updateField = append(updateField, t.TplType)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateTplDocumentTemplate error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.TplDocumentTemplate_pb2db(req)
	info, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateTplDocumentTemplate error : %s", err.Error())
		return nil, err
	}
	if info.Error != nil {
		logger.Errorf("UpdateTplDocumentTemplate update : %s", info.Error.Error())
		return nil, err
	}
	//影响行数如果为0，则标识为修改成功
	if info.RowsAffected == 0 {
		return nil, errors.New("未修改到任何数据")
	}
	return req, err
}

// //根据主键更新所有字段TplDocumentTemplate
func (s *TplDocumentTemplateSvc) UpdateAllTplDocumentTemplate(req *proto.TplDocumentTemplate) (*proto.TplDocumentTemplate, error) {
	if req.TplType == "" || req.TplType == "0" {
		return nil, errors.New("模板类型不能为空")
	}
	if req.Lang == "" {
		return nil, errors.New("模板语言不能为空")
	}
	if req.TplName == "" {
		return nil, errors.New("模板名称不能为空")
	}
	//判断名称是否重复
	if isExists, err := s.existsByNameAndLang(req.TplType, req.Lang, req.Id); isExists {
		if err != nil {
			logger.Errorf("UpdateAllTplDocumentTemplate error : %s", err.Error())
			return nil, err
		}
		return nil, errors.New("当前语言的模板已存在，无法重复创建")
	}
	t := orm.Use(iotmodel.GetDB()).TTplDocumentTemplate
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.TplCode)
	updateField = append(updateField, t.TplName)
	updateField = append(updateField, t.TplContent)
	updateField = append(updateField, t.TplParams)
	updateField = append(updateField, t.Lang)
	updateField = append(updateField, t.TplType)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllTplDocumentTemplate error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.TplDocumentTemplate_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllTplDocumentTemplate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *TplDocumentTemplateSvc) UpdateFieldsTplDocumentTemplate(req *proto.TplDocumentTemplateUpdateFieldsRequest) (*proto.TplDocumentTemplate, error) {
	t := orm.Use(iotmodel.GetDB()).TTplDocumentTemplate
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsTplDocumentTemplate error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsTplDocumentTemplate error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.TplDocumentTemplate_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsTplDocumentTemplate error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找TplDocumentTemplate
func (s *TplDocumentTemplateSvc) FindTplDocumentTemplate(req *proto.TplDocumentTemplateFilter) (*proto.TplDocumentTemplate, error) {
	t := orm.Use(iotmodel.GetDB()).TTplDocumentTemplate
	do := t.WithContext(context.Background())

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TplCode != "" { //字符串
		do = do.Where(t.TplCode.Eq(req.TplCode))
	}
	if req.TplName != "" { //字符串
		do = do.Where(t.TplName.Eq(req.TplName))
	}
	if req.TplContent != "" { //字符串
		do = do.Where(t.TplContent.Like("%" + req.TplContent + "%"))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.TplType != "" { //字符串
		do = do.Where(t.TplType.Eq(req.TplType))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindTplDocumentTemplate error : %s", err.Error())
		return nil, err
	}
	res := convert.TplDocumentTemplate_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找TplDocumentTemplate
func (s *TplDocumentTemplateSvc) FindByIdTplDocumentTemplate(req *proto.TplDocumentTemplateFilter) (*proto.TplDocumentTemplate, error) {
	t := orm.Use(iotmodel.GetDB()).TTplDocumentTemplate
	do := t.WithContext(context.Background())
	if req.Id == 0 {
		return nil, errors.New("模板编号不能为空")
	}
	do = do.Where(t.Id.Eq(req.Id))
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdTplDocumentTemplate error : %s", err.Error())
		return nil, err
	}
	res := convert.TplDocumentTemplate_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找TplDocumentTemplate,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *TplDocumentTemplateSvc) GetListTplDocumentTemplate(req *proto.TplDocumentTemplateListRequest) ([]*proto.TplDocumentTemplate, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TTplDocumentTemplate
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.TplCode != "" { //字符串
			do = do.Where(t.TplCode.Eq(query.TplCode))
		}
		if query.TplName != "" { //字符串
			do = do.Where(t.TplName.Like("%" + query.TplName + "%"))
		}
		if query.TplContent != "" { //字符串
			do = do.Where(t.TplContent.Like("%" + query.TplContent + "%"))
		}
		if query.Lang != "" { //字符串
			do = do.Where(t.Lang.Eq(query.Lang))
		}
		if query.TplType != "" { //字符串
			do = do.Where(t.TplType.Eq(query.TplType))
		}
		if query.Status >= 0 {
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.CreatedAt.Desc())
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*model.TTplDocumentTemplate
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListTplDocumentTemplate error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.TplDocumentTemplate, len(list))
	for i, v := range list {
		result[i] = convert.TplDocumentTemplate_db2pb(v)
	}
	return result, total, nil
}

// 新增和修改的时候判断是否重复
func (s *TplDocumentTemplateSvc) existsByNameAndLang(tplType string, lang string, id int64) (bool, error) {
	t := orm.Use(iotmodel.GetDB()).TTplDocumentTemplate
	do := t.WithContext(context.Background())
	do = do.Where(t.TplType.Eq(tplType), t.Lang.Eq(lang))

	//编辑的时候验证名称是否重复
	if id != 0 {
		do = do.Where(t.Id.Neq(id))
	}
	count, err := do.Count()
	if err != nil {
		return true, err
	}

	return count > 0, err
}
