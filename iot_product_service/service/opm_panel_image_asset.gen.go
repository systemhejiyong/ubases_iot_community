// Code generated by sgen,2023-09-26 13:54:18. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmPanelImageAssetSvc struct {
	Ctx context.Context
}

//创建OpmPanelImageAsset
func (s *OpmPanelImageAssetSvc) CreateOpmPanelImageAsset(req *proto.OpmPanelImageAsset) (*proto.OpmPanelImageAsset, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOpmPanelImageAsset
	do := t.WithContext(context.Background())
	dbObj := convert.OpmPanelImageAsset_pb2db(req)
	dbObj.Id = iotutil.GetNextSeqInt64()
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmPanelImageAsset error : %s", err.Error())
		return nil, err
	}
	req.Id = dbObj.Id
	return req, err
}

//根据条件删除OpmPanelImageAsset
func (s *OpmPanelImageAssetSvc) DeleteOpmPanelImageAsset(req *proto.OpmPanelImageAsset) (*proto.OpmPanelImageAsset, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelImageAsset
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Resolution != "" { //字符串
		do = do.Where(t.Resolution.Eq(req.Resolution))
	}
	if req.AssetFormat != "" { //字符串
		do = do.Where(t.AssetFormat.Eq(req.AssetFormat))
	}
	if req.Size != 0 { //整数
		do = do.Where(t.Size.Eq(req.Size))
	}
	if req.AssetType != 0 { //整数
		do = do.Where(t.AssetType.Eq(req.AssetType))
	}
	if req.Builtin != 0 { //整数
		do = do.Where(t.Builtin.Eq(req.Builtin))
	}
	if req.IconType != 0 { //整数
		do = do.Where(t.IconType.Eq(req.IconType))
	}
	if req.IconSubType != 0 { //整数
		do = do.Where(t.IconSubType.Eq(req.IconSubType))
	}
	if req.AssetName != "" { //字符串
		do = do.Where(t.AssetName.Eq(req.AssetName))
	}
	if req.Thumbnail != "" { //字符串
		do = do.Where(t.Thumbnail.Eq(req.Thumbnail))
	}
	if req.AssetUrl != "" { //字符串
		do = do.Where(t.AssetUrl.Eq(req.AssetUrl))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmPanelImageAsset error : %s", err.Error())
		return nil, err
	}
	return req, err
}

//根据数据库表主键删除OpmPanelImageAsset
func (s *OpmPanelImageAssetSvc) DeleteByIdOpmPanelImageAsset(req *proto.OpmPanelImageAsset) (*proto.OpmPanelImageAsset, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelImageAsset
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmPanelImageAsset error : %s", err.Error())
		return nil, err
	}
	return req, err
}

//根据数据库表主键批量删除OpmPanelImageAsset
func (s *OpmPanelImageAssetSvc) DeleteByIdsOpmPanelImageAsset(req *proto.OpmPanelImageAssetBatchDeleteRequest) (*proto.OpmPanelImageAssetBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmPanelImageAsset
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmPanelImageAsset error : %s", err.Error())
			break
		}
	}
	return req, err
}

//根据主键更新OpmPanelImageAsset
func (s *OpmPanelImageAssetSvc) UpdateOpmPanelImageAsset(req *proto.OpmPanelImageAsset) (*proto.OpmPanelImageAsset, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelImageAsset
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Resolution != "" { //字符串
		updateField = append(updateField, t.Resolution)
	}
	if req.AssetFormat != "" { //字符串
		updateField = append(updateField, t.AssetFormat)
	}
	if req.Size != 0 { //整数
		updateField = append(updateField, t.Size)
	}
	if req.AssetType != 0 { //整数
		updateField = append(updateField, t.AssetType)
	}
	if req.Builtin != 0 { //整数
		updateField = append(updateField, t.Builtin)
	}
	if req.IconType != 0 { //整数
		updateField = append(updateField, t.IconType)
	}
	if req.IconSubType != 0 { //整数
		updateField = append(updateField, t.IconSubType)
	}
	if req.AssetName != "" { //字符串
		updateField = append(updateField, t.AssetName)
	}
	if req.Thumbnail != "" { //字符串
		updateField = append(updateField, t.Thumbnail)
	}
	if req.AssetUrl != "" { //字符串
		updateField = append(updateField, t.AssetUrl)
	}
	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.TenantId)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmPanelImageAsset error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmPanelImageAsset_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmPanelImageAsset error : %s", err.Error())
		return nil, err
	}
	return req, err
}

////根据主键更新所有字段OpmPanelImageAsset
func (s *OpmPanelImageAssetSvc) UpdateAllOpmPanelImageAsset(req *proto.OpmPanelImageAsset) (*proto.OpmPanelImageAsset, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelImageAsset
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Resolution)
	updateField = append(updateField, t.AssetFormat)
	updateField = append(updateField, t.Size)
	updateField = append(updateField, t.AssetType)
	updateField = append(updateField, t.Builtin)
	updateField = append(updateField, t.IconType)
	updateField = append(updateField, t.IconSubType)
	updateField = append(updateField, t.AssetName)
	updateField = append(updateField, t.Thumbnail)
	updateField = append(updateField, t.AssetUrl)
	updateField = append(updateField, t.TenantId)
	updateField = append(updateField, t.CreatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmPanelImageAsset error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmPanelImageAsset_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmPanelImageAsset error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmPanelImageAssetSvc) UpdateFieldsOpmPanelImageAsset(req *proto.OpmPanelImageAssetUpdateFieldsRequest) (*proto.OpmPanelImageAsset, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelImageAsset
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmPanelImageAsset error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmPanelImageAsset error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmPanelImageAsset_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmPanelImageAsset error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

//根据非空条件查找OpmPanelImageAsset
func (s *OpmPanelImageAssetSvc) FindOpmPanelImageAsset(req *proto.OpmPanelImageAssetFilter) (*proto.OpmPanelImageAsset, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelImageAsset
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Resolution != "" { //字符串
		do = do.Where(t.Resolution.Eq(req.Resolution))
	}
	if req.AssetFormat != "" { //字符串
		do = do.Where(t.AssetFormat.Eq(req.AssetFormat))
	}
	if req.Size != 0 { //整数
		do = do.Where(t.Size.Eq(req.Size))
	}
	if req.AssetType != 0 { //整数
		do = do.Where(t.AssetType.Eq(req.AssetType))
	}
	if req.Builtin != 0 { //整数
		do = do.Where(t.Builtin.Eq(req.Builtin))
	}
	if req.IconType != 0 { //整数
		do = do.Where(t.IconType.Eq(req.IconType))
	}
	if req.IconSubType != 0 { //整数
		do = do.Where(t.IconSubType.Eq(req.IconSubType))
	}
	if req.AssetName != "" { //字符串
		do = do.Where(t.AssetName.Eq(req.AssetName))
	}
	if req.Thumbnail != "" { //字符串
		do = do.Where(t.Thumbnail.Eq(req.Thumbnail))
	}
	if req.AssetUrl != "" { //字符串
		do = do.Where(t.AssetUrl.Eq(req.AssetUrl))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmPanelImageAsset error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmPanelImageAsset_db2pb(dbObj)
	return res, err
}

//根据数据库表主键查找OpmPanelImageAsset
func (s *OpmPanelImageAssetSvc) FindByIdOpmPanelImageAsset(req *proto.OpmPanelImageAssetFilter) (*proto.OpmPanelImageAsset, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelImageAsset
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmPanelImageAsset error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmPanelImageAsset_db2pb(dbObj)
	return res, err
}

//根据分页条件查找OpmPanelImageAsset,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmPanelImageAssetSvc) GetListOpmPanelImageAsset(req *proto.OpmPanelImageAssetListRequest) ([]*proto.OpmPanelImageAsset, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpmPanelImageAsset
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Resolution != "" { //字符串
			do = do.Where(t.Resolution.Like("%" + query.Resolution + "%"))
		}
		if query.AssetFormat != "" { //字符串
			do = do.Where(t.AssetFormat.Like("%" + query.AssetFormat + "%"))
		}
		if query.Size != 0 { //整数
			do = do.Where(t.Size.Eq(query.Size))
		}
		if query.AssetType != 0 { //整数
			do = do.Where(t.AssetType.Eq(query.AssetType))
		}
		if query.Builtin != 0 { //整数
			do = do.Where(t.Builtin.Eq(query.Builtin))
		}
		if query.IconType != 0 { //整数
			do = do.Where(t.IconType.Eq(query.IconType))
		}
		if query.IconSubType != 0 { //整数
			do = do.Where(t.IconSubType.Eq(query.IconSubType))
		}
		if query.AssetName != "" { //字符串
			do = do.Where(t.AssetName.Like("%" + query.AssetName + "%"))
		}
		if query.Thumbnail != "" { //字符串
			do = do.Where(t.Thumbnail.Like("%" + query.Thumbnail + "%"))
		}
		if query.AssetUrl != "" { //字符串
			do = do.Where(t.AssetUrl.Like("%" + query.AssetUrl + "%"))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Like("%" + query.TenantId + "%")).Or(t.TenantId.Eq(""))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOpmPanelImageAsset
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmPanelImageAsset error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmPanelImageAsset, len(list))
	for i, v := range list {
		result[i] = convert.OpmPanelImageAsset_db2pb(v)
	}
	return result, total, nil
}
