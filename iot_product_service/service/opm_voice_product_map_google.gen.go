// Code generated by sgen,2023-05-30 11:01:33. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

/*
import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmVoiceProductMapGoogleSvc struct {
	Ctx context.Context
}

//创建OpmVoiceProductMapGoogle
func (s *OpmVoiceProductMapGoogleSvc) CreateOpmVoiceProductMapGoogle(req *proto.OpmVoiceProductMapGoogle) (*proto.OpmVoiceProductMapGoogle, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMapGoogle
	do := t.WithContext(context.Background())
	dbObj := convert.OpmVoiceProductMapGoogle_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmVoiceProductMapGoogle error : %s", err.Error())
		return nil, err
	}
	return req, err
}

//根据条件删除OpmVoiceProductMapGoogle
func (s *OpmVoiceProductMapGoogleSvc) DeleteOpmVoiceProductMapGoogle(req *proto.OpmVoiceProductMapGoogle) (*proto.OpmVoiceProductMapGoogle, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMapGoogle
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.VoiceCode != "" { //字符串
		do = do.Where(t.VoiceCode.Eq(req.VoiceCode))
	}
	if req.VoiceSynonym != "" { //字符串
		do = do.Where(t.VoiceSynonym.Eq(req.VoiceSynonym))
	}
	if req.Trait != "" { //字符串
		do = do.Where(t.Trait.Eq(req.Trait))
	}
	if req.Command != "" { //字符串
		do = do.Where(t.Command.Eq(req.Command))
	}
	if req.VoiceDemo != "" { //字符串
		do = do.Where(t.VoiceDemo.Eq(req.VoiceDemo))
	}
	if req.ValueMap != "" { //字符串
		do = do.Where(t.ValueMap.Eq(req.ValueMap))
	}
	if req.DataType != "" { //字符串
		do = do.Where(t.DataType.Eq(req.DataType))
	}
	if req.VDataType != "" { //字符串
		do = do.Where(t.VDataType.Eq(req.VDataType))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmVoiceProductMapGoogle error : %s", err.Error())
		return nil, err
	}
	return req, err
}

//根据数据库表主键删除OpmVoiceProductMapGoogle
func (s *OpmVoiceProductMapGoogleSvc) DeleteByIdOpmVoiceProductMapGoogle(req *proto.OpmVoiceProductMapGoogle) (*proto.OpmVoiceProductMapGoogle, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMapGoogle
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmVoiceProductMapGoogle error : %s", err.Error())
		return nil, err
	}
	return req, err
}

//根据数据库表主键批量删除OpmVoiceProductMapGoogle
func (s *OpmVoiceProductMapGoogleSvc) DeleteByIdsOpmVoiceProductMapGoogle(req *proto.OpmVoiceProductMapGoogleBatchDeleteRequest) (*proto.OpmVoiceProductMapGoogleBatchDeleteRequest, error) {
	//var err error
	//for _, k := range req.Keys {
	//	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMapGoogle
	//	do := t.WithContext(context.Background())
	//
	//	_, err = do.Delete()
	//	if err != nil {
	//		logger.Errorf("DeleteByIdsOpmVoiceProductMapGoogle error : %s", err.Error())
	//		break
	//	}
	//}
	return nil, errors.New("not supported")
}

//根据主键更新OpmVoiceProductMapGoogle
func (s *OpmVoiceProductMapGoogleSvc) UpdateOpmVoiceProductMapGoogle(req *proto.OpmVoiceProductMapGoogle) (*proto.OpmVoiceProductMapGoogle, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMapGoogle
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Id != 0 { //整数
		updateField = append(updateField, t.Id)
	}
	if req.VoiceCode != "" { //字符串
		updateField = append(updateField, t.VoiceCode)
	}
	if req.VoiceSynonym != "" { //字符串
		updateField = append(updateField, t.VoiceSynonym)
	}
	if req.Trait != "" { //字符串
		updateField = append(updateField, t.Trait)
	}
	if req.Command != "" { //字符串
		updateField = append(updateField, t.Command)
	}
	if req.VoiceDemo != "" { //字符串
		updateField = append(updateField, t.VoiceDemo)
	}
	if req.ValueMap != "" { //字符串
		updateField = append(updateField, t.ValueMap)
	}
	if req.DataType != "" { //字符串
		updateField = append(updateField, t.DataType)
	}
	if req.VDataType != "" { //字符串
		updateField = append(updateField, t.VDataType)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if !HasPrimaryKey {
		logger.Error("UpdateOpmVoiceProductMapGoogle error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmVoiceProductMapGoogle_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmVoiceProductMapGoogle error : %s", err.Error())
		return nil, err
	}
	return req, err
}

////根据主键更新所有字段OpmVoiceProductMapGoogle
func (s *OpmVoiceProductMapGoogleSvc) UpdateAllOpmVoiceProductMapGoogle(req *proto.OpmVoiceProductMapGoogle) (*proto.OpmVoiceProductMapGoogle, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMapGoogle
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Id)
	updateField = append(updateField, t.VoiceCode)
	updateField = append(updateField, t.VoiceSynonym)
	updateField = append(updateField, t.Trait)
	updateField = append(updateField, t.Command)
	updateField = append(updateField, t.VoiceDemo)
	updateField = append(updateField, t.ValueMap)
	updateField = append(updateField, t.DataType)
	updateField = append(updateField, t.VDataType)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmVoiceProductMapGoogle error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmVoiceProductMapGoogle_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmVoiceProductMapGoogle error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmVoiceProductMapGoogleSvc) UpdateFieldsOpmVoiceProductMapGoogle(req *proto.OpmVoiceProductMapGoogleUpdateFieldsRequest) (*proto.OpmVoiceProductMapGoogle, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMapGoogle
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmVoiceProductMapGoogle error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmVoiceProductMapGoogle error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmVoiceProductMapGoogle_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmVoiceProductMapGoogle error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

//根据非空条件查找OpmVoiceProductMapGoogle
func (s *OpmVoiceProductMapGoogleSvc) FindOpmVoiceProductMapGoogle(req *proto.OpmVoiceProductMapGoogleFilter) (*proto.OpmVoiceProductMapGoogle, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMapGoogle
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.VoiceCode != "" { //字符串
		do = do.Where(t.VoiceCode.Eq(req.VoiceCode))
	}
	if req.VoiceSynonym != "" { //字符串
		do = do.Where(t.VoiceSynonym.Eq(req.VoiceSynonym))
	}
	if req.Trait != "" { //字符串
		do = do.Where(t.Trait.Eq(req.Trait))
	}
	if req.Command != "" { //字符串
		do = do.Where(t.Command.Eq(req.Command))
	}
	if req.VoiceDemo != "" { //字符串
		do = do.Where(t.VoiceDemo.Eq(req.VoiceDemo))
	}
	if req.ValueMap != "" { //字符串
		do = do.Where(t.ValueMap.Eq(req.ValueMap))
	}
	if req.DataType != "" { //字符串
		do = do.Where(t.DataType.Eq(req.DataType))
	}
	if req.VDataType != "" { //字符串
		do = do.Where(t.VDataType.Eq(req.VDataType))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmVoiceProductMapGoogle error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmVoiceProductMapGoogle_db2pb(dbObj)
	return res, err
}

//根据数据库表主键查找OpmVoiceProductMapGoogle
func (s *OpmVoiceProductMapGoogleSvc) FindByIdOpmVoiceProductMapGoogle(req *proto.OpmVoiceProductMapGoogleFilter) (*proto.OpmVoiceProductMapGoogle, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMapGoogle
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmVoiceProductMapGoogle error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmVoiceProductMapGoogle_db2pb(dbObj)
	return res, err
}

//根据分页条件查找OpmVoiceProductMapGoogle,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmVoiceProductMapGoogleSvc) GetListOpmVoiceProductMapGoogle(req *proto.OpmVoiceProductMapGoogleListRequest) ([]*proto.OpmVoiceProductMapGoogle, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMapGoogle
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.VoiceCode != "" { //字符串
			do = do.Where(t.VoiceCode.Like("%" + query.VoiceCode + "%"))
		}
		if query.VoiceSynonym != "" { //字符串
			do = do.Where(t.VoiceSynonym.Like("%" + query.VoiceSynonym + "%"))
		}
		if query.Trait != "" { //字符串
			do = do.Where(t.Trait.Like("%" + query.Trait + "%"))
		}
		if query.Command != "" { //字符串
			do = do.Where(t.Command.Like("%" + query.Command + "%"))
		}
		if query.VoiceDemo != "" { //字符串
			do = do.Where(t.VoiceDemo.Like("%" + query.VoiceDemo + "%"))
		}
		if query.ValueMap != "" { //字符串
			do = do.Where(t.ValueMap.Like("%" + query.ValueMap + "%"))
		}
		if query.DataType != "" { //字符串
			do = do.Where(t.DataType.Like("%" + query.DataType + "%"))
		}
		if query.VDataType != "" { //字符串
			do = do.Where(t.VDataType.Like("%" + query.VDataType + "%"))
		}
	}
	//orderCol, ok := t.GetFieldByName(req.OrderKey)
	//if !ok {
	//}
	//if req.OrderDesc != "" {
	//	do = do.Order(orderCol.Desc())
	//} else {
	//	do = do.Order(orderCol)
	//}

	var list []*model.TOpmVoiceProductMapGoogle
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmVoiceProductMapGoogle error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmVoiceProductMapGoogle, len(list))
	for i, v := range list {
		result[i] = convert.OpmVoiceProductMapGoogle_db2pb(v)
	}
	return result, total, nil
}
*/
