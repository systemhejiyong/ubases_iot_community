// Code generated by sgen,2023-07-10 11:45:48. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"
	"fmt"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmThingModelRuleSvc struct {
	Ctx context.Context
}

// 创建OpmThingModelRule
func (s *OpmThingModelRuleSvc) CreateOpmThingModelRule(req *proto.OpmThingModelRule) (*proto.OpmThingModelRule, error) {
	isRepeat, err := s.repeatCheck(0, req.ProductId, req.IfSpecs, req.DataOrigin)
	if err != nil {
		return nil, err
	}
	if isRepeat {
		return nil, errors.New("规则配置重复")
	}
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOpmThingModelRule
	do := t.WithContext(context.Background())

	dbObj := convert.OpmThingModelRule_pb2db(req)
	//dbObj.Id = iotutil.GetNextSeqInt64()
	err = do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmThingModelRule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OpmThingModelRule
func (s *OpmThingModelRuleSvc) DeleteOpmThingModelRule(req *proto.OpmThingModelRule) (*proto.OpmThingModelRule, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmThingModelRule
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != "" { //字符串
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.RuleName != "" { //字符串
		do = do.Where(t.RuleName.Eq(req.RuleName))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.IfSpecs != "" { //字符串
		do = do.Where(t.IfSpecs.Eq(req.IfSpecs))
	}
	if req.ThatSpecs != "" { //字符串
		do = do.Where(t.ThatSpecs.Eq(req.ThatSpecs))
	}
	if req.Desc != "" { //字符串
		do = do.Where(t.Desc.Eq(req.Desc))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmThingModelRule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpmThingModelRule
func (s *OpmThingModelRuleSvc) DeleteByIdOpmThingModelRule(req *proto.OpmThingModelRule) (*proto.OpmThingModelRule, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmThingModelRule
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmThingModelRule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpmThingModelRule
func (s *OpmThingModelRuleSvc) DeleteByIdsOpmThingModelRule(req *proto.OpmThingModelRuleBatchDeleteRequest) (*proto.OpmThingModelRuleBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmThingModelRule
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmThingModelRule error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpmThingModelRule
func (s *OpmThingModelRuleSvc) UpdateOpmThingModelRule(req *proto.OpmThingModelRule) (*proto.OpmThingModelRule, error) {
	isRepeat, err := s.repeatCheck(req.Id, req.ProductId, req.IfSpecs, req.DataOrigin)
	if err != nil {
		return nil, err
	}
	if isRepeat {
		return nil, errors.New("规则配置重复")
	}

	t := orm.Use(iotmodel.GetDB()).TOpmThingModelRule
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.ProductId != "" { //字符串
		updateField = append(updateField, t.ProductId)
	}
	if req.ProductKey != "" { //字符串
		updateField = append(updateField, t.ProductKey)
	}
	if req.RuleName != "" { //字符串
		updateField = append(updateField, t.RuleName)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.IfSpecs != "" { //字符串
		updateField = append(updateField, t.IfSpecs)
	}
	if req.ThatSpecs != "" { //字符串
		updateField = append(updateField, t.ThatSpecs)
	}
	if req.Desc != "" { //字符串
		updateField = append(updateField, t.Desc)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}

	if req.DataOrigin != 0 { //整数
		updateField = append(updateField, t.DataOrigin)
	}
	if req.ConditionType != 0 { //整数
		updateField = append(updateField, t.ConditionType)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmThingModelRule error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmThingModelRule_pb2db(req)
	_, err = do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmThingModelRule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpmThingModelRule
func (s *OpmThingModelRuleSvc) UpdateAllOpmThingModelRule(req *proto.OpmThingModelRule) (*proto.OpmThingModelRule, error) {
	isRepeat, err := s.repeatCheck(req.Id, req.ProductId, req.IfSpecs, req.DataOrigin)
	if err != nil {
		return nil, err
	}
	if isRepeat {
		return nil, errors.New("规则配置重复")
	}

	t := orm.Use(iotmodel.GetDB()).TOpmThingModelRule
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.ProductId)
	updateField = append(updateField, t.ProductKey)
	updateField = append(updateField, t.RuleName)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.IfSpecs)
	updateField = append(updateField, t.ThatSpecs)
	updateField = append(updateField, t.Desc)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	updateField = append(updateField, t.DataOrigin)
	updateField = append(updateField, t.ConditionType)

	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmThingModelRule error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmThingModelRule_pb2db(req)
	_, err = do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmThingModelRule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmThingModelRuleSvc) UpdateFieldsOpmThingModelRule(req *proto.OpmThingModelRuleUpdateFieldsRequest) (*proto.OpmThingModelRule, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmThingModelRule
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmThingModelRule error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmThingModelRule error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmThingModelRule_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmThingModelRule error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmThingModelRule
func (s *OpmThingModelRuleSvc) FindOpmThingModelRule(req *proto.OpmThingModelRuleFilter) (*proto.OpmThingModelRule, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmThingModelRule
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != "" { //字符串
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.ProductId != "" { //字符串
		do = do.Where(t.ProductId.Eq(req.ProductKey))
	}
	if req.RuleName != "" { //字符串
		do = do.Where(t.RuleName.Eq(req.RuleName))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.IfSpecs != "" { //字符串
		do = do.Where(t.IfSpecs.Eq(req.IfSpecs))
	}
	if req.ThatSpecs != "" { //字符串
		do = do.Where(t.ThatSpecs.Eq(req.ThatSpecs))
	}
	if req.Desc != "" { //字符串
		do = do.Where(t.Desc.Eq(req.Desc))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmThingModelRule error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmThingModelRule_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpmThingModelRule
func (s *OpmThingModelRuleSvc) FindByIdOpmThingModelRule(req *proto.OpmThingModelRuleFilter) (*proto.OpmThingModelRule, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmThingModelRule
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmThingModelRule error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmThingModelRule_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OpmThingModelRule,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmThingModelRuleSvc) GetListOpmThingModelRule(req *proto.OpmThingModelRuleListRequest) ([]*proto.OpmThingModelRule, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpmThingModelRule
	do := t.WithContext(context.Background())
	query := req.Query
	if query == nil {
		return nil, 0, errors.New("参数错误")
	}
	//必须来源参数
	do = do.Where(t.DataOrigin.Eq(query.DataOrigin))
	if query.Id != 0 { //整数
		do = do.Where(t.Id.Eq(query.Id))
	}
	if query.ProductId != "" { //字符串
		do = do.Where(t.ProductId.Eq(query.ProductId))
	}
	if query.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(query.ProductKey))
	}
	if query.RuleName != "" { //字符串
		do = do.Where(t.RuleName.Like("%" + query.RuleName + "%"))
	}
	if query.Status != 0 { //整数
		do = do.Where(t.Status.Eq(query.Status))
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOpmThingModelRule
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmThingModelRule error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmThingModelRule, len(list))
	for i, v := range list {
		result[i] = convert.OpmThingModelRule_db2pb(v)
	}
	return result, total, nil
}

// UpdateStatus修改状态
func (s *OpmThingModelRuleSvc) UpdateStatus(req *proto.OpmThingModelRule) error {
	t := orm.Use(iotmodel.GetDB()).TOpmThingModelRule
	do := t.WithContext(context.Background())
	updateObj := model.TOpmThingModelRule{
		Id:     req.Id,
		Status: req.Status,
	}
	_, err := do.Select(t.Status).Where(t.Id.Eq(req.Id)).Updates(updateObj)
	if err != nil {
		logger.Errorf("UpdateStatus error : %s", err.Error())
		return err
	}
	return err
}

type ThingModelRuleItem struct {
	DpId    int64       `json:"dpId"`
	Operate int32       `json:"operate"`
	Value   interface{} `json:"value"`
}

// 检查重复
func (s OpmThingModelRuleSvc) repeatCheck(id int64, productId string, ifSpecs string, dataOrigin int32) (bool, error) {
	var (
		err      error
		inIfSpec []ThingModelRuleItem
	)
	if ifSpecs == "" {
		return false, nil
	}
	err = iotutil.JsonToStruct(ifSpecs, &inIfSpec)
	if err != nil {
		return false, err
	}
	if len(inIfSpec) == 0 {
		return false, nil
	}
	dpId := inIfSpec[0].DpId
	value := inIfSpec[0].Value

	t := orm.Use(iotmodel.GetDB()).TOpmThingModelRule
	do := t.WithContext(context.Background())

	do = do.Where(t.ProductId.Eq(productId), t.DataOrigin.Eq(dataOrigin))
	if id != 0 {
		do = do.Where(t.Id.Neq(id))
	}
	list, err := do.Find()
	if err != nil {
		return false, err
	}

	var repeatMap map[string]bool = make(map[string]bool, 0)
	for _, rule := range list {
		var ifSpec []ThingModelRuleItem
		err = iotutil.JsonToStruct(rule.IfSpecs, &ifSpec)
		if err != nil {
			continue
		}
		for _, spec := range ifSpec {
			repeatMap[fmt.Sprintf("%v_%v", spec.DpId, spec.Value)] = true
		}
	}
	if _, ok := repeatMap[fmt.Sprintf("%v_%v", dpId, value)]; ok {
		return true, nil
	}
	return false, nil
}
