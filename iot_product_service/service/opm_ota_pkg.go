// Code generated by sgen.exe,2022-05-13 13:53:10. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	"cloud_platform/iot_product_service/rpc/rpcClient"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmOtaPkgSvc struct {
	Ctx context.Context
}

type TempFirmwareInfo struct {
	FilePath string `gorm:"column:filePath" json:"filePath"` // 固件SDK版本文件
	FileKey  string `gorm:"column:fileKey" json:"fileKey"`   // 固件SDK版本MD5值
	Overtime int32  `gorm:"column:overtime" json:"overtime"` // 升级超时时间（秒）
}

// 创建OpmOtaPkg
func (s *OpmOtaPkgSvc) SetPublish(req *proto.SetOtaPublishRequest) error {
	var err error
	_, err = CheckTenantId(s.Ctx)
	if err != nil {
		return err
	}
	q := orm.Use(iotmodel.GetDB())
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TOpmOtaPkg
		tPublish := tx.TOpmOtaPublish
		//tPublishLog := tx.TOpmOtaPublishLog

		do := t.WithContext(context.Background())
		doPublish := tPublish.WithContext(context.Background())
		//doPublishLog := tPublishLog.WithContext(context.Background())

		//维护ota发布记录
		// 发布和恢复发布
		// 暂停发布
		if req.Publish.Status == iotconst.STATUS_RELEASE {
			var otaPkgId int64 = 0
			if req.OtaPkgId == 0 {
				if req.Publish.Id == 0 {
					return errors.New("发布编号参数异常")
				}
				publisInfo, err := doPublish.Where(tPublish.Id.Eq(req.Publish.Id)).First()
				if err == nil {
					return err
				}
				otaPkgId = publisInfo.PkgId
			} else {
				otaPkgId = req.OtaPkgId
			}
			otaPkgData, err := do.Where(t.Id.Eq(otaPkgId)).Find()
			if err != nil {
				return err
			}
			otaPkgInfo := otaPkgData[0]
			var (
				firmwareUrl           = ""
				firmwareMd5           = ""
				firmwareKey           = ""
				upgradeOvertime int32 = 0
			)
			var versionInfo TempFirmwareInfo
			if otaPkgInfo.IsCustomFirmware == 1 {
				opmFv, opmF := tx.TOpmFirmwareVersion, tx.TOpmFirmware
				err := opmFv.WithContext(context.Background()).
					Join(opmF, opmF.Id.EqCol(opmFv.FirmwareId)).
					Select(opmFv.UpgradeFilePath.As("filePath"), opmFv.UpgradeFileKey.As("fileKey"), opmF.UpgradeOvertime.As("overtime")).
					Where(opmFv.Id.Eq(otaPkgInfo.VersionId)).Scan(&versionInfo)
				if err != nil {
					return err
				}
				firmwareUrl = versionInfo.FilePath
				firmwareMd5 = versionInfo.FileKey
				upgradeOvertime = versionInfo.Overtime
			} else {
				pmFv, pmF := tx.TPmFirmwareVersion, tx.TPmFirmware
				err := pmFv.WithContext(context.Background()).
					Join(pmF, pmF.Id.EqCol(pmFv.FirmwareId)).
					Select(pmFv.FilePath.As("filePath"), pmFv.FileKey.As("fileKey"), pmF.UpgradeOvertime.As("overtime")).
					Where(pmFv.Id.Eq(otaPkgInfo.VersionId)).Scan(&versionInfo)
				if err != nil {
					return err
				}
				firmwareUrl = versionInfo.FilePath
				firmwareMd5 = versionInfo.FileKey
				upgradeOvertime = versionInfo.Overtime
			}

			//修改otapkg的状态
			_, err = do.Where(t.Id.Eq(otaPkgId)).Update(t.Status, req.Publish.Status)
			if err != nil {
				return err
			}
			savePublish := convert.OpmOtaPublish_pb2db(req.Publish)
			if savePublish.Id == 0 {
				savePublish.Id = iotutil.GetNextSeqInt64()
			}
			savePublish.PublishAt = time.Now()
			err = doPublish.Save(savePublish)
			if err != nil {
				return err
			}

			upgradeRecordRes, err := rpcClient.ClientUpgradeRecordService.GenerateUpgradeDevice(context.Background(), &proto.GenerateUpgradeDeviceRequest{
				PublishId:            savePublish.Id,
				IsGray:               req.Publish.IsGray,    //是否灰度发布  =1 全量发布  =2 灰度发布
				GrayType:             req.Publish.GrayType,  //发布模式  =1 按比例灰度 =2 按数量灰度
				GrayScale:            req.Publish.GrayScale, //发布比例值，数量值
				TenantId:             req.Publish.TenantId,
				IsAuto:               req.Publish.IsAuto,
				AutoStartAt:          req.Publish.AutoStartAt,
				AutoEndAt:            req.Publish.AutoEndAt,
				SpecifiedVersionMode: req.Publish.SpecifiedVersionMode,
				SpecifiedVersion:     req.Publish.SpecifiedVersion,
				SpecifiedAreaMode:    req.Publish.SpecifiedAreaMode,
				SpecifiedArea:        req.Publish.SpecifiedArea,
				VersionId:            req.Publish.VersionId,
				Version:              req.Publish.Version,
				UpgradeMode:          req.Publish.UpgradeMode,
				ProductKey:           req.Publish.ProductKey,
				FirmwareType:         otaPkgInfo.FirmwareType,
				FirmwareUrl:          firmwareUrl,
				FirmwareMd5:          firmwareMd5,
				FirmwareKey:          firmwareKey,
				UpgradeOvertime:      upgradeOvertime,
				DeviceIds:            req.Publish.DeviceIds,
			})
			if err != nil {
				return err
			}
			if upgradeRecordRes.Code != 200 {
				return errors.New(upgradeRecordRes.Message)
			}
		} else if req.Publish.Status == iotconst.STATUS_RELEASE_STOP {
			publisInfos, err := doPublish.Where(tPublish.PkgId.Eq(req.Publish.Id)).Order(tPublish.PublishAt.Desc()).Find()
			if err != nil {
				return err
			}
			if len(publisInfos) == 0 {
				return errors.New("未找到发布版本信息")
			}
			publisInfo := publisInfos[0]
			//修改otapkg的状态
			_, err = do.Where(t.Id.Eq(publisInfo.PkgId)).Update(t.Status, req.Publish.Status)
			if err != nil {
				return err
			}
			_, err = doPublish.Where(tPublish.PkgId.Eq(req.Publish.Id)).Update(tPublish.Status, iotconst.STATUS_RELEASE_STOP)
			if err != nil {
				return err
			}

			/*upgradeStopRes*/
			_, err = rpcClient.ClientUpgradeRecordService.StopUpgradeDevice(context.Background(), &proto.GenerateUpgradeDeviceRequest{
				PublishId:            publisInfo.Id,
				IsGray:               req.Publish.IsGray,    //是否灰度发布  =1 全量发布  =2 灰度发布
				GrayType:             req.Publish.GrayType,  //发布模式  =1 按比例灰度 =2 按数量灰度
				GrayScale:            req.Publish.GrayScale, //发布比例值，数量值
				TenantId:             req.Publish.TenantId,
				IsAuto:               req.Publish.IsAuto,
				AutoStartAt:          req.Publish.AutoStartAt,
				AutoEndAt:            req.Publish.AutoEndAt,
				SpecifiedVersionMode: req.Publish.SpecifiedVersionMode,
				SpecifiedVersion:     req.Publish.SpecifiedVersion,
				SpecifiedAreaMode:    req.Publish.SpecifiedAreaMode,
				SpecifiedArea:        req.Publish.SpecifiedArea,
				VersionId:            req.Publish.VersionId,
				Version:              req.Publish.Version,
				UpgradeMode:          req.Publish.UpgradeMode,
				ProductKey:           req.Publish.ProductKey,
			})
			if err != nil {
				return err
			}
			//if upgradeStopRes.Code != 200 {
			//注释掉，质押err返回nil即可
			//return errors.New(upgradeStopRes.Message)
			//}
		}
		return nil
	})

	if err != nil {
		logger.Errorf("CreateOpmOtaPkg error : %s", err.Error())
		return err
	}
	return err
}

// 创建OpmOtaPkg
func (s *OpmOtaPkgSvc) CreateOpmOtaPkg(req *proto.OpmOtaPkg) (*proto.OpmOtaPkg, error) {
	var err error
	tenantId, err := CheckTenantId(s.Ctx)
	if err != nil {
		return nil, err
	}
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPkg
	do := t.WithContext(context.Background())
	dbObj := convert.OpmOtaPkg_pb2db(req)

	exists, err := s.existsOtaVersion(dbObj)
	if err != nil {
		return nil, err
	}
	if exists {
		return nil, errors.New("OTA升级版本已存在，无法重复添加")
	}

	dbObj.Id = iotutil.GetNextSeqInt64()
	dbObj.TenantId = tenantId
	err = do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmOtaPkg error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OpmOtaPkg
func (s *OpmOtaPkgSvc) DeleteOpmOtaPkg(req *proto.OpmOtaPkg) (*proto.OpmOtaPkg, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPkg
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.Type != 0 { //整数
		do = do.Where(t.Type.Eq(req.Type))
	}
	if req.FirmwareId != 0 { //整数
		do = do.Where(t.FirmwareId.Eq(req.FirmwareId))
	}
	if req.FirmwareFlag != "" { //字符串
		do = do.Where(t.FirmwareFlag.Eq(req.FirmwareFlag))
	}
	if req.FirmwareType != 0 { //字符串
		do = do.Where(t.FirmwareType.Eq(req.FirmwareType))
	}
	if req.VersionId != 0 { //整数
		do = do.Where(t.VersionId.Eq(req.VersionId))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.UpgradeMode != 0 { //整数
		do = do.Where(t.UpgradeMode.Eq(req.UpgradeMode))
	}
	if req.Url != "" { //字符串
		do = do.Where(t.Url.Eq(req.Url))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.IsAuto != 0 { //整数
		do = do.Where(t.IsAuto.Eq(req.IsAuto))
	}
	if req.UpgradeDesc != "" { //字符串
		do = do.Where(t.UpgradeDesc.Eq(req.UpgradeDesc))
	}
	if req.UpgradeDescEn != "" { //字符串
		do = do.Where(t.UpgradeDescEn.Eq(req.UpgradeDescEn))
	}
	if req.SpecifiedVersionMode != 0 { //字符串
		do = do.Where(t.SpecifiedVersionMode.Eq(req.SpecifiedVersionMode))
	}
	if req.SpecifiedVersion != "" { //字符串
		do = do.Where(t.SpecifiedVersion.Eq(req.SpecifiedVersion))
	}
	if req.SpecifiedAreaMode != 0 { //字符串
		do = do.Where(t.SpecifiedAreaMode.Eq(req.SpecifiedAreaMode))
	}
	if req.SpecifiedArea != "" { //字符串
		do = do.Where(t.SpecifiedArea.Eq(req.SpecifiedArea))
	}
	if req.Md5 != "" { //字符串
		do = do.Where(t.Md5.Eq(req.Md5))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmOtaPkg error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpmOtaPkg
func (s *OpmOtaPkgSvc) DeleteByIdOpmOtaPkg(req *proto.OpmOtaPkg) (*proto.OpmOtaPkg, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPkg
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmOtaPkg error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpmOtaPkg
func (s *OpmOtaPkgSvc) DeleteByIdsOpmOtaPkg(req *proto.OpmOtaPkgBatchDeleteRequest) (*proto.OpmOtaPkgBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmOtaPkg
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmOtaPkg error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpmOtaPkg
func (s *OpmOtaPkgSvc) UpdateOpmOtaPkg(req *proto.OpmOtaPkg) (*proto.OpmOtaPkg, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPkg
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.ProductId != 0 { //整数
		updateField = append(updateField, t.ProductId)
	}
	if req.ProductKey != "" { //字符串
		updateField = append(updateField, t.ProductKey)
	}
	if req.Type != 0 { //整数
		updateField = append(updateField, t.Type)
	}
	if req.FirmwareId != 0 { //整数
		updateField = append(updateField, t.FirmwareId)
	}
	if req.FirmwareFlag != "" { //字符串
		updateField = append(updateField, t.FirmwareFlag)
	}
	if req.FirmwareType != 0 { //字符串
		updateField = append(updateField, t.FirmwareType)
	}
	if req.VersionId != 0 { //整数
		updateField = append(updateField, t.VersionId)
	}
	if req.Version != "" { //字符串
		updateField = append(updateField, t.Version)
	}
	if req.UpgradeMode != 0 { //整数
		updateField = append(updateField, t.UpgradeMode)
	}
	if req.Url != "" { //字符串
		updateField = append(updateField, t.Url)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.IsAuto != 0 { //整数
		updateField = append(updateField, t.IsAuto)
	}
	if req.UpgradeDesc != "" { //字符串
		updateField = append(updateField, t.UpgradeDesc)
	}
	if req.UpgradeDescEn != "" { //字符串
		updateField = append(updateField, t.UpgradeDescEn)
	}
	if req.SpecifiedVersionMode != 0 { //字符串
		updateField = append(updateField, t.SpecifiedVersionMode)
	}
	if req.SpecifiedVersion != "" { //字符串
		updateField = append(updateField, t.SpecifiedVersion)
	}
	if req.SpecifiedAreaMode != 0 { //字符串
		updateField = append(updateField, t.SpecifiedAreaMode)
	}
	if req.SpecifiedArea != "" { //字符串
		updateField = append(updateField, t.SpecifiedArea)
	}
	if req.Md5 != "" { //字符串
		updateField = append(updateField, t.Md5)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.TenantId)
	}
	if req.UpgradeTimeMode != 0 { //时间模式
		updateField = append(updateField, t.UpgradeTimeMode)
	}
	if req.AutoStartAt != "" { //升级范围,开始
		updateField = append(updateField, t.AutoStartAt)
	}
	if req.AutoEndAt != "" { //升级范围,结束
		updateField = append(updateField, t.AutoEndAt)
	}
	if req.IsMustVersion != 0 { //是否必经版本
		updateField = append(updateField, t.IsMustVersion)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateOpmOtaPkg error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmOtaPkg_pb2db(req)
	//判断重复
	exists, err := s.existsOtaVersion(dbObj)
	if err != nil {
		return nil, err
	}
	if exists {
		return nil, errors.New("OTA升级版本已存在，无法重复添加")
	}
	_, err = do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmOtaPkg error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpmOtaPkg
func (s *OpmOtaPkgSvc) UpdateAllOpmOtaPkg(req *proto.OpmOtaPkg) (*proto.OpmOtaPkg, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPkg
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.ProductId)
	updateField = append(updateField, t.ProductKey)
	updateField = append(updateField, t.Type)
	updateField = append(updateField, t.FirmwareId)
	updateField = append(updateField, t.FirmwareFlag)
	updateField = append(updateField, t.FirmwareType)
	updateField = append(updateField, t.VersionId)
	updateField = append(updateField, t.Version)
	updateField = append(updateField, t.UpgradeMode)
	updateField = append(updateField, t.Url)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.IsAuto)
	updateField = append(updateField, t.UpgradeDesc)
	updateField = append(updateField, t.UpgradeDescEn)
	updateField = append(updateField, t.AutoStartAt)
	updateField = append(updateField, t.AutoEndAt)
	updateField = append(updateField, t.SpecifiedVersionMode)
	updateField = append(updateField, t.SpecifiedVersion)
	updateField = append(updateField, t.SpecifiedAreaMode)
	updateField = append(updateField, t.SpecifiedArea)
	updateField = append(updateField, t.Md5)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	updateField = append(updateField, t.TenantId)
	updateField = append(updateField, t.UpgradeTimeMode)
	updateField = append(updateField, t.IsMustVersion)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmOtaPkg error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmOtaPkg_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmOtaPkg error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmOtaPkgSvc) UpdateFieldsOpmOtaPkg(req *proto.OpmOtaPkgUpdateFieldsRequest) (*proto.OpmOtaPkg, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPkg
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmOtaPkg error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmOtaPkg error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmOtaPkg_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmOtaPkg error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmOtaPkg
func (s *OpmOtaPkgSvc) FindOpmOtaPkg(req *proto.OpmOtaPkgFilter) (*proto.OpmOtaPkg, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPkg
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.Type != 0 { //整数
		do = do.Where(t.Type.Eq(req.Type))
	}
	if req.FirmwareId != 0 { //整数
		do = do.Where(t.FirmwareId.Eq(req.FirmwareId))
	}
	if req.FirmwareFlag != "" { //字符串
		do = do.Where(t.FirmwareFlag.Eq(req.FirmwareFlag))
	}
	if req.FirmwareType != 0 { //字符串
		do = do.Where(t.FirmwareType.Eq(req.FirmwareType))
	}
	if req.VersionId != 0 { //整数
		do = do.Where(t.VersionId.Eq(req.VersionId))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.UpgradeMode != 0 { //整数
		do = do.Where(t.UpgradeMode.Eq(req.UpgradeMode))
	}
	if req.Url != "" { //字符串
		do = do.Where(t.Url.Eq(req.Url))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.IsAuto != 0 { //整数
		do = do.Where(t.IsAuto.Eq(req.IsAuto))
	}
	if req.UpgradeDesc != "" { //字符串
		do = do.Where(t.UpgradeDesc.Eq(req.UpgradeDesc))
	}
	if req.UpgradeDescEn != "" { //字符串
		do = do.Where(t.UpgradeDescEn.Eq(req.UpgradeDescEn))
	}
	if req.SpecifiedVersionMode != 0 { //字符串
		do = do.Where(t.SpecifiedVersionMode.Eq(req.SpecifiedVersionMode))
	}
	if req.SpecifiedVersion != "" { //字符串
		do = do.Where(t.SpecifiedVersion.Eq(req.SpecifiedVersion))
	}
	if req.SpecifiedAreaMode != 0 { //字符串
		do = do.Where(t.SpecifiedAreaMode.Eq(req.SpecifiedAreaMode))
	}
	if req.SpecifiedArea != "" { //字符串
		do = do.Where(t.SpecifiedArea.Eq(req.SpecifiedArea))
	}
	if req.Md5 != "" { //字符串
		do = do.Where(t.Md5.Eq(req.Md5))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmOtaPkg error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmOtaPkg_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpmOtaPkg
func (s *OpmOtaPkgSvc) FindByIdOpmOtaPkg(req *proto.OpmOtaPkgFilter) (*proto.OpmOtaPkg, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPkg
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmOtaPkg error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmOtaPkg_db2pb(dbObj)
	return res, err
}


type FirmwareInfo struct {
	Id int64 `json:"id"`
	Name     string `gorm:"column:name" json:"name"`     // 固件名称
	Key string  `gorm:"column:key" json:"key"`
	Url string `gorm:"column:url" json:"url"` // 固件版本文件
}

// 根据分页条件查找OpmOtaPkg,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmOtaPkgSvc) GetListOpmOtaPkg(req *proto.OpmOtaPkgListRequest) ([]*proto.OpmOtaPkg, int64, error) {
	var err error
	tenantId, err := CheckTenantId(s.Ctx)
	if err != nil {
		return nil, 0, err
	}
	q := orm.Use(iotmodel.GetDB())
	t := q.TOpmOtaPkg

	//todo 考虑ｇｏｒｍ中是否可以合并查询
	tOpmFrimware := q.TOpmFirmware
	tOpmFrimwareVer := q.TOpmFirmwareVersion
	tPmFrimware := q.TPmFirmware
	tPmFrimwareVer := q.TPmFirmwareVersion
	var opmfList []FirmwareInfo
	var pmfList []FirmwareInfo
	err = tOpmFrimwareVer.WithContext(context.Background()).
		Join(tOpmFrimware, tOpmFrimware.Id.EqCol(tOpmFrimwareVer.FirmwareId)).
		Select(tOpmFrimware.Id, tOpmFrimware.Name, tOpmFrimware.FirmwareKey.As("key"), tOpmFrimwareVer.UpgradeFilePath.As("url")).Where(tOpmFrimware.TenantId.Eq(tenantId)).Scan(&opmfList)
	err = tPmFrimwareVer.WithContext(context.Background()).
		Join(tPmFrimware, tPmFrimware.Id.EqCol(tPmFrimwareVer.FirmwareId)).
		Select(tPmFrimware.Id, tPmFrimware.Name, tPmFrimware.FirmwareKey.As("key"), tPmFrimwareVer.FilePath.As("url")).Scan(&pmfList)

	do := t.WithContext(context.Background())
	query := req.Query
	//没做表的关联查询，暂时用此方法查询
	if query.FirmwareName != "" { //字符串
		var firmwareIds []int64
		if pmfList != nil {
			for _, firmware := range pmfList {
				if firmware.Name == query.FirmwareName {
					firmwareIds = append(firmwareIds, firmware.Id)
				}
			}
		}
		if opmfList != nil {
			for _, firmware := range opmfList {
				if firmware.Name == query.FirmwareName {
					firmwareIds = append(firmwareIds, firmware.Id)
				}
			}
		}
		if firmwareIds != nil && len(firmwareIds) >0 {
			do = do.Where(t.FirmwareId.In(firmwareIds...))
		} else {
			return nil, 0, nil
		}
	}
	//没做表的关联查询，暂时用此方法查询
	if query.FirmwareKey != "" { //字符串
		var firmwareIds []int64
		if pmfList != nil {
			for _, firmware := range pmfList {
				if firmware.Key == query.FirmwareKey {
					firmwareIds = append(firmwareIds, firmware.Id)
				}
			}
		}
		if opmfList != nil {
			for _, firmware := range opmfList {
				if firmware.Key == query.FirmwareKey {
					firmwareIds = append(firmwareIds, firmware.Id)
				}
			}
		}
		if firmwareIds != nil && len(firmwareIds) >0 {
			do = do.Where(t.FirmwareId.In(firmwareIds...))
		} else {
			return nil, 0, nil
		}
	}
	fw := make(map[int64]FirmwareInfo)
	if pmfList != nil {
		for _, firmware := range pmfList {
			fw[firmware.Id] = firmware
		}
	}
	if opmfList != nil {
		for _, firmware := range opmfList {
			fw[firmware.Id] = firmware
		}
	}

	if query != nil {
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.ProductId != 0 { //整数
			do = do.Where(t.ProductId.Eq(query.ProductId))
		}
		if query.ProductKey != "" { //字符串
			do = do.Where(t.ProductKey.Like("%" + query.ProductKey + "%"))
		}
		if query.Type != 0 { //整数
			do = do.Where(t.Type.Eq(query.Type))
		}
		if query.FirmwareFlag != "" { //字符串
			// FirmwareFlag 查询条件设置为 FirmwareId
			do = do.Where(t.FirmwareId.Eq(query.FirmwareId))
		}
		if query.FirmwareType != 0 { //字符串
			do = do.Where(t.FirmwareType.Eq(query.FirmwareType))
		}
		if query.VersionId != 0 { //整数
			do = do.Where(t.VersionId.Eq(query.VersionId))
		}
		if query.Version != "" { //字符串
			do = do.Where(t.Version.Like("%" + query.Version + "%"))
		}
		if query.UpgradeMode != 0 { //整数
			do = do.Where(t.UpgradeMode.Eq(query.UpgradeMode))
		}
		if query.Url != "" { //字符串
			do = do.Where(t.Url.Like("%" + query.Url + "%"))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.IsAuto != 0 { //整数
			do = do.Where(t.IsAuto.Eq(query.IsAuto))
		}
		if query.UpgradeDesc != "" { //字符串
			do = do.Where(t.UpgradeDesc.Like("%" + query.UpgradeDesc + "%"))
		}
		if query.UpgradeDescEn != "" { //字符串
			do = do.Where(t.UpgradeDescEn.Like("%" + query.UpgradeDescEn + "%"))
		}
		if query.SpecifiedVersionMode != 0 { //字符串
			do = do.Where(t.SpecifiedVersionMode.Eq(query.SpecifiedVersionMode))
		}
		if query.SpecifiedVersion != "" { //字符串
			do = do.Where(t.SpecifiedVersion.Like("%" + query.SpecifiedVersion + "%"))
		}
		if query.SpecifiedAreaMode != 0 { //字符串
			do = do.Where(t.SpecifiedAreaMode.Eq(query.SpecifiedAreaMode))
		}
		if query.SpecifiedArea != "" { //字符串
			do = do.Where(t.SpecifiedArea.Like("%" + query.SpecifiedArea + "%"))
		}
		if query.Md5 != "" { //字符串
			do = do.Where(t.Md5.Like("%" + query.Md5 + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*struct {
		model.TOpmOtaPkg
		FirmwareName string `gorm:"column:firmware_name;not null" json:"firmwareName"`
		FirmwareKey string `gorm:"column:firmware_key;not null" json:"firmwareKey"`
	}
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do.ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmOtaPkg error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}

	listPublish := map[int64][]*model.TOpmOtaPublish{}
	if len(list) > 0 {
		ids := []int64{}
		for _, v := range list {
			ids = append(ids, v.Id)
		}
		//查询版本信息
		tPublish := orm.Use(iotmodel.GetDB()).TOpmOtaPublish
		doPublish := tPublish.WithContext(context.Background())
		publishs, _ := doPublish.Where(tPublish.PkgId.In(ids...)).Order(tPublish.CreatedAt.Desc()).Find()
		for _, publish := range publishs {
			if _, ok := listPublish[publish.PkgId]; ok {
				listPublish[publish.PkgId] = append(listPublish[publish.PkgId], publish)
			} else {
				listPublish[publish.PkgId] = []*model.TOpmOtaPublish{publish}
			}
		}
	}

	result := make([]*proto.OpmOtaPkg, len(list))
	for i, v := range list {
		result[i] = convert.OpmOtaPkg_db2pb(&v.TOpmOtaPkg)
		if v, ok := fw[v.FirmwareId]; ok {
			result[i].FirmwareName = iotutil.MapGetStringVal(v.Name, "")
			result[i].FirmwareKey = iotutil.MapGetStringVal(v.Key, "")
			result[i].Url = iotutil.MapGetStringVal(v.Url, "")
		}
		if pubs, ok := listPublish[v.Id]; ok {
			if len(pubs) > 0 {
				result[i].ListPublishRecord = convert.OpmOtaPublish_db2pb(pubs[0])
			}
		}
	}
	return result, total, nil
}

// GetProductOtaVersion
func (s *OpmOtaPkgSvc) GetProductOtaVersion(req *proto.ProductOtaVersionRequest) ([]string, error) {
	var (
		versionMap map[string]string = make(map[string]string)
	)
	q := orm.Use(iotmodel.GetDB())
	t := q.TOpmProductModuleRelation
	list, err := t.WithContext(context.Background()).Where(t.ProductId.Eq(req.ProductId), t.FirmwareId.Eq(req.FirmwareId)).Find()
	if err != nil {
		return nil, err
	}
	if len(list) == 0 {
		return []string{}, nil
	}
	versionMap[list[0].FirmwareVersion] = list[0].FirmwareVersion

	//查询发布版本
	tPublish := q.TOpmOtaPublish
	tPkg := q.TOpmOtaPkg
	publichVersion, err := q.TOpmOtaPublish.WithContext(context.Background()).
		Join(tPkg, tPkg.Id.EqCol(tPublish.PkgId)).Where(tPkg.ProductId.Eq(req.ProductId), tPkg.FirmwareId.Eq(req.FirmwareId)).Find()
	if err != nil {
		return nil, err
	}
	for _, publish := range publichVersion {
		if _, ok := versionMap[list[0].FirmwareVersion]; ok {
			versionMap[publish.Version] = publish.Version
		}
	}
	versions := []string{}
	for key, _ := range versionMap {
		versions = append(versions, key)
	}
	return versions, nil
}

// GetProductOtaVersion
func (s *OpmOtaPkgSvc) GetProductOtaAreas(req *proto.ProductOtaAreaRequest) ([]*proto.ProductOtaAreaItem, error) {
	return nil, nil
}

// 判断重复OTA
func (s *OpmOtaPkgSvc) existsOtaVersion(otaPkg *model.TOpmOtaPkg) (bool, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPkg
	do := t.WithContext(context.Background())
	do = do.Where(t.ProductId.Eq(otaPkg.ProductId),
		t.VersionId.Eq(otaPkg.VersionId),
		t.FirmwareType.Eq(otaPkg.FirmwareType),
		t.FirmwareId.Eq(otaPkg.FirmwareId))

	if otaPkg.Id != 0 {
		do = do.Where(t.Id.Neq(otaPkg.Id))
	}

	count, err := do.Count()
	if err != nil {
		return true, err
	}
	return count > 0, err
}
