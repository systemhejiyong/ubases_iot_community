// Code generated by sgen.exe,2022-04-21 12:44:21. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type PmProductModuleRelationSvc struct {
	Ctx context.Context
}

// 创建PmProductModuleRelation
func (s *PmProductModuleRelationSvc) CreatePmProductModuleRelation(req *proto.PmProductModuleRelation) (*proto.PmProductModuleRelation, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TPmProductModuleRelation
	do := t.WithContext(context.Background())
	dbObj := convert.PmProductModuleRelation_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreatePmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 批量创建PmProductModuleRelation
func (s *PmProductModuleRelationSvc) BatchCreatePmProductModuleRelation(tx *orm.Query, req []*proto.PmProductModuleRelation) ([]*proto.PmProductModuleRelation, error) {
	// fixme 请在这里校验参数
	t := tx.TPmProductModuleRelation
	do := t.WithContext(context.Background())
	var dbObjs = make([]*model.TPmProductModuleRelation, len(req))
	for i, relation := range req {
		dbObjs[i] = convert.PmProductModuleRelation_pb2db(relation)
	}
	err := do.CreateInBatches(dbObjs, len(req))
	if err != nil {
		logger.Errorf("BatchCreatePmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除PmProductModuleRelation
func (s *PmProductModuleRelationSvc) DeletePmProductModuleRelation(tx *orm.Query, req *proto.PmProductModuleRelation) (*proto.PmProductModuleRelation, error) {
	t := tx.TPmProductModuleRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.ModuleId != 0 { //整数
		do = do.Where(t.ModuleId.Eq(req.ModuleId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeletePmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除PmProductModuleRelation
func (s *PmProductModuleRelationSvc) DeleteByIdPmProductModuleRelation(req *proto.PmProductModuleRelation) (*proto.PmProductModuleRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TPmProductModuleRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdPmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除PmProductModuleRelation
func (s *PmProductModuleRelationSvc) DeleteByIdsPmProductModuleRelation(req *proto.PmProductModuleRelationBatchDeleteRequest) (*proto.PmProductModuleRelationBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TPmProductModuleRelation
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsPmProductModuleRelation error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新PmProductModuleRelation
func (s *PmProductModuleRelationSvc) UpdatePmProductModuleRelation(req *proto.PmProductModuleRelation) (*proto.PmProductModuleRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TPmProductModuleRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.ProductId != 0 { //整数
		updateField = append(updateField, t.ProductId)
	}
	if req.ModuleId != 0 { //整数
		updateField = append(updateField, t.ModuleId)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdatePmProductModuleRelation error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.PmProductModuleRelation_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdatePmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段PmProductModuleRelation
func (s *PmProductModuleRelationSvc) UpdateAllPmProductModuleRelation(req *proto.PmProductModuleRelation) (*proto.PmProductModuleRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TPmProductModuleRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.ProductId)
	updateField = append(updateField, t.ModuleId)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllPmProductModuleRelation error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.PmProductModuleRelation_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllPmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *PmProductModuleRelationSvc) UpdateFieldsPmProductModuleRelation(req *proto.PmProductModuleRelationUpdateFieldsRequest) (*proto.PmProductModuleRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TPmProductModuleRelation
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsPmProductModuleRelation error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsPmProductModuleRelation error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.PmProductModuleRelation_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsPmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找PmProductModuleRelation
func (s *PmProductModuleRelationSvc) FindPmProductModuleRelation(req *proto.PmProductModuleRelationFilter) (*proto.PmProductModuleRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TPmProductModuleRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.ModuleId != 0 { //整数
		do = do.Where(t.ModuleId.Eq(req.ModuleId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindPmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	res := convert.PmProductModuleRelation_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找PmProductModuleRelation
func (s *PmProductModuleRelationSvc) FindByIdPmProductModuleRelation(req *proto.PmProductModuleRelationFilter) (*proto.PmProductModuleRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TPmProductModuleRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdPmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	res := convert.PmProductModuleRelation_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找PmProductModuleRelation,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *PmProductModuleRelationSvc) GetListPmProductModuleRelation(req *proto.PmProductModuleRelationListRequest) ([]*proto.PmProductModuleRelation, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TPmProductModuleRelation
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.ProductId != 0 { //整数
			do = do.Where(t.ProductId.Eq(query.ProductId))
		}
		if query.ModuleId != 0 { //整数
			do = do.Where(t.ModuleId.Eq(query.ModuleId))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TPmProductModuleRelation
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListPmProductModuleRelation error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.PmProductModuleRelation, len(list))
	for i, v := range list {
		result[i] = convert.PmProductModuleRelation_db2pb(v)
	}
	return result, total, nil
}
