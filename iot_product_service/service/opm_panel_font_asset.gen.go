// Code generated by sgen,2023-09-20 13:58:28. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmPanelFontAssetSvc struct {
	Ctx context.Context
}

//创建OpmPanelFontAsset
func (s *OpmPanelFontAssetSvc) CreateOpmPanelFontAsset(req *proto.OpmPanelFontAsset) (*proto.OpmPanelFontAsset, error) {
	// fixme 请在这里校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontAsset
	do := t.WithContext(context.Background())
	if req.Id == 0 {
		//新增需要生成id，重传不需要
		dbObj := convert.OpmPanelFontAsset_pb2db(req)
		dbObj.Id = iotutil.GetNextSeqInt64()
		dbObj.FontKey = iotutil.GetAlphaSecret(8)
		err = do.Create(dbObj)
		if err != nil {
			logger.Errorf("CreateOpmPanelFontAsset error : %s", err.Error())
			return nil, err
		}
		req.Id = dbObj.Id
		return req, nil
	} else {
		//重传更新,只允许更改的字段FileName\FontName\AssetUrl
		pbObj, err := s.FindByIdOpmPanelFontAsset(&proto.OpmPanelFontAssetFilter{Id: req.Id})
		if err != nil {
			logger.Errorf("FindByIdOpmPanelFontAsset error : %s", err.Error())
			return nil, err
		}
		pbObj.FileName = req.FileName
		pbObj.FontName = req.FontName
		pbObj.AssetUrl = req.AssetUrl

		dbObj2 := convert.OpmPanelFontAsset_pb2db(pbObj)
		err = do.Save(dbObj2)
		if err != nil {
			logger.Errorf("CreateOpmPanelFontAsset error : %s", err.Error())
			return nil, err
		}
		return pbObj, nil
	}
}

//根据条件删除OpmPanelFontAsset
func (s *OpmPanelFontAssetSvc) DeleteOpmPanelFontAsset(req *proto.OpmPanelFontAsset) (*proto.OpmPanelFontAsset, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontAsset
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Builtin != 0 { //整数
		do = do.Where(t.Builtin.Eq(req.Builtin))
	}
	if req.FileName != "" { //字符串
		do = do.Where(t.FileName.Eq(req.FileName))
	}
	if req.FontName != "" { //字符串
		do = do.Where(t.FontName.Eq(req.FontName))
	}
	if req.FontKey != "" { //字符串
		do = do.Where(t.FontKey.Eq(req.FontKey))
	}
	if req.AssetUrl != "" { //字符串
		do = do.Where(t.AssetUrl.Eq(req.AssetUrl))
	}
	if req.Default != 0 { //整数
		do = do.Where(t.Default.Eq(req.Default))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmPanelFontAsset error : %s", err.Error())
		return nil, err
	}
	return req, err
}

//根据数据库表主键删除OpmPanelFontAsset
func (s *OpmPanelFontAssetSvc) DeleteByIdOpmPanelFontAsset(req *proto.OpmPanelFontAsset) (*proto.OpmPanelFontAsset, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontAsset
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmPanelFontAsset error : %s", err.Error())
		return nil, err
	}
	return req, err
}

//根据数据库表主键批量删除OpmPanelFontAsset
func (s *OpmPanelFontAssetSvc) DeleteByIdsOpmPanelFontAsset(req *proto.OpmPanelFontAssetBatchDeleteRequest) (*proto.OpmPanelFontAssetBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmPanelFontAsset
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmPanelFontAsset error : %s", err.Error())
			break
		}
	}
	return req, err
}

//根据主键更新OpmPanelFontAsset
func (s *OpmPanelFontAssetSvc) UpdateOpmPanelFontAsset(req *proto.OpmPanelFontAsset) (*proto.OpmPanelFontAsset, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontAsset
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Builtin != 0 { //整数
		updateField = append(updateField, t.Builtin)
	}
	if req.FileName != "" { //字符串
		updateField = append(updateField, t.FileName)
	}
	if req.FontName != "" { //字符串
		updateField = append(updateField, t.FontName)
	}
	if req.FontKey != "" { //字符串
		updateField = append(updateField, t.FontKey)
	}
	if req.AssetUrl != "" { //字符串
		updateField = append(updateField, t.AssetUrl)
	}
	if req.Default != 0 { //整数
		updateField = append(updateField, t.Default)
	}
	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.TenantId)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmPanelFontAsset error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmPanelFontAsset_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmPanelFontAsset error : %s", err.Error())
		return nil, err
	}
	return req, err
}

////根据主键更新所有字段OpmPanelFontAsset
func (s *OpmPanelFontAssetSvc) UpdateAllOpmPanelFontAsset(req *proto.OpmPanelFontAsset) (*proto.OpmPanelFontAsset, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontAsset
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Builtin)
	updateField = append(updateField, t.FileName)
	updateField = append(updateField, t.FontName)
	updateField = append(updateField, t.FontKey)
	updateField = append(updateField, t.AssetUrl)
	updateField = append(updateField, t.Default)
	updateField = append(updateField, t.TenantId)
	updateField = append(updateField, t.CreatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmPanelFontAsset error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmPanelFontAsset_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmPanelFontAsset error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmPanelFontAssetSvc) UpdateFieldsOpmPanelFontAsset(req *proto.OpmPanelFontAssetUpdateFieldsRequest) (*proto.OpmPanelFontAsset, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontAsset
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmPanelFontAsset error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmPanelFontAsset error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmPanelFontAsset_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmPanelFontAsset error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

//根据非空条件查找OpmPanelFontAsset
func (s *OpmPanelFontAssetSvc) FindOpmPanelFontAsset(req *proto.OpmPanelFontAssetFilter) (*proto.OpmPanelFontAsset, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontAsset
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Builtin != 0 { //整数
		do = do.Where(t.Builtin.Eq(req.Builtin))
	}
	if req.FileName != "" { //字符串
		do = do.Where(t.FileName.Eq(req.FileName))
	}
	if req.FontName != "" { //字符串
		do = do.Where(t.FontName.Eq(req.FontName))
	}
	if req.FontKey != "" { //字符串
		do = do.Where(t.FontKey.Eq(req.FontKey))
	}
	if req.AssetUrl != "" { //字符串
		do = do.Where(t.AssetUrl.Eq(req.AssetUrl))
	}
	if req.Default != 0 { //整数
		do = do.Where(t.Default.Eq(req.Default))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	//if req.CreatedBy != 0 { //整数
	//	do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	//}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmPanelFontAsset error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmPanelFontAsset_db2pb(dbObj)

	t1 := orm.Use(iotmodel.GetDB()).TOpmPanelFontConfig
	cnt, err := t1.WithContext(context.Background()).Where(t1.PanelId.Eq(req.PanelId)).Where(t1.FontId.Eq(req.Id)).Count()
	if err == nil && cnt > 0 {
		res.HasConfig = true
	}

	return res, err
}

//根据数据库表主键查找OpmPanelFontAsset
func (s *OpmPanelFontAssetSvc) FindByIdOpmPanelFontAsset(req *proto.OpmPanelFontAssetFilter) (*proto.OpmPanelFontAsset, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontAsset
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmPanelFontAsset error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmPanelFontAsset_db2pb(dbObj)

	t1 := orm.Use(iotmodel.GetDB()).TOpmPanelFontConfig
	cnt, err := t1.WithContext(context.Background()).Where(t1.PanelId.Eq(req.PanelId)).Where(t1.FontId.Eq(req.Id)).Count()
	if err == nil && cnt > 0 {
		res.HasConfig = true
	}
	return res, err
}

//根据分页条件查找OpmPanelFontAsset,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmPanelFontAssetSvc) GetListOpmPanelFontAsset(req *proto.OpmPanelFontAssetListRequest) ([]*proto.OpmPanelFontAsset, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontAsset
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Builtin != 0 { //整数
			do = do.Where(t.Builtin.Eq(query.Builtin))
		}
		if query.FileName != "" { //字符串
			do = do.Where(t.FileName.Like("%" + query.FileName + "%"))
		}
		if query.FontName != "" { //字符串
			do = do.Where(t.FontName.Like("%" + query.FontName + "%"))
		}
		if query.FontKey != "" { //字符串
			do = do.Where(t.FontKey.Like("%" + query.FontKey + "%"))
		}
		if query.AssetUrl != "" { //字符串
			do = do.Where(t.AssetUrl.Like("%" + query.AssetUrl + "%"))
		}
		if query.Default != 0 { //整数
			do = do.Where(t.Default.Eq(query.Default))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Like("%" + query.TenantId + "%")).Or(t.TenantId.Eq(""))
		} else {
			do = do.Where(t.TenantId.Eq(""))
		}
	}
	//orderCol, ok := t.GetFieldByName(req.OrderKey)
	//if !ok {
	//	orderCol = t.Id
	//}
	//if req.OrderDesc != "" {
	//	do = do.Order(orderCol.Desc())
	//} else {
	//	do = do.Order(orderCol)
	//}

	do = do.Order(t.CreatedAt)

	var list []*model.TOpmPanelFontAsset
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmPanelFontAsset error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}

	//查找是否有配置
	var config = make(map[int64]bool)
	if query != nil && query.PanelId > 0 {
		t := orm.Use(iotmodel.GetDB()).TOpmPanelFontConfig
		do := t.WithContext(context.Background()).Where(t.PanelId.Eq(query.PanelId))
		configList, _ := do.Find()
		for _, v := range configList {
			config[v.FontId] = true
		}
	}

	result := make([]*proto.OpmPanelFontAsset, len(list))
	for i, v := range list {
		result[i] = convert.OpmPanelFontAsset_db2pb(v)
		if _, ok := config[v.Id]; ok {
			result[i].HasConfig = true
		}
	}
	return result, total, nil
}
