// Code generated by sgen.exe,2022-07-25 09:03:06. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type PmThingModelItemSvc struct {
	Ctx context.Context
}

// 创建PmThingModelItem
func (s *PmThingModelItemSvc) CreatePmThingModelItem(req *proto.PmThingModelItem) (*proto.PmThingModelItem, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TPmThingModelItem
	do := t.WithContext(context.Background())
	dbObj := convert.PmThingModelItem_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreatePmThingModelItem error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除PmThingModelItem
func (s *PmThingModelItemSvc) DeletePmThingModelItem(req *proto.PmThingModelItem) (*proto.PmThingModelItem, error) {
	t := orm.Use(iotmodel.GetDB()).TPmThingModelItem
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductTypeId != 0 { //整数
		do = do.Where(t.ProductTypeId.Eq(req.ProductTypeId))
	}
	if req.Dpid != 0 { //整数
		do = do.Where(t.Dpid.Eq(req.Dpid))
	}
	if req.Identifier != "" { //字符串
		do = do.Where(t.Identifier.Eq(req.Identifier))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.RwFlag != "" { //字符串
		do = do.Where(t.RwFlag.Eq(req.RwFlag))
	}
	if req.DataType != "" { //字符串
		do = do.Where(t.DataType.Eq(req.DataType))
	}
	if req.Properties != "" { //字符串
		do = do.Where(t.Properties.Eq(req.Properties))
	}
	if req.Mark != "" { //字符串
		do = do.Where(t.Mark.Eq(req.Mark))
	}
	if req.Required != 0 { //整数
		do = do.Where(t.Required.Eq(req.Required))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeletePmThingModelItem error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除PmThingModelItem
func (s *PmThingModelItemSvc) DeleteByIdPmThingModelItem(req *proto.PmThingModelItem) (*proto.PmThingModelItem, error) {
	t := orm.Use(iotmodel.GetDB()).TPmThingModelItem
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdPmThingModelItem error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除PmThingModelItem
func (s *PmThingModelItemSvc) DeleteByIdsPmThingModelItem(req *proto.PmThingModelItemBatchDeleteRequest) (*proto.PmThingModelItemBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TPmThingModelItem
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsPmThingModelItem error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新PmThingModelItem
func (s *PmThingModelItemSvc) UpdatePmThingModelItem(req *proto.PmThingModelItem) (*proto.PmThingModelItem, error) {
	t := orm.Use(iotmodel.GetDB()).TPmThingModelItem
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.ProductTypeId != 0 { //整数
		updateField = append(updateField, t.ProductTypeId)
	}
	if req.Dpid != 0 { //整数
		updateField = append(updateField, t.Dpid)
	}
	if req.Identifier != "" { //字符串
		updateField = append(updateField, t.Identifier)
	}
	if req.Name != "" { //字符串
		updateField = append(updateField, t.Name)
	}
	if req.RwFlag != "" { //字符串
		updateField = append(updateField, t.RwFlag)
	}
	if req.DataType != "" { //字符串
		updateField = append(updateField, t.DataType)
	}
	if req.Properties != "" { //字符串
		updateField = append(updateField, t.Properties)
	}
	if req.Mark != "" { //字符串
		updateField = append(updateField, t.Mark)
	}
	if req.Required != 0 { //整数
		updateField = append(updateField, t.Required)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdatePmThingModelItem error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.PmThingModelItem_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdatePmThingModelItem error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段PmThingModelItem
func (s *PmThingModelItemSvc) UpdateAllPmThingModelItem(req *proto.PmThingModelItem) (*proto.PmThingModelItem, error) {
	t := orm.Use(iotmodel.GetDB()).TPmThingModelItem
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.ProductTypeId)
	updateField = append(updateField, t.Dpid)
	updateField = append(updateField, t.Identifier)
	updateField = append(updateField, t.Name)
	updateField = append(updateField, t.RwFlag)
	updateField = append(updateField, t.DataType)
	updateField = append(updateField, t.Properties)
	updateField = append(updateField, t.Mark)
	updateField = append(updateField, t.Required)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllPmThingModelItem error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.PmThingModelItem_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllPmThingModelItem error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *PmThingModelItemSvc) UpdateFieldsPmThingModelItem(req *proto.PmThingModelItemUpdateFieldsRequest) (*proto.PmThingModelItem, error) {
	t := orm.Use(iotmodel.GetDB()).TPmThingModelItem
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsPmThingModelItem error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsPmThingModelItem error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.PmThingModelItem_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsPmThingModelItem error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找PmThingModelItem
func (s *PmThingModelItemSvc) FindPmThingModelItem(req *proto.PmThingModelItemFilter) (*proto.PmThingModelItem, error) {
	t := orm.Use(iotmodel.GetDB()).TPmThingModelItem
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductTypeId != 0 { //整数
		do = do.Where(t.ProductTypeId.Eq(req.ProductTypeId))
	}
	if req.Dpid != 0 { //整数
		do = do.Where(t.Dpid.Eq(req.Dpid))
	}
	if req.Identifier != "" { //字符串
		do = do.Where(t.Identifier.Eq(req.Identifier))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.RwFlag != "" { //字符串
		do = do.Where(t.RwFlag.Eq(req.RwFlag))
	}
	if req.DataType != "" { //字符串
		do = do.Where(t.DataType.Eq(req.DataType))
	}
	if req.Properties != "" { //字符串
		do = do.Where(t.Properties.Eq(req.Properties))
	}
	if req.Mark != "" { //字符串
		do = do.Where(t.Mark.Eq(req.Mark))
	}
	if req.Required != 0 { //整数
		do = do.Where(t.Required.Eq(req.Required))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindPmThingModelItem error : %s", err.Error())
		return nil, err
	}
	res := convert.PmThingModelItem_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找PmThingModelItem
func (s *PmThingModelItemSvc) FindByIdPmThingModelItem(req *proto.PmThingModelItemFilter) (*proto.PmThingModelItem, error) {
	t := orm.Use(iotmodel.GetDB()).TPmThingModelItem
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdPmThingModelItem error : %s", err.Error())
		return nil, err
	}
	res := convert.PmThingModelItem_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找PmThingModelItem,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *PmThingModelItemSvc) GetListPmThingModelItem(req *proto.PmThingModelItemListRequest) ([]*proto.PmThingModelItem, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TPmThingModelItem
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.ProductTypeId != 0 { //整数
			do = do.Where(t.ProductTypeId.Eq(query.ProductTypeId))
		}
		if query.Dpid != 0 { //整数
			do = do.Where(t.Dpid.Eq(query.Dpid))
		}
		if query.Identifier != "" { //字符串
			do = do.Where(t.Identifier.Like("%" + query.Identifier + "%"))
		}
		if query.Name != "" { //字符串
			do = do.Where(t.Name.Like("%" + query.Name + "%"))
		}
		if query.RwFlag != "" { //字符串
			do = do.Where(t.RwFlag.Like("%" + query.RwFlag + "%"))
		}
		if query.DataType != "" { //字符串
			do = do.Where(t.DataType.Like("%" + query.DataType + "%"))
		}
		if query.Properties != "" { //字符串
			do = do.Where(t.Properties.Like("%" + query.Properties + "%"))
		}
		if query.Mark != "" { //字符串
			do = do.Where(t.Mark.Like("%" + query.Mark + "%"))
		}
		if query.Required != 0 { //整数
			do = do.Where(t.Required.Eq(query.Required))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TPmThingModelItem
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListPmThingModelItem error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.PmThingModelItem, len(list))
	for i, v := range list {
		result[i] = convert.PmThingModelItem_db2pb(v)
	}
	return result, total, nil
}
