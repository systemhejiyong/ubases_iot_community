// Code generated by sgen.exe,2022-05-06 14:01:21. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotlogger"
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"
	"fmt"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmProductPanelRelationSvc struct {
	Ctx context.Context
}

// 创建OpmProductPanelRelation
func (s *OpmProductPanelRelationSvc) CreateOpmProductPanelRelation(req *proto.OpmProductPanelRelation) (*proto.OpmProductPanelRelation, error) {

	t := orm.Use(iotmodel.GetDB()).TOpmProductPanelRelation
	do := t.WithContext(context.Background())

	dbObj := convert.OpmProductPanelRelation_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmProductPanelRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 批量创建OpmProductPanelRelation
func (s *OpmProductPanelRelationSvc) BatchCreateOpmProductPanelRelation(req *proto.OpmProductPanelRelationList) ([]*proto.OpmProductPanelRelation, error) {
	if len(req.ProductPanelRelations) == 0 {
		return nil, errors.New("关联信息不能为空")
	}
	var (
		q              = orm.Use(iotmodel.GetDB())
		userId, _      = GetUserIdInt64(s.Ctx)
		panelRelations = make([]*model.TOpmProductPanelRelation, len(req.ProductPanelRelations))
		res            = make([]*proto.OpmProductPanelRelation, 0)
	)

	err := q.Transaction(func(tx *orm.Query) error {
		t := tx.TOpmProductPanelRelation
		do := t.WithContext(context.Background())
		var panelId int64 = 0
		var appPanelType int32 = 0
		var productId int64 = 0
		var err error
		//过量设计了，这里只运行选择一个面板
		for index, relation := range req.ProductPanelRelations {
			panelRelations[index] = convert.OpmProductPanelRelation_pb2db(relation)
			panelRelations[index].Id = iotutil.GetNextSeqInt64()
			panelId = relation.ControlPanelId
			productId = relation.ProductId
			appPanelType = relation.AppPanelType
			//面板信息
			var panelInfo *proto.PmControlPanelsDetails
			//如果面板类型是2，3则为自定义面板
			if appPanelType == 2 || appPanelType == 3 {
				panelSvc := OpmPanelSvc{Ctx: context.Background()}
				tempPanelInfo, err := panelSvc.FindByIdOpmPanel(&proto.OpmPanelFilter{Id: panelId})
				if err != nil {
					return err
				}
				panelInfo = &proto.PmControlPanelsDetails{
					Id:          tempPanelInfo.Id,
					Name:        tempPanelInfo.PanelName,
					Url:         tempPanelInfo.PanelUrl,
					PanelSize:   tempPanelInfo.PanelSize,
					PanelKey:    tempPanelInfo.PanelKey,
					PreviewUrl:  tempPanelInfo.PreviewUrl,
					PreviewName: tempPanelInfo.PreviewName,
				}
			} else {
				panelSvc := PmControlPanelsSvc{Ctx: context.Background()}
				panelInfo, err = panelSvc.FindByIdPmControlPanels(&proto.PmControlPanelsFilter{Id: panelId})
				if err != nil {
					return err
				}
			}
			//将面板信息存储到面板关联表中
			panelRelations[index].PanelUrl = panelInfo.Url
			panelRelations[index].PanelSize = panelInfo.PanelSize
			panelRelations[index].PanelKey = panelInfo.PanelKey
			panelRelations[index].PreviewName = panelInfo.PreviewName
			panelRelations[index].PreviewUrl = panelInfo.PreviewUrl
			panelRelations[index].CreatedBy = userId
			panelRelations[index].AppPanelType = appPanelType

			res = append(res, &proto.OpmProductPanelRelation{Id: relation.Id, AppPanelType: appPanelType, ProductId: relation.ProductId, ControlPanelId: relation.ControlPanelId,
				ControlPanel: panelInfo})
		}
		//先删除关联面板数据
		_, err = do.Where(t.ProductId.Eq(productId)).Delete()
		if err != nil {
			logger.Errorf("BatchCreateOpmProductPanelRelation delete reloations error : %s", err.Error())
			return err
		}
		//创建新关联
		err = do.Create(panelRelations...)
		if err != nil {
			logger.Errorf("BatchCreateOpmProductPanelRelation create reloations error : %s", err.Error())
			return err
		}
		tProduct := tx.TOpmProduct
		var (
			isShowImg    int32  = 0
			panelProImg  string = ""
			styleLinkage        = ""
		)
		proInfo, err := tProduct.WithContext(context.Background()).Where(tProduct.Id.Eq(productId)).Find()
		if err == nil {
			productkey := proInfo[0].ProductKey                                              //产品Key，用户获取历史设置数据
			panelProImg = iotutil.IfStringEmpty(proInfo[0].PanelProImg, proInfo[0].ImageUrl) //默认会显示上次产品图，如果没有则使用产品图片

			//设备缓存
			r := iotredis.GetClient().HGetAll(context.Background(), fmt.Sprintf(iotconst.PANEL_RULE_SETTINGS_DATA, productkey, panelId))
			if r.Err() == nil {
				v := r.Val()
				panelProImg = v["panelProImg"]
				isShowImg, _ = iotutil.ToInt32Err(v["isShowImg"])
				styleLinkage = v["styleLinkage"]
			} else {
				iotlogger.LogHelper.Errorf("获取缓存失败，Key:%v", fmt.Sprintf(iotconst.PANEL_RULE_SETTINGS_DATA, productkey, panelId))
			}
		} else {
			iotlogger.LogHelper.Errorf("获取产品信息失败，ProductId:%v", productId)
		}
		_, err = tProduct.WithContext(context.Background()).Select(tProduct.StyleLinkage, tProduct.AppPanelType, tProduct.PanelProImg, tProduct.IsShowImg, tProduct.ControlPanelId).
			Where(tProduct.Id.Eq(productId)).Updates(model.TOpmProduct{
			ControlPanelId: panelId,
			AppPanelType:   appPanelType,
			IsShowImg:      isShowImg,
			PanelProImg:    panelProImg,
			StyleLinkage:   styleLinkage,
		})
		if err != nil {
			logger.Errorf("BatchCreateOpmProductPanelRelation upadte product error : %s", err.Error())
			return err
		}
		return nil
	})
	if err != nil {
		return nil, err
	}
	return res, nil
}

// 根据条件删除OpmProductPanelRelation
func (s *OpmProductPanelRelationSvc) DeleteOpmProductPanelRelation(req *proto.OpmProductPanelRelation) (*proto.OpmProductPanelRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductPanelRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.ControlPanelId != 0 { //整数
		do = do.Where(t.ControlPanelId.Eq(req.ControlPanelId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmProductPanelRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpmProductPanelRelation
func (s *OpmProductPanelRelationSvc) DeleteByIdOpmProductPanelRelation(req *proto.OpmProductPanelRelation) (*proto.OpmProductPanelRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductPanelRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmProductPanelRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpmProductPanelRelation
func (s *OpmProductPanelRelationSvc) DeleteByIdsOpmProductPanelRelation(req *proto.OpmProductPanelRelationBatchDeleteRequest) (*proto.OpmProductPanelRelationBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmProductPanelRelation
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmProductPanelRelation error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpmProductPanelRelation
func (s *OpmProductPanelRelationSvc) UpdateOpmProductPanelRelation(req *proto.OpmProductPanelRelation) (*proto.OpmProductPanelRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductPanelRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	dbObj := convert.OpmProductPanelRelation_pb2db(req)
	if req.ProductId != 0 { //整数
		updateField = append(updateField, t.ProductId)
	}
	if req.ControlPanelId != 0 { //整数
		updateField = append(updateField, t.ControlPanelId)
	}
	if req.EditCreatedAt {
		dbObj.CreatedAt = time.Now()
		updateField = append(updateField, t.CreatedAt)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmProductPanelRelation error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmProductPanelRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpmProductPanelRelation
func (s *OpmProductPanelRelationSvc) UpdateAllOpmProductPanelRelation(req *proto.OpmProductPanelRelation) (*proto.OpmProductPanelRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductPanelRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.ProductId)
	updateField = append(updateField, t.ControlPanelId)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmProductPanelRelation error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmProductPanelRelation_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmProductPanelRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmProductPanelRelationSvc) UpdateFieldsOpmProductPanelRelation(req *proto.OpmProductPanelRelationUpdateFieldsRequest) (*proto.OpmProductPanelRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductPanelRelation
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmProductPanelRelation error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmProductPanelRelation error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmProductPanelRelation_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmProductPanelRelation error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmProductPanelRelation
func (s *OpmProductPanelRelationSvc) FindOpmProductPanelRelation(req *proto.OpmProductPanelRelationFilter) (*proto.OpmProductPanelRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductPanelRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.ControlPanelId != 0 { //整数
		do = do.Where(t.ControlPanelId.Eq(req.ControlPanelId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmProductPanelRelation error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmProductPanelRelation_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpmProductPanelRelation
func (s *OpmProductPanelRelationSvc) FindByIdOpmProductPanelRelation(req *proto.OpmProductPanelRelationFilter) (*proto.OpmProductPanelRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductPanelRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmProductPanelRelation error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmProductPanelRelation_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OpmProductPanelRelation,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmProductPanelRelationSvc) GetListOpmProductPanelRelation(req *proto.OpmProductPanelRelationListRequest) ([]*proto.OpmProductPanelRelation, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	p := orm.Use(iotmodel.GetDB())
	t := p.TOpmProductPanelRelation
	tPro := p.TOpmProduct
	do := t.WithContext(context.Background()).LeftJoin(tPro, tPro.Id.EqCol(t.ProductId))
	query := req.Query
	if query != nil {
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.ProductId != 0 { //整数
			do = do.Where(t.ProductId.Eq(query.ProductId))
		}
		if query.ControlPanelId != 0 { //整数
			do = do.Where(t.ControlPanelId.Eq(query.ControlPanelId))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	do = do.Select(t.ALL, tPro.ProductKey)

	var list []struct{
		model.TOpmProductPanelRelation
		ProductKey    string `gorm:"column:product_key" json:"productKey"`
	}
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do.ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmProductPanelRelation error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmProductPanelRelation, len(list))
	for i, v := range list {
		result[i] = convert.OpmProductPanelRelation_db2pb(&v.TOpmProductPanelRelation)
		result[i].ProductKey = v.ProductKey
	}
	return result, total, nil
}