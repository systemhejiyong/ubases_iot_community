// Code generated by sgen,2023-09-20 13:58:28. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmPanelFontConfigSvc struct {
	Ctx context.Context
}

//创建OpmPanelFontConfig
func (s *OpmPanelFontConfigSvc) CreateOpmPanelFontConfig(req *proto.OpmPanelFontConfig) (*proto.OpmPanelFontConfig, error) {
	//更新
	if req.Id > 0 {
		return s.UpdateOpmPanelFontConfigEx(req)
	}
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontConfig
	do := t.WithContext(context.Background())
	dbObj := convert.OpmPanelFontConfig_pb2db(req)
	dbObj.Id = iotutil.GetNextSeqInt64()
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmPanelFontConfig error : %s", err.Error())
		return nil, err
	}
	req.Id = dbObj.Id
	return req, err
}

//根据条件删除OpmPanelFontConfig
func (s *OpmPanelFontConfigSvc) DeleteOpmPanelFontConfig(req *proto.OpmPanelFontConfig) (*proto.OpmPanelFontConfig, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontConfig
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.PanelId != 0 { //整数
		do = do.Where(t.PanelId.Eq(req.PanelId))
	}
	if req.FontId != 0 { //整数
		do = do.Where(t.FontId.Eq(req.FontId))
	}
	if req.VariableName != "" { //字符串
		do = do.Where(t.VariableName.Eq(req.VariableName))
	}
	if req.Bpp != 0 { //整数
		do = do.Where(t.Bpp.Eq(req.Bpp))
	}
	if req.UnicodeRange != "" { //字符串
		do = do.Where(t.UnicodeRange.Eq(req.UnicodeRange))
	}
	if req.Symbols != "" { //字符串
		do = do.Where(t.Symbols.Eq(req.Symbols))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmPanelFontConfig error : %s", err.Error())
		return nil, err
	}
	return req, err
}

//根据数据库表主键删除OpmPanelFontConfig
func (s *OpmPanelFontConfigSvc) DeleteByIdOpmPanelFontConfig(req *proto.OpmPanelFontConfig) (*proto.OpmPanelFontConfig, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontConfig
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmPanelFontConfig error : %s", err.Error())
		return nil, err
	}
	return req, err
}

//根据数据库表主键批量删除OpmPanelFontConfig
func (s *OpmPanelFontConfigSvc) DeleteByIdsOpmPanelFontConfig(req *proto.OpmPanelFontConfigBatchDeleteRequest) (*proto.OpmPanelFontConfigBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmPanelFontConfig
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmPanelFontConfig error : %s", err.Error())
			break
		}
	}
	return req, err
}

//根据主键更新OpmPanelFontConfig
func (s *OpmPanelFontConfigSvc) UpdateOpmPanelFontConfig(req *proto.OpmPanelFontConfig) (*proto.OpmPanelFontConfig, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontConfig
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.PanelId != 0 { //整数
		updateField = append(updateField, t.PanelId)
	}
	if req.FontId != 0 { //整数
		updateField = append(updateField, t.FontId)
	}
	if req.VariableName != "" { //字符串
		updateField = append(updateField, t.VariableName)
	}
	if req.Bpp != 0 { //整数
		updateField = append(updateField, t.Bpp)
	}
	if req.UnicodeRange != "" { //字符串
		updateField = append(updateField, t.UnicodeRange)
	}
	if req.Symbols != "" { //字符串
		updateField = append(updateField, t.Symbols)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmPanelFontConfig error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmPanelFontConfig_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmPanelFontConfig error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmPanelFontConfigSvc) UpdateOpmPanelFontConfigEx(req *proto.OpmPanelFontConfig) (*proto.OpmPanelFontConfig, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontConfig
	do := t.WithContext(context.Background())
	var updateField []field.Expr
	updateField = append(updateField, t.VariableName)
	updateField = append(updateField, t.Bpp)
	updateField = append(updateField, t.UnicodeRange)
	updateField = append(updateField, t.Symbols)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	do = do.Where(t.Id.Eq(req.Id))
	dbObj := convert.OpmPanelFontConfig_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmPanelFontConfig error : %s", err.Error())
		return nil, err
	}
	return req, err
}

////根据主键更新所有字段OpmPanelFontConfig
func (s *OpmPanelFontConfigSvc) UpdateAllOpmPanelFontConfig(req *proto.OpmPanelFontConfig) (*proto.OpmPanelFontConfig, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontConfig
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.PanelId)
	updateField = append(updateField, t.FontId)
	updateField = append(updateField, t.VariableName)
	updateField = append(updateField, t.Bpp)
	updateField = append(updateField, t.UnicodeRange)
	updateField = append(updateField, t.Symbols)
	updateField = append(updateField, t.CreatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmPanelFontConfig error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmPanelFontConfig_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmPanelFontConfig error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmPanelFontConfigSvc) UpdateFieldsOpmPanelFontConfig(req *proto.OpmPanelFontConfigUpdateFieldsRequest) (*proto.OpmPanelFontConfig, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontConfig
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmPanelFontConfig error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmPanelFontConfig error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmPanelFontConfig_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmPanelFontConfig error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

//根据非空条件查找OpmPanelFontConfig
func (s *OpmPanelFontConfigSvc) FindOpmPanelFontConfig(req *proto.OpmPanelFontConfigFilter) (*proto.OpmPanelFontConfig, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontConfig
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.PanelId != 0 { //整数
		do = do.Where(t.PanelId.Eq(req.PanelId))
	}
	if req.FontId != 0 { //整数
		do = do.Where(t.FontId.Eq(req.FontId))
	}
	if req.VariableName != "" { //字符串
		do = do.Where(t.VariableName.Eq(req.VariableName))
	}
	if req.Bpp != 0 { //整数
		do = do.Where(t.Bpp.Eq(req.Bpp))
	}
	if req.UnicodeRange != "" { //字符串
		do = do.Where(t.UnicodeRange.Eq(req.UnicodeRange))
	}
	if req.Symbols != "" { //字符串
		do = do.Where(t.Symbols.Eq(req.Symbols))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmPanelFontConfig error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmPanelFontConfig_db2pb(dbObj)
	return res, err
}

//根据数据库表主键查找OpmPanelFontConfig
func (s *OpmPanelFontConfigSvc) FindByIdOpmPanelFontConfig(req *proto.OpmPanelFontConfigFilter) (*proto.OpmPanelFontConfig, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontConfig
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmPanelFontConfig error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmPanelFontConfig_db2pb(dbObj)
	return res, err
}

//根据分页条件查找OpmPanelFontConfig,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmPanelFontConfigSvc) GetListOpmPanelFontConfig(req *proto.OpmPanelFontConfigListRequest) ([]*proto.OpmPanelFontConfig, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpmPanelFontConfig
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.PanelId != 0 { //整数
			do = do.Where(t.PanelId.Eq(query.PanelId))
		}
		if query.FontId != 0 { //整数
			do = do.Where(t.FontId.Eq(query.FontId))
		}
		if query.VariableName != "" { //字符串
			do = do.Where(t.VariableName.Like("%" + query.VariableName + "%"))
		}
		if query.Bpp != 0 { //整数
			do = do.Where(t.Bpp.Eq(query.Bpp))
		}
		if query.UnicodeRange != "" { //字符串
			do = do.Where(t.UnicodeRange.Like("%" + query.UnicodeRange + "%"))
		}
		if query.Symbols != "" { //字符串
			do = do.Where(t.Symbols.Like("%" + query.Symbols + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOpmPanelFontConfig
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmPanelFontConfig error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmPanelFontConfig, len(list))
	for i, v := range list {
		result[i] = convert.OpmPanelFontConfig_db2pb(v)
	}
	return result, total, nil
}
