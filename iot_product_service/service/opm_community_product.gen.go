// Code generated by sgen,2023-07-10 11:45:46. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"gorm.io/gen"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmCommunityProductSvc struct {
	Ctx context.Context
}

// 创建OpmCommunityProduct
func (s *OpmCommunityProductSvc) CreateOpmCommunityProduct(req *proto.OpmCommunityProduct) (*proto.OpmCommunityProduct, error) {
	// fixme 请在这里校验参数
	q := orm.Use(iotmodel.GetDB())
	err := q.Transaction(func(tx *orm.Query) error {
		t := tx.TOpmCommunityProduct
		do := t.WithContext(context.Background())
		dbObj := convert.OpmCommunityProduct_pb2db(req)
		//dbObj.Id = iotutil.GetNextSeqInt64()
		err := do.Create(dbObj)
		if err != nil {
			return err
		}
		if req.Langs == nil || len(req.Langs) == 0 {
			req.Langs = []*proto.OpmCommunityProductLanguage{
				{
					Id:                 iotutil.GetNextSeqInt64(),
					CommunityProductId: dbObj.Id,
					Lang:               "zh",
					Name:               dbObj.ProductName,
					Description:        dbObj.ProductDesc,
				},
			}
		}
		//存储翻译内容
		err = s.SaveLangs(dbObj.Id, req.Langs, tx)
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("CreateOpmCommunityProduct error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OpmCommunityProduct
func (s *OpmCommunityProductSvc) DeleteOpmCommunityProduct(req *proto.OpmCommunityProduct) (*proto.OpmCommunityProduct, error) {

	q := orm.Use(iotmodel.GetDB())
	err := q.Transaction(func(tx *orm.Query) error {
		t := tx.TOpmCommunityProduct
		tLang := tx.TOpmCommunityProductLanguage

		var whereFields []gen.Condition
		do := t.WithContext(context.Background())
		if req.Id != 0 { //整数
			whereFields = append(whereFields, t.Id.Eq(req.Id))
		}
		if req.TenantId != "" { //字符串
			whereFields = append(whereFields, t.TenantId.Eq(req.TenantId))
		}
		if req.ProductName != "" { //字符串
			whereFields = append(whereFields, t.ProductName.Eq(req.ProductName))
		}
		if req.Status != 0 { //整数
			whereFields = append(whereFields, t.Status.Eq(req.Status))
		}
		if req.CreatedBy != 0 { //整数
			whereFields = append(whereFields, t.CreatedBy.Eq(req.CreatedBy))
		}
		if req.UpdatedBy != 0 { //整数
			whereFields = append(whereFields, t.UpdatedBy.Eq(req.UpdatedBy))
		}
		if len(whereFields) == 0 {
			return errors.New("参数异常")
		}

		_, err := tLang.WithContext(context.Background()).Join(t, t.Id.EqCol(tLang.CommunityProductId)).Where(whereFields...).Delete()
		if err != nil {
			return err
		}
		_, err = do.Where(whereFields...).Delete()
		if err != nil {
			logger.Errorf("DeleteByIdOpmCommunityProduct error : %s", err.Error())
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("DeleteByIdOpmCommunityProduct error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpmCommunityProduct
func (s *OpmCommunityProductSvc) DeleteByIdOpmCommunityProduct(req *proto.OpmCommunityProduct) (*proto.OpmCommunityProduct, error) {
	q := orm.Use(iotmodel.GetDB())
	err := q.Transaction(func(tx *orm.Query) error {
		t := tx.TOpmCommunityProduct
		tLang := tx.TOpmCommunityProductLanguage
		_, err := tLang.WithContext(context.Background()).Where(tLang.CommunityProductId.Eq(req.Id)).Delete()
		if err != nil {
			return err
		}
		do := t.WithContext(context.Background()).Where(t.Id.Eq(req.Id))
		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdOpmCommunityProduct error : %s", err.Error())
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("DeleteByIdOpmCommunityProduct error : %s", err.Error())
		return nil, err
	}

	return req, err
}

// 根据数据库表主键批量删除OpmCommunityProduct
func (s *OpmCommunityProductSvc) DeleteByIdsOpmCommunityProduct(req *proto.OpmCommunityProductBatchDeleteRequest) (*proto.OpmCommunityProductBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmCommunityProduct
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmCommunityProduct error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpmCommunityProduct
func (s *OpmCommunityProductSvc) UpdateOpmCommunityProduct(req *proto.OpmCommunityProduct) (*proto.OpmCommunityProduct, error) {
	q := orm.Use(iotmodel.GetDB())
	err := q.Transaction(func(tx *orm.Query) error {
		t := tx.TOpmCommunityProduct
		do := t.WithContext(context.Background())

		var updateField []field.Expr
		if req.TenantId != "" { //字符串
			updateField = append(updateField, t.TenantId)
		}
		if req.ImageUrl != "" { //字符串
			updateField = append(updateField, t.ImageUrl)
		}
		if req.ProductPage != "" { //字符串
			updateField = append(updateField, t.ProductPage)
		}
		if req.ProductName != "" { //字符串
			updateField = append(updateField, t.ProductName)
		}
		if req.ProductDesc != "" { //字符串
			updateField = append(updateField, t.ProductDesc)
		}
		if req.Sort != 0 { //整数
			updateField = append(updateField, t.Sort)
		}
		if req.Status != 0 { //整数
			updateField = append(updateField, t.Status)
		}
		if req.CreatedBy != 0 { //整数
			updateField = append(updateField, t.CreatedBy)
		}
		if req.UpdatedBy != 0 { //整数
			updateField = append(updateField, t.UpdatedBy)
		}
		if len(updateField) > 0 {
			do = do.Select(updateField...)
		}
		//主键条件
		HasPrimaryKey := false

		if req.Id != 0 { //整数
			do = do.Where(t.Id.Eq(req.Id))
			HasPrimaryKey = true
		}

		if !HasPrimaryKey {
			return errors.New("Missing condition")
		}

		dbObj := convert.OpmCommunityProduct_pb2db(req)
		_, err := do.Updates(dbObj)
		if err != nil {
			return err
		}
		if req.Langs != nil && len(req.Langs) > 0 {
			//存储翻译内容
			err = s.SaveLangs(dbObj.Id, req.Langs, tx)
			if err != nil {
				return err
			}
		} else {
			//保存中文默认翻译
			tlang := tx.TOpmCommunityProductLanguage
			_, err = tlang.WithContext(context.Background()).Where(tlang.CommunityProductId.Eq(dbObj.Id), tlang.Lang.Eq("zh")).
				Select(tlang.Name, tlang.Description).Updates(model.TOpmCommunityProductLanguage{
				Name:        dbObj.ProductName,
				Description: dbObj.ProductDesc,
			})
			if err != nil {
				return err
			}
		}
		return nil
	})
	if err != nil {
		logger.Errorf("UpdateOpmCommunityProduct error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmCommunityProductSvc) SaveLangs(comunityProductId int64, Langs []*proto.OpmCommunityProductLanguage, tx *orm.Query) error {
	if Langs != nil && len(Langs) > 0 {
		//先删除后新增
		if comunityProductId != 0 {
			tx.TOpmCommunityProductLanguage.WithContext(context.Background()).
				Where(tx.TOpmCommunityProductLanguage.CommunityProductId.Eq(comunityProductId)).Delete()
		}
		saveLangs := make([]*model.TOpmCommunityProductLanguage, 0)
		for _, lang := range Langs {
			saveLangs = append(saveLangs, &model.TOpmCommunityProductLanguage{
				Id:                 iotutil.GetNextSeqInt64(),
				CommunityProductId: comunityProductId,
				Lang:               lang.Lang,
				Name:               lang.Name,
				Description:        lang.Description,
			})
		}
		if len(saveLangs) > 0 {
			err := tx.TOpmCommunityProductLanguage.WithContext(context.Background()).Create(saveLangs...)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// //根据主键更新所有字段OpmCommunityProduct
func (s *OpmCommunityProductSvc) UpdateAllOpmCommunityProduct(req *proto.OpmCommunityProduct) (*proto.OpmCommunityProduct, error) {
	q := orm.Use(iotmodel.GetDB())
	err := q.Transaction(func(tx *orm.Query) error {
		t := tx.TOpmCommunityProduct
		do := t.WithContext(context.Background())
		// fixme 请检查条件和校验参数
		//要更新的字段,不包括主键
		var updateField []field.Expr

		updateField = append(updateField, t.TenantId)
		updateField = append(updateField, t.ImageUrl)
		updateField = append(updateField, t.ProductPage)
		updateField = append(updateField, t.ProductName)
		updateField = append(updateField, t.ProductDesc)
		updateField = append(updateField, t.Sort)
		updateField = append(updateField, t.Status)
		updateField = append(updateField, t.CreatedBy)
		updateField = append(updateField, t.UpdatedBy)
		if len(updateField) > 0 {
			do = do.Select(updateField...)
		}
		//主键条件
		HasPrimaryKey := false
		if req.Id != 0 { //整数
			do = do.Where(t.Id.Eq(req.Id))
			HasPrimaryKey = true
		}
		if !HasPrimaryKey {
			logger.Error("UpdateAllOpmCommunityProduct error : Missing condition")
			return errors.New("Missing condition")
		}
		dbObj := convert.OpmCommunityProduct_pb2db(req)
		_, err := do.Updates(dbObj)
		if err != nil {
			logger.Errorf("UpdateAllOpmCommunityProduct error : %s", err.Error())
			return err
		}
		//存储翻译内容
		err = s.SaveLangs(dbObj.Id, req.Langs, tx)
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("UpdateAllOpmCommunityProduct error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmCommunityProductSvc) UpdateFieldsOpmCommunityProduct(req *proto.OpmCommunityProductUpdateFieldsRequest) (*proto.OpmCommunityProduct, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmCommunityProduct
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmCommunityProduct error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmCommunityProduct error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmCommunityProduct_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmCommunityProduct error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmCommunityProduct
func (s *OpmCommunityProductSvc) FindOpmCommunityProduct(req *proto.OpmCommunityProductFilter) (*proto.OpmCommunityProduct, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmCommunityProduct
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.ImageUrl != "" { //字符串
		do = do.Where(t.ImageUrl.Eq(req.ImageUrl))
	}
	if req.ProductPage != "" { //字符串
		do = do.Where(t.ProductPage.Eq(req.ProductPage))
	}
	if req.ProductName != "" { //字符串
		do = do.Where(t.ProductName.Eq(req.ProductName))
	}
	if req.ProductDesc != "" { //字符串
		do = do.Where(t.ProductDesc.Eq(req.ProductDesc))
	}
	if req.Sort != 0 { //整数
		do = do.Where(t.Sort.Eq(req.Sort))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmCommunityProduct error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmCommunityProduct_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpmCommunityProduct
func (s *OpmCommunityProductSvc) FindByIdOpmCommunityProduct(req *proto.OpmCommunityProductFilter) (*proto.OpmCommunityProduct, error) {
	q := orm.Use(iotmodel.GetDB())
	t := q.TOpmCommunityProduct
	tLang := q.TOpmCommunityProductLanguage
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmCommunityProduct error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmCommunityProduct_db2pb(dbObj)

	//查询翻译数据
	langs, err := tLang.WithContext(context.Background()).Where(tLang.CommunityProductId.Eq(req.Id)).Find()
	if err != nil {
		logger.Errorf("FindByIdOpmCommunityProduct query lang error : %s", err.Error())
		return nil, err
	}
	res.Langs = make([]*proto.OpmCommunityProductLanguage, 0)
	for _, lang := range langs {
		res.Langs = append(res.Langs, convert.OpmCommunityProductLanguage_db2pb(lang))
	}
	return res, err
}

// 根据分页条件查找OpmCommunityProduct,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmCommunityProductSvc) GetListOpmCommunityProduct(req *proto.OpmCommunityProductListRequest) ([]*proto.OpmCommunityProduct, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpmCommunityProduct
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Like("%" + query.TenantId + "%"))
		}
		if query.ImageUrl != "" { //字符串
			do = do.Where(t.ImageUrl.Like("%" + query.ImageUrl + "%"))
		}
		if query.ProductPage != "" { //字符串
			do = do.Where(t.ProductPage.Like("%" + query.ProductPage + "%"))
		}
		if query.ProductName != "" { //字符串
			do = do.Where(t.ProductName.Like("%" + query.ProductName + "%"))
		}
		if query.ProductDesc != "" { //字符串
			do = do.Where(t.ProductDesc.Like("%" + query.ProductDesc + "%"))
		}
		if query.Sort != 0 { //整数
			do = do.Where(t.Sort.Eq(query.Sort))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Sort
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOpmCommunityProduct
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmCommunityProduct error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}

	//获取产品Id
	productIds := []int64{}
	for _, v := range list {
		productIds = append(productIds, v.Id)
	}

	//查询翻译
	langSvc := OpmCommunityProductLanguageSvc{Ctx: s.Ctx}
	langList, err := langSvc.GetList(productIds)
	langMaps := make(map[int64][]*proto.OpmCommunityProductLanguage)
	if err == nil {
		for _, language := range langList {
			if _, ok := langMaps[language.CommunityProductId]; ok {
				langMaps[language.CommunityProductId] = append(langMaps[language.CommunityProductId], language)
			}
			langMaps[language.CommunityProductId] = append(langMaps[language.CommunityProductId], language)
		}
	}
	result := make([]*proto.OpmCommunityProduct, len(list))
	for i, v := range list {
		result[i] = convert.OpmCommunityProduct_db2pb(v)
		result[i].Langs = langMaps[v.Id]
	}
	return result, total, nil
}

// UpdateStatus修改状态
func (s *OpmCommunityProductSvc) UpdateStatus(req *proto.OpmCommunityProduct) error {
	t := orm.Use(iotmodel.GetDB()).TOpmCommunityProduct
	do := t.WithContext(context.Background())
	updateObj := model.TOpmCommunityProduct{
		Id:     req.Id,
		Status: req.Status,
	}
	_, err := do.Select(t.Status).Where(t.Id.Eq(req.Id)).Updates(updateObj)
	if err != nil {
		logger.Errorf("UpdateStatus error : %s", err.Error())
		return err
	}
	return err
}
