// Code generated by sgen.exe,2022-05-13 13:53:35. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmOtaPublishLogSvc struct {
	Ctx context.Context
}

// 创建OpmOtaPublishLog
func (s *OpmOtaPublishLogSvc) CreateOpmOtaPublishLog(req *proto.OpmOtaPublishLog) (*proto.OpmOtaPublishLog, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublishLog
	do := t.WithContext(context.Background())
	dbObj := convert.OpmOtaPublishLog_pb2db(req)
	dbObj.Id = iotutil.GetNextSeqInt64()
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmOtaPublishLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OpmOtaPublishLog
func (s *OpmOtaPublishLogSvc) DeleteOpmOtaPublishLog(req *proto.OpmOtaPublishLog) (*proto.OpmOtaPublishLog, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublishLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.FirmwareId != 0 { //整数
		do = do.Where(t.FirmwareId.Eq(req.FirmwareId))
	}
	if req.PkgId != 0 { //整数
		do = do.Where(t.PkgId.Eq(req.PkgId))
	}
	if req.IsGray != 0 { //整数
		do = do.Where(t.IsGray.Eq(req.IsGray))
	}
	if req.GrayType != 0 { //整数
		do = do.Where(t.GrayType.Eq(req.GrayType))
	}
	if req.GrayScale != 0 { //整数
		do = do.Where(t.GrayScale.Eq(req.GrayScale))
	}
	if req.Type != 0 { //整数
		do = do.Where(t.Type.Eq(req.Type))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.Did != "" { //字符串
		do = do.Where(t.Did.Eq(req.Did))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.DeviceLog != "" { //字符串
		do = do.Where(t.DeviceLog.Eq(req.DeviceLog))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmOtaPublishLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpmOtaPublishLog
func (s *OpmOtaPublishLogSvc) DeleteByIdOpmOtaPublishLog(req *proto.OpmOtaPublishLog) (*proto.OpmOtaPublishLog, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublishLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmOtaPublishLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpmOtaPublishLog
func (s *OpmOtaPublishLogSvc) DeleteByIdsOpmOtaPublishLog(req *proto.OpmOtaPublishLogBatchDeleteRequest) (*proto.OpmOtaPublishLogBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmOtaPublishLog
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmOtaPublishLog error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpmOtaPublishLog
func (s *OpmOtaPublishLogSvc) UpdateOpmOtaPublishLog(req *proto.OpmOtaPublishLog) (*proto.OpmOtaPublishLog, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublishLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.ProductId != 0 { //整数
		updateField = append(updateField, t.ProductId)
	}
	if req.FirmwareId != 0 { //整数
		updateField = append(updateField, t.FirmwareId)
	}
	if req.PkgId != 0 { //整数
		updateField = append(updateField, t.PkgId)
	}
	if req.IsGray != 0 { //整数
		updateField = append(updateField, t.IsGray)
	}
	if req.GrayType != 0 { //整数
		updateField = append(updateField, t.GrayType)
	}
	if req.GrayScale != 0 { //整数
		updateField = append(updateField, t.GrayScale)
	}
	if req.Type != 0 { //整数
		updateField = append(updateField, t.Type)
	}
	if req.Version != "" { //字符串
		updateField = append(updateField, t.Version)
	}
	if req.Did != "" { //字符串
		updateField = append(updateField, t.Did)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.DeviceLog != "" { //字符串
		updateField = append(updateField, t.DeviceLog)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.TenantId)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmOtaPublishLog error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmOtaPublishLog_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmOtaPublishLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpmOtaPublishLog
func (s *OpmOtaPublishLogSvc) UpdateAllOpmOtaPublishLog(req *proto.OpmOtaPublishLog) (*proto.OpmOtaPublishLog, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublishLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.ProductId)
	updateField = append(updateField, t.FirmwareId)
	updateField = append(updateField, t.PkgId)
	updateField = append(updateField, t.IsGray)
	updateField = append(updateField, t.GrayType)
	updateField = append(updateField, t.GrayScale)
	updateField = append(updateField, t.Type)
	updateField = append(updateField, t.Version)
	updateField = append(updateField, t.Did)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.DeviceLog)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	updateField = append(updateField, t.TenantId)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmOtaPublishLog error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmOtaPublishLog_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmOtaPublishLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmOtaPublishLogSvc) UpdateFieldsOpmOtaPublishLog(req *proto.OpmOtaPublishLogUpdateFieldsRequest) (*proto.OpmOtaPublishLog, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublishLog
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmOtaPublishLog error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmOtaPublishLog error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmOtaPublishLog_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmOtaPublishLog error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmOtaPublishLog
func (s *OpmOtaPublishLogSvc) FindOpmOtaPublishLog(req *proto.OpmOtaPublishLogFilter) (*proto.OpmOtaPublishLog, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublishLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.FirmwareId != 0 { //整数
		do = do.Where(t.FirmwareId.Eq(req.FirmwareId))
	}
	if req.PkgId != 0 { //整数
		do = do.Where(t.PkgId.Eq(req.PkgId))
	}
	if req.IsGray != 0 { //整数
		do = do.Where(t.IsGray.Eq(req.IsGray))
	}
	if req.GrayType != 0 { //整数
		do = do.Where(t.GrayType.Eq(req.GrayType))
	}
	if req.GrayScale != 0 { //整数
		do = do.Where(t.GrayScale.Eq(req.GrayScale))
	}
	if req.Type != 0 { //整数
		do = do.Where(t.Type.Eq(req.Type))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.Did != "" { //字符串
		do = do.Where(t.Did.Eq(req.Did))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.DeviceLog != "" { //字符串
		do = do.Where(t.DeviceLog.Eq(req.DeviceLog))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmOtaPublishLog error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmOtaPublishLog_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpmOtaPublishLog
func (s *OpmOtaPublishLogSvc) FindByIdOpmOtaPublishLog(req *proto.OpmOtaPublishLogFilter) (*proto.OpmOtaPublishLog, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublishLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmOtaPublishLog error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmOtaPublishLog_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OpmOtaPublishLog,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmOtaPublishLogSvc) GetListOpmOtaPublishLog(req *proto.OpmOtaPublishLogListRequest) ([]*proto.OpmOtaPublishLog, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublishLog
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.ProductId != 0 { //整数
			do = do.Where(t.ProductId.Eq(query.ProductId))
		}
		if query.FirmwareId != 0 { //整数
			do = do.Where(t.FirmwareId.Eq(query.FirmwareId))
		}
		if query.PkgId != 0 { //整数
			do = do.Where(t.PkgId.Eq(query.PkgId))
		}
		if query.IsGray != 0 { //整数
			do = do.Where(t.IsGray.Eq(query.IsGray))
		}
		if query.GrayType != 0 { //整数
			do = do.Where(t.GrayType.Eq(query.GrayType))
		}
		if query.GrayScale != 0 { //整数
			do = do.Where(t.GrayScale.Eq(query.GrayScale))
		}
		if query.Type != 0 { //整数
			do = do.Where(t.Type.Eq(query.Type))
		}
		if query.Version != "" { //字符串
			do = do.Where(t.Version.Like("%" + query.Version + "%"))
		}
		if query.Did != "" { //字符串
			do = do.Where(t.Did.Like("%" + query.Did + "%"))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.DeviceLog != "" { //字符串
			do = do.Where(t.DeviceLog.Like("%" + query.DeviceLog + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Like("%" + query.TenantId + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOpmOtaPublishLog
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmOtaPublishLog error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmOtaPublishLog, len(list))
	for i, v := range list {
		result[i] = convert.OpmOtaPublishLog_db2pb(v)
	}
	return result, total, nil
}
