// Code generated by sgen.exe,2022-12-01 10:53:01. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"

	"google.golang.org/protobuf/types/known/timestamppb"
)

type OpmProductMaterialTypeSvc struct {
	Ctx context.Context
}

// 创建OpmProductMaterialType
func (s *OpmProductMaterialTypeSvc) CreateOpmProductMaterialType(req *proto.OpmProductMaterialType) (*proto.OpmProductMaterialType, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialType
	do := t.WithContext(context.Background())
	dbObj := convert.OpmProductMaterialType_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmProductMaterialType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OpmProductMaterialType
func (s *OpmProductMaterialTypeSvc) DeleteOpmProductMaterialType(req *proto.OpmProductMaterialType) (*proto.OpmProductMaterialType, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialType
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmProductMaterialType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpmProductMaterialType
func (s *OpmProductMaterialTypeSvc) DeleteByIdOpmProductMaterialType(req *proto.OpmProductMaterialType) (*proto.OpmProductMaterialType, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialType
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmProductMaterialType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpmProductMaterialType
func (s *OpmProductMaterialTypeSvc) DeleteByIdsOpmProductMaterialType(req *proto.OpmProductMaterialTypeBatchDeleteRequest) (*proto.OpmProductMaterialTypeBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialType
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmProductMaterialType error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpmProductMaterialType
func (s *OpmProductMaterialTypeSvc) UpdateOpmProductMaterialType(req *proto.OpmProductMaterialType) (*proto.OpmProductMaterialType, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialType
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.TenantId)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmProductMaterialType error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmProductMaterialType_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmProductMaterialType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpmProductMaterialType
func (s *OpmProductMaterialTypeSvc) UpdateAllOpmProductMaterialType(req *proto.OpmProductMaterialType) (*proto.OpmProductMaterialType, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialType
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.TenantId)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmProductMaterialType error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmProductMaterialType_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmProductMaterialType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmProductMaterialTypeSvc) UpdateFieldsOpmProductMaterialType(req *proto.OpmProductMaterialTypeUpdateFieldsRequest) (*proto.OpmProductMaterialType, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialType
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmProductMaterialType error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmProductMaterialType error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmProductMaterialType_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmProductMaterialType error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmProductMaterialType
func (s *OpmProductMaterialTypeSvc) FindOpmProductMaterialType(req *proto.OpmProductMaterialTypeFilter) (*proto.OpmProductMaterialType, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialType
	tl := orm.Use(iotmodel.GetDB()).TOpmProductMaterialTypeLanguage
	var item TOpmProductMaterialType
	do := t.WithContext(context.Background()).Select(t.ALL, tl.Id.As("materialLangId"), tl.Lang, tl.Type).LeftJoin(tl, t.Id.EqCol(tl.MaterialTypeId))
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.Type != "" { //字符串
		do = do.Where(tl.Type.Eq(req.Type))
	}
	if req.Lang != "" { //字符串
		do = do.Where(tl.Lang.Eq(req.Lang))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	err := do.Scan(&item)
	if err != nil {
		logger.Errorf("FindOpmProductMaterialType error : %s", err.Error())
		return nil, err
	}
	res := OpmProductMaterialType_db2pb(&item)
	return res, err
}

// 根据数据库表主键查找OpmProductMaterialType
func (s *OpmProductMaterialTypeSvc) FindByIdOpmProductMaterialType(req *proto.OpmProductMaterialTypeFilter) (*proto.OpmProductMaterialType, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialType
	tl := orm.Use(iotmodel.GetDB()).TOpmProductMaterialTypeLanguage
	var item TOpmProductMaterialType
	err := t.WithContext(context.Background()).Select(t.ALL, tl.Id.As("materialLangId"), tl.Lang, tl.Type).LeftJoin(tl, t.Id.EqCol(tl.MaterialTypeId)).Where(t.Id.Eq(req.Id), tl.Lang.Eq(req.Lang)).Scan(&item)
	if err != nil {
		return nil, err
	}

	res := OpmProductMaterialType_db2pb(&item)
	return res, err
}

// 根据分页条件查找OpmProductMaterialType,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmProductMaterialTypeSvc) GetListOpmProductMaterialType(req *proto.OpmProductMaterialTypeListRequest) ([]*proto.OpmProductMaterialType, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	ts := orm.Use(iotmodel.GetDB()).TOpmProductMaterials
	t := orm.Use(iotmodel.GetDB()).TOpmProductMaterialType
	tl := orm.Use(iotmodel.GetDB()).TOpmProductMaterialTypeLanguage
	do := t.WithContext(context.Background()).Select(t.ALL, tl.Id.As("materialTypeLangId"), tl.Lang, tl.Type, ts.MaterialTypeId).LeftJoin(tl, t.Id.EqCol(tl.MaterialTypeId)).LeftJoin(ts, t.Id.EqCol(ts.MaterialTypeId)).Where(tl.Lang.Eq(req.Query.Lang))
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Like("%" + query.TenantId + "%"))
		}
		if query.Type != "" { //字符串
			do = do.Where(tl.Type.Like("%" + query.Type + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	do1 := gen.Table(do.As("p")).Select(field.NewString("p", "*"), field.NewInt64("p", "material_type_id").Count().As("count")).Group(field.NewInt64("p", "id"), field.NewInt64("p", "materialTypeLangId"))
	orderCol := field.NewTime("p", req.OrderKey)
	_, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = field.NewTime("p", "id")
	}
	if req.OrderDesc != "" {
		do1 = do1.Order(orderCol.Desc())
	} else {
		do1 = do1.Order(orderCol)
	}

	var list []*TOpmProductMaterialType
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do1.Count()
		err = do1.Offset(int(offset)).Limit(int(limit)).Scan(&list)
	} else {
		err = do1.Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmProductMaterialType error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmProductMaterialType, len(list))
	for i, v := range list {
		result[i] = OpmProductMaterialType_db2pb(v)
	}
	return result, total, nil
}

type TOpmProductMaterialType struct {
	Id                 int64     `gorm:"column:id;primaryKey" json:"id"`            // 主键
	TenantId           string    `gorm:"column:tenant_id;not null" json:"tenantId"` // 租户ID
	Type               string    `gorm:"column:type;not null" json:"type"`          // 耗材种类
	Count              int64     `gorm:"column:count;not null" json:"count"`        // 关联耗材数量
	CreatedBy          int64     `gorm:"column:created_by" json:"createdBy"`        // 创建人
	CreatedAt          time.Time `gorm:"column:created_at" json:"createdAt"`        // 创建时间
	UpdatedBy          int64     `gorm:"column:updated_by" json:"updatedBy"`        // 修改人
	UpdatedAt          time.Time `gorm:"column:updated_at" json:"updatedAt"`        // 修改时间
	Lang               string    `gorm:"column:lang" json:"lang"`
	MaterialTypeLangId int64     `gorm:"column:materialTypeLangId" json:"materialTypeLangId"`
}

func OpmProductMaterialType_db2pb(src *TOpmProductMaterialType) *proto.OpmProductMaterialType {
	if src == nil {
		return nil
	}
	if src.Id == 0 {
		return nil
	}
	pbObj := proto.OpmProductMaterialType{
		Id:                 src.Id,
		TenantId:           src.TenantId,
		Type:               src.Type,
		Count:              src.Count,
		CreatedBy:          src.CreatedBy,
		CreatedAt:          timestamppb.New(src.CreatedAt),
		UpdatedBy:          src.UpdatedBy,
		UpdatedAt:          timestamppb.New(src.UpdatedAt),
		MaterialTypeLangId: src.MaterialTypeLangId,
		Lang:               src.Lang,
	}
	return &pbObj
}
