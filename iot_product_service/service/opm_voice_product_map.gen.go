// Code generated by sgen.exe,2022-10-27 18:44:20. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"
	"strings"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

var mapGoogleCommandTrait map[string]string

type OpmVoiceProductMapSvc struct {
	Ctx context.Context
}

// 创建OpmVoiceProductMap
func (s *OpmVoiceProductMapSvc) CreateOpmVoiceProductMap(req *proto.OpmVoiceProductMap) (*proto.OpmVoiceProductMap, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMap
	do := t.WithContext(context.Background())
	dbObj := convert.OpmVoiceProductMap_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmVoiceProductMap error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 批量新增映射属性[带回滚]
func (s *OpmVoiceProductMapSvc) BatchCreateOpmVoiceProductMap(voiceProductId int64, voiceNo string, req []*proto.OpmVoiceProductAttrItem) error {

	//用于出错的时候.回滚使用.[保留修改的时候原来的属性数据]
	var attrList = make([]*proto.OpmVoiceProductMap, 0)

	attrListData, _, errAttrList := s.GetListOpmVoiceProductMap(&proto.OpmVoiceProductMapListRequest{
		Page:     1,
		PageSize: 10000000,
		Query: &proto.OpmVoiceProductMap{
			VoiceProductId: voiceProductId,
		},
	})
	if errAttrList != nil {
		return errAttrList
	}
	attrList = append(attrList, attrListData...)
	//删掉原来的属性数据
	s.DeleteOpmVoiceProductMap(&proto.OpmVoiceProductMap{
		VoiceProductId: voiceProductId,
	})

	mapIsError := false
	var mapError error
	var trait string
	var command string
	for _, v := range req {
		mid := iotutil.GetNextSeqInt64()
		trait = ""
		command = ""
		if voiceNo == "google" {
			if len(v.Command) > 0 {
				command = v.Command
				if val, ok := mapGoogleCommandTrait[v.Command]; ok {
					trait = val
				}
			}
			if len(trait) == 0 {
				if strings.ToUpper(v.VDataType) == "ENUM" {
					command = "action.devices.commands.SetModes"
					trait = "action.devices.traits.Modes"
				} else if strings.ToUpper(v.VDataType) == "BOOL" {
					command = "action.devices.commands.SetToggles"
					trait = "action.devices.traits.Toggles"
				}
			}
		}

		_, errMap := s.CreateOpmVoiceProductMap(&proto.OpmVoiceProductMap{
			Id:             mid,
			VoiceProductId: voiceProductId,
			VoiceNo:        voiceNo,
			FunName:        v.FunName,
			AttrCode:       v.AttrCode,
			VoiceCode:      v.VoiceCode,
			ValueType:      v.ValueType,
			VoiceDemo:      v.VoiceDemo,
			AttrUnit:       v.AttrUnit,
			VoiceAttrUnit:  v.VoiceAttrUnit,
			AttrDpid:       v.AttrDpid,
			ValueMap:       v.ValueMap,
			CreatedAt:      timestamppb.New(time.Now()),
			DataType:       v.DataType,
			VDataType:      v.VDataType,
			VoiceSynonym:   v.VoiceSynonym,
			Trait:          trait,
			Command:        command,
		})
		if errMap != nil {
			mapIsError = true
			mapError = errMap
			break
		}
	}
	if mapIsError {
		//如果原来有的.需要重新加入[回滚原来的数据]
		for i := 0; i < len(attrList); i++ {
			attrList[i].Id = iotutil.GetNextSeqInt64()
			s.CreateOpmVoiceProductMap(attrList[i])
		}
		return mapError
	}

	return nil

}

// 根据条件删除OpmVoiceProductMap
func (s *OpmVoiceProductMapSvc) DeleteOpmVoiceProductMap(req *proto.OpmVoiceProductMap) (*proto.OpmVoiceProductMap, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMap
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.VoiceProductId != 0 { //整数
		do = do.Where(t.VoiceProductId.Eq(req.VoiceProductId))
	}
	if req.VoiceNo != "" { //字符串
		do = do.Where(t.VoiceNo.Eq(req.VoiceNo))
	}
	if req.FunName != "" { //字符串
		do = do.Where(t.FunName.Eq(req.FunName))
	}
	if req.AttrCode != "" { //字符串
		do = do.Where(t.AttrCode.Eq(req.AttrCode))
	}
	if req.VoiceCode != "" { //字符串
		do = do.Where(t.VoiceCode.Eq(req.VoiceCode))
	}
	if req.ValueType != 0 { //整数
		do = do.Where(t.ValueType.Eq(req.ValueType))
	}
	if req.VoiceDemo != "" { //字符串
		do = do.Where(t.VoiceDemo.Eq(req.VoiceDemo))
	}
	if req.AttrUnit != "" { //字符串
		do = do.Where(t.AttrUnit.Eq(req.AttrUnit))
	}
	if req.VoiceAttrUnit != "" { //字符串
		do = do.Where(t.VoiceAttrUnit.Eq(req.VoiceAttrUnit))
	}
	if req.AttrDpid != 0 { //整数
		do = do.Where(t.AttrDpid.Eq(req.AttrDpid))
	}
	if req.ValueMap != "" { //字符串
		do = do.Where(t.ValueMap.Eq(req.ValueMap))
	}
	if req.DataType != "" { //字符串
		do = do.Where(t.DataType.Eq(req.DataType))
	}
	if req.VDataType != "" { //字符串
		do = do.Where(t.VDataType.Eq(req.VDataType))
	}

	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmVoiceProductMap error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpmVoiceProductMap
func (s *OpmVoiceProductMapSvc) DeleteByIdOpmVoiceProductMap(req *proto.OpmVoiceProductMap) (*proto.OpmVoiceProductMap, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMap
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmVoiceProductMap error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpmVoiceProductMap
func (s *OpmVoiceProductMapSvc) DeleteByIdsOpmVoiceProductMap(req *proto.OpmVoiceProductMapBatchDeleteRequest) (*proto.OpmVoiceProductMapBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMap
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmVoiceProductMap error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpmVoiceProductMap
func (s *OpmVoiceProductMapSvc) UpdateOpmVoiceProductMap(req *proto.OpmVoiceProductMap) (*proto.OpmVoiceProductMap, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMap
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.VoiceProductId != 0 { //整数
		updateField = append(updateField, t.VoiceProductId)
	}
	if req.VoiceNo != "" { //字符串
		updateField = append(updateField, t.VoiceNo)
	}
	if req.FunName != "" { //字符串
		updateField = append(updateField, t.FunName)
	}
	if req.AttrCode != "" { //字符串
		updateField = append(updateField, t.AttrCode)
	}
	if req.VoiceCode != "" { //字符串
		updateField = append(updateField, t.VoiceCode)
	}
	if req.ValueType != 0 { //整数
		updateField = append(updateField, t.ValueType)
	}
	if req.VoiceDemo != "" { //字符串
		updateField = append(updateField, t.VoiceDemo)
	}
	if req.AttrUnit != "" { //字符串
		updateField = append(updateField, t.AttrUnit)
	}
	if req.VoiceAttrUnit != "" { //字符串
		updateField = append(updateField, t.VoiceAttrUnit)
	}
	if req.AttrDpid != 0 { //整数
		updateField = append(updateField, t.AttrDpid)
	}
	if req.ValueMap != "" { //字符串
		updateField = append(updateField, t.ValueMap)
	}
	if req.DataType != "" { //字符串
		updateField = append(updateField, t.DataType)
	}
	if req.VDataType != "" { //字符串
		updateField = append(updateField, t.VDataType)
	}
	if req.VoiceSynonym != "" {
		updateField = append(updateField, t.VoiceSynonym)
	}
	if req.Trait != "" {
		updateField = append(updateField, t.Trait)
	}
	if req.Command != "" {
		updateField = append(updateField, t.Command)
	}

	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmVoiceProductMap error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmVoiceProductMap_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmVoiceProductMap error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpmVoiceProductMap
func (s *OpmVoiceProductMapSvc) UpdateAllOpmVoiceProductMap(req *proto.OpmVoiceProductMap) (*proto.OpmVoiceProductMap, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMap
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.VoiceProductId)
	updateField = append(updateField, t.VoiceNo)
	updateField = append(updateField, t.FunName)
	updateField = append(updateField, t.AttrCode)
	updateField = append(updateField, t.VoiceCode)
	updateField = append(updateField, t.ValueType)
	updateField = append(updateField, t.VoiceDemo)
	updateField = append(updateField, t.AttrUnit)
	updateField = append(updateField, t.VoiceAttrUnit)
	updateField = append(updateField, t.AttrDpid)
	updateField = append(updateField, t.ValueMap)
	updateField = append(updateField, t.DataType)
	updateField = append(updateField, t.VDataType)
	updateField = append(updateField, t.VoiceSynonym)
	updateField = append(updateField, t.Trait)
	updateField = append(updateField, t.Command)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmVoiceProductMap error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmVoiceProductMap_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmVoiceProductMap error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmVoiceProductMapSvc) UpdateFieldsOpmVoiceProductMap(req *proto.OpmVoiceProductMapUpdateFieldsRequest) (*proto.OpmVoiceProductMap, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMap
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmVoiceProductMap error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmVoiceProductMap error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmVoiceProductMap_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmVoiceProductMap error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmVoiceProductMap
func (s *OpmVoiceProductMapSvc) FindOpmVoiceProductMap(req *proto.OpmVoiceProductMapFilter) (*proto.OpmVoiceProductMap, error) {
	q := orm.Use(iotmodel.GetDB())
	t := q.TOpmVoiceProductMap
	do := t.WithContext(context.Background())
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.VoiceProductId != 0 { //整数
		do = do.Where(t.VoiceProductId.Eq(req.VoiceProductId))
	}
	if req.VoiceNo != "" { //字符串
		do = do.Where(t.VoiceNo.Eq(req.VoiceNo))
	}
	if req.FunName != "" { //字符串
		do = do.Where(t.FunName.Eq(req.FunName))
	}
	if req.AttrCode != "" { //字符串
		do = do.Where(t.AttrCode.Eq(req.AttrCode))
	}
	if req.VoiceCode != "" { //字符串
		do = do.Where(t.VoiceCode.Eq(req.VoiceCode))
	}
	if req.ValueType != 0 { //整数
		do = do.Where(t.ValueType.Eq(req.ValueType))
	}
	if req.VoiceDemo != "" { //字符串
		do = do.Where(t.VoiceDemo.Eq(req.VoiceDemo))
	}
	if req.AttrUnit != "" { //字符串
		do = do.Where(t.AttrUnit.Eq(req.AttrUnit))
	}
	if req.VoiceAttrUnit != "" { //字符串
		do = do.Where(t.VoiceAttrUnit.Eq(req.VoiceAttrUnit))
	}
	if req.AttrDpid != 0 { //整数
		do = do.Where(t.AttrDpid.Eq(req.AttrDpid))
	}
	if req.ValueMap != "" { //字符串
		do = do.Where(t.ValueMap.Eq(req.ValueMap))
	}
	if req.DataType != "" { //字符串
		do = do.Where(t.DataType.Eq(req.DataType))
	}
	if req.VDataType != "" { //字符串
		do = do.Where(t.VDataType.Eq(req.VDataType))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmVoiceProductMap error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmVoiceProductMap_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpmVoiceProductMap
func (s *OpmVoiceProductMapSvc) FindByIdOpmVoiceProductMap(req *proto.OpmVoiceProductMapFilter) (*proto.OpmVoiceProductMap, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProductMap
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmVoiceProductMap error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmVoiceProductMap_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OpmVoiceProductMap,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmVoiceProductMapSvc) GetListOpmVoiceProductMap(req *proto.OpmVoiceProductMapListRequest) ([]*proto.OpmVoiceProductMap, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	q := orm.Use(iotmodel.GetDB())
	t := q.TOpmVoiceProductMap
	tVoiceProduct := q.TOpmVoiceProduct
	tProduct := q.TOpmProduct

	do := t.WithContext(context.Background()).
		LeftJoin(tVoiceProduct, t.VoiceProductId.EqCol(tVoiceProduct.Id)).
		LeftJoin(tProduct, tVoiceProduct.ProductKey.EqCol(tProduct.ProductKey))
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.VoiceProductId != 0 { //整数
			do = do.Where(t.VoiceProductId.Eq(query.VoiceProductId))
		}
		if query.ProductId != 0 {
			do = do.Where(tProduct.Id.Eq(query.ProductId))
		}
		if query.ProductKey != "" {
			do = do.Where(tVoiceProduct.ProductKey.Eq(query.ProductKey))
		}
		if query.VoiceNo != "" { //字符串
			do = do.Where(t.VoiceNo.Like("%" + query.VoiceNo + "%"))
		}
		if query.FunName != "" { //字符串
			do = do.Where(t.FunName.Like("%" + query.FunName + "%"))
		}
		if query.AttrCode != "" { //字符串
			do = do.Where(t.AttrCode.Like("%" + query.AttrCode + "%"))
		}
		if query.VoiceCode != "" { //字符串
			do = do.Where(t.VoiceCode.Like("%" + query.VoiceCode + "%"))
		}
		if query.ValueType != 0 { //整数
			do = do.Where(t.ValueType.Eq(query.ValueType))
		}
		if query.VoiceDemo != "" { //字符串
			do = do.Where(t.VoiceDemo.Like("%" + query.VoiceDemo + "%"))
		}
		if query.AttrUnit != "" { //字符串
			do = do.Where(t.AttrUnit.Like("%" + query.AttrUnit + "%"))
		}
		if query.VoiceAttrUnit != "" { //字符串
			do = do.Where(t.VoiceAttrUnit.Like("%" + query.VoiceAttrUnit + "%"))
		}
		if query.AttrDpid != 0 { //整数
			do = do.Where(t.AttrDpid.Eq(query.AttrDpid))
		}
		if query.ValueMap != "" { //字符串
			do = do.Where(t.ValueMap.Like("%" + query.ValueMap + "%"))
		}
		if query.DataType != "" { //字符串
			do = do.Where(t.DataType.Like("%" + query.DataType + "%"))
		}
		if query.VDataType != "" { //字符串
			do = do.Where(t.VDataType.Like("%" + query.VDataType + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOpmVoiceProductMap
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmVoiceProductMap error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmVoiceProductMap, len(list))
	for i, v := range list {
		result[i] = convert.OpmVoiceProductMap_db2pb(v)
	}
	return result, total, nil
}

func init() {
	mapGoogleCommandTrait = make(map[string]string)
	mapGoogleCommandTrait["action.devices.commands.TimerStart"] = "action.devices.traits.Timer"
	mapGoogleCommandTrait["action.devices.commands.SetHumidity"] = "action.devices.traits.HumiditySetting"
	mapGoogleCommandTrait["action.devices.commands.OnOff"] = "action.devices.traits.OnOff"
}
