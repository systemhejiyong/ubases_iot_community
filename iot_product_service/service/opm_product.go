// Code generated by sgen.exe,2022-05-06 14:01:21. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_common/iotstruct"
	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_product_service/rpc/rpcClient"
	"context"
	"errors"
	"fmt"
	"strings"

	"go-micro.dev/v4/logger"
	"go-micro.dev/v4/metadata"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	"cloud_platform/iot_proto/protos/protosService"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmProductSvc struct {
	Ctx context.Context
}

// 创建OpmProduct，同时会将标准物模型绑定到产品下
func (s *OpmProductSvc) CreateOpmProduct(req *proto.OpmProduct) (*proto.OpmProduct, error) {
	tenantId, err := CheckTenantId(s.Ctx)
	if err != nil {
		return nil, err
	}
	userId, err := GetUserIdInt64(s.Ctx)
	if err != nil {
		return nil, err
	}

	req.TenantId = tenantId
	if req.Name == "" {
		return nil, errors.New("产品名称不能为空")
	}
	if req.ProductTypeId == 0 {
		return nil, errors.New("产品分类不能为空")
	}
	if req.Model == "" {
		return nil, errors.New("产品型号不能为空")
	}
	if req.Identifier == "" {
		req.Identifier = iotutil.GetSecret(6)
	}
	if req.WifiFlag == "" {
		req.WifiFlag = iotutil.GetSecret(4)
	}

	q := orm.Use(iotmodel.GetDB())
	rePro, err := q.TPmProduct.WithContext(s.Ctx).Where(q.TPmProduct.Id.Eq(req.ProductId)).First()
	if err != nil {
		return nil, err
	}

	var translates *iotstruct.TranslatePush
	err = q.Transaction(func(tx *orm.Query) error {
		tProduct := tx.TOpmProduct
		doProduct := tProduct.WithContext(context.Background())
		dbObj := convert.OpmProduct_pb2db(req)
		dbObj.WifiFlag = rePro.WifiFlag
		dbObj.AttributeType = rePro.AttributeType
		dbObj.DeviceNatureKey = rePro.AttributeType
		dbObj.IsVirtualTest = rePro.IsVirtualTest
		if dbObj.Id == 0 {
			dbObj.Id = iotutil.GetNextSeqInt64()
		}
		err = doProduct.Create(dbObj)
		if err != nil {
			return err
		}
		//TODO 读取基础产品的物理模型（修改为：通过缓存读取）
		tModel := tx.TPmThingModel
		doModel := tModel.WithContext(context.Background())
		//读取产品类型的物模型
		tpsModel, err := doModel.Where(tModel.ProductKey.Eq(rePro.ProductKey)).First()
		thingModels := make(map[string]string)

		if err == nil {
			//将物理模型保存到开发者的产品下
			newModelId, err := s.createOpmThingsModel(dbObj.Id, userId, tpsModel.Standard, tpsModel.Version, tpsModel.Description, tx)
			if err != nil {
				return err
			}
			translates, err = s.setMustThingsModel(dbObj.Id, dbObj.ProductKey, rePro.ProductKey, newModelId, userId, tx)
			if err != nil {
				return err
			}
		}

		//新增配网引导
		netWorkGuideSvc := OpmNetworkGuideSvc{}
		err = netWorkGuideSvc.SetDefaultNetworkGuideByBaseProductId(tx, dbObj.Id, req.ProductId, tenantId, dbObj.ImageUrl)
		if err != nil {
			return err
		}

		//创建业务数据库表
		r, err := rpcClient.ClientDeviceLogService.CreateProductLogTable(s.Ctx, &proto.CreateProductLogTableResponse{
			ProductId:   dbObj.Id,
			ProductKey:  dbObj.ProductKey,
			ThingModels: thingModels,
		})
		if err != nil {
			return err
		}
		if r.Code != 200 {
			return errors.New(r.Message)
		}
		//写入缓存
		//iotredis.GetClient().HMSet(context.Background(), iotconst.HKEY_PRODUCT_DATA+iotutil.ToString(dbObj.ProductKey), dbObj).Err()
		return nil
	})
	if err != nil {
		logger.Errorf("CreateOpmProduct error : %s", err.Error())
		return nil, err
	}
	//推送物模型翻译内容
	if translates != nil {
		GetJsPublisherMgr().PushData(&NatsPubData{
			Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
			Data:    iotutil.ToString(translates),
		})
	}
	return req, err
}

// 根据条件删除OpmProduct
func (s *OpmProductSvc) DeleteOpmProduct(req *proto.OpmProduct) (*proto.OpmProduct, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProduct
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductTypeId != 0 { //整数
		do = do.Where(t.ProductTypeId.Eq(req.ProductTypeId))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.NameEn != "" { //字符串
		do = do.Where(t.NameEn.Eq(req.NameEn))
	}
	if req.Identifier != "" { //字符串
		do = do.Where(t.Identifier.Eq(req.Identifier))
	}
	if req.Model != "" { //字符串
		do = do.Where(t.Model.Eq(req.Model))
	}
	if req.ImageUrl != "" { //字符串
		do = do.Where(t.ImageUrl.Eq(req.ImageUrl))
	}
	if req.WifiFlag != "" { //字符串
		do = do.Where(t.WifiFlag.Eq(req.WifiFlag))
	}
	if req.NetworkType != 0 {
		do = do.Where(t.NetworkType.Eq(req.NetworkType))
	}
	if req.AttributeType != 0 { //整数
		do = do.Where(t.AttributeType.Eq(req.AttributeType))
	}
	if req.PowerConsumeType != 0 { //整数
		do = do.Where(t.PowerConsumeType.Eq(req.PowerConsumeType))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.IsVirtualTest != 0 { //整数
		do = do.Where(t.IsVirtualTest.Eq(req.IsVirtualTest))
	}
	if req.IsScheme != 0 { //整数
		do = do.Where(t.IsScheme.Eq(req.IsScheme))
	}
	if req.Desc != "" { //字符串
		do = do.Where(t.Desc.Eq(req.Desc))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.ProductTypeName != "" { //字符串
		do = do.Where(t.ProductTypeName.Eq(req.ProductTypeName))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmProduct error : %s", err.Error())
		return nil, err
	}

	//删除缓存
	//iotredis.GetClient().HDel(context.Background(), iotconst.HKEY_PRODUCT_DATA+iotutil.ToString(req.Id)).Err()
	return req, err
}

// 根据数据库表主键删除OpmProduct
func (s *OpmProductSvc) DeleteByIdOpmProduct(req *proto.OpmProduct) (*proto.OpmProduct, error) {
	tenantId, _ := metadata.Get(s.Ctx, "tenantid")
	if tenantId == "" {
		return nil, errors.New("租户ID获取失败.")
	}
	req.TenantId = tenantId

	t := orm.Use(iotmodel.GetDB()).TOpmProduct
	do := t.WithContext(context.Background())
	// fixme 请检查条件
	do = do.Where(t.TenantId.Eq(tenantId))
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}

	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmProduct error : %s", err.Error())
		return nil, err
	}
	//删除缓存
	//iotredis.GetClient().HDel(context.Background(), iotconst.HKEY_PRODUCT_DATA+iotutil.ToString(req.Id)).Err()
	return req, err
}

// 根据数据库表主键批量删除OpmProduct
func (s *OpmProductSvc) DeleteByIdsOpmProduct(req *proto.OpmProductBatchDeleteRequest) (*proto.OpmProductBatchDeleteRequest, error) {
	var err error
	ids := make([]string, 0)
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmProduct
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmProduct error : %s", err.Error())
			break
		}
		//ids = append(ids, iotconst.HKEY_PRODUCT_DATA+iotutil.ToString(k.Id))
	}
	//删除缓存
	iotredis.GetClient().Del(context.Background(), ids...).Err()
	return req, err
}

// 根据主键更新OpmProduct
func (s *OpmProductSvc) UpdateOpmProduct(req *proto.OpmProduct) (*proto.OpmProduct, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProduct
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.ProductTypeId != 0 { //整数
		updateField = append(updateField, t.ProductTypeId)
	}
	if req.ProductKey != "" { //字符串
		updateField = append(updateField, t.ProductKey)
	}
	if req.Name != "" { //字符串
		updateField = append(updateField, t.Name)
	}
	if req.NameEn != "" { //字符串
		updateField = append(updateField, t.NameEn)
	}
	if req.Identifier != "" { //字符串
		updateField = append(updateField, t.Identifier)
	}
	if req.Model != "" { //字符串
		updateField = append(updateField, t.Model)
	}
	if req.ImageUrl != "" { //字符串
		updateField = append(updateField, t.ImageUrl)
	}
	if req.WifiFlag != "" { //字符串
		updateField = append(updateField, t.WifiFlag)
	}
	if req.NetworkType != 0 {
		updateField = append(updateField, t.NetworkType)
	}
	if req.AttributeType != 0 { //整数
		updateField = append(updateField, t.AttributeType)
	}
	if req.PowerConsumeType != 0 { //整数
		updateField = append(updateField, t.PowerConsumeType)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.IsVirtualTest != 0 { //整数
		updateField = append(updateField, t.IsVirtualTest)
	}
	if req.IsScheme != 0 { //整数
		updateField = append(updateField, t.IsScheme)
	}
	if req.Desc != "" { //字符串
		updateField = append(updateField, t.Desc)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if req.TslUpdatedAt != nil { //整数
		updateField = append(updateField, t.TslUpdatedAt)
	}
	if req.ProductTypeName != "" { //字符串
		updateField = append(updateField, t.ProductTypeName)
	}
	//if req.TenantId != "" { //字符串
	//	updateField = append(updateField, t.TenantId)
	//}
	if req.ControlPanelId != 0 { //控制面板ID
		updateField = append(updateField, t.ControlPanelId)
	}
	if req.ModuleId != 0 { //模组编号
		updateField = append(updateField, t.ModuleId)
	}
	if req.DeviceNatureKey != 0 { //设备性质
		updateField = append(updateField, t.DeviceNatureKey)
	}

	if req.PanelProImg != "" { //面板产品图片
		updateField = append(updateField, t.PanelProImg)
	}
	if req.IsShowImg != 0 { //是否显示图片
		updateField = append(updateField, t.IsShowImg)
	}
	if req.StyleLinkage != "" { //颜色与模式的样式联动
		updateField = append(updateField, t.StyleLinkage)
	}

	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	} else if req.ProductKey != "" {
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateOpmProduct error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmProduct_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmProduct error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpmProduct
func (s *OpmProductSvc) UpdateAllOpmProduct(req *proto.OpmProduct) (*proto.OpmProduct, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProduct
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.ProductTypeId)
	updateField = append(updateField, t.ProductKey)
	updateField = append(updateField, t.Name)
	updateField = append(updateField, t.NameEn)
	updateField = append(updateField, t.Identifier)
	updateField = append(updateField, t.Model)
	updateField = append(updateField, t.ImageUrl)
	updateField = append(updateField, t.WifiFlag)
	updateField = append(updateField, t.NetworkType)
	updateField = append(updateField, t.AttributeType)
	updateField = append(updateField, t.PowerConsumeType)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.IsVirtualTest)
	updateField = append(updateField, t.IsScheme)
	updateField = append(updateField, t.Desc)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	updateField = append(updateField, t.ProductTypeName)
	updateField = append(updateField, t.TenantId)
	updateField = append(updateField, t.ControlPanelId)
	updateField = append(updateField, t.ModuleId)
	updateField = append(updateField, t.DeviceNatureKey)
	updateField = append(updateField, t.TslUpdatedAt)
	updateField = append(updateField, t.PanelProImg)
	updateField = append(updateField, t.IsShowImg)
	updateField = append(updateField, t.StyleLinkage)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	} else if req.ProductKey != "" {
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmProduct error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmProduct_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmProduct error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmProductSvc) UpdateFieldsOpmProduct(req *proto.OpmProductUpdateFieldsRequest) (*proto.OpmProduct, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProduct
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmProduct error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	} else if req.Data.ProductKey != "" {
		do = do.Where(t.ProductKey.Eq(req.Data.ProductKey))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmProduct error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmProduct_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmProduct error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmProduct
func (s *OpmProductSvc) FindOpmProduct(req *proto.OpmProductFilter) (*proto.OpmProduct, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProduct
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductTypeId != 0 { //整数
		do = do.Where(t.ProductTypeId.Eq(req.ProductTypeId))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.NameEn != "" { //字符串
		do = do.Where(t.NameEn.Eq(req.NameEn))
	}
	if req.Identifier != "" { //字符串
		do = do.Where(t.Identifier.Eq(req.Identifier))
	}
	if req.Model != "" { //字符串
		do = do.Where(t.Model.Eq(req.Model))
	}
	if req.ImageUrl != "" { //字符串
		do = do.Where(t.ImageUrl.Eq(req.ImageUrl))
	}
	if req.WifiFlag != "" { //字符串
		do = do.Where(t.WifiFlag.Eq(req.WifiFlag))
	}
	if req.NetworkType != 0 {
		do = do.Where(t.NetworkType.Eq(req.NetworkType))
	}
	if req.AttributeType != 0 { //整数
		do = do.Where(t.AttributeType.Eq(req.AttributeType))
	}
	if req.PowerConsumeType != 0 { //整数
		do = do.Where(t.PowerConsumeType.Eq(req.PowerConsumeType))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.IsVirtualTest != 0 { //整数
		do = do.Where(t.IsVirtualTest.Eq(req.IsVirtualTest))
	}
	if req.IsScheme != 0 { //整数
		do = do.Where(t.IsScheme.Eq(req.IsScheme))
	}
	if req.Desc != "" { //字符串
		do = do.Where(t.Desc.Eq(req.Desc))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.ProductTypeName != "" { //字符串
		do = do.Where(t.ProductTypeName.Eq(req.ProductTypeName))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmProduct error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmProduct_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpmProduct
func (s *OpmProductSvc) FindByIdOpmProduct(req *proto.OpmProductFilter) (*proto.OpmProduct, error) {
	q := orm.Use(iotmodel.GetDB())
	t := q.TOpmProduct
	tType := q.TPmProduct
	do := t.WithContext(context.Background()).LeftJoin(tType, tType.Id.EqCol(t.BaseProductId))

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj := struct {
		model.TOpmProduct
		ProductTypeName string `gorm:"column:product_type_name"`
	}{}
	err := do.Select(t.ALL, tType.Name.As("product_type_name")).Scan(&dbObj)
	if err != nil {
		logger.Errorf("FindByIdOpmProduct error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmProduct_db2pb(&dbObj.TOpmProduct)
	res.ProductTypeName = dbObj.ProductTypeName
	return res, err
}

// 根据分页条件查找OpmProduct,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmProductSvc) GetListOpmProduct(req *proto.OpmProductListRequest) ([]*proto.OpmProduct, int64, error) {
	tenantId := ""
	if !req.IsPlatform {
		tenantId, _ = metadata.Get(s.Ctx, "tenantid")
		if tenantId == "" {
			return nil, 0, errors.New("租户ID获取失败")
		}
	}
	var err error
	q := orm.Use(iotmodel.GetDB())
	t := q.TOpmProduct
	//tType := q.TPmProductType
	tBasePro := q.TPmProduct
	tPanel := q.TPmControlPanels
	do := t.WithContext(context.Background()).
		LeftJoin(tBasePro, tBasePro.Id.EqCol(t.BaseProductId)).
		LeftJoin(tPanel, t.ControlPanelId.EqCol(tPanel.Id))

	if tenantId != "" {
		do = do.Where(t.TenantId.Eq(tenantId))
	}
	query := req.Query

	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.ProductTypeId != 0 { //整数
			//TODO productTypeId查询里面是基础品类
			//do = do.Where(t.ProductTypeId.Eq(query.ProductTypeId))
			do = do.Where(t.BaseProductId.Eq(query.ProductTypeId))
		}
		if query.ProductKey != "" { //字符串
			do = do.Where(t.ProductKey.Like("%" + query.ProductKey + "%"))
		}
		if query.Name != "" { //字符串
			do = do.Where(t.Name.Like("%" + query.Name + "%"))
		}
		if query.NameEn != "" { //字符串
			do = do.Where(t.NameEn.Like("%" + query.NameEn + "%"))
		}
		if query.Identifier != "" { //字符串
			do = do.Where(t.Identifier.Eq(query.Identifier))
		}
		if query.Model != "" { //字符串
			do = do.Where(t.Model.Eq(query.Model))
		}
		if query.ImageUrl != "" { //字符串
			do = do.Where(t.ImageUrl.Like("%" + query.ImageUrl + "%"))
		}
		if query.WifiFlag != "" { //字符串
			do = do.Where(t.WifiFlag.Eq(query.WifiFlag))
		}
		if query.NetworkType != 0 { //字符串
			do = do.Where(t.NetworkType.Eq(query.NetworkType))
		}
		if query.AttributeType != 0 { //整数
			do = do.Where(t.AttributeType.Eq(query.AttributeType))
		}
		if query.PowerConsumeType != 0 { //整数
			do = do.Where(t.PowerConsumeType.Eq(query.PowerConsumeType))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.IsVirtualTest != 0 { //整数
			do = do.Where(t.IsVirtualTest.Eq(query.IsVirtualTest))
		}
		if query.IsScheme != 0 { //整数
			do = do.Where(t.IsScheme.Eq(query.IsScheme))
		}
		if query.Desc != "" { //字符串
			do = do.Where(t.Desc.Like("%" + query.Desc + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
		if query.ProductTypeName != "" { //字符串
			do = do.Where(t.ProductTypeName.Like("%" + query.ProductTypeName + "%"))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Eq(query.TenantId))
		}
		if query.ControlPanelId != 0 { //字符串
			do = do.Where(t.ControlPanelId.Eq(query.ControlPanelId))
		}
		if query.ModuleId != 0 { //字符串
			do = do.Where(t.ModuleId.Eq(query.ModuleId))
		}
		if query.DeviceNatureKey != 0 { //字符串
			do = do.Where(t.DeviceNatureKey.Eq(query.DeviceNatureKey))
		}
	}

	if req.SearchKey != "" {
		//修改模糊查询条件,id修改productKey
		do = do.WithContext(context.Background()).Where(t.WithContext(context.Background()).
			Where(t.Name.Like("%" + req.SearchKey + "%")).
			Or(t.NameEn.Like("%" + req.SearchKey + "%")).Or(t.ProductKey.Like("%" + req.SearchKey + "%")))
		//productId, err := strconv.ParseInt(req.SearchKey, 10, 64)
		//if err != nil {
		//	do = do.WithContext(context.Background()).Where(t.WithContext(context.Background()).Where(t.Name.Like("%" + req.SearchKey + "%")).Or(t.NameEn.Like("%" + req.SearchKey + "%")))
		//} else {
		//	do = do.WithContext(context.Background()).Where(t.WithContext(context.Background()).Where(t.Name.Like("%" + req.SearchKey + "%")).Or(t.NameEn.Like("%" + req.SearchKey + "%")).Or(t.Id.Eq(productId)))
		//}
	}

	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.UpdatedAt.Desc())
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*struct {
		model.TOpmProduct
		ProductTypeDescEn string `gorm:"column:producgtTypeDescEn" json:"producgtTypeDescEn"`
		ProductTypeDesc   string `gorm:"column:producgtTypeDesc" json:"producgtTypeDesc"`
		IsVirtualTestExt  int32  `gorm:"column:isVirtualTestExt" json:"isVirtualTestExt"`
		PanelUrl          string `gorm:"column:url" json:"url"`            // URL
		PanelKey          string `gorm:"column:panel_key" json:"PanelKey"` // md5
	}
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do.Select(t.ALL,
			tBasePro.NameEn.As("producgtTypeDescEn"),
			tBasePro.IsVirtualTest.As("isVirtualTestExt"),
			tBasePro.Name.As("producgtTypeDesc"),
			tPanel.Url, tPanel.PanelKey).ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Select(t.ALL,
			tBasePro.NameEn.As("producgtTypeDescEn"),
			tBasePro.IsVirtualTest.As("isVirtualTestExt"),
			tBasePro.Name.As("producgtTypeDesc"),
			tPanel.Url, tPanel.PanelKey).Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmProduct error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmProduct, len(list))
	for i, v := range list {
		result[i] = convert.OpmProduct_db2pb(&v.TOpmProduct)
		result[i].ProductTypeName = v.ProductTypeDesc
		result[i].IsVirtualTest = v.IsVirtualTestExt
		result[i].PanelKey = v.PanelKey
		result[i].PanelUrl = v.PanelUrl
	}
	return result, total, nil
}

// APP根据分页条件查找OpmProduct,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmProductSvc) GetListAppOpmProduct(req *proto.AppOpmProductListRequest, tenantId string) ([]*proto.OpmProduct, int64, error) {
	tenantId, err := CheckTenantId(s.Ctx)
	if err != nil {
		logger.Errorf("GetListOpmProduct : %s", err.Error())
		return nil, 0, err
	}
	userId, err := GetUserIdInt64(s.Ctx)
	if err != nil {
		logger.Errorf("GetListOpmProduct : %s", err.Error())
		return nil, 0, err
	}
	// fixme 请检查条件和校验参数
	q := orm.Use(iotmodel.GetDB())
	t := q.TOpmProduct
	do := t.WithContext(context.Background())
	do = do.Where(t.TenantId.Eq(tenantId))
	query := req.Query
	if query != nil {
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.ProductTypeId != 0 { //整数
			do = do.Where(t.ProductTypeId.Eq(query.ProductTypeId))
		}
		if query.BaseProductId != 0 { //整数
			do = do.Where(t.BaseProductId.Eq(query.BaseProductId))
		}
		if query.WifiFlag != "" { //字符串
			do = do.Where(t.WifiFlag.Eq(query.WifiFlag))
		}
		if query.ProductTypeName != "" { //字符串
			do = do.Where(t.ProductTypeName.Eq(query.ProductTypeName))
		}
		if userId != 0 && query.IsCheckTestAccount {
			ta := q.TOpmProductTestAccount
			tado := q.TOpmProductTestAccount.WithContext(context.Background())
			tado = tado.Where(ta.UserId.Eq(userId), ta.ProductId.EqCol(t.Id))
			newPro := q.TOpmProduct.WithContext(context.Background())
			do = do.Where(newPro.Exists(tado).Or(t.Status.Eq(1)))
		}
		if len(query.WifiFlags) > 0 { //字符串数组
			productKeys := []string{}
			//wifiFlag 格式 axy_KJDQ-oOJ0babq_p1_47BF7C
			//WifiFlags = [ "KJDQ-oOJ0babq" ] 格式为 wiFiFlag - productKey
			for _, wifiFlag := range query.WifiFlags {
				wifiFlagArr := strings.Split(wifiFlag, "-")
				//以下代为为了兼容之前的方式
				if len(wifiFlagArr) > 1 {
					productKeys = append(productKeys, wifiFlagArr[1])
				} else {
					productKeys = append(productKeys, wifiFlagArr[0])
				}
			}
			// productKey or wifiFlag 兼容处理
			do = do.Where(t.WithContext(context.Background()).Where(t.ProductKey.In(productKeys...)).Or(t.WifiFlag.In(productKeys...)))
		}
	}

	do = do.Where(t.TenantId.Eq(tenantId))

	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOpmProduct

	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.Select(t.ALL).FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Select(t.ALL).Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmProduct error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmProduct, len(list))
	for i, v := range list {
		result[i] = convert.OpmProduct_db2pb(v)
	}
	return result, total, nil
}

func (s *OpmProductSvc) ControlPanelsLists(req *proto.ControlPanelIdsRequest) (*proto.PmControlPanelsVoResponse, error) {
	var err error
	q := orm.Use(iotmodel.GetDB())
	t := q.TPmControlPanels
	tPanel := q.TPmProductPanelRelation
	do := t.WithContext(context.Background())
	do = do.Join(tPanel, tPanel.ControlPanelId.EqCol(t.Id), tPanel.ProductId.Eq(req.ProductId))
	//读取启用的
	do = do.Where(t.Status.Eq(1))
	if req.ControlPanelIds != nil && len(req.ControlPanelIds) > 0 {
		do = do.Where(t.Id.In(req.ControlPanelIds...))
	}
	list := []*model.TPmControlPanels{}
	err = do.Distinct(t.ALL).Scan(&list)

	if err != nil {
		logger.Errorf("ControlPanelsLists error : %s", err.Error())
		return nil, err
	}
	var (
		data = make([]*protosService.PmControlPanelsVo, 0)
	)
	for _, v := range list {
		data = append(data, &protosService.PmControlPanelsVo{
			Id:            v.Id,
			Name:          v.Name,
			NameEn:        v.NameEn,
			Lang:          v.Lang,
			Desc:          v.Desc,
			Url:           v.Url,
			UrlName:       v.UrlName,
			PanelSize:     v.PanelSize,
			PreviewName:   v.PreviewName,
			PreviewUrl:    v.PreviewUrl,
			PreviewSize:   v.PreviewSize,
			ProductTypeId: v.ProductTypeId,
			ProductId:     v.ProductId,
			Status:        v.Status,
		})
	}
	return &protosService.PmControlPanelsVoResponse{Data: data}, err
}

func (s *OpmProductSvc) ModuleLists(req *proto.ModuleIdsRequest) (*proto.PmModuleVoResponse, error) {
	var err error
	q := orm.Use(iotmodel.GetDB())
	t := q.TPmModule
	tRelation := q.TPmProductModuleRelation
	tFSdk := q.TPmFirmware
	do := t.WithContext(context.Background())
	do = do.Join(tRelation, tRelation.ModuleId.EqCol(t.Id), tRelation.ProductId.Eq(req.ProductId))
	do = do.LeftJoin(tFSdk, tFSdk.Id.EqCol(t.FirmwareId))
	//读取启用的
	do = do.Where(t.Status.Eq(1))
	if req.ModuleIds != nil && len(req.ModuleIds) > 0 {
		do = do.Where(t.Id.In(req.ModuleIds...))
	}
	list := []*struct {
		model.TPmModule
		FirmwareName string `gorm:"column:firmware_name" json:"firmwareName"`
		FirmwareKey2 string `gorm:"column:firmware_key2" json:"firmwareKey2"`
	}{}
	err = do.Distinct(t.ALL, tFSdk.Name.As("firmware_name"), tFSdk.FirmwareKey.As("firmware_key2")).Scan(&list)

	if err != nil {
		logger.Errorf("ModuleLists error : %s", err.Error())
		return nil, err
	}
	var (
		data = make([]*protosService.PmModuleVo, 0)
	)
	//查询用户已经绑定的固件
	binded, err := q.TOpmProductModuleRelation.WithContext(context.Background()).
		Where(q.TOpmProductModuleRelation.ProductId.Eq(req.ProductId)).Find()
	modelFirmwareMap := make(map[string]iotstruct.KeyValue)
	if len(binded) > 0 {
		for _, relation := range binded {
			modelFirmwareMap[fmt.Sprintf("%v_%v", relation.ModuleId, relation.FirmwareId)] = iotstruct.KeyValue{
				Key:   iotutil.ToString(relation.FirmwareVersionId),
				Value: relation.FirmwareVersion,
			}
		}
	}

	for _, v := range list {
		moduleVo := &protosService.PmModuleVo{
			Id:           v.Id,
			ModuleName:   v.ModuleName,
			ModuleNameEn: v.ModuleNameEn,
			FirmwareType: v.FirmwareType,
			FirmwareFlag: v.FirmwareFlag,
			FirmwareId:   v.FirmwareId,
			ImgUrl:       v.ImgUrl,
			FileUrl:      v.FileUrl,
			Status:       v.Status,
			Remark:       v.Remark,
			FirmwareName: v.FirmwareName,
			FirmwareKey:  v.FirmwareKey2,
			Version:      v.DefaultVersion,
		}
		if val, ok := modelFirmwareMap[fmt.Sprintf("%v_%v", v.Id, v.FirmwareId)]; ok {
			moduleVo.Version = val.Value
			moduleVo.VersionId = val.Key
		}
		data = append(data, moduleVo)
	}
	return &protosService.PmModuleVoResponse{Data: data}, err
}

type FirmwareVersionInfo struct {
	model.TOpmProductModuleRelation
	Name        string `json:"name"`        // 固件名称
	Flag        string `json:"flag"`        // 固件标识
	FirmwareKey string `json:"firmwareKey"` // 固件版本包大小
	FileName    string `json:"fileName"`    // 文件名称
	FilePath    string `json:"filePath"`    // 固件版本文件
	FileKey     string `json:"fileKey"`     // 固件版本MD5值
	FileSize    int32  `json:"fileSize"`    // 固件版本包大小

	ZipFileName string `json:"zipFileName"` // 资源包名称
	ZipFilePath string `json:"zipFilePath"` // 资源包文件
	ZipFileKey  string `json:"zipFileKey"`  // 资源包MD5值
	ZipFileSize int32  `json:"zipFileSize"` // 资源包包大小

	OpmName     string `json:"opmName"`     // 固件名称
	OpmFlag     string `json:"opmFlag"`     // 固件标识
	OpmFileName string `json:"opmFileName"` // 文件名称
	OpmFilePath string `json:"opmFilePath"` // 固件版本文件
	OpmFileKey  string `json:"opmFileKey"`  // 固件版本MD5值
	OpmFileSize int32  `json:"opmFileSize"` // 固件版本包大小
}

// 根据数据库表主键查找OpmProduct
func (s *OpmProductSvc) FindProductAllDetaialById(req *proto.OpmProductPrimarykey) (*proto.OpmProductAllDetails, error) {
	q := orm.Use(iotmodel.GetDB())
	t := q.TOpmProduct
	tType := q.TPmProduct
	do := t.WithContext(context.Background()).LeftJoin(tType, tType.Id.EqCol(t.BaseProductId))
	if req.Id == 0 {
		return nil, errors.New("参数异常")
	}

	//开发产品信息
	dbObj := new(struct {
		*model.TOpmProduct
		ProductTypeDescEn string `gorm:"column:producgtTypeDescEn" json:"producgtTypeDescEn"`
		ProductTypeDesc   string `gorm:"column:producgtTypeDesc" json:"producgtTypeDesc"`
	})
	err := do.Select(t.ALL,
		tType.NameEn.As("producgtTypeDescEn"),
		tType.Name.As("producgtTypeDesc")).Where(t.Id.Eq(req.Id)).Scan(&dbObj)
	if err != nil {
		logger.Errorf("FindProductAllDetaialById error : %s", err.Error())
		return nil, err
	}
	if dbObj == nil {
		logger.Errorf("FindProductAllDetaialById not found product")
		return nil, err
	}
	ret := new(proto.OpmProductAllDetails)
	ret.Product = convert.OpmProduct_db2pb(dbObj.TOpmProduct)
	ret.Product.ProductTypeName = dbObj.ProductTypeDesc

	//基础产品信息
	dbProduct, err := q.TPmProduct.WithContext(context.Background()).Where(q.TPmProduct.Id.Eq(dbObj.BaseProductId)).First()
	if err != nil {
		logger.Errorf("FindProductAllDetaialById TPmProduct error : %s", err.Error())
		return nil, err
	}
	ret.BaseProduct = convert.PmProduct_db2pb(dbProduct)

	//产品控制面板数据，获取产品关联的面板数据
	panelKey := ""
	if dbObj.AppPanelType == 2 || dbObj.AppPanelType == 3 {
		dbControlPanel, err := q.TOpmPanel.WithContext(context.Background()).Where(q.TOpmPanel.Id.Eq(dbObj.ControlPanelId)).First()
		if err == nil {
			ret.ControlPanel = convert.OpmPanel_db2Panelpb(dbControlPanel)
			ret.ControlPanel.AppPanelType = dbObj.AppPanelType
			panelKey = dbControlPanel.PanelKey
		}
	} else {
		dbControlPanel, err := q.TPmControlPanels.WithContext(context.Background()).Where(q.TPmControlPanels.Id.Eq(dbObj.ControlPanelId)).First()
		if err == nil {
			ret.ControlPanel = convert.PmControlPanels_db2pb(dbControlPanel)
			ret.ControlPanel.AppPanelType = 1
			panelKey = dbControlPanel.PanelKey
		}
	}
	//检查面板更新情况
	if panelKey != "" {
		tPanel := q.TOpmProductPanelRelation
		//兼容逻辑
		relationPanel, err := tPanel.WithContext(context.Background()).Where(tPanel.ControlPanelId.Eq(dbObj.ControlPanelId), tPanel.ProductId.Eq(dbObj.Id)).First()
		if err == nil && relationPanel != nil {
			convert.OpmProductRelationPanels_db2pb(ret.ControlPanel, relationPanel)
		}
		if panelKey != ret.ControlPanel.PanelKey {
			ret.ControlPanel.IsUpgrade = true
		}
		if ret.Product.TslUpdatedAt != nil {
			//如果更新时间大于关联的创建时间，则代表物模型存在过修改
			if relationPanel.CreatedAt.Unix() < ret.Product.TslUpdatedAt.AsTime().Unix() {
				ret.Product.IsUpgradeTsl = 1
			}
		}
	}

	//产品模组
	//err = s.getProductModule(q, req.Id, dbObj.ModuleId, dbObj.FirmwareId, ret)
	err = s.getProductModuleFirmware(q, req.Id, ret)
	if err != nil {
		logger.Errorf("FindProductAllDetaialById getProductModule error : %s", err.Error())
		return nil, err
	}

	//读取自定义固件列表
	err = s.getCustomFirmware(q, req.Id, ret)
	if err != nil {
		logger.Errorf("FindProductAllDetaialById getCustomFirmware error : %s", err.Error())
		return nil, err
	}

	thingModelSvc := OpmThingModelSvc{Ctx: s.Ctx}
	thingModelData, err := thingModelSvc.GetOpmThingModelByProduct(&proto.OpmThingModelByProductRequest{
		ProductId: req.Id,
		Custom:    -1,
	})
	if err != nil {
		logger.Errorf("FindProductAllDetaialById OpmThingModelSvc error : %s", err.Error())
		return nil, err
	}
	ret.ThingModes = thingModelData
	return ret, err
}

// 获取自定义固件列表
func (s *OpmProductSvc) getCustomFirmware(q *orm.Query, productId int64, ret *proto.OpmProductAllDetails) error {
	tOFV := q.TOpmFirmware
	tOV := q.TOpmFirmwareVersion
	var customFirmwares []*FirmwareVersionInfo
	err := q.TOpmProductModuleRelation.WithContext(context.Background()).
		Select(q.TOpmProductModuleRelation.ALL, tOFV.Name, tOFV.Flag,
			tOV.ProdFileName, tOV.ProdFilePath, tOV.ProdFileKey, tOV.ProdFileSize).
		LeftJoin(tOV, tOV.Id.EqCol(q.TOpmProductModuleRelation.FirmwareVersionId), q.TOpmProductModuleRelation.IsCustom.Eq(1)).
		LeftJoin(tOFV, tOFV.Id.EqCol(tOV.FirmwareId)).
		Where(q.TOpmProductModuleRelation.ProductId.Eq(productId),
			q.TOpmProductModuleRelation.IsCustom.Eq(1)).Scan(&customFirmwares)
	if err != nil {
		return err
	}

	firmwareIds := []int64{}
	for _, info := range customFirmwares {
		firmwareIds = append(firmwareIds, info.FirmwareId)
	}
	//统计固件下的版本总数
	firmwareCountMap := map[int64]int32{}
	if len(firmwareIds) > 0 {
		//查询租户自定义固件
		var resultCount []*struct {
			Id    int64
			Count int32
		}
		err := q.TOpmFirmwareVersion.WithContext(context.Background()).Where(q.TOpmFirmwareVersion.FirmwareId.In(firmwareIds...)).
			Select(q.TOpmFirmwareVersion.FirmwareId.As("id"), q.TOpmFirmwareVersion.FirmwareId.Count().As("count")).
			Group(q.TOpmFirmwareVersion.FirmwareId).Scan(&resultCount)
		if err == nil {
			for _, s2 := range resultCount {
				firmwareCountMap[s2.Id] = s2.Count
			}
		}
	}
	for _, info := range customFirmwares {
		var versionCount int32 = 1
		if v, ok := firmwareCountMap[info.FirmwareId]; ok {
			versionCount = v
		}
		ret.CustomFirmwares = append(ret.CustomFirmwares, &proto.OpmFirmwareSelectInfo{
			Id:           info.Id,
			FirmwareName: info.Name,
			FirmwareFlag: info.Flag,
			FirmwareType: info.FirmwareType,
			FirmwareKey:  info.FirmwareKey,
			Version:      info.FirmwareVersion,
			VersionId:    info.FirmwareVersionId,
			ProductId:    info.ProductId,
			FirmwareId:   info.FirmwareId,
			VersionCount: versionCount,
		})
	}

	return nil
}

// 获取自定义固件列表
func (s *OpmProductSvc) getProductModuleFirmware(q *orm.Query, productId int64, ret *proto.OpmProductAllDetails) error {
	tf := q.TPmFirmware
	tfv := q.TPmFirmwareVersion
	tpmr := q.TOpmProductModuleRelation
	var customFirmwares []*FirmwareVersionInfo
	err := tpmr.WithContext(context.Background()).
		Select(tpmr.ALL, tf.Name, tf.Flag, tf.FirmwareKey,
			tfv.FileName, tfv.FilePath, tfv.FileKey, tfv.FileSize,
			tfv.ZipFileName, tfv.ZipFilePath, tfv.ZipFileKey, tfv.ZipFileSize).
		LeftJoin(tfv, tfv.Id.EqCol(tpmr.FirmwareVersionId), tpmr.IsCustom.Eq(2)).
		LeftJoin(tf, tf.Id.EqCol(tfv.FirmwareId)).
		Where(tpmr.ProductId.Eq(productId), tpmr.IsCustom.Eq(2)).Scan(&customFirmwares)
	if err != nil {
		return err
	}
	if len(customFirmwares) == 0 {
		return nil
	}
	firmware := customFirmwares[0]
	moduleId := customFirmwares[0].ModuleId
	dbModules, err := q.TPmModule.WithContext(context.Background()).Where(q.TPmModule.Id.Eq(moduleId)).Find()
	if err != nil {
		return err
	}
	if len(dbModules) == 0 {
		return nil
	}
	dbModule := dbModules[0]
	ret.Module = convert.PmModule_db2pb(dbModule)
	ret.Module.FirmwareName = firmware.Name
	ret.Module.DefaultVersion = firmware.FirmwareVersion
	ret.Module.FirmwareUrl = firmware.ZipFilePath
	ret.Module.FirmwareName = firmware.Name
	ret.Module.FirmwareFlag = firmware.Flag
	ret.Module.FirmwareKey = firmware.FirmwareKey
	ret.Module.FirmwareType = iotutil.ToString(firmware.FirmwareType)
	ret.Module.FileName = firmware.FileName
	ret.Module.FirmwareId = firmware.FirmwareId

	//固件版本总数统计
	tm := q.TPmModule
	tRelation := q.TPmModuleFirmwareVersion
	do := tRelation.WithContext(context.Background()).
		Join(tm, tRelation.ModuleId.EqCol(tm.Id), tm.Status.Eq(1)).
		LeftJoin(tf, tf.Id.EqCol(tm.FirmwareId)).
		Where(tm.Id.Eq(dbModule.Id))
	versionCount, err := do.Count()
	if err == nil {
		ret.Module.VersionCount = int32(versionCount)
	}
	return nil
}

// 获取产品Module信息 （过时）
func (s *OpmProductSvc) getProductModule(q *orm.Query, productId, moduleId, firmwareId int64, ret *proto.OpmProductAllDetails) error {
	if moduleId == 0 {
		return nil
	}
	dbModules, err := q.TPmModule.WithContext(context.Background()).Where(q.TPmModule.Id.Eq(moduleId)).Find()
	if err != nil {
		return err
	}
	if len(dbModules) == 0 {
		return nil
	}
	dbModule := dbModules[0]
	ret.Module = convert.PmModule_db2pb(dbModule)
	tf := q.TPmFirmware
	firmware, err := tf.WithContext(context.Background()).Where(tf.Id.Eq(dbModule.FirmwareId), tf.Status.Eq(1)).Find()
	if err != nil {
		return err
	}
	if len(firmware) > 0 {
		ret.Module.FirmwareName = firmware[0].Name
	}
	//查询用户已经绑定的固件
	tFV := q.TPmFirmware
	tV := q.TPmFirmwareVersion
	var binded []*FirmwareVersionInfo
	err = q.TOpmProductModuleRelation.WithContext(context.Background()).
		Select(q.TOpmProductModuleRelation.ALL, tV.FileName, tV.FilePath, tV.FileKey, tV.FileSize, tFV.Name, tFV.Flag).
		LeftJoin(tV, tV.Id.EqCol(q.TOpmProductModuleRelation.FirmwareVersionId), q.TOpmProductModuleRelation.IsCustom.Eq(2)).
		LeftJoin(tFV, tFV.Id.EqCol(tV.FirmwareId)).
		Where(q.TOpmProductModuleRelation.ProductId.Eq(productId), q.TOpmProductModuleRelation.IsCustom.Eq(2)).Scan(&binded)

	modelFirmwareMap := make(map[string]*FirmwareVersionInfo)
	if len(binded) > 0 {
		for _, relation := range binded {
			modelFirmwareMap[fmt.Sprintf("%v_%v", relation.ModuleId, relation.FirmwareId)] = relation
		}
	}
	if val, ok := modelFirmwareMap[fmt.Sprintf("%v_%v", moduleId, firmwareId)]; ok {
		ret.Module.DefaultVersion = val.FirmwareVersion
		ret.Module.FirmwareUrl = iotutil.MapGetStringVal(val.OpmFilePath, val.FilePath)
		ret.Module.FirmwareName = iotutil.MapGetStringVal(val.OpmName, val.Name)
		ret.Module.FirmwareFlag = iotutil.MapGetStringVal(val.FirmwareKey, val.FirmwareKey)
		ret.Module.FirmwareType = iotutil.ToString(val.FirmwareType)
		ret.Module.FileName = iotutil.MapGetStringVal(val.OpmFileName, val.FileName)
		ret.Module.FirmwareId = firmwareId
	}
	return nil
}

// 控制面板的地址和Key
func (s *OpmProductSvc) ControlPanelsUrlAndMd5(req *proto.ControlPanelsUrlAndMd5Request) (*proto.ControlPanelsUrlAndMd5Response, error) {
	var q = orm.Use(iotmodel.GetDB())
	tPanel := q.TOpmProductPanelRelation
	//指定面板加载，如果存在面板Id，则通过面板Id直接加载最新的面板
	if req.PanelId != 0 {
		return s.ReadAppointPanel(req)
	}
	//如果面板关联数据中存在地址和md5等信息，使用关联面板冗余数据
	relationPanel, err := tPanel.WithContext(context.Background()).Where(tPanel.ProductId.Eq(req.ProductId)).First()
	info := &proto.ControlPanelsUrlAndMd5Response{}
	if err == nil && relationPanel != nil && relationPanel.PanelUrl != "" {
		info.Url = relationPanel.PanelUrl
		info.ControlpageMd5 = relationPanel.PanelKey
		return info, nil
	}

	//兼容原始逻辑（当关联表未存储面板信息的时候，使用主面板信息）
	if info.Url == "" {
		tOpmProduct := q.TOpmProduct
		tPmControlPanels := q.TPmControlPanels
		do := tOpmProduct.WithContext(context.Background()).LeftJoin(tPmControlPanels, tOpmProduct.ControlPanelId.EqCol(tPmControlPanels.Id))
		do = do.Where(tOpmProduct.Id.Eq(req.ProductId), tPmControlPanels.DeletedAt.IsNull())
		var result *struct {
			Url      string `gorm:"column:url" json:"url"`            // URL
			PanelKey string `gorm:"column:panel_key" json:"PanelKey"` // md5
		}
		err := do.Select(tPmControlPanels.Url, tPmControlPanels.PanelKey).Scan(&result)
		if err != nil {
			logger.Errorf("ControlPanelsUrlAndMd5 error")
			return nil, errors.New("ControlPanelsUrlAndMd5 error")
		}
		if result == nil || result.Url == "" {
			logger.Errorf("ControlPanelsUrlAndMd5 Url is empty")
			return nil, errors.New("ControlPanelsUrlAndMd5 Url is empty")
		}
		info.Url = result.Url
		info.ControlpageMd5 = result.PanelKey
	}
	return info, nil
}

func (s *OpmProductSvc) ReadAppointPanel(req *proto.ControlPanelsUrlAndMd5Request) (*proto.ControlPanelsUrlAndMd5Response, error) {
	var (
		q    = orm.Use(iotmodel.GetDB())
		err  error
		info *proto.ControlPanelsUrlAndMd5Response
	)
	//面板预览
	switch req.AppPanelType {
	case iotconst.APP_PANEL_PUBLIC:
		tPmPanel := q.TPmControlPanels
		panelInfo, err := tPmPanel.WithContext(context.Background()).Where(tPmPanel.Id.Eq(req.PanelId)).First()
		if err != nil {
			return nil, err
		}
		info = &proto.ControlPanelsUrlAndMd5Response{}
		info.Url = panelInfo.Url
		info.ControlpageMd5 = panelInfo.PanelKey
		return info, nil
	case iotconst.APP_PANEL_CUSTOM_STUDIO, iotconst.APP_PANEL_CUSTOM_DEVELOP:
		tPanel := q.TOpmPanel
		panelInfo, err := tPanel.WithContext(context.Background()).Where(tPanel.Id.Eq(req.PanelId)).First()
		if err != nil {
			return nil, err
		}
		info = &proto.ControlPanelsUrlAndMd5Response{}
		info.Url = panelInfo.PanelUrl
		info.ControlpageMd5 = panelInfo.PanelKey
		return info, nil
	default:
		err = errors.New(fmt.Sprintf("面板类型不存在，参数：panelId:%v, appPanelType:%v", req.PanelId, req.AppPanelType))
	}
	return info, err
}

// APP根据分页条件查找OpmProduct,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmProductSvc) ListsByProductIds(req *proto.ListsByProductIdsRequest) ([]*proto.OpmProduct, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	q := orm.Use(iotmodel.GetDB())
	t := q.TOpmProduct
	do := t.WithContext(context.Background())
	if req.ProductIds == nil || len(req.ProductIds) == 0 {
		return nil, 0, errors.New("请传入产品编号集合")
	}
	if len(req.ProductIds) > 0 { //int64数组
		do = do.Where(t.WithContext(context.Background()).Where(t.Id.In(req.ProductIds...)))
	}
	var list []*model.TOpmProduct
	var total int64
	err = do.Scan(&list)
	total = int64(len(list))
	if err != nil {
		logger.Errorf("GetListOpmProduct error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	resList := make([]*proto.OpmProduct, 0)
	for _, v := range list {
		resList = append(resList, convert.OpmProduct_db2pb(v))
	}
	return resList, total, nil
}

// APP根据分页条件查找OpmProduct,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmProductSvc) PanelListsByProductIds(req *proto.ListsByProductIdsRequest) ([]*proto.OpmProduct, int64, error) {
	if req.ProductIds == nil || len(req.ProductIds) == 0 {
		return nil, 0, errors.New("请传入产品编号集合")
	}

	var err error
	q := orm.Use(iotmodel.GetDB())
	tProduct := q.TOpmProduct
	resList := make([]*proto.OpmProduct, 0)

	var list []*struct {
		model.TOpmProduct
		Url      string `gorm:"column:url" json:"url"`            // URL
		PanelKey string `gorm:"column:panel_key" json:"PanelKey"` // md5
	}

	tPanelRelations := q.TOpmProductPanelRelation
	err = tPanelRelations.WithContext(context.Background()).
		LeftJoin(tProduct, tProduct.Id.EqCol(tPanelRelations.ProductId)).Where(tPanelRelations.ProductId.In(req.ProductIds...)).
		Select(tProduct.ALL, tPanelRelations.PanelUrl.As("url"), tPanelRelations.PanelKey).Distinct().Scan(&list)

	hasPros := map[int64]bool{}
	if err == nil && list != nil && len(list) > 0 {
		for _, v := range list {
			if v.Url == "" {
				if _, ok := hasPros[v.Id]; !ok {
					newData := convert.OpmProduct_db2pb(&v.TOpmProduct)
					newData.PanelUrl = v.Url
					newData.PanelKey = v.PanelKey
					resList = append(resList, newData)
				}
				hasPros[v.Id] = true
			}
		}
	}
	//补全剩余未关联的数据（兼容逻辑，如果关联信息补全，则直接关联面板查询）
	otherProIds := make([]int64, 0)
	for _, pro := range req.ProductIds {
		if _, ok := hasPros[pro]; !ok {
			otherProIds = append(otherProIds, pro)
		}
	}

	if len(otherProIds) > 0 {
		tPanel := q.TPmControlPanels
		do := tProduct.WithContext(context.Background()).LeftJoin(tPanel, tProduct.ControlPanelId.EqCol(tPanel.Id)).
			Where(tProduct.Id.In(otherProIds...))

		var total int64
		err = do.Select(tProduct.ALL, tPanel.Url, tPanel.PanelKey).Scan(&list)
		total = int64(len(list))
		if err != nil {
			logger.Errorf("GetListOpmProduct error : %s", err.Error())
			return nil, 0, err
		}
		if len(list) == 0 {
			return nil, total, nil
		}
		for _, v := range list {
			newData := convert.OpmProduct_db2pb(&v.TOpmProduct)
			//面板信息
			newData.PanelUrl = v.Url
			newData.PanelKey = v.PanelKey
			resList = append(resList, newData)
		}
	}
	return resList, int64(len(resList)), nil
}

func (s *OpmProductSvc) ResetOpmProductThingsModel(req *proto.OpmProduct) error {
	userId, err := GetUserIdInt64(s.Ctx)
	if err != nil {
		return err
	}

	q := orm.Use(iotmodel.GetDB())
	productInfo, err := q.TOpmProduct.WithContext(s.Ctx).Where(q.TOpmProduct.Id.Eq(req.Id)).First()
	if err != nil {
		return err
	}

	pmPro, err := q.TPmProduct.WithContext(s.Ctx).Where(q.TPmProduct.Id.Eq(productInfo.BaseProductId)).First()
	if err != nil {
		return err
	}
	err = q.Transaction(func(tx *orm.Query) error {
		//删除原始物模型
		tThingsModel := tx.TOpmThingModel
		thingsModel, err := tThingsModel.WithContext(context.Background()).Where(tThingsModel.ProductId.Eq(req.Id)).First()
		if err != nil {
			return err
		}
		//删除原来的功能（非自定义功能）
		tModelEvents := tx.TOpmThingModelEvents
		_, err = tModelEvents.WithContext(context.Background()).Where(tModelEvents.ModelId.Eq(thingsModel.Id), tModelEvents.Custom.Eq(0)).Delete()
		if err != nil {
			return err
		}
		tModelProperties := tx.TOpmThingModelProperties
		_, err = tModelProperties.WithContext(context.Background()).Where(tModelProperties.ModelId.Eq(thingsModel.Id), tModelProperties.Custom.Eq(0)).Delete()
		if err != nil {
			return err
		}
		tModelServices := tx.TOpmThingModelServices
		_, err = tModelServices.WithContext(context.Background()).Where(tModelServices.ModelId.Eq(thingsModel.Id), tModelServices.Custom.Eq(0)).Delete()

		s.setMustThingsModel(productInfo.Id, productInfo.ProductKey, pmPro.ProductKey, thingsModel.Id, userId, tx)
		return nil
	})
	if err != nil {
		logger.Errorf("CreateOpmProduct error : %s", err.Error())
		return err
	}
	return err
}

// 设置必要的物模型数据
func (s OpmProductSvc) setMustThingsModel(opmProductId int64, opmProductKey string, pmProductKey string, opmModelId int64, userId int64, tx *orm.Query) (*iotstruct.TranslatePush, error) {
	productId := iotutil.ToString(opmProductId)
	tModel := tx.TPmThingModel
	doModel := tModel.WithContext(context.Background())
	//读取产品类型的物模型
	tpsModel, err := doModel.Where(tModel.ProductKey.Eq(pmProductKey)).First()

	translates := &iotstruct.TranslatePush{SourceTable: iotconst.LANG_PRODUCT_THINGS_MODEL}
	//.SetContent(iotconst.LANG_PRODUCT_NAME, req.ProductKey, "name", req.Name, req.NameEn)

	if err == nil {
		tModelEvents := tx.TPmThingModelEvents
		//将Valid=1 ModeId=product.ModelId的物模型转存给客户的产品
		tpsModelEvents, err := tModelEvents.WithContext(context.Background()).Join(tModel, tModelEvents.ModelId.EqCol(tModel.Id), tModel.Id.Eq(tpsModel.Id)).Where(tModelEvents.ModelId.Eq(tpsModel.Id), tModelEvents.Valid.Eq(1), tModelEvents.Required.Eq(1)).Find()
		if err != nil {
			return nil, err
		}
		tModelProperties := tx.TPmThingModelProperties
		tpsModelProperties, err := tModelProperties.WithContext(context.Background()).Join(tModel, tModelProperties.ModelId.EqCol(tModel.Id), tModel.Id.Eq(tpsModel.Id)).Where(tModelProperties.ModelId.Eq(tpsModel.Id), tModelProperties.Valid.Eq(1), tModelProperties.Required.Eq(1)).Find()
		if err != nil {
			return nil, err
		}
		tModelServices := tx.TPmThingModelServices
		tpsModelServices, err := tModelServices.WithContext(context.Background()).Join(tModel, tModelServices.ModelId.EqCol(tModel.Id), tModel.Id.Eq(tpsModel.Id)).Where(tModelServices.ModelId.Eq(tpsModel.Id), tModelServices.Valid.Eq(1), tModelServices.Required.Eq(1)).Find()
		if err != nil {
			return nil, err
		}

		//功能事件
		tOpmModelEvents := tx.TOpmThingModelEvents
		doOpmModelEvents := tOpmModelEvents.WithContext(context.Background())
		saveEvents := make([]*model.TOpmThingModelEvents, 0)
		for _, e := range tpsModelEvents {
			tmEvent := convert.ThingModelEvents_Pm2Opm(e)
			tmEvent.Id = iotutil.GetNextSeqInt64()
			tmEvent.ProductId = productId
			tmEvent.ProductKey = opmProductKey
			tmEvent.ModelId = opmModelId
			tmEvent.CreatedBy = userId
			tmEvent.UpdatedBy = userId
			saveEvents = append(saveEvents, tmEvent)
		}
		doOpmModelEvents.Create(saveEvents...)

		//功能属性
		tOpmModelProperties := tx.TOpmThingModelProperties
		doOpmModelProperties := tOpmModelProperties.WithContext(context.Background())
		saveProperties := make([]*model.TOpmThingModelProperties, 0)
		for _, p := range tpsModelProperties {
			tmPropery := convert.ThingModelProperties_Pm2Opm(p)
			tmPropery.Id = iotutil.GetNextSeqInt64()
			tmPropery.ProductId = productId
			tmPropery.ProductKey = opmProductKey
			tmPropery.ModelId = opmModelId
			tmPropery.CreatedBy = userId
			tmPropery.UpdatedBy = userId
			saveProperties = append(saveProperties, tmPropery)
			//sourceRowId string, fieldName string, name string, nameEn string
			SetTranslatesContent(translates, tmPropery)
		}
		doOpmModelProperties.Create(saveProperties...)

		//功能服务
		tOpmModelServices := tx.TOpmThingModelServices
		doOpmModelServices := tOpmModelServices.WithContext(context.Background())
		saveServices := make([]*model.TOpmThingModelServices, 0)
		for _, s := range tpsModelServices {
			tmService := convert.ThingModelServices_Pm2Opm(s)
			tmService.Id = iotutil.GetNextSeqInt64()
			tmService.ProductId = productId
			tmService.ProductKey = opmProductKey
			tmService.ModelId = opmModelId
			tmService.CreatedBy = userId
			tmService.UpdatedBy = userId
			saveServices = append(saveServices, tmService)
		}
		doOpmModelServices.Create(saveServices...)
	}
	return translates, nil
}

// 创建物模型Model数据
func (s OpmProductSvc) createOpmThingsModel(productId int64, userId int64, standard int32, version, desc string, tx *orm.Query) (int64, error) {
	//将物理模型保存到开发者的产品下
	tOpmModel := tx.TOpmThingModel
	doOpmModel := tOpmModel.WithContext(context.Background())
	newModelId := iotutil.GetNextSeqInt64()
	err := doOpmModel.Create(&model.TOpmThingModel{
		Id:          newModelId,
		ProductId:   productId,
		Standard:    standard,
		Version:     version,
		Description: desc,
		CreatedBy:   userId,
		UpdatedBy:   userId,
	})
	if err != nil {
		return 0, err
	}
	return newModelId, nil
}

// 合并产品的物理模型 （以第一一个产品的物模型为准，dpid交集合并，同一个dpid如果属性不同，则以第一个产品的物模型为准）
func (s OpmProductSvc) MergeProductThingsModel(productIds []string, productKeys []string) ([]*proto.OpmThingModelProperties, error) {
	if len(productIds) == 0 && len(productKeys) == 0 {
		return nil, errors.New("产品Id不能为空")
	}
	q := orm.Use(iotmodel.GetDB())
	tProperties := q.TOpmThingModelProperties
	doProperties := tProperties.WithContext(context.Background())
	if len(productIds) > 0 {
		doProperties = doProperties.Where(tProperties.ProductId.In(productIds...))
	}
	if len(productKeys) > 0 {
		doProperties = doProperties.Where(tProperties.ProductKey.In(productKeys...))
	}
	properties, err := doProperties.Find()

	if err != nil {
		logger.Errorf("mergeProductThingsModel error")
		return nil, err
	}
	proKeyMap := make(map[string]map[string]*proto.OpmThingModelProperties)
	//分组物模型
	for _, property := range properties {
		if property.ProductId == "" {
			continue
		}
		if _, ok := proKeyMap[property.ProductId]; !ok {
			proKeyMap[property.ProductId] = map[string]*proto.OpmThingModelProperties{}
		}
		proKeyMap[property.ProductId][property.Identifier] = convert.OpmThingModelProperties_db2pb(property)
	}
	tempIds := make([]string, 0)
	for k, _ := range proKeyMap {
		tempIds = append(tempIds, k)
	}
	res := make([]*proto.OpmThingModelProperties, 0)
	d := proKeyMap[tempIds[0]]
	for _, td := range d {
		isNeed := true
		for i := 1; i < len(tempIds); i++ {
			l, _ := proKeyMap[tempIds[i]]
			if _, ok := l[td.Identifier]; !ok {
				isNeed = false
				break
			}
		}
		if isNeed {
			res = append(res, td)
		}
	}
	return res, nil
}
