// Code generated by sgen,2023-09-27 11:39:53. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"
	"strings"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmDocumentsSvc struct {
	Ctx context.Context
}

// 创建&更新 OpmDocuments
func (s *OpmDocumentsSvc) CreateOpmDocuments(req *proto.OpmDocuments) (*proto.OpmDocuments, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOpmDocuments
	do := t.WithContext(context.Background())
	dbObj := convert.OpmDocuments_pb2db(req)
	docs, err := do.Where(t.OriginId.Eq(req.OriginId), t.DataOrigin.Eq(req.DataOrigin), t.DocCode.Eq(req.DocCode)).First()
	if err == nil {
		dbObj.Id = docs.Id
	} else {
		dbObj.Id = iotutil.GetNextSeqInt64()
	}
	err = do.Save(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmDocuments error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OpmDocuments
func (s *OpmDocumentsSvc) DeleteOpmDocuments(req *proto.OpmDocuments) (*proto.OpmDocuments, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmDocuments
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.DataOrigin != 0 { //整数
		do = do.Where(t.DataOrigin.Eq(req.DataOrigin))
	}
	if req.OriginId != 0 { //整数
		do = do.Where(t.OriginId.Eq(req.OriginId))
	}
	if req.OriginKey != "" { //字符串
		do = do.Where(t.OriginKey.Eq(req.OriginKey))
	}
	if req.DocCode != "" { //字符串
		do = do.Where(t.DocCode.Eq(req.DocCode))
	}
	if req.DocName != "" { //字符串
		do = do.Where(t.DocName.Eq(req.DocName))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.FilePath != "" { //字符串
		do = do.Where(t.FilePath.Eq(req.FilePath))
	}
	if req.FileName != "" { //字符串
		do = do.Where(t.FileName.Eq(req.FileName))
	}
	if req.FileSize != 0 { //整数
		do = do.Where(t.FileSize.Eq(req.FileSize))
	}
	if req.FileKey != "" { //字符串
		do = do.Where(t.FileKey.Eq(req.FileKey))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmDocuments error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpmDocuments
func (s *OpmDocumentsSvc) DeleteByIdOpmDocuments(req *proto.OpmDocuments) (*proto.OpmDocuments, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmDocuments
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmDocuments error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpmDocuments
func (s *OpmDocumentsSvc) DeleteByIdsOpmDocuments(req *proto.OpmDocumentsBatchDeleteRequest) (*proto.OpmDocumentsBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmDocuments
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmDocuments error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpmDocuments
func (s *OpmDocumentsSvc) UpdateOpmDocuments(req *proto.OpmDocuments) (*proto.OpmDocuments, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmDocuments
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.DataOrigin != 0 { //整数
		updateField = append(updateField, t.DataOrigin)
	}
	if req.OriginId != 0 { //整数
		updateField = append(updateField, t.OriginId)
	}
	if req.OriginKey != "" { //字符串
		updateField = append(updateField, t.OriginKey)
	}
	if req.DocCode != "" { //字符串
		updateField = append(updateField, t.DocCode)
	}
	if req.DocName != "" { //字符串
		updateField = append(updateField, t.DocName)
	}
	if req.Remark != "" { //字符串
		updateField = append(updateField, t.Remark)
	}
	if req.FilePath != "" { //字符串
		updateField = append(updateField, t.FilePath)
	}
	if req.FileName != "" { //字符串
		updateField = append(updateField, t.FileName)
	}
	if req.FileSize != 0 { //整数
		updateField = append(updateField, t.FileSize)
	}
	if req.FileKey != "" { //字符串
		updateField = append(updateField, t.FileKey)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmDocuments error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmDocuments_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmDocuments error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpmDocuments
func (s *OpmDocumentsSvc) UpdateAllOpmDocuments(req *proto.OpmDocuments) (*proto.OpmDocuments, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmDocuments
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.DataOrigin)
	updateField = append(updateField, t.OriginId)
	updateField = append(updateField, t.OriginKey)
	updateField = append(updateField, t.DocCode)
	updateField = append(updateField, t.DocName)
	updateField = append(updateField, t.Remark)
	updateField = append(updateField, t.FilePath)
	updateField = append(updateField, t.FileName)
	updateField = append(updateField, t.FileSize)
	updateField = append(updateField, t.FileKey)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmDocuments error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmDocuments_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmDocuments error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmDocumentsSvc) UpdateFieldsOpmDocuments(req *proto.OpmDocumentsUpdateFieldsRequest) (*proto.OpmDocuments, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmDocuments
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmDocuments error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmDocuments error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmDocuments_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmDocuments error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmDocuments
func (s *OpmDocumentsSvc) FindOpmDocuments(req *proto.OpmDocumentsFilter) (*proto.OpmDocuments, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmDocuments
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.DataOrigin != 0 { //整数
		do = do.Where(t.DataOrigin.Eq(req.DataOrigin))
	}
	if req.OriginId != 0 { //整数
		do = do.Where(t.OriginId.Eq(req.OriginId))
	}
	if req.OriginKey != "" { //字符串
		do = do.Where(t.OriginKey.Eq(req.OriginKey))
	}
	if req.DocCode != "" { //字符串
		do = do.Where(t.DocCode.Eq(req.DocCode))
	}
	if req.DocName != "" { //字符串
		do = do.Where(t.DocName.Eq(req.DocName))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.FilePath != "" { //字符串
		do = do.Where(t.FilePath.Eq(req.FilePath))
	}
	if req.FileName != "" { //字符串
		do = do.Where(t.FileName.Eq(req.FileName))
	}
	if req.FileSize != 0 { //整数
		do = do.Where(t.FileSize.Eq(req.FileSize))
	}
	if req.FileKey != "" { //字符串
		do = do.Where(t.FileKey.Eq(req.FileKey))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmDocuments error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmDocuments_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpmDocuments
func (s *OpmDocumentsSvc) FindByIdOpmDocuments(req *proto.OpmDocumentsFilter) (*proto.OpmDocuments, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmDocuments
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmDocuments error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmDocuments_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OpmDocuments,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmDocumentsSvc) GetListOpmDocuments(req *proto.OpmDocumentsListRequest) ([]*proto.OpmDocuments, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpmDocuments
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.DataOrigin != 0 { //整数
			do = do.Where(t.DataOrigin.Eq(query.DataOrigin))
		}
		if query.OriginId != 0 { //整数
			do = do.Where(t.OriginId.Eq(query.OriginId))
		}
		if query.OriginKey != "" { //字符串
			do = do.Where(t.OriginKey.Like("%" + query.OriginKey + "%"))
		}
		if query.DocCode != "" { //字符串
			do = do.Where(t.DocCode.Like("%" + query.DocCode + "%"))
		}
		if query.DocName != "" { //字符串
			do = do.Where(t.DocName.Like("%" + query.DocName + "%"))
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
		if query.FilePath != "" { //字符串
			do = do.Where(t.FilePath.Like("%" + query.FilePath + "%"))
		}
		if query.FileName != "" { //字符串
			do = do.Where(t.FileName.Like("%" + query.FileName + "%"))
		}
		if query.FileSize != 0 { //整数
			do = do.Where(t.FileSize.Eq(query.FileSize))
		}
		if query.FileKey != "" { //字符串
			do = do.Where(t.FileKey.Like("%" + query.FileKey + "%"))
		}
		if query.DocCodes != "" { //字符串
			docCodes := strings.Split(query.DocCodes, ",")
			do = do.Where(t.DocCode.In(docCodes...))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOpmDocuments
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmDocuments error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmDocuments, len(list))
	for i, v := range list {
		result[i] = convert.OpmDocuments_db2pb(v)
	}
	return result, total, nil
}
