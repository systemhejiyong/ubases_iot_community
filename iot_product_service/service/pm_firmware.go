// Code generated by sgen.exe,2022-04-20 13:52:29. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"
	"strconv"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type PmFirmwareSvc struct {
	Ctx context.Context
}

// 创建PmFirmware (初始化固件需要创建固件版本）
func (s *PmFirmwareSvc) CreatePmFirmware(req *proto.PmFirmware) (*proto.PmFirmware, error) {
	// fixme 请在这里校验参数
	q := orm.Use(iotmodel.GetDB())
	var err error
	err = q.Transaction(func(tx *orm.Query) error {
		tFirmware := q.TPmFirmware
		do := tFirmware.WithContext(context.Background())

		// 查询模组sdk名称是否存在
		count, err := do.Where(tFirmware.Name.Eq(req.Name)).Count()
		if err != nil {
			logger.Errorf("CreatePmFirmware error : %s", err.Error())
			return err
		}
		if count > 0 {
			return errors.New("模组名称已存在")
		}

		dbObj := convert.PmFirmware_pb2db(req)
		dbObj.Status = 2
		dbObj.FirmwareKey = iotutil.GetCloudFirmwareKeyRandomString()
		err = do.Create(dbObj)
		if err != nil {
			logger.Errorf("CreatePmFirmware error : %s", err.Error())
			return err
		}

		//保存初始固件版本信息
		if req.Version != "" {
			tFirmwareVersion := q.TPmFirmwareVersion
			doVersion := tFirmwareVersion.WithContext(context.Background())
			versionObj := &model.TPmFirmwareVersion{
				Id:          iotutil.GetNextSeqInt64(),
				FirmwareId:  dbObj.Id,
				Version:     req.Version,
				Desc:        req.Desc,
				Status:      1,
				FileName:    req.FileName,
				FilePath:    req.FilePath,
				FileKey:     req.FileKey,
				FileSize:    req.FileSize,
				ZipFileName: req.ZipFileName,
				ZipFilePath: req.ZipFilePath,
				ZipFileKey:  req.ZipFileKey,
				ZipFileSize: req.ZipFileSize,
				CreatedAt:   time.Now(),
				UpdatedBy:   req.UpdatedBy,
				UpdatedAt:   time.Now(),
				IsMust:      req.IsMust,
			}
			err = doVersion.Create(versionObj)
			if err != nil {
				logger.Errorf("CreatePmFirmware error : %s", err.Error())
				return err
			}
		} else {
			logger.Info("CreatePmFirmware no create sdk version")
		}
		return nil
	})
	if err != nil {
		logger.Errorf("CreatePmFirmware error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除PmFirmware
func (s *PmFirmwareSvc) DeletePmFirmware(req *proto.PmFirmware) (*proto.PmFirmware, error) {
	t := orm.Use(iotmodel.GetDB()).TPmFirmware
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.NameEn != "" { //字符串
		do = do.Where(t.NameEn.Eq(req.NameEn))
	}
	if req.Flag != "" { //字符串
		do = do.Where(t.Flag.Eq(req.Flag))
	}
	if req.Type != "" { //字符串
		do = do.Where(t.Type.Eq(req.Type))
	}
	if req.FlashSize != 0 { //整数
		do = do.Where(t.FlashSize.Eq(req.FlashSize))
	}
	if req.UpgradeChannel != 0 { //整数
		do = do.Where(t.UpgradeChannel.Eq(req.UpgradeChannel))
	}
	if req.UpgradeOvertime != 0 { //整数
		do = do.Where(t.UpgradeOvertime.Eq(req.UpgradeOvertime))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.FirmwareKey != "" { //字符串
		do = do.Where(t.FirmwareKey.Eq(req.FirmwareKey))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeletePmFirmware error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除PmFirmware
func (s *PmFirmwareSvc) DeleteByIdPmFirmware(req *proto.PmFirmware) (*proto.PmFirmware, error) {
	t := orm.Use(iotmodel.GetDB()).TPmFirmware
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdPmFirmware error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除PmFirmware
func (s *PmFirmwareSvc) DeleteByIdsPmFirmware(req *proto.PmFirmwareBatchDeleteRequest) (*proto.PmFirmwareBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TPmFirmware
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsPmFirmware error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新PmFirmware
func (s *PmFirmwareSvc) UpdatePmFirmware(req *proto.PmFirmware) (*proto.PmFirmware, error) {
	t := orm.Use(iotmodel.GetDB()).TPmFirmware
	do := t.WithContext(context.Background())
	// 检查数据是否为启用，启用数据无法进行编辑
	if req.Id == 0 {
		return nil, errors.New("主键Id不能为空")
	}
	oriObj, err := do.Where(t.Id.Eq(req.Id)).First()
	if err != nil {
		return nil, err
	}
	if oriObj.Status == 1 {
		return nil, errors.New("已启用固件无法编辑")
	}

	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Name != "" { //字符串
		// 查询模组sdk名称是否存在
		count, err := do.Where(t.Name.Eq(req.Name), t.Id.Neq(req.Id)).Count()
		if err != nil {
			logger.Errorf("UpdatePmFirmware error : %s", err.Error())
			return nil, err
		}
		if count > 0 {
			return nil, errors.New("模组名称已存在")
		}
		updateField = append(updateField, t.Name)
	}
	if req.NameEn != "" { //字符串
		// 查询模组sdk名称是否存在
		count, err := do.Where(t.NameEn.Eq(req.NameEn), t.Id.Neq(req.Id)).Count()
		if err != nil {
			logger.Errorf("UpdatePmFirmware error : %s", err.Error())
			return nil, err
		}
		if count > 0 {
			return nil, errors.New("模组英文名称已存在")
		}
		updateField = append(updateField, t.Name)
	}
	if req.Flag != "" { //字符串
		updateField = append(updateField, t.Flag)
	}
	if req.Type != "" { //字符串
		updateField = append(updateField, t.Type)
	}
	if req.Status != 0 {
		updateField = append(updateField, t.Status)
	}
	if req.FlashSize != 0 { //整数
		updateField = append(updateField, t.FlashSize)
	}
	if req.UpgradeChannel != 0 { //整数
		updateField = append(updateField, t.UpgradeChannel)
	}
	if req.UpgradeOvertime != 0 { //整数
		updateField = append(updateField, t.UpgradeOvertime)
	}
	if req.Remark != "" { //字符串
		updateField = append(updateField, t.Remark)
	}
	if req.Version != "" { //字符串
		updateField = append(updateField, t.Version)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdatePmFirmware error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.PmFirmware_pb2db(req)
	_, err = do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdatePmFirmware error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段PmFirmware
func (s *PmFirmwareSvc) UpdateAllPmFirmware(req *proto.PmFirmware) (*proto.PmFirmware, error) {
	t := orm.Use(iotmodel.GetDB()).TPmFirmware
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	//名称不能为空
	if req.Name == "" {
		return nil, errors.New("名称不能为空")
	}

	// 判断模组芯片名称是否重复
	count, err := do.Where(t.Name.Eq(req.Name), t.Id.Neq(req.Id)).Count()
	if err != nil {
		logger.Errorf("UpdateAllPmFirmware error : %s", err.Error())
		return nil, err
	}
	if count > 0 {
		return nil, errors.New("模组名称已存在")
	}

	updateField = append(updateField, t.Name)
	updateField = append(updateField, t.NameEn)
	updateField = append(updateField, t.Flag)
	updateField = append(updateField, t.Type)
	updateField = append(updateField, t.FlashSize)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.UpgradeChannel)
	updateField = append(updateField, t.UpgradeOvertime)
	updateField = append(updateField, t.Remark)
	updateField = append(updateField, t.Version)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllPmFirmware error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.PmFirmware_pb2db(req)
	_, err = do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllPmFirmware error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *PmFirmwareSvc) UpdateFieldsPmFirmware(req *proto.PmFirmwareUpdateFieldsRequest) (*proto.PmFirmware, error) {
	t := orm.Use(iotmodel.GetDB()).TPmFirmware
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsPmFirmware error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsPmFirmware error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.PmFirmware_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsPmFirmware error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找PmFirmware
func (s *PmFirmwareSvc) FindPmFirmware(req *proto.PmFirmwareFilter) (*proto.PmFirmware, error) {
	t := orm.Use(iotmodel.GetDB()).TPmFirmware
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Like("%" + req.Name + "%"))
	}
	if req.NameEn != "" { //字符串
		do = do.Where(t.NameEn.Like("%" + req.NameEn + "%"))
	}
	if req.Flag != "" { //字符串
		do = do.Where(t.Flag.Like("%" + req.Flag + "%"))
	}
	if req.Type != "" { //字符串
		do = do.Where(t.Type.Like("%" + req.Type + "%"))
	}
	if req.FlashSize != 0 { //整数
		do = do.Where(t.FlashSize.Eq(req.FlashSize))
	}
	if req.UpgradeChannel != 0 { //整数
		do = do.Where(t.UpgradeChannel.Eq(req.UpgradeChannel))
	}
	if req.UpgradeOvertime != 0 { //整数
		do = do.Where(t.UpgradeOvertime.Eq(req.UpgradeOvertime))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Like("%" + req.Remark + "%"))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Like("%" + req.Version + "%"))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindPmFirmware error : %s", err.Error())
		return nil, err
	}

	//读取最新版本号
	tVersion := orm.Use(iotmodel.GetDB()).TPmFirmwareVersion
	lastVersion, err := tVersion.WithContext(context.Background()).Where(tVersion.FirmwareId.Eq(dbObj.Id)).
		Order(field.Func.VersionOrder(tVersion.Version).Desc()).First()
	if err == nil && lastVersion != nil {
		dbObj.Version = lastVersion.Version
	}
	res := convert.PmFirmware_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找PmFirmware
func (s *PmFirmwareSvc) FindByIdPmFirmware(req *proto.PmFirmwareFilter) (*proto.PmFirmware, error) {
	t := orm.Use(iotmodel.GetDB()).TPmFirmware
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdPmFirmware error : %s", err.Error())
		return nil, err
	}

	//读取最新版本号
	tVersion := orm.Use(iotmodel.GetDB()).TPmFirmwareVersion
	lastVersion, err := tVersion.WithContext(context.Background()).Where(tVersion.FirmwareId.Eq(dbObj.Id)).
		Order(field.Func.VersionOrder(tVersion.Version).Desc()).First()
	if err == nil && lastVersion != nil {
		dbObj.Version = lastVersion.Version
	}

	res := convert.PmFirmware_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找PmFirmware,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *PmFirmwareSvc) GetListPmFirmware(req *proto.PmFirmwareListRequest) ([]*proto.PmFirmware, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	ormDb := orm.Use(iotmodel.GetDB())
	t := ormDb.TPmFirmware
	tVersion := ormDb.TPmFirmwareVersion
	do := t.WithContext(context.Background())
	doVersion := tVersion.WithContext(context.Background())
	query := req.Query
	if query != nil {
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Status != 0 { //状态
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.Name != "" { //字符串
			do = do.Where(t.Name.Eq(query.Name))
		}
		if query.NameEn != "" { //字符串
			do = do.Where(t.NameEn.Eq(query.NameEn))
		}
		if query.Flag != "" { //字符串
			do = do.Where(t.Flag.Eq(query.Flag))
		}
		if query.Type != "" { //字符串
			do = do.Where(t.Type.Eq(query.Type))
		}
		if query.FlashSize != 0 { //整数
			do = do.Where(t.FlashSize.Eq(query.FlashSize))
		}
		if query.UpgradeChannel != 0 { //整数
			do = do.Where(t.UpgradeChannel.Eq(query.UpgradeChannel))
		}
		if query.UpgradeOvertime != 0 { //整数
			do = do.Where(t.UpgradeOvertime.Eq(query.UpgradeOvertime))
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
		if query.Version != "" { //字符串
			do = do.Where(t.Version.Eq(query.Version))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
		// 固件编号集合查询
		if query.FirmwareIds != nil {
			frimwareIds := iotutil.ToArrayInt64(query.FirmwareIds)
			if len(frimwareIds) > 0 {
				do = do.Where(t.Id.In(frimwareIds...))
			}
		}
		// 模组编号查询
		if query.ModuleIds != nil {
			fids, err := s.getFirmwareIdByModuleIds(query.ModuleIds)
			if err == nil && len(fids) > 0 {
				do = do.Where(t.Id.In(fids...))
			}
		}
		if query.IsMustValidVersion {
			do = do.Where(tVersion.Status.Eq(1))
		}
	}
	//模糊查询固件名称、标识、keyID
	if req.SearchKey != "" { //整数
		searchId, err := strconv.ParseInt(req.SearchKey, 10, 64)
		if err == nil {
			do = do.Where(do.Where(t.Name.Like("%" + req.SearchKey + "%")).Or(t.Flag.Like("%" + req.SearchKey + "%")).Or(t.Id.Eq(searchId)))
		} else {
			do = do.Where(do.Where(t.Name.Like("%" + req.SearchKey + "%")).Or(t.Flag.Like("%" + req.SearchKey + "%")))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.CreatedAt.Desc())
	} else {
		if req.OrderDesc != "asc" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}
	if query.IsMustValidVersion {
		maxVersion := doVersion.Select(tVersion.FirmwareId, field.Func.UnVersionOrder(field.Func.VersionOrder(tVersion.Version).Max()).As("version")).Group(tVersion.FirmwareId, tVersion.Status).As("t_pm_firmware_version")
		do = do.LeftJoin(maxVersion, tVersion.FirmwareId.EqCol(t.Id), tVersion.Status.Eq(1))
	} else {
		//do = do.LeftJoin(doVersion.Select(tVersion.FirmwareId, tVersion.Version.Max().As("version")).Group(tVersion.FirmwareId).As("t_pm_firmware_version"),
		//	tVersion.FirmwareId.EqCol(t.Id))
		maxVersion := doVersion.Select(tVersion.FirmwareId, field.Func.UnVersionOrder(field.Func.VersionOrder(tVersion.Version).Max()).As("version")).Group(tVersion.FirmwareId).As("t_pm_firmware_version")
		do = do.LeftJoin(maxVersion, tVersion.FirmwareId.EqCol(t.Id))
	}

	do = do.Select(t.ALL, tVersion.FirmwareId, tVersion.Version.As("lastVersion"))
	var list = []struct {
		model.TPmFirmware
		LastVersion string `gorm:"column:lastVersion" json:"lastVersion"`
	}{}
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		//doVersion.Select(tVersion.Version.Max()).Where(tVersion.FirmwareId.EqCol(t.Id))
		total, err = do.Order(t.CreatedAt.Desc()).ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListPmFirmware error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.PmFirmware, len(list))
	for i, v := range list {
		result[i] = convert.PmFirmware_db2pb(&v.TPmFirmware)
		result[i].Version = v.LastVersion
	}
	return result, total, nil
}

// 新增和修改的时候判断分类名称是否重复
func (s *PmFirmwareSvc) getFirmwareIdByModuleIds(queryModuleids []string) ([]int64, error) {
	t := orm.Use(iotmodel.GetDB()).TPmModule
	do := t.WithContext(context.Background())

	moduleIds := iotutil.ToArrayInt64(queryModuleids)
	if len(moduleIds) == 0 {
		return []int64{}, nil
	}
	var keys []*struct {
		FirmwareId int64 `gorm:"column:firmware_id" json:"firmwareId"`
	}
	err := do.Where(t.Id.In(moduleIds...)).Scan(&keys)
	if err != nil {
		return nil, err
	}
	frimwareIds := make([]int64, 0)
	if keys != nil && len(keys) > 0 {
		for _, k := range keys {
			frimwareIds = append(frimwareIds, iotutil.ToInt64(k.FirmwareId))
		}
	}
	return frimwareIds, err
}

// 修改状态
func (s *PmFirmwareSvc) UpdateStatus(req *proto.PmFirmware) error {
	q := orm.Use(iotmodel.GetDB())
	var err error
	err = q.Transaction(func(tx *orm.Query) error {
		tFirmware := q.TPmFirmware
		_, err := tFirmware.WithContext(context.Background()).Where(tFirmware.Id.Eq(req.Id)).Update(tFirmware.Status, req.Status)
		if err != nil {
			logger.Errorf("UpdateStatus error : %s", err.Error())
			return err
		}
		if req.Status == 2 {
			tFirmwareVersion := q.TPmFirmwareVersion
			_, err := tFirmwareVersion.WithContext(context.Background()).
				Where(tFirmwareVersion.FirmwareId.Eq(req.Id)).Update(tFirmwareVersion.Status, req.Status)
			if err != nil {
				logger.Errorf("CreatePmFirmware error : %s", err.Error())
				return err
			}
		}
		return nil
	})
	if err != nil {
		logger.Errorf("CreatePmFirmware error : %s", err.Error())
		return err
	}
	return err
}
