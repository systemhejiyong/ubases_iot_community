// Code generated by sgen.exe,2022-05-06 14:01:21. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotnatsjs"
	"cloud_platform/iot_common/iotstruct"
	"cloud_platform/iot_common/iotutil"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"

	"go-micro.dev/v4/logger"
	"go-micro.dev/v4/metadata"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmThingModelSvc struct {
	Ctx context.Context
}

func SetTranslatesContent(translates *iotstruct.TranslatePush, properties *model.TOpmThingModelProperties) {
	//sourceRowId string, fieldName string, name string, nameEn string
	translates.AppendContent(fmt.Sprintf("%s_%s", properties.ProductKey, properties.Identifier), "name", properties.Name, "")
	if properties.DataSpecsList != "" {
		mapSpecs := []map[string]interface{}{}
		err := json.Unmarshal([]byte(properties.DataSpecsList), &mapSpecs)
		if err == nil {
			for _, spec := range mapSpecs {
				val := iotutil.ToString(spec["value"])
				desc := iotutil.ToString(spec["desc"])
				name := iotutil.ToString(spec["name"])
				funcLangKey := fmt.Sprintf("%s_%s_%s", properties.ProductKey, properties.Identifier, val)
				translates.AppendContent(funcLangKey, "name", desc, name)
			}
		}
	}
}

// 创建OpmThingModel
func (s *OpmThingModelSvc) CreateOpmThingModel(req *proto.OpmThingModel) (*proto.OpmThingModel, error) {
	tenantId, err := CheckTenantId(s.Ctx)
	if err != nil {
		return nil, err
	}
	if req.ProductId == 0 {
		return nil, errors.New("产品编号不能为空")
	}
	if req.StandardFuncs == nil && len(req.StandardFuncs) != 0 {
		return nil, errors.New("物模型功能不能为空")
	}

	q := orm.Use(iotmodel.GetDB())

	attrCodes := make([]string, 0)
	for _, s := range req.StandardFuncs {
		attrCodes = append(attrCodes, s.Identifier)
	}
	if len(attrCodes) > 0 {
		if err := s.existsVoice(q, attrCodes, req.ProductId); err != nil {
			return nil, err
		}
	}

	translates := &iotstruct.TranslatePush{SourceTable: iotconst.LANG_PRODUCT_THINGS_MODEL}
	err = q.Transaction(func(tx *orm.Query) error {
		productInfo, err := tx.TOpmProduct.WithContext(context.Background()).Where(tx.TOpmProduct.Id.Eq(req.ProductId)).First()
		if err != nil {
			return errors.New("获取产品信息异常，" + err.Error())
		}
		t := tx.TOpmThingModel
		do := t.WithContext(context.Background())
		//通过productId、Standard、version是否存在
		list, err := do.Where(t.ProductId.Eq(req.ProductId), t.Version.Eq(req.Version)).Find()
		if err != nil {
			return errors.New("模型版本信息获取异常")
		}
		var modelId int64
		if len(list) == 0 {
			modelId = iotutil.GetNextSeqInt64()
			do.Create(&model.TOpmThingModel{
				Id:          modelId,
				ProductId:   req.ProductId,
				Standard:    req.Standard,
				Version:     req.Version,
				Description: "",
				TenantId:    tenantId,
			})
		} else {
			//todo list.len > 0 ??
			modelId = list[0].Id
		}
		if req.Properties != nil {
			err := s.existsProperties(0, iotutil.ToString(req.ProductId), []int32{req.Properties.Dpid}, []string{req.Properties.Identifier})
			if err != nil {
				return err
			}
			tProperties := tx.TOpmThingModelProperties
			doProperties := tProperties.WithContext(context.Background())
			propertieObj := convert.OpmThingModelProperties_pb2db(req.Properties)
			propertieObj.TenantId = tenantId
			propertieObj.Id = iotutil.GetNextSeqInt64()
			propertieObj.ModelId = modelId
			propertieObj.CreateTs = iotutil.ToString(time.Now().Unix())
			propertieObj.ProductId = iotutil.ToString(req.ProductId)
			propertieObj.ProductKey = productInfo.ProductKey
			propertieObj.Custom = 1
			err = doProperties.Create(propertieObj)
			if err != nil {
				return err
			}
			//sourceRowId string, fieldName string, name string, nameEn string
			SetTranslatesContent(translates, propertieObj)
		}
		if req.Events != nil {
			err := s.existsEvents(0, iotutil.ToString(req.ProductId), []int32{req.Events.Dpid}, []string{req.Events.Identifier})
			if err != nil {
				return err
			}
			tEvents := tx.TOpmThingModelEvents
			doEvents := tEvents.WithContext(context.Background())
			eventObj := convert.OpmThingModelEvents_pb2db(req.Events)
			eventObj.TenantId = tenantId
			eventObj.Id = iotutil.GetNextSeqInt64()
			eventObj.ModelId = modelId
			eventObj.Custom = 1
			eventObj.CreateTs = iotutil.ToString(time.Now().Unix())
			eventObj.ProductId = iotutil.ToString(req.ProductId)
			eventObj.ProductKey = productInfo.ProductKey
			err = doEvents.Create(eventObj)
			if err != nil {
				return err
			}
		}
		if req.Services != nil {
			err := s.existsServices(0, iotutil.ToString(req.ProductId), []int32{req.Services.Dpid}, []string{req.Services.Identifier})
			if err != nil {
				return err
			}
			tServices := tx.TOpmThingModelServices
			doServices := tServices.WithContext(context.Background())

			servicesObj := convert.OpmThingModelServices_pb2db(req.Services)
			servicesObj.TenantId = tenantId
			servicesObj.Id = iotutil.GetNextSeqInt64()
			servicesObj.ModelId = modelId
			servicesObj.Custom = 1
			servicesObj.CreateTs = iotutil.ToString(time.Now().Unix())
			servicesObj.ProductId = iotutil.ToString(req.ProductId)
			servicesObj.ProductKey = productInfo.ProductKey
			err = doServices.Create(servicesObj)
			if err != nil {
				return err
			}
		}
		if req.Standard == 1 {
			err = s.addStandardFunc(req, modelId, productInfo.ProductKey, tx)
			if err != nil {
				return err
			}
		}
		return err
	})

	if err != nil {
		logger.Errorf("CreateOpmThingModel error : %s", err.Error())
		return nil, err
	}
	//推送物模型翻译内容
	if translates != nil && len(translates.TranslateList) > 0 {
		//GetJsPublisherMgr().PushData(&NatsPubData{
		//	Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
		//	Data:    iotutil.ToString(translates),
		//})

		iotnatsjs.GetJsClientPub().PushData(&iotnatsjs.NatsPubData{
			Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
			Data:    iotutil.ToString(translates),
		})
	}
	return req, err
}

// 选择添加标准功能
func (s *OpmThingModelSvc) addStandardFunc(req *proto.OpmThingModel, modelId int64, productKey string, tx *orm.Query) (err error) {
	if req.StandardFuncs == nil {
		return errors.New("未获取到需要添加的标准功能")
	}
	tModelEvents := tx.TPmThingModelEvents
	tModelProperties := tx.TPmThingModelProperties
	tModelServices := tx.TPmThingModelServices
	tOpmModelEvents := tx.TOpmThingModelEvents
	tOpmModelProperties := tx.TOpmThingModelProperties
	tOpmModelServices := tx.TOpmThingModelServices
	translates := &iotstruct.TranslatePush{SourceTable: iotconst.LANG_PRODUCT_THINGS_MODEL}
	for _, standardFunc := range req.StandardFuncs {
		switch standardFunc.FuncType {
		case "events":
			tpsModelEvents, err := tModelEvents.WithContext(context.Background()).Where(tModelEvents.ModelId.Eq(standardFunc.ModelId), tModelEvents.Id.Eq(standardFunc.FuncId)).Find()
			if err != nil {
				return err
			}

			saveList := make([]*model.TOpmThingModelEvents, 0)
			dpIds := make([]int32, 0)
			identifiers := make([]string, 0)
			for _, event := range tpsModelEvents {
				event.Id = iotutil.GetNextSeqInt64()
				eventObj := convert.ThingModelEvents_Pm2Opm(event)
				eventObj.ModelId = modelId
				eventObj.CreateTs = iotutil.ToString(time.Now().Unix())
				eventObj.Custom = 0
				eventObj.ProductKey = productKey
				eventObj.ProductId = iotutil.ToString(req.ProductId)
				dpIds = append(dpIds, eventObj.Dpid)
				identifiers = append(identifiers, eventObj.Identifier)
				saveList = append(saveList, eventObj)
			}
			err = s.existsEvents(0, iotutil.ToString(req.ProductId), dpIds, identifiers)
			if err != nil {
				return err
			}
			err = tOpmModelEvents.WithContext(context.Background()).Create(saveList...)
		case "properties":
			tpsModelProperties, err := tModelProperties.WithContext(context.Background()).Where(tModelProperties.ModelId.Eq(standardFunc.ModelId), tModelProperties.Id.Eq(standardFunc.FuncId)).Find()
			if err != nil {
				return err
			}

			saveList := make([]*model.TOpmThingModelProperties, 0)
			dpIds := make([]int32, 0)
			identifiers := make([]string, 0)
			for _, properties := range tpsModelProperties {
				properties.Id = iotutil.GetNextSeqInt64()
				propertiesObj := convert.ThingModelProperties_Pm2Opm(properties)
				propertiesObj.ModelId = modelId
				propertiesObj.CreateTs = iotutil.ToString(time.Now().Unix())
				propertiesObj.Custom = 0
				propertiesObj.ProductKey = productKey
				propertiesObj.ProductId = iotutil.ToString(req.ProductId)
				dpIds = append(dpIds, propertiesObj.Dpid)
				identifiers = append(identifiers, propertiesObj.Identifier)
				saveList = append(saveList, propertiesObj)
				SetTranslatesContent(translates, propertiesObj)
			}
			err = s.existsProperties(0, iotutil.ToString(req.ProductId), dpIds, identifiers)
			if err != nil {
				return err
			}
			err = tOpmModelProperties.WithContext(context.Background()).Create(saveList...)
		case "services":
			tpsModelServices, err := tModelServices.WithContext(context.Background()).Where(tModelServices.ModelId.Eq(standardFunc.ModelId), tModelEvents.Id.Eq(standardFunc.FuncId)).Find()
			if err != nil {
				return err
			}

			saveList := make([]*model.TOpmThingModelServices, 0)
			dpIds := make([]int32, 0)
			identifiers := make([]string, 0)

			for _, service := range tpsModelServices {
				service.Id = iotutil.GetNextSeqInt64()
				serviceObj := convert.ThingModelServices_Pm2Opm(service)
				serviceObj.ModelId = modelId
				serviceObj.CreateTs = iotutil.ToString(time.Now().Unix())
				serviceObj.Custom = 0
				serviceObj.ProductKey = productKey
				serviceObj.ProductId = iotutil.ToString(req.ProductId)
				dpIds = append(dpIds, serviceObj.Dpid)
				identifiers = append(identifiers, serviceObj.Identifier)
				saveList = append(saveList, serviceObj)
			}
			err = s.existsServices(0, iotutil.ToString(req.ProductId), dpIds, identifiers)
			if err != nil {
				return err
			}
			err = tOpmModelServices.WithContext(context.Background()).Create(saveList...)
		}
	}
	//推送物模型翻译内容
	if translates != nil && len(translates.TranslateList) > 0 {
		//GetJsPublisherMgr().PushData(&NatsPubData{
		//	Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
		//	Data:    iotutil.ToString(translates),
		//})

		iotnatsjs.GetJsClientPub().PushData(&iotnatsjs.NatsPubData{
			Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
			Data:    iotutil.ToString(translates),
		})
	}
	return
}

// 创建OpmThingModel
func (s *OpmThingModelSvc) DeleteOpmThingModelItem(req *proto.OpmThingModelDeleteRequest) error {
	//tenantId, err := CheckTenantId(s.Ctx)
	//if err != nil {
	//	return nil, err
	//}
	//if req.ProductId == 0 {
	//	return nil, errors.New("产品编号不能为空")
	//}
	var err error
	q := orm.Use(iotmodel.GetDB())
	q.Transaction(func(tx *orm.Query) error {
		switch req.FuncType {
		case "properties":
			tProperties := tx.TOpmThingModelProperties
			info, err := tProperties.WithContext(context.Background()).Where(tProperties.Id.Eq(req.FuncId)).Find()
			if err != nil {
				return err
			}
			attrCodes := make([]string, 0)
			attrCodes = append(attrCodes, info[0].Identifier)
			err = s.existsVoice(q, attrCodes, req.ProductId)
			if err != nil {
				return err
			}
			_, err = tProperties.WithContext(context.Background()).Where(tProperties.Id.Eq(req.FuncId)).Delete()
		case "events":
			tEvents := tx.TOpmThingModelEvents
			info, err := tEvents.WithContext(context.Background()).Where(tEvents.Id.Eq(req.FuncId)).Find()
			if err != nil {
				return err
			}
			attrCodes := make([]string, 0)
			attrCodes = append(attrCodes, info[0].Identifier)
			err = s.existsVoice(q, attrCodes, req.ProductId)
			if err != nil {
				return err
			}
			_, err = tEvents.WithContext(context.Background()).Where(tEvents.Id.Eq(req.FuncId)).Delete()
		case "services":
			tServices := tx.TOpmThingModelServices
			info, err := tServices.WithContext(context.Background()).Where(tServices.Id.Eq(req.FuncId)).Find()
			if err != nil {
				return err
			}
			attrCodes := make([]string, 0)
			attrCodes = append(attrCodes, info[0].Identifier)
			err = s.existsVoice(q, attrCodes, req.ProductId)
			if err != nil {
				return err
			}
			_, err = tServices.WithContext(context.Background()).Where(tServices.Id.Eq(req.FuncId)).Delete()
		}
		return err
	})

	if err != nil {
		logger.Errorf("CreateOpmThingModel error : %s", err.Error())
		return err
	}
	return nil
}

// 根据条件删除OpmThingModel
func (s *OpmThingModelSvc) DeleteOpmThingModel(req *proto.OpmThingModel) (*proto.OpmThingModel, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmThingModel
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != 0 { //字符串
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.Standard != 0 { //整数
		do = do.Where(t.Standard.Eq(req.Standard))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.Description != "" { //字符串
		do = do.Where(t.Description.Eq(req.Description))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmThingModel error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpmThingModel
func (s *OpmThingModelSvc) DeleteByIdOpmThingModel(req *proto.OpmThingModel) (*proto.OpmThingModel, error) {
	tenantId, _ := metadata.Get(s.Ctx, "tenantid")
	if tenantId == "" {
		return nil, errors.New("租户ID获取失败.")
	}
	req.TenantId = tenantId

	t := orm.Use(iotmodel.GetDB()).TOpmThingModel
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	do.Where(t.TenantId.Eq(tenantId))
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmThingModel error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpmThingModel
func (s *OpmThingModelSvc) DeleteByIdsOpmThingModel(req *proto.OpmThingModelBatchDeleteRequest) (*proto.OpmThingModelBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmThingModel
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmThingModel error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpmThingModel
func (s *OpmThingModelSvc) UpdateOpmThingModel(req *proto.OpmThingModel) (*proto.OpmThingModel, error) {
	var err error
	q := orm.Use(iotmodel.GetDB())

	if req.ProductId == 0 {
		return nil, errors.New("产品编号不能为空")
	}
	if req.StandardFuncs == nil && len(req.StandardFuncs) != 0 {
		return nil, errors.New("物模型功能不能为空")
	}

	proInfo, err := q.TOpmProduct.WithContext(context.Background()).Where(q.TOpmProduct.Id.Eq(req.ProductId)).First()
	if err != nil {
		return nil, errors.New("产品不存在，productId=" + iotutil.ToString(req.ProductId))
	}
	attrCodes := make([]string, 0)
	for _, s := range req.StandardFuncs {
		attrCodes = append(attrCodes, s.Identifier)
	}
	if len(attrCodes) > 0 {
		if err := s.existsVoice(q, attrCodes, req.ProductId); err != nil {
			return nil, err
		}
	}
	//要更新的字段,不包括主键
	if req.Properties != nil {
		if req.Properties.Id == 0 {
			return nil, errors.New("功能编号不能为空")
		}

		tProperties := q.TOpmThingModelProperties
		property, err := q.TOpmThingModelProperties.WithContext(context.Background()).Where(q.TOpmThingModelProperties.Id.Eq(req.Properties.Id)).First()
		if err != nil {
			return nil, err
		}

		//比较预约、场景等功能设置
		property.AppointmentArgs = specCheck(property, property.AppointmentArgs, property.AllowAppointment)
		property.TriggerCondArgs = specCheck(property, property.TriggerCondArgs, property.TriggerCond)
		property.ExecCondArgs = specCheck(property, property.ExecCondArgs, property.ExecCond)

		err = s.existsProperties(req.Properties.Id, iotutil.ToString(req.ProductId), []int32{req.Properties.Dpid}, []string{req.Properties.Identifier})
		if err != nil {
			return nil, err
		}

		dbObj := convert.OpmThingModelProperties_pb2db(req.Properties)
		dbObj.AppointmentArgs = property.AppointmentArgs
		dbObj.TriggerCondArgs = property.TriggerCondArgs
		dbObj.ExecCondArgs = property.ExecCondArgs
		dbObj.ProductKey = proInfo.ProductKey
		_, err = tProperties.WithContext(context.Background()).Select(
			tProperties.Identifier,
			tProperties.Name,
			tProperties.RwFlag,
			tProperties.DataSpecs,
			tProperties.DataType,
			tProperties.DataSpecsList,
			tProperties.Required,
			tProperties.Custom,
			tProperties.Desc,
			tProperties.DefaultVal,
			tProperties.ExecCondArgs,
			tProperties.TriggerCondArgs,
			tProperties.AppointmentArgs,
			tProperties.Extension).Where(tProperties.Id.Eq(dbObj.Id)).Updates(dbObj)
		//翻译推送
		translates := &iotstruct.TranslatePush{SourceTable: iotconst.LANG_PRODUCT_THINGS_MODEL}
		SetTranslatesContent(translates, dbObj)
		//推送物模型翻译内容
		if translates != nil && len(translates.TranslateList) > 0 {
			//GetJsPublisherMgr().PushData(&NatsPubData{
			//	Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
			//	Data:    iotutil.ToString(translates),
			//})

			iotnatsjs.GetJsClientPub().PushData(&iotnatsjs.NatsPubData{
				Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
				Data:    iotutil.ToString(translates),
			})
		}
	}
	if req.Events != nil {
		if req.Events.Id == 0 {
			return nil, errors.New("功能编号不能为空")
		}

		err := s.existsEvents(req.Events.Id, iotutil.ToString(req.ProductId), []int32{req.Events.Dpid}, []string{req.Events.Identifier})
		if err != nil {
			return nil, err
		}

		dbObj := convert.OpmThingModelEvents_pb2db(req.Events)
		dbObj.ProductKey = proInfo.ProductKey
		tEvents := q.TOpmThingModelEvents
		_, err = tEvents.WithContext(context.Background()).Select(
			tEvents.Identifier,
			tEvents.EventName,
			tEvents.EventType,
			tEvents.Outputdata,
			tEvents.Required,
			tEvents.Custom,
			tEvents.Desc,
			tEvents.Extension).Where(tEvents.Id.Eq(dbObj.Id)).Updates(dbObj)
	}
	if req.Services != nil {
		if req.Services.Id == 0 {
			return nil, errors.New("功能编号不能为空")
		}

		err := s.existsServices(req.Services.Id, iotutil.ToString(req.ProductId), []int32{req.Services.Dpid}, []string{req.Services.Identifier})
		if err != nil {
			return nil, err
		}

		dbObj := convert.OpmThingModelServices_pb2db(req.Services)
		dbObj.ProductKey = proInfo.ProductKey
		tServices := q.TOpmThingModelServices
		_, err = tServices.WithContext(context.Background()).Select(
			tServices.Identifier,
			tServices.ServiceName,
			tServices.InputParams,
			tServices.OutputParams,
			tServices.Required,
			tServices.CallType,
			tServices.Custom,
			tServices.Desc,
			tServices.Extension).Where(tServices.Id.Eq(dbObj.Id)).Updates(dbObj)
	}
	return req, err
}

func specCheck(prop *model.TOpmThingModelProperties, args string, enable int32) string {
	if enable != 1 {
		return ""
	}
	res := args
	switch prop.DataType {
	case "ENUM", "BOOL", "FAULT":
		if args != "" {
			mapObj, _ := iotutil.JsonToMapArrayErr(prop.DataSpecsList)
			originProp := make(map[interface{}]bool)
			for _, o := range mapObj {
				originProp[o["value"]] = true
			}

			arrMap, _ := iotutil.JsonToMapArrayErr(args)
			//[{"custom":0,"dataType":"BOOL","desc":"false","desc_en":"false","name":"false","value":"false"},{"custom":0,"dataType":"BOOL","desc":"true","desc_en":"true","name":"true","value":"true"}]
			newProps := make([]map[string]interface{}, 0)
			for _, m := range arrMap {
				if _, ok := originProp[m["value"]]; ok {
					newProps = append(newProps, m)
				}
			}
			res = iotutil.ToString(newProps)
		}
	case "DOUBLE", "FLOAT", "INT":
		if args != "" {
			mapOri, _ := iotutil.JsonToMapErr(prop.DataSpecs)
			mapThe, _ := iotutil.JsonToMapErr(args)
			minOri, _ := iotutil.ToFloat64Err(mapOri["min"])
			maxOri, _ := iotutil.ToFloat64Err(mapOri["max"])
			minThe, _ := iotutil.ToFloat64Err(mapThe["min"])
			maxThe, _ := iotutil.ToFloat64Err(mapThe["max"])
			if !(minThe >= minOri && minThe <= maxOri) {
				mapThe["min"] = minOri
			}
			if !(maxThe >= minOri && maxThe <= maxOri) {
				mapThe["max"] = maxThe
			}
			res = iotutil.ToString(mapThe)
		}
	}
	return res
}

// //根据主键更新所有字段OpmThingModel
func (s *OpmThingModelSvc) UpdateAllOpmThingModel(req *proto.OpmThingModel) (*proto.OpmThingModel, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmThingModel
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.ProductId)
	updateField = append(updateField, t.Standard)
	updateField = append(updateField, t.Version)
	updateField = append(updateField, t.Description)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	updateField = append(updateField, t.TenantId)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmThingModel error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmThingModel_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmThingModel error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmThingModelSvc) UpdateFieldsOpmThingModel(req *proto.OpmThingModelUpdateFieldsRequest) (*proto.OpmThingModel, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmThingModel
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmThingModel error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmThingModel error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmThingModel_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmThingModel error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmThingModel
func (s *OpmThingModelSvc) FindOpmThingModel(req *proto.OpmThingModelFilter) (*proto.OpmThingModel, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmThingModel
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != 0 { //字符串
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.Standard != 0 { //整数
		do = do.Where(t.Standard.Eq(req.Standard))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.Description != "" { //字符串
		do = do.Where(t.Description.Eq(req.Description))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmThingModel error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmThingModel_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpmThingModel
func (s *OpmThingModelSvc) FindByIdOpmThingModel(req *proto.OpmThingModelFilter) (*proto.OpmThingModel, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmThingModel
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmThingModel error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmThingModel_db2pb(dbObj)
	return res, err
}

func (s *OpmThingModelSvc) GetListOpmThingModel(req *proto.OpmThingModelListRequest) ([]*proto.OpmThingModel, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpmThingModel
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.ProductId != 0 { //字符串
			do = do.Where(t.ProductId.Eq(query.ProductId))
		}
		if query.Standard != 0 { //整数
			do = do.Where(t.Standard.Eq(query.Standard))
		}
		if query.Version != "" { //字符串
			do = do.Where(t.Version.Like("%" + query.Version + "%"))
		}
		if query.Description != "" { //字符串
			do = do.Where(t.Description.Like("%" + query.Description + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Like("%" + query.TenantId + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOpmThingModel
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmThingModel error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmThingModel, len(list))
	for i, v := range list {
		result[i] = convert.OpmThingModel_db2pb(v)
	}
	return result, total, nil
}

func (s *OpmThingModelSvc) GetOpmThingModelByProduct(req *proto.OpmThingModelByProductRequest) (*proto.OpmThingModelAllList, error) {
	var (
		err    error
		result *proto.OpmThingModelAllList = new(proto.OpmThingModelAllList)
	)
	q := orm.Use(iotmodel.GetDB())

	tModel := q.TOpmThingModel
	doModel := tModel.WithContext(context.Background())
	tpsModel, err := doModel.Where(tModel.ProductId.Eq(req.ProductId)).First()
	if err != nil {
		if err.Error() == "record not found" {
			return result, nil
		}
		return nil, err
	}

	result.Model = convert.OpmThingModel_db2pb(tpsModel)

	if !req.UnQueryService {
		tModelEvents := q.TOpmThingModelEvents
		tpsModelEventsDo := tModelEvents.WithContext(context.Background()).Where(tModelEvents.ModelId.Eq(tpsModel.Id))
		if req.Custom >= 0 {
			tpsModelEventsDo = tpsModelEventsDo.Where(tModelEvents.Custom.Eq(req.Custom))
		}
		tpsModelEvents, err := tpsModelEventsDo.Order(tModelEvents.Dpid).Find()
		if err != nil {
			return nil, err
		}
		for _, event := range tpsModelEvents {
			result.Events = append(result.Events, convert.OpmThingModelEvents_db2pb(event))
		}
	}
	if !req.UnQueryProperties {
		tModelProperties := q.TOpmThingModelProperties
		tpsModelPropertiesDo := tModelProperties.WithContext(context.Background()).Where(tModelProperties.ModelId.Eq(tpsModel.Id))
		if req.Custom >= 0 {
			tpsModelPropertiesDo = tpsModelPropertiesDo.Where(tModelProperties.Custom.Eq(req.Custom))
		}
		if req.DataType != "" {{
			tpsModelPropertiesDo = tpsModelPropertiesDo.Where(tModelProperties.DataType.Eq(req.DataType))
		}}
		tpsModelProperties, err := tpsModelPropertiesDo.Order(tModelProperties.Dpid).Find()
		if err != nil {
			return nil, err
		}
		for _, property := range tpsModelProperties {
			result.Properties = append(result.Properties, convert.OpmThingModelProperties_db2pb(property))
		}
	}
	if !req.UnQueryService {
		tModelServices := q.TOpmThingModelServices
		tpsModelServicesDo := tModelServices.WithContext(context.Background()).Where(tModelServices.ModelId.Eq(tpsModel.Id))
		if req.Custom >= 0 {
			tpsModelServicesDo = tpsModelServicesDo.Where(tModelServices.Custom.Eq(req.Custom))
		}
		tpsModelServices, err := tpsModelServicesDo.Order(tModelServices.Dpid).Find()
		if err != nil {
			return nil, err
		}

		for _, services := range tpsModelServices {
			result.Services = append(result.Services, convert.OpmThingModelServices_db2pb(services))
		}
	}
	return result, nil
}

func (s *OpmThingModelSvc) GetStandardThingModelByProduct(req *proto.OpmThingModelByProductRequest) (*proto.OpmThingModelAllList, error) {
	var (
		err    error
		result *proto.OpmThingModelAllList = new(proto.OpmThingModelAllList)
	)
	q := orm.Use(iotmodel.GetDB())

	tModel := q.TPmThingModel
	doModel := tModel.WithContext(context.Background()).LeftJoin(q.TPmProduct, q.TPmProduct.ProductKey.EqCol(tModel.ProductKey))
	tpsModel, err := doModel.Where(q.TPmProduct.Id.Eq(req.ProductId)).First()
	if err != nil {
		if err.Error() == "record not found" {
			return result, nil
		}
		return nil, err
	}
	//获取modelid 同时valid=1的数据
	tModelEvents := q.TPmThingModelEvents
	tpsModelEvents, err := tModelEvents.WithContext(context.Background()).Where(tModelEvents.ModelId.Eq(tpsModel.Id), tModelEvents.Valid.Eq(1)).Find()
	if err != nil {
		return nil, err
	}

	tModelProperties := q.TPmThingModelProperties
	tpsModelProperties, err := tModelProperties.WithContext(context.Background()).Where(tModelProperties.ModelId.Eq(tpsModel.Id), tModelProperties.Valid.Eq(1)).Find()
	if err != nil {
		return nil, err
	}

	tModelServices := q.TPmThingModelServices
	tpsModelServices, err := tModelServices.WithContext(context.Background()).Where(tModelServices.ModelId.Eq(tpsModel.Id), tModelServices.Valid.Eq(1)).Find()
	if err != nil {
		return nil, err
	}

	result.Model = &proto.OpmThingModel{
		Id:          tpsModel.Id,
		Standard:    tpsModel.Standard,
		Version:     tpsModel.Version,
		Description: tpsModel.Description,
		CreatedAt:   timestamppb.New(tpsModel.CreatedAt),
		UpdatedAt:   timestamppb.New(tpsModel.UpdatedAt),
	}
	for _, property := range tpsModelProperties {
		result.Properties = append(result.Properties, convert.ThingModelProperties_TPm2Opm(property))
	}
	for _, event := range tpsModelEvents {
		result.Events = append(result.Events, convert.ThingModelEvents_Tpm20pm(event))
	}
	for _, services := range tpsModelServices {
		result.Services = append(result.Services, convert.ThingModelServices_TPm2Opm(services))
	}
	return result, nil
}

// 新增和修改的时候判断分类名称是否重复
func (s *OpmThingModelSvc) existsVoice(tx *orm.Query, attrCodes []string, productId int64) error {
	if attrCodes == nil || len(attrCodes) == 0 {
		return nil
	}
	//检查功能是否
	existsCount, err := tx.TOpmVoiceProductMap.WithContext(context.Background()).
		Where(tx.TOpmVoiceProductMap.VoiceProductId.Eq(productId),
			tx.TOpmVoiceProductMap.AttrCode.In(attrCodes...)).Count()
	if err != nil {
		return errors.New("语音属性检查出错，" + err.Error())
	}
	if existsCount > 0 {
		return errors.New("存在语音属性设置，不容许修改")
	}
	return nil
}

// 设置场景功能
func (s *OpmThingModelSvc) SetThingsModelSceneFunc(req *proto.OpmThingModel) (*proto.OpmThingModel, error) {
	if req.StandardFuncs == nil && len(req.StandardFuncs) != 0 {
		return nil, errors.New("物模型功能不能为空")
	}
	funcIds := []int64{}
	for _, f := range req.StandardFuncs {
		switch f.FuncType {
		case "properties":
			funcIds = append(funcIds, f.FuncId)
		}
	}
	if len(funcIds) == 0 {
		return nil, errors.New("属性物模型功能不能为空")
	}

	q := orm.Use(iotmodel.GetDB())
	err := q.Transaction(func(tx *orm.Query) error {
		var err error
		for _, s := range req.StandardFuncs {
			updateObj := model.TOpmThingModelProperties{
				TriggerCond:     s.TriggerCond,
				ExecCond:        s.ExecCond,
				TriggerCondArgs: s.TriggerCondArgs,
				ExecCondArgs:    s.ExecCondArgs,
			}
			tProperties := tx.TOpmThingModelProperties
			doProperties := tProperties.WithContext(context.Background())
			_, err = doProperties.Where(tProperties.Id.Eq(s.FuncId)).Select(
				tProperties.TriggerCond, tProperties.ExecCond, tProperties.TriggerCondArgs, tProperties.ExecCondArgs).Updates(updateObj)
			if err != nil {
				break
			}
		}
		return err
	})

	if err != nil {
		logger.Errorf("SetThingsModelSceneFunc error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 设置预约功能
func (s *OpmThingModelSvc) SetAppointmentFunc(req *proto.OpmThingModel) (*proto.OpmThingModel, error) {
	if req.StandardFuncs == nil && len(req.StandardFuncs) != 0 {
		return nil, errors.New("物模型功能不能为空")
	}
	funcIds := []int64{}
	for _, f := range req.StandardFuncs {
		switch f.FuncType {
		case "properties":
			funcIds = append(funcIds, f.FuncId)
		}
	}
	if len(funcIds) == 0 {
		return nil, errors.New("属性物模型功能不能为空")
	}

	q := orm.Use(iotmodel.GetDB())
	err := q.Transaction(func(tx *orm.Query) error {
		var err error
		tProperties := tx.TOpmThingModelProperties
		doProperties := tProperties.WithContext(context.Background())
		//正常StandardFuncs只有一条数据
		for _, s := range req.StandardFuncs {
			updateObj := model.TOpmThingModelProperties{
				AllowAppointment: s.AllowAppointment,
				AppointmentArgs:  s.AppointmentArgs,
			}
			_, err = doProperties.Where(tProperties.Id.Eq(s.FuncId)).Select(
				tProperties.AllowAppointment, tProperties.AppointmentArgs).Updates(updateObj)
			if err != nil {
				break
			}
			//正常StandardFuncs只有一条数据，可以在这里查询数据， 如果不容许预约，则需要将其子项节点层级上移动
			if s.AllowAppointment == 0 {
				_, err = doProperties.Where(tProperties.ParentId.Eq(s.FuncId)).
					Select(tProperties.IsTop, tProperties.ParentId).Updates(model.TOpmThingModelProperties{IsTop: 0, ParentId: 0})
				if err != nil {
					logger.Errorf("SetAppointmentFunc update childrens istop error : %s", err.Error())
				}
			}
		}
		return err
	})

	if err != nil {
		logger.Errorf("SetThingsModelSceneFunc error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 设置功能层级
func (s *OpmThingModelSvc) SetFuncLevel(req *proto.OpmThingModel) (*proto.OpmThingModel, error) {
	if req.StandardFuncs == nil && len(req.StandardFuncs) != 0 {
		return nil, errors.New("物模型功能不能为空")
	}
	funcIds := []int64{}
	for _, f := range req.StandardFuncs {
		switch f.FuncType {
		case "properties":
			funcIds = append(funcIds, f.FuncId)
		}
	}
	if len(funcIds) == 0 {
		return nil, errors.New("属性物模型功能不能为空")
	}

	q := orm.Use(iotmodel.GetDB())
	err := q.Transaction(func(tx *orm.Query) error {
		var err error
		for _, s := range req.StandardFuncs {
			updateObj := model.TOpmThingModelProperties{
				IsTop:    s.IsTop,
				ParentId: s.ParentId,
			}
			tProperties := tx.TOpmThingModelProperties
			doProperties := tProperties.WithContext(context.Background())
			_, err = doProperties.Where(tProperties.Id.Eq(s.FuncId)).Select(
				tProperties.IsTop, tProperties.ParentId).Updates(updateObj)
			if err != nil {
				break
			}
		}
		return err
	})

	if err != nil {
		logger.Errorf("SetThingsModelSceneFunc error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 设置排序
func (s *OpmThingModelSvc) SetFuncSort(req *proto.OpmThingModel) (*proto.OpmThingModel, error) {
	if req.Properties == nil {
		return nil, errors.New("物模型功能不能为空")
	}
	q := orm.Use(iotmodel.GetDB())

	//判断是上移，还是下移
	isUp := req.Properties.Sort == 1

	//查询当前功能
	tProperties := q.TOpmThingModelProperties
	theProperty, err := tProperties.WithContext(context.Background()).Where(tProperties.Id.Eq(req.Properties.Id)).First()
	if err != nil {
		return nil, errors.New("当前功能Id不存在")
	}

	//if isUp && theProperty.Sort == 0 {
	//	return nil, errors.New("已经是顶级节点了")
	//}
	//ParentId = 0
	samePropertiesDo := tProperties.WithContext(context.Background()).Where(tProperties.ProductId.Eq(theProperty.ProductId), tProperties.AllowAppointment.Eq(1))
	if theProperty.ParentId != 0 {
		samePropertiesDo = samePropertiesDo.Where(tProperties.ParentId.Eq(theProperty.ParentId))
	} else {
		samePropertiesDo = samePropertiesDo.Where(tProperties.WithContext(context.Background()).Where(tProperties.ParentId.IsNull()).Or(tProperties.ParentId.Eq(0)))
	}

	sameProperties, err := samePropertiesDo.Order(tProperties.Sort, tProperties.Dpid).Find()
	if err != nil {
		return nil, errors.New("当前功能的ParentId不存在")
	}
	sortList := make(iotutil.ArraySortList, 0)
	var theIndex int = 0
	for i, property := range sameProperties {
		sortList = append(sortList, iotutil.ArraySortObj{
			Id:   property.Id,
			Sort: property.Sort,
		})
		if property.Id == theProperty.Id {
			theIndex = i
		}
	}
	if isUp {
		iotutil.MoveUp(sortList, theIndex)
	} else {
		iotutil.MoveDown(sortList, theIndex)
	}
	err = q.Transaction(func(tx *orm.Query) error {
		var err error
		for i, s := range sortList {
			updateObj := model.TOpmThingModelProperties{
				Sort: int32(i + 1),
			}
			tProperties := tx.TOpmThingModelProperties
			doProperties := tProperties.WithContext(context.Background())
			_, err = doProperties.Where(tProperties.Id.Eq(iotutil.ToInt64(s.Id))).Select(tProperties.Sort).Updates(updateObj)
			if err != nil {
				break
			}
		}
		return err
	})

	if err != nil {
		logger.Errorf("SetThingsModelSceneFunc error : %s", err.Error())
		return nil, err
	}
	return req, err
}

var (
	PropertiesFlag int32 = 1
	EventsFlag     int32 = 2
	ServicesFlag   int32 = 3
)

func (s OpmThingModelSvc) existsServices(id int64, productId string, dpid []int32, identifier []string) error {
	q := orm.Use(iotmodel.GetDB())
	tServices := q.TOpmThingModelServices

	doServices := tServices.WithContext(context.Background())
	doServices = doServices.Where(tServices.WithContext(context.Background()).Or(tServices.Dpid.In(dpid...), tServices.Identifier.In(identifier...)),
		tServices.ProductId.Eq(productId))
	dpidCount, err := doServices.Count()
	if id != 0 {
		doServices = doServices.Where(tServices.Id.NotIn(id))
	}
	if err != nil {
		return errors.New("Dpid判断重复异常")
	}
	if dpidCount > 0 {
		return errors.New("Dpid重复")
	}
	return nil
}

func (s OpmThingModelSvc) existsProperties(id int64, productId string, dpid []int32, identifier []string) error {
	q := orm.Use(iotmodel.GetDB())
	tProperties := q.TOpmThingModelProperties
	doProperties := tProperties.WithContext(context.Background())
	doProperties = doProperties.Where(tProperties.WithContext(context.Background()).Or(tProperties.Dpid.In(dpid...), tProperties.Identifier.In(identifier...)),
		tProperties.ProductId.Eq(productId))
	if id != 0 {
		doProperties = doProperties.Where(tProperties.Id.NotIn(id))
	}
	dpidCount, err := doProperties.Count()
	if err != nil {
		return errors.New("Dpid判断重复异常")
	}
	if dpidCount > 0 {
		return errors.New("Dpid重复")
	}
	return nil
}

func (s OpmThingModelSvc) existsEvents(id int64, productId string, dpid []int32, identifier []string) error {
	q := orm.Use(iotmodel.GetDB())
	tEvents := q.TOpmThingModelEvents

	doEvents := tEvents.WithContext(context.Background())
	doEvents = doEvents.Where(tEvents.WithContext(context.Background()).Or(tEvents.Dpid.In(dpid...), tEvents.Identifier.In(identifier...)),
		tEvents.ProductId.Eq(productId))
	if id != 0 {
		doEvents = doEvents.Where(tEvents.Id.NotIn(id))
	}
	dpidCount, err := doEvents.Count()
	if err != nil {
		return errors.New("Dpid判断重复异常")
	}
	if dpidCount > 0 {
		return errors.New("Dpid重复")
	}
	return nil
}
