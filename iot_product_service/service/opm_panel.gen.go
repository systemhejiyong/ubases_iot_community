// Code generated by sgen,2023-06-02 13:48:10. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"go-micro.dev/v4/metadata"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_common/iotstruct"
	"cloud_platform/iot_common/iotutil"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	"cloud_platform/iot_product_service/rpc/rpcClient"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmPanelSvc struct {
	Ctx context.Context
}

// 创建OpmPanel
func (s *OpmPanelSvc) CreateOpmPanel(req *proto.OpmPanel) (*proto.OpmPanel, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOpmPanel
	do := t.WithContext(context.Background())
	dbObj := convert.OpmPanel_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmPanel error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 复制面板
func (s *OpmPanelSvc) CopyOpmPanel(req *proto.OpmPanel) (*proto.OpmPanel, error) {
	q := orm.Use(iotmodel.GetDB())
	err := q.Transaction(func(tx *orm.Query) error {
		t := tx.TOpmPanel
		do := t.WithContext(context.Background())

		copyPanels, err := do.Where(t.Id.Eq(req.Id)).Find()
		if err != nil {
			return err
		}

		copyPanel := copyPanels[0]
		copyPanel.Id = iotutil.GetNextSeqInt64()
		copyPanel.Status = 2
		copyPanel.BuildStatus = 0
		copyPanel.BuildErrStatus = 2
		copyPanel.PanelUrl = ""
		copyPanel.PanelUrlName = ""
		copyPanel.PanelSize = 0
		copyPanel.PanelKey = ""
		//copyPanel.ProductId = req.ProductId
		//copyPanel.BaseProductId = req.BaseProductId
		copyPanel.CreatedBy = req.CreatedBy
		copyPanel.UpdatedBy = req.CreatedBy
		copyPanel.PanelName = fmt.Sprintf("%s_副本", copyPanel.PanelName)
		err = do.Create(copyPanel)
		if err != nil {
			logger.Errorf("CopyOpmPanel error : %s", err.Error())
			return err
		}

		tStudio := tx.TOpmPanelStudio
		doStudio := tStudio.WithContext(context.Background())
		studios, err := doStudio.Where(tStudio.PanelId.Eq(req.Id)).Find()
		if err != nil {
			return err
		}
		saveStudio := make([]*model.TOpmPanelStudio, 0)
		for _, studio := range studios {
			studio.Id = iotutil.GetNextSeqInt64()
			studio.PanelId = copyPanel.Id
			studio.UpdatedBy = copyPanel.UpdatedBy
			studio.CreatedAt = time.Now()
			studio.UpdatedAt = time.Now()
			studio.UpdatedBy = copyPanel.CreatedBy
			saveStudio = append(saveStudio, studio)
		}
		doStudio.Create(saveStudio...)
		if err != nil {
			return err
		}
		req.Id = copyPanel.Id //将最新的Id返回
		return nil
	})

	return req, err
}

// UpdateStatus修改状态
func (s *OpmPanelSvc) UpdateStatus(req *proto.OpmPanel) (*proto.OpmPanel, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanel
	do := t.WithContext(context.Background())
	updateObj := model.TOpmPanel{
		Id:     req.Id,
		Status: req.Status,
	}
	_, err := do.Select(t.Status).Where(t.Id.Eq(req.Id)).Updates(updateObj)
	if err != nil {
		logger.Errorf("UpdateOpmPanel error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 修改面板设计器内容
func (s *OpmPanelSvc) UpdateEditStudio(req *proto.OpmPanel) (*proto.OpmPanel, error) {
	userId, _ := GetUserId(s.Ctx)
	q := orm.Use(iotmodel.GetDB())
	//初始化翻译资源对象
	saveMap := map[string]*proto.LangResourcesList{
		"zh": &proto.LangResourcesList{List: []*proto.LangResources{}},
		"en": &proto.LangResourcesList{List: []*proto.LangResources{}},
	}
	var PanelType int32 = 0
	err := q.Transaction(func(tx *orm.Query) error {
		t := tx.TOpmPanel
		do := t.WithContext(context.Background())
		do = do.Where(t.Id.Eq(req.Id))
		thePanel, err := do.Find()
		if err != nil {
			return err
		}
		dbObj := convert.OpmPanel_pb2db(req)
		//更新修改时间
		_, err = do.Select().Updates(dbObj)
		if err != nil {
			return err
		}
		//面板修改（先删除，在新增）
		doStudio := tx.TOpmPanelStudio.WithContext(context.Background())
		_, err = doStudio.Where(tx.TOpmPanelStudio.PanelId.Eq(req.Id)).Delete()
		if err != nil {
			return err
		}
		for _, studio := range req.PageStudioList {
			pageObj := convert.OpmPanelStudio_pb2db(studio)
			if pageObj.Id == 0 {
				pageObj.Id = iotutil.GetNextSeqInt64()
				studio.Id = pageObj.Id
			}
			err = doStudio.Save(pageObj)
			if err != nil {
				break
			}
			PanelType = thePanel[0].PanelType
			if thePanel[0].PanelType != 2 {
				//将json转换为翻译对象
				err = convertJsonToLangData(req.Id, saveMap, pageObj.JsonContent, pageObj.PopupContent)
				if err != nil {
					break
				}
			}
		}
		return err
	})
	if err != nil {
		logger.Errorf("UpdateOpmPanel error : %s", err.Error())
		return nil, err
	}

	//2嵌入式面板,通知生成LVGL
	if PanelType == 2 {
		rpcClient.ClientLvglService.GenerateCode(s.Ctx, req)
	}
	//异步推送保存翻译数据
	go pullLanguageServcie(userId, req, saveMap)

	return req, err
}

// 根据条件删除OpmPanel
func (s *OpmPanelSvc) DeleteOpmPanel(req *proto.OpmPanel) (*proto.OpmPanel, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanel
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.PanelName != "" { //字符串
		do = do.Where(t.PanelName.Eq(req.PanelName))
	}
	if req.PanelType != 0 { //整数
		do = do.Where(t.PanelType.Eq(req.PanelType))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.BuildStatus != 0 { //整数
		do = do.Where(t.BuildStatus.Eq(req.BuildStatus))
	}
	if req.PanelUrl != "" { //字符串
		do = do.Where(t.PanelUrl.Eq(req.PanelUrl))
	}
	if req.PanelUrlName != "" { //字符串
		do = do.Where(t.PanelUrlName.Eq(req.PanelUrlName))
	}
	if req.PanelSize != 0 { //整数
		do = do.Where(t.PanelSize.Eq(req.PanelSize))
	}
	if req.PanelKey != "" { //字符串
		do = do.Where(t.PanelKey.Eq(req.PanelKey))
	}
	if req.PreviewName != "" { //字符串
		do = do.Where(t.PreviewName.Eq(req.PreviewName))
	}
	if req.PreviewUrl != "" { //字符串
		do = do.Where(t.PreviewUrl.Eq(req.PreviewUrl))
	}
	if req.PackageId != 0 { //整数
		do = do.Where(t.PackageId.Eq(req.PackageId))
	}
	if req.PackageName != "" { //字符串
		do = do.Where(t.PackageName.Eq(req.PackageName))
	}
	if req.ModelId != 0 { //整数
		do = do.Where(t.ModelId.Eq(req.ModelId))
	}
	if req.ModelName != "" { //字符串
		do = do.Where(t.ModelName.Eq(req.ModelName))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmPanel error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpmPanel
func (s *OpmPanelSvc) DeleteByIdOpmPanel(req *proto.OpmPanel) (*proto.OpmPanel, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanel
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmPanel error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpmPanel
func (s *OpmPanelSvc) DeleteByIdsOpmPanel(req *proto.OpmPanelBatchDeleteRequest) (*proto.OpmPanelBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmPanel
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmPanel error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpmPanel
func (s *OpmPanelSvc) UpdateOpmPanel(req *proto.OpmPanel) (*proto.OpmPanel, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanel
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.TenantId)
	}
	if req.PanelName != "" { //字符串
		updateField = append(updateField, t.PanelName)
	}
	if req.PanelType != 0 { //整数
		updateField = append(updateField, t.PanelType)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.BuildStatus != 0 { //整数
		updateField = append(updateField, t.BuildStatus)
	}
	if req.BuildTime != nil { //整数
		updateField = append(updateField, t.BuildTime)
	}
	if req.BuildDesc != "" { //字符串
		updateField = append(updateField, t.BuildDesc)
	}
	if req.PanelUrl != "" { //字符串
		updateField = append(updateField, t.PanelUrl)
	}
	if req.PanelUrlName != "" { //字符串
		updateField = append(updateField, t.PanelUrlName)
	}
	if req.PanelSize != 0 { //整数
		updateField = append(updateField, t.PanelSize)
	}
	if req.PanelKey != "" { //字符串
		updateField = append(updateField, t.PanelKey)
	}
	if req.PreviewName != "" { //字符串
		updateField = append(updateField, t.PreviewName)
	}
	if req.PreviewUrl != "" { //字符串
		updateField = append(updateField, t.PreviewUrl)
	}
	if req.PackageId != 0 { //整数
		updateField = append(updateField, t.PackageId)
	}
	if req.PackageName != "" { //字符串
		updateField = append(updateField, t.PackageName)
	}
	if req.ModelId != 0 { //整数
		updateField = append(updateField, t.ModelId)
	}
	if req.ModelName != "" { //字符串
		updateField = append(updateField, t.ModelName)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if req.BaseProductId != 0 { //整数
		updateField = append(updateField, t.BaseProductId)
	}
	if req.ProductId != 0 { //整数
		updateField = append(updateField, t.ProductId)
	}
	if req.BuildErrStatus != 0 { //整数
		updateField = append(updateField, t.BuildErrStatus)
	}
	if req.SourceZip != "" {
		updateField = append(updateField, t.SourceZip)
	}
	if req.LangFileName != "" {
		updateField = append(updateField, t.LangFileName)
	}
	if req.Remark != "" {
		updateField = append(updateField, t.Remark)
	}
	if req.Code != "" {
		updateField = append(updateField, t.Code)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmPanel error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmPanel_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmPanel error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpmPanel
func (s *OpmPanelSvc) UpdateAllOpmPanel(req *proto.OpmPanel) (*proto.OpmPanel, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanel
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.TenantId)
	updateField = append(updateField, t.PanelName)
	updateField = append(updateField, t.PanelType)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.BuildStatus)
	updateField = append(updateField, t.PanelUrl)
	updateField = append(updateField, t.PanelUrlName)
	updateField = append(updateField, t.PanelSize)
	updateField = append(updateField, t.PanelKey)
	updateField = append(updateField, t.PreviewName)
	updateField = append(updateField, t.PreviewUrl)
	updateField = append(updateField, t.PackageId)
	updateField = append(updateField, t.PackageName)
	updateField = append(updateField, t.ModelId)
	updateField = append(updateField, t.ModelName)
	updateField = append(updateField, t.Width)
	updateField = append(updateField, t.Height)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	updateField = append(updateField, t.BaseProductId)
	updateField = append(updateField, t.ProductId)
	updateField = append(updateField, t.BuildErrStatus)
	updateField = append(updateField, t.LangFileName)
	updateField = append(updateField, t.Remark)
	updateField = append(updateField, t.Code)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmPanel error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmPanel_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmPanel error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmPanelSvc) UpdateFieldsOpmPanel(req *proto.OpmPanelUpdateFieldsRequest) (*proto.OpmPanel, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanel
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmPanel error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmPanel error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmPanel_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmPanel error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmPanel
func (s *OpmPanelSvc) FindOpmPanel(req *proto.OpmPanelFilter) (*proto.OpmPanel, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanel
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.PanelName != "" { //字符串
		do = do.Where(t.PanelName.Eq(req.PanelName))
	}
	if req.PanelType != 0 { //整数
		do = do.Where(t.PanelType.Eq(req.PanelType))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.BuildStatus != 0 { //整数
		do = do.Where(t.BuildStatus.Eq(req.BuildStatus))
	}
	if req.PanelUrl != "" { //字符串
		do = do.Where(t.PanelUrl.Eq(req.PanelUrl))
	}
	if req.PanelUrlName != "" { //字符串
		do = do.Where(t.PanelUrlName.Eq(req.PanelUrlName))
	}
	if req.PanelSize != 0 { //整数
		do = do.Where(t.PanelSize.Eq(req.PanelSize))
	}
	if req.PanelKey != "" { //字符串
		do = do.Where(t.PanelKey.Eq(req.PanelKey))
	}
	if req.PreviewName != "" { //字符串
		do = do.Where(t.PreviewName.Eq(req.PreviewName))
	}
	if req.PreviewUrl != "" { //字符串
		do = do.Where(t.PreviewUrl.Eq(req.PreviewUrl))
	}
	if req.PackageId != 0 { //整数
		do = do.Where(t.PackageId.Eq(req.PackageId))
	}
	if req.PackageName != "" { //字符串
		do = do.Where(t.PackageName.Eq(req.PackageName))
	}
	if req.ModelId != 0 { //整数
		do = do.Where(t.ModelId.Eq(req.ModelId))
	}
	if req.ModelName != "" { //字符串
		do = do.Where(t.ModelName.Eq(req.ModelName))
	}
	if req.Code != "" { //字符串
		do = do.Where(t.Code.Eq(req.Code))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmPanel error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmPanel_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpmPanel
func (s *OpmPanelSvc) FindByIdOpmPanel(req *proto.OpmPanelFilter) (*proto.OpmPanel, error) {
	q := orm.Use(iotmodel.GetDB())
	t := q.TOpmPanel
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmPanel error : %s", err.Error())
		return nil, err
	}

	//查询设计器内容
	tStudio := q.TOpmPanelStudio
	studios, err := tStudio.WithContext(context.Background()).Where(tStudio.PanelId.Eq(req.Id)).Find()
	if err != nil {
		logger.Errorf("FindByIdOpmPanel error : %s", err.Error())
		return nil, err
	}

	res := convert.OpmPanel_db2pb(dbObj)
	res.PageStudioList = make([]*proto.OpmPanelStudio, 0)
	for _, studio := range studios {
		res.PageStudioList = append(res.PageStudioList, convert.OpmPanelStudio_db2pb(studio))
	}
	return res, err
}

// 根据分页条件查找OpmPanel,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmPanelSvc) GetListOpmPanel(req *proto.OpmPanelListRequest) ([]*proto.OpmPanel, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	q := orm.Use(iotmodel.GetDB())
	t := q.TOpmPanel
	do := t.WithContext(context.Background())

	tRetion := q.TOpmProductPanelRelation
	t2 := q.TOpmPanel.As("t2")
	doRetion := tRetion.WithContext(context.Background()).Join(t2, t2.Id.EqCol(tRetion.ControlPanelId), t2.TenantId.Eq(req.Query.TenantId)).Group(tRetion.ControlPanelId).Select(tRetion.ControlPanelId, tRetion.ProductId.Count().As("useCount"))

	do = do.LeftJoin(doRetion.As(tRetion.TableName()), tRetion.ControlPanelId.EqCol(t.Id))

	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Like("%" + query.TenantId + "%"))
		}
		if query.PanelName != "" { //字符串
			do = do.Where(t.PanelName.Like("%" + query.PanelName + "%"))
		}
		if query.PanelType != 0 { //整数
			do = do.Where(t.PanelType.Eq(query.PanelType))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.BuildStatus != 0 { //整数
			do = do.Where(t.BuildStatus.Eq(query.BuildStatus))
		}
		if query.PanelUrl != "" { //字符串
			do = do.Where(t.PanelUrl.Like("%" + query.PanelUrl + "%"))
		}
		if query.PanelUrlName != "" { //字符串
			do = do.Where(t.PanelUrlName.Like("%" + query.PanelUrlName + "%"))
		}
		if query.PanelSize != 0 { //整数
			do = do.Where(t.PanelSize.Eq(query.PanelSize))
		}
		if query.PanelKey != "" { //字符串
			do = do.Where(t.PanelKey.Like("%" + query.PanelKey + "%"))
		}
		if query.PreviewName != "" { //字符串
			do = do.Where(t.PreviewName.Like("%" + query.PreviewName + "%"))
		}
		if query.PreviewUrl != "" { //字符串
			do = do.Where(t.PreviewUrl.Like("%" + query.PreviewUrl + "%"))
		}
		if query.PackageId != 0 { //整数
			do = do.Where(t.PackageId.Eq(query.PackageId))
		}
		if query.PackageName != "" { //字符串
			do = do.Where(t.PackageName.Like("%" + query.PackageName + "%"))
		}
		if query.ModelId != 0 { //整数
			do = do.Where(t.ModelId.Eq(query.ModelId))
		}
		if query.ModelName != "" { //字符串
			do = do.Where(t.ModelName.Like("%" + query.ModelName + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
		if query.BaseProductId != 0 { //整数
			do = do.Where(t.BaseProductId.Eq(query.BaseProductId))
		}
		if query.ProductId != 0 { //整数
			do = do.Where(t.ProductId.Eq(query.ProductId))
		}
		if query.PanelTypes != nil && len(query.PanelTypes) != 0 {
			do = do.Where(t.PanelType.In(query.PanelTypes...))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []struct{
		model.TOpmPanel
		UseCount int32 `gorm:"column:useCount" json:"useCount"`// 当前适用次数
	}

	do = do.Select(t.ALL, field.NewInt(tRetion.TableName(), "useCount"))

	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do.ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmPanel error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmPanel, len(list))
	for i, v := range list {
		result[i] = convert.OpmPanel_db2pb(&v.TOpmPanel)
		result[i].UseCount =  v.UseCount
	}
	return result, total, nil
}

// 保存翻译数据
func pullLanguageServcie(userId string, req *proto.OpmPanel, saveMap map[string]*proto.LangResourcesList) error {
	//默认语言数据保存
	for k, v := range req.Zhs {
		saveMap["zh"].List = append(saveMap["zh"].List, &proto.LangResources{
			BelongType: 4,
			BelongId:   req.Id,
			Lang:       "zh",
			Code:       k,
			Value:      v,
		})
	}
	for k, v := range req.Ens {
		saveMap["en"].List = append(saveMap["en"].List, &proto.LangResources{
			BelongType: 4,
			BelongId:   req.Id,
			Lang:       "en",
			Code:       k,
			Value:      v,
		})
	}
	saveObj := proto.LangResourcePackage{
		BelongType:   4, //面板
		BelongId:     req.Id,
		PackageName:  req.PanelName,
		LangResource: saveMap,
	}
	ctx := metadata.NewContext(context.Background(),
		map[string]string{
			"userId": userId,
		})
	res, err := rpcClient.ClientLangResourcesPackageService.Create(ctx, &saveObj)
	if err != nil {
		logger.Errorf("pullLanguageServcie error : %s", err.Error())
		return err
	}
	if res.Code != 200 {
		return errors.New(res.Message)
	}
	return nil
}

// 将JSON转换为语言数据
func convertJsonToLangData(panelId int64, saveMap map[string]*proto.LangResourcesList, jsonContent string, popupContent string) error {
	if jsonContent == "" {
		return errors.New("jsonContent is empty")
	}
	var jsonObj iotstruct.AppPanelPage = iotstruct.AppPanelPage{}
	err := iotutil.JsonToStruct(jsonContent, &jsonObj.JsonContent)
	if err != nil {
		return err
	}
	if popupContent != "" {
		err = iotutil.JsonToStruct(popupContent, &jsonObj.PopupContent)
		if err != nil {
			return err
		}
	}
	codeCheck := map[string]int{}
	setLangContentExt(panelId, codeCheck, saveMap, jsonObj.JsonContent)
	for _, component := range jsonObj.JsonContent.ComponentList {
		recursionReadLang(panelId, codeCheck, saveMap, &component)
	}

	if jsonObj.PopupContent != nil {
		for _, component := range jsonObj.PopupContent {
			recursionReadLang(panelId, codeCheck, saveMap, &component)
		}
	}
	return nil
}

func recursionReadLang(panelId int64, codeCheck map[string]int, saveMap map[string]*proto.LangResourcesList, component *iotstruct.AppPanelComponentItem) {
	setLangContent(panelId, codeCheck, saveMap, component)
	if component.ComponentList != nil {
		for _, c := range component.ComponentList {
			recursionReadLang(panelId, codeCheck, saveMap, &c)
		}
	}
}

var langType = []string{"zh", "en"}

// FunctionValueProps
func readFunctionValueProps(panelId int64, codeCheck map[string]int, saveMap map[string]*proto.LangResourcesList, component *iotstruct.AppPanelComponentItem) {
	if component.FunctionValuePropsList != nil && len(component.FunctionValuePropsList) > 0 {
		getFunctionValuePropsLang(panelId, codeCheck, saveMap, component.VariableName, "functionValuePropsList", component.FunctionValuePropsList)
	}
}

// FunctionProps
func readFunctionProps(panelId int64, codeCheck map[string]int, saveMap map[string]*proto.LangResourcesList, component *iotstruct.AppPanelComponentItem) {
	if component.FunctionPropsList != nil && len(component.FunctionPropsList) > 0 {
		getFunctionPropsLang(panelId, codeCheck, saveMap, component.VariableName, "functionPropsList", component.FunctionPropsList)
	}
}

// FunctionData
func readFunctionData(panelId int64, codeCheck map[string]int, saveMap map[string]*proto.LangResourcesList, component *iotstruct.AppPanelComponentItem) {
	if component.FunctionData != nil && component.FunctionData.Identifier != "" {
		getDescLang(panelId, codeCheck, saveMap, component.VariableName, "functionData", component.FunctionData.DataSpecsList)
	}
}

func getDescLang(panelId int64, codeCheck map[string]int, saveMap map[string]*proto.LangResourcesList, variableName string, field string, jsonStr string) error {
	if jsonStr == "" || jsonStr == "[]" {
		return errors.New("jsonStr is empty")
	}
	var resObj []map[string]interface{}
	err := json.Unmarshal([]byte(jsonStr), &resObj)
	if err != nil {
		return errors.New(err.Error())
	}
	if resObj == nil {
		return errors.New("resObj")
	}
	for i, item := range resObj {
		langCode := fmt.Sprintf("%v%v%v", variableName, field, i)
		maps := map[string]interface{}{"zh": item["desc"], "en": item["desc_en"]}
		setSaveMap(panelId, langCode, codeCheck, saveMap, maps)
	}
	return nil
}

func getFunctionValuePropsLang(panelId int64, codeCheck map[string]int, saveMap map[string]*proto.LangResourcesList, variableName string, field string, items []iotstruct.FunctionValuePropsItem) ([]iotstruct.FunctionValuePropsItemExt, error) {
	res := make([]iotstruct.FunctionValuePropsItemExt, 0)
	if items == nil {
		return nil, errors.New("resObj")
	}
	for i, item := range items {
		desc := item.FunctionName["zh"]
		descEn := item.FunctionName["en"]
		langCode := fmt.Sprintf("%v%v%v", variableName, field, i)
		maps := map[string]interface{}{"zh": desc, "en": descEn}
		setSaveMap(panelId, langCode, codeCheck, saveMap, maps)
	}
	return res, nil
}

func getFunctionPropsLang(panelId int64, codeCheck map[string]int, saveMap map[string]*proto.LangResourcesList, variableName string, field string, items []iotstruct.FunctionPropsItem) ([]iotstruct.FunctionPropsItemExt, error) {
	res := make([]iotstruct.FunctionPropsItemExt, 0)
	if items == nil {
		return nil, errors.New("resObj")
	}
	for i, item := range items {
		desc := item.FunctionName["zh"]
		descEn := item.FunctionName["en"]
		langCode := fmt.Sprintf("%v%v%v", variableName, field, i)
		maps := map[string]interface{}{"zh": desc, "en": descEn}
		setSaveMap(panelId, langCode, codeCheck, saveMap, maps)
	}
	return res, nil
}

func setLangContent(panelId int64, codeCheck map[string]int, saveMap map[string]*proto.LangResourcesList, component *iotstruct.AppPanelComponentItem) error {
	for sl, sv := range component.Style {
		if sv == nil {
			continue
		}

		switch sl {
		case "headerTitle", "text", "funTitle", "subTitle", "titleText":
			langCode := component.VariableName + sl
			switch sv.(type) {
			case map[string]interface{}:
				maps := sv.(map[string]interface{})
				setSaveMap(panelId, langCode, codeCheck, saveMap, maps)
			}
		}
	}
	readFunctionValueProps(panelId, codeCheck, saveMap, component)
	readFunctionProps(panelId, codeCheck, saveMap, component)
	readFunctionData(panelId, codeCheck, saveMap, component)
	return nil
}
func setLangContentExt(panelId int64, codeCheck map[string]int, saveMap map[string]*proto.LangResourcesList, component *iotstruct.AppPanelPageContent) error {
	for sl, sv := range component.Style {
		if sv == nil {
			continue
		}
		switch sl {
		case "headerTitle", "text", "funTitle", "subTitle", "titleText":
			langCode := component.VariableName + sl
			maps := sv.(map[string]interface{})
			setSaveMap(panelId, langCode, codeCheck, saveMap, maps)
		}
	}
	return nil
}

func setSaveMap(panelId int64, langCode string, codeCheck map[string]int, saveMap map[string]*proto.LangResourcesList, currMaps map[string]interface{}) error {
	if _, ok := codeCheck[langCode]; ok {
		return errors.New("重复")
	}
	codeCheck[langCode] = 1
	for _, lang := range langType {
		saveMap[lang].List = append(saveMap[lang].List, &proto.LangResources{
			BelongType: 4,
			BelongId:   panelId,
			Lang:       lang,
			Code:       langCode,
			Value:      iotutil.ToString(currMaps[lang]),
		})
	}
	return nil
}
