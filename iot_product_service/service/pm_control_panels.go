// Code generated by sgen.exe,2022-05-05 20:17:27. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_product_service/service/scanobject"
	"context"
	"errors"
	"fmt"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type PmControlPanelsSvc struct {
	Ctx context.Context
}

// 创建PmControlPanels
func (s *PmControlPanelsSvc) CreatePmControlPanels(req *proto.PmControlPanels) (*proto.PmControlPanels, error) {
	t := orm.Use(iotmodel.GetDB()).TPmControlPanels
	do := t.WithContext(context.Background())
	//req.Id = iotutil.GetNextSeqInt64()
	dbObj := convert.PmControlPanels_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreatePmControlPanels error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除PmControlPanels
func (s *PmControlPanelsSvc) DeletePmControlPanels(req *proto.PmControlPanels) (*proto.PmControlPanels, error) {
	t := orm.Use(iotmodel.GetDB()).TPmControlPanels
	do := t.WithContext(context.Background())

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.NameEn != "" { //字符串
		do = do.Where(t.NameEn.Eq(req.NameEn))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.Desc != "" { //字符串
		do = do.Where(t.Desc.Eq(req.Desc))
	}
	if req.Url != "" { //字符串
		do = do.Where(t.Url.Eq(req.Url))
	}
	if req.UrlName != "" { //字符串
		do = do.Where(t.UrlName.Eq(req.UrlName))
	}
	if req.PanelSize != 0 { //整数
		do = do.Where(t.PanelSize.Eq(req.PanelSize))
	}
	if req.PreviewName != "" { //字符串
		do = do.Where(t.PreviewName.Eq(req.PreviewName))
	}
	if req.PreviewUrl != "" { //字符串
		do = do.Where(t.PreviewUrl.Eq(req.PreviewUrl))
	}
	if req.PreviewSize != 0 { //整数
		do = do.Where(t.PreviewSize.Eq(req.PreviewSize))
	}
	if req.ProductTypeId != 0 { //整数
		do = do.Where(t.ProductTypeId.Eq(req.ProductTypeId))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeletePmControlPanels error : %s", err.Error())
		return nil, err
	}
	DeletePmProductPanels(req.Id)
	return req, err
}

// 根据数据库表主键删除PmControlPanels
func (s *PmControlPanelsSvc) DeleteByIdPmControlPanels(req *proto.PmControlPanels) (*proto.PmControlPanels, error) {
	//如果有关联的产品已发布的产品，则不允许删除
	ctx := context.Background()
	q := orm.Use(iotmodel.GetDB())
	tproduct := q.TPmProduct
	tproduct_panels := q.TPmProductPanelRelation
	subQuery := tproduct_panels.WithContext(ctx).Select(tproduct_panels.ProductId).Where(tproduct_panels.ControlPanelId.Eq(req.Id), tproduct_panels.ProductId.EqCol(tproduct.Id))
	cnt, err := tproduct.WithContext(ctx).Exists(subQuery).Where(tproduct.Status.Gt(0)).Count()
	if err != nil {
		return nil, errors.New(fmt.Sprintf("查询数据错误:%s", err.Error()))
	}
	if cnt > 0 {
		return nil, errors.New("引用该控制面板的产品已发布，不允许删除")
	}

	tpanels := q.TPmControlPanels
	do := tpanels.WithContext(context.Background())
	if req.Id != 0 { //整数
		do = do.Where(tpanels.Id.Eq(req.Id))
	}
	_, err = do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdPmControlPanels error : %s", err.Error())
		return nil, err
	}
	DeletePmProductPanels(req.Id)
	return req, err
}

// 根据数据库表主键批量删除PmControlPanels
func (s *PmControlPanelsSvc) DeleteByIdsPmControlPanels(req *proto.PmControlPanelsBatchDeleteRequest) (*proto.PmControlPanelsBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TPmControlPanels
		do := t.WithContext(context.Background())
		do = do.Where(t.Id.Eq(k.Id))
		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsPmControlPanels error : %s", err.Error())
			break
		}
		DeletePmProductPanels(k.Id)
	}
	return req, err
}

// 根据主键更新PmControlPanels
func (s *PmControlPanelsSvc) UpdatePmControlPanels(req *proto.PmControlPanels) (*proto.PmControlPanels, error) {
	if req.ProductTypeId != 0 || req.ProductId != 0 {
		err := CheckUpdate(req.Id, req.ProductId, req.ProductTypeId)
		if err != nil {
			return nil, err
		}
	}
	t := orm.Use(iotmodel.GetDB()).TPmControlPanels
	do := t.WithContext(context.Background())
	//要更新的字段,不包括主键
	var updateField []field.Expr
	if req.Code != "" { //面板编码
		updateField = append(updateField, t.Code)
	}
	if req.Name != "" { //字符串
		updateField = append(updateField, t.Name)
	}
	if req.NameEn != "" { //字符串
		updateField = append(updateField, t.NameEn)
	}
	if req.Lang != "" { //字符串
		updateField = append(updateField, t.Lang)
	}
	if req.Desc != "" { //字符串
		updateField = append(updateField, t.Desc)
	}
	if req.Url != "" { //字符串
		updateField = append(updateField, t.Url)
	}
	if req.UrlName != "" { //字符串
		updateField = append(updateField, t.UrlName)
	}
	if req.PanelSize != 0 { //整数
		updateField = append(updateField, t.PanelSize)
	}
	if req.PanelKey != "" { //整数
		updateField = append(updateField, t.PanelKey)
	}
	if req.PreviewName != "" { //字符串
		updateField = append(updateField, t.PreviewName)
	}
	if req.PreviewUrl != "" { //字符串
		updateField = append(updateField, t.PreviewUrl)
	}
	if req.PreviewSize != 0 { //整数
		updateField = append(updateField, t.PreviewSize)
	}
	//productTypeId 支持修改为0
	if req.ProductTypeId != -1 { //整数
		updateField = append(updateField, t.ProductTypeId)
	}
	if req.ProductId != -1 { //整数
		updateField = append(updateField, t.ProductId)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.LangFileName != "" {
		updateField = append(updateField, t.LangFileName)
	}
	if req.Code != "" {
		updateField = append(updateField, t.Code)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdatePmControlPanels error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.PmControlPanels_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdatePmControlPanels error : %s", err.Error())
		return nil, err
	}
	UpdatePanelsProduct(req.Id, req.ProductId, req.ProductTypeId)
	return req, err
}

// //根据主键更新所有字段PmControlPanels
func (s *PmControlPanelsSvc) UpdateAllPmControlPanels(req *proto.PmControlPanels) (*proto.PmControlPanels, error) {
	t := orm.Use(iotmodel.GetDB()).TPmControlPanels
	do := t.WithContext(context.Background())
	//要更新的字段,不包括主键
	var updateField []field.Expr
	updateField = append(updateField, t.Name)
	updateField = append(updateField, t.NameEn)
	updateField = append(updateField, t.Lang)
	updateField = append(updateField, t.Desc)
	updateField = append(updateField, t.Url)
	updateField = append(updateField, t.UrlName)
	updateField = append(updateField, t.PanelSize)
	updateField = append(updateField, t.PanelKey)
	updateField = append(updateField, t.PreviewName)
	updateField = append(updateField, t.PreviewUrl)
	updateField = append(updateField, t.PreviewSize)
	updateField = append(updateField, t.LangFileName)
	updateField = append(updateField, t.ProductTypeId)
	updateField = append(updateField, t.ProductId)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	updateField = append(updateField, t.Code)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllPmControlPanels error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.PmControlPanels_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllPmControlPanels error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *PmControlPanelsSvc) UpdateFieldsPmControlPanels(req *proto.PmControlPanelsUpdateFieldsRequest) (*proto.PmControlPanels, error) {
	t := orm.Use(iotmodel.GetDB()).TPmControlPanels
	do := t.WithContext(context.Background())
	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsPmControlPanels error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsPmControlPanels error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.PmControlPanels_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsPmControlPanels error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找PmControlPanels
func (s *PmControlPanelsSvc) FindPmControlPanels(req *proto.PmControlPanelsFilter) (*proto.PmControlPanelsDetails, error) {
	query := orm.Use(iotmodel.GetDB())
	ctx := context.Background()
	tpanels := query.TPmControlPanels
	tproduct := query.TPmProduct
	tproductType := query.TPmProductType
	do := tpanels.WithContext(ctx).Select(tpanels.ALL, tproductType.Name.As("ProductTypeName"),
		field.Func.GetProductTypeFullName(tpanels.ProductTypeId).As("ProductTypeFullName"),
		tproduct.Name.As("ProductName"), tproduct.Status.As("ProductStatus")).
		LeftJoin(tproductType, tpanels.ProductTypeId.EqCol(tproductType.Id)).
		LeftJoin(tproduct, tpanels.ProductId.EqCol(tproduct.Id))
	if req.Id != 0 { //整数
		do = do.Where(tpanels.Id.Eq(req.Id))
	}
	if req.Name != "" { //字符串
		do = do.Where(tpanels.Name.Eq(req.Name))
	}
	if req.NameEn != "" { //字符串
		do = do.Where(tpanels.NameEn.Eq(req.NameEn))
	}
	if req.Lang != "" { //字符串
		do = do.Where(tpanels.Lang.Eq(req.Lang))
	}
	if req.Desc != "" { //字符串
		do = do.Where(tpanels.Desc.Eq(req.Desc))
	}
	if req.Url != "" { //字符串
		do = do.Where(tpanels.Url.Eq(req.Url))
	}
	if req.UrlName != "" { //字符串
		do = do.Where(tpanels.UrlName.Eq(req.UrlName))
	}
	if req.PreviewName != "" { //字符串
		do = do.Where(tpanels.PreviewName.Eq(req.PreviewName))
	}
	if req.ProductTypeId != 0 { //整数
		do = do.Where(tpanels.ProductTypeId.Eq(req.ProductTypeId))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(tpanels.ProductId.Eq(req.ProductId))
	}
	if req.Status != 0 { //整数
		do = do.Where(tpanels.Status.Eq(req.Status))
	}
	var scanObj scanobject.ScanPmControlPanels
	err := do.Scan(&scanObj)
	res := scanObj.ToPb()
	return res, err
}

// 根据数据库表主键查找PmControlPanels
func (s *PmControlPanelsSvc) FindByIdPmControlPanels(req *proto.PmControlPanelsFilter) (*proto.PmControlPanelsDetails, error) {
	query := orm.Use(iotmodel.GetDB())
	ctx := context.Background()
	tpanels := query.TPmControlPanels
	tproduct := query.TPmProduct
	tproductType := query.TPmProductType
	var scanObj scanobject.ScanPmControlPanels
	err := tpanels.WithContext(ctx).Select(tpanels.ALL, tproductType.Name.As("ProductTypeName"),
		field.Func.GetProductTypeFullName(tpanels.ProductTypeId).As("ProductTypeFullName"),
		tproduct.Name.As("ProductName"), tproduct.Status.As("ProductStatus")).
		LeftJoin(tproductType, tpanels.ProductTypeId.EqCol(tproductType.Id)).
		LeftJoin(tproduct, tpanels.ProductId.EqCol(tproduct.Id)).Where(tpanels.Id.Eq(req.Id)).Scan(&scanObj)
	res := scanObj.ToPb()
	return res, err
}

// 测试自定义MySQL函数
func Test() {
	query := orm.Use(iotmodel.GetDB())
	ctx := context.Background()
	var id int64 = 7123888543570690048
	tpanels := query.TPmControlPanels
	tproduct := query.TPmProduct
	tproductType := query.TPmProductType
	var scanObj scanobject.ScanPmControlPanels
	err := tpanels.WithContext(ctx).Select(tpanels.ALL, tproductType.Name.As("ProductTypeName"),
		field.Func.GetProductTypeFullName(tpanels.ProductTypeId).As("ProductTypeFullName"),
		tproduct.Name.As("ProductName"), tproduct.Status.As("ProductStatus")).
		LeftJoin(tproductType, tpanels.ProductTypeId.EqCol(tproductType.Id)).
		LeftJoin(tproduct, tpanels.ProductId.EqCol(tproduct.Id)).Where(tpanels.Id.Eq(id)).Scan(&scanObj)
	if err != nil {
		fmt.Println(err.Error())
	}
}

// 根据分页条件查找PmControlPanels,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *PmControlPanelsSvc) GetListPmControlPanels(req *proto.PmControlPanelsListRequest) ([]*proto.PmControlPanelsDetails, int64, error) {
	var err error
	q := orm.Use(iotmodel.GetDB())
	ctx := context.Background()
	tpanels := q.TPmControlPanels
	tproduct := q.TPmProduct
	tproductType := q.TPmProductType
	do := tpanels.WithContext(ctx).Select(tpanels.ALL, tproductType.Name.As("ProductTypeName"),
		field.Func.GetProductTypeFullName(tpanels.ProductTypeId).As("ProductTypeFullName"),
		tproduct.Name.As("ProductName"), tproduct.Status.As("ProductStatus")).
		LeftJoin(tproductType, tpanels.ProductTypeId.EqCol(tproductType.Id)).
		LeftJoin(tproduct, tpanels.ProductId.EqCol(tproduct.Id))
	query := req.Query
	if query != nil {
		if query.Name != "" { //字符串
			do = do.Where(do.Where(tpanels.Name.Like("%" + query.Name + "%")).Or(tpanels.NameEn.Like("%" + query.Name + "%")))
		}
		if query.Lang != "" { //字符串
			do = do.Where(tpanels.Lang.Like("%" + query.Lang + "%"))
		}
		if query.ProductTypeId != 0 { //整数
			orWhere := q.TPmProductType.WithContext(context.Background()).
				Where(tpanels.ProductTypeId.Eq(query.ProductTypeId)).Or(tpanels.ProductTypeId.Eq(0)).Or(tpanels.ProductTypeId.IsNull())
			do = do.Where(orWhere)
		}
		if query.ProductId != 0 && query.Associate == 0 { //整数
			//有产品类型ID，且只查询该产品的
			do = do.Where(tpanels.ProductId.Eq(query.ProductId))
		} else if query.ProductId != 0 && query.Associate > 0 {
			//有产品类型ID，且查询该产品的和未被关联的
			do = do.Where(q.TPmControlPanels.WithContext(context.Background()).Where(tpanels.ProductId.Eq(query.ProductId)).Or(tpanels.ProductId.Eq(0)))
		} else if query.ProductId == 0 && query.Associate > 0 {
			//未被关联的
			do = do.Where(tpanels.ProductId.Eq(0))
		} else if query.Associate != 0 {
			do = do.Where(tpanels.ProductId.Eq(0))
		}
		if query.Status != 0 { //整数
			do = do.Where(tpanels.Status.Eq(query.Status))
		}
		//if query.Associate != 0 { //整数
		//	//do = do.Where(tpanels.ProductId.IsNull())
		//	do = do.Where(tpanels.ProductId.Eq(0))
		//}
	}
	orderCol, ok := tpanels.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(tpanels.CreatedAt.Desc())
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []scanobject.ScanPmControlPanels
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do.ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListPmControlPanels error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.PmControlPanelsDetails, len(list))
	for i, v := range list {
		result[i] = v.ToPb()
	}
	return result, total, nil
}

// 更新产品类型清除关联产品控制面板关联记录
func UpdatePanelsProduct(id, ProductId, ProductTypeId int64) {
	if id == 0 {
		return
	}
	query := orm.Use(iotmodel.GetDB())
	ctx := context.Background()
	tpanels := query.TPmControlPanels
	panel, err := tpanels.WithContext(ctx).Where(tpanels.Id.Eq(id)).First()
	if err != nil || panel == nil {
		return
	}
	//产品ID有改变
	if ProductId != panel.ProductId {
		t := orm.Use(iotmodel.GetDB()).TPmProductPanelRelation
		do := t.WithContext(context.Background())
		do = do.Where(t.ControlPanelId.Eq(id))
		//本产品类型除外
		do = do.Where(t.ProductId.Neq(ProductId))
		do.Delete()
	}
	//控制面板分类改变
	if ProductTypeId != panel.ProductTypeId {
		t := orm.Use(iotmodel.GetDB()).TPmProductPanelRelation
		do := t.WithContext(context.Background())
		do = do.Where(t.ControlPanelId.Eq(id))
		do.Delete()
	}
}

func CheckUpdate(id, ProductId, ProductTypeId int64) error {
	query := orm.Use(iotmodel.GetDB())
	ctx := context.Background()
	tpanels := query.TPmControlPanels
	panel, err := tpanels.WithContext(ctx).Where(tpanels.Id.Eq(id)).First()
	if err != nil {
		return err
	}
	bret, err := IsUsedPanels(id)
	if err != nil {
		return err
	}
	if bret && ((panel.ProductId != ProductId && ProductId > 0) || panel.ProductTypeId != ProductTypeId) {
		return fmt.Errorf("控制面板被开放平台或云管平台的产品占用,禁止修改")
	}
	return nil
}

func IsUsedPanels(id int64) (bool, error) {
	//查找云管平台有没有占用
	t := orm.Use(iotmodel.GetDB()).TPmProductPanelRelation
	count, err := t.WithContext(context.Background()).Where(t.ControlPanelId.Eq(id)).Count()
	if err != nil {
		return false, err
	}
	if count > 0 {
		return true, nil
	}
	//查找开放平台控制面板有没有被占用
	t2 := orm.Use(iotmodel.GetDB()).TOpmProductPanelRelation
	count, err = t2.WithContext(context.Background()).Where(t2.ControlPanelId.Eq(id)).Count()
	if err != nil {
		return false, err
	}
	if count > 0 {
		return true, nil
	}
	return false, nil
}

// 删除控制面板，则清除关联产品控制面板关联记录
func DeletePmProductPanels(id int64) {
	if id == 0 {
		return
	}
	t := orm.Use(iotmodel.GetDB()).TOpmProductPanelRelation
	do := t.WithContext(context.Background())
	do = do.Where(t.ControlPanelId.Eq(id))
	do.Delete()
}
