// Code generated by sgen,2023-06-02 13:48:11. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmPanelAuthRelationSvc struct {
	Ctx context.Context
}

//创建OpmPanelAuthRelation
func (s *OpmPanelAuthRelationSvc) CreateOpmPanelAuthRelation(req *proto.OpmPanelAuthRelation) (*proto.OpmPanelAuthRelation, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOpmPanelAuthRelation
	do := t.WithContext(context.Background())
	dbObj := convert.OpmPanelAuthRelation_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmPanelAuthRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

//根据条件删除OpmPanelAuthRelation
func (s *OpmPanelAuthRelationSvc) DeleteOpmPanelAuthRelation(req *proto.OpmPanelAuthRelation) (*proto.OpmPanelAuthRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelAuthRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.PanelId != 0 { //整数
		do = do.Where(t.PanelId.Eq(req.PanelId))
	}
	if req.ProductTypeId != 0 { //整数
		do = do.Where(t.ProductTypeId.Eq(req.ProductTypeId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmPanelAuthRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

//根据数据库表主键删除OpmPanelAuthRelation
func (s *OpmPanelAuthRelationSvc) DeleteByIdOpmPanelAuthRelation(req *proto.OpmPanelAuthRelation) (*proto.OpmPanelAuthRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelAuthRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmPanelAuthRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

//根据数据库表主键批量删除OpmPanelAuthRelation
func (s *OpmPanelAuthRelationSvc) DeleteByIdsOpmPanelAuthRelation(req *proto.OpmPanelAuthRelationBatchDeleteRequest) (*proto.OpmPanelAuthRelationBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmPanelAuthRelation
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmPanelAuthRelation error : %s", err.Error())
			break
		}
	}
	return req, err
}

//根据主键更新OpmPanelAuthRelation
func (s *OpmPanelAuthRelationSvc) UpdateOpmPanelAuthRelation(req *proto.OpmPanelAuthRelation) (*proto.OpmPanelAuthRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelAuthRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.ProductId != 0 { //整数
		updateField = append(updateField, t.ProductId)
	}
	if req.PanelId != 0 { //整数
		updateField = append(updateField, t.PanelId)
	}
	if req.ProductTypeId != 0 { //整数
		updateField = append(updateField, t.ProductTypeId)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmPanelAuthRelation error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmPanelAuthRelation_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmPanelAuthRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

////根据主键更新所有字段OpmPanelAuthRelation
func (s *OpmPanelAuthRelationSvc) UpdateAllOpmPanelAuthRelation(req *proto.OpmPanelAuthRelation) (*proto.OpmPanelAuthRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelAuthRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.ProductId)
	updateField = append(updateField, t.PanelId)
	updateField = append(updateField, t.ProductTypeId)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmPanelAuthRelation error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmPanelAuthRelation_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmPanelAuthRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmPanelAuthRelationSvc) UpdateFieldsOpmPanelAuthRelation(req *proto.OpmPanelAuthRelationUpdateFieldsRequest) (*proto.OpmPanelAuthRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelAuthRelation
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmPanelAuthRelation error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmPanelAuthRelation error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmPanelAuthRelation_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmPanelAuthRelation error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

//根据非空条件查找OpmPanelAuthRelation
func (s *OpmPanelAuthRelationSvc) FindOpmPanelAuthRelation(req *proto.OpmPanelAuthRelationFilter) (*proto.OpmPanelAuthRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelAuthRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.PanelId != 0 { //整数
		do = do.Where(t.PanelId.Eq(req.PanelId))
	}
	if req.ProductTypeId != 0 { //整数
		do = do.Where(t.ProductTypeId.Eq(req.ProductTypeId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmPanelAuthRelation error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmPanelAuthRelation_db2pb(dbObj)
	return res, err
}

//根据数据库表主键查找OpmPanelAuthRelation
func (s *OpmPanelAuthRelationSvc) FindByIdOpmPanelAuthRelation(req *proto.OpmPanelAuthRelationFilter) (*proto.OpmPanelAuthRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmPanelAuthRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmPanelAuthRelation error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmPanelAuthRelation_db2pb(dbObj)
	return res, err
}

//根据分页条件查找OpmPanelAuthRelation,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmPanelAuthRelationSvc) GetListOpmPanelAuthRelation(req *proto.OpmPanelAuthRelationListRequest) ([]*proto.OpmPanelAuthRelation, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpmPanelAuthRelation
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.ProductId != 0 { //整数
			do = do.Where(t.ProductId.Eq(query.ProductId))
		}
		if query.PanelId != 0 { //整数
			do = do.Where(t.PanelId.Eq(query.PanelId))
		}
		if query.ProductTypeId != 0 { //整数
			do = do.Where(t.ProductTypeId.Eq(query.ProductTypeId))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOpmPanelAuthRelation
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmPanelAuthRelation error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmPanelAuthRelation, len(list))
	for i, v := range list {
		result[i] = convert.OpmPanelAuthRelation_db2pb(v)
	}
	return result, total, nil
}
