// Code generated by sgen.exe,2022-08-31 14:21:29. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"

	"go-micro.dev/v4/metadata"
)

type OpmVoiceProductSvc struct {
	Ctx context.Context
}

// 语控产品发布
func (s *OpmVoiceProductSvc) VoiceProductPublish(req *proto.OpmVoiceProductPublishReq) (*proto.OpmVoiceProductPublishRes, error) {
	//1.获取配置数据
	res, err := s.FindOpmVoiceProduct(&proto.OpmVoiceProductFilter{
		ProductKey: req.ProductKey,
		VoiceNo:    req.VoiceNo,
	})
	if err != nil {
		return nil, err
	}

	//2.插入发布记录  TODO 此处还需要增加更加具体的物模型数据记录(后续需要缓存起来)
	var rec = OpmVoicePublishRecordSvc{}
	funNameList := s.GetVoiceProductFunNames(res.Id)
	rec.CreateOpmVoicePublishRecord(&proto.OpmVoicePublishRecord{
		Id:          iotutil.GetNextSeqInt64(),
		ProductKey:  res.ProductKey,
		ProductName: res.ProductName,
		VoiceNo:     res.VoiceNo,
		VoiceName:   res.VoiceName,
		CreatedAt:   timestamppb.New(time.Now()),
		AttrJson:    iotutil.ToString(funNameList),
	})

	//3.修改配置数据的状态
	s.UpdateFieldsOpmVoiceProduct(&proto.OpmVoiceProductUpdateFieldsRequest{
		Fields: []string{"status"},
		Data: &proto.OpmVoiceProduct{
			Id:     res.Id,
			Status: 3, //已发布
		},
	})
	//TODO 使用最新版本的配置 更新缓存

	var rs = proto.OpmVoiceProductPublishRes{}

	return &rs, nil
}

// 保存产品语控信息
func (s *OpmVoiceProductSvc) SaveVoiceProduct(req *proto.OpmVoiceProductSaveReq) (res *proto.OpmVoiceProductSaveRes, err error) {
	var vpm = OpmVoiceProductMapSvc{}
	vpm.Ctx = s.Ctx
	tenantId, _ := metadata.Get(s.Ctx, "tenantid")
	//判断新增,还是修改.
	IsAdd := false
	if req.ProductVoiceId == "" || req.ProductVoiceId == "0" {
		IsAdd = true
		sel, errSel := s.FindOpmVoiceProduct(&proto.OpmVoiceProductFilter{
			ProductKey: req.ProductKey,
			VoiceNo:    req.VoiceNo,
		})
		if errSel != nil && errSel.Error() != "record not found" {
			return nil, err
		}
		if sel != nil && sel.Id > 0 {
			IsAdd = false
			req.ProductVoiceId = iotutil.ToString(sel.Id)
		}
	}

	//处理语控的特殊映射字段
	var voiceOther = make(map[string]interface{}, 0)
	voiceOther["voiceSkill"] = req.VoiceSkill
	voiceOther["voiceBrand"] = req.VoiceBrand
	voiceOther["voiceModel"] = req.VoiceModel
	voiceOtherStr := iotutil.ToString(voiceOther)

	//新增还是修改
	if IsAdd {
		//req.ProductVoiceId = iotutil.GetNextSeqInt64()
		//产品语控配置ID
		id := iotutil.GetNextSeqInt64()
		req.ProductVoiceId = iotutil.ToString(id)
		_, err := s.CreateOpmVoiceProduct(&proto.OpmVoiceProduct{
			Id:               id,
			ProductKey:       req.ProductKey,
			VoiceNo:          req.VoiceNo,
			VoiceName:        req.VoiceName,
			Status:           2, //1 未配置, 2 配置中, 3 已发布
			VoiceProductType: req.VoiceType,
			VoiceOther:       voiceOtherStr,
			TenantId:         tenantId,
			CreatedAt:        timestamppb.New(time.Now()),
			ProductName:      req.ProductName,
			ProjectName:      req.ProjectName,
			ProjectId:        req.ProjectId,
			Invocation:       req.Invocation,
			SecretName:       req.SecretName,
			SecretUrl:        req.SecretUrl,
		})
		if err != nil {
			return nil, err
		}

		mapError := vpm.BatchCreateOpmVoiceProductMap(id, req.VoiceNo, req.AttrList)

		if mapError != nil {
			//回滚新增的主表
			s.DeleteByIdOpmVoiceProduct(&proto.OpmVoiceProduct{
				Id: id,
			})
			return nil, mapError
		}

	} else {
		id := iotutil.ToInt64(req.ProductVoiceId)
		s.UpdateFieldsOpmVoiceProduct(&proto.OpmVoiceProductUpdateFieldsRequest{
			Fields: []string{
				"voice_product_type",
				"voice_other",
				"status",
				"project_name",
				"project_id",
				"invocation",
				"secret_name",
				"secret_url"},
			Data: &proto.OpmVoiceProduct{
				Id:               id,
				VoiceOther:       voiceOtherStr,
				VoiceProductType: req.VoiceType,
				Status:           2,
				ProjectName:      req.ProjectName,
				ProjectId:        req.ProjectId,
				Invocation:       req.Invocation,
				SecretName:       req.SecretName,
				SecretUrl:        req.SecretUrl,
			},
		})
		errBatch := vpm.BatchCreateOpmVoiceProductMap(id, req.VoiceNo, req.AttrList)
		if errBatch != nil {
			return nil, errBatch
		}
	}
	var rs = proto.OpmVoiceProductSaveRes{}
	rs.Data = req.ProductVoiceId

	return &rs, err
}

// 获取语控功能属性
func (s *OpmVoiceProductSvc) GetOpmVoiceProductDetail(req *proto.OpmVoiceProductDetailReq) (*proto.OpmVoiceProductDetailRes, error) {

	//if req.ProductVoiceId == "" && req.SkillId == "" {
	//	return nil, errors.New("参数异常")
	//}
	filter := &proto.OpmVoiceProductFilter{}
	if req.SkillId != "" {
		//TODO 需要将技能Id字段抽离到外层
		filter.VoiceOther = req.SkillId
	}
	if req.ProductVoiceId != "" {
		filter.Id = iotutil.ToInt64(req.ProductVoiceId)
	}

	res, err := s.FindOpmVoiceProduct(filter)
	if err != nil {
		return nil, err
	}

	var dd = proto.OpmVoiceProductDetailRes{}
	dd.ProductVoiceId = iotutil.ToString(res.Id)
	dd.ProductKey = res.ProductKey
	dd.ProductName = res.ProductName
	dd.VoiceNo = res.VoiceNo
	dd.VoiceName = res.VoiceName
	dd.Status = res.Status
	dd.VoiceType = res.VoiceProductType
	//处理语控的特殊映射字段
	ovMap := iotutil.JsonToMap(res.VoiceOther)
	dd.VoiceSkill = iotutil.ToString(ovMap["voiceSkill"])
	dd.VoiceBrand = iotutil.ToString(ovMap["voiceBrand"])
	dd.VoiceModel = iotutil.ToString(ovMap["voiceModel"])
	dd.ProjectName = res.ProjectName
	dd.ProjectId = res.ProjectId
	dd.Invocation = res.Invocation
	dd.SecretName = res.SecretName
	dd.SecretUrl = res.SecretUrl
	var ovpm = OpmVoiceProductMapSvc{}
	ovpm.Ctx = s.Ctx
	//查询产品语控的功能属性
	resList, _, _ := ovpm.GetListOpmVoiceProductMap(&proto.OpmVoiceProductMapListRequest{
		Page:     1,
		PageSize: 100000000,
		Query: &proto.OpmVoiceProductMap{
			VoiceProductId: res.Id,
		},
	})
	for _, m := range resList {
		dd.AttrList = append(dd.AttrList, &proto.OpmVoiceProductAttrItem{
			VoiceAttrId:   iotutil.ToString(m.Id),
			FunName:       m.FunName,
			VoiceDemo:     m.VoiceDemo,
			ValueType:     m.ValueType,
			AttrCode:      m.AttrCode,
			VoiceCode:     m.VoiceCode,
			ValueMap:      m.ValueMap,
			AttrUnit:      m.AttrUnit,
			VoiceAttrUnit: m.VoiceAttrUnit,
			AttrDpid:      m.AttrDpid,
			DataType:      m.DataType,
			VDataType:     m.VDataType,
			VoiceSynonym:  m.VoiceSynonym,
			Trait:         m.Trait,
			Command:       m.Command,
		})
	}
	return &dd, nil
}

// 获取语控功能属性
func (s *OpmVoiceProductSvc) GetOpmVoiceProductDetailList(req *proto.OpmVoiceProductDetailReq) ([]*proto.OpmVoiceProductDetailRes, error) {
	//if req.ProductVoiceId == "" && req.SkillId == "" {
	//    return nil, errors.New("参数异常")
	//}
	filter := &proto.OpmVoiceProduct{}
	if req.SkillId != "" {
		//TODO 需要将技能Id字段抽离到外层
		filter.VoiceOther = req.SkillId
	}
	if req.ProductVoiceId != "" {
		filter.Id = iotutil.ToInt64(req.ProductVoiceId)
	}

	list, _, err := s.GetListOpmVoiceProduct(&proto.OpmVoiceProductListRequest{
		Query:    filter,
		Page:     0,
		PageSize: 0,
	})
	if err != nil {
		return nil, err
	}
	var ovpm = OpmVoiceProductMapSvc{}
	ovpm.Ctx = s.Ctx
	resList, _, _ := ovpm.GetListOpmVoiceProductMap(&proto.OpmVoiceProductMapListRequest{
		Query: &proto.OpmVoiceProductMap{
			VoiceOther: req.SkillId,
		},
	})
	voiceProMap := make(map[int64][]*proto.OpmVoiceProductMap)
	for _, r := range resList {
		voiceProMap[r.VoiceProductId] = append(voiceProMap[r.VoiceProductId], r)
	}
	resq := make([]*proto.OpmVoiceProductDetailRes, 0)
	for _, res := range list {
		var dd = proto.OpmVoiceProductDetailRes{}
		dd.ProductVoiceId = iotutil.ToString(res.Id)
		dd.ProductKey = res.ProductKey
		dd.ProductName = res.ProductName
		dd.VoiceNo = res.VoiceNo
		dd.VoiceName = res.VoiceName
		dd.Status = res.Status
		dd.VoiceType = res.VoiceProductType
		//处理语控的特殊映射字段
		ovMap := iotutil.JsonToMap(res.VoiceOther)
		dd.VoiceSkill = iotutil.ToString(ovMap["voiceSkill"])
		dd.VoiceBrand = iotutil.ToString(ovMap["voiceBrand"])
		dd.VoiceModel = iotutil.ToString(ovMap["voiceModel"])
		dd.ProjectName = res.ProjectName
		dd.ProjectId = res.ProjectId
		dd.Invocation = res.Invocation
		dd.SecretName = res.SecretName
		dd.SecretUrl = res.SecretUrl
		//查询产品语控的功能属性
		if resList, ok := voiceProMap[res.Id]; ok {
			for _, m := range resList {
				dd.AttrList = append(dd.AttrList, &proto.OpmVoiceProductAttrItem{
					VoiceAttrId:   iotutil.ToString(m.Id),
					FunName:       m.FunName,
					VoiceDemo:     m.VoiceDemo,
					ValueType:     m.ValueType,
					AttrCode:      m.AttrCode,
					VoiceCode:     m.VoiceCode,
					ValueMap:      m.ValueMap,
					AttrUnit:      m.AttrUnit,
					VoiceAttrUnit: m.VoiceAttrUnit,
					AttrDpid:      m.AttrDpid,
					DataType:      m.DataType,
					VDataType:     m.VDataType,
					VoiceSynonym:  m.VoiceSynonym,
					Trait:         m.Trait,
					Command:       m.Command,
				})
			}
		}
		resq = append(resq, &dd)
	}
	return resq, nil
}

// 获取产品语控列表
func (s *OpmVoiceProductSvc) GetOpmVoiceProductList(req *proto.OpmVoiceProductListReq) ([]*proto.OpmVoiceProductItem, error) {

	sql := "SELECT `t_opm_voice_product`.`id`,`t_opm_voice`.`voice_no`,`t_opm_voice`.`voice_name`,`t_opm_voice_product`.`status`,`t_opm_voice`.`voice_logo`  FROM `t_opm_voice` LEFT JOIN `t_opm_voice_product` ON `t_opm_voice`.`voice_no` = `t_opm_voice_product`.`voice_no` AND  `t_opm_voice_product`.`product_key` = ? WHERE `t_opm_voice`.`voice_enable` = 1"

	var res = make([]*proto.OpmVoiceProductItem, 0)

	iotmodel.GetDB().Raw(sql, req.ProductKey).Scan(&res)

	var ovpm = OpmVoiceProductMapSvc{}
	ovpm.Ctx = s.Ctx

	for i := 0; i < len(res); i++ {
		if res[i].Id != "" {
			//存放已经配置好的属性名称
			res[i].FunList = s.GetVoiceProductFunNames(iotutil.ToInt64(res[i].Id))
		} else {
			res[i].Id = ""
			res[i].Status = 1
			res[i].FunList = make([]string, 0)
		}

	}

	return res, nil

}

func (s *OpmVoiceProductSvc) GetVoiceProductFunNames(voiceProductId int64) []string {

	var ovpm = OpmVoiceProductMapSvc{}
	ovpm.Ctx = s.Ctx

	funlist := make([]string, 0)
	resList, _, _ := ovpm.GetListOpmVoiceProductMap(&proto.OpmVoiceProductMapListRequest{
		Page:     1,
		PageSize: 100000000,
		Query: &proto.OpmVoiceProductMap{
			VoiceProductId: iotutil.ToInt64(voiceProductId),
		},
	})
	for _, m := range resList {
		funlist = append(funlist, m.FunName)
	}
	return funlist
}

// 创建OpmVoiceProduct
func (s *OpmVoiceProductSvc) CreateOpmVoiceProduct(req *proto.OpmVoiceProduct) (*proto.OpmVoiceProduct, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProduct
	do := t.WithContext(context.Background())
	dbObj := convert.OpmVoiceProduct_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmVoiceProduct error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OpmVoiceProduct
func (s *OpmVoiceProductSvc) DeleteOpmVoiceProduct(req *proto.OpmVoiceProduct) (*proto.OpmVoiceProduct, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProduct
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.VoiceNo != "" { //整数
		do = do.Where(t.VoiceNo.Eq(req.VoiceNo))
	}
	if req.VoiceName != "" { //字符串
		do = do.Where(t.VoiceName.Eq(req.VoiceName))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.VoiceProductType != "" { //字符串
		do = do.Where(t.VoiceProductType.Eq(req.VoiceProductType))
	}
	if req.VoiceOther != "" { //字符串
		do = do.Where(t.VoiceOther.Eq(req.VoiceOther))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmVoiceProduct error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpmVoiceProduct
func (s *OpmVoiceProductSvc) DeleteByIdOpmVoiceProduct(req *proto.OpmVoiceProduct) (*proto.OpmVoiceProduct, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProduct
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmVoiceProduct error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpmVoiceProduct
func (s *OpmVoiceProductSvc) DeleteByIdsOpmVoiceProduct(req *proto.OpmVoiceProductBatchDeleteRequest) (*proto.OpmVoiceProductBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmVoiceProduct
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmVoiceProduct error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpmVoiceProduct
func (s *OpmVoiceProductSvc) UpdateOpmVoiceProduct(req *proto.OpmVoiceProduct) (*proto.OpmVoiceProduct, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProduct
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.ProductKey != "" { //字符串
		updateField = append(updateField, t.ProductKey)
	}
	if req.VoiceNo != "" { //整数
		updateField = append(updateField, t.VoiceNo)
	}
	if req.VoiceName != "" { //字符串
		updateField = append(updateField, t.VoiceName)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.VoiceProductType != "" { //字符串
		updateField = append(updateField, t.VoiceProductType)
	}
	if req.VoiceOther != "" { //字符串
		updateField = append(updateField, t.VoiceOther)
	}
	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.TenantId)
	}
	if req.ProjectName != "" { //字符串
		updateField = append(updateField, t.ProjectName)
	}
	if req.ProjectId != "" { //字符串
		updateField = append(updateField, t.ProjectId)
	}
	if req.Invocation != "" { //字符串
		updateField = append(updateField, t.Invocation)
	}
	if req.SecretName != "" { //字符串
		updateField = append(updateField, t.SecretName)
	}
	if req.SecretUrl != "" { //字符串
		updateField = append(updateField, t.SecretUrl)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmVoiceProduct error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmVoiceProduct_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmVoiceProduct error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpmVoiceProduct
func (s *OpmVoiceProductSvc) UpdateAllOpmVoiceProduct(req *proto.OpmVoiceProduct) (*proto.OpmVoiceProduct, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProduct
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.ProductKey)
	updateField = append(updateField, t.VoiceNo)
	updateField = append(updateField, t.VoiceName)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.VoiceProductType)
	updateField = append(updateField, t.VoiceOther)
	updateField = append(updateField, t.TenantId)
	updateField = append(updateField, t.ProjectName)
	updateField = append(updateField, t.ProjectId)
	updateField = append(updateField, t.Invocation)
	updateField = append(updateField, t.SecretName)
	updateField = append(updateField, t.SecretUrl)

	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmVoiceProduct error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmVoiceProduct_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmVoiceProduct error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmVoiceProductSvc) UpdateFieldsOpmVoiceProduct(req *proto.OpmVoiceProductUpdateFieldsRequest) (*proto.OpmVoiceProduct, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProduct
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmVoiceProduct error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmVoiceProduct error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmVoiceProduct_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmVoiceProduct error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmVoiceProduct
func (s *OpmVoiceProductSvc) FindOpmVoiceProduct(req *proto.OpmVoiceProductFilter) (*proto.OpmVoiceProduct, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProduct
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.VoiceNo != "" { //整数
		do = do.Where(t.VoiceNo.Eq(req.VoiceNo))
	}
	if req.VoiceName != "" { //字符串
		do = do.Where(t.VoiceName.Eq(req.VoiceName))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.VoiceProductType != "" { //字符串
		do = do.Where(t.VoiceProductType.Eq(req.VoiceProductType))
	}
	if req.VoiceOther != "" { //字符串
		do = do.Where(t.VoiceOther.Like("%\"voiceSkill\":\"" + req.VoiceOther + "\"%"))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmVoiceProduct error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmVoiceProduct_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpmVoiceProduct
func (s *OpmVoiceProductSvc) FindByIdOpmVoiceProduct(req *proto.OpmVoiceProductFilter) (*proto.OpmVoiceProduct, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProduct
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmVoiceProduct error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmVoiceProduct_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OpmVoiceProduct,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmVoiceProductSvc) GetListOpmVoiceProduct(req *proto.OpmVoiceProductListRequest) ([]*proto.OpmVoiceProduct, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpmVoiceProduct
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.ProductKey != "" { //字符串
			do = do.Where(t.ProductKey.Eq(query.ProductKey))
		}
		if query.VoiceNo != "" { //整数
			do = do.Where(t.VoiceNo.Eq(query.VoiceNo))
		}
		if query.VoiceName != "" { //字符串
			do = do.Where(t.VoiceName.Like("%" + query.VoiceName + "%"))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.VoiceProductType != "" { //字符串
			do = do.Where(t.VoiceProductType.Like("%" + query.VoiceProductType + "%"))
		}
		if query.VoiceOther != "" { //字符串
			do = do.Where(t.VoiceOther.Like("%" + query.VoiceOther + "%"))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Like("%" + query.TenantId + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOpmVoiceProduct
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmVoiceProduct error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmVoiceProduct, len(list))
	for i, v := range list {
		result[i] = convert.OpmVoiceProduct_db2pb(v)
	}
	return result, total, nil
}

func (s *OpmVoiceProductSvc) GetVoiceProductFunc(req *proto.OpmVoiceProductListReq) (map[string]string, error) {
	voiceProduct := map[string]string{}
	var ovpm = OpmVoiceProductMapSvc{}
	ovpm.Ctx = s.Ctx

	resList, _, _ := ovpm.GetListOpmVoiceProductMap(&proto.OpmVoiceProductMapListRequest{
		Query: &proto.OpmVoiceProductMap{
			ProductId: req.ProductId,
		},
	})
	for _, m := range resList {
		if _, ok := voiceProduct[m.AttrCode]; !ok {
			voiceProduct[m.AttrCode] = m.FunName
		}
	}
	return voiceProduct, nil
}
