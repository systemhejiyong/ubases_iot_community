// Code generated by sgen.exe,2022-06-07 09:10:32. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmProductTestReportSvc struct {
	Ctx context.Context
}

// 创建OpmProductTestReport
func (s *OpmProductTestReportSvc) CreateOpmProductTestReport(req *proto.OpmProductTestReport) (*proto.OpmProductTestReport, error) {
	if req.ProductId == 0 {
		return nil, errors.New("产品编号不能为空")
	}
	var err error
	userId, err := GetUserIdInt64(s.Ctx)
	if err != nil {
		return nil, err
	}
	t := orm.Use(iotmodel.GetDB()).TOpmProductTestReport
	do := t.WithContext(context.Background())
	dbObj := convert.OpmProductTestReport_pb2db(req)
	//先检查测试用例是否已经上传
	oldTestReport, err := do.Where(t.ProductId.Eq(req.ProductId)).Find()
	if err != nil {
		logger.Errorf("CreateOpmProductTestReport error : %s", err.Error())
		return nil, err
	}
	var testReportId int64 = 0
	if len(oldTestReport) > 0 {
		testReportId = oldTestReport[0].Id
	} else {
		testReportId = iotutil.GetNextSeqInt64()
	}
	dbObj.Id = testReportId
	dbObj.CreatedBy = userId
	err = do.Save(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmProductTestReport error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OpmProductTestReport
func (s *OpmProductTestReportSvc) DeleteOpmProductTestReport(req *proto.OpmProductTestReport) (*proto.OpmProductTestReport, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductTestReport
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.TestType != 0 { //整数
		do = do.Where(t.TestType.Eq(req.TestType))
	}
	if req.IsValid != 0 { //字符串
		do = do.Where(t.IsValid.Eq(req.IsValid))
	}
	if req.FilePath != "" { //字符串
		do = do.Where(t.FilePath.Eq(req.FilePath))
	}
	if req.FileName != "" { //字符串
		do = do.Where(t.FileName.Eq(req.FileName))
	}
	if req.FileSize != 0 { //整数
		do = do.Where(t.FileSize.Eq(req.FileSize))
	}
	if req.FileKey != "" { //字符串
		do = do.Where(t.FileKey.Eq(req.FileKey))
	}
	if req.TestOrigin != 0 { //整数
		do = do.Where(t.TestOrigin.Eq(req.TestOrigin))
	}
	if req.TestResult != 0 { //整数
		do = do.Where(t.TestResult.Eq(req.TestResult))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmProductTestReport error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpmProductTestReport
func (s *OpmProductTestReportSvc) DeleteByIdOpmProductTestReport(req *proto.OpmProductTestReport) (*proto.OpmProductTestReport, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductTestReport
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmProductTestReport error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpmProductTestReport
func (s *OpmProductTestReportSvc) DeleteByIdsOpmProductTestReport(req *proto.OpmProductTestReportBatchDeleteRequest) (*proto.OpmProductTestReportBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmProductTestReport
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmProductTestReport error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpmProductTestReport
func (s *OpmProductTestReportSvc) UpdateOpmProductTestReport(req *proto.OpmProductTestReport) (*proto.OpmProductTestReport, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductTestReport
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.ProductId != 0 { //整数
		updateField = append(updateField, t.ProductId)
	}
	if req.TestType != 0 { //整数
		updateField = append(updateField, t.TestType)
	}
	if req.IsValid != 0 { //字符串
		updateField = append(updateField, t.IsValid)
	}
	if req.FilePath != "" { //字符串
		updateField = append(updateField, t.FilePath)
	}
	if req.FileName != "" { //字符串
		updateField = append(updateField, t.FileName)
	}
	if req.FileSize != 0 { //整数
		updateField = append(updateField, t.FileSize)
	}
	if req.FileKey != "" { //字符串
		updateField = append(updateField, t.FileKey)
	}
	if req.TestOrigin != 0 { //整数
		updateField = append(updateField, t.TestOrigin)
	}
	if req.TestResult != 0 { //整数
		updateField = append(updateField, t.TestResult)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmProductTestReport error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmProductTestReport_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmProductTestReport error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpmProductTestReport
func (s *OpmProductTestReportSvc) UpdateAllOpmProductTestReport(req *proto.OpmProductTestReport) (*proto.OpmProductTestReport, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductTestReport
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.ProductId)
	updateField = append(updateField, t.TestType)
	updateField = append(updateField, t.IsValid)
	updateField = append(updateField, t.FilePath)
	updateField = append(updateField, t.FileName)
	updateField = append(updateField, t.FileSize)
	updateField = append(updateField, t.FileKey)
	updateField = append(updateField, t.TestOrigin)
	updateField = append(updateField, t.TestResult)
	updateField = append(updateField, t.CreatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmProductTestReport error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmProductTestReport_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmProductTestReport error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmProductTestReportSvc) UpdateFieldsOpmProductTestReport(req *proto.OpmProductTestReportUpdateFieldsRequest) (*proto.OpmProductTestReport, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductTestReport
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmProductTestReport error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmProductTestReport error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmProductTestReport_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmProductTestReport error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmProductTestReport
func (s *OpmProductTestReportSvc) FindOpmProductTestReport(req *proto.OpmProductTestReportFilter) (*proto.OpmProductTestReport, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductTestReport
	do := t.WithContext(context.Background())

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.TestType != 0 { //整数
		do = do.Where(t.TestType.Eq(req.TestType))
	}
	if req.IsValid != 0 { //字符串
		do = do.Where(t.IsValid.Eq(req.IsValid))
	}
	if req.FilePath != "" { //字符串
		do = do.Where(t.FilePath.Eq(req.FilePath))
	}
	if req.FileName != "" { //字符串
		do = do.Where(t.FileName.Eq(req.FileName))
	}
	if req.FileSize != 0 { //整数
		do = do.Where(t.FileSize.Eq(req.FileSize))
	}
	if req.FileKey != "" { //字符串
		do = do.Where(t.FileKey.Eq(req.FileKey))
	}
	if req.TestOrigin != 0 { //整数
		do = do.Where(t.TestOrigin.Eq(req.TestOrigin))
	}
	if req.TestResult != 0 { //整数
		do = do.Where(t.TestResult.Eq(req.TestResult))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmProductTestReport error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmProductTestReport_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpmProductTestReport
func (s *OpmProductTestReportSvc) FindByIdOpmProductTestReport(req *proto.OpmProductTestReportFilter) (*proto.OpmProductTestReport, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductTestReport
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmProductTestReport error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmProductTestReport_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OpmProductTestReport,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmProductTestReportSvc) GetListOpmProductTestReport(req *proto.OpmProductTestReportListRequest) ([]*proto.OpmProductTestReport, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpmProductTestReport
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.ProductId != 0 { //整数
			do = do.Where(t.ProductId.Eq(query.ProductId))
		}
		if query.TestType != 0 { //整数
			do = do.Where(t.TestType.Eq(query.TestType))
		}
		if query.IsValid != 0 { //字符串
			do = do.Where(t.IsValid.Eq(query.IsValid))
		}
		if query.FilePath != "" { //字符串
			do = do.Where(t.FilePath.Like("%" + query.FilePath + "%"))
		}
		if query.FileName != "" { //字符串
			do = do.Where(t.FileName.Like("%" + query.FileName + "%"))
		}
		if query.FileSize != 0 { //整数
			do = do.Where(t.FileSize.Eq(query.FileSize))
		}
		if query.FileKey != "" { //字符串
			do = do.Where(t.FileKey.Like("%" + query.FileKey + "%"))
		}
		if query.TestOrigin != 0 { //整数
			do = do.Where(t.TestOrigin.Eq(query.TestOrigin))
		}
		if query.TestResult != 0 { //整数
			do = do.Where(t.TestResult.Eq(query.TestResult))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOpmProductTestReport
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmProductTestReport error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmProductTestReport, len(list))
	for i, v := range list {
		result[i] = convert.OpmProductTestReport_db2pb(v)
	}
	return result, total, nil
}
