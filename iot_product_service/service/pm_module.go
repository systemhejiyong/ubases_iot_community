// Code generated by sgen.exe,2022-04-20 13:52:30. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type PmModuleSvc struct {
	Ctx context.Context
}

// 创建PmModule
func (s *PmModuleSvc) CreatePmModule(req *proto.PmModule) (*proto.PmModule, error) {
	createBy, _ := GetUserIdInt64(s.Ctx)
	// fixme 请在这里校验参数
	q := orm.Use(iotmodel.GetDB())

	//检查组件名称是否重复
	t := q.TPmModule
	nameCount, err := q.TPmModule.WithContext(context.Background()).Where(t.ModuleName.Eq(req.ModuleName)).Count()
	if nameCount > 0 {
		return nil, errors.New("模组名已存在")
	}
	err = q.Transaction(func(tx *orm.Query) error {
		do := tx.TPmModule.WithContext(context.Background())
		dbObj := convert.PmModule_pb2db(req)
		err = do.Create(dbObj)
		if err != nil {
			return err
		}
		if len(req.VersionList) > 0 {
			var versionList []*model.TPmModuleFirmwareVersion
			for _, v := range req.VersionList {
				versionId, err := iotutil.ToInt64AndErr(v.VersionId)
				if err != nil {
					return err
				}
				//报错默认版本列表
				versionList = append(versionList, &model.TPmModuleFirmwareVersion{
					Id:        iotutil.GetNextSeqInt64(),
					ModuleId:  dbObj.Id,
					Version:   v.Version,
					VersionId: versionId,
					CreatedBy: createBy,
				})
			}
			err := tx.TPmModuleFirmwareVersion.WithContext(context.Background()).Save(versionList...)
			if err != nil {
				return err
			}
		}
		return nil
	})
	if err != nil {
		logger.Errorf("CreatePmModule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除PmModule
func (s *PmModuleSvc) DeletePmModule(req *proto.PmModule) (*proto.PmModule, error) {
	q := orm.Use(iotmodel.GetDB())
	err := q.Transaction(func(tx *orm.Query) error {
		t := tx.TPmModule
		do := t.WithContext(context.Background())
		if req.Id != 0 { //整数
			do = do.Where(t.Id.Eq(req.Id))
		}
		if req.FirmwareId != 0 { //整数
			do = do.Where(t.FirmwareId.Eq(req.FirmwareId))
		}
		_, err := do.Delete()
		if err != nil {
			logger.Errorf("DeletePmModule error : %s", err.Error())
			return err
		}
		fv := tx.TPmModuleFirmwareVersion
		_, err = fv.WithContext(context.Background()).
			Where(fv.ModuleId.Eq(req.Id)).Delete()
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("DeletePmModule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除PmModule
func (s *PmModuleSvc) DeleteByIdPmModule(req *proto.PmModule) (*proto.PmModule, error) {
	q := orm.Use(iotmodel.GetDB())
	err := q.Transaction(func(tx *orm.Query) error {
		t := tx.TPmModule
		do := t.WithContext(context.Background())
		if req.Id != 0 { //整数
			do = do.Where(t.Id.Eq(req.Id))
		}
		_, err := do.Delete()
		if err != nil {
			logger.Errorf("DeletePmModule error : %s", err.Error())
			return err
		}
		fv := tx.TPmModuleFirmwareVersion
		_, err = fv.WithContext(context.Background()).
			Where(fv.ModuleId.Eq(req.Id)).Delete()
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("DeleteByIdPmModule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除PmModule
func (s *PmModuleSvc) DeleteByIdsPmModule(req *proto.PmModuleBatchDeleteRequest) (*proto.PmModuleBatchDeleteRequest, error) {
	if len(req.Keys) == 0 {
		return nil, errors.New("删除主键不能为空")
	}
	var (
		err error
		ids []int64
	)
	for _, k := range req.Keys {
		ids = append(ids, k.Id)
	}
	q := orm.Use(iotmodel.GetDB())
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TPmModule
		do := t.WithContext(context.Background())
		_, err := do.Where(t.Id.In(ids...)).Delete()
		if err != nil {
			logger.Errorf("DeletePmModule error : %s", err.Error())
			return err
		}
		fv := tx.TPmModuleFirmwareVersion
		_, err = fv.WithContext(context.Background()).
			Where(fv.ModuleId.In(ids...)).Delete()
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("DeleteByIdPmModule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据主键更新PmModule
func (s *PmModuleSvc) UpdatePmModule(req *proto.PmModule) (*proto.PmModule, error) {
	updateBy, _ := GetUserIdInt64(s.Ctx)
	if req.Id == 0 { //整数
		return nil, errors.New("Missing condition")
	}
	q := orm.Use(iotmodel.GetDB())
	// 检查数据是否为启用，启用数据无法进行编辑
	if req.Id == 0 {
		return nil, errors.New("主键Id不能为空")
	}
	var err error
	//oriObj, err := q.TPmModule.WithContext(context.Background()).Where(q.TPmModule.Id.Eq(req.Id)).First()
	//if err != nil {
	//	return nil, err
	//}
	//if oriObj.Status == 1 {
	//	return nil, errors.New("已启用模组芯片无法编辑")
	//}
	//执行报错
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TPmModule
		do := t.WithContext(context.Background())

		//要更新的字段,不包括主键
		var updateField []field.Expr

		if req.ModuleName != "" { //字符串
			nameCount, _ := do.Where(t.ModuleName.Eq(req.ModuleName), t.Id.Neq(req.Id)).Count()
			if nameCount > 0 {
				return errors.New("模组名已存在")
			}
			updateField = append(updateField, t.ModuleName)
		}
		if req.ModuleNameEn != "" { //字符串
			nameCount, _ := do.Where(t.ModuleNameEn.Eq(req.ModuleNameEn), t.Id.Neq(req.Id)).Count()
			if nameCount > 0 {
				return errors.New("模组英文名已存在")
			}
			updateField = append(updateField, t.ModuleNameEn)
		}
		if req.FirmwareType != "" { //字符串
			updateField = append(updateField, t.FirmwareType)
		}
		if req.FirmwareFlag != "" { //字符串
			updateField = append(updateField, t.FirmwareFlag)
		}
		if req.FirmwareId != 0 { //整数
			updateField = append(updateField, t.FirmwareId)
		}
		if req.ImgUrl != "" { //字符串
			updateField = append(updateField, t.ImgUrl)
		}
		if req.FileUrl != "" { //字符串
			updateField = append(updateField, t.FileUrl)
		}
		if req.FileName != "" { //字符串
			updateField = append(updateField, t.FileName)
		}
		if req.Remark != "" { //字符串
			updateField = append(updateField, t.Remark)
		}
		if req.DefaultVersion != "" { //默认固件版本
			updateField = append(updateField, t.DefaultVersion)
		}
		updateField = append(updateField, t.UpdatedBy)
		if len(updateField) > 0 {
			do = do.Select(updateField...)
		}
		dbObj := convert.PmModule_pb2db(req)
		dbObj.UpdatedBy = updateBy
		_, err = do.Where(t.Id.Eq(req.Id)).Updates(dbObj)
		if err != nil {
			return err
		}
		//先删除固件授权版本
		tx.TPmModuleFirmwareVersion.WithContext(context.Background()).Where(tx.TPmModuleFirmwareVersion.ModuleId.Eq(req.Id)).Delete()
		if len(req.VersionList) > 0 {
			var versionList []*model.TPmModuleFirmwareVersion
			for _, v := range req.VersionList {
				//报错默认版本列表
				versionId, err := iotutil.ToInt64AndErr(v.VersionId)
				if err != nil {
					return err
				}
				versionList = append(versionList, &model.TPmModuleFirmwareVersion{
					Id:        iotutil.GetNextSeqInt64(),
					ModuleId:  dbObj.Id,
					Version:   v.Version,
					VersionId: versionId,
					CreatedBy: updateBy,
				})
			}
			err := tx.TPmModuleFirmwareVersion.WithContext(context.Background()).Save(versionList...)
			if err != nil {
				return err
			}
		}
		return nil
	})
	if err != nil {
		logger.Errorf("CreatePmModule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段PmModule
func (s *PmModuleSvc) UpdateAllPmModule(req *proto.PmModule) (*proto.PmModule, error) {
	updateBy, _ := GetUserIdInt64(s.Ctx)
	if req.Id == 0 { //整数
		return nil, errors.New("Missing condition")
	}
	q := orm.Use(iotmodel.GetDB())
	// 检查数据是否为启用，启用数据无法进行编辑
	if req.Id == 0 {
		return nil, errors.New("主键Id不能为空")
	}
	var err error
	//oriObj, err := q.TPmModule.WithContext(context.Background()).Where(q.TPmModule.Id.Eq(req.Id)).First()
	//if err != nil {
	//	return nil, err
	//}
	//if oriObj.Status == 1 {
	//	return nil, errors.New("已启用模组芯片无法编辑")
	//}
	//执行报错
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TPmModule
		do := t.WithContext(context.Background())

		//要更新的字段,不包括主键
		var updateField []field.Expr
		if req.ModuleName == "" {
			return errors.New("模组名不能为空")
		}
		nameCount, _ := do.Where(t.ModuleName.Eq(req.ModuleName), t.Id.Neq(req.Id)).Count()
		if nameCount > 0 {
			return errors.New("模组名已存在")
		}
		updateField = append(updateField, t.ModuleName)
		updateField = append(updateField, t.ModuleNameEn)
		updateField = append(updateField, t.FirmwareType)
		updateField = append(updateField, t.FirmwareFlag)
		updateField = append(updateField, t.FirmwareId)
		updateField = append(updateField, t.ImgUrl)
		updateField = append(updateField, t.FileUrl)
		updateField = append(updateField, t.FileName)
		updateField = append(updateField, t.Remark)
		updateField = append(updateField, t.DefaultVersion)
		updateField = append(updateField, t.UpdatedBy)
		if len(updateField) > 0 {
			do = do.Select(updateField...)
		}
		dbObj := convert.PmModule_pb2db(req)
		dbObj.UpdatedBy = updateBy
		_, err = do.Where(t.Id.Eq(req.Id)).Updates(dbObj)
		if err != nil {
			return err
		}
		//先删除固件授权版本
		tx.TPmModuleFirmwareVersion.WithContext(context.Background()).Where(tx.TPmModuleFirmwareVersion.ModuleId.Eq(req.Id)).Delete()
		if len(req.VersionList) > 0 {
			var versionList []*model.TPmModuleFirmwareVersion
			for _, v := range req.VersionList {
				//报错默认版本列表
				versionId, err := iotutil.ToInt64AndErr(v.VersionId)
				if err != nil {
					return err
				}
				versionList = append(versionList, &model.TPmModuleFirmwareVersion{
					Id:        iotutil.GetNextSeqInt64(),
					ModuleId:  dbObj.Id,
					Version:   v.Version,
					VersionId: versionId,
					CreatedBy: updateBy,
				})
			}
			err := tx.TPmModuleFirmwareVersion.WithContext(context.Background()).Save(versionList...)
			if err != nil {
				return err
			}
		}
		return nil
	})
	if err != nil {
		logger.Errorf("CreatePmModule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *PmModuleSvc) UpdateFieldsPmModule(req *proto.PmModuleUpdateFieldsRequest) (*proto.PmModule, error) {
	t := orm.Use(iotmodel.GetDB()).TPmModule
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsPmModule error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsPmModule error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.PmModule_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsPmModule error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找PmModule
func (s *PmModuleSvc) FindPmModule(req *proto.PmModuleFilter) (*proto.PmModule, error) {
	t := orm.Use(iotmodel.GetDB()).TPmModule
	do := t.WithContext(context.Background())
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ModuleName != "" { //字符串
		do = do.Where(t.ModuleName.Like("%" + req.ModuleName + "%"))
	}
	if req.ModuleNameEn != "" { //字符串
		do = do.Where(t.ModuleNameEn.Like("%" + req.ModuleNameEn + "%"))
	}
	if req.FirmwareType != "" { //字符串
		do = do.Where(t.FirmwareType.Eq(req.FirmwareType))
	}
	if req.FirmwareFlag != "" { //字符串
		do = do.Where(t.FirmwareFlag.Like("%" + req.FirmwareFlag + "%"))
	}
	if req.FirmwareId != 0 { //整数
		do = do.Where(t.FirmwareId.Eq(req.FirmwareId))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Like("%" + req.Remark + "%"))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindPmModule error : %s", err.Error())
		return nil, err
	}
	res := convert.PmModule_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找PmModule
func (s *PmModuleSvc) FindByIdPmModule(req *proto.PmModuleFilter) (*proto.PmModule, error) {
	q := orm.Use(iotmodel.GetDB())
	t := q.TPmModule
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdPmModule error : %s", err.Error())
		return nil, err
	}
	res := convert.PmModule_db2pb(dbObj)

	//查询模组授权固件版本号
	list, err := q.TPmModuleFirmwareVersion.WithContext(context.Background()).Where(q.TPmModuleFirmwareVersion.ModuleId.Eq(req.Id)).Find()
	if err != nil {
		logger.Errorf("FindByIdPmModule error : %s", err.Error())
		return nil, err
	}
	for _, v := range list {
		res.VersionList = append(res.VersionList, &proto.ModuleAuthFirmwareVersion{
			Version:   v.Version,
			VersionId: iotutil.ToString(v.VersionId),
		})
	}
	return res, err
}

// 根据分页条件查找PmModule,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *PmModuleSvc) GetListPmModule(req *proto.PmModuleListRequest) ([]*proto.PmModule, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TPmModule
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Status != 0 { //状态 =1 启用 =2 禁用
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.ModuleName != "" { //字符串
			do = do.Where(t.ModuleName.Like("%" + query.ModuleName + "%"))
		}
		if query.ModuleNameEn != "" { //字符串
			do = do.Where(t.ModuleNameEn.Like("%" + query.ModuleNameEn + "%"))
		}
		if query.FirmwareType != "" { //字符串
			do = do.Where(t.FirmwareType.Eq(query.FirmwareType))
		}
		if query.FirmwareFlag != "" { //字符串
			do = do.Where(t.FirmwareFlag.Eq(query.FirmwareFlag))
		}
		if query.FirmwareId != 0 { //整数
			do = do.Where(t.FirmwareId.Eq(query.FirmwareId))
		}
		if query.ImgUrl != "" { //字符串
			do = do.Where(t.ImgUrl.Like("%" + query.ImgUrl + "%"))
		}
		if query.FileUrl != "" { //字符串
			do = do.Where(t.FileUrl.Like("%" + query.FileUrl + "%"))
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.CreatedAt
	}
	if req.OrderDesc != "asc" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TPmModule
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListPmModule error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	var ids []int64
	var moduleIds []int64
	result := make([]*proto.PmModule, len(list))
	for i, v := range list {
		result[i] = convert.PmModule_db2pb(v)
		ids = append(ids, v.FirmwareId)
		moduleIds = append(moduleIds, v.Id)
	}

	//读取固件标识
	//SELECT id,flag FROM t_pm_firmware WHERE id IN (8961886669393461248,8763603901590110208)
	var flaglist []model.TPmFirmware
	tf := orm.Use(iotmodel.GetDB()).TPmFirmware
	err = tf.WithContext(context.Background()).Where(tf.Id.In(ids...)).Scan(&flaglist)
	firmwareMapData := make(map[int64]model.TPmFirmware)
	if err == nil {
		for _, v := range flaglist {
			firmwareMapData[v.Id] = v
		}
	}
	//查询版本信息
	tmfv := orm.Use(iotmodel.GetDB()).TPmModuleFirmwareVersion
	mfvList, err := tmfv.WithContext(context.Background()).Where(tmfv.ModuleId.In(moduleIds...)).Find()
	mfvMapData := make(map[int64][]*proto.ModuleAuthFirmwareVersion)
	if err == nil {
		for _, v := range mfvList {
			mfvMapData[v.ModuleId] = append(mfvMapData[v.ModuleId], &proto.ModuleAuthFirmwareVersion{Version: v.Version, VersionId: iotutil.ToString(v.VersionId)})
		}
	}
	for _, vv := range result {
		if x, ok := firmwareMapData[vv.FirmwareId]; ok {
			vv.FirmwareFlag = x.Flag
			vv.FirmwareName = x.Name
			vv.FirmwareKey = x.FirmwareKey
		}
		if x, ok := mfvMapData[vv.Id]; ok {
			vv.VersionList = x
		}
	}
	return result, total, nil
}

type FFlag struct {
	Id   int64
	Flag string
}
