// Code generated by sgen.exe,2022-05-06 14:01:21. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmProductModuleRelationSvc struct {
	Ctx context.Context
}

// 创建OpmProductModuleRelation
func (s *OpmProductModuleRelationSvc) CreateOpmProductModuleRelation(req *proto.OpmProductModuleRelation) (*proto.OpmProductModuleRelation, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOpmProductModuleRelation
	do := t.WithContext(context.Background())
	dbObj := convert.OpmProductModuleRelation_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

type TempFirmwareVersionInfo struct {
	Id           int64  `gorm:"column:id;primaryKey" json:"id"`                // 主键ID
	FirmwareKey  string `gorm:"column:firmware_key" json:"firmwareKey"`        // 固件Key
	FirmwareId   int64  `gorm:"column:firmware_id;not null" json:"firmwareId"` // 固件ID(t_pm_firmware.id)
	FirmwareType int32  `gorm:"column:firmware_type" json:"firmwareType"`      // 固件类型
	Version      string `gorm:"column:version;not null" json:"version"`        // version
}

// 批量创建OpmProductModuleRelation
func (s *OpmProductModuleRelationSvc) BatchCreateOpmProductModuleRelation(req *proto.OpmProductModuleRelationList) (*proto.OpmProductModuleRelation, error) {
	if len(req.ProductModuleRelations) == 0 {
		return nil, errors.New("ModuleId不能为空")
	}
	q := orm.Use(iotmodel.GetDB())
	t := q.TOpmProductModuleRelation
	do := t.WithContext(context.Background())

	relationModule := convert.OpmProductModuleRelation_pb2db(req.ProductModuleRelations[0])
	relationModule.Id = iotutil.GetNextSeqInt64()
	var (
		moduleId int64 = relationModule.ModuleId
		//productId      int64 = relationModule.ProductId
		firmwareId int64 = relationModule.FirmwareId
		//lastVersionNum string
		//lastVersionId  int64
		//lastFirmwareId int64
	)
	if moduleId == 0 && firmwareId == 0 {
		return nil, errors.New("参数异常ModuleId,firmwareId")
	}

	//是否报错固件
	isSaveCustomFirmware := moduleId == 0
	if isSaveCustomFirmware {
		//查询自定自定义固件
		tVersion := q.TOpmFirmwareVersion
		tf := q.TOpmFirmware
		var lastVersion TempFirmwareVersionInfo
		err := tVersion.WithContext(context.Background()).
			Join(tf, tf.Id.EqCol(tVersion.FirmwareId)).
			Where(tVersion.FirmwareId.Eq(firmwareId)).                                                                   //, tVersion.Status.Eq(1)
			Select(tVersion.Id, tVersion.Version, tf.FirmwareKey, tf.Id.As("firmware_id"), tf.Type.As("firmware_type")). //, tf..As("firmware_key")
			Order(field.Func.VersionOrder(tVersion.Version).Desc()).Scan(&lastVersion)
		if err != nil {
			return nil, err
		}
		relationModule.FirmwareType = lastVersion.FirmwareType //lastVersion.firmwareType
		relationModule.FirmwareId = firmwareId
		relationModule.FirmwareVersionId = lastVersion.Id
		relationModule.FirmwareVersion = lastVersion.Version
		relationModule.FirmwareKey = lastVersion.FirmwareKey
		relationModule.IsCustom = 1

		//判断固件类型是否重复
		count, err := do.Where(t.ProductId.Eq(relationModule.ProductId),
			t.FirmwareType.Eq(relationModule.FirmwareType)).Count()
		if err != nil {
			return nil, err
		}
		//选用云管平台固件，只容许出现一个，并且选择的固件类型不能与自定义固件重复，所以此处只要与自定义固件判断重复即可
		if count > 0 {
			return nil, errors.New("请解除关联自定义固件-模组通讯固件类型，才能选择模组。")
		}

		//删除之前的固件，替换为新的固件
		_, err = do.Where(t.ProductId.Eq(relationModule.ProductId), t.FirmwareType.Eq(relationModule.FirmwareType)).Delete()
		if err != nil {
			return nil, err
		}
	} else {
		//TODO 获取模组对应固件版本和固件版本号，如果从外部传入此处可以省略
		//获取模组信息
		tModule := q.TPmModule
		doModule := tModule.WithContext(context.Background())
		moduleInfo, err := doModule.Where(tModule.Id.Eq(moduleId)).First()
		if err != nil {
			return nil, err
		}
		//获取版本（这里应该是获取默认版本
		tVersion := q.TPmFirmwareVersion
		tFirmware := q.TPmFirmware
		//tVersion.Version.In(moduleInfo.DefaultVersion),
		var lastVersions []*TempFirmwareVersionInfo

		err = tVersion.WithContext(context.Background()).LeftJoin(tFirmware, tVersion.FirmwareId.EqCol(tFirmware.Id)).
			Where(tVersion.FirmwareId.Eq(moduleInfo.FirmwareId), tVersion.Status.Eq(1),
				tVersion.Version.Eq(moduleInfo.DefaultVersion)).
			Select(tVersion.Id, tFirmware.FirmwareKey, tFirmware.Id.As("firmware_id"), tFirmware.Type.As("firmware_type"), tVersion.Version).Scan(&lastVersions)
		//下面获取最高版本
		//Order(field.Func.VersionOrder(tVersion.Version).Desc()).First()
		if err != nil {
			return nil, err
		}
		var lastVersion *TempFirmwareVersionInfo
		//如果默认版本禁用了，则加载当前最新版本
		if len(lastVersions) == 0 {
			mfv := q.TPmModuleFirmwareVersion
			var versions []*TempFirmwareVersionInfo
			err := mfv.WithContext(context.Background()).
				Join(tVersion, mfv.VersionId.EqCol(tVersion.Id)). //), tVersion.Status.Eq(1)v
				Join(tFirmware, tVersion.FirmwareId.EqCol(tFirmware.Id)).
				Select(tVersion.Id, tFirmware.FirmwareKey, tFirmware.Id.As("firmware_id"), tFirmware.Type.As("firmware_type"), tFirmware.FirmwareKey, tVersion.Version).
				Where(mfv.ModuleId.Eq(moduleInfo.Id)).
				Order(field.Func.VersionOrder(tVersion.Version).Desc()).
				Scan(&versions)
			if err != nil {
				return nil, err
			}
			if len(versions) == 0 {
				return nil, errors.New("当前模组未配置固件版本，无法选择！")
			}
			lastVersion = versions[0]
		} else {
			fw := lastVersions[0]
			lastVersion = &TempFirmwareVersionInfo{
				Id:           fw.Id,
				FirmwareId:   fw.FirmwareId,
				FirmwareKey:  fw.FirmwareKey,
				FirmwareType: fw.FirmwareType,
				Version:      fw.Version,
			}
		}
		relationModule.FirmwareType, _ = iotutil.ToInt32Err(moduleInfo.FirmwareType)
		relationModule.FirmwareId = moduleInfo.FirmwareId
		relationModule.FirmwareVersionId = lastVersion.Id
		relationModule.FirmwareVersion = lastVersion.Version
		relationModule.FirmwareKey = lastVersion.FirmwareKey
		relationModule.IsCustom = 2

		//判断固件类型是否重复
		count, err := do.Where(t.ProductId.Eq(relationModule.ProductId),
			t.FirmwareType.Eq(relationModule.FirmwareType), t.IsCustom.Eq(1)).Count()
		if err != nil {
			return nil, err
		}
		//选用云管平台固件，只容许出现一个，并且选择的固件类型不能与自定义固件重复，所以此处只要与自定义固件判断重复即可
		if count > 0 {
			return nil, errors.New("请解除关联同类固件类型关系。")
		}

		//删除之前的固件，替换为新的固件
		_, err = do.Where(t.ProductId.Eq(relationModule.ProductId), t.IsCustom.Eq(2)).Delete()
		if err != nil {
			return nil, err
		}
	}

	//重新替换新增
	err := do.Create(relationModule)
	if err != nil {
		logger.Errorf("BatchCreateOpmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	//if !isSaveCustomFirmware {
	//	tProduct := q.TOpmProduct
	//	tProduct.WithContext(context.Background()).Where(tProduct.Id.Eq(productId)).
	//		Select(tProduct.ModuleId, tProduct.FirmwareVersion, tProduct.FirmwareId, tProduct.FirmwareVersionId).
	//		Updates(&model.TOpmProduct{
	//			ModuleId:          moduleId,
	//			FirmwareId:        lastFirmwareId,
	//			FirmwareVersionId: lastVersionId,
	//			FirmwareVersion:   lastVersionNum,
	//		})
	//}
	return nil, err
}

// 切换版本
func (s *OpmProductModuleRelationSvc) ChangeOpmProductModuleRelation(req *proto.OpmProductModuleRelationChangeVersion) (*proto.OpmProductModuleRelation, error) {
	q := orm.Use(iotmodel.GetDB())
	t := q.TOpmProductModuleRelation
	do := t.WithContext(context.Background())
	var productId int64 = 0

	productId = req.ProductId
	_, err := do.Where(t.ProductId.Eq(req.ProductId),
		t.FirmwareId.Eq(req.FirmwareId)).
		Select(t.FirmwareVersion, t.FirmwareVersionId).
		Updates(&model.TOpmProductModuleRelation{
			FirmwareVersionId: req.FirmwareVersionId,
			FirmwareVersion:   req.FirmwareVersion})
	if err != nil {
		return nil, err
	}

	tProduct := q.TOpmProduct
	tProduct.WithContext(context.Background()).Where(tProduct.Id.Eq(productId)).
		Select(tProduct.FirmwareVersion, tProduct.FirmwareVersionId).
		Updates(&model.TOpmProduct{
			FirmwareVersionId: req.FirmwareVersionId,
			FirmwareVersion:   req.FirmwareVersion,
		})
	return nil, err
}

// 根据条件删除OpmProductModuleRelation
func (s *OpmProductModuleRelationSvc) DeleteOpmProductModuleRelation(req *proto.OpmProductModuleRelation) (*proto.OpmProductModuleRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductModuleRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.ModuleId != 0 { //整数
		do = do.Where(t.ModuleId.Eq(req.ModuleId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpmProductModuleRelation
func (s *OpmProductModuleRelationSvc) DeleteByIdOpmProductModuleRelation(req *proto.OpmProductModuleRelation) (*proto.OpmProductModuleRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductModuleRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpmProductModuleRelation
func (s *OpmProductModuleRelationSvc) DeleteByIdsOpmProductModuleRelation(req *proto.OpmProductModuleRelationBatchDeleteRequest) (*proto.OpmProductModuleRelationBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmProductModuleRelation
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmProductModuleRelation error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpmProductModuleRelation
func (s *OpmProductModuleRelationSvc) UpdateOpmProductModuleRelation(req *proto.OpmProductModuleRelation) (*proto.OpmProductModuleRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductModuleRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.ProductId != 0 { //整数
		updateField = append(updateField, t.ProductId)
	}
	if req.ModuleId != 0 { //整数
		updateField = append(updateField, t.ModuleId)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmProductModuleRelation error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmProductModuleRelation_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpmProductModuleRelation
func (s *OpmProductModuleRelationSvc) UpdateAllOpmProductModuleRelation(req *proto.OpmProductModuleRelation) (*proto.OpmProductModuleRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductModuleRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.ProductId)
	updateField = append(updateField, t.ModuleId)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmProductModuleRelation error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmProductModuleRelation_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmProductModuleRelationSvc) UpdateFieldsOpmProductModuleRelation(req *proto.OpmProductModuleRelationUpdateFieldsRequest) (*proto.OpmProductModuleRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductModuleRelation
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmProductModuleRelation error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmProductModuleRelation error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmProductModuleRelation_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmProductModuleRelation
func (s *OpmProductModuleRelationSvc) FindOpmProductModuleRelation(req *proto.OpmProductModuleRelationFilter) (*proto.OpmProductModuleRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductModuleRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.ModuleId != 0 { //整数
		do = do.Where(t.ModuleId.Eq(req.ModuleId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmProductModuleRelation_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpmProductModuleRelation
func (s *OpmProductModuleRelationSvc) FindByIdOpmProductModuleRelation(req *proto.OpmProductModuleRelationFilter) (*proto.OpmProductModuleRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductModuleRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmProductModuleRelation error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmProductModuleRelation_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OpmProductModuleRelation,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmProductModuleRelationSvc) GetListOpmProductModuleRelation(req *proto.OpmProductModuleRelationListRequest) ([]*proto.OpmProductModuleRelation, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpmProductModuleRelation
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.ProductId != 0 { //整数
			do = do.Where(t.ProductId.Eq(query.ProductId))
		}
		if query.ModuleId != 0 { //整数
			do = do.Where(t.ModuleId.Eq(query.ModuleId))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOpmProductModuleRelation
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmProductModuleRelation error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmProductModuleRelation, len(list))
	for i, v := range list {
		result[i] = convert.OpmProductModuleRelation_db2pb(v)
	}
	return result, total, nil
}

// 产品模组列表
func (s *OpmProductModuleRelationSvc) QueryProductFirmwareList(req *proto.ProductFirmwareFilter) ([]*proto.ProductFirmwareItem, error) {
	if req.ProductId == 0 {
		return nil, errors.New("productId不能为空")
	}
	if req.FirmwareType == 0 {
		return nil, errors.New("firmwareType不能为空")
	}
	var err error
	q := orm.Use(iotmodel.GetDB())
	tModuleRelation := q.TOpmProductModuleRelation
	relations, err := tModuleRelation.WithContext(context.Background()).Where(tModuleRelation.ProductId.Eq(req.ProductId)).Find()
	if err != nil {
		return nil, errors.New("模组关联数据获取失败")
	}

	//关联固件分类，自定义和非自定义
	cloudFws := []int64{}
	customFws := []int64{}
	for _, r := range relations {
		if r.IsCustom == 2 {
			cloudFws = append(cloudFws, r.FirmwareId)
		} else {
			customFws = append(customFws, r.FirmwareId)
		}
	}
	list := make([]*proto.ProductFirmwareItem, 0)
	if len(cloudFws) > 0 {
		//查询云固件
		cloudFwList, err := q.TPmFirmware.WithContext(context.Background()).Where(q.TPmFirmware.Id.In(cloudFws...), q.TPmFirmware.Type.Eq(iotutil.ToString(req.FirmwareType)), q.TPmFirmware.DeletedAt.IsNull()).Find()
		if err != nil {
			return nil, err
		}
		for _, firmware := range cloudFwList {
			list = append(list, &proto.ProductFirmwareItem{Id: iotutil.ToString(firmware.Id), Name: firmware.Name, IsCustom: 2})
		}
	}
	if len(customFws) > 0 {
		//查询自定义固件
		customFwList, err := q.TOpmFirmware.WithContext(context.Background()).Where(q.TOpmFirmware.Id.In(customFws...), q.TOpmFirmware.Type.Eq(iotutil.ToString(req.FirmwareType)), q.TOpmFirmware.DeletedAt.IsNull()).Find()
		if err != nil {
			return nil, err
		}
		for _, firmware := range customFwList {
			list = append(list, &proto.ProductFirmwareItem{Id: iotutil.ToString(firmware.Id), Name: firmware.Name, IsCustom: 1})
		}
	}
	return list, nil
}

// 产品模组版本列表
func (s *OpmProductModuleRelationSvc) QueryProductFirmwareVersionList(req *proto.ProductFirmwareVersionFilter) ([]*proto.ProductFirmwareItem, error) {
	if req.ProductId == 0 {
		return nil, errors.New("productId不能为空")
	}
	if req.FirmwareId == 0 {
		return nil, errors.New("FirmwareId不能为空")
	}
	//if req.ModuleId == 0 {
	//	return nil, errors.New("ModuleId不能为空")
	//}
	q := orm.Use(iotmodel.GetDB())
	list := make([]*proto.ProductFirmwareItem, 0)
	if req.IsCustom == 1 {
		fvList, err := q.TOpmFirmwareVersion.WithContext(context.Background()).
			Where(q.TOpmFirmwareVersion.FirmwareId.Eq(req.FirmwareId), q.TOpmFirmwareVersion.Status.Eq(1)).Find()
		if err != nil {
			return nil, err
		}
		for _, version := range fvList {
			list = append(list, &proto.ProductFirmwareItem{
				Id:       iotutil.ToString(version.Id),
				Name:     version.Version,
				IsCustom: req.IsCustom,
				IsMust:   version.IsMust,
			})
		}
	} else {
		tMfv := q.TPmModuleFirmwareVersion
		tFv := q.TPmFirmwareVersion
		tM := q.TPmModule
		fvList, err := tFv.WithContext(context.Background()).
			Join(tMfv, tFv.Id.EqCol(tMfv.VersionId)).
			Join(tM, tM.Id.EqCol(tMfv.ModuleId)).
			Where(tM.FirmwareId.Eq(req.FirmwareId), tFv.Status.Eq(1)).Select(tFv.ALL).Find()
		if err != nil {
			return nil, err
		}
		for _, version := range fvList {
			list = append(list, &proto.ProductFirmwareItem{
				Id:       iotutil.ToString(version.Id),
				Name:     version.Version,
				IsCustom: req.IsCustom,
				IsMust:   version.IsMust,
			})
		}
	}
	return list, nil
}
