// Code generated by sgen.exe,2022-04-20 13:52:29. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"google.golang.org/protobuf/types/known/timestamppb"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type PmFirmwareVersionSvc struct {
	Ctx context.Context
}

// 创建PmFirmwareVersion
func (s *PmFirmwareVersionSvc) CreatePmFirmwareVersion(req *proto.PmFirmwareVersion) (*proto.PmFirmwareVersion, error) {
	// fixme 请在这里校验参数
	if req.Version == "" {
		return nil, errors.New("固件版本号不能为空")
	}
	t := orm.Use(iotmodel.GetDB()).TPmFirmwareVersion
	do := t.WithContext(context.Background())
	dbObj := convert.PmFirmwareVersion_pb2db(req)

	// 判断模组芯片名称是否重复
	count, err := do.Where(t.FirmwareId.Eq(req.FirmwareId), t.Version.Eq(req.Version)).Count()
	if err != nil {
		logger.Errorf("CreatePmFirmwareVersion error : %s", err.Error())
		return nil, err
	}
	if count > 0 {
		return nil, errors.New("固件版本号不能重复")
	}

	//固件版本号比较
	lastVersion, err := do.Where(t.FirmwareId.Eq(req.FirmwareId)).Order(field.Func.VersionOrder(t.Version).Desc()).First()
	if err == nil && lastVersion.Version != "" {
		compare, err := iotutil.VerCompare(req.Version, lastVersion.Version)
		if err != nil {
			logger.Errorf("CreatePmFirmwareVersion version compare error : %s", err.Error())
			return nil, err
		}
		if compare != 1 {
			return nil, errors.New("新增固件版本必须大于之前的版本")
		}
	}

	err = do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreatePmFirmwareVersion error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除PmFirmwareVersion
func (s *PmFirmwareVersionSvc) DeletePmFirmwareVersion(req *proto.PmFirmwareVersion) (*proto.PmFirmwareVersion, error) {
	t := orm.Use(iotmodel.GetDB()).TPmFirmwareVersion
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.FirmwareId != 0 { //整数
		do = do.Where(t.FirmwareId.Eq(req.FirmwareId))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.Desc != "" { //字符串
		do = do.Where(t.Desc.Eq(req.Desc))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.FilePath != "" { //字符串
		do = do.Where(t.FilePath.Eq(req.FilePath))
	}
	if req.FileKey != "" { //字符串
		do = do.Where(t.FileKey.Eq(req.FileKey))
	}
	if req.FileSize != 0 { //整数
		do = do.Where(t.FileSize.Eq(req.FileSize))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeletePmFirmwareVersion error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除PmFirmwareVersion
func (s *PmFirmwareVersionSvc) DeleteByIdPmFirmwareVersion(req *proto.PmFirmwareVersion) (*proto.PmFirmwareVersion, error) {
	t := orm.Use(iotmodel.GetDB()).TPmFirmwareVersion
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdPmFirmwareVersion error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除PmFirmwareVersion
func (s *PmFirmwareVersionSvc) DeleteByIdsPmFirmwareVersion(req *proto.PmFirmwareVersionBatchDeleteRequest) (*proto.PmFirmwareVersionBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TPmFirmwareVersion
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsPmFirmwareVersion error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新PmFirmwareVersion
func (s *PmFirmwareVersionSvc) UpdatePmFirmwareVersion(req *proto.PmFirmwareVersion) (*proto.PmFirmwareVersion, error) {
	t := orm.Use(iotmodel.GetDB()).TPmFirmwareVersion
	do := t.WithContext(context.Background())
	// 检查数据是否为启用，启用数据无法进行编辑
	if req.Id == 0 {
		return nil, errors.New("主键Id不能为空")
	}
	oriObj, err := do.Where(t.Id.Eq(req.Id)).First()
	if err != nil {
		return nil, err
	}
	if oriObj.Status == 1 {
		return nil, errors.New("已上架版本无法编辑")
	}
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.FirmwareId != 0 { //整数
		updateField = append(updateField, t.FirmwareId)
	}
	if req.Version != "" { //字符串
		updateField = append(updateField, t.Version)
	}
	if req.Desc != "" { //字符串
		updateField = append(updateField, t.Desc)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.FilePath != "" { //字符串
		updateField = append(updateField, t.FilePath)
	}
	if req.FileKey != "" { //字符串
		updateField = append(updateField, t.FileKey)
	}
	if req.FileName != "" { //字符串
		updateField = append(updateField, t.FileName)
	}
	if req.FileSize != 0 { //整数
		updateField = append(updateField, t.FileSize)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if req.ZipFilePath != "" { //字符串
		updateField = append(updateField, t.ZipFilePath)
	}
	if req.ZipFileKey != "" { //字符串
		updateField = append(updateField, t.ZipFileKey)
	}
	if req.ZipFileName != "" { //字符串
		updateField = append(updateField, t.ZipFileName)
	}
	if req.FileSize != 0 { //整数
		updateField = append(updateField, t.FileSize)
	}
	if req.IsMust != 0 { //整数
		updateField = append(updateField, t.IsMust)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdatePmFirmwareVersion error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.PmFirmwareVersion_pb2db(req)
	_, err = do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdatePmFirmwareVersion error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段PmFirmwareVersion
func (s *PmFirmwareVersionSvc) UpdateAllPmFirmwareVersion(req *proto.PmFirmwareVersion) (*proto.PmFirmwareVersion, error) {
	t := orm.Use(iotmodel.GetDB()).TPmFirmwareVersion
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	// 判断模组芯片名称是否重复
	count, err := do.Where(t.FirmwareId.Eq(req.FirmwareId), t.Version.Eq(req.Version), t.Id.Neq(req.Id)).Count()
	if err != nil {
		logger.Errorf("UpdateAllPmFirmwareVersion error : %s", err.Error())
		return nil, err
	}
	if count > 0 {
		return nil, errors.New("固件版本号不能重复")
	}

	updateField = append(updateField, t.FirmwareId)
	updateField = append(updateField, t.Version)
	updateField = append(updateField, t.Desc)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.FilePath)
	updateField = append(updateField, t.FileName)
	updateField = append(updateField, t.FileKey)
	updateField = append(updateField, t.FileSize)
	updateField = append(updateField, t.ZipFilePath)
	updateField = append(updateField, t.ZipFileKey)
	updateField = append(updateField, t.ZipFileName)
	updateField = append(updateField, t.FileSize)
	updateField = append(updateField, t.UpdatedBy)
	updateField = append(updateField, t.IsMust)

	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllPmFirmwareVersion error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	req.UpdatedAt = timestamppb.Now()
	dbObj := convert.PmFirmwareVersion_pb2db(req)
	_, err = do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllPmFirmwareVersion error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *PmFirmwareVersionSvc) UpdateFieldsPmFirmwareVersion(req *proto.PmFirmwareVersionUpdateFieldsRequest) (*proto.PmFirmwareVersion, error) {
	t := orm.Use(iotmodel.GetDB()).TPmFirmwareVersion
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsPmFirmwareVersion error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	req.Data.UpdatedAt = timestamppb.Now()
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsPmFirmwareVersion error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.PmFirmwareVersion_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsPmFirmwareVersion error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找PmFirmwareVersion
func (s *PmFirmwareVersionSvc) FindPmFirmwareVersion(req *proto.PmFirmwareVersionFilter) (*proto.PmFirmwareVersion, error) {
	t := orm.Use(iotmodel.GetDB()).TPmFirmwareVersion
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.FirmwareId != 0 { //整数
		do = do.Where(t.FirmwareId.Eq(req.FirmwareId))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Like("%" + req.Version + "%"))
	}
	if req.Desc != "" { //字符串
		do = do.Where(t.Desc.Like("%" + req.Desc + "%"))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.FilePath != "" { //字符串
		do = do.Where(t.FilePath.Like("%" + req.FilePath + "%"))
	}
	if req.FileKey != "" { //字符串
		do = do.Where(t.FileKey.Like("%" + req.FileKey + "%"))
	}
	if req.FileSize != 0 { //整数
		do = do.Where(t.FileSize.Eq(req.FileSize))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindPmFirmwareVersion error : %s", err.Error())
		return nil, err
	}
	res := convert.PmFirmwareVersion_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找PmFirmwareVersion
func (s *PmFirmwareVersionSvc) FindByIdPmFirmwareVersion(req *proto.PmFirmwareVersionFilter) (*proto.PmFirmwareVersion, error) {
	t := orm.Use(iotmodel.GetDB()).TPmFirmwareVersion
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdPmFirmwareVersion error : %s", err.Error())
		return nil, err
	}
	res := convert.PmFirmwareVersion_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找PmFirmwareVersion,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *PmFirmwareVersionSvc) GetListPmFirmwareVersion(req *proto.PmFirmwareVersionListRequest) ([]*proto.PmFirmwareVersion, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TPmFirmwareVersion
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.FirmwareId != 0 { //整数
			do = do.Where(t.FirmwareId.Eq(query.FirmwareId))
		}
		if query.Version != "" { //字符串
			do = do.Where(t.Version.Like("%" + query.Version + "%"))
		}
		if query.Desc != "" { //字符串
			do = do.Where(t.Desc.Like("%" + query.Desc + "%"))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.FilePath != "" { //字符串
			do = do.Where(t.FilePath.Like("%" + query.FilePath + "%"))
		}
		if query.FileKey != "" { //字符串
			do = do.Where(t.FileKey.Like("%" + query.FileKey + "%"))
		}
		if query.FileSize != 0 { //整数
			do = do.Where(t.FileSize.Eq(query.FileSize))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok || req.OrderKey == "version" {
		if req.OrderDesc == "asc" {
			do = do.Order(field.Func.VersionOrder(t.Version))
		} else {
			do = do.Order(field.Func.VersionOrder(t.Version).Desc())
		}
	} else {
		if req.OrderDesc != "asc" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*model.TPmFirmwareVersion
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListPmFirmwareVersion error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.PmFirmwareVersion, len(list))
	for i, v := range list {
		result[i] = convert.PmFirmwareVersion_db2pb(v)
	}
	return result, total, nil
}

// ModuleFirmwareVersionList 模组固件版本列表
func (s *PmFirmwareVersionSvc) ModuleFirmwareVersionList(req *proto.ModuleFirmwareVersionRequest) ([]*proto.PmFirmwareVersion, int64, error) {
	if req.ModuleId == 0 {
		return nil, 0, errors.New("ModuleId 不能为空")
	}
	var err error
	q := orm.Use(iotmodel.GetDB())
	tVersion := q.TPmFirmwareVersion
	tModuleFv := q.TPmModuleFirmwareVersion
	do := tModuleFv.WithContext(context.Background()).Join(tVersion,
		tVersion.Id.EqCol(tModuleFv.VersionId)).
		Where(tModuleFv.ModuleId.Eq(req.ModuleId)).
		Select(tVersion.ALL).
		Order(tModuleFv.Version)

	var list []*model.TPmFirmwareVersion
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do.Order(tModuleFv.CreatedAt.Desc()).ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListPmFirmwareVersion error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.PmFirmwareVersion, len(list))
	for i, v := range list {
		result[i] = convert.PmFirmwareVersion_db2pb(v)
	}
	return result, total, nil
}

func (s *PmFirmwareVersionSvc) UpdateStatusByFirmware(req *proto.PmFirmwareVersionFilter) error {
	t := orm.Use(iotmodel.GetDB()).TPmFirmwareVersion
	do := t.WithContext(context.Background())
	do = do.Where(t.FirmwareId.Eq(req.FirmwareId))
	_, err := do.UpdateColumn(t.Status, req.Status)
	if err != nil {
		logger.Errorf("UpdateAllPmFirmwareVersion error : %s", err.Error())
		return err
	}
	return err
}
