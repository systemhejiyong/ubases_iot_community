// Code generated by sgen.exe,2022-05-13 13:53:26. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotlogger"
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_common/iotstruct"
	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_product_service/rpc/rpcClient"
	"context"
	"errors"
	"strings"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	"cloud_platform/iot_product_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmOtaPublishSvc struct {
	Ctx context.Context
}

// 创建OpmOtaPublish
func (s *OpmOtaPublishSvc) CreateOpmOtaPublish(req *proto.OpmOtaPublish) (*proto.OpmOtaPublish, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublish
	do := t.WithContext(context.Background())
	dbObj := convert.OpmOtaPublish_pb2db(req)
	dbObj.Id = iotutil.GetNextSeqInt64()
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmOtaPublish error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OpmOtaPublish
func (s *OpmOtaPublishSvc) DeleteOpmOtaPublish(req *proto.OpmOtaPublish) (*proto.OpmOtaPublish, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublish
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.PkgId != 0 { //整数
		do = do.Where(t.PkgId.Eq(req.PkgId))
	}
	if req.IsGray != 0 { //整数
		do = do.Where(t.IsGray.Eq(req.IsGray))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.GrayType != 0 { //整数
		do = do.Where(t.GrayType.Eq(req.GrayType))
	}
	if req.GrayScale != 0 { //整数
		do = do.Where(t.GrayScale.Eq(req.GrayScale))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmOtaPublish error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpmOtaPublish
func (s *OpmOtaPublishSvc) DeleteByIdOpmOtaPublish(req *proto.OpmOtaPublish) (*proto.OpmOtaPublish, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublish
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmOtaPublish error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpmOtaPublish
func (s *OpmOtaPublishSvc) DeleteByIdsOpmOtaPublish(req *proto.OpmOtaPublishBatchDeleteRequest) (*proto.OpmOtaPublishBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmOtaPublish
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmOtaPublish error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpmOtaPublish
func (s *OpmOtaPublishSvc) UpdateOpmOtaPublish(req *proto.OpmOtaPublish) (*proto.OpmOtaPublish, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublish
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.PkgId != 0 { //整数
		updateField = append(updateField, t.PkgId)
	}
	if req.IsGray != 0 { //整数
		updateField = append(updateField, t.IsGray)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.GrayType != 0 { //整数
		updateField = append(updateField, t.GrayType)
	}
	if req.GrayScale != 0 { //整数
		updateField = append(updateField, t.GrayScale)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.TenantId)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmOtaPublish error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmOtaPublish_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmOtaPublish error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpmOtaPublish
func (s *OpmOtaPublishSvc) UpdateAllOpmOtaPublish(req *proto.OpmOtaPublish) (*proto.OpmOtaPublish, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublish
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.PkgId)
	updateField = append(updateField, t.PublishAt)
	updateField = append(updateField, t.IsGray)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.GrayType)
	updateField = append(updateField, t.GrayScale)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	updateField = append(updateField, t.TenantId)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmOtaPublish error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmOtaPublish_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmOtaPublish error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmOtaPublishSvc) UpdateFieldsOpmOtaPublish(req *proto.OpmOtaPublishUpdateFieldsRequest) (*proto.OpmOtaPublish, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublish
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmOtaPublish error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmOtaPublish error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmOtaPublish_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmOtaPublish error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmOtaPublish
func (s *OpmOtaPublishSvc) FindOpmOtaPublish(req *proto.OpmOtaPublishFilter) (*proto.OpmOtaPublish, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublish
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.PkgId != 0 { //整数
		do = do.Where(t.PkgId.Eq(req.PkgId))
	}
	if req.IsGray != 0 { //整数
		do = do.Where(t.IsGray.Eq(req.IsGray))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.GrayType != 0 { //整数
		do = do.Where(t.GrayType.Eq(req.GrayType))
	}
	if req.GrayScale != 0 { //整数
		do = do.Where(t.GrayScale.Eq(req.GrayScale))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmOtaPublish error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmOtaPublish_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpmOtaPublish
func (s *OpmOtaPublishSvc) FindByIdOpmOtaPublish(req *proto.OpmOtaPublishFilter) (*proto.OpmOtaPublish, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublish
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmOtaPublish error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmOtaPublish_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OpmOtaPublish,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmOtaPublishSvc) GetListOpmOtaPublish(req *proto.OpmOtaPublishListRequest) ([]*proto.OpmOtaPublish, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	q := orm.Use(iotmodel.GetDB())
	t := q.TOpmOtaPublish
	tPkg := q.TOpmOtaPkg
	tFirmware := q.TPmFirmware
	tProduct := q.TOpmProduct
	tOFirmware := q.TOpmFirmware
	do := t.WithContext(context.Background()).
		LeftJoin(tPkg, tPkg.Id.EqCol(t.PkgId)).
		LeftJoin(tFirmware, tPkg.FirmwareId.EqCol(tFirmware.Id)).
		LeftJoin(tOFirmware, tPkg.FirmwareId.EqCol(tOFirmware.Id)).
		LeftJoin(tProduct, tPkg.ProductId.EqCol(tProduct.Id))

	query := req.Query
	if query != nil {
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.PkgId != 0 { //整数
			do = do.Where(t.PkgId.Eq(query.PkgId))
		}
		if query.IsGray != 0 { //整数
			do = do.Where(t.IsGray.Eq(query.IsGray))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.GrayType != 0 { //整数
			do = do.Where(t.GrayType.Eq(query.GrayType))
		}
		if query.GrayScale != 0 { //整数
			do = do.Where(t.GrayScale.Eq(query.GrayScale))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Eq(query.TenantId))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.CreatedAt.Desc())
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*struct {
		model.TOpmOtaPublish
		OFirmwareName   string `gorm:"column:oFirmwareName;default:''" json:"oFirmwareName"`
		FirmwareName    string `gorm:"column:firmwareName;default:''" json:"firmwareName"`
		ProductName     string `gorm:"column:productName;default:''" json:"productName"`
		FirmwareVersion string `gorm:"column:firmwareVersion;default:''" json:"firmwareVersion"`
	}
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do.Select(t.ALL, tPkg.Version.As("firmwareVersion"), tFirmware.Name.As("firmwareName"), tOFirmware.Name.As("OFirmwareName"), tProduct.Name.As("productName")).ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Select(t.ALL, tPkg.Version.As("firmwareVersion"), tFirmware.Name.As("firmwareName"), tOFirmware.Name.As("OFirmwareName"), tProduct.Name.As("productName")).Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmOtaPublish error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmOtaPublish, len(list))

	for i, v := range list {
		result[i] = convert.OpmOtaPublish_db2pb(&v.TOpmOtaPublish)
		result[i].ProductName = v.ProductName
		result[i].FirmwareName = iotutil.MapGetStringVal(v.FirmwareName, v.OFirmwareName)
		result[i].Version = v.FirmwareVersion
	}
	return result, total, nil
}

type OtaPublishInfo struct {
	model.TOpmOtaPublish
	Name               string `json:"name"`                                                // 固件名称
	FileName           string `json:"fileName"`                                            // 文件名称
	FilePath           string `json:"filePath"`                                            // 固件版本文件
	FileKey            string `json:"fileKey"`                                             // 固件版本MD5值
	FileSize           *int32 `json:"fileSize"`                                            // 固件版本包大小
	PmIsMust           int32  `gorm:"column:pmIsMust" json:"pmIsMust"`                     //是否必须
	UpgradeOvertime    *int32 `gorm:"column:upgradeOvertime" json:"upgradeOvertime"`       // 升级超时时间
	UpgradeDesc        string `gorm:"column:otaUpgradeDesc" json:"otaUpgradeDesc"`         // 升级文案
	OpmName            string `gorm:"column:opmName" json:"opmName"`                       // 固件名称
	OpmFileName        string `gorm:"column:opmFileName" json:"opmFileName"`               // 文件名称
	OpmFilePath        string `gorm:"column:opmFilePath" json:"opmFilePath"`               // 固件版本文件
	OpmFileKey         string `gorm:"column:opmFileKey" json:"opmFileKey"`                 // 固件版本MD5值
	OpmFileSize        *int32 `gorm:"column:opmFileSize" json:"opmFileSize"`               // 固件版本包大小
	OpmUpgradeOvertime *int32 `gorm:"column:opmUpgradeOvertime" json:"opmupgradeOvertime"` // 固件版本包大小
	IsCustom           int32  `gorm:"column:isCustom" json:"isCustom"`                     //是否自定义固件
	FirmwareType       int32  `gorm:"column:firmwareType" json:"frmwareType"`              //固件类似
	OpmIsMust          int32  `gorm:"column:opmIsMust" json:"opmIsMust"`                   //自定义固件是否必须
}

// CheckOtaVersion
//
// 查询是否在当前灰度升级名单中
// 检查当前设备是否已完成升级
// 原来数据格式
//
//	{
//		"_id": "62abe34d7208fd69f5a29dca",
//		"batch": "",
//		"iscustompacket": 0,
//		"isdiff": false,
//		"md5": "5281e94ca81fc05cdc0df8b65056933c",
//		"model": "axy-light-qp1-0303.02",
//		"packetname": "axy-light-qp1-0303.02-1.3.6.bin",
//		"remark": "test",
//		"signstr": "RSA-SHA256(/packet/axy-light-qp1-0303.02-1.3.6.bin)= 83a3a44bcbfcd94736703631b5fc9acf6945e2c98fa7fde84b37d0d42946e2fff533d5470f287a592f2029a88594cae84608f273660fcd6427c3a63c4dff61eba4959a93b390c6a8c0bccebec3e37d588ad135be3ddd8265d5558e7cb6bc4c2fabebbec46488179fb5fbdb912544ee232129d15759252c4f37c699920b7e52a9\n",
//		"size": 688480,
//		"url": "http://axytest.aithinker.com/sapi/packet/download?packetname=axy-light-qp1-0303.02-1.3.6.bin",
//		"version": "1.3.6"
//	}
//
// "chanel":  升级渠道（1-云端、2-APP）
// "pointVer": 指定目标版本
// "baseVer": 固件最低兼容版本
// "mcuBaseVer":mcu最低兼容版本
// "otaType": module_ota_all, module_ota_diff、module_mcu_all、module_mcu_diff
// "appUrl": oss永久有效的外链地址,
// "md5":当前待升级的固件包文件的MD5值,
// "mcuUrl":mcu的oss永久有效的外链地址。
func (s *OpmOtaPublishSvc) CheckOtaVersion(req *proto.CheckOtaVersionRequest) (response *proto.CheckOtaVersionResponse, err error) {
	response = &proto.CheckOtaVersionResponse{}
	if req.ProductKey == "" {
		return response, errors.New("产品Key不能为空")
	}
	q := orm.Use(iotmodel.GetDB())
	//产品信息
	pro, err := q.TOpmProduct.WithContext(context.Background()).
		Where(q.TOpmProduct.ProductKey.Eq(req.ProductKey)).Find()
	if err != nil {
		return response, errors.New("产品信息获取失败, err:" + err.Error())
	}
	if len(pro) == 0 {
		return response, errors.New("产品信息获取失败")
	}
	//获取设备信息
	deviceCached, err := getDeviceCached(req.DeviceId)
	if err != nil {
		return response, errors.New("未获取到设备缓存")
	}
	if _, ok := deviceCached["did"]; !ok {
		return response, errors.New("未获取到设备缓存")
	}
	country := deviceCached["country"]
	//获取固件的最新发布记录
	var status int32 = iotconst.STATUS_RELEASE //发布状态
	tPublish := q.TOpmOtaPublish
	tPkg := q.TOpmOtaPkg
	tFirmware := q.TPmFirmware
	tFirmwareVersion := q.TPmFirmwareVersion

	tOFirmware := q.TOpmFirmware
	tOFirmwareVersion := q.TOpmFirmwareVersion
	//查询固件升级信息
	do := tPublish.WithContext(context.Background()).
		LeftJoin(tPkg, tPkg.Id.EqCol(tPublish.PkgId)).
		LeftJoin(tFirmwareVersion, tFirmwareVersion.Id.EqCol(tPkg.VersionId), tPkg.IsCustomFirmware.Eq(2)).
		LeftJoin(tFirmware, tFirmware.Id.EqCol(tFirmwareVersion.FirmwareId), tPkg.IsCustomFirmware.Eq(2)).
		LeftJoin(tOFirmwareVersion, tOFirmwareVersion.Id.EqCol(tPkg.VersionId), tPkg.IsCustomFirmware.Eq(1)).
		LeftJoin(tOFirmware, tOFirmware.Id.EqCol(tOFirmwareVersion.FirmwareId), tPkg.IsCustomFirmware.Eq(1))

	var pvList []*OtaPublishInfo
	//tPkg.Version.Gt(req.Version)
	//field.Func.VersionOrder(tPublish.Version))

	//err = do.Where(tPkg.ProductId.Eq(pro[0].Id), tPkg.Version.Gt(req.Version),
	ver := field.GetVersionField(req.Version)
	err = do.Where(tPkg.ProductId.Eq(pro[0].Id), tPkg.Version.GetVersionField().GtCol(ver),
		tPkg.Status.Eq(status), tPublish.Status.Eq(status), tPkg.FirmwareType.In(req.FirmwareTypes...)).
		Select(tPublish.ALL, tFirmware.Name, tFirmwareVersion.FileName,
			tFirmwareVersion.FilePath, tFirmwareVersion.FileKey, tFirmwareVersion.FileSize,
			tFirmwareVersion.IsMust.As("pmIsMust"),
			tFirmware.UpgradeOvertime.As("upgradeOvertime"),
			tPkg.UpgradeDesc.As("otaUpgradeDesc"),
			tPkg.IsCustomFirmware.As("isCustom"),
			tPkg.FirmwareType.As("firmwareType"),
			tOFirmware.Name.As("opmName"),
			tOFirmwareVersion.ProdFileName.As("opmFileName"),
			tOFirmwareVersion.ProdFilePath.As("opmFilePath"),
			tOFirmwareVersion.ProdFileKey.As("opmFileKey"),
			tOFirmwareVersion.ProdFileSize.As("opmFileSize"),
			tOFirmwareVersion.IsMust.As("opmIsMust"),
			tOFirmware.UpgradeOvertime.As("opmUpgradeOvertime")).
		Order(field.Func.VersionOrder(tPublish.Version).Desc()).Scan(&pvList)
	// tPublish.CreatedAt.Desc()
	//TODO 排序根据发布时间 tPublish.CreatedAt

	if err != nil {
		if err.Error() == "record not found" {
			response.Code = 101 //标识无需升级
			return response, nil
		} else {
			return response, err
		}
	}
	newList := make([]*OtaPublishInfo, 0)
	//倒叙插入
	for i := len(pvList) - 1; i >= 0; i-- {
		isMust := (pvList[i].OpmIsMust == 1 && pvList[i].IsCustom == 1) || (pvList[i].PmIsMust == 1 && pvList[i].IsCustom == 2)
		if isMust {
			newList = append(newList, pvList[i])
		}
	}
	//将非必经版本追加在列表之后，防止必经条件不匹配，无法寻找到其它版本
	for i, info := range pvList {
		isMust := (info.OpmIsMust == 1 && info.IsCustom == 1) || (info.PmIsMust == 1 && info.IsCustom == 2)
		if !isMust {
			newList = append(newList, pvList[i])
		}
	}

	//代表有必经版本
	if len(newList) > 0 {
		pvList = newList
	}

	var currentPv *OtaPublishInfo
	for _, pv := range pvList {
		//升级时间
		if pv.UpgradeTimeMode == 2 && pv.AutoStartAt != "" && pv.AutoEndAt != "" {
			inRangeTime := iotutil.Between(iotutil.GetTodayStrTime(pv.AutoStartAt), iotutil.GetTodayStrTime(pv.AutoEndAt))
			iotlogger.LogHelper.Infof("inRangeTime: %v start: %s -- %s", inRangeTime, iotutil.GetTodayStrTime(pv.AutoStartAt), iotutil.GetTodayStrTime(pv.AutoEndAt))
			if inRangeTime == false {
				continue
			}
			iotlogger.LogHelper.Info("通过AutoStartAt,AutoEndAt验证")
		}

		//版本相同，无需升级
		if pv.Version == "" || req.Version == pv.Version {
			response.Code = 101 //标识无需升级
			break
		}
		//指定版本
		if pv.SpecifiedVersionMode == 2 && !iotutil.InArray(req.Version, strings.Split(pv.SpecifiedVersion, ",")) {
			continue
		}
		//指定区域
		if pv.SpecifiedAreaMode == 2 && !iotutil.InArray(country, strings.Split(pv.SpecifiedArea, ",")) {
			continue
		}
		//是否所属指定版本
		if pv.IsGray == 2 {
			var bl bool
			if bl, err = checkIsGrayDevice(pv.Id, req.ProductKey, req.DeviceId); !bl {
				if err != nil {
					//异常
					break
				}
				//不在灰度列表中
				continue
			}
		}
		//满足情况直接返回
		response.Code = 200
		currentPv = pv
		break
	}
	//异常退出
	if err != nil {
		logger.Errorf("FindByIdOpmOtaPublish error : %s", err.Error())
		return response, err
	}
	if currentPv == nil || response.Code != 200 {
		response.Code = 101
	}
	//无需升级
	if response.Code == 101 {
		return response, nil
	}
	response.OtaPkg = setOtaPkg(pro[0].ProductKey, currentPv)
	response.UpgradePublish = setUpgradePublish(currentPv)
	return response, nil
}

func setOtaPkg(productKey string, pv *OtaPublishInfo) *proto.OtaPkgInfo {
	res := &proto.OtaPkgInfo{
		Custom:       pv.IsCustom == 1, //是否自定义固件
		IsDiff:       false,            //是否差分（过时）
		ProductKey:   productKey,       //产品Key
		OtaType:      "module_ota_all", //custom = true 则otaType = module_mcu_all
		Version:      pv.Version,
		FirmwareType: pv.FirmwareType,
	}
	switch pv.FirmwareType {
	case iotconst.FIRMWARE_TYPE_MODULE:
		//模组升级
	case iotconst.FIRMWARE_TYPE_BLE, iotconst.FIRMWARE_TYPE_ZIGBEE, iotconst.FIRMWARE_TYPE_EXTAND, iotconst.FIRMWARE_TYPE_MCU:
		//如果是mcu模组，则推送mcu升级 module_mcu_all
		res.OtaType = "module_mcu_all"
		if pv.IsCustom == 1 {
			res.McuUrl = pv.OpmFilePath
		} else {
			res.McuUrl = pv.FilePath
		}
	}
	//是否mcu升级
	if pv.IsCustom == 1 {
		res.Md5 = pv.OpmFileKey
		res.FirmwareName = pv.OpmFileName
		res.Size = *pv.OpmFileSize
		res.AppUrl = pv.OpmFilePath
		res.UpgradeOvertime = *pv.OpmUpgradeOvertime
	} else {
		res.Md5 = pv.FileKey
		res.FirmwareName = pv.FileName
		res.Size = *pv.FileSize
		res.AppUrl = pv.FilePath
		res.UpgradeOvertime = *pv.UpgradeOvertime
	}
	return res
}

func setUpgradePublish(pv *OtaPublishInfo) *proto.UpgradePublishInfo {
	if pv.SpecifiedVersionMode == 2 {
		pv.SpecifiedVersion = ""
	}
	if pv.SpecifiedAreaMode == 2 {
		pv.SpecifiedArea = ""
	}
	return &proto.UpgradePublishInfo{
		PointVer:             pv.SpecifiedVersion,
		BaseVer:              pv.SpecifiedVersion,
		McuBaseVer:           "",
		UpgradeMode:          pv.UpgradeMode,
		IsAuto:               pv.IsAuto,
		UpgradeTimeMode:      pv.UpgradeTimeMode, //1:全天任意时间, 2:指定每日时间段
		AutoStartAt:          pv.AutoStartAt,
		AutoEndAt:            pv.AutoEndAt,
		SpecifiedVersionMode: pv.SpecifiedVersionMode,
		SpecifiedVersion:     pv.SpecifiedVersion,
		SpecifiedAreaMode:    pv.SpecifiedAreaMode,
		SpecifiedArea:        pv.SpecifiedArea,
		UpgradeDesc:          pv.UpgradeDesc,
		UpgradeDescEn:        pv.UpgradeDescEn,
		PubId:                pv.Id,
	}
}

// 检查是否存在与灰度列表
func checkIsGrayDevice(publishId int64, productKey, deviceId string) (bool, error) {
	grayDevice, err := rpcClient.ClientUpgradeRecordService.Find(context.Background(), &proto.IotOtaUpgradeRecordFilter{
		ProductKey: productKey,
		DeviceId:   deviceId,
		PublishId:  publishId,
		IsGray:     2,
	})
	if err != nil {
		return false, err
	}
	if grayDevice.Data != nil {
		//不在灰度列表中
		return true, nil
	}
	return false, nil
}

// 获取设备缓存
func getDeviceCached(devId string) (map[string]string, error) {
	if devId == "" {
		return nil, errors.New("did不能为空")
	}
	newDeviceStatusCmd := iotredis.GetClient().HGetAll(context.Background(), iotconst.HKEY_DEV_DATA_PREFIX+devId)
	if newDeviceStatusCmd.Err() != nil {
		return nil, newDeviceStatusCmd.Err()
	}
	return newDeviceStatusCmd.Val(), nil
}

// 根据主键更新OpmOtaPublish
func (s *OpmOtaPublishSvc) UpdatePublishRecord(log iotstruct.OtaPublishLog) error {
	t := orm.Use(iotmodel.GetDB()).TOpmOtaPublish
	do := t.WithContext(context.Background())
	if log.PubId == 0 { //整数
		logger.Error("UpdatePublishRecord error : Missing condition")
		return errors.New("Missing condition")
	}
	var updateField []field.Expr
	updateField = append(updateField, t.TotalCount)
	updateField = append(updateField, t.SuccessCount)
	updateField = append(updateField, t.Status)
	if log.Message != "" {
		updateField = append(updateField, t.PubResult)
	}
	_, err := do.Where(t.Id.Eq(log.PubId)).Select(updateField...).Updates(model.TOpmOtaPublish{
		TotalCount:   int32(log.TotalCount),
		SuccessCount: int32(log.SuccessCount),
		PubResult:    log.Message,
		Status:       log.Status,
	})
	if err != nil {
		logger.Errorf("UpdatePublishRecord error : %s", err.Error())
		return err
	}
	return nil
}
