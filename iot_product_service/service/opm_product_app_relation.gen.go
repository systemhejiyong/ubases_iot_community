// Code generated by sgen,2024-06-07 15:17:22. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_product_service/convert"
)

type OpmProductAppRelationSvc struct {
	Ctx context.Context
}

//创建OpmProductAppRelation
func (s *OpmProductAppRelationSvc) CreateOpmProductAppRelation(req *proto.OpmProductAppRelation) (*proto.OpmProductAppRelation, error) {
	userId, _ := GetUserIdInt64(s.Ctx)
	if req.AppKey == "" && req.ProductId == 0 {
		return nil, errors.New("AppKey/ProductId参数错误")
	}
	// fixme 请在这里校验参数
	q := orm.Use(iotmodel.GetDB())
	err := q.Transaction(func(tx *orm.Query) error {
		t := tx.TOpmProductAppRelation
		do := t.WithContext(context.Background())
		//app关联产品功能
		if req.AppKey != "" {
			do.Where(t.AppKey.Eq(req.AppKey)).Delete()
			var saveList = make([]*model.TOpmProductAppRelation, 0)
			for _, pro := range req.ProductList {
				proId,_ := iotutil.ToInt64AndErr(pro.Id)
				saveList = append(saveList, &model.TOpmProductAppRelation{
					Id:         iotutil.GetNextSeqInt64(),
					ProductId:  proId,
					ProductKey: pro.Key,
					AppKey:     req.AppKey,
					AppName:    req.AppName,
					CreatedBy:  userId,
					CreatedAt:  time.Now(),
				})
			}
			err := do.Create(saveList...)
			if err != nil {
				return err
			}
		}
		//产品关联APP功能
		if req.ProductId  != 0 {
			do.Where(t.ProductId.Eq(req.ProductId)).Delete()
			var saveList = make([]*model.TOpmProductAppRelation, 0)
			for _, app := range req.AppList {
				saveList = append(saveList, &model.TOpmProductAppRelation{
					Id:         iotutil.GetNextSeqInt64(),
					ProductId:  req.ProductId,
					ProductKey: req.ProductKey,
					AppKey:     app.Key,
					AppName:    app.Name,
					CreatedBy:  userId,
					CreatedAt:  time.Now(),
				})
			}
			err := do.Create(saveList...)
			if err != nil {
				return err
			}
		}
		return nil
	})
	if err != nil {
		logger.Errorf("CreateOpmProductAppRelation error : %s", err.Error())
		return nil,err
	}
	return req, err
}

//根据条件删除OpmProductAppRelation
func (s *OpmProductAppRelationSvc) DeleteOpmProductAppRelation(req *proto.OpmProductAppRelation) (*proto.OpmProductAppRelation, error) {
    t := orm.Use(iotmodel.GetDB()).TOpmProductAppRelation
    do := t.WithContext(context.Background())
    // fixme 请检查条件
    
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
    }
    if req.ProductId != 0 {//整数
        do = do.Where(t.ProductId.Eq(req.ProductId))
    }
    if req.ProductKey != "" {//字符串
        do = do.Where(t.ProductKey.Eq(req.ProductKey))
    }
    if req.AppKey != "" {//字符串
        do = do.Where(t.AppKey.Eq(req.AppKey))
    }
    if req.AppName != "" {//字符串
        do = do.Where(t.AppName.Eq(req.AppName))
    }
    if req.CreatedBy != 0 {//整数
        do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
    }
    _,err := do.Delete()
    if err != nil {
        logger.Errorf("DeleteOpmProductAppRelation error : %s", err.Error())
		return nil,err
    }
    return req, err
}

//根据数据库表主键删除OpmProductAppRelation
func (s *OpmProductAppRelationSvc) DeleteByIdOpmProductAppRelation(req *proto.OpmProductAppRelation) (*proto.OpmProductAppRelation, error) {
    t := orm.Use(iotmodel.GetDB()).TOpmProductAppRelation
    do := t.WithContext(context.Background())
    // fixme 请检查条件
    
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
    }
   _,err := do.Delete()
    if err != nil {
        logger.Errorf("DeleteByIdOpmProductAppRelation error : %s", err.Error())
		return nil,err
    }
    return req, err
}

//根据数据库表主键批量删除OpmProductAppRelation
func (s *OpmProductAppRelationSvc) DeleteByIdsOpmProductAppRelation(req *proto.OpmProductAppRelationBatchDeleteRequest) (*proto.OpmProductAppRelationBatchDeleteRequest, error) {
    var err error
    for _,k := range req.Keys {
        t := orm.Use(iotmodel.GetDB()).TOpmProductAppRelation
        do := t.WithContext(context.Background())
         
        do = do.Where(t.Id.Eq(k.Id))
              
         _,err = do.Delete()
         if err != nil {
             logger.Errorf("DeleteByIdsOpmProductAppRelation error : %s", err.Error())
             break
         }
    }
    return req, err
}

//根据主键更新OpmProductAppRelation
func (s *OpmProductAppRelationSvc) UpdateOpmProductAppRelation(req *proto.OpmProductAppRelation) (*proto.OpmProductAppRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductAppRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField  []field.Expr
    
    if req.ProductId != 0 {//整数
        updateField = append(updateField,t.ProductId)
    }
    if req.ProductKey != "" {//字符串
        updateField = append(updateField,t.ProductKey)
    }
    if req.AppKey != "" {//字符串
        updateField = append(updateField,t.AppKey)
    }
    if req.AppName != "" {//字符串
        updateField = append(updateField,t.AppName)
    }
    if req.CreatedBy != 0 {//整数
        updateField = append(updateField,t.CreatedBy)
    }
    if len(updateField) > 0 {
        do = do.Select(updateField...)
    }
    //主键条件
    HasPrimaryKey := false
      
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
        HasPrimaryKey = true
    }      

    if !HasPrimaryKey {
        logger.Error("UpdateOpmProductAppRelation error : Missing condition")
        return nil,errors.New("Missing condition")
    }

	dbObj := convert.OpmProductAppRelation_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmProductAppRelation error : %s", err.Error())
		return nil,err
	}
	return req, err
}

////根据主键更新所有字段OpmProductAppRelation
func (s *OpmProductAppRelationSvc) UpdateAllOpmProductAppRelation(req *proto.OpmProductAppRelation) (*proto.OpmProductAppRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductAppRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField  []field.Expr
	updateField = append(updateField,t.ProductId)
	updateField = append(updateField,t.ProductKey)
	updateField = append(updateField,t.AppKey)
	updateField = append(updateField,t.AppName)
	updateField = append(updateField,t.CreatedBy)
    if len(updateField) > 0 {
        do = do.Select(updateField...)
    }
    //主键条件
    HasPrimaryKey := false   
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
        HasPrimaryKey = true
    }      
    if !HasPrimaryKey {
        logger.Error("UpdateAllOpmProductAppRelation error : Missing condition")
        return nil,errors.New("Missing condition")
    }
	dbObj := convert.OpmProductAppRelation_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmProductAppRelation error : %s", err.Error())
		return nil,err
	}
	return req, err
}

func (s *OpmProductAppRelationSvc) UpdateFieldsOpmProductAppRelation(req *proto.OpmProductAppRelationUpdateFieldsRequest) (*proto.OpmProductAppRelation, error) {
    t := orm.Use(iotmodel.GetDB()).TOpmProductAppRelation
	do := t.WithContext(context.Background())

	var updateField  []field.Expr
	for _,v:=range req.Fields {
	    col, ok := t.GetFieldByName(v)
        if ok {
          updateField = append(updateField,col)
        }
    }
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmProductAppRelation error : missing updateField")
		logger.Error(err)
		return nil,err
	}
	do = do.Select(updateField...)

    //主键条件
    HasPrimaryKey := false   
    if req.Data.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Data.Id))
        HasPrimaryKey = true
    }      
    if !HasPrimaryKey {
        logger.Error("UpdateFieldsOpmProductAppRelation error : Missing condition")
        return nil,errors.New("Missing condition")
    }
	dbObj := convert.OpmProductAppRelation_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmProductAppRelation error : %s", err.Error())
		return nil,err
	}
	return req.Data, nil
}

//根据非空条件查找OpmProductAppRelation
func (s *OpmProductAppRelationSvc) FindOpmProductAppRelation(req *proto.OpmProductAppRelationFilter) (*proto.OpmProductAppRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductAppRelation
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
    
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
    }
    if req.ProductId != 0 {//整数
        do = do.Where(t.ProductId.Eq(req.ProductId))
    }
    if req.ProductKey != "" {//字符串
        do = do.Where(t.ProductKey.Eq(req.ProductKey))
    }
    if req.AppKey != "" {//字符串
        do = do.Where(t.AppKey.Eq(req.AppKey))
    }
    if req.AppName != "" {//字符串
        do = do.Where(t.AppName.Eq(req.AppName))
    }
    if req.CreatedBy != 0 {//整数
        do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
    }
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmProductAppRelation error : %s", err.Error())
		return nil,err
	}
	res := convert.OpmProductAppRelation_db2pb(dbObj)
	return res, err
}

//根据数据库表主键查找OpmProductAppRelation
func (s *OpmProductAppRelationSvc) FindByIdOpmProductAppRelation(req *proto.OpmProductAppRelationFilter) (*proto.OpmProductAppRelation, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmProductAppRelation
	do := t.WithContext(context.Background())
    // fixme 请检查条件和校验参数
    
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
    }
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmProductAppRelation error : %s", err.Error())
		return nil,err
	}
	res := convert.OpmProductAppRelation_db2pb(dbObj)
	return res, err
}

//根据分页条件查找OpmProductAppRelation,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmProductAppRelationSvc) GetListOpmProductAppRelation(req *proto.OpmProductAppRelationListRequest) ([]*proto.OpmProductAppRelation, int64, error) {
    // fixme 请检查条件和校验参数
    var err error
	q := orm.Use(iotmodel.GetDB())
    t := q.TOpmProductAppRelation
	tPro := q.TOpmProduct
    do := t.WithContext(context.Background()).Join(tPro, tPro.Id.EqCol(t.ProductId))
    query := req.Query
    if query != nil {
        if query.Id != 0 {//整数
            do = do.Where(t.Id.Eq(query.Id))
        }
        if query.ProductId != 0 {//整数
            do = do.Where(t.ProductId.Eq(query.ProductId))
        }
        if query.ProductKey != "" {//字符串
            do = do.Where(t.ProductKey.Like("%" + query.ProductKey + "%"))
        }
        if query.AppKey != "" {//字符串
            do = do.Where(t.AppKey.Like("%" + query.AppKey + "%"))
        }
        if query.AppName != "" {//字符串
            do = do.Where(t.AppName.Like("%" + query.AppName + "%"))
        }
		if query.ProductIds != nil  {//整数
			if len(query.ProductIds) == 0 {
				return nil, 0, errors.New("如果传入了列表参数就不需要给值")
			}
			do = do.Where(t.ProductId.In(query.ProductIds...))
		}
		if query.AppKeys != nil {//整数
			if len(query.AppKeys) == 0 {
				return nil, 0, errors.New("如果传入了列表参数就不需要给值")
			}
			do = do.Where(t.AppKey.In(query.AppKeys...))
		}
    }
    orderCol, ok := t.GetFieldByName(req.OrderKey)
    if !ok { 
        orderCol = t.Id
    }
    if req.OrderDesc != "" {
        do = do.Order(orderCol.Desc())
    } else {
        do = do.Order(orderCol)
    }

	var list []struct{
		model.TOpmProductAppRelation
		ProductName string    `gorm:"column:product_name;not null" json:"productName"`
	}
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do.Select(t.ALL, tPro.Name.As("product_name")).ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Select(t.ALL, tPro.Name.As("product_name")).Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
	    logger.Errorf("GetListOpmProductAppRelation error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
	     return nil, total, nil
	}
	result := make([]*proto.OpmProductAppRelation,len(list))
    for i, v := range list {
        result[i] = convert.OpmProductAppRelation_db2pb(&v.TOpmProductAppRelation)
		result[i].ProductName = v.ProductName
    }
    return result, total, nil
}


