// Code generated by sgen.exe,2022-04-29 15:04:30. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_product_service/convert"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_product/model"
	"cloud_platform/iot_model/db_product/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmFirmwareSvc struct {
	Ctx context.Context
}

// 创建OpmFirmware
func (s *OpmFirmwareSvc) CreateOpmFirmware(req *proto.OpmFirmware) (*proto.OpmFirmware, error) {
	tenantId, err := CheckTenantId(s.Ctx)
	if err != nil {
		return nil, err
	}
	dbObj := convert.OpmFirmware_pb2db(req)
	//fixme 参数验证
	if dbObj.Name == "" {
		return nil, errors.New("固件名称不能为空")
	}
	if dbObj.Flag == "" {
		return nil, errors.New("固件标识不能为空")
	}
	if dbObj.Type == "" {
		return nil, errors.New("固件类型不能为空")
	}
	if dbObj.FlashSize == 0 {
		return nil, errors.New("Flash尺寸不能为空")
	}

	t := orm.Use(iotmodel.GetDB()).TOpmFirmware
	do := t.WithContext(context.Background())
	dbObj.FirmwareKey = iotutil.GetCustomFirmwareKeyRandomString()
	dbObj.TenantId = tenantId
	err = do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpmFirmware error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 创建PmFirmware (初始化固件需要创建固件版本）
func (s *OpmFirmwareSvc) CreateAndInitVersion(req *proto.OpmFirmware) (*proto.OpmFirmware, error) {
	var err error
	tenantId, err := CheckTenantId(s.Ctx)
	if err != nil {
		return nil, err
	}
	// fixme 请在这里校验参数
	q := orm.Use(iotmodel.GetDB())
	err = q.Transaction(func(tx *orm.Query) error {
		tFirmware := q.TOpmFirmware
		do := tFirmware.WithContext(context.Background())

		// 查询模组sdk名称是否存在
		count, err := do.Where(tFirmware.TenantId.Eq(tenantId), tFirmware.Name.Eq(req.Name)).Count()
		if err != nil {
			return err
		}
		if count > 0 {
			return errors.New("固件名称已存在")
		}

		dbObj := convert.OpmFirmware_pb2db(req)
		dbObj.Status = 2
		dbObj.TenantId = tenantId
		dbObj.FirmwareKey = iotutil.GetCustomFirmwareKeyRandomString()
		dbObj.FirmwareKey = iotconst.FIRMWARE_KEY + iotutil.GetSecret(10)
		err = do.Create(dbObj)
		if err != nil {
			return err
		}
		//保存初始固件版本信息
		if req.Version != "" {
			tFirmwareVersion := q.TOpmFirmwareVersion
			doVersion := tFirmwareVersion.WithContext(context.Background())
			versionObj := &model.TOpmFirmwareVersion{
				Id:              iotutil.GetNextSeqInt64(),
				FirmwareId:      dbObj.Id,
				Version:         req.Version,
				Desc:            req.VersionDesc,
				Status:          2,
				IsMust:          req.IsMust,
				TenantId:        tenantId,
				UpgradeMode:     req.UpgradeMode,
				UpgradeFileName: req.UpgradeFileName,
				UpgradeFilePath: req.UpgradeFilePath,
				UpgradeFileKey:  req.UpgradeFileKey,
				UpgradeFileSize: int32(req.UpgradeFileSize),
				ProdFileName:    req.ProdFileName,
				ProdFilePath:    req.ProdFilePath,
				ProdFileKey:     req.ProdFileKey,
				ProdFileSize:    int32(req.ProdFileSize),
				UpdatedBy:       req.UpdatedBy,
			}
			err = doVersion.Create(versionObj)
			if err != nil {
				return err
			}
		}
		return nil
	})
	if err != nil {
		logger.Errorf("CreatePmFirmware error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OpmFirmware
func (s *OpmFirmwareSvc) DeleteOpmFirmware(req *proto.OpmFirmware) (*proto.OpmFirmware, error) {
	q := orm.Use(iotmodel.GetDB())
	t := q.TOpmFirmware
	//tV := q.TOpmFirmwareVersion
	do := t.WithContext(context.Background())

	if isExists, err := s.checkIsOnShelf(req.Id); isExists || err != nil {
		if err != nil {
			return nil, err
		}
		return nil, errors.New("固件中存在已上架版本，无法删除")
	}

	//不存在已经上架版本
	//subVersion := q.TOpmFirmwareVersion.WithContext(context.Background()).Where(t.Id.EqCol(tV.FirmwareId), tV.Status.Neq(1))
	//do = do.Exists(subVersion)

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.Flag != "" { //字符串
		do = do.Where(t.Flag.Eq(req.Flag))
	}
	if req.Type != "" { //字符串
		do = do.Where(t.Type.Eq(req.Type))
	}
	if req.FlashSize != 0 { //整数
		do = do.Where(t.FlashSize.Eq(req.FlashSize))
	}
	if req.UpgradeChannel != 0 { //整数
		do = do.Where(t.UpgradeChannel.Eq(req.UpgradeChannel))
	}
	if req.UpgradeOvertime != 0 { //整数
		do = do.Where(t.UpgradeOvertime.Eq(req.UpgradeOvertime))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	info, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpmFirmware error : %s", err.Error())
		return nil, err
	}
	if info.RowsAffected == 0 {
		return nil, errors.New("未删除任何数据")
	}
	return req, err
}

// 根据数据库表主键删除OpmFirmware
func (s *OpmFirmwareSvc) DeleteByIdOpmFirmware(req *proto.OpmFirmware) (*proto.OpmFirmware, error) {
	if isExists, err := s.checkIsOnShelf(req.Id); isExists || err != nil {
		if err != nil {
			return nil, err
		}
		return nil, errors.New("固件中存在已上架版本，无法删除")
	}

	t := orm.Use(iotmodel.GetDB()).TOpmFirmware
	do := t.WithContext(context.Background()).Where(t.Id.Eq(req.Id))
	info, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpmFirmware error : %s", err.Error())
		return nil, err
	}
	if info.Error != nil {
		logger.Errorf("DeleteByIdOpmFirmware error : %s", info.Error.Error())
		return nil, err
	}
	if info.RowsAffected == 0 {
		return nil, errors.New("未删除任何数据")
	}
	return req, err
}

// 根据数据库表主键批量删除OpmFirmware
func (s *OpmFirmwareSvc) DeleteByIdsOpmFirmware(req *proto.OpmFirmwareBatchDeleteRequest) (*proto.OpmFirmwareBatchDeleteRequest, error) {
	if req.Keys == nil || len(req.Keys) == 0 {
		return nil, errors.New("要删除数据Id不能为空")
	}
	ids := []int64{}
	for _, key := range req.Keys {
		ids = append(ids, key.Id)
	}
	if isExists, err := s.checkIsOnShelf(ids...); isExists || err != nil {
		if err != nil {
			return nil, err
		}
		return nil, errors.New("固件中存在已上架版本，无法删除")
	}

	var err error

	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpmFirmware
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpmFirmware error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpmFirmware
func (s *OpmFirmwareSvc) UpdateOpmFirmware(req *proto.OpmFirmware) (*proto.OpmFirmware, error) {
	tenantId, err := CheckTenantId(s.Ctx)
	if err != nil {
		return nil, err
	}

	t := orm.Use(iotmodel.GetDB()).TOpmFirmware
	do := t.WithContext(context.Background())

	// 查询固件名称是否存在
	count, err := do.Where(t.Id.Neq(req.Id), t.TenantId.Eq(tenantId), t.Name.Eq(req.Name)).Count()
	if err != nil {
		logger.Errorf("CreatePmFirmware error : %s", err.Error())
		return nil, err
	}
	if count > 0 {
		return nil, errors.New("固件名称已存在")
	}

	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Name != "" { //字符串
		updateField = append(updateField, t.Name)
	}
	if req.Flag != "" { //字符串
		updateField = append(updateField, t.Flag)
	}
	if req.Type != "" { //字符串
		updateField = append(updateField, t.Type)
	}
	if req.FlashSize != 0 { //整数
		updateField = append(updateField, t.FlashSize)
	}
	if req.UpgradeChannel != 0 { //整数
		updateField = append(updateField, t.UpgradeChannel)
	}
	if req.UpgradeOvertime != 0 { //整数
		updateField = append(updateField, t.UpgradeOvertime)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.Remark != "" { //字符串
		updateField = append(updateField, t.Remark)
	}
	if req.Version != "" { //字符串
		updateField = append(updateField, t.Version)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpmFirmware error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpmFirmware_pb2db(req)
	_, err = do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpmFirmware error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpmFirmware
func (s *OpmFirmwareSvc) UpdateAllOpmFirmware(req *proto.OpmFirmware) (*proto.OpmFirmware, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmFirmware
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Name)
	updateField = append(updateField, t.Flag)
	updateField = append(updateField, t.Type)
	updateField = append(updateField, t.FlashSize)
	updateField = append(updateField, t.UpgradeChannel)
	updateField = append(updateField, t.UpgradeOvertime)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.Remark)
	updateField = append(updateField, t.Version)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpmFirmware error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmFirmware_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpmFirmware error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpmFirmwareSvc) UpdateFieldsOpmFirmware(req *proto.OpmFirmwareUpdateFieldsRequest) (*proto.OpmFirmware, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmFirmware
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpmFirmware error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpmFirmware error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpmFirmware_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpmFirmware error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpmFirmware
func (s *OpmFirmwareSvc) FindOpmFirmware(req *proto.OpmFirmwareFilter) (*proto.OpmFirmware, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmFirmware
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.Flag != "" { //字符串
		do = do.Where(t.Flag.Eq(req.Flag))
	}
	if req.Type != "" { //字符串
		do = do.Where(t.Type.Eq(req.Type))
	}
	if req.FlashSize != 0 { //整数
		do = do.Where(t.FlashSize.Eq(req.FlashSize))
	}
	if req.UpgradeChannel != 0 { //整数
		do = do.Where(t.UpgradeChannel.Eq(req.UpgradeChannel))
	}
	if req.UpgradeOvertime != 0 { //整数
		do = do.Where(t.UpgradeOvertime.Eq(req.UpgradeOvertime))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpmFirmware error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmFirmware_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpmFirmware
func (s *OpmFirmwareSvc) FindByIdOpmFirmware(req *proto.OpmFirmwareFilter) (*proto.OpmFirmware, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmFirmware
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpmFirmware error : %s", err.Error())
		return nil, err
	}
	res := convert.OpmFirmware_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OpmFirmware,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpmFirmwareSvc) GetListOpmFirmware(req *proto.OpmFirmwareListRequest) ([]*proto.OpmFirmware, int64, error) {
	tenantId, err := CheckTenantId(s.Ctx)
	if err != nil {
		return nil, 0, err
	}
	q := orm.Use(iotmodel.GetDB())
	t := q.TOpmFirmware
	do := t.WithContext(context.Background())

	tVersion := q.TOpmFirmwareVersion
	doVersion := tVersion.WithContext(context.Background())

	do = do.Where(t.TenantId.Eq(tenantId))
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Name != "" { //字符串
			do = do.Where(t.Name.Like("%" + query.Name + "%"))
		}
		if query.Flag != "" { //字符串
			do = do.Where(t.Flag.Eq(query.Flag))
		}
		if query.FirmwareKey != "" { //字符串
			do = do.Where(t.FirmwareKey.Eq(query.FirmwareKey))
		}
		if query.Type != "" { //字符串
			do = do.Where(t.Type.Eq(query.Type))
		}
		if query.FlashSize != 0 { //整数
			do = do.Where(t.FlashSize.Eq(query.FlashSize))
		}
		if query.UpgradeChannel != 0 { //整数
			do = do.Where(t.UpgradeChannel.Eq(query.UpgradeChannel))
		}
		if query.UpgradeOvertime != 0 { //整数
			do = do.Where(t.UpgradeOvertime.Eq(query.UpgradeOvertime))
		}
		if query.Status >= 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
		if query.Version != "" { //字符串
			do = do.Where(t.Version.Like("%" + query.Version + "%"))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.CreatedAt.Desc())
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}
	do = do.LeftJoin(doVersion.Select(tVersion.FirmwareId, tVersion.Version.Max().As("version")).
		Group(tVersion.FirmwareId).As("t_opm_firmware_version"), tVersion.FirmwareId.EqCol(t.Id))
	do = do.Select(t.ALL, tVersion.FirmwareId, tVersion.Version.As("lastVersion"))

	var list = []struct {
		model.TOpmFirmware
		LastVersion string `gorm:"column:lastVersion" json:"lastVersion"`
	}{}
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do.ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpmFirmware error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpmFirmware, len(list))
	for i, v := range list {
		result[i] = convert.OpmFirmware_db2pb(&v.TOpmFirmware)
		result[i].Version = v.LastVersion
	}
	return result, total, nil
}

// 删除检查是否存在已上架的数据
func (s OpmFirmwareSvc) checkIsOnShelf(ids ...int64) (bool, error) {
	t := orm.Use(iotmodel.GetDB()).TOpmFirmwareVersion
	do := t.WithContext(context.Background())

	if ids == nil || len(ids) == 0 {
		return false, errors.New("id参数不能为空")
	}
	do = do.Where(t.FirmwareId.In(ids...), t.Status.Eq(1))
	count, err := do.Count()
	if err != nil {
		return true, err
	}

	return count > 0, err
}
