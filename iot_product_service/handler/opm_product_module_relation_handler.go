// Code generated by sgen.exe,2022-05-06 14:01:21. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_product_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmProductModuleRelationHandler struct{}

func (h *OpmProductModuleRelationHandler) QueryProductFirmwareList(ctx context.Context, req *proto.ProductFirmwareFilter, resp *proto.ProductFirmwareResponse) error {
	s := service.OpmProductModuleRelationSvc{Ctx: ctx}
	list, err := s.QueryProductFirmwareList(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Data = list
	}
	return nil
}

func (h *OpmProductModuleRelationHandler) QueryProductFirmwareVersionList(ctx context.Context, req *proto.ProductFirmwareVersionFilter, resp *proto.ProductFirmwareResponse) error {
	s := service.OpmProductModuleRelationSvc{Ctx: ctx}
	list, err := s.QueryProductFirmwareVersionList(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Data = list
	}
	return nil
}

// 创建
func (h *OpmProductModuleRelationHandler) Create(ctx context.Context, req *proto.OpmProductModuleRelation, resp *proto.Response) error {
	s := service.OpmProductModuleRelationSvc{Ctx: ctx}
	_, err := s.CreateOpmProductModuleRelation(req)
	SetResponse(resp, err)
	return nil
}

// 选择模组芯片
func (h *OpmProductModuleRelationHandler) BatchCreate(ctx context.Context, req *proto.OpmProductModuleRelationList, resp *proto.Response) error {
	s := service.OpmProductModuleRelationSvc{Ctx: ctx}
	_, err := s.BatchCreateOpmProductModuleRelation(req)
	SetResponse(resp, err)
	return nil
}

// 切换版本
func (h *OpmProductModuleRelationHandler) ChangeOpmProductModuleRelation(ctx context.Context, req *proto.OpmProductModuleRelationChangeVersion, resp *proto.Response) error {
	s := service.OpmProductModuleRelationSvc{Ctx: ctx}
	_, err := s.ChangeOpmProductModuleRelation(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *OpmProductModuleRelationHandler) Delete(ctx context.Context, req *proto.OpmProductModuleRelation, resp *proto.Response) error {
	s := service.OpmProductModuleRelationSvc{Ctx: ctx}
	_, err := s.DeleteOpmProductModuleRelation(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *OpmProductModuleRelationHandler) DeleteById(ctx context.Context, req *proto.OpmProductModuleRelation, resp *proto.Response) error {
	s := service.OpmProductModuleRelationSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpmProductModuleRelation(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *OpmProductModuleRelationHandler) DeleteByIds(ctx context.Context, req *proto.OpmProductModuleRelationBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpmProductModuleRelationSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpmProductModuleRelation(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *OpmProductModuleRelationHandler) Update(ctx context.Context, req *proto.OpmProductModuleRelation, resp *proto.Response) error {
	s := service.OpmProductModuleRelationSvc{Ctx: ctx}
	_, err := s.UpdateOpmProductModuleRelation(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *OpmProductModuleRelationHandler) UpdateAll(ctx context.Context, req *proto.OpmProductModuleRelation, resp *proto.Response) error {
	s := service.OpmProductModuleRelationSvc{Ctx: ctx}
	_, err := s.UpdateAllOpmProductModuleRelation(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *OpmProductModuleRelationHandler) UpdateFields(ctx context.Context, req *proto.OpmProductModuleRelationUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpmProductModuleRelationSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpmProductModuleRelation(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *OpmProductModuleRelationHandler) Find(ctx context.Context, req *proto.OpmProductModuleRelationFilter, resp *proto.OpmProductModuleRelationResponse) error {
	s := service.OpmProductModuleRelationSvc{Ctx: ctx}
	data, err := s.FindOpmProductModuleRelation(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OpmProductModuleRelationHandler) FindById(ctx context.Context, req *proto.OpmProductModuleRelationFilter, resp *proto.OpmProductModuleRelationResponse) error {
	s := service.OpmProductModuleRelationSvc{Ctx: ctx}
	data, err := s.FindByIdOpmProductModuleRelation(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OpmProductModuleRelationHandler) Lists(ctx context.Context, req *proto.OpmProductModuleRelationListRequest, resp *proto.OpmProductModuleRelationResponse) error {
	s := service.OpmProductModuleRelationSvc{Ctx: ctx}
	data, total, err := s.GetListOpmProductModuleRelation(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *OpmProductModuleRelationHandler) SetResponse(resp *proto.OpmProductModuleRelationResponse, data *proto.OpmProductModuleRelation, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *OpmProductModuleRelationHandler) SetPageResponse(resp *proto.OpmProductModuleRelationResponse, list []*proto.OpmProductModuleRelation, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
