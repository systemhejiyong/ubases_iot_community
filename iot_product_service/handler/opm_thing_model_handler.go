// Code generated by sgen.exe,2022-05-06 14:01:21. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_product_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmThingModelHandler struct{}

// 删除产品物模型
func (h *OpmThingModelHandler) DeleteThingModel(ctx context.Context, req *proto.OpmThingModelDeleteRequest, resp *proto.Response) error {
	s := service.OpmThingModelSvc{Ctx: ctx}
	err := s.DeleteOpmThingModelItem(req)
	SetResponse(resp, err)
	return nil
}

// 获取标准物模型
func (h *OpmThingModelHandler) StandardThingModel(ctx context.Context, req *proto.OpmThingModelByProductRequest, resp *proto.OpmThingModelByProductResponse) error {
	s := service.OpmThingModelSvc{Ctx: ctx}
	data, err := s.GetStandardThingModelByProduct(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Data = data
	}
	return nil
}

// 获取产品的物模型列表
func (h *OpmThingModelHandler) ProductThingModel(ctx context.Context, req *proto.OpmThingModelByProductRequest, resp *proto.OpmThingModelByProductResponse) error {
	s := service.OpmThingModelSvc{Ctx: ctx}
	data, err := s.GetOpmThingModelByProduct(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Data = data
	}
	return nil
}

// 创建
func (h *OpmThingModelHandler) Create(ctx context.Context, req *proto.OpmThingModel, resp *proto.Response) error {
	s := service.OpmThingModelSvc{Ctx: ctx}
	_, err := s.CreateOpmThingModel(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *OpmThingModelHandler) Delete(ctx context.Context, req *proto.OpmThingModel, resp *proto.Response) error {
	s := service.OpmThingModelSvc{Ctx: ctx}
	_, err := s.DeleteOpmThingModel(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *OpmThingModelHandler) DeleteById(ctx context.Context, req *proto.OpmThingModel, resp *proto.Response) error {
	s := service.OpmThingModelSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpmThingModel(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *OpmThingModelHandler) DeleteByIds(ctx context.Context, req *proto.OpmThingModelBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpmThingModelSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpmThingModel(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *OpmThingModelHandler) Update(ctx context.Context, req *proto.OpmThingModel, resp *proto.Response) error {
	s := service.OpmThingModelSvc{Ctx: ctx}
	_, err := s.UpdateOpmThingModel(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *OpmThingModelHandler) UpdateAll(ctx context.Context, req *proto.OpmThingModel, resp *proto.Response) error {
	s := service.OpmThingModelSvc{Ctx: ctx}
	_, err := s.UpdateAllOpmThingModel(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *OpmThingModelHandler) UpdateFields(ctx context.Context, req *proto.OpmThingModelUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpmThingModelSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpmThingModel(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *OpmThingModelHandler) Find(ctx context.Context, req *proto.OpmThingModelFilter, resp *proto.OpmThingModelResponse) error {
	s := service.OpmThingModelSvc{Ctx: ctx}
	data, err := s.FindOpmThingModel(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OpmThingModelHandler) FindById(ctx context.Context, req *proto.OpmThingModelFilter, resp *proto.OpmThingModelResponse) error {
	s := service.OpmThingModelSvc{Ctx: ctx}
	data, err := s.FindByIdOpmThingModel(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OpmThingModelHandler) Lists(ctx context.Context, req *proto.OpmThingModelListRequest, resp *proto.OpmThingModelResponse) error {
	s := service.OpmThingModelSvc{Ctx: ctx}
	data, total, err := s.GetListOpmThingModel(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *OpmThingModelHandler) SetResponse(resp *proto.OpmThingModelResponse, data *proto.OpmThingModel, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *OpmThingModelHandler) SetPageResponse(resp *proto.OpmThingModelResponse, list []*proto.OpmThingModel, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}

// 设置场景功能
func (h *OpmThingModelHandler) SetThingsModelSceneFunc(ctx context.Context, req *proto.OpmThingModel, resp *proto.Response) error {
	s := service.OpmThingModelSvc{Ctx: ctx}
	_, err := s.SetThingsModelSceneFunc(req)
	SetResponse(resp, err)
	return nil
}

// 设置预约规则
func (h *OpmThingModelHandler) SetAppointmentFunc(ctx context.Context, req *proto.OpmThingModel, resp *proto.Response) error {
	s := service.OpmThingModelSvc{Ctx: ctx}
	_, err := s.SetAppointmentFunc(req)
	SetResponse(resp, err)
	return nil
}

// 设置功能层级
func (h *OpmThingModelHandler) SetFuncLevel(ctx context.Context, req *proto.OpmThingModel, resp *proto.Response) error {
	s := service.OpmThingModelSvc{Ctx: ctx}
	_, err := s.SetFuncLevel(req)
	SetResponse(resp, err)
	return nil
}

// 设置功能层级
func (h *OpmThingModelHandler) SetFuncSort(ctx context.Context, req *proto.OpmThingModel, resp *proto.Response) error {
	s := service.OpmThingModelSvc{Ctx: ctx}
	_, err := s.SetFuncSort(req)
	SetResponse(resp, err)
	return nil
}
