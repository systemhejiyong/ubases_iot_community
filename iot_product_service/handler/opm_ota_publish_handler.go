// Code generated by sgen.exe,2022-05-13 13:53:26. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotlogger"
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_common/iotutil"
	"context"

	"go-micro.dev/v4/logger"

	"cloud_platform/iot_product_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmOtaPublishHandler struct{}

func (h *OpmOtaPublishHandler) CheckOtaVersion(ctx context.Context, request *proto.CheckOtaVersionRequest, response *proto.CheckOtaVersionResponse) error {
	s := service.OpmOtaPublishSvc{Ctx: ctx}
	var (
		res *proto.CheckOtaVersionResponse
		err error
	)
	newDeviceStatus, redisErr := iotredis.GetClient().HGetAll(context.Background(), iotconst.HKEY_DEV_DATA_PREFIX+request.DeviceId).Result()
	if redisErr != nil {
		logger.Errorf("CheckOtaVersion redis, deviceId: %s, error : %s", request.DeviceId, redisErr.Error())
		response.Code = ERROR
		response.Message = err.Error()
		return nil
	}
	if request.FirmwareTypes == nil || len(request.FirmwareTypes) == 0 {
		//先检测模组固件
		request.FirmwareTypes = []int32{
			iotconst.FIRMWARE_TYPE_MODULE,
			iotconst.FIRMWARE_TYPE_BLE,
			iotconst.FIRMWARE_TYPE_ZIGBEE,
			iotconst.FIRMWARE_TYPE_EXTAND}
		res, err = s.CheckOtaVersion(request)
		if res.Code == 101 {
			//获取设备的MCU版本
			var mcuVer = ""
			//优先redis缓存中fwVer版本号
			if newDeviceStatus != nil {
				if val, ok := newDeviceStatus["mcuVer"]; ok && val != "" {
					mcuVer = iotutil.ToString(val)
				}
			}
			if mcuVer != "" {
				iotlogger.LogHelper.Infof("CheckOtaVersion mcu ota check")
				request.Version = mcuVer
				request.FirmwareTypes = []int32{iotconst.FIRMWARE_TYPE_MCU}
				//指定类型升级
				res, err = s.CheckOtaVersion(request)
			}
		}
	} else {
		res, err = s.CheckOtaVersion(request)
	}
	if err != nil {
		response.Code = ERROR
		response.Message = err.Error()
	} else {
		response.Code = res.Code
		response.Message = "success"
		response.OtaPkg = res.OtaPkg
		if response.OtaPkg != nil {
			if val, ok := newDeviceStatus[iotconst.FIELD_UPGRADE_STATE]; ok && val != "" {
				response.OtaPkg.OtaState = iotutil.ToString(val)
			}
			if val, ok := newDeviceStatus[iotconst.FIELD_UPGRADE_PROGRESS]; ok && val != "" {
				response.OtaPkg.Progress, _ = iotutil.ToInt32Err(val)
			}
		}
		response.UpgradePublish = res.UpgradePublish
		response.Batch = res.Batch
	}
	return nil
}

// 创建
func (h *OpmOtaPublishHandler) Create(ctx context.Context, req *proto.OpmOtaPublish, resp *proto.Response) error {
	s := service.OpmOtaPublishSvc{Ctx: ctx}
	_, err := s.CreateOpmOtaPublish(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *OpmOtaPublishHandler) Delete(ctx context.Context, req *proto.OpmOtaPublish, resp *proto.Response) error {
	s := service.OpmOtaPublishSvc{Ctx: ctx}
	_, err := s.DeleteOpmOtaPublish(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *OpmOtaPublishHandler) DeleteById(ctx context.Context, req *proto.OpmOtaPublish, resp *proto.Response) error {
	s := service.OpmOtaPublishSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpmOtaPublish(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *OpmOtaPublishHandler) DeleteByIds(ctx context.Context, req *proto.OpmOtaPublishBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpmOtaPublishSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpmOtaPublish(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *OpmOtaPublishHandler) Update(ctx context.Context, req *proto.OpmOtaPublish, resp *proto.Response) error {
	s := service.OpmOtaPublishSvc{Ctx: ctx}
	_, err := s.UpdateOpmOtaPublish(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *OpmOtaPublishHandler) UpdateAll(ctx context.Context, req *proto.OpmOtaPublish, resp *proto.Response) error {
	s := service.OpmOtaPublishSvc{Ctx: ctx}
	_, err := s.UpdateAllOpmOtaPublish(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *OpmOtaPublishHandler) UpdateFields(ctx context.Context, req *proto.OpmOtaPublishUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpmOtaPublishSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpmOtaPublish(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *OpmOtaPublishHandler) Find(ctx context.Context, req *proto.OpmOtaPublishFilter, resp *proto.OpmOtaPublishResponse) error {
	s := service.OpmOtaPublishSvc{Ctx: ctx}
	data, err := s.FindOpmOtaPublish(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OpmOtaPublishHandler) FindById(ctx context.Context, req *proto.OpmOtaPublishFilter, resp *proto.OpmOtaPublishResponse) error {
	s := service.OpmOtaPublishSvc{Ctx: ctx}
	data, err := s.FindByIdOpmOtaPublish(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OpmOtaPublishHandler) Lists(ctx context.Context, req *proto.OpmOtaPublishListRequest, resp *proto.OpmOtaPublishResponse) error {
	s := service.OpmOtaPublishSvc{Ctx: ctx}
	data, total, err := s.GetListOpmOtaPublish(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *OpmOtaPublishHandler) SetResponse(resp *proto.OpmOtaPublishResponse, data *proto.OpmOtaPublish, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *OpmOtaPublishHandler) SetPageResponse(resp *proto.OpmOtaPublishResponse, list []*proto.OpmOtaPublish, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
