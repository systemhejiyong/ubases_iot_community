// Code generated by sgen.exe,2022-12-01 10:53:01. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_common/ioterrs"
	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_product_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
	goerrors "go-micro.dev/v4/errors"
)

type OpmProductMaterialTypeHandler struct{}

// 创建
func (h *OpmProductMaterialTypeHandler) Create(ctx context.Context, req *proto.OpmProductMaterialType, resp *proto.Response) error {
	s := service.OpmProductMaterialTypeSvc{Ctx: ctx}
	_, err := s.CreateOpmProductMaterialType(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeCreate)
	}
	// 同步写入耗材类型多语言数据
	sl := service.OpmProductMaterialTypeLanguageSvc{Ctx: ctx}
	reqLang := &proto.OpmProductMaterialTypeLanguage{
		Id:             iotutil.GetNextSeqInt64(),
		MaterialTypeId: req.Id,
		Lang:           req.Lang,
		Type:           req.Type,
	}
	_, err = sl.CreateOpmProductMaterialTypeLanguage(reqLang)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeLanguageCreate)
	}
	return nil
}

// 匹配多条件删除
func (h *OpmProductMaterialTypeHandler) Delete(ctx context.Context, req *proto.OpmProductMaterialType, resp *proto.Response) error {
	s := service.OpmProductMaterialTypeSvc{Ctx: ctx}
	_, err := s.DeleteOpmProductMaterialType(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeDelete)
	}
	return nil
}

// 匹配ID删除
func (h *OpmProductMaterialTypeHandler) DeleteById(ctx context.Context, req *proto.OpmProductMaterialType, resp *proto.Response) error {
	s := service.OpmProductMaterialTypeSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpmProductMaterialType(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeDelete)
	}
	// 同步写入耗材类型多语言数据
	sl := service.OpmProductMaterialTypeLanguageSvc{Ctx: ctx}
	reqLang := &proto.OpmProductMaterialTypeLanguage{
		MaterialTypeId: req.Id,
	}
	_, err = sl.DeleteOpmProductMaterialTypeLanguage(reqLang)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeLanguageDelete)
	}
	return nil
}

// 根据主键批量删除
func (h *OpmProductMaterialTypeHandler) DeleteByIds(ctx context.Context, req *proto.OpmProductMaterialTypeBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpmProductMaterialTypeSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpmProductMaterialType(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeDelete)
	}
	return nil
}

// 更新
func (h *OpmProductMaterialTypeHandler) Update(ctx context.Context, req *proto.OpmProductMaterialType, resp *proto.Response) error {
	s := service.OpmProductMaterialTypeSvc{Ctx: ctx}
	_, err := s.UpdateOpmProductMaterialType(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeUpdate)
	}
	// 同步写入耗材类型多语言数据
	sl := service.OpmProductMaterialTypeLanguageSvc{Ctx: ctx}
	reqLang := &proto.OpmProductMaterialTypeLanguage{
		Id:             req.MaterialTypeLangId,
		MaterialTypeId: req.Id,
		Lang:           req.Lang,
		Type:           req.Type,
	}
	_, err = sl.UpdateOpmProductMaterialTypeLanguage(reqLang)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeLanguageUpdate)
	}
	return nil
}

// 根据主键更新所有字段
func (h *OpmProductMaterialTypeHandler) UpdateAll(ctx context.Context, req *proto.OpmProductMaterialType, resp *proto.Response) error {
	s := service.OpmProductMaterialTypeSvc{Ctx: ctx}
	_, err := s.UpdateAllOpmProductMaterialType(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeUpdate)
	}
	return nil
}

// 根据主键更新指定列
func (h *OpmProductMaterialTypeHandler) UpdateFields(ctx context.Context, req *proto.OpmProductMaterialTypeUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpmProductMaterialTypeSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpmProductMaterialType(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeUpdate)
	}
	return nil
}

// 多条件查找，返回单条数据
func (h *OpmProductMaterialTypeHandler) Find(ctx context.Context, req *proto.OpmProductMaterialTypeFilter, resp *proto.OpmProductMaterialTypeResponse) error {
	s := service.OpmProductMaterialTypeSvc{Ctx: ctx}
	data, err := s.FindOpmProductMaterialType(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OpmProductMaterialTypeHandler) FindById(ctx context.Context, req *proto.OpmProductMaterialTypeFilter, resp *proto.OpmProductMaterialTypeResponse) error {
	s := service.OpmProductMaterialTypeSvc{Ctx: ctx}
	data, err := s.FindByIdOpmProductMaterialType(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OpmProductMaterialTypeHandler) Lists(ctx context.Context, req *proto.OpmProductMaterialTypeListRequest, resp *proto.OpmProductMaterialTypeResponse) error {
	s := service.OpmProductMaterialTypeSvc{Ctx: ctx}
	data, total, err := s.GetListOpmProductMaterialType(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeList)
	}
	h.SetPageResponse(resp, data, total)
	return nil
}

func (h *OpmProductMaterialTypeHandler) SetResponse(resp *proto.OpmProductMaterialTypeResponse, data *proto.OpmProductMaterialType) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	if data != nil {
		resp.Total = 1
		resp.Data = append(resp.Data, data)
	}
}

func (h *OpmProductMaterialTypeHandler) SetPageResponse(resp *proto.OpmProductMaterialTypeResponse, list []*proto.OpmProductMaterialType, total int64) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	resp.Total = total
	resp.Data = list
}
