// Code generated by sgen,2023-09-20 13:58:28. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_product_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmPanelFontAssetHandler struct{}

//创建
func (h *OpmPanelFontAssetHandler) Create(ctx context.Context, req *proto.OpmPanelFontAsset, resp *proto.Response) error {
	s := service.OpmPanelFontAssetSvc{Ctx: ctx}
	rsp, err := s.CreateOpmPanelFontAsset(req)
	SetResponse(resp, err)
	if rsp != nil {
		resp.Data = rsp.Id
	}
	return nil
}

//匹配多条件删除
func (h *OpmPanelFontAssetHandler) Delete(ctx context.Context, req *proto.OpmPanelFontAsset, resp *proto.Response) error {
	s := service.OpmPanelFontAssetSvc{Ctx: ctx}
	_, err := s.DeleteOpmPanelFontAsset(req)
	SetResponse(resp, err)
	return nil
}

//匹配ID删除
func (h *OpmPanelFontAssetHandler) DeleteById(ctx context.Context, req *proto.OpmPanelFontAsset, resp *proto.Response) error {
	s := service.OpmPanelFontAssetSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpmPanelFontAsset(req)
	SetResponse(resp, err)
	return nil
}

//根据主键批量删除
func (h *OpmPanelFontAssetHandler) DeleteByIds(ctx context.Context, req *proto.OpmPanelFontAssetBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpmPanelFontAssetSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpmPanelFontAsset(req)
	SetResponse(resp, err)
	return nil
}

//更新
func (h *OpmPanelFontAssetHandler) Update(ctx context.Context, req *proto.OpmPanelFontAsset, resp *proto.Response) error {
	s := service.OpmPanelFontAssetSvc{Ctx: ctx}
	_, err := s.UpdateOpmPanelFontAsset(req)
	SetResponse(resp, err)
	return nil
}

//根据主键更新所有字段
func (h *OpmPanelFontAssetHandler) UpdateAll(ctx context.Context, req *proto.OpmPanelFontAsset, resp *proto.Response) error {
	s := service.OpmPanelFontAssetSvc{Ctx: ctx}
	_, err := s.UpdateAllOpmPanelFontAsset(req)
	SetResponse(resp, err)
	return nil
}

//根据主键更新指定列
func (h *OpmPanelFontAssetHandler) UpdateFields(ctx context.Context, req *proto.OpmPanelFontAssetUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpmPanelFontAssetSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpmPanelFontAsset(req)
	SetResponse(resp, err)
	return nil
}

//多条件查找，返回单条数据
func (h *OpmPanelFontAssetHandler) Find(ctx context.Context, req *proto.OpmPanelFontAssetFilter, resp *proto.OpmPanelFontAssetResponse) error {
	s := service.OpmPanelFontAssetSvc{Ctx: ctx}
	data, err := s.FindOpmPanelFontAsset(req)
	h.SetResponse(resp, data, err)
	return nil
}

//根据ID查找，返回单条数据
func (h *OpmPanelFontAssetHandler) FindById(ctx context.Context, req *proto.OpmPanelFontAssetFilter, resp *proto.OpmPanelFontAssetResponse) error {
	s := service.OpmPanelFontAssetSvc{Ctx: ctx}
	data, err := s.FindByIdOpmPanelFontAsset(req)
	h.SetResponse(resp, data, err)
	return nil
}

//查找，支持分页，可返回多条数据
func (h *OpmPanelFontAssetHandler) Lists(ctx context.Context, req *proto.OpmPanelFontAssetListRequest, resp *proto.OpmPanelFontAssetResponse) error {
	s := service.OpmPanelFontAssetSvc{Ctx: ctx}
	data, total, err := s.GetListOpmPanelFontAsset(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *OpmPanelFontAssetHandler) SetResponse(resp *proto.OpmPanelFontAssetResponse, data *proto.OpmPanelFontAsset, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *OpmPanelFontAssetHandler) SetPageResponse(resp *proto.OpmPanelFontAssetResponse, list []*proto.OpmPanelFontAsset, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
