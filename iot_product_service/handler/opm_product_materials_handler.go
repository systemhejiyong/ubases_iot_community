// Code generated by sgen.exe,2022-11-11 10:46:48. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_common/ioterrs"
	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_product_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"

	goerrors "go-micro.dev/v4/errors"
)

type OpmProductMaterialsHandler struct{}

// 创建
func (h *OpmProductMaterialsHandler) Create(ctx context.Context, req *proto.OpmProductMaterials, resp *proto.Response) error {
	s := service.OpmProductMaterialsSvc{Ctx: ctx}
	_, err := s.CreateOpmProductMaterials(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialCreate)
	}
	// 同步写入耗材多语言数据
	sl := service.OpmProductMaterialLanguageSvc{Ctx: ctx}
	reqLang := &proto.OpmProductMaterialLanguage{
		Id:             iotutil.GetNextSeqInt64(),
		MaterialId:     req.Id,
		Lang:           req.Lang,
		Name:           req.Name,
		BrandName:      req.BrandName,
		FragranceName:  req.FragranceName,
		ProductAddress: req.ProductAddress,
		Variety:        req.Variety,
		Ingredient:     req.Ingredient,
		Effect:         req.Effect,
		Description:    req.Description,
	}
	_, err = sl.CreateOpmProductMaterialLanguage(reqLang)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialLanguageCreate)
	}
	return nil
}

// 匹配多条件删除
func (h *OpmProductMaterialsHandler) Delete(ctx context.Context, req *proto.OpmProductMaterials, resp *proto.Response) error {
	s := service.OpmProductMaterialsSvc{Ctx: ctx}
	_, err := s.DeleteOpmProductMaterials(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialDelete)
	}
	return nil
}

// 匹配ID删除
func (h *OpmProductMaterialsHandler) DeleteById(ctx context.Context, req *proto.OpmProductMaterials, resp *proto.Response) error {
	s := service.OpmProductMaterialsSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpmProductMaterials(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialDelete)
	}
	// 同步写入耗材多语言数据
	sl := service.OpmProductMaterialLanguageSvc{Ctx: ctx}
	reqLang := &proto.OpmProductMaterialLanguage{
		MaterialId: req.Id,
	}
	_, err = sl.DeleteOpmProductMaterialLanguage(reqLang)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialLanguageDelete)
	}
	return nil
}

// 根据主键批量删除
func (h *OpmProductMaterialsHandler) DeleteByIds(ctx context.Context, req *proto.OpmProductMaterialsBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpmProductMaterialsSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpmProductMaterials(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialDelete)
	}
	return nil
}

// 更新
func (h *OpmProductMaterialsHandler) Update(ctx context.Context, req *proto.OpmProductMaterials, resp *proto.Response) error {
	s := service.OpmProductMaterialsSvc{Ctx: ctx}
	_, err := s.UpdateOpmProductMaterials(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialUpdate)
	}
	// 同步写入耗材多语言数据
	sl := service.OpmProductMaterialLanguageSvc{Ctx: ctx}
	reqLang := &proto.OpmProductMaterialLanguage{
		Id:             req.MaterialLangId,
		MaterialId:     req.Id,
		Lang:           req.Lang,
		Name:           req.Name,
		BrandName:      req.BrandName,
		FragranceName:  req.FragranceName,
		ProductAddress: req.ProductAddress,
		Variety:        req.Variety,
		Ingredient:     req.Ingredient,
		Effect:         req.Effect,
		Description:    req.Description,
	}
	_, err = sl.UpdateOpmProductMaterialLanguage(reqLang)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialLanguageUpdate)
	}
	return nil
}

// 根据主键更新所有字段
func (h *OpmProductMaterialsHandler) UpdateAll(ctx context.Context, req *proto.OpmProductMaterials, resp *proto.Response) error {
	s := service.OpmProductMaterialsSvc{Ctx: ctx}
	_, err := s.UpdateAllOpmProductMaterials(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialUpdate)
	}
	return nil
}

// 根据主键更新指定列
func (h *OpmProductMaterialsHandler) UpdateFields(ctx context.Context, req *proto.OpmProductMaterialsUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpmProductMaterialsSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpmProductMaterials(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialUpdate)
	}
	return nil
}

// 多条件查找，返回单条数据
func (h *OpmProductMaterialsHandler) Find(ctx context.Context, req *proto.OpmProductMaterialsFilter, resp *proto.OpmProductMaterialsResponse) error {
	s := service.OpmProductMaterialsSvc{Ctx: ctx}
	data, err := s.FindOpmProductMaterials(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OpmProductMaterialsHandler) FindById(ctx context.Context, req *proto.OpmProductMaterialsFilter, resp *proto.OpmProductMaterialsResponse) error {
	s := service.OpmProductMaterialsSvc{Ctx: ctx}
	data, err := s.FindByIdOpmProductMaterials(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OpmProductMaterialsHandler) Lists(ctx context.Context, req *proto.OpmProductMaterialsListRequest, resp *proto.OpmProductMaterialsResponse) error {
	s := service.OpmProductMaterialsSvc{Ctx: ctx}
	data, total, err := s.GetListOpmProductMaterials(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialList)
	}
	h.SetPageResponse(resp, data, total)
	return nil
}

func (h *OpmProductMaterialsHandler) SetResponse(resp *proto.OpmProductMaterialsResponse, data *proto.OpmProductMaterials) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	if data != nil {
		resp.Total = 1
		resp.Data = append(resp.Data, data)
	}
}

func (h *OpmProductMaterialsHandler) SetPageResponse(resp *proto.OpmProductMaterialsResponse, list []*proto.OpmProductMaterials, total int64) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	resp.Total = total
	resp.Data = list
}

// 更新点击量
func (h *OpmProductMaterialsHandler) Click(ctx context.Context, req *proto.OpmProductMaterials, resp *proto.Response) error {
	s := service.OpmProductMaterialsSvc{Ctx: ctx}
	_, err := s.ClickOpmProductMaterials(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialUpdate)
	}
	return nil
}
