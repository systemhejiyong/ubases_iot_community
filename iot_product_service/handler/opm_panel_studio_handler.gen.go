// Code generated by sgen,2023-06-02 13:48:11. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_product_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmPanelStudioHandler struct{}

//创建
func (h *OpmPanelStudioHandler) Create(ctx context.Context, req *proto.OpmPanelStudio, resp *proto.Response) error {
	s := service.OpmPanelStudioSvc{Ctx: ctx}
	_, err := s.CreateOpmPanelStudio(req)
	SetResponse(resp, err)
	return nil
}

//匹配多条件删除
func (h *OpmPanelStudioHandler) Delete(ctx context.Context, req *proto.OpmPanelStudio, resp *proto.Response) error {
	s := service.OpmPanelStudioSvc{Ctx: ctx}
	_, err := s.DeleteOpmPanelStudio(req)
	SetResponse(resp, err)
	return nil
}

//匹配ID删除
func (h *OpmPanelStudioHandler) DeleteById(ctx context.Context, req *proto.OpmPanelStudio, resp *proto.Response) error {
	s := service.OpmPanelStudioSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpmPanelStudio(req)
	SetResponse(resp, err)
	return nil
}

//根据主键批量删除
func (h *OpmPanelStudioHandler) DeleteByIds(ctx context.Context, req *proto.OpmPanelStudioBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpmPanelStudioSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpmPanelStudio(req)
	SetResponse(resp, err)
	return nil
}

//更新
func (h *OpmPanelStudioHandler) Update(ctx context.Context, req *proto.OpmPanelStudio, resp *proto.Response) error {
	s := service.OpmPanelStudioSvc{Ctx: ctx}
	_, err := s.UpdateOpmPanelStudio(req)
	SetResponse(resp, err)
	return nil
}

//根据主键更新所有字段
func (h *OpmPanelStudioHandler) UpdateAll(ctx context.Context, req *proto.OpmPanelStudio, resp *proto.Response) error {
	s := service.OpmPanelStudioSvc{Ctx: ctx}
	_, err := s.UpdateAllOpmPanelStudio(req)
	SetResponse(resp, err)
	return nil
}

//根据主键更新指定列
func (h *OpmPanelStudioHandler) UpdateFields(ctx context.Context, req *proto.OpmPanelStudioUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpmPanelStudioSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpmPanelStudio(req)
	SetResponse(resp, err)
	return nil
}

//多条件查找，返回单条数据
func (h *OpmPanelStudioHandler) Find(ctx context.Context, req *proto.OpmPanelStudioFilter, resp *proto.OpmPanelStudioResponse) error {
	s := service.OpmPanelStudioSvc{Ctx: ctx}
	data, err := s.FindOpmPanelStudio(req)
	h.SetResponse(resp, data, err)
	return nil
}

//根据ID查找，返回单条数据
func (h *OpmPanelStudioHandler) FindById(ctx context.Context, req *proto.OpmPanelStudioFilter, resp *proto.OpmPanelStudioResponse) error {
	s := service.OpmPanelStudioSvc{Ctx: ctx}
	data, err := s.FindByIdOpmPanelStudio(req)
	h.SetResponse(resp, data, err)
	return nil
}

//查找，支持分页，可返回多条数据
func (h *OpmPanelStudioHandler) Lists(ctx context.Context, req *proto.OpmPanelStudioListRequest, resp *proto.OpmPanelStudioResponse) error {
	s := service.OpmPanelStudioSvc{Ctx: ctx}
	data, total, err := s.GetListOpmPanelStudio(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *OpmPanelStudioHandler) SetResponse(resp *proto.OpmPanelStudioResponse, data *proto.OpmPanelStudio, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *OpmPanelStudioHandler) SetPageResponse(resp *proto.OpmPanelStudioResponse, list []*proto.OpmPanelStudio, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
