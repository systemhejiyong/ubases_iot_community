// Code generated by sgen.exe,2022-11-11 10:53:47. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_common/ioterrs"
	"cloud_platform/iot_product_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
	goerrors "go-micro.dev/v4/errors"
)

type OpmProductMaterialRelationHandler struct{}

// 创建
func (h *OpmProductMaterialRelationHandler) Create(ctx context.Context, req *proto.OpmProductMaterialRelation, resp *proto.Response) error {
	s := service.OpmProductMaterialRelationSvc{Ctx: ctx}
	_, err := s.CreateOpmProductMaterialRelation(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialRelCreate)
	}
	return nil
}

// 匹配多条件删除
func (h *OpmProductMaterialRelationHandler) Delete(ctx context.Context, req *proto.OpmProductMaterialRelation, resp *proto.Response) error {
	s := service.OpmProductMaterialRelationSvc{Ctx: ctx}
	_, err := s.DeleteOpmProductMaterialRelation(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialRelDelete)
	}
	return nil
}

// 匹配ID删除
func (h *OpmProductMaterialRelationHandler) DeleteById(ctx context.Context, req *proto.OpmProductMaterialRelation, resp *proto.Response) error {
	s := service.OpmProductMaterialRelationSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpmProductMaterialRelation(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialRelDelete)
	}
	return nil
}

// 根据主键批量删除
func (h *OpmProductMaterialRelationHandler) DeleteByIds(ctx context.Context, req *proto.OpmProductMaterialRelationBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpmProductMaterialRelationSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpmProductMaterialRelation(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialRelDelete)
	}
	return nil
}

// 更新
func (h *OpmProductMaterialRelationHandler) Update(ctx context.Context, req *proto.OpmProductMaterialRelation, resp *proto.Response) error {
	s := service.OpmProductMaterialRelationSvc{Ctx: ctx}
	_, err := s.UpdateOpmProductMaterialRelation(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialRelUpdate)
	}
	return nil
}

// 根据主键更新所有字段
func (h *OpmProductMaterialRelationHandler) UpdateAll(ctx context.Context, req *proto.OpmProductMaterialRelation, resp *proto.Response) error {
	s := service.OpmProductMaterialRelationSvc{Ctx: ctx}
	_, err := s.UpdateAllOpmProductMaterialRelation(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialRelUpdate)
	}
	return nil
}

// 根据主键更新指定列
func (h *OpmProductMaterialRelationHandler) UpdateFields(ctx context.Context, req *proto.OpmProductMaterialRelationUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpmProductMaterialRelationSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpmProductMaterialRelation(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialRelUpdate)
	}
	return nil
}

// 多条件查找，返回单条数据
func (h *OpmProductMaterialRelationHandler) Find(ctx context.Context, req *proto.OpmProductMaterialRelationFilter, resp *proto.OpmProductMaterialRelationResponse) error {
	s := service.OpmProductMaterialRelationSvc{Ctx: ctx}
	data, err := s.FindOpmProductMaterialRelation(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialRelGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OpmProductMaterialRelationHandler) FindById(ctx context.Context, req *proto.OpmProductMaterialRelationFilter, resp *proto.OpmProductMaterialRelationResponse) error {
	s := service.OpmProductMaterialRelationSvc{Ctx: ctx}
	data, err := s.FindByIdOpmProductMaterialRelation(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialRelGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OpmProductMaterialRelationHandler) Lists(ctx context.Context, req *proto.OpmProductMaterialRelationListRequest, resp *proto.OpmProductMaterialRelationResponse) error {
	s := service.OpmProductMaterialRelationSvc{Ctx: ctx}
	data, total, err := s.GetListOpmProductMaterialRelation(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialRelList)
	}
	h.SetPageResponse(resp, data, total)
	return nil
}

func (h *OpmProductMaterialRelationHandler) SetResponse(resp *proto.OpmProductMaterialRelationResponse, data *proto.OpmProductMaterialRelation) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	if data != nil {
		resp.Total = 1
		resp.Data = append(resp.Data, data)
	}
}

func (h *OpmProductMaterialRelationHandler) SetPageResponse(resp *proto.OpmProductMaterialRelationResponse, list []*proto.OpmProductMaterialRelation, total int64) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	resp.Total = total
	resp.Data = list
}

// 创建
func (h *OpmProductMaterialRelationHandler) CreateBatch(ctx context.Context, req *proto.OpmProductMaterialBatch, resp *proto.Response) error {
	s := service.OpmProductMaterialRelationSvc{Ctx: ctx}
	_, err := s.CreateOpmProductMaterialRelationBatch(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialRelCreate)
	}
	return nil
}
