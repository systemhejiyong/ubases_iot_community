// Code generated by sgen,2023-02-14 11:55:45. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
    "context"

	"cloud_platform/iot_common/ioterrs"
    proto "cloud_platform/iot_proto/protos/protosService"
    "cloud_platform/iot_product_service/service"
	goerrors "go-micro.dev/v4/errors"
)

type OpmProductMaterialTypeLanguageHandler struct{}

//创建
func (h *OpmProductMaterialTypeLanguageHandler) Create(ctx context.Context, req *proto.OpmProductMaterialTypeLanguage,resp *proto.Response)  error {
    s := service.OpmProductMaterialTypeLanguageSvc{Ctx: ctx}
	_, err := s.CreateOpmProductMaterialTypeLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeLanguageCreate)
	}
	return nil
}

//匹配多条件删除
func (h *OpmProductMaterialTypeLanguageHandler) Delete(ctx context.Context, req *proto.OpmProductMaterialTypeLanguage,resp *proto.Response) error {
    s := service.OpmProductMaterialTypeLanguageSvc{Ctx: ctx}
	_, err := s.DeleteOpmProductMaterialTypeLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeLanguageDelete)
	}
	return nil
}

//匹配ID删除
func (h *OpmProductMaterialTypeLanguageHandler) DeleteById(ctx context.Context, req *proto.OpmProductMaterialTypeLanguage,resp *proto.Response) error {
    s := service.OpmProductMaterialTypeLanguageSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpmProductMaterialTypeLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeLanguageDelete)
	}
	return nil
}

//根据主键批量删除
func (h *OpmProductMaterialTypeLanguageHandler) DeleteByIds(ctx context.Context, req *proto.OpmProductMaterialTypeLanguageBatchDeleteRequest,resp *proto.Response) error {
    s := service.OpmProductMaterialTypeLanguageSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpmProductMaterialTypeLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeLanguageDelete)
	}
	return nil
}

//更新
func (h *OpmProductMaterialTypeLanguageHandler) Update(ctx context.Context, req *proto.OpmProductMaterialTypeLanguage,resp *proto.Response) error {
    s := service.OpmProductMaterialTypeLanguageSvc{Ctx: ctx}
	_, err := s.UpdateOpmProductMaterialTypeLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeLanguageUpdate)
	}
	return nil
}

//根据主键更新所有字段
func (h *OpmProductMaterialTypeLanguageHandler) UpdateAll(ctx context.Context, req *proto.OpmProductMaterialTypeLanguage,resp *proto.Response) error {
    s := service.OpmProductMaterialTypeLanguageSvc{Ctx: ctx}
	_, err := s.UpdateAllOpmProductMaterialTypeLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeLanguageUpdate)
	}
	return nil
}

//根据主键更新指定列
func (h *OpmProductMaterialTypeLanguageHandler) UpdateFields(ctx context.Context, req *proto.OpmProductMaterialTypeLanguageUpdateFieldsRequest,resp *proto.Response) error {
    s := service.OpmProductMaterialTypeLanguageSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpmProductMaterialTypeLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeLanguageUpdate)
	}
	return nil
}

//多条件查找，返回单条数据
func (h *OpmProductMaterialTypeLanguageHandler) Find(ctx context.Context, req *proto.OpmProductMaterialTypeLanguageFilter,resp *proto.OpmProductMaterialTypeLanguageResponse)  error {
    s := service.OpmProductMaterialTypeLanguageSvc{Ctx: ctx}
	data, err := s.FindOpmProductMaterialTypeLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeLanguageGet)
	}
    h.SetResponse(resp, data)
	return nil
}

//根据ID查找，返回单条数据
func (h *OpmProductMaterialTypeLanguageHandler) FindById(ctx context.Context, req *proto.OpmProductMaterialTypeLanguageFilter,resp *proto.OpmProductMaterialTypeLanguageResponse) error {
    s := service.OpmProductMaterialTypeLanguageSvc{Ctx: ctx}
	data, err := s.FindByIdOpmProductMaterialTypeLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeLanguageGet)
	}
    h.SetResponse(resp, data)
	return nil
}

//查找，支持分页，可返回多条数据
func (h *OpmProductMaterialTypeLanguageHandler) Lists(ctx context.Context, req *proto.OpmProductMaterialTypeLanguageListRequest,resp *proto.OpmProductMaterialTypeLanguageResponse) error {
    s := service.OpmProductMaterialTypeLanguageSvc{Ctx: ctx}
    data, total, err := s.GetListOpmProductMaterialTypeLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialTypeLanguageList)
	}
    h.SetPageResponse(resp, data, total)
	return nil
}


func (h *OpmProductMaterialTypeLanguageHandler) SetResponse(resp *proto.OpmProductMaterialTypeLanguageResponse, data *proto.OpmProductMaterialTypeLanguage) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	if data != nil {
		resp.Total = 1
		resp.Data = append(resp.Data, data)
	}
}

func (h *OpmProductMaterialTypeLanguageHandler) SetPageResponse(resp *proto.OpmProductMaterialTypeLanguageResponse, list []*proto.OpmProductMaterialTypeLanguage, total int64) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	resp.Total = total
	resp.Data = list
}
