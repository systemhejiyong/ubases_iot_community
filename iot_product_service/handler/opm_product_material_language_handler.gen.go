// Code generated by sgen.exe,2023-01-03 17:42:03. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_common/ioterrs"
	"cloud_platform/iot_product_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
	goerrors "go-micro.dev/v4/errors"
)

type OpmProductMaterialLanguageHandler struct{}

// 创建
func (h *OpmProductMaterialLanguageHandler) Create(ctx context.Context, req *proto.OpmProductMaterialLanguage, resp *proto.Response) error {
	s := service.OpmProductMaterialLanguageSvc{Ctx: ctx}
	_, err := s.CreateOpmProductMaterialLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialLanguageCreate)
	}
	return nil
}

// 匹配多条件删除
func (h *OpmProductMaterialLanguageHandler) Delete(ctx context.Context, req *proto.OpmProductMaterialLanguage, resp *proto.Response) error {
	s := service.OpmProductMaterialLanguageSvc{Ctx: ctx}
	_, err := s.DeleteOpmProductMaterialLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialLanguageDelete)
	}
	return nil
}

// 匹配ID删除
func (h *OpmProductMaterialLanguageHandler) DeleteById(ctx context.Context, req *proto.OpmProductMaterialLanguage, resp *proto.Response) error {
	s := service.OpmProductMaterialLanguageSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpmProductMaterialLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialLanguageDelete)
	}
	return nil
}

// 根据主键批量删除
func (h *OpmProductMaterialLanguageHandler) DeleteByIds(ctx context.Context, req *proto.OpmProductMaterialLanguageBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpmProductMaterialLanguageSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpmProductMaterialLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialLanguageDelete)
	}
	return nil
}

// 更新
func (h *OpmProductMaterialLanguageHandler) Update(ctx context.Context, req *proto.OpmProductMaterialLanguage, resp *proto.Response) error {
	s := service.OpmProductMaterialLanguageSvc{Ctx: ctx}
	_, err := s.UpdateOpmProductMaterialLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialLanguageUpdate)
	}
	return nil
}

// 根据主键更新所有字段
func (h *OpmProductMaterialLanguageHandler) UpdateAll(ctx context.Context, req *proto.OpmProductMaterialLanguage, resp *proto.Response) error {
	s := service.OpmProductMaterialLanguageSvc{Ctx: ctx}
	_, err := s.UpdateAllOpmProductMaterialLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialLanguageUpdate)
	}
	return nil
}

// 根据主键更新指定列
func (h *OpmProductMaterialLanguageHandler) UpdateFields(ctx context.Context, req *proto.OpmProductMaterialLanguageUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpmProductMaterialLanguageSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpmProductMaterialLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialLanguageUpdate)
	}
	return nil
}

// 多条件查找，返回单条数据
func (h *OpmProductMaterialLanguageHandler) Find(ctx context.Context, req *proto.OpmProductMaterialLanguageFilter, resp *proto.OpmProductMaterialLanguageResponse) error {
	s := service.OpmProductMaterialLanguageSvc{Ctx: ctx}
	data, err := s.FindOpmProductMaterialLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialLanguageGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OpmProductMaterialLanguageHandler) FindById(ctx context.Context, req *proto.OpmProductMaterialLanguageFilter, resp *proto.OpmProductMaterialLanguageResponse) error {
	s := service.OpmProductMaterialLanguageSvc{Ctx: ctx}
	data, err := s.FindByIdOpmProductMaterialLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialLanguageGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OpmProductMaterialLanguageHandler) Lists(ctx context.Context, req *proto.OpmProductMaterialLanguageListRequest, resp *proto.OpmProductMaterialLanguageResponse) error {
	s := service.OpmProductMaterialLanguageSvc{Ctx: ctx}
	data, total, err := s.GetListOpmProductMaterialLanguage(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBMaterialLanguageList)
	}
	h.SetPageResponse(resp, data, total)
	return nil
}

func (h *OpmProductMaterialLanguageHandler) SetResponse(resp *proto.OpmProductMaterialLanguageResponse, data *proto.OpmProductMaterialLanguage) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	if data != nil {
		resp.Total = 1
		resp.Data = append(resp.Data, data)
	}
}

func (h *OpmProductMaterialLanguageHandler) SetPageResponse(resp *proto.OpmProductMaterialLanguageResponse, list []*proto.OpmProductMaterialLanguage, total int64) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	resp.Total = total
	resp.Data = list
}
