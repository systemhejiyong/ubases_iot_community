// Code generated by sgen,2023-06-02 13:48:11. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_product_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmPanelAuthRelationHandler struct{}

//创建
func (h *OpmPanelAuthRelationHandler) Create(ctx context.Context, req *proto.OpmPanelAuthRelation, resp *proto.Response) error {
	s := service.OpmPanelAuthRelationSvc{Ctx: ctx}
	_, err := s.CreateOpmPanelAuthRelation(req)
	SetResponse(resp, err)
	return nil
}

//匹配多条件删除
func (h *OpmPanelAuthRelationHandler) Delete(ctx context.Context, req *proto.OpmPanelAuthRelation, resp *proto.Response) error {
	s := service.OpmPanelAuthRelationSvc{Ctx: ctx}
	_, err := s.DeleteOpmPanelAuthRelation(req)
	SetResponse(resp, err)
	return nil
}

//匹配ID删除
func (h *OpmPanelAuthRelationHandler) DeleteById(ctx context.Context, req *proto.OpmPanelAuthRelation, resp *proto.Response) error {
	s := service.OpmPanelAuthRelationSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpmPanelAuthRelation(req)
	SetResponse(resp, err)
	return nil
}

//根据主键批量删除
func (h *OpmPanelAuthRelationHandler) DeleteByIds(ctx context.Context, req *proto.OpmPanelAuthRelationBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpmPanelAuthRelationSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpmPanelAuthRelation(req)
	SetResponse(resp, err)
	return nil
}

//更新
func (h *OpmPanelAuthRelationHandler) Update(ctx context.Context, req *proto.OpmPanelAuthRelation, resp *proto.Response) error {
	s := service.OpmPanelAuthRelationSvc{Ctx: ctx}
	_, err := s.UpdateOpmPanelAuthRelation(req)
	SetResponse(resp, err)
	return nil
}

//根据主键更新所有字段
func (h *OpmPanelAuthRelationHandler) UpdateAll(ctx context.Context, req *proto.OpmPanelAuthRelation, resp *proto.Response) error {
	s := service.OpmPanelAuthRelationSvc{Ctx: ctx}
	_, err := s.UpdateAllOpmPanelAuthRelation(req)
	SetResponse(resp, err)
	return nil
}

//根据主键更新指定列
func (h *OpmPanelAuthRelationHandler) UpdateFields(ctx context.Context, req *proto.OpmPanelAuthRelationUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpmPanelAuthRelationSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpmPanelAuthRelation(req)
	SetResponse(resp, err)
	return nil
}

//多条件查找，返回单条数据
func (h *OpmPanelAuthRelationHandler) Find(ctx context.Context, req *proto.OpmPanelAuthRelationFilter, resp *proto.OpmPanelAuthRelationResponse) error {
	s := service.OpmPanelAuthRelationSvc{Ctx: ctx}
	data, err := s.FindOpmPanelAuthRelation(req)
	h.SetResponse(resp, data, err)
	return nil
}

//根据ID查找，返回单条数据
func (h *OpmPanelAuthRelationHandler) FindById(ctx context.Context, req *proto.OpmPanelAuthRelationFilter, resp *proto.OpmPanelAuthRelationResponse) error {
	s := service.OpmPanelAuthRelationSvc{Ctx: ctx}
	data, err := s.FindByIdOpmPanelAuthRelation(req)
	h.SetResponse(resp, data, err)
	return nil
}

//查找，支持分页，可返回多条数据
func (h *OpmPanelAuthRelationHandler) Lists(ctx context.Context, req *proto.OpmPanelAuthRelationListRequest, resp *proto.OpmPanelAuthRelationResponse) error {
	s := service.OpmPanelAuthRelationSvc{Ctx: ctx}
	data, total, err := s.GetListOpmPanelAuthRelation(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *OpmPanelAuthRelationHandler) SetResponse(resp *proto.OpmPanelAuthRelationResponse, data *proto.OpmPanelAuthRelation, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *OpmPanelAuthRelationHandler) SetPageResponse(resp *proto.OpmPanelAuthRelationResponse, list []*proto.OpmPanelAuthRelation, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
