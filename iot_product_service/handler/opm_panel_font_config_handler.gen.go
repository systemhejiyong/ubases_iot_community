// Code generated by sgen,2023-09-20 13:58:28. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_product_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmPanelFontConfigHandler struct{}

//创建
func (h *OpmPanelFontConfigHandler) Create(ctx context.Context, req *proto.OpmPanelFontConfig, resp *proto.Response) error {
	s := service.OpmPanelFontConfigSvc{Ctx: ctx}
	rsp, err := s.CreateOpmPanelFontConfig(req)
	SetResponse(resp, err)
	if rsp != nil {
		resp.Data = rsp.Id
	}
	return nil
}

//匹配多条件删除
func (h *OpmPanelFontConfigHandler) Delete(ctx context.Context, req *proto.OpmPanelFontConfig, resp *proto.Response) error {
	s := service.OpmPanelFontConfigSvc{Ctx: ctx}
	_, err := s.DeleteOpmPanelFontConfig(req)
	SetResponse(resp, err)
	return nil
}

//匹配ID删除
func (h *OpmPanelFontConfigHandler) DeleteById(ctx context.Context, req *proto.OpmPanelFontConfig, resp *proto.Response) error {
	s := service.OpmPanelFontConfigSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpmPanelFontConfig(req)
	SetResponse(resp, err)
	return nil
}

//根据主键批量删除
func (h *OpmPanelFontConfigHandler) DeleteByIds(ctx context.Context, req *proto.OpmPanelFontConfigBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpmPanelFontConfigSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpmPanelFontConfig(req)
	SetResponse(resp, err)
	return nil
}

//更新
func (h *OpmPanelFontConfigHandler) Update(ctx context.Context, req *proto.OpmPanelFontConfig, resp *proto.Response) error {
	s := service.OpmPanelFontConfigSvc{Ctx: ctx}
	_, err := s.UpdateOpmPanelFontConfig(req)
	SetResponse(resp, err)
	return nil
}

//根据主键更新所有字段
func (h *OpmPanelFontConfigHandler) UpdateAll(ctx context.Context, req *proto.OpmPanelFontConfig, resp *proto.Response) error {
	s := service.OpmPanelFontConfigSvc{Ctx: ctx}
	_, err := s.UpdateAllOpmPanelFontConfig(req)
	SetResponse(resp, err)
	return nil
}

//根据主键更新指定列
func (h *OpmPanelFontConfigHandler) UpdateFields(ctx context.Context, req *proto.OpmPanelFontConfigUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpmPanelFontConfigSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpmPanelFontConfig(req)
	SetResponse(resp, err)
	return nil
}

//多条件查找，返回单条数据
func (h *OpmPanelFontConfigHandler) Find(ctx context.Context, req *proto.OpmPanelFontConfigFilter, resp *proto.OpmPanelFontConfigResponse) error {
	s := service.OpmPanelFontConfigSvc{Ctx: ctx}
	data, err := s.FindOpmPanelFontConfig(req)
	h.SetResponse(resp, data, err)
	return nil
}

//根据ID查找，返回单条数据
func (h *OpmPanelFontConfigHandler) FindById(ctx context.Context, req *proto.OpmPanelFontConfigFilter, resp *proto.OpmPanelFontConfigResponse) error {
	s := service.OpmPanelFontConfigSvc{Ctx: ctx}
	data, err := s.FindByIdOpmPanelFontConfig(req)
	h.SetResponse(resp, data, err)
	return nil
}

//查找，支持分页，可返回多条数据
func (h *OpmPanelFontConfigHandler) Lists(ctx context.Context, req *proto.OpmPanelFontConfigListRequest, resp *proto.OpmPanelFontConfigResponse) error {
	s := service.OpmPanelFontConfigSvc{Ctx: ctx}
	data, total, err := s.GetListOpmPanelFontConfig(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *OpmPanelFontConfigHandler) SetResponse(resp *proto.OpmPanelFontConfigResponse, data *proto.OpmPanelFontConfig, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *OpmPanelFontConfigHandler) SetPageResponse(resp *proto.OpmPanelFontConfigResponse, list []*proto.OpmPanelFontConfig, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
