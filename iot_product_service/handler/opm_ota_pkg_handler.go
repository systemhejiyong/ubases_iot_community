// Code generated by sgen.exe,2022-05-13 13:53:10. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_product_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmOtaPkgHandler struct{}

func (h *OpmOtaPkgHandler) GetProductOtaVersion(ctx context.Context, req *proto.ProductOtaVersionRequest, resp *proto.ProductOtaVersionResponse) error {
	s := service.OpmOtaPkgSvc{Ctx: ctx}
	data, err := s.GetProductOtaVersion(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Versions = data
	}
	return nil
}

func (h *OpmOtaPkgHandler) GetProductOtaAreas(ctx context.Context, req *proto.ProductOtaAreaRequest, resp *proto.ProductOtaAreaResponse) error {
	s := service.OpmOtaPkgSvc{Ctx: ctx}
	data, err := s.GetProductOtaAreas(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Areas = data
	}
	return nil
}

func (h *OpmOtaPkgHandler) SetPublish(ctx context.Context, request *proto.SetOtaPublishRequest, response *proto.Response) error {
	s := service.OpmOtaPkgSvc{Ctx: ctx}
	err := s.SetPublish(request)
	SetResponse(response, err)
	return nil
}

// 创建
func (h *OpmOtaPkgHandler) Create(ctx context.Context, req *proto.OpmOtaPkg, resp *proto.Response) error {
	s := service.OpmOtaPkgSvc{Ctx: ctx}
	_, err := s.CreateOpmOtaPkg(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *OpmOtaPkgHandler) Delete(ctx context.Context, req *proto.OpmOtaPkg, resp *proto.Response) error {
	s := service.OpmOtaPkgSvc{Ctx: ctx}
	_, err := s.DeleteOpmOtaPkg(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *OpmOtaPkgHandler) DeleteById(ctx context.Context, req *proto.OpmOtaPkg, resp *proto.Response) error {
	s := service.OpmOtaPkgSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpmOtaPkg(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *OpmOtaPkgHandler) DeleteByIds(ctx context.Context, req *proto.OpmOtaPkgBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpmOtaPkgSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpmOtaPkg(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *OpmOtaPkgHandler) Update(ctx context.Context, req *proto.OpmOtaPkg, resp *proto.Response) error {
	s := service.OpmOtaPkgSvc{Ctx: ctx}
	_, err := s.UpdateOpmOtaPkg(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *OpmOtaPkgHandler) UpdateAll(ctx context.Context, req *proto.OpmOtaPkg, resp *proto.Response) error {
	s := service.OpmOtaPkgSvc{Ctx: ctx}
	_, err := s.UpdateAllOpmOtaPkg(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *OpmOtaPkgHandler) UpdateFields(ctx context.Context, req *proto.OpmOtaPkgUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpmOtaPkgSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpmOtaPkg(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *OpmOtaPkgHandler) Find(ctx context.Context, req *proto.OpmOtaPkgFilter, resp *proto.OpmOtaPkgResponse) error {
	s := service.OpmOtaPkgSvc{Ctx: ctx}
	data, err := s.FindOpmOtaPkg(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OpmOtaPkgHandler) FindById(ctx context.Context, req *proto.OpmOtaPkgFilter, resp *proto.OpmOtaPkgResponse) error {
	s := service.OpmOtaPkgSvc{Ctx: ctx}
	data, err := s.FindByIdOpmOtaPkg(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OpmOtaPkgHandler) Lists(ctx context.Context, req *proto.OpmOtaPkgListRequest, resp *proto.OpmOtaPkgResponse) error {
	s := service.OpmOtaPkgSvc{Ctx: ctx}
	data, total, err := s.GetListOpmOtaPkg(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *OpmOtaPkgHandler) SetResponse(resp *proto.OpmOtaPkgResponse, data *proto.OpmOtaPkg, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *OpmOtaPkgHandler) SetPageResponse(resp *proto.OpmOtaPkgResponse, list []*proto.OpmOtaPkg, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
