// Code generated by sgen.exe,2022-12-28 11:47:15. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"
	goerrors "go-micro.dev/v4/errors"

	"cloud_platform/iot_common/ioterrs"
	"cloud_platform/iot_product_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmProductManualHandler struct{}

// 创建
func (h *OpmProductManualHandler) Create(ctx context.Context, req *proto.OpmProductManual, resp *proto.Response) error {
	s := service.OpmProductManualSvc{Ctx: ctx}
	_, err := s.CreateOpmProductManual(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductManualCreate)
	}
	return nil
}

// 匹配多条件删除
func (h *OpmProductManualHandler) Delete(ctx context.Context, req *proto.OpmProductManual, resp *proto.Response) error {
	s := service.OpmProductManualSvc{Ctx: ctx}
	_, err := s.DeleteOpmProductManual(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductManualDelete)
	}
	return nil
}

// 匹配ID删除
func (h *OpmProductManualHandler) DeleteById(ctx context.Context, req *proto.OpmProductManual, resp *proto.Response) error {
	s := service.OpmProductManualSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpmProductManual(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductManualDelete)
	}
	return nil
}

// 根据主键批量删除
func (h *OpmProductManualHandler) DeleteByIds(ctx context.Context, req *proto.OpmProductManualBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpmProductManualSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpmProductManual(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductManualDelete)
	}
	return nil
}

// 更新
func (h *OpmProductManualHandler) Update(ctx context.Context, req *proto.OpmProductManual, resp *proto.Response) error {
	s := service.OpmProductManualSvc{Ctx: ctx}
	_, err := s.UpdateOpmProductManual(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductManualUpdate)
	}
	return nil
}

// 根据主键更新所有字段
func (h *OpmProductManualHandler) UpdateAll(ctx context.Context, req *proto.OpmProductManual, resp *proto.Response) error {
	s := service.OpmProductManualSvc{Ctx: ctx}
	_, err := s.UpdateAllOpmProductManual(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductManualUpdate)
	}
	return nil
}

// 根据主键更新指定列
func (h *OpmProductManualHandler) UpdateFields(ctx context.Context, req *proto.OpmProductManualUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpmProductManualSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpmProductManual(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductManualUpdate)
	}
	return nil
}

// 多条件查找，返回单条数据
func (h *OpmProductManualHandler) Find(ctx context.Context, req *proto.OpmProductManualFilter, resp *proto.OpmProductManualResponse) error {
	s := service.OpmProductManualSvc{Ctx: ctx}
	data, err := s.FindOpmProductManual(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductManualGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OpmProductManualHandler) FindById(ctx context.Context, req *proto.OpmProductManualFilter, resp *proto.OpmProductManualResponse) error {
	s := service.OpmProductManualSvc{Ctx: ctx}
	data, err := s.FindByIdOpmProductManual(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductManualGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OpmProductManualHandler) Lists(ctx context.Context, req *proto.OpmProductManualListRequest, resp *proto.OpmProductManualResponse) error {
	s := service.OpmProductManualSvc{Ctx: ctx}
	data, total, err := s.GetListOpmProductManual(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductManualList)
	}
	h.SetPageResponse(resp, data, total)
	return nil
}

func (h *OpmProductManualHandler) SetResponse(resp *proto.OpmProductManualResponse, data *proto.OpmProductManual) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	if data != nil {
		resp.Total = 1
		resp.Data = append(resp.Data, data)
	}
}

func (h *OpmProductManualHandler) SetPageResponse(resp *proto.OpmProductManualResponse, list []*proto.OpmProductManual, total int64) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	resp.Total = total
	resp.Data = list
}
