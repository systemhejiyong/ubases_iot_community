// Code generated by sgen,2023-06-02 13:48:10. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_product_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmPanelHandler struct{}

//创建
func (h *OpmPanelHandler) UpdateStatus(ctx context.Context, req *proto.OpmPanel, resp *proto.Response) error {
	s := service.OpmPanelSvc{Ctx: ctx}
	_, err := s.UpdateStatus(req)
	SetResponse(resp, err)
	return nil
}

//创建
func (h *OpmPanelHandler) CopyPanel(ctx context.Context, req *proto.OpmPanel, resp *proto.Response) error {
	s := service.OpmPanelSvc{Ctx: ctx}
	res, err := s.CopyOpmPanel(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Data = res.Id
	}
	return nil
}

//创建
func (h *OpmPanelHandler) UpdateEditStudio(ctx context.Context, req *proto.OpmPanel, resp *proto.Response) error {
	s := service.OpmPanelSvc{Ctx: ctx}
	_, err := s.UpdateEditStudio(req)
	SetResponse(resp, err)
	return nil
}

//创建
func (h *OpmPanelHandler) Create(ctx context.Context, req *proto.OpmPanel, resp *proto.Response) error {
	s := service.OpmPanelSvc{Ctx: ctx}
	_, err := s.CreateOpmPanel(req)
	SetResponse(resp, err)
	return nil
}

//匹配多条件删除
func (h *OpmPanelHandler) Delete(ctx context.Context, req *proto.OpmPanel, resp *proto.Response) error {
	s := service.OpmPanelSvc{Ctx: ctx}
	_, err := s.DeleteOpmPanel(req)
	SetResponse(resp, err)
	return nil
}

//匹配ID删除
func (h *OpmPanelHandler) DeleteById(ctx context.Context, req *proto.OpmPanel, resp *proto.Response) error {
	s := service.OpmPanelSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpmPanel(req)
	SetResponse(resp, err)
	return nil
}

//根据主键批量删除
func (h *OpmPanelHandler) DeleteByIds(ctx context.Context, req *proto.OpmPanelBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpmPanelSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpmPanel(req)
	SetResponse(resp, err)
	return nil
}

//更新
func (h *OpmPanelHandler) Update(ctx context.Context, req *proto.OpmPanel, resp *proto.Response) error {
	s := service.OpmPanelSvc{Ctx: ctx}
	_, err := s.UpdateOpmPanel(req)
	SetResponse(resp, err)
	return nil
}

//根据主键更新所有字段
func (h *OpmPanelHandler) UpdateAll(ctx context.Context, req *proto.OpmPanel, resp *proto.Response) error {
	s := service.OpmPanelSvc{Ctx: ctx}
	_, err := s.UpdateAllOpmPanel(req)
	SetResponse(resp, err)
	return nil
}

//根据主键更新指定列
func (h *OpmPanelHandler) UpdateFields(ctx context.Context, req *proto.OpmPanelUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpmPanelSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpmPanel(req)
	SetResponse(resp, err)
	return nil
}

//多条件查找，返回单条数据
func (h *OpmPanelHandler) Find(ctx context.Context, req *proto.OpmPanelFilter, resp *proto.OpmPanelResponse) error {
	s := service.OpmPanelSvc{Ctx: ctx}
	data, err := s.FindOpmPanel(req)
	h.SetResponse(resp, data, err)
	return nil
}

//根据ID查找，返回单条数据
func (h *OpmPanelHandler) FindById(ctx context.Context, req *proto.OpmPanelFilter, resp *proto.OpmPanelResponse) error {
	s := service.OpmPanelSvc{Ctx: ctx}
	data, err := s.FindByIdOpmPanel(req)
	h.SetResponse(resp, data, err)
	return nil
}

//查找，支持分页，可返回多条数据
func (h *OpmPanelHandler) Lists(ctx context.Context, req *proto.OpmPanelListRequest, resp *proto.OpmPanelResponse) error {
	s := service.OpmPanelSvc{Ctx: ctx}
	data, total, err := s.GetListOpmPanel(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *OpmPanelHandler) SetResponse(resp *proto.OpmPanelResponse, data *proto.OpmPanel, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *OpmPanelHandler) SetPageResponse(resp *proto.OpmPanelResponse, list []*proto.OpmPanel, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
