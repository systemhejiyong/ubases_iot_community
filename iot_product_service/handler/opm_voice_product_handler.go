// Code generated by sgen.exe,2022-08-31 14:21:29. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_product_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmVoiceProductHandler struct{}

func (h *OpmVoiceProductHandler) GetVoiceProductFunc(ctx context.Context, req *proto.OpmVoiceProductListReq, funcMap *proto.OpmVoiceProductFuncMap) error {
	s := service.OpmVoiceProductSvc{Ctx: ctx}
	res, err := s.GetVoiceProductFunc(req)
	if err != nil {
		funcMap.Code = ERROR
		funcMap.Message = err.Error()
	} else {
		funcMap.Code = SUCCESS
		funcMap.Message = "success"
		funcMap.FuncMap = res
	}
	return nil
}

// 创建
func (h *OpmVoiceProductHandler) Create(ctx context.Context, req *proto.OpmVoiceProduct, resp *proto.Response) error {
	s := service.OpmVoiceProductSvc{Ctx: ctx}
	_, err := s.CreateOpmVoiceProduct(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *OpmVoiceProductHandler) Delete(ctx context.Context, req *proto.OpmVoiceProduct, resp *proto.Response) error {
	s := service.OpmVoiceProductSvc{Ctx: ctx}
	_, err := s.DeleteOpmVoiceProduct(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *OpmVoiceProductHandler) DeleteById(ctx context.Context, req *proto.OpmVoiceProduct, resp *proto.Response) error {
	s := service.OpmVoiceProductSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpmVoiceProduct(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *OpmVoiceProductHandler) DeleteByIds(ctx context.Context, req *proto.OpmVoiceProductBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpmVoiceProductSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpmVoiceProduct(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *OpmVoiceProductHandler) Update(ctx context.Context, req *proto.OpmVoiceProduct, resp *proto.Response) error {
	s := service.OpmVoiceProductSvc{Ctx: ctx}
	_, err := s.UpdateOpmVoiceProduct(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *OpmVoiceProductHandler) UpdateAll(ctx context.Context, req *proto.OpmVoiceProduct, resp *proto.Response) error {
	s := service.OpmVoiceProductSvc{Ctx: ctx}
	_, err := s.UpdateAllOpmVoiceProduct(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *OpmVoiceProductHandler) UpdateFields(ctx context.Context, req *proto.OpmVoiceProductUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpmVoiceProductSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpmVoiceProduct(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *OpmVoiceProductHandler) Find(ctx context.Context, req *proto.OpmVoiceProductFilter, resp *proto.OpmVoiceProductResponse) error {
	s := service.OpmVoiceProductSvc{Ctx: ctx}
	data, err := s.FindOpmVoiceProduct(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OpmVoiceProductHandler) FindById(ctx context.Context, req *proto.OpmVoiceProductFilter, resp *proto.OpmVoiceProductResponse) error {
	s := service.OpmVoiceProductSvc{Ctx: ctx}
	data, err := s.FindByIdOpmVoiceProduct(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OpmVoiceProductHandler) Lists(ctx context.Context, req *proto.OpmVoiceProductListRequest, resp *proto.OpmVoiceProductResponse) error {
	s := service.OpmVoiceProductSvc{Ctx: ctx}
	data, total, err := s.GetListOpmVoiceProduct(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

// 保存产品语控配置
func (h *OpmVoiceProductHandler) Save(ctx context.Context, req *proto.OpmVoiceProductSaveReq, resp *proto.OpmVoiceProductSaveRes) error {
	s := service.OpmVoiceProductSvc{Ctx: ctx}
	res, err := s.SaveVoiceProduct(req)
	resp.Data = res.Data
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
	}
	return nil
}

// 保存产品语控配置
func (h *OpmVoiceProductHandler) GetList(ctx context.Context, req *proto.OpmVoiceProductListReq, resp *proto.OpmVoiceProductListRes) error {
	s := service.OpmVoiceProductSvc{Ctx: ctx}
	res, err := s.GetOpmVoiceProductList(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Data = res
	}
	return nil
}

// 保存产品语控配置
func (h *OpmVoiceProductHandler) GetDetail(ctx context.Context, req *proto.OpmVoiceProductDetailReq, resp *proto.OpmVoiceProductDetailRes) error {
	s := service.OpmVoiceProductSvc{Ctx: ctx}
	res, err := s.GetOpmVoiceProductDetail(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		*resp = *res
		resp.Code = SUCCESS
		resp.Message = "success"
	}
	return nil
}

func (h *OpmVoiceProductHandler) GetDetailList(ctx context.Context, req *proto.OpmVoiceProductDetailReq, resp *proto.OpmVoiceProductDetailResList) error {
	s := service.OpmVoiceProductSvc{Ctx: ctx}
	res, err := s.GetOpmVoiceProductDetailList(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Details = res
		resp.Code = SUCCESS
		resp.Message = "success"
	}
	return nil
}

func (h *OpmVoiceProductHandler) Publish(ctx context.Context, req *proto.OpmVoiceProductPublishReq, resp *proto.OpmVoiceProductPublishRes) error {
	s := service.OpmVoiceProductSvc{Ctx: ctx}
	res, err := s.VoiceProductPublish(req)
	*resp = *res
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
	}
	return nil
}

func (h *OpmVoiceProductHandler) SetResponse(resp *proto.OpmVoiceProductResponse, data *proto.OpmVoiceProduct, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *OpmVoiceProductHandler) SetPageResponse(resp *proto.OpmVoiceProductResponse, list []*proto.OpmVoiceProduct, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
