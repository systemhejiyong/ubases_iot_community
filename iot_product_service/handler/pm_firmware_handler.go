// Code generated by sgen.exe,2022-04-20 13:52:29. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotnatsjs"
	"cloud_platform/iot_common/iotstruct"
	"context"

	"cloud_platform/iot_product_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type PmFirmwareHandler struct{}

func (h *PmFirmwareHandler) UpdateStatus(ctx context.Context, req *proto.PmFirmware, resp *proto.Response) error {
	s := service.PmFirmwareSvc{Ctx: ctx}
	err := s.UpdateStatus(req)
	SetResponse(resp, err)
	return nil
}

// 创建
func (h *PmFirmwareHandler) Create(ctx context.Context, req *proto.PmFirmware, resp *proto.Response) error {
	s := service.PmFirmwareSvc{Ctx: ctx}
	ret, err := s.CreatePmFirmware(req)
	SetResponse(resp, err)
	if ret != nil && err == nil {
		resp.Data = ret.Id
		//service.GetJsPublisherMgr().PushData(&service.NatsPubData{
		//	Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
		//	Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_PM_firmware, ret.Id, "name", req.Name, req.NameEn),
		//})
		iotnatsjs.GetJsClientPub().PushData(&iotnatsjs.NatsPubData{
			Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
			Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_PM_firmware, ret.Id, "name", req.Name, req.NameEn),
		})
	}
	return nil
}

// 匹配多条件删除
func (h *PmFirmwareHandler) Delete(ctx context.Context, req *proto.PmFirmware, resp *proto.Response) error {
	s := service.PmFirmwareSvc{Ctx: ctx}
	_, err := s.DeletePmFirmware(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *PmFirmwareHandler) DeleteById(ctx context.Context, req *proto.PmFirmware, resp *proto.Response) error {
	s := service.PmFirmwareSvc{Ctx: ctx}
	_, err := s.DeleteByIdPmFirmware(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *PmFirmwareHandler) DeleteByIds(ctx context.Context, req *proto.PmFirmwareBatchDeleteRequest, resp *proto.Response) error {
	s := service.PmFirmwareSvc{Ctx: ctx}
	_, err := s.DeleteByIdsPmFirmware(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *PmFirmwareHandler) Update(ctx context.Context, req *proto.PmFirmware, resp *proto.Response) error {
	s := service.PmFirmwareSvc{Ctx: ctx}
	_, err := s.UpdatePmFirmware(req)
	SetResponse(resp, err)
	if err == nil {
		//service.GetJsPublisherMgr().PushData(&service.NatsPubData{
		//	Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
		//	Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_PM_firmware, req.Id, "name", req.Name, req.NameEn),
		//})
		iotnatsjs.GetJsClientPub().PushData(&iotnatsjs.NatsPubData{
			Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
			Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_PM_firmware, req.Id, "name", req.Name, req.NameEn),
		})
	}
	return nil
}

// 根据主键更新所有字段
func (h *PmFirmwareHandler) UpdateAll(ctx context.Context, req *proto.PmFirmware, resp *proto.Response) error {
	s := service.PmFirmwareSvc{Ctx: ctx}
	_, err := s.UpdateAllPmFirmware(req)
	SetResponse(resp, err)
	if err == nil {
		//service.GetJsPublisherMgr().PushData(&service.NatsPubData{
		//	Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
		//	Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_PM_firmware, req.Id, "name", req.Name, req.NameEn),
		//})
		iotnatsjs.GetJsClientPub().PushData(&iotnatsjs.NatsPubData{
			Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
			Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_PM_firmware, req.Id, "name", req.Name, req.NameEn),
		})
	}
	return nil
}

// 根据主键更新指定列
func (h *PmFirmwareHandler) UpdateFields(ctx context.Context, req *proto.PmFirmwareUpdateFieldsRequest, resp *proto.Response) error {
	s := service.PmFirmwareSvc{Ctx: ctx}
	_, err := s.UpdateFieldsPmFirmware(req)
	SetResponse(resp, err)
	if err == nil {
		if req.Data.Name != "" || req.Data.NameEn != "" {
			//service.GetJsPublisherMgr().PushData(&service.NatsPubData{
			//	Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
			//	Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_PM_firmware, req.Data.Id, "name", req.Data.Name, req.Data.NameEn),
			//})
			iotnatsjs.GetJsClientPub().PushData(&iotnatsjs.NatsPubData{
				Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
				Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_PM_firmware, req.Data.Id, "name", req.Data.Name, req.Data.NameEn),
			})
		}
	}
	return nil
}

// 多条件查找，返回单条数据
func (h *PmFirmwareHandler) Find(ctx context.Context, req *proto.PmFirmwareFilter, resp *proto.PmFirmwareResponse) error {
	s := service.PmFirmwareSvc{Ctx: ctx}
	data, err := s.FindPmFirmware(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *PmFirmwareHandler) FindById(ctx context.Context, req *proto.PmFirmwareFilter, resp *proto.PmFirmwareResponse) error {
	s := service.PmFirmwareSvc{Ctx: ctx}
	data, err := s.FindByIdPmFirmware(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *PmFirmwareHandler) Lists(ctx context.Context, req *proto.PmFirmwareListRequest, resp *proto.PmFirmwareResponse) error {
	s := service.PmFirmwareSvc{Ctx: ctx}
	data, total, err := s.GetListPmFirmware(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *PmFirmwareHandler) SetResponse(resp *proto.PmFirmwareResponse, data *proto.PmFirmware, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *PmFirmwareHandler) SetPageResponse(resp *proto.PmFirmwareResponse, list []*proto.PmFirmware, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
