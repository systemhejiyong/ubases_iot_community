// Code generated by sgen.exe,2022-08-22 19:32:42. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	goerrors "go-micro.dev/v4/errors"

	"cloud_platform/iot_common/ioterrs"
	"cloud_platform/iot_product_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type ProductHelpDocHandler struct{}

// 创建
func (h *ProductHelpDocHandler) Create(ctx context.Context, req *proto.ProductHelpDoc, resp *proto.Response) error {
	s := service.ProductHelpDocSvc{Ctx: ctx}
	_, err := s.CreateProductHelpDoc(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductHelpDocCreate)
	}
	return nil
}

// 匹配多条件删除
func (h *ProductHelpDocHandler) Delete(ctx context.Context, req *proto.ProductHelpDoc, resp *proto.Response) error {
	s := service.ProductHelpDocSvc{Ctx: ctx}
	_, err := s.DeleteProductHelpDoc(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductHelpDocDelete)
	}
	return nil
}

// 匹配ID删除
func (h *ProductHelpDocHandler) DeleteById(ctx context.Context, req *proto.ProductHelpDoc, resp *proto.Response) error {
	s := service.ProductHelpDocSvc{Ctx: ctx}
	_, err := s.DeleteByIdProductHelpDoc(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductHelpDocDelete)
	}
	return nil
}

// 根据主键批量删除
func (h *ProductHelpDocHandler) DeleteByIds(ctx context.Context, req *proto.ProductHelpDocBatchDeleteRequest, resp *proto.Response) error {
	s := service.ProductHelpDocSvc{Ctx: ctx}
	_, err := s.DeleteByIdsProductHelpDoc(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductHelpDocDelete)
	}
	return nil
}

// 更新
func (h *ProductHelpDocHandler) Update(ctx context.Context, req *proto.ProductHelpDoc, resp *proto.Response) error {
	s := service.ProductHelpDocSvc{Ctx: ctx}
	_, err := s.UpdateProductHelpDoc(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductHelpDocUpdate)
	}
	return nil
}

// 根据主键更新所有字段
func (h *ProductHelpDocHandler) UpdateAll(ctx context.Context, req *proto.ProductHelpDoc, resp *proto.Response) error {
	s := service.ProductHelpDocSvc{Ctx: ctx}
	_, err := s.UpdateAllProductHelpDoc(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductHelpDocUpdate)
	}
	return nil
}

// 根据主键更新指定列
func (h *ProductHelpDocHandler) UpdateFields(ctx context.Context, req *proto.ProductHelpDocUpdateFieldsRequest, resp *proto.Response) error {
	s := service.ProductHelpDocSvc{Ctx: ctx}
	_, err := s.UpdateFieldsProductHelpDoc(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductHelpDocUpdate)
	}
	return nil
}

// 多条件查找，返回单条数据
func (h *ProductHelpDocHandler) Find(ctx context.Context, req *proto.ProductHelpDocFilter, resp *proto.ProductHelpDocResponse) error {
	s := service.ProductHelpDocSvc{Ctx: ctx}
	data, err := s.FindProductHelpDoc(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductHelpDocGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 根据ID查找，返回单条数据
func (h *ProductHelpDocHandler) FindById(ctx context.Context, req *proto.ProductHelpDocFilter, resp *proto.ProductHelpDocResponse) error {
	s := service.ProductHelpDocSvc{Ctx: ctx}
	data, err := s.FindByIdProductHelpDoc(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductHelpDocGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *ProductHelpDocHandler) Lists(ctx context.Context, req *proto.ProductHelpDocListRequest, resp *proto.ProductHelpDocResponse) error {
	s := service.ProductHelpDocSvc{Ctx: ctx}
	data, total, err := s.GetListProductHelpDoc(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBProductHelpDocGet)
	}
	h.SetPageResponse(resp, data, total)
	return nil
}

func (h *ProductHelpDocHandler) SetResponse(resp *proto.ProductHelpDocResponse, data *proto.ProductHelpDoc) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	if data != nil {
		resp.Total = 1
		resp.Data = append(resp.Data, data)
	}
}

func (h *ProductHelpDocHandler) SetPageResponse(resp *proto.ProductHelpDocResponse, list []*proto.ProductHelpDoc, total int64) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	resp.Total = total
	resp.Data = list
}
