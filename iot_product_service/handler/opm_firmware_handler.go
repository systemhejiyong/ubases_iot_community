// Code generated by sgen.exe,2022-04-29 15:04:30. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"cloud_platform/iot_product_service/service"
	"context"

	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpmFirmwareHandler struct{}

// 创建
func (h *OpmFirmwareHandler) Create(ctx context.Context, req *proto.OpmFirmware, resp *proto.Response) error {
	s := service.OpmFirmwareSvc{Ctx: ctx}
	_, err := s.CreateOpmFirmware(req)
	SetResponse(resp, err)
	return nil
}

func (h *OpmFirmwareHandler) CreateAndInitVersion(ctx context.Context, req *proto.OpmFirmware, resp *proto.Response) error {
	s := service.OpmFirmwareSvc{Ctx: ctx}
	_, err := s.CreateAndInitVersion(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *OpmFirmwareHandler) Delete(ctx context.Context, req *proto.OpmFirmware, resp *proto.Response) error {
	s := service.OpmFirmwareSvc{Ctx: ctx}
	_, err := s.DeleteOpmFirmware(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *OpmFirmwareHandler) DeleteById(ctx context.Context, req *proto.OpmFirmware, resp *proto.Response) error {
	s := service.OpmFirmwareSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpmFirmware(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *OpmFirmwareHandler) DeleteByIds(ctx context.Context, req *proto.OpmFirmwareBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpmFirmwareSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpmFirmware(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *OpmFirmwareHandler) Update(ctx context.Context, req *proto.OpmFirmware, resp *proto.Response) error {
	s := service.OpmFirmwareSvc{Ctx: ctx}
	_, err := s.UpdateOpmFirmware(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *OpmFirmwareHandler) UpdateAll(ctx context.Context, req *proto.OpmFirmware, resp *proto.Response) error {
	s := service.OpmFirmwareSvc{Ctx: ctx}
	_, err := s.UpdateAllOpmFirmware(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *OpmFirmwareHandler) UpdateFields(ctx context.Context, req *proto.OpmFirmwareUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpmFirmwareSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpmFirmware(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *OpmFirmwareHandler) Find(ctx context.Context, req *proto.OpmFirmwareFilter, resp *proto.OpmFirmwareResponse) error {
	s := service.OpmFirmwareSvc{Ctx: ctx}
	data, err := s.FindOpmFirmware(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OpmFirmwareHandler) FindById(ctx context.Context, req *proto.OpmFirmwareFilter, resp *proto.OpmFirmwareResponse) error {
	s := service.OpmFirmwareSvc{Ctx: ctx}
	data, err := s.FindByIdOpmFirmware(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OpmFirmwareHandler) Lists(ctx context.Context, req *proto.OpmFirmwareListRequest, resp *proto.OpmFirmwareResponse) error {
	s := service.OpmFirmwareSvc{Ctx: ctx}
	data, total, err := s.GetListOpmFirmware(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *OpmFirmwareHandler) SetResponse(resp *proto.OpmFirmwareResponse, data *proto.OpmFirmware, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *OpmFirmwareHandler) SetPageResponse(resp *proto.OpmFirmwareResponse, list []*proto.OpmFirmware, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
