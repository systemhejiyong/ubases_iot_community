// Code generated by sgen.exe,2022-04-18 21:26:15. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_user_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app/model"
	"cloud_platform/iot_model/db_app/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type UcUserFeedbackResultSvc struct {
	Ctx context.Context
}

// 创建UcUserFeedbackResult
func (s *UcUserFeedbackResultSvc) CreateUcUserFeedbackResult(req *proto.UcUserFeedbackResult) (*proto.UcUserFeedbackResult, error) {
	// fixme 请在这里校验参数
	if req.FeedbackId == 0 {
		return nil, errors.New("反馈编号不能为空")
	}
	if req.NotifyContent == "" {
		return nil, errors.New("反馈内容不能为空")
	}
	userId, err := GetUserId(s.Ctx)
	if err != nil {
		return nil, errors.New("未获取到用户信息")
	}

	q := orm.Use(iotmodel.GetDB())
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TUcUserFeedbackResult
		do := t.WithContext(context.Background())
		//TODO 通过feedbackid查询反馈记录是否存在？
		//查询是否已回复
		count, err := do.Where(t.FeedbackId.Eq(req.FeedbackId)).Count()
		if err != nil {
			return err
		}
		if count > 0 {
			return errors.New("该反馈已回复")
		}
		dbObj := convert.UcUserFeedbackResult_pb2db(req)
		dbObj.Id = iotutil.GetNextSeqInt64()
		dbObj.CreatedBy = userId
		err = do.Create(dbObj)
		if err != nil {
			logger.Errorf("CreateUcUserFeedbackResult error : %s", err.Error())
			return err
		}
		//反馈状态为已回复
		tf := tx.TUcUserFeedback
		info, err := tf.WithContext(context.Background()).Where(tf.Id.Eq(req.FeedbackId)).Update(tf.Status, 2)
		if err != nil {
			logger.Errorf("CreateUcUserFeedbackResult update feedback error : %s", err.Error())
			return err
		}
		if info.Error != nil {
			logger.Errorf("CreateUcUserFeedbackResult update feedback error : %s", info.Error.Error())
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("CreateUcUserFeedbackResult error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除UcUserFeedbackResult
func (s *UcUserFeedbackResultSvc) DeleteUcUserFeedbackResult(req *proto.UcUserFeedbackResult) (*proto.UcUserFeedbackResult, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserFeedbackResult
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.FeedbackId != 0 { //整数
		do = do.Where(t.FeedbackId.Eq(req.FeedbackId))
	}
	if req.HandleStatus != 0 { //整数
		do = do.Where(t.HandleStatus.Eq(req.HandleStatus))
	}
	if req.HandleResult != "" { //字符串
		do = do.Where(t.HandleResult.Eq(req.HandleResult))
	}
	if req.NotifyFlag != 0 { //整数
		do = do.Where(t.NotifyFlag.Eq(req.NotifyFlag))
	}
	if req.NotifyContent != "" { //字符串
		do = do.Where(t.NotifyContent.Eq(req.NotifyContent))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteUcUserFeedbackResult error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除UcUserFeedbackResult
func (s *UcUserFeedbackResultSvc) DeleteByIdUcUserFeedbackResult(req *proto.UcUserFeedbackResult) (*proto.UcUserFeedbackResult, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserFeedbackResult
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdUcUserFeedbackResult error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除UcUserFeedbackResult
func (s *UcUserFeedbackResultSvc) DeleteByIdsUcUserFeedbackResult(req *proto.UcUserFeedbackResultBatchDeleteRequest) (*proto.UcUserFeedbackResultBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TUcUserFeedbackResult
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsUcUserFeedbackResult error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新UcUserFeedbackResult
func (s *UcUserFeedbackResultSvc) UpdateUcUserFeedbackResult(req *proto.UcUserFeedbackResult) (*proto.UcUserFeedbackResult, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserFeedbackResult
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.FeedbackId != 0 { //整数
		updateField = append(updateField, t.FeedbackId)
	}
	if req.HandleStatus != 0 { //整数
		updateField = append(updateField, t.HandleStatus)
	}
	if req.HandleResult != "" { //字符串
		updateField = append(updateField, t.HandleResult)
	}
	if req.NotifyFlag != 0 { //整数
		updateField = append(updateField, t.NotifyFlag)
	}
	if req.NotifyContent != "" { //字符串
		updateField = append(updateField, t.NotifyContent)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateUcUserFeedbackResult error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.UcUserFeedbackResult_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateUcUserFeedbackResult error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段UcUserFeedbackResult
func (s *UcUserFeedbackResultSvc) UpdateAllUcUserFeedbackResult(req *proto.UcUserFeedbackResult) (*proto.UcUserFeedbackResult, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserFeedbackResult
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.FeedbackId)
	updateField = append(updateField, t.HandleStatus)
	updateField = append(updateField, t.HandleResult)
	updateField = append(updateField, t.NotifyFlag)
	updateField = append(updateField, t.NotifyContent)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllUcUserFeedbackResult error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.UcUserFeedbackResult_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllUcUserFeedbackResult error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *UcUserFeedbackResultSvc) UpdateFieldsUcUserFeedbackResult(req *proto.UcUserFeedbackResultUpdateFieldsRequest) (*proto.UcUserFeedbackResult, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserFeedbackResult
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFields error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsUcUserFeedbackResult error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.UcUserFeedbackResult_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsUcUserFeedbackResult error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找UcUserFeedbackResult
func (s *UcUserFeedbackResultSvc) FindUcUserFeedbackResult(req *proto.UcUserFeedbackResultFilter) (*proto.UcUserFeedbackResult, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserFeedbackResult
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.FeedbackId != 0 { //整数
		do = do.Where(t.FeedbackId.Eq(req.FeedbackId))
	}
	if req.HandleStatus != 0 { //整数
		do = do.Where(t.HandleStatus.Eq(req.HandleStatus))
	}
	if req.HandleResult != "" { //字符串
		do = do.Where(t.HandleResult.Like("%" + req.HandleResult + "%"))
	}
	if req.NotifyFlag != 0 { //整数
		do = do.Where(t.NotifyFlag.Eq(req.NotifyFlag))
	}
	if req.NotifyContent != "" { //字符串
		do = do.Where(t.NotifyContent.Like("%" + req.NotifyContent + "%"))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindUcUserFeedbackResult error : %s", err.Error())
		return nil, err
	}
	res := convert.UcUserFeedbackResult_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找UcUserFeedbackResult
func (s *UcUserFeedbackResultSvc) FindByIdUcUserFeedbackResult(req *proto.UcUserFeedbackResultFilter) (*proto.UcUserFeedbackResult, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserFeedbackResult
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdUcUserFeedbackResult error : %s", err.Error())
		return nil, err
	}
	res := convert.UcUserFeedbackResult_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找UcUserFeedbackResult,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *UcUserFeedbackResultSvc) GetListUcUserFeedbackResult(req *proto.UcUserFeedbackResultListRequest) ([]*proto.UcUserFeedbackResult, int64, error) {
	if req.Query == nil || req.Query.FeedbackId == 0 {
		return nil, 0, errors.New("问题反馈编号不能为空")
	}
	var err error
	t := orm.Use(iotmodel.GetDB()).TUcUserFeedbackResult
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.FeedbackId != 0 { //整数
			do = do.Where(t.FeedbackId.Eq(query.FeedbackId))
		}
		if query.HandleStatus != 0 { //整数
			do = do.Where(t.HandleStatus.Eq(query.HandleStatus))
		}
		if query.HandleResult != "" { //字符串
			do = do.Where(t.HandleResult.Like("%" + query.HandleResult + "%"))
		}
		if query.NotifyFlag != 0 { //整数
			do = do.Where(t.NotifyFlag.Eq(query.NotifyFlag))
		}
	}

	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.CreatedAt.Desc())
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*model.TUcUserFeedbackResult
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListUcUserFeedbackResult error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.UcUserFeedbackResult, len(list))
	for i, v := range list {
		result[i] = convert.UcUserFeedbackResult_db2pb(v)
	}
	return result, total, nil
}
