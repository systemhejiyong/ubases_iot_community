// Code generated by sgen.exe,2022-04-18 21:26:14. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_app_api_service/controls/common/entitys"
	"cloud_platform/iot_app_user_service/rpc/rpcClient"
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"
	"fmt"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_user_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app/model"
	"cloud_platform/iot_model/db_app/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type UcHomeUserSvc struct {
	Ctx context.Context
}

// 创建UcHomeUser
func (s *UcHomeUserSvc) CreateUcHomeUser(req *proto.UcHomeUser) (*proto.UcHomeUser, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TUcHomeUser
	do := t.WithContext(context.Background())
	dbObj := convert.UcHomeUser_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateUcHomeUser error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除UcHomeUser
func (s *UcHomeUserSvc) DeleteUcHomeUser(req *proto.UcHomeUser) (*proto.UcHomeUser, error) {
	t := orm.Use(iotmodel.GetDB()).TUcHomeUser
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.HomeId != 0 { //整数
		do = do.Where(t.HomeId.Eq(req.HomeId))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if len(req.UserIds) != 0 { //整数
		do = do.Where(t.UserId.In(req.UserIds...))
	}
	if req.RoleType != 0 { //整数
		do = do.Where(t.RoleType.Eq(req.RoleType))
	}
	if req.Shared != 0 { //整数
		do = do.Where(t.Shared.Eq(req.Shared))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteUcHomeUser error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除UcHomeUser
func (s *UcHomeUserSvc) DeleteByIdUcHomeUser(req *proto.UcHomeUser) (*proto.UcHomeUser, error) {
	t := orm.Use(iotmodel.GetDB()).TUcHomeUser
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdUcHomeUser error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除UcHomeUser
func (s *UcHomeUserSvc) DeleteByIdsUcHomeUser(req *proto.UcHomeUserBatchDeleteRequest) (*proto.UcHomeUserBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TUcHomeUser
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsUcHomeUser error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新UcHomeUser
func (s *UcHomeUserSvc) UpdateUcHomeUser(req *proto.UcHomeUser) (*proto.UcHomeUser, error) {
	t := orm.Use(iotmodel.GetDB()).TUcHomeUser
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.HomeId != 0 { //整数
		updateField = append(updateField, t.HomeId)
	}
	if req.UserId != 0 { //整数
		updateField = append(updateField, t.UserId)
	}
	if req.RoleType != 0 { //整数
		updateField = append(updateField, t.RoleType)
	}
	if req.Shared != 0 { //整数
		updateField = append(updateField, t.Shared)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateUcHomeUser error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.UcHomeUser_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateUcHomeUser error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段UcHomeUser
func (s *UcHomeUserSvc) UpdateAllUcHomeUser(req *proto.UcHomeUser) (*proto.UcHomeUser, error) {
	t := orm.Use(iotmodel.GetDB()).TUcHomeUser
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.HomeId)
	updateField = append(updateField, t.UserId)
	updateField = append(updateField, t.RoleType)
	updateField = append(updateField, t.BindTime)
	updateField = append(updateField, t.Shared)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllUcHomeUser error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.UcHomeUser_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllUcHomeUser error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *UcHomeUserSvc) UpdateFieldsUcHomeUser(req *proto.UcHomeUserUpdateFieldsRequest) (*proto.UcHomeUser, error) {
	t := orm.Use(iotmodel.GetDB()).TUcHomeUser
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFields error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsUcHomeUser error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.UcHomeUser_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsUcHomeUser error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找UcHomeUser
func (s *UcHomeUserSvc) FindUcHomeUser(req *proto.UcHomeUserFilter) (*proto.UcHomeUser, error) {
	t := orm.Use(iotmodel.GetDB()).TUcHomeUser
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.HomeId != 0 { //整数
		do = do.Where(t.HomeId.Eq(req.HomeId))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.RoleType != 0 { //整数
		do = do.Where(t.RoleType.Eq(req.RoleType))
	}
	if req.Shared != 0 { //整数
		do = do.Where(t.Shared.Eq(req.Shared))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindUcHomeUser error : %s", err.Error())
		return nil, err
	}
	res := convert.UcHomeUser_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找UcHomeUser
func (s *UcHomeUserSvc) FindByIdUcHomeUser(req *proto.UcHomeUserFilter) (*proto.UcHomeUser, error) {
	t := orm.Use(iotmodel.GetDB()).TUcHomeUser
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdUcHomeUser error : %s", err.Error())
		return nil, err
	}
	res := convert.UcHomeUser_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找UcHomeUser,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *UcHomeUserSvc) GetListUcHomeUser(req *proto.UcHomeUserListRequest) ([]*proto.UcHomeUser, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TUcHomeUser
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.HomeId != 0 { //整数
			do = do.Where(t.HomeId.Eq(query.HomeId))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.RoleType != 0 { //整数
			do = do.Where(t.RoleType.Eq(query.RoleType))
		}
		if query.Shared != 0 { //整数
			do = do.Where(t.Shared.Eq(query.Shared))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.CreatedAt.Desc())
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*model.TUcHomeUser
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListUcHomeUser error : %s", err.Error())
		return []*proto.UcHomeUser{}, 0, err
	}
	if len(list) == 0 {
		return []*proto.UcHomeUser{}, total, nil
	}
	result := make([]*proto.UcHomeUser, len(list))
	for i, v := range list {
		result[i] = convert.UcHomeUser_db2pb(v)
	}
	return result, total, nil
}

// 离开家庭
func (s *UcHomeUserSvc) Quit(req *proto.UcHomeDetailRequest, changeHomeId int64) error {
	tran := orm.Use(iotmodel.GetDB())
	tran.Transaction(func(tx *orm.Query) error {
		tUcHomeUserTable := orm.Use(iotmodel.GetDB()).TUcHomeUser
		tUcHomeUserDo := tUcHomeUserTable.WithContext(context.Background())
		tUcUserTable := orm.Use(iotmodel.GetDB()).TUcUser
		tTUcUserDo := tUcUserTable.WithContext(context.Background())
		//查询当前用户下的默认家庭id是否为当前家庭id
		do := tUcHomeUserTable.WithContext(context.Background()).LeftJoin(tUcUserTable, tUcHomeUserTable.UserId.EqCol(tUcUserTable.Id))
		do = do.Where(tUcHomeUserTable.HomeId.Eq(req.HomeId), tUcUserTable.DefaultHomeId.Eq(iotutil.ToString(req.HomeId)),
			tUcUserTable.Id.Eq(req.UserId), tUcUserTable.DeletedAt.IsNull())

		var list []*struct {
			*model.TUcUser
			*model.TUcHomeUser
		}
		homeUserErr := do.Select(tUcUserTable.ALL, tUcHomeUserTable.ALL).Scan(&list)

		tUcHomeUserDo = tUcHomeUserDo.Where(tUcHomeUserTable.HomeId.Eq(req.HomeId), tUcHomeUserTable.UserId.Eq(req.UserId))
		_, err := tUcHomeUserDo.Delete()
		if err != nil {
			logger.Errorf("Quit error : %s", err.Error())
			return err
		}

		if homeUserErr != nil || len(list) == 0 {
			//没有用户需要切换默认家庭
			//logger.Errorf("GetAllUser error")
			return nil
		}

		// fixme 请检查条件和校验参数
		//要更新的字段,不包括主键
		var updateField []field.Expr
		updateField = append(updateField, tUcUserTable.DefaultHomeId)
		tTUcUserDo = tTUcUserDo.Select(updateField...)
		tTUcUserDo = tTUcUserDo.Where(tUcUserTable.Id.Eq(req.UserId))
		//修改默认家庭id
		dbObj := convert.UcUser_pb2db(&proto.UcUser{DefaultHomeId: iotutil.ToString(changeHomeId)})
		_, err = tTUcUserDo.Updates(dbObj)
		if err != nil {
			logger.Errorf("UpdateUcUser error : %s", err.Error())
			return err
		}
		return nil
	})
	return nil
}

// 通过家庭编号获取用户
func (s *UcHomeUserSvc) GetUsersByHomeId(req *proto.UcHomeUserPrimarykey) ([]*proto.UcHomeUser, error) {
	if req.Id == 0 {
		return nil, errors.New("家庭编号不能为空")
	}
	t := orm.Use(iotmodel.GetDB()).TUcHomeUser
	list, err := t.WithContext(context.Background()).Where(t.HomeId.Eq(req.Id)).Find()
	if err != nil {
		logger.Errorf("GetListUcHomeUser error : %s", err.Error())
		return nil, err
	}
	if len(list) == 0 {
		return nil, nil
	}
	result := make([]*proto.UcHomeUser, len(list))
	for i, v := range list {
		result[i] = convert.UcHomeUser_db2pb(v)
	}
	return result, nil
}

func (s *UcHomeUserSvc) ChangeAllUserDefaultHomeId(req *proto.UcHomeUserListRequest, lat, lng float64, country, province, city, district, appKey, lang string) error {
	var q = orm.Use(iotmodel.GetDB())
	param := req.Query

	tTUcHomeUser := q.TUcHomeUser
	tTUcUser := q.TUcUser
	tTUcHomeRoom := q.TUcHomeRoom

	//查询家庭下的默认家庭id为当前家庭id的所有用户
	do := tTUcHomeUser.WithContext(context.Background()).LeftJoin(tTUcUser, tTUcHomeUser.UserId.EqCol(tTUcUser.Id))
	do = do.Where(tTUcHomeUser.HomeId.Eq(param.HomeId), tTUcUser.DefaultHomeId.Eq(iotutil.ToString(param.HomeId)), tTUcUser.DeletedAt.IsNull())

	var list []*struct {
		*model.TUcUser
		*model.TUcHomeUser
	}
	err := do.Select(tTUcUser.ALL, tTUcHomeUser.ALL).Scan(&list)
	if err != nil || len(list) == 0 {
		//没有用户需要切换默认家庭
		//logger.Errorf("GetAllUser error")
		return nil
	}

	userIds := []int64{}
	//给所有用户修改默认家庭id
	for _, v := range list {
		userId := v.UserId
		userIds = append(userIds, userId)
		var changeHomeId int64
		//获取用户所有家庭id,切换家庭id
		ucHomeUserList, _, err := s.GetListUcHomeUser(&proto.UcHomeUserListRequest{
			Query: &proto.UcHomeUser{
				UserId: userId,
			},
		})
		if err != nil {
			logger.Errorf(err.Error())
			continue
		}
		for _, homeUserObj := range ucHomeUserList {
			if homeUserObj.HomeId != param.HomeId {
				changeHomeId = homeUserObj.HomeId
				break
			}
		}
		if changeHomeId == 0 {

			homeId := iotutil.GetNextSeqInt64()
			changeHomeId = homeId

			//q := orm.Use(iotmodel.GetDB())
			tUcHomeDo := q.TUcHome.WithContext(context.Background())
			tUcHome := &model.TUcHome{
				Id:        homeId,
				Name:      getAppDefaultHomeName(lang),
				IconUrl:   "",
				Sid:       0,
				Lat:       lat,
				Lng:       lng,
				Country:   country,
				Province:  province,
				City:      city,
				District:  district,
				Address:   province + city + district,
				CreatedBy: userId,
			}

			err = tUcHomeDo.Create(tUcHome)
			if err != nil {
				logger.Errorf("TUcHome create failed, error:%s", err.Error())
				return err
			}

			tUcHomeUserDo := tTUcHomeUser.WithContext(context.Background())
			tUcHomeUser := &model.TUcHomeUser{
				Id:        iotutil.GetNextSeqInt64(),
				HomeId:    homeId,
				UserId:    userId,
				RoleType:  1,
				BindTime:  time.Now(),
				Shared:    1,
				CreatedBy: userId,
			}

			err = tUcHomeUserDo.Create(tUcHomeUser)
			if err != nil {
				logger.Errorf("TUcHomeUser create failed, error:%s", err.Error())
				return err
			}

			//获取默认房间信息
			resultList := []entitys.TConfigDictData{}
			oemAppResult, err := rpcClient.ClientOemAppService.Find(context.Background(), &proto.OemAppFilter{
				AppKey: appKey,
			})
			if err == nil && oemAppResult.Code == 200 && len(oemAppResult.Data) > 0 {
				oemAppInfo := oemAppResult.Data[0]
				oemAppFunctionConfig, err := rpcClient.ClientOemAppUiConfigService.Find(context.Background(), &proto.OemAppUiConfigFilter{
					AppId:   oemAppInfo.Id,
					Version: oemAppInfo.Version,
				})
				if err == nil && oemAppResult.Code == 200 && len(oemAppFunctionConfig.Data) > 0 && oemAppFunctionConfig.Data[0].Room != "" {
					roomConfigs := iotutil.JsonToMapArray(oemAppFunctionConfig.Data[0].Room)
					for _, roomConfig := range roomConfigs {
						resultList = append(resultList, entitys.TConfigDictData{
							DictCode:  iotutil.ToInt64(roomConfig["roomId"]),
							DictLabel: iotutil.ToString(roomConfig["roomName"]),
							DictValue: iotutil.ToString(roomConfig["roomSort"]),
							DictType:  "",
							Listimg:   iotutil.ToString(roomConfig["roomImage"]),
						})
					}
				}
			}

			langMap := make(map[string]string)
			sourceRowIds := []string{}
			for _, data := range resultList {
				sourceRowIds = append(sourceRowIds, fmt.Sprintf("%s_%s-%d_name", lang, data.DictType, data.DictCode))
			}
			slice, err := iotredis.GetClient().HMGet(context.Background(), iotconst.HKEY_LANGUAGE_DATA_PREFIX+iotconst.LANG_T_CONFIG_DICT_DATA, sourceRowIds...).Result()
			if err == nil {
				langMap = iotutil.ArrayUnionInterfaces(sourceRowIds, slice)
			}

			rooms := make([]*model.TUcHomeRoom, 0)
			for _, dict := range resultList {
				dictLabel := iotutil.MapGetStringVal(langMap[fmt.Sprintf("%s_%s-%d_name", lang, dict.DictType, dict.DictCode)], dict.DictLabel)
				rooms = append(rooms, &model.TUcHomeRoom{
					Id:        iotutil.GetNextSeqInt64(),
					HomeId:    homeId,
					RoomName:  dictLabel,
					IconUrl:   dict.Listimg,
					Sort:      iotutil.ToInt32(dict.DictValue),
					CreatedBy: userId,
				})
			}
			tUcHomeRoomDo := tTUcHomeRoom.WithContext(context.Background())
			err = tUcHomeRoomDo.Create(rooms...)
			if err != nil {
				return err
			}

			//continue
		}

		//t := orm.Use(iotmodel.GetDB()).TUcUser
		//do := t.WithContext(context.Background())
		tTUcUserDo := tTUcUser.WithContext(context.Background())
		// fixme 请检查条件和校验参数
		//要更新的字段,不包括主键
		var updateField []field.Expr

		//if req.DefaultHomeId != "" { //字符串
		updateField = append(updateField, tTUcUser.DefaultHomeId)
		tTUcUserDo = tTUcUserDo.Select(updateField...)
		//}
		//if len(updateField) > 0 {
		//
		//}
		//主键条件
		//HasPrimaryKey := false

		//if req.Id != 0 { //整数
		tTUcUserDo = tTUcUserDo.Where(tTUcUser.Id.Eq(userId))
		//	HasPrimaryKey = true
		//}

		//if !HasPrimaryKey {
		//	logger.Error("UpdateUcUser error : Missing condition")
		//	return nil, errors.New("Missing condition")
		//}
		//自动修改默认家庭id
		dbObj := convert.UcUser_pb2db(&proto.UcUser{DefaultHomeId: iotutil.ToString(changeHomeId)})
		_, err = tTUcUserDo.Updates(dbObj)
		if err != nil {
			logger.Errorf("UpdateUcUser error : %s", err.Error())
			return err
		}
	}

	//删除所有用户与当前家庭的关联数据
	_, err = s.DeleteUcHomeUser(&proto.UcHomeUser{
		HomeId:  param.HomeId,
		UserIds: userIds,
	})

	return nil
}

// 根据分页条件查找UcHomeUser,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *UcHomeUserSvc) GetHomeUserList(req *proto.UcHomeUserFilter) ([]*proto.UcHomeUser, int64, error) {
	var err error
	t := orm.Use(iotmodel.GetDB()).TUcHomeUser
	do := t.WithContext(context.Background())
	query := req
	if query != nil {
		if query.HomeId != 0 { //整数
			do = do.Where(t.HomeId.Eq(query.HomeId))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.RoleType != 0 { //整数
			do = do.Where(t.RoleType.Eq(query.RoleType))
		}
		if query.Shared != 0 { //整数
			do = do.Where(t.Shared.Eq(query.Shared))
		}
	}
	do = do.Order(t.CreatedAt.Desc())

	var list []*model.TUcHomeUser
	list, err = do.Find()
	total := int64(len(list))
	if err != nil {
		return nil, 0, err
	}
	if len(list) == 0 {
		return []*proto.UcHomeUser{}, total, nil
	}
	result := make([]*proto.UcHomeUser, len(list))
	for i, v := range list {
		result[i] = convert.UcHomeUser_db2pb(v)
	}
	return result, total, nil
}
