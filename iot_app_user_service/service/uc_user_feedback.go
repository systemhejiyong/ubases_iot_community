// Code generated by sgen.exe,2022-04-18 21:26:14. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_user_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app/model"
	"cloud_platform/iot_model/db_app/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type UcUserFeedbackSvc struct {
	Ctx context.Context
}

// 创建UcUserFeedback
func (s *UcUserFeedbackSvc) CreateUcUserFeedback(req *proto.UcUserFeedback) (*proto.UcUserFeedback, error) {
	userId, err := GetUserId(s.Ctx)
	if err != nil {
		return nil, err
	}
	appKey, err := CheckAppKey(s.Ctx)
	if err != nil {
		return nil, err
	}
	tenantId, err := CheckTenantId(s.Ctx)
	if err != nil {
		return nil, err
	}
	//参数验证
	t := orm.Use(iotmodel.GetDB()).TUcUserFeedback
	do := t.WithContext(context.Background())
	dbObj := convert.UcUserFeedback_pb2db(req)
	dbObj.UserId = userId
	dbObj.AppKey = appKey
	dbObj.Status = 1
	dbObj.TenantId = tenantId
	err = do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateUcUserFeedback error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除UcUserFeedback
func (s *UcUserFeedbackSvc) DeleteUcUserFeedback(req *proto.UcUserFeedback) (*proto.UcUserFeedback, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserFeedback
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.FeedbackContent != "" { //字符串
		do = do.Where(t.FeedbackContent.Eq(req.FeedbackContent))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteUcUserFeedback error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除UcUserFeedback
func (s *UcUserFeedbackSvc) DeleteByIdUcUserFeedback(req *proto.UcUserFeedback) (*proto.UcUserFeedback, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserFeedback
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdUcUserFeedback error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除UcUserFeedback
func (s *UcUserFeedbackSvc) DeleteByIdsUcUserFeedback(req *proto.UcUserFeedbackBatchDeleteRequest) (*proto.UcUserFeedbackBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TUcUserFeedback
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsUcUserFeedback error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新UcUserFeedback
func (s *UcUserFeedbackSvc) UpdateUcUserFeedback(req *proto.UcUserFeedback) (*proto.UcUserFeedback, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserFeedback
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.UserId != 0 { //整数
		updateField = append(updateField, t.UserId)
	}
	if req.ProductId != 0 { //整数
		updateField = append(updateField, t.ProductId)
	}
	if req.FeedbackContent != "" { //字符串
		updateField = append(updateField, t.FeedbackContent)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateUcUserFeedback error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.UcUserFeedback_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateUcUserFeedback error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段UcUserFeedback
func (s *UcUserFeedbackSvc) UpdateAllUcUserFeedback(req *proto.UcUserFeedback) (*proto.UcUserFeedback, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserFeedback
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.UserId)
	updateField = append(updateField, t.ProductId)
	updateField = append(updateField, t.FeedbackTime)
	updateField = append(updateField, t.FeedbackContent)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllUcUserFeedback error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.UcUserFeedback_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllUcUserFeedback error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *UcUserFeedbackSvc) UpdateFieldsUcUserFeedback(req *proto.UcUserFeedbackUpdateFieldsRequest) (*proto.UcUserFeedback, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserFeedback
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFields error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsUcUserFeedback error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.UcUserFeedback_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsUcUserFeedback error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找UcUserFeedback
func (s *UcUserFeedbackSvc) FindUcUserFeedback(req *proto.UcUserFeedbackFilter) (*proto.UcUserFeedback, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserFeedback
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.FeedbackContent != "" { //字符串
		do = do.Where(t.FeedbackContent.Like("%" + req.FeedbackContent + "%"))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindUcUserFeedback error : %s", err.Error())
		return nil, err
	}
	res := convert.UcUserFeedback_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找UcUserFeedback
func (s *UcUserFeedbackSvc) FindByIdUcUserFeedback(req *proto.UcUserFeedbackFilter) (*proto.UcUserFeedback, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserFeedback
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdUcUserFeedback error : %s", err.Error())
		return nil, err
	}
	res := convert.UcUserFeedback_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找UcUserFeedback,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *UcUserFeedbackSvc) GetListUcUserFeedback(req *proto.UcUserFeedbackListRequest) ([]*proto.UcUserFeedback, int64, error) {
	var err error
	//userId, err := GetUserId(s.Ctx)
	//if err != nil {
	//	return nil, 0, err
	//}
	t := orm.Use(iotmodel.GetDB()).TUcUserFeedback
	do := t.WithContext(context.Background()) //.Where(t.UserId.Eq(userId))
	query := req.Query
	if query != nil {
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.ProductKey != "" { //整数
			do = do.Where(t.ProductKey.Eq(query.ProductKey))
		}
		if query.QuestionTypeId != 0 { //整数
			do = do.Where(t.QuestionTypeId.Eq(query.QuestionTypeId))
		}
		if query.FeedbackContent != "" { //字符串
			do = do.Where(t.FeedbackContent.Like("%" + query.FeedbackContent + "%"))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.TenantId != "" {
			do = do.Where(t.TenantId.Eq(query.TenantId))
		}
		if query.AppKey != "" {
			do = do.Where(t.AppKey.Eq(query.AppKey))
		}
		//字典：time_query_mode 1= 全部 =2 最近一周 =3 最近一个月 =4 最近三个月
		if query.TimeQueryMode != 0 {
			switch query.TimeQueryMode {
			case 2:
				do = do.Where(t.CreatedAt.Between(iotutil.BeginningOfWeek(), iotutil.EndOfWeek()))
			case 3:
				do = do.Where(t.CreatedAt.Between(iotutil.BeginningOfMonth(), iotutil.EndOfMonth()))
			case 4:
				do = do.Where(t.CreatedAt.Between(iotutil.BeginningOfQuarter(), iotutil.EndOfQuarter()))
			}
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.CreatedAt.Desc())
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*model.TUcUserFeedback
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListUcUserFeedback error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.UcUserFeedback, len(list))
	for i, v := range list {
		result[i] = convert.UcUserFeedback_db2pb(v)
	}
	return result, total, nil
}

// 根据分页条件查找UcUserFeedback,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *UcUserFeedbackSvc) GetFeedbackLists(req *proto.UcUserFeedbackListRequest) ([]*proto.UcUserFeedback, int64, error) {
	var err error
	userId, err := GetUserId(s.Ctx)
	if err != nil {
		return nil, 0, err
	}

	var q = orm.Use(iotmodel.GetDB())
	tUcUserFeedback := q.TUcUserFeedback
	tUcUserFeedbackResult := q.TUcUserFeedbackResult

	var list []*model.TUcUserFeedback
	userFeedbackDo := tUcUserFeedback.WithContext(context.Background())

	query := req.Query
	if query != nil {
		if query.Id != 0 { //整数
			userFeedbackDo = userFeedbackDo.Where(tUcUserFeedback.Id.Eq(query.Id))
		}
	}

	userFeedbackDo = userFeedbackDo.Where(tUcUserFeedback.UserId.Eq(userId))
	list, err = userFeedbackDo.Find()

	do := tUcUserFeedbackResult.WithContext(context.Background()).LeftJoin(tUcUserFeedback, tUcUserFeedback.Id.EqCol(tUcUserFeedbackResult.FeedbackId))
	do = do.Where(tUcUserFeedback.UserId.Eq(userId), tUcUserFeedback.DeletedAt.IsNull())

	var allList []*struct {
		*model.TUcUserFeedbackResult
	}
	err = do.Select(tUcUserFeedback.ALL, tUcUserFeedbackResult.ALL).Scan(&allList)

	result := make([]*proto.UcUserFeedback, 0)
	for _, v := range list {
		followUpRecord := make([]*proto.FollowUpRecord, 0)
		for _, y := range allList {
			if y.FeedbackId == v.Id {
				followUpRecord = append(followUpRecord, &proto.FollowUpRecord{
					Id:        iotutil.ToString(y.Id),
					ReplyUser: iotutil.ToString(y.CreatedBy),
					ReplyTime: iotutil.ToString(y.CreatedAt.Unix()),
					Content:   y.NotifyContent,
					Pictures:  y.Pictures,
					Videos:    y.Videos,
				})
			}
		}
		db2pbResult := convert.UcUserFeedback_db2pb(v)
		db2pbResult.Records = followUpRecord
		result = append(result, db2pbResult)
	}
	return result, 0, nil
}

// 根据数据库表主键查找UcUserFeedback
func (s *UcUserFeedbackSvc) FeedbackDetails(req *proto.UcUserFeedbackFilter) (*proto.UcUserFeedbackDetailsResponse, error) {
	q := orm.Use(iotmodel.GetDB())
	t := q.TUcUserFeedback
	tUser := q.TUcUser
	tReply := q.TUcUserFeedbackResult

	do := t.WithContext(context.Background())
	if req.Id == 0 {
		return nil, errors.New("编号参数不存在")
	}
	do = do.Where(t.Id.Eq(req.Id))
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FeedbackDetails device error : %s", err.Error())
		return nil, err
	}
	resReply, err := tReply.WithContext(context.Background()).Where(tReply.FeedbackId.Eq(dbObj.Id)).Find()
	if err != nil {
		logger.Errorf("FeedbackDetails reply error : %s", err.Error())
		return nil, err
	}
	replyList := []*proto.ReplyListItem{}
	for _, result := range resReply {
		replyList = append(replyList, &proto.ReplyListItem{
			Id:            iotutil.ToString(result.Id),
			Content:       result.NotifyContent,
			OperationTime: result.CreatedAt.Unix(),
			Operator:      result.CreatedBy,
			Pictures:      result.Pictures,
			Videos:        result.Videos,
		})
	}

	var deviceInfo = &proto.DeviceInfoDto{DeviceID: dbObj.Did}
	if dbObj.Did != "" {
		devStatus, err := s.getDeviceCached(dbObj.Did)
		if err == nil {
			deviceInfo.DeviceName = devStatus["productName"]
			deviceInfo.FirmwareVersion = devStatus["fwVer"]
		}
		//DeviceInfo  //设备信息 改为缓存获取
		//device, err := rpcClient.IotDeviceInfoService.QueryDetails(context.Background(), &proto.IotDeviceInfoFilter{Did: dbObj.Did})
		//if err == nil {
		//	if device.Data != nil && device.Data.DeviceInfo != nil {
		//		deviceInfo.DeviceName = device.Data.DeviceInfo.DeviceName
		//		deviceInfo.FirmwareVersion = device.Data.DeviceStatus["fwVer"]
		//	}
		//}
	}

	var userInfo = &proto.UserInfoDto{}
	users, err := tUser.WithContext(context.Background()).Where(tUser.Id.Eq(dbObj.UserId)).Find()
	if err == nil {
		if users != nil && len(users) > 0 {
			user := users[0]
			userInfo.NickName = user.NickName
			userInfo.Phone = user.Phone
			userInfo.RegisterTime = user.CreatedAt.Unix()
			userInfo.UserAccount = user.UserName
		}
	}
	//UserInfo  //用户信息
	//AppInfo   //客户端信息
	//ReplyList //回复列表
	return &proto.UcUserFeedbackDetailsResponse{
		Data:       convert.UcUserFeedback_db2pb(dbObj),
		DeviceInfo: deviceInfo,
		UserInfo:   userInfo,
		AppInfo: &proto.AppInfoDto{
			AppName:      dbObj.AppKey,
			AppVersion:   dbObj.AppVersion,
			MobileLang:   dbObj.MobileLang,
			MobileModel:  dbObj.MobileModel,
			MobileSystem: dbObj.MobileSystem,
		},
		ReplyList: replyList,
	}, nil
}

func (s *UcUserFeedbackSvc) getDeviceCached(deviceId string) (map[string]string, error) {
	if deviceId == "" {
		return nil, errors.New("设备Id不存在")
	}
	c := iotredis.GetClient().HGetAll(context.Background(), iotconst.HKEY_DEV_DATA_PREFIX+deviceId)
	if c.Err() != nil {
		return nil, c.Err()
	}
	return c.Val(), nil
}
