// Code generated by sgen.exe,2022-04-18 21:26:14. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_user_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app/model"
	"cloud_platform/iot_model/db_app/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type UcHomeRoomSvc struct {
	Ctx context.Context
}

// 创建UcHomeRoom
func (s *UcHomeRoomSvc) CreateUcHomeRoom(req *proto.UcHomeRoom) (*proto.UcHomeRoom, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TUcHomeRoom
	do := t.WithContext(context.Background())
	dbObj := convert.UcHomeRoom_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateUcHomeRoom error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除UcHomeRoom
func (s *UcHomeRoomSvc) DeleteUcHomeRoom(req *proto.UcHomeRoom) (*proto.UcHomeRoom, error) {
	t := orm.Use(iotmodel.GetDB()).TUcHomeRoom
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.HomeId != 0 { //整数
		do = do.Where(t.HomeId.Eq(req.HomeId))
	}
	if req.RoomName != "" { //字符串
		do = do.Where(t.RoomName.Eq(req.RoomName))
	}
	if req.IconUrl != "" { //字符串
		do = do.Where(t.IconUrl.Eq(req.IconUrl))
	}
	if req.Sort != 0 { //整数
		do = do.Where(t.Sort.Eq(req.Sort))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteUcHomeRoom error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除UcHomeRoom
func (s *UcHomeRoomSvc) DeleteByIdUcHomeRoom(req *proto.UcHomeRoom) (*proto.UcHomeRoom, error) {
	t := orm.Use(iotmodel.GetDB()).TUcHomeRoom
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdUcHomeRoom error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除UcHomeRoom
func (s *UcHomeRoomSvc) DeleteByIdsUcHomeRoom(req *proto.UcHomeRoomBatchDeleteRequest) (*proto.UcHomeRoomBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TUcHomeRoom
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsUcHomeRoom error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新UcHomeRoom
func (s *UcHomeRoomSvc) UpdateUcHomeRoom(req *proto.UcHomeRoom) (*proto.UcHomeRoom, error) {
	t := orm.Use(iotmodel.GetDB()).TUcHomeRoom
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.HomeId != 0 { //整数
		updateField = append(updateField, t.HomeId)
	}
	if req.RoomName != "" { //字符串
		updateField = append(updateField, t.RoomName)
		//如果修改了房间名称，则清除与房间模板的关系
		updateField = append(updateField, t.RoomTemplateId)
	}
	if req.IconUrl != "" { //字符串
		updateField = append(updateField, t.IconUrl)
	}
	if req.Sort != 0 { //整数
		updateField = append(updateField, t.Sort)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}

	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateUcHomeRoom error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.UcHomeRoom_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateUcHomeRoom error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段UcHomeRoom
func (s *UcHomeRoomSvc) UpdateAllUcHomeRoom(req *proto.UcHomeRoom) (*proto.UcHomeRoom, error) {
	t := orm.Use(iotmodel.GetDB()).TUcHomeRoom
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.HomeId)
	updateField = append(updateField, t.RoomName)
	updateField = append(updateField, t.IconUrl)
	updateField = append(updateField, t.Sort)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllUcHomeRoom error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.UcHomeRoom_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllUcHomeRoom error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *UcHomeRoomSvc) UpdateFieldsUcHomeRoom(req *proto.UcHomeRoomUpdateFieldsRequest) (*proto.UcHomeRoom, error) {
	t := orm.Use(iotmodel.GetDB()).TUcHomeRoom
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFields error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsUcHomeRoom error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.UcHomeRoom_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsUcHomeRoom error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找UcHomeRoom
func (s *UcHomeRoomSvc) FindUcHomeRoom(req *proto.UcHomeRoomFilter) (*proto.UcHomeRoom, error) {
	t := orm.Use(iotmodel.GetDB()).TUcHomeRoom
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.HomeId != 0 { //整数
		do = do.Where(t.HomeId.Eq(req.HomeId))
	}
	if req.RoomName != "" { //字符串
		do = do.Where(t.RoomName.Like("%" + req.RoomName + "%"))
	}
	if req.IconUrl != "" { //字符串
		do = do.Where(t.IconUrl.Like("%" + req.IconUrl + "%"))
	}
	if req.Sort != 0 { //整数
		do = do.Where(t.Sort.Eq(req.Sort))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindUcHomeRoom error : %s", err.Error())
		return nil, err
	}
	res := convert.UcHomeRoom_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找UcHomeRoom
func (s *UcHomeRoomSvc) FindByIdUcHomeRoom(req *proto.UcHomeRoomFilter) (*proto.UcHomeRoom, error) {
	t := orm.Use(iotmodel.GetDB()).TUcHomeRoom
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdUcHomeRoom error : %s", err.Error())
		return nil, err
	}
	res := convert.UcHomeRoom_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找UcHomeRoom,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *UcHomeRoomSvc) GetListUcHomeRoom(req *proto.UcHomeRoomListRequest) ([]*proto.UcHomeRoom, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TUcHomeRoom
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.HomeId != 0 { //整数
			do = do.Where(t.HomeId.Eq(query.HomeId))
		}
		if query.HomeIds != nil && len(query.HomeIds) > 0 {
			do = do.Where(t.HomeId.In(query.HomeIds...))
		}
		if query.RoomName != "" { //字符串
			do = do.Where(t.RoomName.Like("%" + query.RoomName + "%"))
		}
		if query.IconUrl != "" { //字符串
			do = do.Where(t.IconUrl.Like("%" + query.IconUrl + "%"))
		}
		if query.Sort != 0 { //整数
			do = do.Where(t.Sort.Eq(query.Sort))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		//默认排序按照sort排序
		do = do.Order(t.Sort.Desc())
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*model.TUcHomeRoom
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListUcHomeRoom error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.UcHomeRoom, len(list))
	for i, v := range list {
		result[i] = convert.UcHomeRoom_db2pb(v)
	}
	return result, total, nil
}

func (s *UcHomeRoomSvc) SetSort(req *proto.UcHomeRoomSortRequest) (*proto.UcHomeRoom, error) {
	t := orm.Use(iotmodel.GetDB()).TUcHomeRoom
	do := t.WithContext(context.Background())
	homeId := req.HomeId

	for _, v := range req.Data {
		sort := v.Sort
		roomId := v.RoomId
		do.Where(t.Id.Eq(roomId), t.HomeId.Eq(homeId)).Select(t.Sort).UpdateColumn(t.Sort, sort)
	}
	return nil, nil
}

func (s *UcHomeRoomSvc) GetListUcHomeRoomByIds(req *proto.UcHomeRoomFilter) ([]*proto.UcHomeRoom, int64, error) {
	t := orm.Use(iotmodel.GetDB()).TUcHomeRoom
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.RoomIds == nil || len(req.RoomIds) == 0 {
		return nil, 0, errors.New("请传入产品编号集合")
	}

	if len(req.RoomIds) > 0 { //int64数组
		do = do.Where(t.WithContext(context.Background()).Where(t.Id.In(req.RoomIds...)))
	}

	var list []*model.TUcHomeRoom
	var total int64
	list, err := do.Find()
	total = int64(len(list))
	if err != nil {
		logger.Errorf("GetListOpmProduct error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.UcHomeRoom, len(list))
	for i, v := range list {
		result[i] = convert.UcHomeRoom_db2pb(v)
	}
	return result, total, nil
}
