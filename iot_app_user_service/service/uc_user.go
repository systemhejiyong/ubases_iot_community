// Code generated by sgen.exe,2022-04-26 16:18:52. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_app_api_service/controls/common/entitys"
	"cloud_platform/iot_app_user_service/rpc/rpcClient"
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_common/iotutil"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"strings"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	_const "cloud_platform/iot_app_user_service/const"
	"cloud_platform/iot_app_user_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app/model"
	"cloud_platform/iot_model/db_app/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type UcUserSvc struct {
	Ctx context.Context
}

// 创建UcUser
func (s *UcUserSvc) CreateUcUser(req *proto.UcUser) (*proto.UcUser, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TUcUser
	do := t.WithContext(context.Background())
	dbObj := convert.UcUser_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateUcUser error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除UcUser
func (s *UcUserSvc) DeleteUcUser(req *proto.UcUser) (*proto.UcUser, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUser
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Uid != "" { //字符串
		do = do.Where(t.Uid.Eq(req.Uid))
	}
	if req.NickName != "" { //字符串
		do = do.Where(t.NickName.Eq(req.NickName))
	}
	if req.Phone != "" { //字符串
		do = do.Where(t.Phone.Eq(req.Phone))
	}
	if req.Password != "" { //字符串
		do = do.Where(t.Password.Eq(req.Password))
	}
	if req.DeviceSecretHttp != "" { //字符串
		do = do.Where(t.DeviceSecretHttp.Eq(req.DeviceSecretHttp))
	}
	if req.DeviceSecretMqtt != "" { //字符串
		do = do.Where(t.DeviceSecretMqtt.Eq(req.DeviceSecretMqtt))
	}
	if req.Photo != "" { //字符串
		do = do.Where(t.Photo.Eq(req.Photo))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.Country != "" { //字符串
		do = do.Where(t.Country.Eq(req.Country))
	}
	if req.Province != "" { //字符串
		do = do.Where(t.Province.Eq(req.Province))
	}
	if req.City != "" { //字符串
		do = do.Where(t.City.Eq(req.City))
	}
	if req.District != "" { //字符串
		do = do.Where(t.District.Eq(req.District))
	}
	if req.Email != "" { //字符串
		do = do.Where(t.Email.Eq(req.Email))
	}
	if req.DefaultHomeId != "" { //字符串
		do = do.Where(t.DefaultHomeId.Eq(req.DefaultHomeId))
	}
	if req.Gender != 0 { //整数
		do = do.Where(t.Gender.Eq(req.Gender))
	}
	if req.RegisterRegion != "" { //字符串
		do = do.Where(t.RegisterRegion.Eq(req.RegisterRegion))
	}
	if req.RegionServerId != 0 {
		do = do.Where(t.RegionServerId.Eq(req.RegionServerId))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.CancelTime != 0 { //整数
		do = do.Where(t.CancelTime.Eq(req.CancelTime))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteUcUser error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除UcUser
func (s *UcUserSvc) DeleteByIdUcUser(req *proto.UcUser) (*proto.UcUser, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUser
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdUcUser error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除UcUser
func (s *UcUserSvc) DeleteByIdsUcUser(req *proto.UcUserBatchDeleteRequest) (*proto.UcUserBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TUcUser
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsUcUser error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新UcUser
func (s *UcUserSvc) UpdateUcUser(req *proto.UcUser) (*proto.UcUser, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUser
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Uid != "" { //字符串
		updateField = append(updateField, t.Uid)
	}
	if req.NickName != "" { //字符串
		updateField = append(updateField, t.NickName)
	}
	if req.UserName != "" { //字符串
		updateField = append(updateField, t.UserName)
	}
	if req.Phone != "" { //字符串
		updateField = append(updateField, t.Phone)
	}
	if req.Password != "" { //字符串
		updateField = append(updateField, t.Password)
		userInfo, err := do.Where(t.Id.Eq(req.Id)).Find()
		if err != nil {
			return nil, errors.New(fmt.Sprintf("user not found, %v", req.Id))
		}
		req.Password = iotutil.Md5(req.Password + userInfo[0].UserSalt)
	}
	if req.DeviceSecretHttp != "" { //字符串
		updateField = append(updateField, t.DeviceSecretHttp)
	}
	if req.DeviceSecretMqtt != "" { //字符串
		updateField = append(updateField, t.DeviceSecretMqtt)
	}
	if req.Photo != "" { //字符串
		updateField = append(updateField, t.Photo)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.Lang != "" { //字符串
		updateField = append(updateField, t.Lang)
	}
	if req.Country != "" { //字符串
		updateField = append(updateField, t.Country)
		updateField = append(updateField, t.Province)
		updateField = append(updateField, t.City)
	}
	if req.Province != "" { //字符串
		updateField = append(updateField, t.Province)
	}
	if req.City != "" { //字符串
		updateField = append(updateField, t.City)
	}
	if req.District != "" { //字符串
		updateField = append(updateField, t.District)
	}
	if req.Email != "" { //字符串
		updateField = append(updateField, t.Email)
	}
	if req.DefaultHomeId != "" { //字符串
		updateField = append(updateField, t.DefaultHomeId)
	}
	if req.Gender != 0 { //整数
		updateField = append(updateField, t.Gender)
	}
	if req.RegisterRegion != "" { //字符串
		updateField = append(updateField, t.RegisterRegion)
	}
	if req.RegionServerId != 0 { //整数
		updateField = append(updateField, t.RegionServerId)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if req.CancelTime != 0 { //整数
		updateField = append(updateField, t.CancelTime)
	}
	if req.Birthday.IsValid() { //整数
		updateField = append(updateField, t.Birthday)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateUcUser error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.UcUser_pb2db(req)
	if req.Country != "" {
		dbObj.Province = ""
		dbObj.City = ""
	}
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateUcUser error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段UcUser
func (s *UcUserSvc) UpdateAllUcUser(req *proto.UcUser) (*proto.UcUser, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUser
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Uid)
	updateField = append(updateField, t.NickName)
	updateField = append(updateField, t.Phone)
	updateField = append(updateField, t.Password)
	updateField = append(updateField, t.DeviceSecretHttp)
	updateField = append(updateField, t.DeviceSecretMqtt)
	updateField = append(updateField, t.Photo)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.Lang)
	updateField = append(updateField, t.Lat)
	updateField = append(updateField, t.Lng)
	updateField = append(updateField, t.Country)
	updateField = append(updateField, t.Province)
	updateField = append(updateField, t.City)
	updateField = append(updateField, t.District)
	updateField = append(updateField, t.Email)
	updateField = append(updateField, t.DefaultHomeId)
	updateField = append(updateField, t.Gender)
	updateField = append(updateField, t.RegisterRegion)
	updateField = append(updateField, t.RegionServerId)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	updateField = append(updateField, t.CancelTime)
	updateField = append(updateField, t.Birthday)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllUcUser error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.UcUser_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllUcUser error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *UcUserSvc) UpdateFieldsUcUser(req *proto.UcUserUpdateFieldsRequest) (*proto.UcUser, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUser
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsUcUser error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsUcUser error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.UcUser_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsUcUser error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找UcUser
func (s *UcUserSvc) FindUcUser(req *proto.UcUserFilter) (*proto.UcUser, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUser
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	if req.Phone != "" { //字符串
		do = do.Where(t.Phone.Eq(req.Phone))
	}
	//if req.Password != "" { //字符串
	//	do = do.Where(t.Password.Eq(req.Password))
	//}
	do = do.Where(t.Status.In(1, 2))
	if req.Email != "" { //字符串
		do = do.Where(t.Email.Eq(req.Email))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.RegionServerId != 0 {
		do = do.Where(t.RegionServerId.Eq(req.RegionServerId))
	}
	if req.UserName != "" { //字符串
		do = do.Where(t.UserName.Eq(req.UserName))
	}
	if req.AppKey == "" { // || req.TenantId == ""
		return nil, errors.New("请传入必要参数appKey")
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindUcUser error : %s", err.Error())
		return nil, err
	}
	res := convert.UcUser_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找UcUser
func (s *UcUserSvc) FindByIdUcUser(req *proto.UcUserFilter) (*proto.UcUser, error) {
	q := orm.Use(iotmodel.GetDB())
	t := q.TUcUser
	tHome := q.TUcHome

	do := t.WithContext(context.Background()).LeftJoin(tHome, tHome.Id.EqCol(t.DefaultHomeId))
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}

	var userInfo struct {
		model.TUcUser
		HomeName string `gorm:"column:home_name;not null" json:"homeName"`
	}

	err := do.Select(t.ALL, tHome.Name.As("home_name")).Scan(&userInfo)
	if err != nil {
		logger.Errorf("FindByIdUcUser error : %s", err.Error())
		return nil, err
	}
	res := convert.UcUser_db2pb(&userInfo.TUcUser)
	res.DefaultHomeName = userInfo.HomeName
	return res, err
}

// 根据数据库表主键查找UcUser
func (s *UcUserSvc) FindByAccountUcUser(req *proto.UcUserFilter) (*proto.UcUser, error) {
	q := orm.Use(iotmodel.GetDB())
	t := q.TUcUser
	tHome := q.TUcHome

	do := t.WithContext(context.Background()).LeftJoin(tHome, tHome.Id.EqCol(t.DefaultHomeId))
	// fixme 请检查条件和校验参数

	if req.Phone != "" {
		do = do.Where(t.Phone.Eq(req.Phone))
	}

	if req.Email != "" {
		do = do.Where(t.Email.Eq(req.Email))
	}

	if req.AppKey != "" {
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}

	if req.TenantId != "" {
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}

	if req.RegionServerId != 0 {
		do = do.Where(t.RegionServerId.Eq(req.RegionServerId))
	}

	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindUcUser error : %s", err.Error())
		return nil, err
	}
	res := convert.UcUser_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找UcUser,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *UcUserSvc) GetListUcUser(req *proto.UcUserListRequest) ([]*proto.UcUser, int64, error) {
	var err error
	tenantId, err := CheckTenantId(s.Ctx)
	if err != nil || tenantId == "" {
		return nil, 0, errors.New("获取tenantId失败")
	}
	// fixme 请检查条件和校验参数

	t := orm.Use(iotmodel.GetDB()).TUcUser
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Uid != "" { //字符串
			do = do.Where(t.Uid.Eq(query.Uid))
		}
		if query.NickName != "" { //字符串
			do = do.Where(t.NickName.Like("%" + query.NickName + "%"))
		}
		if query.Phone != "" { //字符串
			do = do.Where(t.Phone.Eq(query.Phone))
		}
		if query.Password != "" { //字符串
			do = do.Where(t.Password.Eq(query.Password))
		}
		if query.UserName != "" { //字符串
			do = do.Where(t.UserName.Eq(query.UserName))
		}
		if query.AppOrigin != "" { //字符串
			//do = do.Where(t.AppKey.Eq(query.AppKey))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.Lang != "" { //字符串
			do = do.Where(t.Lang.Eq(query.Lang))
		}
		if query.Country != "" { //字符串
			do = do.Where(t.Country.Eq(query.Country))
		}
		if query.Province != "" { //字符串
			do = do.Where(t.Province.Eq(query.Province))
		}
		if query.City != "" { //字符串
			do = do.Where(t.City.Eq(query.City))
		}
		if query.District != "" { //字符串
			do = do.Where(t.District.Eq(query.District))
		}
		if query.Email != "" { //字符串
			do = do.Where(t.Email.Eq(query.Email))
		}
		if query.AppKey != "" { //字符串
			do = do.Where(t.AppKey.Eq(query.AppKey))
		}
		if query.DefaultHomeId != "" { //字符串
			do = do.Where(t.DefaultHomeId.Eq(query.DefaultHomeId))
		}
		if query.Gender != 0 { //整数
			do = do.Where(t.Gender.Eq(query.Gender))
		}
		if query.RegisterRegion != "" { //字符串
			do = do.Where(t.RegisterRegion.Eq(query.RegisterRegion))
		}
		if query.CancelTime != 0 { //整数
			do = do.Where(t.CancelTime.Eq(query.CancelTime))
		}
		if query.RegionServerId != 0 {
			do = do.Where(t.RegionServerId.Eq(query.RegionServerId))
		}
	}
	if tenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(tenantId))
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.CreatedAt.Desc())
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*model.TUcUser
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListUcUser error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.UcUser, len(list))
	for i, v := range list {
		result[i] = convert.UcUser_db2pb(v)
	}
	return result, total, nil
}

// 从请求内容中获取账号和昵称
func (s *UcUserSvc) getUserAccount(req *proto.UcUserRegisterRequest) (string, string) {
	var account, nickname string
	if req.Email != "" {
		account = req.Email
	} else if req.Phone != "" {
		account = req.Phone
	}

	if account != "" {
		nickname = iotutil.Substr(account, 0, 4) + "****"
	} else {
		nickname = req.ThirdNickname
	}
	return account, nickname
}

// 检查账号是否重复
func (s *UcUserSvc) checkAccount(req *proto.UcUserRegisterRequest, account string) error {
	if account != "" {
		userInfo, _ := s.FindUcUser(&proto.UcUserFilter{
			Phone:          req.Phone,
			Password:       req.Password,
			Email:          req.Email,
			AppKey:         req.AppKey,
			TenantId:       req.TenantId,
			RegionServerId: req.RegionServerId,
		})
		if userInfo != nil && userInfo.Id != 0 {
			logger.Errorf("手机号或邮箱已经注册:%s", account)
			return errors.New(fmt.Sprintf("手机号或邮箱已经注册:%s", account))
		}
	}
	return nil
}

// 获取房间，并读取翻译
func (s UcUserSvc) GetDefaultRooms(lang, tenantId, appKey string) (res []entitys.TConfigDictData) {
	//key := fmt.Sprintf(iotconst.DICT_DATA, lang) + "_" + iotconst.Dict_type_default_rooms
	key := fmt.Sprintf("%s_%s_%s_%s", tenantId, lang, iotconst.LANG_OEM_APP_ROOMS, appKey)
	rooms := iotredis.GetClient().Get(context.Background(), key)
	if rooms.Err() == nil && rooms.Val() != "" {
		err := json.Unmarshal([]byte(rooms.Val()), &res)
		if err == nil {
			return res
		}
	}

	//获取默认房间信息
	res = []entitys.TConfigDictData{}
	oemAppResult, err := rpcClient.ClientOemAppService.Find(context.Background(), &proto.OemAppFilter{
		AppKey: appKey,
	})
	if err == nil && oemAppResult.Code == 200 && len(oemAppResult.Data) > 0 {
		oemAppInfo := oemAppResult.Data[0]
		oemAppFunctionConfig, err := rpcClient.ClientOemAppUiConfigService.Find(context.Background(), &proto.OemAppUiConfigFilter{
			AppId:   oemAppInfo.Id,
			Version: oemAppInfo.Version,
		})
		if err == nil && oemAppResult.Code == 200 && len(oemAppFunctionConfig.Data) > 0 && oemAppFunctionConfig.Data[0].Room != "" {
			roomConfigs := iotutil.JsonToMapArray(oemAppFunctionConfig.Data[0].Room)
			for _, roomConfig := range roomConfigs {
				res = append(res, entitys.TConfigDictData{
					DictCode:  iotutil.ToInt64(roomConfig["roomId"]),
					DictLabel: iotutil.ToString(roomConfig["roomName"]),
					DictValue: iotutil.ToString(roomConfig["roomSort"]),
					DictType:  "",
					Listimg:   iotutil.ToString(roomConfig["roomImage"]),
				})
			}
		}
	}
	langMap := make(map[string]string)
	if lang != "" {
		langKey := fmt.Sprintf("%s_%s%s_%s", tenantId, iotconst.HKEY_LANGUAGE_DATA_PREFIX, iotconst.LANG_OEM_APP_ROOMS, appKey)
		langMap, err = iotredis.GetClient().HGetAll(context.Background(), langKey).Result()
		if err != nil {
			langMap = make(map[string]string)
		}
	}
	for i, dict := range res {
		dictLabel := iotutil.MapGetStringVal(langMap[fmt.Sprintf("%s_%v_name", lang, dict.DictCode)], dict.DictLabel)
		res[i].DictLabel = dictLabel
	}
	iotredis.GetClient().Set(context.Background(), key, iotutil.ToString(res), 0)
	return res
}

// 注册
func (s *UcUserSvc) Register(req *proto.UcUserRegisterRequest) (*proto.UcUser, error) {
	lang, _ := CheckLang(s.Ctx)
	var resUser *proto.UcUser
	account, nickname := s.getUserAccount(req)
	if err := s.checkAccount(req, account); err != nil {
		return nil, err
	}
	//获取区域数据，并将区域转换为Id
	//geo, err := iotutil.Geoip(req.Ip, config.Global.IpService.QueryUrl, config.Global.IpService.AppCode) //根据ip获取位置信息
	geo, err := Geoip(req.Ip)
	areaMap := map[string]string{}
	var (
		countryId  int64 = 0
		provinceId int64 = 0
		cityId     int64 = 0
	)
	//去除尾部 省、市
	if strings.HasSuffix(geo.Province, "省") {
		geo.Province = strings.TrimSuffix(geo.Province, "省")
	}
	if strings.HasSuffix(geo.City, "市") {
		geo.City = strings.TrimSuffix(geo.City, "市")
	}
	if err != nil {
		logger.Errorf("get address by ip[%s], error:%s", req.Ip, err.Error())
	} else {
		areaList, err := rpcClient.ClientSysAreaService.Lists(context.Background(), &proto.SysAreaListRequest{Query: &proto.SysArea{
			EnableGetCode: true,
			Country:       geo.Country,
			City:          geo.City,
			Province:      geo.Province,
			Pid:           -1,
		}})
		if err == nil {
			for _, a := range areaList.Data {
				areaMap[a.ChineseName] = iotutil.ToString(a.Id)
				areaMap[a.EnglishName] = iotutil.ToString(a.Id)
			}
		}
		countryId = iotutil.MapGetInt64Val(areaMap[geo.Country], 0)   //geo.Country,
		provinceId = iotutil.MapGetInt64Val(areaMap[geo.Province], 0) //geo.Province,
		cityId = iotutil.MapGetInt64Val(areaMap[geo.City], 0)         //geo.City,
		//districtId = iotutil.MapGetInt64Val(areaMap[geo.District], 0) //geo.District,
	}
	defaultRooms := s.GetDefaultRooms(req.Lang, req.TenantId, req.AppKey)
	q := orm.Use(iotmodel.GetDB())
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TUcUser
		TUcUserDo := t.WithContext(context.Background())
		// fixme 请检查条件和校验参数
		userId := iotutil.GetNextSeqInt64()
		homeId := iotutil.GetNextSeqInt64()
		resUser = &proto.UcUser{Id: userId}
		if req.UserSalt == "" {
			req.UserSalt = iotutil.GetSecret(6)
			//默认密码逻辑
			if req.Password == "" {
				req.Password = iotutil.EncodeMD5(iotutil.EncodeMD5(iotutil.GetSecret(6))+req.UserSalt)
			} else {
				req.Password = iotutil.EncodeMD5(req.Password+req.UserSalt)
			}
		}
		//如果账号为空，同时第三登录不为空格
		//if account == "" && req.ThirdUserId != "" {
		//	account = req.ThirdUserId
		//}

		tUcUser := &model.TUcUser{
			Id:             userId,
			Uid:            iotutil.GetSecret(16),
			NickName:       nickname,
			UserName:       account,
			AppOrigin:      "1",
			Phone:          req.Phone,
			Password:       req.Password,
			UserSalt:       req.UserSalt,
			AppKey:         req.AppKey,
			TenantId:       req.TenantId,
			RegisterRegion: req.RegisterRegion,
			RegionServerId: req.RegionServerId,
			RegisterRegionId: req.RegisterRegionId,
			DefaultHomeId:  iotutil.ToString(homeId),
			Photo:          "",
			Status:         int32(_const.AccountNormal),
			Gender:         int32(_const.GenderOther), //注册时默认为其他
			Lang:           "",
			Lat:            geo.Lat,
			Lng:            geo.Lng,
			Country:        iotutil.ToString(countryId),
			Province:       iotutil.ToString(provinceId),
			City:           iotutil.ToString(cityId),
			ContactArea:    iotutil.ToString(countryId),
			ContactCountry: iotutil.ToString(provinceId),
			District:       geo.District,
			Email:          req.Email,
		}

		err := TUcUserDo.Create(tUcUser)
		if err != nil {
			logger.Errorf("TUcUser create failed, error:%s", err.Error())
			return err
		}

		tUcHomeDo := tx.TUcHome.WithContext(context.Background())
		tUcHome := &model.TUcHome{
			Id:         homeId,
			Name:       getAppDefaultHomeName(lang),
			IconUrl:    "",
			Sid:        req.RegionServerId,
			Lat:        geo.Lat,
			Lng:        geo.Lng,
			Country:    geo.Country,
			Province:   geo.Province,
			City:       geo.City,
			District:   geo.District,
			Address:    geo.Province + geo.City + geo.District,
			CountryId:  countryId,
			ProvinceId: provinceId,
			CityId:     cityId,
			CreatedBy:  userId,
		}

		err = tUcHomeDo.Create(tUcHome)
		if err != nil {
			logger.Errorf("TUcHome create failed, error:%s", err.Error())
			return err
		}

		tUcHomeUserDo := tx.TUcHomeUser.WithContext(context.Background())
		tUcHomeUser := &model.TUcHomeUser{
			Id:        iotutil.GetNextSeqInt64(),
			HomeId:    homeId,
			UserId:    userId,
			RoleType:  1,
			BindTime:  time.Now(),
			Shared:    1,
			CreatedBy: userId,
		}

		err = tUcHomeUserDo.Create(tUcHomeUser)
		if err != nil {
			logger.Errorf("TUcHomeUser create failed, error:%s", err.Error())
			return err
		}

		if req.ThirdUserId != "" {
			tUcUserThirdDo := tx.TUcUserThird.WithContext(context.Background())
			tUcUserThird := &model.TUcUserThird{
				Id:             iotutil.GetNextSeqInt64(),
				UserId:         userId,
				ThirdType:      iotutil.ToInt32(req.ThirdType),
				ThirdUserId:    req.ThirdUserId,
				Nickname:       req.ThirdNickname,
				CreatedBy:      userId,
				UpdatedBy:      userId,
				AppKey:         req.AppKey,
				TenantId:       req.TenantId,
				RegionServerId: req.RegionServerId,
			}

			err = tUcUserThirdDo.Create(tUcUserThird)
			if err != nil {
				logger.Errorf("TUcUserThird create failed, error:%s", err.Error())
				return err
			}
		}

		rooms := make([]*model.TUcHomeRoom, 0)
		for _, dict := range defaultRooms {
			rooms = append(rooms, &model.TUcHomeRoom{
				Id:             iotutil.GetNextSeqInt64(),
				HomeId:         homeId,
				RoomName:       dict.DictLabel,
				IconUrl:        dict.Listimg,
				Sort:           iotutil.ToInt32(dict.DictValue),
				RoomTemplateId: dict.DictCode,
				CreatedBy:      userId,
			})
		}
		err = tx.TUcHomeRoom.WithContext(context.Background()).Create(rooms...)
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("tUcHomeRoom create failed, error:%s", err.Error())
		return nil, err
	}
	return resUser, nil
}

// 用户家庭列表
func (s *UcUserSvc) HomeList(id int64) ([]*proto.UcUserHome, error) {
	//TODO 租户ID和AppKey加入检索条件
	db := orm.Use(iotmodel.GetDB())
	homeUserDo := db.TUcHomeUser
	homeDo := db.TUcHome
	homeRoomDo := db.TUcHomeRoom

	result := make([]*struct {
		Name   string
		Shared int32
		HomeId int64
	}, 0)

	//用户关联的家庭列表
	err := homeUserDo.WithContext(context.Background()).Select(homeDo.Name, homeUserDo.Shared, homeUserDo.HomeId).
		LeftJoin(homeDo, homeDo.Id.EqCol(homeUserDo.HomeId)).
		Where(homeUserDo.UserId.Eq(id), homeDo.DeletedAt.IsNull()).Order(homeDo.CreatedAt).Scan(&result)
	if err != nil {
		logger.Errorf("THomeList get failed, error:%s", err.Error())
		return nil, err
	}
	homeIds := []int64{}
	for _, v := range result {
		homeIds = append(homeIds, v.HomeId)
	}

	//获取每个家庭的设备数量
	homeDevCounts, err := rpcClient.IotDeviceHomeService.HomeDevCount(context.Background(), &proto.IotDeviceHomeHomeId{
		HomeIds: homeIds,
	})
	if err != nil {
		logger.Errorf("THomeList HomeDevCount for failed, error:%s", err.Error())
		//return nil, err
		homeDevCounts = &proto.IotHomeDevCountResponse{DevCounts: map[int64]int32{}}
	}
	if homeDevCounts.Code != 200 {
		logger.Errorf("THomeList HomeDevCount for failed, code not 200 :%s", homeDevCounts.Message)
		//return nil, errors.New(homeDevCounts.Message)
		homeDevCounts = &proto.IotHomeDevCountResponse{DevCounts: map[int64]int32{}}
	}

	//读取家庭用户数量
	resultUserCount := make([]*struct {
		HomeId int64
		Count  int32
	}, 0)

	err = homeUserDo.WithContext(context.Background()).Select(homeUserDo.HomeId, homeUserDo.Id.Count().As("count")).
		Where(homeUserDo.HomeId.In(homeIds...), homeUserDo.DeletedAt.IsNull()).Group(homeUserDo.HomeId).Scan(&resultUserCount)

	if err != nil {
		logger.Errorf("THomeList homeUser for failed, error:%s", err.Error())
		return nil, err
	}

	homeUserCount := make(map[int64]int32)
	for _, user := range resultUserCount {
		homeUserCount[user.HomeId] = user.Count
	}

	//读取家庭房间数量
	resultRoomCount := make([]*struct {
		HomeId int64
		Count  int32
	}, 0)
	err = homeRoomDo.WithContext(context.Background()).Select(homeRoomDo.HomeId, homeRoomDo.Id.Count().As("count")).
		Where(homeRoomDo.HomeId.In(homeIds...), homeRoomDo.DeletedAt.IsNull()).Group(homeRoomDo.HomeId).Scan(&resultRoomCount)

	if err != nil {
		logger.Errorf("THomeList homeRoom for failed, error:%s", err.Error())
		return nil, err
	}
	homeRoomCount := make(map[int64]int32)
	for _, roomCount := range resultRoomCount {
		homeRoomCount[roomCount.HomeId] = roomCount.Count
	}

	homeUsers := []*proto.UcUserHome{}
	for _, v := range result {
		//获取家庭设备数量统计
		var devCount int32 = 0
		if val, ok := homeDevCounts.DevCounts[v.HomeId]; ok {
			devCount = val
		}

		var userCount int32 = 0
		if val, ok := homeUserCount[v.HomeId]; ok {
			userCount = val
		}

		var roomCount int32 = 0
		if val, ok := homeRoomCount[v.HomeId]; ok {
			roomCount = val
		}

		userHome := proto.UcUserHome{
			Id:         v.HomeId,
			Type:       v.Shared,
			Name:       v.Name,
			RoomList:   roomCount,
			UserList:   userCount,
			DeviceList: devCount,
		}
		homeUsers = append(homeUsers, &userHome)
	}
	return homeUsers, err
}

// 根据分页条件查找UcUser,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *UcUserSvc) GetUserByLogin(req *proto.UcUserByLoginRequest) ([]*proto.UcUser, error) {
	var err error
	t := orm.Use(iotmodel.GetDB()).TUcUser
	do := t.WithContext(context.Background())

	hasMustWhere := false
	do = do.Where(t.AppKey.Eq(req.AppKey))
	if req.RegionServerId != 0 {
		do = do.Where(t.RegionServerId.Eq(req.RegionServerId))
	}
	if req.Phone != "" { //字符串
		hasMustWhere = true
		do = do.Where(t.Phone.Eq(req.Phone))
	}
	if req.Password != "" { //字符串
		do = do.Where(t.Password.Eq(req.Password))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.Email != "" { //字符串
		hasMustWhere = true
		do = do.Where(t.Email.Eq(req.Email))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.RegionServerId != 0 { //整数
		do = do.Where(t.RegionServerId.Eq(req.RegionServerId))
	}

	if !hasMustWhere {
		return nil, errors.New("请传入必要参数")
	}
	// if req.AppKey == "" || req.TenantId == "" {
	// 	return nil, errors.New("请传入必要参数appKey、tenantId")
	// }

	if req.AppKey == "" {
		return nil, errors.New("请传入必要参数appKey")
	}

	list, err := do.Find()
	if err != nil {
		logger.Errorf("GetUserByLogin error : %s", err.Error())
		return nil, err
	}
	if len(list) == 0 {
		return nil, errors.New("未找到任何用户信息")
	}
	result := make([]*proto.UcUser, len(list))
	for i, v := range list {
		result[i] = convert.UcUser_db2pb(v)
	}
	return result, nil
}

// //根据主键更新所有字段UcUser
func (s *UcUserSvc) LoginSuccess(req *proto.UcUserLoginSuccessRequest) error {
	dbOrm := orm.Use(iotmodel.GetDB())
	tUser := dbOrm.TUcUser
	do := tUser.WithContext(context.Background())

	//解除用户注销状态
	//if req.AccountCasser {
	//	_, err := do.Where(tUser.Id.Eq(req.User.Id)).Select(tUser.Status).UpdateColumn(tUser.Status, 1)
	//	if err != nil {
	//		logger.Errorf("LoginSuccess 取消注销状态异常 : %s", err.Error())
	//		return err
	//	}
	//}
	//记录登录时间
	_, err := do.Where(tUser.Id.Eq(req.User.Id)).Select(tUser.LoginTime).UpdateColumn(tUser.LoginTime, timestamppb.Now().AsTime())
	if err != nil {
		logger.Errorf("saveLoginTime 状态异常 : %s", err.Error())
		//return err
	}
	//记录登录日志

	return nil
}

// 获取房间，并读取翻译
func getAppDefaultHomeName(lang string) string {
	if lang == "" {
		logger.Error("获取默认家庭名称异常，lang为空")
		return _const.DefaultHomeName
	}
	key := fmt.Sprintf("%s_%s", iotconst.HKEY_LANGUAGE_DATA_PREFIX, iotconst.Dict_app_default)
	datas := iotredis.GetClient().HGetAll(context.Background(), key)
	if datas.Err() != nil {
		return _const.DefaultHomeName
	}
	langKey := fmt.Sprintf("%s_default_home_name", iotconst.HKEY_LANGUAGE_DATA_PREFIX)
	name := datas.Val()[langKey]
	if name == "" {
		return _const.DefaultHomeName
	}
	return name
}

// 根据主键更新UcUser
func (s *UcUserSvc) UpdateAgreementFlag(req *proto.UcUser) (*proto.UcUser, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUser
	do := t.WithContext(context.Background())
	do = do.Where(t.AppKey.Eq(req.AppKey))
	if req.TenantId != "" {
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	_, err := do.UpdateColumn(t.AgreementFlag, req.AgreementFlag)
	if err != nil {
		logger.Errorf("UpdateUcUser error : %s", err.Error())
		return nil, err
	}
	return req, err
}

