// Code generated by sgen.exe,2022-04-18 21:26:15. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_app_user_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_app/model"
	"cloud_platform/iot_model/db_app/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type UcUserThirdSvc struct {
	Ctx context.Context
}

// 创建UcUserThird
func (s *UcUserThirdSvc) CreateUcUserThird(req *proto.UcUserThird) (*proto.UcUserThird, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TUcUserThird
	do := t.WithContext(context.Background())
	dbObj := convert.UcUserThird_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateUcUserThird error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除UcUserThird
func (s *UcUserThirdSvc) DeleteUcUserThird(req *proto.UcUserThird) (*proto.UcUserThird, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserThird
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.ThirdType != 0 { //整数
		do = do.Where(t.ThirdType.Eq(req.ThirdType))
	}
	if req.ThirdUserId != "" { //字符串
		do = do.Where(t.ThirdUserId.Eq(req.ThirdUserId))
	}
	if req.Nickname != "" { //字符串
		do = do.Where(t.Nickname.Eq(req.Nickname))
	}
	if req.AppKey != "" {
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.TenantId != "" {
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.RegionServerId != 0 {
		do = do.Where(t.RegionServerId.Eq(req.RegionServerId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteUcUserThird error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除UcUserThird
func (s *UcUserThirdSvc) DeleteByIdUcUserThird(req *proto.UcUserThird) (*proto.UcUserThird, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserThird
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdUcUserThird error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除UcUserThird
func (s *UcUserThirdSvc) DeleteByIdsUcUserThird(req *proto.UcUserThirdBatchDeleteRequest) (*proto.UcUserThirdBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TUcUserThird
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsUcUserThird error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新UcUserThird
func (s *UcUserThirdSvc) UpdateUcUserThird(req *proto.UcUserThird) (*proto.UcUserThird, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserThird
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.UserId != 0 { //整数
		updateField = append(updateField, t.UserId)
	}
	if req.ThirdType != 0 { //整数
		updateField = append(updateField, t.ThirdType)
	}
	if req.ThirdUserId != "" { //字符串
		updateField = append(updateField, t.ThirdUserId)
	}
	if req.Nickname != "" { //字符串
		updateField = append(updateField, t.Nickname)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if req.AppKey != "" {
		updateField = append(updateField, t.AppKey)
	}
	if req.TenantId != "" {
		updateField = append(updateField, t.TenantId)
	}
	if req.RegionServerId != 0 {
		updateField = append(updateField, t.RegionServerId)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateUcUserThird error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.UcUserThird_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateUcUserThird error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段UcUserThird
func (s *UcUserThirdSvc) UpdateAllUcUserThird(req *proto.UcUserThird) (*proto.UcUserThird, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserThird
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.UserId)
	updateField = append(updateField, t.ThirdType)
	updateField = append(updateField, t.ThirdUserId)
	updateField = append(updateField, t.Nickname)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)

	updateField = append(updateField, t.AppKey)
	updateField = append(updateField, t.TenantId)
	updateField = append(updateField, t.RegionServerId)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllUcUserThird error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.UcUserThird_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllUcUserThird error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *UcUserThirdSvc) UpdateFieldsUcUserThird(req *proto.UcUserThirdUpdateFieldsRequest) (*proto.UcUserThird, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserThird
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFields error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsUcUserThird error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.UcUserThird_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsUcUserThird error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找UcUserThird
func (s *UcUserThirdSvc) FindUcUserThird(req *proto.UcUserThirdFilter) (*proto.UcUserThird, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserThird
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.ThirdType != 0 { //整数
		do = do.Where(t.ThirdType.Eq(req.ThirdType))
	}
	if req.ThirdUserId != "" { //字符串
		do = do.Where(t.ThirdUserId.Like("%" + req.ThirdUserId + "%"))
	}
	if req.Nickname != "" { //字符串
		do = do.Where(t.Nickname.Like("%" + req.Nickname + "%"))
	}
	//
	if req.AppKey != "" {
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.TenantId != "" {
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.RegionServerId != 0 { //整数
		do = do.Where(t.RegionServerId.Eq(req.RegionServerId))
	}
	if req.QueryDelete {
		dbObj, err := do.Unscoped().First()
		if err != nil {
			logger.Errorf("FindUcUserThird error : %s", err.Error())
			return nil, err
		}
		res := convert.UcUserThird_db2pb(dbObj)
		return res, err
	} else {
		dbObj, err := do.First()
		if err != nil {
			logger.Errorf("FindUcUserThird error : %s", err.Error())
			return nil, err
		}
		res := convert.UcUserThird_db2pb(dbObj)
		return res, err
	}
}

// 根据数据库表主键查找UcUserThird
func (s *UcUserThirdSvc) FindByIdUcUserThird(req *proto.UcUserThirdFilter) (*proto.UcUserThird, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserThird
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdUcUserThird error : %s", err.Error())
		return nil, err
	}
	res := convert.UcUserThird_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找UcUserThird,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *UcUserThirdSvc) GetListUcUserThird(req *proto.UcUserThirdListRequest) ([]*proto.UcUserThird, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TUcUserThird
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.ThirdType != 0 { //整数
			do = do.Where(t.ThirdType.Eq(query.ThirdType))
		}
		if query.ThirdUserId != "" { //字符串
			do = do.Where(t.ThirdUserId.Like("%" + query.ThirdUserId + "%"))
		}
		if query.Nickname != "" { //字符串
			do = do.Where(t.Nickname.Like("%" + query.Nickname + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
		if query.AppKey != "" {
			do = do.Where(t.AppKey.Eq(query.AppKey))
		}
		if query.TenantId != "" {
			do = do.Where(t.TenantId.Eq(query.TenantId))
		}
		if query.RegionServerId != 0 { //整数
			do = do.Where(t.RegionServerId.Eq(query.RegionServerId))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.CreatedAt.Desc())
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*model.TUcUserThird
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListUcUserThird error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.UcUserThird, len(list))
	for i, v := range list {
		result[i] = convert.UcUserThird_db2pb(v)
	}
	return result, total, nil
}

// 获取第三方登录信息
func (s *UcUserThirdSvc) GetThirdUserInfo(req *proto.UcUserThirdFilter) (*proto.UcUserThird, error) {
	t := orm.Use(iotmodel.GetDB()).TUcUserThird
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdUcUserThird error : %s", err.Error())
		return nil, err
	}
	res := convert.UcUserThird_db2pb(dbObj)
	return res, err
}
