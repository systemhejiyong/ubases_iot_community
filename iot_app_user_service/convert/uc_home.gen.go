// Code generated by sgen.exe,2022-04-18 21:26:14. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package convert

import (
	"cloud_platform/iot_model/db_app/model"
	proto "cloud_platform/iot_proto/protos/protosService"

	"google.golang.org/protobuf/types/known/timestamppb"
)

func UcHome_pb2db(src *proto.UcHome) *model.TUcHome {
	if src == nil {
		return nil
	}
	dbObj := model.TUcHome{
		Id:         src.Id,
		Name:       src.Name,
		IconUrl:    src.IconUrl,
		Sid:        src.Sid,
		Lat:        src.Lat,
		Lng:        src.Lng,
		Country:    src.Country,
		Province:   src.Province,
		City:       src.City,
		District:   src.District,
		CoordType:  src.CoordType,
		Address:    src.Address,
		CreatedBy:  src.CreatedBy,
		UpdatedBy:  src.UpdatedBy,
		CreatedAt:  src.CreatedAt.AsTime(),
		UpdatedAt:  src.UpdatedAt.AsTime(),
		CountryId:  src.CountryId,
		ProvinceId: src.ProvinceId,
		CityId:     src.CityId,
	}
	return &dbObj
}

func UcHome_db2pb(src *model.TUcHome) *proto.UcHome {
	if src == nil {
		return nil
	}
	pbObj := proto.UcHome{
		Id:         src.Id,
		Name:       src.Name,
		IconUrl:    src.IconUrl,
		Sid:        src.Sid,
		Lat:        src.Lat,
		Lng:        src.Lng,
		Country:    src.Country,
		Province:   src.Province,
		City:       src.City,
		District:   src.District,
		Address:    src.Address,
		CoordType:  src.CoordType,
		CreatedBy:  src.CreatedBy,
		UpdatedBy:  src.UpdatedBy,
		CreatedAt:  timestamppb.New(src.CreatedAt),
		UpdatedAt:  timestamppb.New(src.UpdatedAt),
		CountryId:  src.CountryId,
		ProvinceId: src.ProvinceId,
		CityId:     src.CityId,
	}
	return &pbObj
}

func UcHomeReq_pb2db(src *proto.UcHomeReq) *model.TUcHome {
	if src == nil {
		return nil
	}
	dbObj := model.TUcHome{
		Id:         src.Id,
		Name:       src.Name,
		IconUrl:    src.IconUrl,
		Sid:        src.Sid,
		Lat:        src.Lat,
		Lng:        src.Lng,
		Country:    src.Country,
		Province:   src.Province,
		City:       src.City,
		District:   src.District,
		Address:    src.Address,
		CoordType:  src.CoordType,
		CreatedBy:  src.CreatedBy,
		UpdatedBy:  src.UpdatedBy,
		CreatedAt:  src.CreatedAt.AsTime(),
		UpdatedAt:  src.UpdatedAt.AsTime(),
		CountryId:  src.CountryId,
		ProvinceId: src.ProvinceId,
		CityId:     src.CityId,
	}
	return &dbObj
}

type TIotDeviceInfoData struct {
	Id               int64  `gorm:"column:id;primaryKey" json:"id"`                    // 主键ID
	Did              string `gorm:"column:did;not null" json:"did"`                    // 设备唯一ID（14位 1~9 A~Z随机）
	ProductId        int64  `gorm:"column:product_id;not null" json:"productId"`       // 产品ID(t_cloud_product.id)
	OnlineStatus     int32  `gorm:"column:online_status" json:"onlineStatus"`          // 在线状态（0 在线 1 不在线）
	DeviceName       string `gorm:"column:device_name" json:"deviceName"`              // 设备名称
	DeviceNature     string `gorm:"column:device_nature" json:"deviceNature"`          // 设备性质
	Sn               string `gorm:"column:sn" json:"sn"`                               // 设备SN
	BatchId          int64  `gorm:"column:batch_id" json:"batchId"`                    // 批次ID(t_cloud_device_batch.id)
	GroupId          int64  `gorm:"column:group_id" json:"groupId"`                    // 设备组ID（t_cloud_device_group.id）
	DeviceModel      string `gorm:"column:device_model" json:"deviceModel"`            // 设备型号
	UserName         string `gorm:"column:user_name" json:"userName"`                  // 用户名
	Passward         string `gorm:"column:passward" json:"passward"`                   // 设备密码
	Salt             string `gorm:"column:salt" json:"salt"`                           // 盐值
	DeviceSecretHttp string `gorm:"column:device_secret_http" json:"deviceSecretHttp"` // 设备密钥（http）
	DeviceSecretMqtt string `gorm:"column:device_secret_mqtt" json:"deviceSecretMqtt"` // 设备密钥（mqtt）
	IpAddress        string `gorm:"column:ip_address" json:"ipAddress"`                // ip地址
	Lat              int64  `gorm:"column:lat" json:"lat"`                             // 纬度
	Lng              int64  `gorm:"column:lng" json:"lng"`                             // 经度
	Country          int64  `gorm:"column:country" json:"country"`                     // 国家编码
	Province         string `gorm:"column:province" json:"province"`                   // 省份编码
	City             string `gorm:"column:city" json:"city"`                           // 城市编码
	District         string `gorm:"column:district" json:"district"`                   // 地区编码
	MacAddress       string `gorm:"column:mac_address" json:"macAddress"`              // mac地址
	DeviceVersion    string `gorm:"column:device_version" json:"deviceVersion"`        // 设备版本
	ActiveStatus     string `gorm:"column:active_status" json:"activeStatus"`          // 激活状态[0:未激活,1:已激活]
	RoomName         string `json:"roomName"`                                          // 房间名称
	ProductPic       string `json:"productPic"`                                        // 产品图片
}

func IotDeviceInfo_pb2db(src *proto.IotDevInfo) *proto.HomeIotDevInfo {
	if src == nil {
		return nil
	}
	dbObj := proto.HomeIotDevInfo{
		Id:               src.Id,
		Did:              src.Did,
		ProductId:        src.ProductId,
		DeviceName:       src.DeviceName,
		DeviceNature:     src.DeviceNature,
		Sn:               src.Sn,
		BatchId:          src.BatchId,
		GroupId:          src.GroupId,
		DeviceModel:      src.DeviceModel,
		UserName:         src.UserName,
		Passward:         src.Passward,
		Salt:             src.Salt,
		DeviceSecretHttp: src.DeviceSecretHttp,
		DeviceSecretMqtt: src.DeviceSecretMqtt,
		IpAddress:        src.IpAddress,
		Lat:              src.Lat,
		Lng:              src.Lng,
		Country:          src.Country,
		Province:         src.Province,
		City:             src.City,
		District:         src.District,
		MacAddress:       src.MacAddress,
		DeviceVersion:    src.DeviceVersion,
		ActiveStatus:     src.ActiveStatus,
		RoomName:         src.RoomName,
		ProductPic:       src.ProductPic,
		RoomId:           src.RoomId,
		ProductKey:       src.ProductKey,
		SecretKey:        src.SecretKey,
		MqttServer:       src.MqttServer,
		OnlineStatus:     src.OnlineStatus,
		Switch:           src.Switch,
		BindTime:         src.BindTime,
		PanelId:          src.PanelId,
		AppPanelType:     src.AppPanelType,
	}
	return &dbObj
}
