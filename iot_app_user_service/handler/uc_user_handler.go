// Code generated by sgen.exe,2022-04-18 21:26:14. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"go-micro.dev/v4/logger"

	"cloud_platform/iot_app_user_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type UcUserHandler struct{}

// LoginSuccess 登录成功后续任务处理
func (h *UcUserHandler) LoginSuccess(ctx context.Context, request *proto.UcUserLoginSuccessRequest, response *proto.Response) error {
	//登录成功的后续处理
	s := service.UcUserSvc{Ctx: ctx}
	err := s.LoginSuccess(request)
	if err != nil {
		response.Code = ERROR
		response.Message = err.Error()
	} else {
		response.Code = SUCCESS
		response.Message = "success"
	}
	return nil
}

// GetUserByLogin 获取用户信息通过登录信息
func (h *UcUserHandler) GetUserByLogin(ctx context.Context, request *proto.UcUserByLoginRequest, response *proto.UcUserResponse) error {
	s := service.UcUserSvc{Ctx: ctx}
	data, err := s.GetUserByLogin(request)
	if err != nil {
		response.Code = ERROR
		response.Message = err.Error()
	} else {
		response.Code = SUCCESS
		response.Message = "success"
		response.Data = data
	}
	return nil
}

// 创建
func (h *UcUserHandler) Create(ctx context.Context, req *proto.UcUser, resp *proto.Response) error {
	s := service.UcUserSvc{Ctx: ctx}
	_, err := s.CreateUcUser(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *UcUserHandler) Delete(ctx context.Context, req *proto.UcUser, resp *proto.Response) error {
	s := service.UcUserSvc{Ctx: ctx}
	_, err := s.DeleteUcUser(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *UcUserHandler) DeleteById(ctx context.Context, req *proto.UcUser, resp *proto.Response) error {
	s := service.UcUserSvc{Ctx: ctx}
	_, err := s.DeleteByIdUcUser(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *UcUserHandler) DeleteByIds(ctx context.Context, req *proto.UcUserBatchDeleteRequest, resp *proto.Response) error {
	s := service.UcUserSvc{Ctx: ctx}
	_, err := s.DeleteByIdsUcUser(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *UcUserHandler) Update(ctx context.Context, req *proto.UcUser, resp *proto.Response) error {
	s := service.UcUserSvc{Ctx: ctx}
	_, err := s.UpdateUcUser(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *UcUserHandler) UpdateAll(ctx context.Context, req *proto.UcUser, resp *proto.Response) error {
	s := service.UcUserSvc{Ctx: ctx}
	_, err := s.UpdateAllUcUser(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *UcUserHandler) UpdateFields(ctx context.Context, req *proto.UcUserUpdateFieldsRequest, resp *proto.Response) error {
	s := service.UcUserSvc{Ctx: ctx}
	_, err := s.UpdateFieldsUcUser(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *UcUserHandler) Find(ctx context.Context, req *proto.UcUserFilter, resp *proto.UcUserResponse) error {
	s := service.UcUserSvc{Ctx: ctx}
	data, err := s.FindUcUser(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *UcUserHandler) FindById(ctx context.Context, req *proto.UcUserFilter, resp *proto.UcUserResponse) error {
	s := service.UcUserSvc{Ctx: ctx}
	data, err := s.FindByIdUcUser(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *UcUserHandler) Lists(ctx context.Context, req *proto.UcUserListRequest, resp *proto.UcUserResponse) error {
	s := service.UcUserSvc{Ctx: ctx}
	data, total, err := s.GetListUcUser(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *UcUserHandler) Register(ctx context.Context, request *proto.UcUserRegisterRequest, response *proto.UcUserResponse) error {
	s := service.UcUserSvc{Ctx: ctx}
	uc, err := s.Register(request)
	if err != nil {
		response.Code = ERROR
		response.Message = err.Error()
	} else {
		response.Code = SUCCESS
		response.Message = "success"
		response.Data = []*proto.UcUser{
			{Id: uc.Id},
		}
	}
	return nil
}

func (h *UcUserHandler) SetResponse(resp *proto.UcUserResponse, data *proto.UcUser, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *UcUserHandler) SetPageResponse(resp *proto.UcUserResponse, list []*proto.UcUser, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}

func (h *UcUserHandler) ForgetPassword(ctx context.Context, req *proto.UcForgetPasswordReq, response *proto.UcUserResponse) error {
	s := service.UcUserSvc{Ctx: ctx}
	var phone, email string
	if req.AccountType == "1" {
		phone = req.Account
	} else {
		email = req.Account
	}
	data, err := s.FindUcUser(&proto.UcUserFilter{
		Phone:          phone,
		Email:          email,
		AppKey:         req.AppKey,
		TenantId:       req.TenantId,
		RegionServerId: req.RegionServerId,
	})
	if err != nil {
		return err
	}
	if data.Id == 0 {
		logger.Errorf("账号不存在")
		return err
	}

	_, err = s.UpdateUcUser(&proto.UcUser{
		Id:       data.Id,
		Password: req.NewPassword,
	})
	if err != nil {
		logger.Errorf("修改密码失败, error:%s", err.Error())
		return err
	}
	response.Data = []*proto.UcUser{
		data,
	}
	return nil
}

// 获取用户家庭列表
func (h *UcUserHandler) HomeList(ctx context.Context, user *proto.UcUser, response *proto.UcUserHomeListResponse) error {
	s := service.UcUserSvc{Ctx: ctx}
	homeUsers, err := s.HomeList(user.Id)
	if err != nil {
		response.Code = ERROR
		response.Message = err.Error()
	} else {
		response.Code = SUCCESS
		response.Message = "success"
		response.HomeUsers = homeUsers
	}
	return nil
}
