// Code generated by sgen.exe,2022-04-18 21:26:14. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_app_user_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type UcUserFeedbackHandler struct{}

func (h *UcUserFeedbackHandler) FeedbackDetails(ctx context.Context, filter *proto.UcUserFeedbackFilter, response *proto.UcUserFeedbackDetailsResponse) error {
	s := service.UcUserFeedbackSvc{Ctx: ctx}
	data, err := s.FeedbackDetails(filter)
	if err != nil {
		response.Code = ERROR
		response.Message = err.Error()
	} else {
		response.Code = SUCCESS
		response.Message = "success"
		response.Data = data.Data
		response.DeviceInfo = data.DeviceInfo
		response.UserInfo = data.UserInfo
		response.AppInfo = data.AppInfo
		response.ReplyList = data.ReplyList
	}
	return nil
}

// 创建
func (h *UcUserFeedbackHandler) Create(ctx context.Context, req *proto.UcUserFeedback, resp *proto.Response) error {
	s := service.UcUserFeedbackSvc{Ctx: ctx}
	_, err := s.CreateUcUserFeedback(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *UcUserFeedbackHandler) Delete(ctx context.Context, req *proto.UcUserFeedback, resp *proto.Response) error {
	s := service.UcUserFeedbackSvc{Ctx: ctx}
	_, err := s.DeleteUcUserFeedback(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *UcUserFeedbackHandler) DeleteById(ctx context.Context, req *proto.UcUserFeedback, resp *proto.Response) error {
	s := service.UcUserFeedbackSvc{Ctx: ctx}
	_, err := s.DeleteByIdUcUserFeedback(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *UcUserFeedbackHandler) DeleteByIds(ctx context.Context, req *proto.UcUserFeedbackBatchDeleteRequest, resp *proto.Response) error {
	s := service.UcUserFeedbackSvc{Ctx: ctx}
	_, err := s.DeleteByIdsUcUserFeedback(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *UcUserFeedbackHandler) Update(ctx context.Context, req *proto.UcUserFeedback, resp *proto.Response) error {
	s := service.UcUserFeedbackSvc{Ctx: ctx}
	_, err := s.UpdateUcUserFeedback(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *UcUserFeedbackHandler) UpdateAll(ctx context.Context, req *proto.UcUserFeedback, resp *proto.Response) error {
	s := service.UcUserFeedbackSvc{Ctx: ctx}
	_, err := s.UpdateAllUcUserFeedback(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *UcUserFeedbackHandler) UpdateFields(ctx context.Context, req *proto.UcUserFeedbackUpdateFieldsRequest, resp *proto.Response) error {
	s := service.UcUserFeedbackSvc{Ctx: ctx}
	_, err := s.UpdateFieldsUcUserFeedback(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *UcUserFeedbackHandler) Find(ctx context.Context, req *proto.UcUserFeedbackFilter, resp *proto.UcUserFeedbackResponse) error {
	s := service.UcUserFeedbackSvc{Ctx: ctx}
	data, err := s.FindUcUserFeedback(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *UcUserFeedbackHandler) FindById(ctx context.Context, req *proto.UcUserFeedbackFilter, resp *proto.UcUserFeedbackResponse) error {
	s := service.UcUserFeedbackSvc{Ctx: ctx}
	data, err := s.FindByIdUcUserFeedback(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *UcUserFeedbackHandler) Lists(ctx context.Context, req *proto.UcUserFeedbackListRequest, resp *proto.UcUserFeedbackResponse) error {
	s := service.UcUserFeedbackSvc{Ctx: ctx}
	data, total, err := s.GetListUcUserFeedback(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *UcUserFeedbackHandler) SetResponse(resp *proto.UcUserFeedbackResponse, data *proto.UcUserFeedback, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *UcUserFeedbackHandler) SetPageResponse(resp *proto.UcUserFeedbackResponse, list []*proto.UcUserFeedback, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}

// 反馈列表
func (h *UcUserFeedbackHandler) FeedbackLists(ctx context.Context, req *proto.UcUserFeedbackListRequest, resp *proto.UcUserFeedbackResponse) error {
	s := service.UcUserFeedbackSvc{Ctx: ctx}
	data, total, err := s.GetFeedbackLists(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}
