// Code generated by sgen.exe,2022-04-18 21:26:15. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_app_user_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type UcUserThirdHandler struct{}

// 创建
func (h *UcUserThirdHandler) Create(ctx context.Context, req *proto.UcUserThird, resp *proto.Response) error {
	s := service.UcUserThirdSvc{Ctx: ctx}
	_, err := s.CreateUcUserThird(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *UcUserThirdHandler) Delete(ctx context.Context, req *proto.UcUserThird, resp *proto.Response) error {
	s := service.UcUserThirdSvc{Ctx: ctx}
	_, err := s.DeleteUcUserThird(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *UcUserThirdHandler) DeleteById(ctx context.Context, req *proto.UcUserThird, resp *proto.Response) error {
	s := service.UcUserThirdSvc{Ctx: ctx}
	_, err := s.DeleteByIdUcUserThird(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *UcUserThirdHandler) DeleteByIds(ctx context.Context, req *proto.UcUserThirdBatchDeleteRequest, resp *proto.Response) error {
	s := service.UcUserThirdSvc{Ctx: ctx}
	_, err := s.DeleteByIdsUcUserThird(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *UcUserThirdHandler) Update(ctx context.Context, req *proto.UcUserThird, resp *proto.Response) error {
	s := service.UcUserThirdSvc{Ctx: ctx}
	_, err := s.UpdateUcUserThird(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *UcUserThirdHandler) UpdateAll(ctx context.Context, req *proto.UcUserThird, resp *proto.Response) error {
	s := service.UcUserThirdSvc{Ctx: ctx}
	_, err := s.UpdateAllUcUserThird(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *UcUserThirdHandler) UpdateFields(ctx context.Context, req *proto.UcUserThirdUpdateFieldsRequest, resp *proto.Response) error {
	s := service.UcUserThirdSvc{Ctx: ctx}
	_, err := s.UpdateFieldsUcUserThird(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *UcUserThirdHandler) Find(ctx context.Context, req *proto.UcUserThirdFilter, resp *proto.UcUserThirdResponse) error {
	s := service.UcUserThirdSvc{Ctx: ctx}
	data, err := s.FindUcUserThird(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *UcUserThirdHandler) FindById(ctx context.Context, req *proto.UcUserThirdFilter, resp *proto.UcUserThirdResponse) error {
	s := service.UcUserThirdSvc{Ctx: ctx}
	data, err := s.FindByIdUcUserThird(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *UcUserThirdHandler) Lists(ctx context.Context, req *proto.UcUserThirdListRequest, resp *proto.UcUserThirdResponse) error {
	s := service.UcUserThirdSvc{Ctx: ctx}
	data, total, err := s.GetListUcUserThird(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *UcUserThirdHandler) SetResponse(resp *proto.UcUserThirdResponse, data *proto.UcUserThird, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *UcUserThirdHandler) SetPageResponse(resp *proto.UcUserThirdResponse, list []*proto.UcUserThird, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}

//func (h *UcUserThirdHandler) GetThirdUserInfo(ctx context.Context, req *proto.UcUserThirdFilter, response *proto.AppThirdPartyLoginResponse) error {
//	ucUserThirdSvc := service.UcUserThirdSvc{Ctx: ctx}
//	ucUserSvc := service.UcUserSvc{Ctx: ctx}
//
//	data, err := ucUserThirdSvc.FindUcUserThird(&proto.UcUserThirdFilter{ThirdUserId: req.ThirdUserId})
//	if err != nil {
//		logger.Errorf("FindUcUserThird error : %s", err.Error())
//		return err
//	}
//
//	data11, err := ucUserSvc.FindByIdUcUser(&proto.UcUserFilter{Id:data.UserId})
//
//	if err == nil {
//		*response = *data
//	}
//	return err
//}

//func (h *UcUserThirdHandler) GetThirdUserInfo(ctx context.Context, req *proto.AppThirdPartyLoginRequest, response *proto.AppThirdPartyLoginResponse) error {
//	//var err error
//	//tenantId, err := CheckTenantId(s.Ctx)
//	//if err != nil || tenantId == "" {
//	//	return nil, 0, errors.New("获取tenantId失败")
//	//}
//	////var err error
//	//tenantId, err := CheckTenantId(s.Ctx)
//	//if err != nil || tenantId == "" {
//	//	return nil, 0, errors.New("获取tenantId失败")
//	//}
//	ucUserThirdSvc := service.UcUserThirdSvc{Ctx: ctx}
//	ucUserSvc := service.UcUserSvc{Ctx: ctx}
//
//	phone, email, err := h.checkUserName(req.Account)
//	if err != nil {
//		return err
//	}
//
//	reqs := proto.UcUserByLoginRequest{
//		Phone:    phone,
//		Email:    email,
//		//AppKey:   request.AppKey,
//		//TenantId: request.TenantId,
//		//Password: request.Password,
//		//Status:   1, //1:正常，2:待注销，3:已注销
//	}
//
//	data11, err := ucUserSvc.GetUserByLogin(&reqs)
//
//	userInfo := data11[0]
//
//	//data11, err := ucUserSvc.FindByIdUcUser(&proto.UcUserFilter{Id:data.UserId})
//
//	data1111,_,err := ucUserThirdSvc.GetListUcUserThird(&proto.UcUserThirdListRequest{Query: &proto.UcUserThird{
//		UserId: userInfo.Id,
//	}})
//	if err != nil {
//		logger.Errorf("FindUcUserThird error : %s", err.Error())
//		return err
//	}
//	var thirdPartys = make([]*proto.AppUserThirdPartyLoginInfo, 0)
//	for _, thirdPartyLogin := range data1111 {
//		thirdPartys = append(thirdPartys, &proto.AppUserThirdPartyLoginInfo{
//			Mode: thirdPartyLogin.ThirdType, LoginKey: thirdPartyLogin.ThirdUserId, Nickname: thirdPartyLogin.Nickname})
//	}
//
//
//	response.UserInfo = &proto.AppUserInfo{
//		Id:               userInfo.Id,
//		NickName:         userInfo.NickName,
//		Phone:            userInfo.Phone,
//		Photo:            userInfo.Photo,
//		Status:           userInfo.Status,
//		City:             userInfo.City,
//		Gender:           userInfo.Gender,
//		Email:            userInfo.Email,
//		DefaultHomeId:    userInfo.DefaultHomeId,
//		RegisterRegion:   userInfo.RegisterRegion,
//		Account:          userInfo.UserName,
//		Token:            "",
//		AccountCasser:    false,
//		SubmitCancelTime: userInfo.CancelTime,
//		ThirdPartyLogin:  thirdPartys,
//		UserName:         userInfo.UserName,
//	}
//
//	if err == nil {
//		*response = *response
//	}
//	return err
//}
//
//// checkUserName 检查用户名称，判断为手机、邮箱
//func (s *UcUserThirdHandler) checkUserName(userName string) (phone, email string, err error) {
//	if iotutil.IsPhone(userName) {
//		phone = userName
//	} else if iotutil.IsEmail(userName) {
//		email = userName
//	} else {
//		err = errors.New("无法识别账号格式")
//	}
//	return
//}

func (h *UcUserThirdHandler) FindThirdUserInfo(ctx context.Context, filter *proto.UcUserThirdFilter, response *proto.UcUserThirdResponse) error {
	panic("implement me")
}
