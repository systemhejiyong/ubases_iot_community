// Code generated by sgen.exe,2022-12-21 09:34:52. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_app_user_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type UcUserPrizeCollectHandler struct{}

// 创建
func (h *UcUserPrizeCollectHandler) Create(ctx context.Context, req *proto.UcUserPrizeCollect, resp *proto.Response) error {
	s := service.UcUserPrizeCollectSvc{Ctx: ctx}
	_, err := s.CreateUcUserPrizeCollect(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *UcUserPrizeCollectHandler) Delete(ctx context.Context, req *proto.UcUserPrizeCollect, resp *proto.Response) error {
	s := service.UcUserPrizeCollectSvc{Ctx: ctx}
	_, err := s.DeleteUcUserPrizeCollect(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *UcUserPrizeCollectHandler) DeleteById(ctx context.Context, req *proto.UcUserPrizeCollect, resp *proto.Response) error {
	s := service.UcUserPrizeCollectSvc{Ctx: ctx}
	_, err := s.DeleteByIdUcUserPrizeCollect(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *UcUserPrizeCollectHandler) DeleteByIds(ctx context.Context, req *proto.UcUserPrizeCollectBatchDeleteRequest, resp *proto.Response) error {
	s := service.UcUserPrizeCollectSvc{Ctx: ctx}
	_, err := s.DeleteByIdsUcUserPrizeCollect(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *UcUserPrizeCollectHandler) Update(ctx context.Context, req *proto.UcUserPrizeCollect, resp *proto.Response) error {
	s := service.UcUserPrizeCollectSvc{Ctx: ctx}
	_, err := s.UpdateUcUserPrizeCollect(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *UcUserPrizeCollectHandler) UpdateAll(ctx context.Context, req *proto.UcUserPrizeCollect, resp *proto.Response) error {
	s := service.UcUserPrizeCollectSvc{Ctx: ctx}
	_, err := s.UpdateAllUcUserPrizeCollect(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *UcUserPrizeCollectHandler) UpdateFields(ctx context.Context, req *proto.UcUserPrizeCollectUpdateFieldsRequest, resp *proto.Response) error {
	s := service.UcUserPrizeCollectSvc{Ctx: ctx}
	_, err := s.UpdateFieldsUcUserPrizeCollect(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *UcUserPrizeCollectHandler) Find(ctx context.Context, req *proto.UcUserPrizeCollectFilter, resp *proto.UcUserPrizeCollectResponse) error {
	s := service.UcUserPrizeCollectSvc{Ctx: ctx}
	data, err := s.FindUcUserPrizeCollect(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *UcUserPrizeCollectHandler) FindById(ctx context.Context, req *proto.UcUserPrizeCollectFilter, resp *proto.UcUserPrizeCollectResponse) error {
	s := service.UcUserPrizeCollectSvc{Ctx: ctx}
	data, err := s.FindByIdUcUserPrizeCollect(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *UcUserPrizeCollectHandler) Lists(ctx context.Context, req *proto.UcUserPrizeCollectListRequest, resp *proto.UcUserPrizeCollectResponse) error {
	s := service.UcUserPrizeCollectSvc{Ctx: ctx}
	data, total, err := s.GetListUcUserPrizeCollect(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *UcUserPrizeCollectHandler) SetResponse(resp *proto.UcUserPrizeCollectResponse, data *proto.UcUserPrizeCollect, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *UcUserPrizeCollectHandler) SetPageResponse(resp *proto.UcUserPrizeCollectResponse, list []*proto.UcUserPrizeCollect, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
