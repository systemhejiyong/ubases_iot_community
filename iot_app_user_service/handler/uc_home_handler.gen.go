// Code generated by sgen.exe,2022-04-18 21:26:14. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	_const "cloud_platform/iot_app_user_service/const"
	"cloud_platform/iot_app_user_service/rpc/rpcClient"
	"cloud_platform/iot_common/ioterrs"
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"cloud_platform/iot_app_user_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type UcHomeHandler struct{}

// 创建
func (h *UcHomeHandler) Create(ctx context.Context, req *proto.UcHome, resp *proto.Response) error {
	s := service.UcHomeSvc{Ctx: ctx}
	_, err := s.CreateUcHome(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *UcHomeHandler) Delete(ctx context.Context, req *proto.UcHome, resp *proto.Response) error {
	var err error
	userId, err := service.GetUserId(ctx)
	if err != nil {
		SetResponseCustomCode(resp, err, int32(ioterrs.ERROR_FAIL.Code))
		return nil
	}
	appKey, err := service.CheckAppKey(ctx)
	if err != nil {
		SetResponseCustomCode(resp, err, int32(ioterrs.ERROR_FAIL.Code))
		return nil
	}
	lang, err := service.CheckLang(ctx)
	if err != nil {
		SetResponseCustomCode(resp, err, int32(ioterrs.ERROR_FAIL.Code))
		return nil
	}

	ucHomeSvc := service.UcHomeSvc{Ctx: ctx}
	ucHomeUserSvc := service.UcHomeUserSvc{Ctx: ctx}

	homeUserInfo, _, err := ucHomeUserSvc.GetListUcHomeUser(&proto.UcHomeUserListRequest{
		Query: &proto.UcHomeUser{
			UserId:   userId,
			RoleType: 1,
		},
	})
	isHomeOwner := false
	for _, v := range homeUserInfo {
		if v.HomeId == req.Id {
			isHomeOwner = true
		}
	}
	if err != nil || !isHomeOwner {
		SetResponseCustomCode(resp, errors.New(ioterrs.ERROR_NODELETIONPERMISSION.Msg), int32(ioterrs.ERROR_FAIL.Code))
		return nil
	}
	onlyOneHome := false
	if len(homeUserInfo) == 1 {
		onlyOneHome = true
	}
	if isHomeOwner && onlyOneHome {
		SetResponseCustomCode(resp, errors.New(ioterrs.ERROR_ONLYFAMILY.Msg), int32(ioterrs.ERROR_ONLYFAMILY.Code))
		return nil
	}

	homeDevListResp, err := rpcClient.IotDeviceHomeService.Lists(context.Background(), &proto.IotDeviceHomeListRequest{
		Query: &proto.IotDeviceHome{
			HomeId: req.Id,
		},
	})

	if len(homeDevListResp.Data) > 0 {
		SetResponseCustomCode(resp, errors.New(ioterrs.ERROR_HOMEDEVICEBIND.Msg), int32(ioterrs.ERROR_HOMEDEVICEBIND.Code))
		return nil
	}

	//为所有设置当前homeId为默认家庭的用户自动切换默认家庭
	err = ucHomeUserSvc.ChangeAllUserDefaultHomeId(&proto.UcHomeUserListRequest{
		Query: &proto.UcHomeUser{
			HomeId: req.Id,
		},
	}, req.Lat, req.Lng, req.Country, req.Province, req.City, req.District, appKey, lang)

	_, err = ucHomeSvc.DeleteUcHome(req)
	if err != nil {
		SetResponseCustomCode(resp, err, int32(ioterrs.ERROR_FAIL.Code))
		return nil
	}
	_, err = ucHomeUserSvc.DeleteUcHomeUser(&proto.UcHomeUser{
		HomeId: req.Id,
		UserId: userId,
	})
	if err != nil {
		SetResponseCustomCode(resp, err, int32(ioterrs.ERROR_FAIL.Code))
		return nil
	}

	SetResponseCustomCode(resp, nil, int32(ioterrs.SUCCESS.Code))
	return nil
}

// 匹配ID删除
func (h *UcHomeHandler) DeleteById(ctx context.Context, req *proto.UcHome, resp *proto.Response) error {
	s := service.UcHomeSvc{Ctx: ctx}
	_, err := s.DeleteByIdUcHome(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *UcHomeHandler) DeleteByIds(ctx context.Context, req *proto.UcHomeBatchDeleteRequest, resp *proto.Response) error {
	s := service.UcHomeSvc{Ctx: ctx}
	_, err := s.DeleteByIdsUcHome(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *UcHomeHandler) Update(ctx context.Context, req *proto.UcHome, resp *proto.Response) error {
	s := service.UcHomeSvc{Ctx: ctx}
	_, err := s.UpdateUcHome(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *UcHomeHandler) UpdateAll(ctx context.Context, req *proto.UcHome, resp *proto.Response) error {
	s := service.UcHomeSvc{Ctx: ctx}
	_, err := s.UpdateAllUcHome(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *UcHomeHandler) UpdateFields(ctx context.Context, req *proto.UcHomeUpdateFieldsRequest, resp *proto.Response) error {
	s := service.UcHomeSvc{Ctx: ctx}
	_, err := s.UpdateFieldsUcHome(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *UcHomeHandler) Find(ctx context.Context, req *proto.UcHomeFilter, resp *proto.UcHomeResponse) error {
	s := service.UcHomeSvc{Ctx: ctx}
	data, err := s.FindUcHome(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *UcHomeHandler) FindById(ctx context.Context, req *proto.UcHomeFilter, resp *proto.UcHomeResponse) error {
	s := service.UcHomeSvc{Ctx: ctx}
	data, err := s.FindByIdUcHome(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *UcHomeHandler) Lists(ctx context.Context, req *proto.UcHomeListRequest, resp *proto.UcHomeResponse) error {
	s := service.UcHomeSvc{Ctx: ctx}
	data, total, err := s.GetListUcHome(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *UcHomeHandler) SetResponse(resp *proto.UcHomeResponse, data *proto.UcHome, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *UcHomeHandler) SetPageResponse(resp *proto.UcHomeResponse, list []*proto.UcHome, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}

func (h *UcHomeHandler) HomeDetail(ctx context.Context, request *proto.UcHomeDetailRequest, resp *proto.UcHomeDetailResponse) error {
	s := service.UcHomeSvc{Ctx: ctx}
	data, err := s.HomeDetail(request)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Data = data
		}
	}
	return nil
}

func (h *UcHomeHandler) AddHome(ctx context.Context, req *proto.UcHomeReq, response *proto.UcHomeResponse) error {
	s := service.UcHomeSvc{Ctx: ctx}
	err := s.AddHome(req)
	if err != nil {
		return err
	}
	return nil
}

func (h *UcHomeHandler) JoinHome(ctx context.Context, request *proto.UcHomeDetailRequest, resp *proto.Response) error {
	homeService := service.UcHomeSvc{Ctx: ctx}
	homeUserService := service.UcHomeUserSvc{Ctx: ctx}

	_, err := homeService.FindUcHome(&proto.UcHomeFilter{
		Id: request.HomeId,
	})
	if err != nil {
		//return errors.New("当前家庭信息不存在")
		SetResponseCustomCode(resp, errors.New("当前家庭信息不存在"), int32(ioterrs.ERROR_FAIL.Code))
		return nil
	}

	_, err = homeUserService.FindUcHomeUser(&proto.UcHomeUserFilter{
		HomeId: request.HomeId,
		UserId: request.UserId,
	})
	if err == nil {
		//return errors.New("你已是该家庭成员，请勿重复加入")
		SetResponseCustomCode(resp, errors.New(ioterrs.ERROR_ISMEMBER.Msg), int32(ioterrs.ERROR_ISMEMBER.Code))
		return nil
	}

	err = homeService.JoinHome(request)
	if err != nil {
		SetResponseCustomCode(resp, err, int32(ioterrs.ERROR_FAIL.Code))
		return nil
	}
	SetResponseCustomCode(resp, nil, int32(ioterrs.SUCCESS.Code))
	return nil
}

func (h *UcHomeHandler) SetRole(ctx context.Context, request *proto.UcHomeDetailRequest, response *proto.UcHomeResponse) error {
	homeUserService := service.UcHomeUserSvc{Ctx: ctx}
	_, err := homeUserService.FindUcHomeUser(&proto.UcHomeUserFilter{
		HomeId:   request.HomeId,
		UserId:   request.UserId,
		RoleType: 1,
	})
	if err != nil {
		return errors.New("当前用户id的角色不是家庭所有者，不具备设置角色权限")
	}

	homeService := service.UcHomeSvc{Ctx: ctx}
	err = homeService.SetRole(request)
	if err != nil {
		return err
	}
	return nil
}

func (h *UcHomeHandler) RemoveMembers(ctx context.Context, request *proto.UcHomeDetailRequest, response *proto.UcHomeResponse) error {
	homeUserService := service.UcHomeUserSvc{Ctx: ctx}
	resp, err := homeUserService.FindUcHomeUser(&proto.UcHomeUserFilter{
		HomeId: request.HomeId,
		UserId: request.UserId,
	})
	if err != nil {
		return errors.New("当前用户不存在")
	}
	userRole := resp.RoleType

	resp, err = homeUserService.FindUcHomeUser(&proto.UcHomeUserFilter{
		HomeId: request.HomeId,
		UserId: request.ThirdUserId,
	})
	if err != nil {
		return errors.New("待移除的成员不存在")
	}
	memberRole := resp.RoleType

	if !(userRole == iotutil.ToInt32(_const.RoleSuperAdministrator) || userRole == iotutil.ToInt32(_const.RoleAdministrator)) {
		if userRole == iotutil.ToInt32(_const.RoleMember) {
			return errors.New("当前用户的角色为成员，权限不够")
		} else {
			return errors.New("用户角色参数有误")
		}
	}

	if memberRole == 0 {
		return errors.New("用户角色参数有误")
	}
	if memberRole <= userRole {
		return errors.New("当前用户的权限不够，不能移除指定用户")
	}

	ucHomeUserList, count, err := homeUserService.GetListUcHomeUser(&proto.UcHomeUserListRequest{
		Query: &proto.UcHomeUser{UserId: request.ThirdUserId},
	})

	homeService := service.UcHomeSvc{Ctx: ctx}
	err = homeService.RemoveMembers(request)
	if err != nil {
		return err
	}

	if count > 1 {
		//给以当前homeId为默认家庭的指定用户自动切换默认家庭
		err = homeService.ChangeUserDefaultHomeId(&proto.UcHomeUserListRequest{
			Query: &proto.UcHomeUser{
				HomeId: request.HomeId,
				UserId: request.ThirdUserId,
			},
		}, ucHomeUserList)
		if err != nil {
			return err
		}
	} else if count == 1 {
		err = homeService.CreateNewHome(request) //默认创建一个家庭
		if err != nil {
			return err
		}
	}

	return nil
}

func (h *UcHomeHandler) TransferOwnership(ctx context.Context, request *proto.UcHomeDetailRequest, response *proto.UcHomeResponse) error {
	homeUserService := service.UcHomeUserSvc{Ctx: ctx}
	homeService := service.UcHomeSvc{Ctx: ctx}

	_, err := homeUserService.FindUcHomeUser(&proto.UcHomeUserFilter{
		HomeId:   request.HomeId,
		UserId:   request.UserId,
		RoleType: iotutil.ToInt32(_const.RoleSuperAdministrator),
	})
	if err != nil {
		return errors.New("当前登录用户id的角色不是家庭所有者，不具备转移家庭所有权权限")
	}

	_, err = homeUserService.FindUcHomeUser(&proto.UcHomeUserFilter{
		HomeId: request.HomeId,
		UserId: request.ThirdUserId,
	})
	if err != nil {
		return errors.New("此用户id不在当前家庭中")
	}

	err = homeService.TransferOwnership(request)
	if err != nil {
		return err
	}
	return nil
}

func (h *UcHomeHandler) Quit(ctx context.Context, request *proto.UcHomeDetailRequest, response *proto.UcHomeResponse) error {
	homeUserService := service.UcHomeUserSvc{Ctx: ctx}
	homeUserList, _, err := homeUserService.GetListUcHomeUser(&proto.UcHomeUserListRequest{
		//HomeId:   request.HomeId,
		Query: &proto.UcHomeUser{UserId: request.UserId},
		//RoleType: iotutil.ToInt32(_const.RoleSuperAdministrator),
	})
	if err != nil {
		return err
	}
	for _, homeUserInfo := range homeUserList {
		if homeUserInfo.HomeId == request.HomeId && homeUserInfo.RoleType == iotutil.ToInt32(_const.RoleSuperAdministrator) {
			return errors.New("家庭拥有者无离开家庭的权限")
		}
	}

	var changeHomeId int64
	for _, homeUserObj := range homeUserList {
		if homeUserObj.HomeId != request.HomeId {
			changeHomeId = homeUserObj.HomeId
			break
		}
	}
	if changeHomeId == 0 {
		return errors.New("离开家庭失败")
	}

	err = homeUserService.Quit(request, changeHomeId)
	if err != nil {
		return err
	}

	return nil
}

func (h *UcHomeHandler) ChangeAllUserDefaultHomeId(ctx context.Context, req *proto.UcHome, resp *proto.Response) error {
	var err error
	userId, err := service.GetUserId(ctx)
	if err != nil {
		SetResponseCustomCode(resp, err, int32(ioterrs.ERROR_FAIL.Code))
		return nil
	}
	appKey, err := service.CheckAppKey(ctx)
	if err != nil {
		SetResponseCustomCode(resp, err, int32(ioterrs.ERROR_FAIL.Code))
		return nil
	}
	lang, err := service.CheckLang(ctx)
	if err != nil {
		SetResponseCustomCode(resp, err, int32(ioterrs.ERROR_FAIL.Code))
		return nil
	}

	ucHomeSvc := service.UcHomeSvc{Ctx: ctx}
	ucHomeUserSvc := service.UcHomeUserSvc{Ctx: ctx}

	//为所有设置当前homeId为默认家庭的用户自动切换默认家庭
	err = ucHomeUserSvc.ChangeAllUserDefaultHomeId(&proto.UcHomeUserListRequest{
		Query: &proto.UcHomeUser{
			HomeId: req.Id,
		},
	}, req.Lat, req.Lng, req.Country, req.Province, req.City, req.District, appKey, lang)

	_, err = ucHomeSvc.DeleteUcHome(req)
	if err != nil {
		SetResponseCustomCode(resp, err, int32(ioterrs.ERROR_FAIL.Code))
		return nil
	}
	_, err = ucHomeUserSvc.DeleteUcHomeUser(&proto.UcHomeUser{
		HomeId: req.Id,
		UserId: userId,
	})
	if err != nil {
		SetResponseCustomCode(resp, err, int32(ioterrs.ERROR_FAIL.Code))
		return nil
	}

	SetResponseCustomCode(resp, nil, int32(ioterrs.SUCCESS.Code))
	return nil
}
