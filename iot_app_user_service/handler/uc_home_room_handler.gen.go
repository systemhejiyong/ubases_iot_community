// Code generated by sgen.exe,2022-04-18 21:26:14. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"
	"errors"

	"cloud_platform/iot_app_user_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type UcHomeRoomHandler struct{}

// 创建
func (h *UcHomeRoomHandler) Create(ctx context.Context, req *proto.UcHomeRoom, resp *proto.Response) error {
	s := service.UcHomeRoomSvc{Ctx: ctx}
	homeRoomListResp, count, err := s.GetListUcHomeRoom(&proto.UcHomeRoomListRequest{
		Query: &proto.UcHomeRoom{
			HomeId: req.HomeId,
		},
	})
	if count > 99 {
		return errors.New("最大房间数量为100个")
	}
	var y, z int32
	if count == 0 {
		y = 0
	} else {
		y = homeRoomListResp[0].Sort
		for _, room := range homeRoomListResp {
			z = room.Sort
			if z > y {
				y = z
			}
		}
	}

	req.Sort = y + 1
	_, err = s.CreateUcHomeRoom(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *UcHomeRoomHandler) Delete(ctx context.Context, req *proto.UcHomeRoom, resp *proto.Response) error {
	s := service.UcHomeRoomSvc{Ctx: ctx}
	_, err := s.DeleteUcHomeRoom(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *UcHomeRoomHandler) DeleteById(ctx context.Context, req *proto.UcHomeRoom, resp *proto.Response) error {
	s := service.UcHomeRoomSvc{Ctx: ctx}
	_, err := s.DeleteByIdUcHomeRoom(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *UcHomeRoomHandler) DeleteByIds(ctx context.Context, req *proto.UcHomeRoomBatchDeleteRequest, resp *proto.Response) error {
	s := service.UcHomeRoomSvc{Ctx: ctx}
	_, err := s.DeleteByIdsUcHomeRoom(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *UcHomeRoomHandler) Update(ctx context.Context, req *proto.UcHomeRoom, resp *proto.Response) error {
	s := service.UcHomeRoomSvc{Ctx: ctx}
	_, err := s.UpdateUcHomeRoom(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *UcHomeRoomHandler) UpdateAll(ctx context.Context, req *proto.UcHomeRoom, resp *proto.Response) error {
	s := service.UcHomeRoomSvc{Ctx: ctx}
	_, err := s.UpdateAllUcHomeRoom(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *UcHomeRoomHandler) UpdateFields(ctx context.Context, req *proto.UcHomeRoomUpdateFieldsRequest, resp *proto.Response) error {
	s := service.UcHomeRoomSvc{Ctx: ctx}
	_, err := s.UpdateFieldsUcHomeRoom(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *UcHomeRoomHandler) Find(ctx context.Context, req *proto.UcHomeRoomFilter, resp *proto.UcHomeRoomResponse) error {
	s := service.UcHomeRoomSvc{Ctx: ctx}
	data, err := s.FindUcHomeRoom(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *UcHomeRoomHandler) FindById(ctx context.Context, req *proto.UcHomeRoomFilter, resp *proto.UcHomeRoomResponse) error {
	s := service.UcHomeRoomSvc{Ctx: ctx}
	data, err := s.FindByIdUcHomeRoom(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *UcHomeRoomHandler) Lists(ctx context.Context, req *proto.UcHomeRoomListRequest, resp *proto.UcHomeRoomResponse) error {
	s := service.UcHomeRoomSvc{Ctx: ctx}
	data, total, err := s.GetListUcHomeRoom(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *UcHomeRoomHandler) SetResponse(resp *proto.UcHomeRoomResponse, data *proto.UcHomeRoom, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *UcHomeRoomHandler) SetPageResponse(resp *proto.UcHomeRoomResponse, list []*proto.UcHomeRoom, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}

func (h *UcHomeRoomHandler) SetSort(ctx context.Context, req *proto.UcHomeRoomSortRequest, resp *proto.UcHomeRoomResponse) error {
	s := service.UcHomeRoomSvc{Ctx: ctx}
	s.SetSort(req)
	return nil
}

func (h *UcHomeRoomHandler) FindByIds(ctx context.Context, req *proto.UcHomeRoomFilter, resp *proto.UcHomeRoomResponse) error {
	s := service.UcHomeRoomSvc{Ctx: ctx}
	data, total, err := s.GetListUcHomeRoomByIds(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}
