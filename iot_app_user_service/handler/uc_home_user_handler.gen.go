// Code generated by sgen.exe,2022-04-18 21:26:14. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_app_user_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type UcHomeUserHandler struct{}

func (h *UcHomeUserHandler) GetUsersByHomeId(ctx context.Context, primarykey *proto.UcHomeUserPrimarykey, response *proto.UcHomeUsersResponse) error {
	s := service.UcHomeUserSvc{Ctx: ctx}
	data, err := s.GetUsersByHomeId(primarykey)
	if err != nil {
		response.Code = ERROR
		response.Message = err.Error()
	} else {
		response.Code = SUCCESS
		response.Message = "success"
		response.Data = data
	}
	return nil
}

// 创建
func (h *UcHomeUserHandler) Create(ctx context.Context, req *proto.UcHomeUser, resp *proto.Response) error {
	s := service.UcHomeUserSvc{Ctx: ctx}
	_, err := s.CreateUcHomeUser(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *UcHomeUserHandler) Delete(ctx context.Context, req *proto.UcHomeUser, resp *proto.Response) error {
	s := service.UcHomeUserSvc{Ctx: ctx}
	_, err := s.DeleteUcHomeUser(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *UcHomeUserHandler) DeleteById(ctx context.Context, req *proto.UcHomeUser, resp *proto.Response) error {
	s := service.UcHomeUserSvc{Ctx: ctx}
	_, err := s.DeleteByIdUcHomeUser(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *UcHomeUserHandler) DeleteByIds(ctx context.Context, req *proto.UcHomeUserBatchDeleteRequest, resp *proto.Response) error {
	s := service.UcHomeUserSvc{Ctx: ctx}
	_, err := s.DeleteByIdsUcHomeUser(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *UcHomeUserHandler) Update(ctx context.Context, req *proto.UcHomeUser, resp *proto.Response) error {
	s := service.UcHomeUserSvc{Ctx: ctx}
	_, err := s.UpdateUcHomeUser(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *UcHomeUserHandler) UpdateAll(ctx context.Context, req *proto.UcHomeUser, resp *proto.Response) error {
	s := service.UcHomeUserSvc{Ctx: ctx}
	_, err := s.UpdateAllUcHomeUser(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *UcHomeUserHandler) UpdateFields(ctx context.Context, req *proto.UcHomeUserUpdateFieldsRequest, resp *proto.Response) error {
	s := service.UcHomeUserSvc{Ctx: ctx}
	_, err := s.UpdateFieldsUcHomeUser(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *UcHomeUserHandler) Find(ctx context.Context, req *proto.UcHomeUserFilter, resp *proto.UcHomeUserResponse) error {
	s := service.UcHomeUserSvc{Ctx: ctx}
	data, err := s.FindUcHomeUser(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *UcHomeUserHandler) FindById(ctx context.Context, req *proto.UcHomeUserFilter, resp *proto.UcHomeUserResponse) error {
	s := service.UcHomeUserSvc{Ctx: ctx}
	data, err := s.FindByIdUcHomeUser(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *UcHomeUserHandler) Lists(ctx context.Context, req *proto.UcHomeUserListRequest, resp *proto.UcHomeUserResponse) error {
	s := service.UcHomeUserSvc{Ctx: ctx}
	data, total, err := s.GetListUcHomeUser(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *UcHomeUserHandler) SetResponse(resp *proto.UcHomeUserResponse, data *proto.UcHomeUser, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *UcHomeUserHandler) SetPageResponse(resp *proto.UcHomeUserResponse, list []*proto.UcHomeUser, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}

// 获取家庭用户列表（关联用户数据）
func (h *UcHomeUserHandler) HomeUserLists(ctx context.Context, req *proto.UcHomeUserFilter, resp *proto.UcHomeUserResponse) error {
	s := service.UcHomeUserSvc{Ctx: ctx}
	data, total, err := s.GetHomeUserList(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}
