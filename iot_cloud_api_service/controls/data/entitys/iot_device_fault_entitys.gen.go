// Code generated by sgen.exe,2022-06-10 10:05:12. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	proto "cloud_platform/iot_proto/protos/protosService"
	"strconv"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

// 增、删、改及查询返回
type IotDeviceFaultEntitys struct {
	Id              int64  `json:"id,omitempty"`
	DeviceId        string `json:"deviceId,omitempty"`
	DeviceKey       string `json:"deviceKey,omitempty"`
	DeviceName      string `json:"deviceName,omitempty"`
	BaseProductId   string `json:"baseProductId,omitempty"`
	ProductId       string `json:"productId,omitempty"`
	ProductKey      string `json:"productKey,omitempty"`
	ProductName     string `json:"productName,omitempty"`
	FaultIdentifier string `json:"faultIdentifier,omitempty"`
	FaultDpid       int32  `json:"faultDpid,omitempty"`
	FaultCode       string `json:"faultCode,omitempty"`
	FaultName       string `json:"faultName,omitempty"`
	CreatedAt       int64  `json:"time,omitempty"`
	Developer 		string `json:"developer"`
}

// 新增参数非空检查
func (s *IotDeviceFaultEntitys) AddCheck() error {
	return nil
}

// 修改参数非空检查
func (s *IotDeviceFaultEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*IotDeviceFaultQuery) QueryCheck() error {
	return nil
}

// 查询条件
type IotDeviceFaultQuery struct {
	Page      uint64                `json:"page,omitempty"`
	Limit     uint64                `json:"limit,omitempty"`
	Sort      string                `json:"sort,omitempty"`
	SortField string                `json:"sortField,omitempty"`
	SearchKey string                `json:"searchKey,omitempty"`
	Query     *IotDeviceFaultFilter `json:"query,omitempty"`
}

// IotDeviceFaultFilter，查询条件，字段请根据需要自行增减
type IotDeviceFaultFilter struct {
	Did           string `json:"did,omitempty"`
	LastDay       int32  `json:"lastDay,omitempty"`       //0,今天，7近7天，30近30天，-1所有
	StartTime     int64  `json:"startTime,omitempty"`     //预留
	EndTime       int64  `json:"endTime,omitempty"`       //预留
	BaseProductId string `json:"baseProductId,omitempty"` //产品类型ID
	ProductId     string `json:"productId,omitempty"`     //产品ID
	FaultCode     int64  `json:"faultCode,omitempty"`
	Developer 	  int64 `json:"developer,string"`
	TenantId  	  string `json:"tenantId"`
}

// 实体转pb对象
func IotDeviceFault_e2pb(src *IotDeviceFaultEntitys) *proto.IotDeviceFault {
	if src == nil {
		return nil
	}
	pbObj := proto.IotDeviceFault{
		Id: src.Id,
		//DeviceId:      iotutil.ToInt64(src.DeviceId),
		DeviceKey:  src.DeviceKey,
		DeviceName: src.DeviceName,
		//BaseProductId: iotutil.ToInt64(src.BaseProductId),
		//ProductId:     iotutil.ToInt64(src.ProductId),
		ProductKey:      src.ProductKey,
		ProductName:     src.ProductName,
		FaultIdentifier: src.FaultIdentifier,
		FaultDpid:       src.FaultDpid,
		FaultCode:       src.FaultCode,
		FaultName:       src.FaultName,
		CreatedAt:       timestamppb.New(time.Unix(src.CreatedAt, 0)),
	}
	if src.DeviceId != "" {
		Id, err := strconv.Atoi(src.DeviceId)
		if err == nil {
			pbObj.DeviceId = int64(Id)
		}
	}
	if src.ProductId != "" {
		Id, err := strconv.Atoi(src.ProductId)
		if err == nil {
			pbObj.ProductId = int64(Id)
		}
	}
	if src.BaseProductId != "" {
		Id, err := strconv.Atoi(src.BaseProductId)
		if err == nil {
			pbObj.BaseProductId = int64(Id)
		}
	}
	return &pbObj
}

// pb对象转实体
func IotDeviceFault_pb2e(src *proto.IotDeviceFault) *IotDeviceFaultEntitys {
	if src == nil {
		return nil
	}
	entitysObj := IotDeviceFaultEntitys{
		Id:              src.Id,
		DeviceId:        src.DeviceKey,
		DeviceKey:       src.DeviceKey,
		DeviceName:      src.DeviceName,
		BaseProductId:   strconv.Itoa(int(src.BaseProductId)),
		ProductId:       strconv.Itoa(int(src.ProductId)),
		ProductKey:      src.ProductKey,
		ProductName:     src.ProductName,
		FaultIdentifier: src.FaultIdentifier,
		FaultDpid:       src.FaultDpid,
		FaultCode:       src.FaultCode,
		FaultName:       src.FaultName,
		CreatedAt:       src.CreatedAt.AsTime().Unix(),
	}
	return &entitysObj
}
