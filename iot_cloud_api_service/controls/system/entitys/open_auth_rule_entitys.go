// Code generated by sgen.exe,2022-04-17 14:07:16. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_proto/protos/protosService"
	"google.golang.org/protobuf/types/known/timestamppb"
	"time"
)

// //增、删、改及查询返回
// type SysAuthRuleEntitys struct {
// 	Id         int64     `json:"id,omitempty"`
// 	Pid        int64     `json:"pid,omitempty"`
// 	Name       string    `json:"name,omitempty"`
// 	Title      string    `json:"title,omitempty"`
// 	Icon       string    `json:"icon,omitempty"`
// 	Condition  string    `json:"condition,omitempty"`
// 	Remark     string    `json:"remark,omitempty"`
// 	MenuType   int32     `json:"menuType,omitempty"`
// 	Weigh      int32     `json:"weigh,omitempty"`
// 	Status     int32     `json:"status,omitempty"`
// 	AlwaysShow int32     `json:"alwaysShow,omitempty"`
// 	Path       string    `json:"path,omitempty"`
// 	JumpPath   string    `json:"jumpPath,omitempty"`
// 	Component  string    `json:"component,omitempty"`
// 	IsFrame    int32     `json:"isFrame,omitempty"`
// 	ModuleType string    `json:"moduleType,omitempty"`
// 	ModelId    int64     `json:"modelId,omitempty"`
// 	CreatedAt  time.Time `json:"createdAt,omitempty"`
// 	UpdatedAt  time.Time `json:"updatedAt,omitempty"`
// 	DeletedAt  time.Time `json:"deletedAt,omitempty"`
// }

type OpenAuthRuleEntitys struct {
	Id              string `json:"id"`              //
	Pid             string `json:"parentId"`        // 父ID
	Name            string `json:"name"`            // 规则名称
	Title           string `json:"title"`           // 规则名称
	Icon            string `json:"icon"`            // 图标
	Condition       string `json:"condition"`       // 条件
	Remark          string `json:"remark"`          // 备注
	MenuType        uint   `json:"menuType"`        // 类型 0目录 1菜单 2按钮
	Weigh           int    `json:"weigh"`           // 权重
	Status          uint   `json:"status"`          // 状态
	AlwaysShow      uint   `json:"visible"`         // 显示状态
	Path            string `json:"path"`            // 路由地址
	JumpPath        string `json:"jumpPath"`        // 跳转路由
	Component       string `json:"component"`       // 组件路径
	IsFrame         uint   `json:"isFrame"`         // 是否外链 1是 0否
	ModuleType      string `json:"moduleType"`      // 所属模块
	ModelId         uint   `json:"modelvId"`        // 模型ID
	IsCache         int32  `json:"isCache"`         //是否缓存
	IsHideChildMenu int32  `json:"isHideChildMenu"` //是否隐藏子菜单
	CreatedAt       int64  `json:"createdAt,omitempty"`
	UpdatedAt       int64  `json:"updatedAt,omitempty"`
}

// SysAuthRuleTreeRes 菜单树形结构
type OpenAuthRuleTreeRes struct {
	*OpenAuthRuleEntitys
	Children []*OpenAuthRuleTreeRes `json:"children"`
}

// 查询条件
type OpenAuthRuleQuery struct {
	Title  string `json:"menuName" form:"menuName"`
	Status int32  `json:"status" form:"status"`
}
type OpenAuthRuleFilter struct {
	Id         int64  `json:"id,omitempty"`
	Pid        int64  `json:"parentId,omitempty"`
	Name       string `json:"name,omitempty"`
	Title      string `json:"title,omitempty"`
	Icon       string `json:"icon,omitempty"`
	Condition  string `json:"condition,omitempty"`
	Remark     string `json:"remark,omitempty"`
	MenuType   int32  `json:"menuType,omitempty"`
	Weigh      int32  `json:"weigh,omitempty"`
	Status     int32  `json:"status,omitempty"`
	AlwaysShow int32  `json:"alwaysShow,omitempty"`
	Path       string `json:"path,omitempty"`
	JumpPath   string `json:"jumpPath,omitempty"`
	Component  string `json:"component,omitempty"`
	IsFrame    int32  `json:"isFrame,omitempty"`
	ModuleType string `json:"moduleType,omitempty"`
	ModelId    int64  `json:"modelId,omitempty"`
	CreatedAt  int64  `json:"createdAt,omitempty"`
	UpdatedAt  int64  `json:"updatedAt,omitempty"`
}

// 实体转pb对象
func OpenAuthRule_e2pb(src *OpenAuthRuleEntitys) *protosService.OpenAuthRule {
	if src == nil {
		return nil
	}
	pbObj := protosService.OpenAuthRule{
		Id:              iotutil.ToInt64(src.Id),
		Pid:             iotutil.ToInt64(src.Pid),
		Name:            src.Name,
		Title:           src.Title,
		Icon:            src.Icon,
		Condition:       src.Condition,
		Remark:          src.Remark,
		MenuType:        int32(src.MenuType),
		Weigh:           int32(src.Weigh),
		Status:          int32(src.Status),
		AlwaysShow:      int32(src.AlwaysShow),
		Path:            src.Path,
		JumpPath:        src.JumpPath,
		Component:       src.Component,
		IsFrame:         int32(src.IsFrame),
		ModuleType:      src.ModuleType,
		ModelId:         int64(src.ModelId),
		IsCache:         src.IsCache,
		IsHideChildMenu: src.IsHideChildMenu,
		CreatedAt:       timestamppb.New(iotutil.GetTimeByUnit(src.CreatedAt)),
		UpdatedAt:       timestamppb.New(iotutil.GetTimeByUnit(src.UpdatedAt)),
	}
	return &pbObj
}

// pb对象转实体
func OpenAuthRuleRes_pb2e(src *protosService.OpenAuthRule) *OpenAuthRuleTreeRes {
	if src == nil {
		return nil
	}
	entitysObj := OpenAuthRuleTreeRes{
		OpenAuthRuleEntitys: &OpenAuthRuleEntitys{
			Id:              iotutil.ToString(src.Id),
			Pid:             iotutil.ToString(src.Pid),
			Name:            src.Name,
			Title:           src.Title,
			Icon:            src.Icon,
			Condition:       src.Condition,
			Remark:          src.Remark,
			MenuType:        uint(src.MenuType),
			Weigh:           int(src.Weigh),
			Status:          uint(src.Status),
			AlwaysShow:      uint(src.AlwaysShow),
			Path:            src.Path,
			JumpPath:        src.JumpPath,
			Component:       src.Component,
			IsFrame:         uint(src.IsFrame),
			ModuleType:      src.ModuleType,
			ModelId:         uint(src.ModelId),
			IsCache:         src.IsCache,
			IsHideChildMenu: src.IsHideChildMenu,
			CreatedAt:       src.CreatedAt.AsTime().Unix(),
			UpdatedAt:       src.UpdatedAt.AsTime().Unix(),
		},

		Children: nil,
	}
	return &entitysObj
}

// pb对象转实体
func OpenAuthRule_pb2e(src *protosService.OpenAuthRule) *OpenAuthRuleEntitys {
	if src == nil {
		return nil
	}
	entitysObj := OpenAuthRuleEntitys{
		Id:              iotutil.ToString(src.Id),
		Pid:             iotutil.ToString(src.Pid),
		Name:            src.Name,
		Title:           src.Title,
		Icon:            src.Icon,
		Condition:       src.Condition,
		Remark:          src.Remark,
		MenuType:        uint(src.MenuType),
		Weigh:           int(src.Weigh),
		Status:          uint(src.Status),
		AlwaysShow:      uint(src.AlwaysShow),
		Path:            src.Path,
		JumpPath:        src.JumpPath,
		Component:       src.Component,
		IsFrame:         uint(src.IsFrame),
		ModuleType:      src.ModuleType,
		ModelId:         uint(src.ModelId),
		IsCache:         src.IsCache,
		IsHideChildMenu: src.IsHideChildMenu,
		CreatedAt:       src.CreatedAt.AsTime().Unix(),
		UpdatedAt:       src.UpdatedAt.AsTime().Unix(),
	}
	return &entitysObj
}

// 新增和修改的时候给公共字段赋值, opterType 1 新增, 2 修改
func OpenAuthRule_SetCommonFiled(model *OpenAuthRuleEntitys, userId int64, opterType int) {
	if opterType == 1 {
		model.CreatedAt = time.Now().Unix()
	}
	model.UpdatedAt = time.Now().Unix()
}
