// Code generated by sgen.exe,2022-04-21 14:24:40. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"errors"
)

// 增、删、改及查询返回
type IotDeviceTriadEntitys struct {
	Id           string `json:"id"`
	TenantId     string `json:"tenantId"`
	UserId       string `json:"userId"`
	Did          string `json:"did"`
	ProductKey   string `json:"productKey"`
	UserName     string `json:"userName"`
	Passward     string `json:"passward"`
	Status       int32  `json:"status"`
	Salt         string `json:"salt"`
	DeviceSecret string `json:"deviceSecret"`
	CreatedBy    int64  `json:"createdBy"`
	UpdatedBy    int64  `json:"updatedBy"`
	CreatedAt    int64  `json:"createdAt"`
	UpdatedAt    int64  `json:"updatedAt"`
}

// 查询条件
type IotDeviceTriadQuery struct {
	Page      uint64               `json:"page,omitempty"`
	Limit     uint64               `json:"limit,omitempty"`
	Sort      string               `json:"sort,omitempty"`
	SortField string               `json:"sortField,omitempty"`
	ProductId string               `json:"productId"`
	Query     IotDeviceTriadFilter `json:"query,omitempty"`
}

// IotDeviceTriadFilter，查询条件，字段请根据需要自行增减
type IotDeviceTriadFilter struct {
	Id           int64  `json:"id,string,omitempty"`
	TenantId     string `json:"tenantId,omitempty"`
	UserId       string `json:"userId,omitempty"`
	Did          string `json:"did,omitempty"`
	ProductKey   string `json:"productKey,omitempty"`
	ProductId    int64  `json:"productId,omitempty"`
	BatchId      string `json:"batchId,omitempty"`
	UserName     string `json:"userName,omitempty"`
	Passward     string `json:"passward,omitempty"`
	Status       int32  `json:"status,omitempty"`
	Salt         string `json:"salt,omitempty"`
	DeviceSecret string `json:"deviceSecret,omitempty"`
	UseType      int32  `json:"useType"`
	IsTest       int32  `json:"isTest"`
}

// 实体转pb对象
func IotDeviceTriad_e2pb(src *IotDeviceTriadEntitys) *proto.IotDeviceTriad {
	if src == nil {
		return nil
	}
	pbObj := proto.IotDeviceTriad{
		Id:           iotutil.ToInt64(src.Id),
		TenantId:     src.TenantId,
		UserId:       iotutil.ToInt64(src.UserId),
		Did:          src.Did,
		ProductKey:   src.ProductKey,
		UserName:     src.UserName,
		Passward:     src.Passward,
		Status:       src.Status,
		Salt:         src.Salt,
		DeviceSecret: src.DeviceSecret,
		CreatedBy:    src.CreatedBy,
		UpdatedBy:    src.UpdatedBy,
	}
	return &pbObj
}

// pb对象转实体
func IotDeviceTriad_pb2e(src *proto.IotDeviceTriad) *IotDeviceTriadEntitys {
	if src == nil {
		return nil
	}
	entitysObj := IotDeviceTriadEntitys{
		Id:           iotutil.ToString(src.Id),
		TenantId:     iotutil.ToString(src.TenantId),
		UserId:       iotutil.ToString(src.UserId),
		Did:          src.Did,
		ProductKey:   src.ProductKey,
		UserName:     src.UserName,
		Passward:     src.Passward,
		Status:       src.Status,
		Salt:         src.Salt,
		DeviceSecret: src.DeviceSecret,
		CreatedBy:    src.CreatedBy,
		UpdatedBy:    src.UpdatedBy,
		CreatedAt:    src.CreatedAt.AsTime().Unix(),
		UpdatedAt:    src.UpdatedAt.AsTime().Unix(),
	}
	return &entitysObj
}

type GenerateDeviceTriad struct {
	GeneratorChannel int32              `json:"generatorChannel"`          //生成渠道名称 =2 开放平台
	ProductKey       string             `json:"productKey,omitempty"`      //产品Model
	ProductId        string             `json:"productId,omitempty"`       //产品编号
	DeviceNatureKey  int32              `json:"deviceNatureKey,omitempty"` //产品Model
	Number           int32              `json:"number,omitempty"`          //数量
	Batch            string             `json:"batch,omitempty"`           //批次
	DeviceId         string             `json:"deviceId,omitempty"`        //【新增】设备编号
	AddMode          int32              `json:"addMode,omitempty"`         //【新增】新增模式 1 批量生成新设备 2 添加已存在设备
	SerialNumbers    []string           `json:"serialNumbers"`             //序列号
	UseType          int32              `json:"useType"`                   //使用类型（=1 真实测试设备 =2 虚拟测试设备）
	IsTest           int32              `json:"isTest"`                    //是否测试设备（=1 测试设备 =2 非测试设备）
	TenantId         string             `json:"tenantId"`
	AccountType      int32              `json:"accountType"`
	UserAccount      string             `json:"userAccount"`
	AppKey           string             `json:"appKey"`
	RegionServerId   int64              `json:"regionServerId"` //区域服务器Id
	Devices          []DeviceImportData `json:"serialNumbers"`
}

type DeviceImportData struct {
	Sn       string `json:"sn"`
	DeviceId string `json:"deviceId"`
	UserName string `json:"UserName"`
	Password string `json:"Password"`
}

func DeviceImportDatasToDp(req []DeviceImportData) []*proto.GenDeviceTriadData {
	var data []*proto.GenDeviceTriadData
	for _, item := range req {
		data = append(data, &proto.GenDeviceTriadData{
			Sn:       item.Sn,
			DeviceId: item.DeviceId,
			UserName: item.UserName,
			Password: item.Password,
		})
	}
	return data
}

func (s GenerateDeviceTriad) CheckGenerateParams() error {
	//if s.ProductKey != "" {
	//	return errors.New("产品不能为空")
	//}
	if s.Number == 0 {
		return errors.New("生成数量不能为0")
	}
	return nil
}

type IotDeviceTriad struct {
	Page      uint64               `json:"page,omitempty"`
	Limit     uint64               `json:"limit,omitempty"`
	Sort      string               `json:"sort,omitempty"`
	SortField string               `json:"sortField,omitempty"`
	ProductId string               `json:"productId"`
	Query     IotDeviceTriadFilter `json:"query,omitempty"`
}

type AddAppAccountEntity struct {
	Account        string `json:"account"`          //账号
	ProductId      int64  `json:"productId,string"` //产品编号
	AppKey         string `json:"appKey"`           //产品Model
	DeviceId       string `json:"deviceId"`         //设备编号
	TenantId       string `json:"tenantId"`         //产品Model
	RegionServerId int64  `json:"regionServerId"`   //区域服务器Id
	PanelId        int64  `json:"panelId"`          //预览面板
	AppPanelType   int32  `json:"appPanelType"`     //预览面板类型
	DeviceName     string `json:"deviceName"`       //设备名称
	CheckRepeat    bool   `json:"checkRepeat"`      //检查重复，如果面板预览，不创建重复产品
}

type VirtualDeviceItem struct {
	Id             int64  `json:"id,string"`   // 唯一主键id
	AppName        string `json:"appName"`     // APP名称，APP名称以及账号
	AppKey         string `json:"appKey"`      // APP Key，APP名称以及账号
	Did            string `json:"did"`         // 设备ID，（14位 1~9 A~Z随机）
	UserAccount    string `json:"userAccount"` // 用户账号，APP名称以及账号
	UserId         string `json:"userId"`      // 用户编号，用户ID
	DeviceUserName string `json:"deviceUserName"`
	DevicePassword string `json:"devicePassword"`
}

// 查询条件
type VirtualDeviceQuery struct {
	Page      uint64 `json:"page,omitempty"`
	Limit     uint64 `json:"limit,omitempty"`
	ProductId int64  `json:"productId,string"`
	IsVirtual int32  `json:"isVirtual"`
}
