// Code generated by sgen.exe,2022-04-21 14:24:40. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

// 增、删、改及查询返回
type IotDeviceInfoEntitys struct {
	Id                int64   `json:"id,string"`
	Did               string  `json:"did"`
	ProductId         int64   `json:"productId,string"`
	ProductKey        string  `json:"productKey"`
	WifiFlag          string  `json:"wifiFlag"`
	ProductName       string  `json:"productName"`
	OnlineStatus      int32   `json:"onlineStatus"`
	DeviceName        string  `json:"deviceName"`
	DeviceNature      string  `json:"deviceNature"`
	DeviceNatureKey   int32   `json:"deviceNatureKey"`
	Sn                string  `json:"sn"`
	BatchId           int64   `json:"batchId"`
	GroupId           int64   `json:"groupId"`
	DeviceModel       string  `json:"deviceModel"`
	UserName          string  `json:"userName"`
	Passward          string  `json:"passward"`
	Salt              string  `json:"salt"`
	DeviceSecretHttp  string  `json:"deviceSecretHttp"`
	DeviceSecretMqtt  string  `json:"deviceSecretMqtt"`
	IpAddress         string  `json:"ipAddress"`
	Lat               float64 `json:"lat"`
	Lng               float64 `json:"lng"`
	Country           string  `json:"country"`
	Province          string  `json:"province"`
	City              string  `json:"city"`
	District          string  `json:"district"`
	ActivatedTime     int64   `json:"activatedTime,omitempty"`
	LastActivatedTime int64   `json:"LastActivatedTime,omitempty"`
	MacAddress        string  `json:"macAddress"`
	DeviceVersion     string  `json:"deviceVersion"`
	ActiveStatus      string  `json:"activeStatus"`
	CreatedAt         int64   `json:"createdAt"`
	UpdatedAt         int64   `json:"updatedAt"`

	CompanyName string `json:"companyName"`
	Account     string `json:"account"`

	ExportCount int32 `json:"exportCount"` //导出次数
	PlatformCode string `json:"platformCode"` //平台编码
	PlatformName string `json:"platformName"` //平台名称
	ExportList []string `json:"exportList"` //导出历史时间列表
}

// 查询条件
type IotDeviceInfoQuery struct {
	Page        uint64                 `json:"page,omitempty"`
	Limit       uint64                 `json:"limit,omitempty"`
	Sort        string                 `json:"sort,omitempty"`
	SortField   string                 `json:"sortField,omitempty"`
	SearchKey   string                 `json:"searchKey"`
	IsOnlyCount int32                  `json:"isOnlyCount,omitempty"`
	IsPlatform  bool                   `json:"isPlatform"`
	Query       *IotDeviceInfoQueryObj `json:"query,omitempty"`
}

// IotDeviceInfoFilter，查询条件，字段请根据需要自行增减
type IotDeviceInfoQueryObj struct {
	Did              string      `json:"did,omitempty"`
	IsActive         *int32      `json:"isActive,omitempty"`
	IsOnline         *int32      `json:"isOnline,omitempty"`
	BelongType       *int32      `json:"belongType,omitempty"`
	DeviceNature     int32       `json:"deviceNature,omitempty"`
	EndTime          interface{} `json:"endTime,omitempty"`
	StartTime        interface{} `json:"startTime,omitempty"`
	SerialNumber     string      `json:"serialNumber,omitempty"`
	ProductId        int64       `json:"productId,string,omitempty"`
	ProductKey       string      `json:"productKey,omitempty"`
	DeviceName       string      `json:"deviceName,omitempty"`
	ActiveStatus     *int32      `json:"activeStatus,omitempty"`
	BatchId          interface{} `json:"batch,omitempty"`
	SearchKey        string      `json:"searchKey"`
	Developer        string      `json:"developer"`        //开发者账号
	IsQueryTriadData bool        `json:"isQueryTriadData"` //是否查询三元组数据
	IsExport         bool        `json:"isExport"`         //是否导出数据
	IsQueryExport         int32        `json:"isQueryExport"`         //是否导出数据
	ExportCount      int32       `json:"exportCount"`      // 导出数量
	PlatformCode      string       `json:"platformCode"`      // 平台编码
}

// IotDeviceInfoFilter，查询条件，字段请根据需要自行增减
type IotDeviceTriadExportQuery struct {
	ProductId    int64  `json:"productId,string"`
	BatchId      int64  `json:"batch"`
	DeviceName   string `json:"deviceName"`
	ActiveStatus *int32 `json:"activeStatus"`
	SerialNumber string `json:"serialNumber"`
}

type IotDeviceInfoDetails struct {
	DeviceInfo   *IotDeviceInfoBasicInfo  `json:"deviceInfo"`   // 设备基础信息
	ActiveInfo   *IotDeviceInfoActiveInfo `json:"activeInfo"`   // 设备激活信息
	DeviceStatus []*IotDeviceInfoStatus   `json:"deviceStatus"` // 设备状态信息
	FirmwareList []*DeviceFirmwares `json:"firmwareList"`
}

// 设备固件列表
type DeviceFirmwares struct {
	Name string `json:"name"`//固件名称
	Type int32 `json:"type"`//固件类型
	Key string `json:"key"`//固件Key
	Version string `json:"version"`//固件版本
}

type IotDeviceInfoBasicInfo struct {
	Id                 int64  `json:"id,string"`          // 产品UUID
	Did                string `json:"did"`                // 设备ID
	DeviceName         string `json:"deviceName"`         //设备名称
	ProductId          int64  `json:"productId,string"`   //产品编号
	Model              string `json:"model"`              //产品Key
	ProductKey         string `json:"productKey"`         //产品Key
	ProductName        string `json:"productName"`        //产品名称
	FirmwallKey        string `json:"firmwallKey"`        //固件KEY
	FirmwallVersion    string `json:"firmwallVersion"`    //固件版本
	McuFirmwallKey     string `json:"mcuFirmwallKey"`     //MCU固件key
	McuFirmwallVersion string `json:"mcuFirmwallVersion"` //MCU固件版本
	ModuleSN           string `json:"moduleSN"`           //模组SN
	ModuleVersion      string `json:"moduleVersion"`      //模组版本
	DeviceSN           string `json:"deviceSN"`           //设备SN
}

type IotDeviceInfoActiveInfo struct {
	ActiveStatus      string `json:"activeStatus"`      //激活状态
	ActivatedTime     int64  `json:"activatedTime"`     //首次激活时间
	LastActivatedTime int64  `json:"lastActivatedTime"` //最后激活时间
	UpdateTime        int64  `json:"updateTime"`        //修改时间
	OnlineStatus      string `json:"onlineStatus"`      //在线状态
	ActiveUser        string `json:"activeUser"`        //绑定用户
	ActiveApp         string `json:"activeApp"`         //绑定APP
	ActiveLoc         string `json:"activeLoc"`         //地理位置
	ActiveChannel     string `json:"activeChannel"`     //渠道
	ActiveTimeZone    string `json:"activeTimeZone"`    //时区
	BelogOpenUser     string `json:"belogOpenUser"`     //归属开发者用户
}

// 设备属性值
type IotDeviceInfoStatus struct {
	AttrKey       string `json:"attrKey"`       //功能KEY
	AttrKeyName   string `json:"attrKeyName"`   //功能名称
	AttrValue     string `json:"attrValue"`     //功能值
	AttrValueName string `json:"attrValueName"` //功能值描述
}

// 实体转pb对象
func IotDeviceInfo_activeInfo_pb2e(src *proto.IotDeviceInfoActiveInfo) *IotDeviceInfoActiveInfo {
	if src == nil {
		return nil
	}
	pbObj := IotDeviceInfoActiveInfo{
		ActiveStatus:      src.ActiveStatus,
		ActivatedTime:     src.ActivatedTime.AsTime().Unix(),
		LastActivatedTime: src.LastActivatedTime.AsTime().Unix(),
		UpdateTime:        src.UpdateTime.AsTime().Unix(),
		OnlineStatus:      src.OnlineStatus,
		ActiveUser:        src.ActiveUser,
		ActiveApp:         src.ActiveApp,
		ActiveLoc:         src.ActiveLoc,
		ActiveChannel:     src.ActiveChannel,
		ActiveTimeZone:    src.ActiveTimeZone,
		BelogOpenUser:     src.BelogOpenUser,
	}
	return &pbObj
}

func IotDeviceInfo_deviceInfo_pb2e(src *proto.IotDeviceInfoBasicInfo) *IotDeviceInfoBasicInfo {
	if src == nil {
		return nil
	}
	pbObj := IotDeviceInfoBasicInfo{
		Id:                 src.Id,
		Did:                src.Did,
		DeviceName:         src.DeviceName,
		ProductId:          src.ProductId,
		ProductKey:         src.ProductKey,
		Model:              src.ProductKey, //兼容前端显示
		ProductName:        src.ProductName,
		FirmwallKey:        src.FirmwallKey,
		FirmwallVersion:    src.FirmwallVersion,
		McuFirmwallKey:     src.McuFirmwallKey,
		McuFirmwallVersion: src.McuFirmwallVersion,
		ModuleSN:           src.ModuleSN,
		ModuleVersion:      src.ModuleVersion,
		DeviceSN:           src.DeviceSN,
	}
	return &pbObj
}

// IotDeviceInfoFilter，查询条件，字段请根据需要自行增减
type IotDeviceInfoFilter struct {
	Id                string    `json:"id,omitempty"`
	Did               string    `json:"did,omitempty"`
	ProductId         int64     `json:"productId,omitempty"`
	OnlineStatus      int32     `json:"onlineStatus,omitempty"`
	DeviceName        string    `json:"deviceName,omitempty"`
	DeviceNature      string    `json:"deviceNature,omitempty"`
	Sn                string    `json:"sn,omitempty"`
	BatchId           int64     `json:"batchId,omitempty"`
	GroupId           int64     `json:"groupId,omitempty"`
	DeviceModel       string    `json:"deviceModel,omitempty"`
	UserName          string    `json:"userName,omitempty"`
	Passward          string    `json:"passward,omitempty"`
	Salt              string    `json:"salt,omitempty"`
	DeviceSecretHttp  string    `json:"deviceSecretHttp,omitempty"`
	DeviceSecretMqtt  string    `json:"deviceSecretMqtt,omitempty"`
	IpAddress         string    `json:"ipAddress,omitempty"`
	Lat               int64     `json:"lat,omitempty"`
	Lng               int64     `json:"lng,omitempty"`
	Country           int64     `json:"country,omitempty"`
	Province          string    `json:"province,omitempty"`
	City              string    `json:"city,omitempty"`
	District          string    `json:"district,omitempty"`
	ActivatedTime     int64     `json:"activatedTime,omitempty"`
	LastActivatedTime int64     `json:"LastActivatedTime,omitempty"`
	MacAddress        string    `json:"macAddress,omitempty"`
	DeviceVersion     string    `json:"deviceVersion,omitempty"`
	ActiveStatus      string    `json:"activeStatus,omitempty"`
	CreatedBy         int64     `json:"createdBy,omitempty"`
	UpdatedBy         int64     `json:"updatedBy,omitempty"`
	CreatedAt         time.Time `json:"createdAt,omitempty"`
	UpdatedAt         time.Time `json:"updatedAt,omitempty"`
	DeletedAt         time.Time `json:"deletedAt,omitempty"`
}

// 实体转pb对象
func IotDeviceInfo_e2pb(src *IotDeviceInfoEntitys) *proto.IotDeviceInfo {
	if src == nil {
		return nil
	}
	pbObj := proto.IotDeviceInfo{
		Id:                iotutil.ToInt64(src.Id),
		Did:               src.Did,
		ProductId:         src.ProductId,
		OnlineStatus:      src.OnlineStatus,
		DeviceName:        src.DeviceName,
		DeviceNature:      src.DeviceNature,
		Sn:                src.Sn,
		BatchId:           src.BatchId,
		GroupId:           src.GroupId,
		DeviceModel:       src.DeviceModel,
		UserName:          src.UserName,
		Passward:          src.Passward,
		Salt:              src.Salt,
		DeviceSecretHttp:  src.DeviceSecretHttp,
		DeviceSecretMqtt:  src.DeviceSecretMqtt,
		IpAddress:         src.IpAddress,
		Lat:               src.Lat,
		Lng:               src.Lng,
		Country:           src.Country,
		Province:          src.Province,
		City:              src.City,
		District:          src.District,
		ActivatedTime:     timestamppb.New(time.Unix(src.ActivatedTime, 0)),
		LastActivatedTime: timestamppb.New(time.Unix(src.LastActivatedTime, 0)),
		MacAddress:        src.MacAddress,
		DeviceVersion:     src.DeviceVersion,
		ActiveStatus:      src.ActiveStatus,
		//CreatedBy:         src.CreatedBy,
		//UpdatedBy:         src.UpdatedBy,
	}
	return &pbObj
}

// pb对象转实体
func IotDeviceInfo_pb2e(src *proto.IotDeviceInfo) *IotDeviceInfoEntitys {
	if src == nil {
		return nil
	}
	entitysObj := IotDeviceInfoEntitys{
		Id:               src.Id,
		Did:              src.Did,
		ProductId:        src.ProductId,
		ProductKey:       src.ProductKey,
		OnlineStatus:     src.OnlineStatus,
		DeviceName:       src.DeviceName,
		DeviceNature:     src.DeviceNature,
		Sn:               src.Sn,
		BatchId:          src.BatchId,
		GroupId:          src.GroupId,
		DeviceModel:      src.DeviceModel,
		UserName:         src.UserName,
		Passward:         src.Passward,
		Salt:             src.Salt,
		DeviceSecretHttp: src.DeviceSecretHttp,
		DeviceSecretMqtt: src.DeviceSecretMqtt,
		IpAddress:        src.IpAddress,
		Lat:              src.Lat,
		Lng:              src.Lng,
		Country:          src.Country,
		Province:         src.Province,
		City:             src.City,
		District:         src.District,
		MacAddress:       src.MacAddress,
		DeviceVersion:    src.DeviceVersion,
		ActiveStatus:     src.ActiveStatus,
		//CreatedBy:         src.CreatedBy,
		//UpdatedBy:         src.UpdatedBy,
		//CreatedAt: src.CreatedAt.AsTime(),
		//UpdatedAt: src.UpdatedAt.AsTime(),
	}
	if src.ActivatedTime != nil {
		entitysObj.ActivatedTime = src.ActivatedTime.AsTime().Unix()
		if src.ActivatedTime.AsTime().Unix() < 0 {
			entitysObj.ActivatedTime = 0
		}
	}
	if src.LastActivatedTime != nil {
		entitysObj.LastActivatedTime = src.LastActivatedTime.AsTime().Unix()
		if src.LastActivatedTime.AsTime().Unix() < 0 {
			entitysObj.LastActivatedTime = 0
		}
	}
	if src.CreatedAt != nil {
		entitysObj.CreatedAt = src.CreatedAt.AsTime().Unix()
		if src.CreatedAt.AsTime().Unix() < 0 {
			entitysObj.CreatedAt = 0
		}
	}
	if src.UpdatedAt != nil {
		entitysObj.UpdatedAt = src.UpdatedAt.AsTime().Unix()
		if src.UpdatedAt.AsTime().Unix() < 0 {
			entitysObj.UpdatedAt = 0
		}
	}
	return &entitysObj
}

type IotDeviceInfoTotalCount struct {
	ActiveTotal int64 `json:"activeTotal"` // 已绑定设备
	DeviceTotal int64 `json:"deviceTotal"` // 设备总数
	OnlineTotal int64 `json:"onlineTotal"` // 当前在线设备
}
