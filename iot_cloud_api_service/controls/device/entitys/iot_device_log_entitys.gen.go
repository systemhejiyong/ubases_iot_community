// Code generated by sgen.exe,2022-04-21 19:06:38. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	proto "cloud_platform/iot_proto/protos/protosService"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

// 增、删、改及查询返回
type IotDeviceLogEntitys struct {
	Id             string `json:"id"`
	Did            string `json:"did"`
	ReportTime     int64  `json:"reportTime"`
	EventType      int32  `json:"eventType"`
	EventTypeName  string `json:"eventTypeName"`
	FuncKey        string `json:"funcKey"`
	FuncKeyName    string `json:"funcName"`
	FuncValue      string `json:"funcValue"`
	FuncDesc       string `json:"funcDesc"`
	OriginType     int32  `json:"originType"`
	OriginTypeName string `json:"originChannel"`
	OriginDetail   string `json:"originDetail"`
	CreatedAt      int64  `json:"createdAt"`
}

// 查询条件
type IotDeviceLogQuery struct {
	Page      uint64                `json:"page,omitempty"`
	Limit     uint64                `json:"limit,omitempty"`
	Sort      string                `json:"sort,omitempty"`
	SortField string                `json:"sortField,omitempty"`
	Query     *IotDeviceLogQueryObj `json:"query,omitempty"`
}

// IotDeviceLogFilter，查询条件，字段请根据需要自行增减
type IotDeviceLogFilter struct {
	Id           int64     `json:"id,string,omitempty"`
	Did          string    `json:"did,omitempty"`
	ReportTime   time.Time `json:"reportTime,omitempty"`
	EventType    int32     `json:"eventType,omitempty"`
	FuncKey      string    `json:"funcKey,omitempty"`
	FuncValue    string    `json:"funcValue,omitempty"`
	FuncDesc     string    `json:"funcDesc,omitempty"`
	OriginType   int32     `json:"originType,omitempty"`
	OriginDetail string    `json:"originDetail,omitempty"`
	CreatedAt    time.Time `json:"createdAt,omitempty"`
}

// IotDeviceInfoFilter，查询条件，字段请根据需要自行增减
type IotDeviceLogQueryObj struct {
	Did         string `json:"did,omitempty"`
	EventType   int32  `json:"eventType,omitempty"`
	EventKey    string `json:"eventKey,omitempty"`
	Origin      int32  `json:"origin,omitempty"`
	EndTime     int64  `json:"endTime,omitempty"`
	StartTime   int64  `json:"startTime,omitempty"`
	IsOnlyCount int    `json:"isOnlyCount,omitempty"`
}

// 实体转pb对象
func IotDeviceLog_e2pb(src *IotDeviceLogEntitys) *proto.IotDeviceLog {
	if src == nil {
		return nil
	}
	pbObj := proto.IotDeviceLog{
		//Id:           src.Id,
		Did:          src.Did,
		ReportTime:   timestamppb.New(time.Unix(src.ReportTime, 0)),
		EventType:    src.EventType,
		FuncKey:      src.FuncKey,
		FuncValue:    src.FuncValue,
		FuncDesc:     src.FuncDesc,
		OriginType:   src.OriginType,
		OriginDetail: src.OriginDetail,
	}
	return &pbObj
}

// pb对象转实体
func IotDeviceLog_pb2e(src *proto.IotDeviceLog) *IotDeviceLogEntitys {
	if src == nil {
		return nil
	}
	entitysObj := IotDeviceLogEntitys{
		//Id:             src.Id,
		Did:            src.Did,
		ReportTime:     src.ReportTime.AsTime().Unix(),
		EventType:      src.EventType,
		EventTypeName:  ToEventTypeName(src.EventType),
		FuncKey:        src.FuncKey,
		FuncValue:      src.FuncValue,
		FuncKeyName:    src.FuncDesc,
		FuncDesc:       src.FuncDesc,
		OriginType:     src.OriginType,
		OriginTypeName: ToOriginTypeName(src.OriginType),
		OriginDetail:   src.OriginDetail,
		CreatedAt:      src.CreatedAt.AsTime().Unix(),
	}

	return &entitysObj
}

func ToEventTypeName(eventType int32) string {
	res := "其它"
	switch eventType {
	case 1:
		res = "指令下发"
	case 2:
		res = "数据上报"
	case 3:
		res = "设备信号量"
	}
	return res
}

func ToEventTypeNameExt(ns string) (int32, string) {
	if ns == "iot.device.report" {
		return 1, "数据上报"
	} else if ns == "iot.device.control" {
		return 2, "指令下发"
	}
	return 0, "其它"
}

func EventTypeToNs(productKey, deviceId string, eventType int32) string {
	if eventType == 1 {
		//数据上报
		return "iot.device.report"
	} else if eventType == 2 {
		//指令下发
		return "iot.device.control"
	}
	return ""
}

func ToOriginTypeName(originType int32) string {
	res := "其它"
	switch originType {
	case 1:
		res = "设备本身"
	case 2:
		res = "客户端"
	case 3:
		res = "云端"
	}
	return res
}
