// Code generated by sgen.exe,2022-05-11 08:50:57. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	services "cloud_platform/iot_cloud_api_service/controls/global"
	langEntitys "cloud_platform/iot_cloud_api_service/controls/lang/entitys"
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"errors"
)

// 增、删、改及查询返回
type OpmProductEntitys struct {
	Id                   int64  `json:"id,string"`
	ProductTypeId        int64  `json:"productTypeId,string"`
	ProductId        	 int64  `json:"productId,string,omitempty"`
	ProductKey           string `json:"productKey"`
	Name                 string `json:"name"`
	NameEn               string `json:"nameEn"`
	Identifier           string `json:"identifier"`
	Model                string `json:"model"`
	ImageUrl             string `json:"imageUrl"`
	WifiFlag             string `json:"wifiFlag"`
	NetworkType          int32  `json:"networkType"`
	NetworkTypeDesc      string `json:"networkTypeDesc"`
	AttributeType        int32  `json:"attributeType"`
	PowerConsumeType     int32  `json:"powerConsumeType"`
	PowerConsumeTypeDesc string `json:"powerConsumeTypeDesc"`
	Status               int32  `json:"status"`
	StatusDesc           string `json:"statusDesc"`
	IsVirtualTest        int32  `json:"isVirtualTest"`
	IsVirtualTestName    string `json:"isVirtualTestName"`
	StatusName           string `json:"statusName"`
	IsScheme             int32  `json:"isScheme"`
	Desc                 string `json:"desc"`
	ProductTypeName      string `json:"productTypeName"`
	TenantId             string `json:"tenantId"`
	SchemeId             int64  `json:"schemeId,string"`
	ControlPanelId       int64  `json:"controlPanelId,string"`
	ModuleId             int64  `json:"moduleId,string"`

	FirmwareId        int64  `json:"firmwareId,string,omitempty"`
	FirmwareVersionId int64  `json:"firmwareVersionId,string,omitempty"`
	FirmwareVersion   string `json:"firmwareVersion,string,omitempty"`

	UpdatedAt       int64  `json:"updatedAt"`
	DeviceNatureKey int32  `json:"deviceNatureKey"`
	DeviceNature    string `json:"deviceNature"`
	TestReport      string `json:"testReport"`

	PanelProImg  string `json:"panelProImg"`
	IsShowImg    bool   `json:"isShowImg"`
	StyleLinkage string `json:"styleLinkage"`
	PanelId      int64  `json:"panelId,string"` //预留给面板设置修改

	Langs []*langEntitys.LangTranslateEntitys `json:"langs"`
	//是否demo产品
	IsDemoProduct int32  `json:"isDemoProduct"`

	AppList []string `json:"appList"`
}

// 新增参数非空检查
func (s *OpmProductEntitys) AddCheck() error {
	//if s.TenantId == "" {
	//	return errors.New("当前用户未指定租户Id")
	//}
	if s.SchemeId == 0 {
		return errors.New("ProductId不能为空")
	}
	//if s.ProductKey == "" {
	//	return errors.New("ProductKey不能为空")
	//}
	if s.ProductTypeId == 0 {
		return errors.New("ProductTypeId不能为空")
	}
	return nil
}

// 修改参数非空检查
func (s *OpmProductEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*OpmProductQuery) QueryCheck() error {
	return nil
}

// 查询条件
type OpmProductQuery struct {
	Page       uint64            `json:"page,omitempty"`
	Limit      uint64            `json:"limit,omitempty"`
	Sort       string            `json:"sort,omitempty"`
	SortField  string            `json:"sortField,omitempty"`
	SearchKey  string            `json:"searchKey,omitempty"`
	IsPlatform bool              `json:"isPlatform"`
	Query      *OpmProductFilter `json:"query,omitempty"`
}

// OpmProductFilter，查询条件，字段请根据需要自行增减
type OpmProductFilter struct {
	Id               int64  `json:"id,string,omitempty"`
	ProductTypeId    int64  `json:"productTypeId,string,omitempty"`
	ProductKey       string `json:"productKey,omitempty"`
	Name             string `json:"name,omitempty"`
	NameEn           string `json:"nameEn,omitempty"`
	Identifier       string `json:"identifier,omitempty"`
	Model            string `json:"model,omitempty"`
	ImageUrl         string `json:"imageUrl,omitempty"`
	WifiFlag         string `json:"wifiFlag,omitempty"`
	NetworkType      int32  `json:"networkType,omitempty"`
	AttributeType    int32  `json:"attributeType,omitempty"`
	PowerConsumeType int32  `json:"powerConsumeType,omitempty"`
	Status           int32  `json:"status,omitempty"`
	IsVirtualTest    int32  `json:"isVirtualTest,omitempty"`
	IsScheme         int32  `json:"isScheme,omitempty"`
	Desc             string `json:"desc,omitempty"`
	ProductTypeName  string `json:"productTypeName,omitempty"`
	TenantId         string `json:"tenantId,omitempty"`
	ControlPanelId   int64  `json:"controlPanelId,string,omitempty"`
	ModuleId         int64  `json:"moduleId,string,omitempty"`

	FirmwareVersionId int64  `json:"firmwareVersionId,string,omitempty"`
	FirmwareId        int64  `json:"firmwareId,string,omitempty"`
	FirmwareVersion   string `json:"firmwareVersion,omitempty"`

	DeviceNatureKey int32 `json:"deviceNature,omitempty"`
	IsDemoProduct int32 `json:"isDemoProduct,omitempty"`
	Developer        int64  `json:"developer,string"`
}

// 实体转pb对象
func OpmProductFilter_e2pb(src *OpmProductFilter) *proto.OpmProduct {
	if src == nil {
		return nil
	}
	pbObj := new(proto.OpmProduct)
	pbObj.TenantId = src.TenantId
	pbObj.Status = src.Status
	pbObj.ProductTypeId = src.ProductTypeId
	pbObj.ProductKey = src.ProductKey
	pbObj.Id = src.Id
	pbObj.NetworkType = src.NetworkType
	pbObj.DeviceNatureKey = src.DeviceNatureKey
	pbObj.IsDemoProduct = src.IsDemoProduct
	//if src.Status != 0 {
	//	pbObj.Status = src.Status
	//} else {
	//	pbObj.Status = -1
	//}
	if src.Name != "" {
		pbObj.Name = src.Name
	}
	return pbObj
}

// 实体转pb对象
func OpmProduct_e2pb(src *OpmProductEntitys) *proto.OpmProduct {
	if src == nil {
		return nil
	}
	pbObj := proto.OpmProduct{
		Id:               src.Id,
		ProductTypeId:    src.ProductTypeId,
		ProductKey:       src.ProductKey,
		Name:             src.Name,
		NameEn:           src.NameEn,
		Identifier:       src.Identifier,
		Model:            src.Model,
		ImageUrl:         src.ImageUrl,
		WifiFlag:         src.WifiFlag,
		NetworkType:      src.NetworkType,
		AttributeType:    src.AttributeType,
		PowerConsumeType: src.PowerConsumeType,
		Status:           src.Status,
		IsVirtualTest:    src.IsVirtualTest,
		IsScheme:         src.IsScheme,
		Desc:             src.Desc,
		ProductTypeName:  src.ProductTypeName,
		TenantId:         src.TenantId,
		ProductId:        src.SchemeId,
		ControlPanelId:   src.ControlPanelId,
		ModuleId:         src.ModuleId,
		DeviceNatureKey:  src.DeviceNatureKey,
		PanelProImg:      src.PanelProImg,
		StyleLinkage:     src.StyleLinkage,
		IsDemoProduct: src.IsDemoProduct,
	}
	if src.IsShowImg {
		pbObj.IsShowImg = iotutil.IfInt32(src.IsShowImg, 1, 2)
	}
	return &pbObj
}

// pb对象转实体
func OpmProduct_pb2e(src *proto.OpmProduct) *OpmProductEntitys {
	if src == nil {
		return nil
	}

	networkType, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_network_type)
	powerConsumeType, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_power_consume_type)
	boolType, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_Is_virtual_test)
	developStatus, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_develop_status)

	entitysObj := OpmProductEntitys{
		Id:                   src.Id,
		ProductTypeId:        src.ProductTypeId,
		ProductKey:           src.ProductKey,
		Name:                 src.Name,
		NameEn:               src.NameEn,
		Identifier:           src.Identifier,
		Model:                src.Model,
		ImageUrl:             src.ImageUrl,
		WifiFlag:             src.WifiFlag,
		NetworkTypeDesc:      networkType.Value(src.NetworkType),
		AttributeType:        src.AttributeType,
		PowerConsumeType:     src.PowerConsumeType,
		PowerConsumeTypeDesc: powerConsumeType.Value(src.PowerConsumeType),
		Status:               src.Status,
		StatusName:           developStatus.Value(src.Status),
		IsVirtualTest:        src.IsVirtualTest,
		IsVirtualTestName:    boolType.Value(src.IsVirtualTest),
		IsScheme:             src.IsScheme,
		Desc:                 src.Desc,
		ProductTypeName:      src.ProductTypeName,
		TenantId:             src.TenantId,
		SchemeId:             src.ProductId,
		ControlPanelId:       src.ControlPanelId,
		ModuleId:             src.ModuleId,
		UpdatedAt:            src.UpdatedAt.AsTime().Unix(),
		DeviceNatureKey:      src.DeviceNatureKey,
		NetworkType:          src.NetworkType,
		PanelProImg:          src.PanelProImg,
		StyleLinkage:         src.StyleLinkage,
		IsDemoProduct: src.IsDemoProduct,
	}
	if src.IsShowImg == 1 {
		entitysObj.IsShowImg = true
	}
	entitysObj.changeDeviceNature()
	entitysObj.changeStatus()
	return &entitysObj
}
func (s *OpmProductEntitys) changeDeviceNature() {
	switch s.DeviceNatureKey {
	case 1:
		s.DeviceNature = "设备直连"
	case 2:
		s.DeviceNature = "网关"
	case 3:
		s.DeviceNature = "网关子设备"
	default:
		s.DeviceNature = "未知"
	}
}
func (s *OpmProductEntitys) changeStatus() {
	switch s.Status {
	case 2:
		s.StatusDesc = "开发中"
	case 1:
		s.StatusDesc = "开发完成"
	default:
		s.StatusDesc = "未知"
	}
}

type OpmProductAllEntitys struct {
	Id                   int64                    `json:"id,string"`
	ProductTypeId        int64                    `json:"productTypeId,string"`
	Name                 string                   `json:"name"`
	NetworkType          int32                    `json:"networkType"`
	AttributeType        int32                    `json:"attributeType"`
	ImageURL             string                   `json:"imageUrl"`
	SchemeId             int64                    `json:"schemeId,string"`
	Model                string                   `json:"model"`
	Status               int32                    `json:"status"`
	PowerConsumeType     int32                    `json:"powerConsumeType"`
	Desc                 string                   `json:"desc"`
	ThingModels          []ThingModels            `json:"thingModels"`
	ControlPanelId       int64                    `json:"controlPanelId,string"`
	ControlPanel         *ControlPanel            `json:"controlPanel"`
	ModuleId             int64                    `json:"moduleId,string"`
	Module               *Module                  `json:"module"`
	ProductTypeName      string                   `json:"productTypeName"`
	BaseProductId        int64                    `json:"baseProductId,string"`
	ProductId        int64                    `json:"productId,string"`
	BaseProduct          *BaseProduct             `json:"baseProduct"`
	NetworkTypeName      string                   `json:"networkTypeName"`
	PowerConsumeTypeName string                   `json:"powerConsumeTypeName"`
	ProductKey           string                   `json:"productKey"`
	WifiFlag             string                   `json:"wifiFlag"`
	CustomFirmwares      []*OpmFirmwareSelectInfo `json:"firmwares"`
	IsUpgradeTsl         int32                    `json:"isUpgradeTsl"`
	IsDemoProduct int32  `json:"isDemoProduct"`
}

func ToFirmwareTypeName(status string) string {
	res := "其它"
	switch status {
	case "1":
		res = "模组通用固件方案"
	case "2":
		res = "通用固件方案"
	}
	return res
}

type Module struct {
	Id               string `json:"id"`
	RelationId       int64 `json:"relationId,string"`//产品固件关联表的主键Id
	ModuleName       string `json:"moduleName"`
	ModuleNameEn     string `json:"moduleNameEn"`
	FirmwareType     string `json:"firmwareType"`
	FirmwareFlag     string `json:"firmwareFlag"`
	FirmwareUrl      string `json:"firmwareUrl"`
	FirmwareName     string `json:"firmwareName"`
	FirmwareNameEn     string `json:"firmwareNameEn"`
	FirmwareTypeName string `json:"firmwareTypeName"`
	FirmwareId       string `json:"firmwareId"`
	FirmwareKey      string `json:"firmwareKey"`
	ImgUrl           string `json:"imgUrl"`
	Status           int32  `json:"status"`
	FileUrl          string `json:"fileUrl"`
	Remark           string `json:"remark"`
	Version          string `json:"version"`
	VersionCount     int32  `json:"versionCount"`
}

type ThingModels struct {
	DataType     string `json:"dataType"`
	Custom       int32  `json:"custom"`
	DataSpec     string `json:"dataSpec"`
	Unit         string `json:"unit"`
	IsMust       int32  `json:"isMust"`
	Multiple     int32  `json:"multiple"`
	Name         string `json:"name"`
	Step         int32  `json:"step"`
	Id           int64  `json:"id,string"`
	DataSpecList string `json:"dataSpecList"`
	Identifier   string `json:"identifier"`
	RwFlag       string `json:"rwFlag"`
}

type ControlPanel struct {
	FileURL      string `json:"fileUrl"`
	PreviewURL   string `json:"previewUrl"`
	Id           int64  `json:"id,string"`
	Name         string `json:"name"`
	IsUpgrade    bool   `json:"isUpgrade"`    //面板是否需要升级
	AppPanelType int32  `json:"appPanelType"` //面板类型
	PanelProImg  string `json:"panelProImg"`
	IsShowImg    bool   `json:"isShowImg"`
	StyleLinkage string `json:"styleLinkage"`
}

type BaseProduct struct {
	ProductTypeID int64  `json:"productTypeId,string"`
	ProductKey    string `json:"productKey"`
	Name          string `json:"name"`
	NameEn        string `json:"nameEn"`
	Identifier    string `json:"identifier"`
	Model         string `json:"model"`
	ImageURL      string `json:"imageUrl"`
	WifiFlag      string `json:"wifiFlag"`
	NetworkType   int32  `json:"networkType"`
	AttributeType int    `json:"attributeType"`
	Status        int    `json:"status"`
	IsVirtualTest int    `json:"isVirtualTest"`
	Desc          string `json:"desc"`
}

type OpmFirmwareSelectInfo struct {
	Id           int64  `json:"id,string"`
	FirmwareId   int64  `json:"firmwareId,string"`
	FirmwareName string `json:"firmwareName"`
	FirmwareNameEn string `json:"firmwareNameEn"`
	FirmwareFlag string `json:"firmwareFlag"`
	FirmwareType int32  `json:"firmwareType"`
	FirmwareKey  string `json:"firmwareKey"`
	Version      string `json:"version"`
	VersionId    int64  `json:"versionId,string"`
	ProductId    int64  `json:"productId,string"`
	VersionCount int32  `json:"versionCount"`
	IsCustom 	 int32  `json:"isCustom"`
}

func (s *OpmProductAllEntitys) Pd2Entity(src *proto.OpmProductAllDetails) {
	if src.Product != nil {
		s.Id = src.Product.Id
		s.ProductTypeId = src.Product.ProductTypeId
		s.Name = src.Product.Name
		s.AttributeType = src.Product.AttributeType
		s.ImageURL = src.Product.ImageUrl
		s.SchemeId = src.Product.ProductId
		s.Status = src.Product.Status
		s.Model = src.Product.Model
		s.PowerConsumeType = src.Product.PowerConsumeType
		s.Desc = src.Product.Desc
		s.ControlPanelId = src.Product.ControlPanelId
		s.ModuleId = src.Product.ModuleId
		s.ProductTypeName = src.Product.ProductTypeName
		s.BaseProductId = src.Product.ProductId
		s.ProductKey = src.Product.ProductKey
		s.WifiFlag = src.Product.WifiFlag
		s.NetworkType = src.Product.NetworkType
		s.IsUpgradeTsl = src.Product.IsUpgradeTsl
		s.IsDemoProduct = src.Product.IsDemoProduct
	}
	s.SetModel(src)
	s.SetThingModels(src)
	s.SetControlPanel(src)
	s.SetBaseProduct(src)
	s.SetCustomFirmware(src)
	//s.NetworkTypeName = src.new
	//s.PowerConsumeTypeName = src.PowerConsumeTypeName
}

func (s *OpmProductAllEntitys) SetThingModels(src *proto.OpmProductAllDetails) {
	var thingModes []ThingModels
	if src.ThingModes == nil {
		return
	}
	for _, t := range src.ThingModes.Properties {
		if t.Multiple == "" {
			t.Multiple = "0"
		}
		thingModes = append(thingModes, ThingModels{
			DataType:     t.DataType,
			Custom:       t.Custom,
			DataSpec:     t.DataSpecs,
			Unit:         t.Unit,
			IsMust:       t.Required,
			Multiple:     iotutil.ToInt32(t.Multiple),
			Name:         t.Name,
			Step:         t.Step,
			Id:           t.Id,
			DataSpecList: t.DataSpecsList,
			Identifier:   t.Identifier,
			RwFlag:       t.RwFlag,
		})
	}
}

func (s *OpmProductAllEntitys) SetCustomFirmware(src *proto.OpmProductAllDetails) {
	if src.CustomFirmwares == nil {
		return
	}
	for _, t := range src.CustomFirmwares {
		//if t.VersionId == 0 {
		//	continue
		//}
		//只返回自定义固件
		if t.IsCustom != 1 {
			continue
		}
		s.CustomFirmwares = append(s.CustomFirmwares, &OpmFirmwareSelectInfo{
			Id:           t.Id,
			FirmwareName: t.FirmwareName,
			FirmwareNameEn: t.FirmwareNameEn,
			FirmwareFlag: t.FirmwareFlag,
			FirmwareType: t.FirmwareType,
			FirmwareKey:  t.FirmwareKey,
			FirmwareId:   t.FirmwareId,
			Version:      t.Version,
			VersionId:    t.VersionId,
			ProductId:    t.ProductId,
			VersionCount: t.VersionCount,
			IsCustom: t.IsCustom,
		})
	}
}

func (s *OpmProductAllEntitys) SetModel(src *proto.OpmProductAllDetails) {
	if src.Module == nil {
		s.Module = nil
		return
	}
	firmwareType, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_firmware_type)
	s.Module = &Module{
		Id:               iotutil.ToString(src.Module.Id),
		RelationId: src.Module.RelationId,
		ModuleName:       src.Module.ModuleName,
		ModuleNameEn:     src.Module.ModuleNameEn,
		FirmwareType:     src.Module.FirmwareType,
		FirmwareFlag:     src.Module.FirmwareFlag,
		FirmwareUrl:      src.Module.FirmwareUrl,
		FirmwareName:     src.Module.FirmwareName,
		FirmwareNameEn:   src.Module.FirmwareNameEn,
		FirmwareTypeName: firmwareType.ValueStr(src.Module.FirmwareType),
		FirmwareId:       iotutil.ToString(src.Module.FirmwareId),
		ImgUrl:           src.Module.ImgUrl,
		Status:           src.Module.Status,
		FileUrl:          src.Module.FileUrl,
		Remark:           src.Module.Remark,
		Version:          src.Module.DefaultVersion,
		VersionCount:     src.Module.VersionCount,
		FirmwareKey:      src.Module.FirmwareKey,
	}
}

func (s *OpmProductAllEntitys) SetControlPanel(src *proto.OpmProductAllDetails) {
	if src.ControlPanel == nil {
		return
	}
	s.ControlPanel = &ControlPanel{
		Id:           src.ControlPanel.Id,
		FileURL:      src.ControlPanel.Url,
		PreviewURL:   src.ControlPanel.PreviewUrl,
		Name:         src.ControlPanel.Name,
		IsUpgrade:    src.ControlPanel.IsUpgrade,
		PanelProImg:  src.Product.PanelProImg,
		IsShowImg:    iotutil.IntToBoolean(src.Product.IsShowImg),
		StyleLinkage: src.Product.StyleLinkage,
		AppPanelType: src.ControlPanel.AppPanelType,
	}
}

func (s *OpmProductAllEntitys) SetBaseProduct(src *proto.OpmProductAllDetails) {
	if src.BaseProduct == nil {
		return
	}
	s.BaseProduct = &BaseProduct{
		ProductTypeID: src.BaseProduct.ProductTypeId,
		ProductKey:    src.BaseProduct.ProductKey,
		Name:          src.BaseProduct.Name,
		NameEn:        src.BaseProduct.NameEn,
		Identifier:    src.BaseProduct.Identifier,
		Model:         src.BaseProduct.Model,
		ImageURL:      src.BaseProduct.ImageUrl,
		WifiFlag:      src.BaseProduct.WifiFlag,
		NetworkType:   src.BaseProduct.NetworkType,
		//AttributeType: src.BaseProduct.AttributeType,
		//Status:        src.BaseProduct.Status,
		//IsVirtualTest: src.BaseProduct.IsVirtualTest,
	}
}

type CompleteDevelopDetail struct {
	Product CompleteDevelopDetailProduct  `json:"product"`
	List    []*CompleteDevelopDetailItems `json:"list"`
}

type CompleteDevelopDetailProduct struct {
	ProductTypeName string `json:"productTypeName"`
	Name            string `json:"name"`
	NameEn          string `json:"nameEn"`
	Identifier      string `json:"identifier"`
	Model           string `json:"model"`
	//ImageUrl        string `json:"imageUrl"`
	//WifiFlag    string `json:"wifiFlag"`
	NetworkType int32 `json:"networkType"`
}

type CompleteDevelopDetailItems struct {
	Code  int32  `json:"code"`
	Key   string `json:"key"`
	Title string `json:"title"`
	Url   string `json:"url"`
	Valid bool   `json:"valid"`
}

type DeleteThingsModelResponse struct {
	ShowDeleteMsg bool            `json:"showDeleteMsg"`
	Voice         map[string]bool `json:"voice"`
}
