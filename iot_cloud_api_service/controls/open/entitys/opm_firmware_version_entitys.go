// Code generated by sgen.exe,2022-05-03 09:22:14. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"errors"
)

// 增、删、改及查询返回
type OpmFirmwareVersionEntitys struct {
	Id         int64  `json:"id,string"`
	TenantId   string `json:"tenantId"`
	FirmwareId int64  `json:"firmwareId,string"`
	Version    string `json:"version"`
	Desc       string `json:"desc"`
	Status     int32  `json:"status"`

	IsMust          int32  `json:"isMust"`          //是否必须
	UpgradeMode     int32  `json:"upgradeMode"`     //升级方式
	UpgradeFileName string `json:"upgradeFileName"` //升级文件名称
	UpgradeFilePath string `json:"upgradeFilePath"` //升级文件地址
	UpgradeFileSize int64  `json:"upgradeFileSize"` //升级文件尺寸
	UpgradeFileKey  string `json:"upgradeFileKey"`  //升级文件key
	ProdFilePath    string `json:"prodFilePath"`    //生成文件地址
	ProdFileSize    int64  `json:"prodFileSize"`    //生成文件尺寸
	ProdFileKey     string `json:"prodFileKey"`     //生成文件Key
	ProdFileName    string `json:"prodFileName"`    //生成文件名称

	CreatedAt int64 `json:"createdAt"`
	UpdatedBy int64 `json:"updatedBy,omitempty"`
	UpdatedAt int64 `json:"updatedAt"`

	//产品Id  关联记录Id
	ProductId int64 `json:"productId,string"`
	RelationId int64 `json:"relationId,string"`
}

// 新增参数非空检查
func (s *OpmFirmwareVersionEntitys) AddCheck() error {
	if s.TenantId == "" {
		return errors.New("当前用户未指定租户Id")
	}
	if s.FirmwareId == 0 {
		return errors.New("固件编号不能为空")
	}
	if s.Version == "" {
		return errors.New("版本号不能为空")
	}
	return nil
}

// 修改参数非空检查
func (s *OpmFirmwareVersionEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (s *OpmFirmwareVersionQuery) QueryCheck() error {
	if s.Query.TenantId == "" {
		return errors.New("当前用户未指定租户Id")
	}
	return nil
}

// 查询条件
type OpmFirmwareVersionQuery struct {
	Page      uint64                    `json:"page,omitempty"`
	Limit     uint64                    `json:"limit,omitempty"`
	Sort      string                    `json:"sort,omitempty"`
	SortField string                    `json:"sortField,omitempty"`
	SearchKey string                    `json:"searchKey,omitempty"`
	Query     *OpmFirmwareVersionFilter `json:"query,omitempty"`
}

type OpmFirmwareSelectVersionQuery struct {
	Page       uint64 `json:"page,omitempty"`
	Limit      uint64 `json:"limit,omitempty"`
	Sort       string `json:"sort,omitempty"`
	SortField  string `json:"sortField,omitempty"`
	FirmwareId int64  `json:"firmwareId,string,omitempty"`
	ProductId  int64  `json:"productId,string,omitempty"`
}

// OpmFirmwareVersionFilter，查询条件，字段请根据需要自行增减
type OpmFirmwareVersionFilter struct {
	Id         int64  `json:"id,string,omitempty"`
	TenantId   string `json:"tenantId,omitempty"`
	FirmwareId int64  `json:"firmwareId,string,omitempty"`
	Version    string `json:"version,omitempty"`
	Desc       string `json:"desc,omitempty"`
	Status     *int32 `json:"status,omitempty"`

	IsMust          int32  `json:"isMust,omitempty"`          //是否必须
	UpgradeMode     int32  `json:"upgradeMode,omitempty"`     //升级方式
	UpgradeFileName string `json:"upgradeFileName,omitempty"` //升级文件名称
	UpgradeFilePath string `json:"upgradeFilePath,omitempty"` //升级文件地址
	UpgradeFileSize int64  `json:"upgradeFileSize,omitempty"` //升级文件尺寸
	UpgradeFileKey  string `json:"upgradeFileKey,omitempty"`  //升级文件key
	ProdFilePath    string `json:"prodFilePath,omitempty"`    //生成文件地址
	ProdFileSize    int64  `json:"prodFileSize,omitempty"`    //生成文件尺寸
	ProdFileKey     string `json:"prodFileKey,omitempty"`     //生成文件Key
	ProdFileName    string `json:"prodFileName,omitempty"`    //生成文件名称

	CreatedAt int64 `json:"createdAt,omitempty"`
	UpdatedBy int64 `json:"updatedBy,omitempty"`
	UpdatedAt int64 `json:"updatedAt,omitempty"`
}

// 实体转pb对象
func OpmFirmwareVersion_e2pb(src *OpmFirmwareVersionEntitys) *proto.OpmFirmwareVersion {
	if src == nil {
		return nil
	}
	pbObj := proto.OpmFirmwareVersion{
		Id:              src.Id,
		FirmwareId:      src.FirmwareId,
		Version:         src.Version,
		Desc:            src.Desc,
		Status:          src.Status,
		IsMust:          src.IsMust,
		UpgradeMode:     src.UpgradeMode,
		UpgradeFileName: src.UpgradeFileName,
		UpgradeFilePath: src.UpgradeFilePath,
		UpgradeFileSize: iotutil.ToInt32(src.UpgradeFileSize),
		UpgradeFileKey:  src.UpgradeFileKey,
		ProdFilePath:    src.ProdFilePath,
		ProdFileSize:    iotutil.ToInt32(src.ProdFileSize),
		ProdFileKey:     src.ProdFileKey,
		ProdFileName:    src.ProdFileName,
		UpdatedBy:       src.UpdatedBy,
		ProductId: src.ProductId,
		RelationId: src.RelationId,
	}
	return &pbObj
}

// pb对象转实体
func OpmFirmwareVersion_pb2e(src *proto.OpmFirmwareVersion) *OpmFirmwareVersionEntitys {
	if src == nil {
		return nil
	}
	entitysObj := OpmFirmwareVersionEntitys{
		Id: src.Id,
		//TenantId:      src.TenantId,
		FirmwareId:      src.FirmwareId,
		Version:         src.Version,
		Desc:            src.Desc,
		Status:          src.Status,
		IsMust:          src.IsMust,
		UpgradeMode:     src.UpgradeMode,
		UpgradeFileName: src.UpgradeFileName,
		UpgradeFilePath: src.UpgradeFilePath,
		UpgradeFileSize: iotutil.ToInt64(src.UpgradeFileSize),
		UpgradeFileKey:  src.UpgradeFileKey,
		ProdFilePath:    src.ProdFilePath,
		ProdFileSize:    iotutil.ToInt64(src.ProdFileSize),
		ProdFileKey:     src.ProdFileKey,
		ProdFileName:    src.ProdFileName,
		CreatedAt:       src.CreatedAt.AsTime().Unix(),
		UpdatedBy:       src.UpdatedBy,
		UpdatedAt:       src.UpdatedAt.AsTime().Unix(),
	}
	return &entitysObj
}
