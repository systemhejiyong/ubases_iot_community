// Code generated by sgen.exe,2022-05-13 13:53:26. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	services "cloud_platform/iot_cloud_api_service/controls/global"
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"errors"
	"fmt"
	"time"
)

// 增、删、改及查询返回
type OpmOtaPublishEntitys struct {
	Id                int64  `json:"id,string"`
	PkgId             int64  `json:"pkgId,string"`
	PublicName        int64  `json:"publicName"`
	PublishAt         int64  `json:"publishAt"`
	IsGray            int32  `json:"releaseMode"`
	ReleaseModeName   string `json:"releaseModeName"`
	Status            int32  `json:"status"`
	GrayType          int32  `json:"graySetting"`
	GrayScale         int32  `json:"grayScale"`
	GrayTypeName      string `json:"grayScaleName"`
	firmwareId        int64  `json:"firmwareId,string"`
	firmwareVersionId int64  `json:"firmwareVersionId,string"`
	firmwareVersion   string `json:"firmwareVersion"`
	ReleaseDesc       string `json:"releaseDesc"`
	CreatedAt         int64  `json:"createdAt,omitempty"`
	UpdatedAt         int64  `json:"updatedAt,omitempty"`
	TenantId          string `json:"tenantId,omitempty"`
	ProductName       string `json:"productName"`
	FirmwareName      string `json:"firmwareName"`
	Version           string `json:"version"`
	OperTime          string `json:"operTime"`
	TotalCount        int32  `json:"totalCount"`
	SuccesCount       int32  `json:"succesCount"`
	PubResult         string `json:"pubResult"`
}

// 新增参数非空检查
func (s *OpmOtaPublishEntitys) AddCheck() error {

	return nil
}

// 修改参数非空检查
func (s *OpmOtaPublishEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (s *OpmOtaPublishQuery) QueryCheck() error {
	if s.Query == nil {
		return errors.New("请求参数异常")
	}
	//if s.Query.PkgId == 0 {
	//	return errors.New("固件OTA编号不能为空")
	//}
	return nil
}

// 查询条件
type OpmOtaPublishQuery struct {
	Page  int64                `json:"page,omitempty"`
	Limit int64                `json:"limit,omitempty"`
	Query *OpmOtaPublishFilter `json:"query,omitempty"`
}

// OpmOtaPublishFilter，查询条件，字段请根据需要自行增减
type OpmOtaPublishFilter struct {
	Id        int64     `json:"id,string,omitempty"`
	PkgId     int64     `json:"otaPkgId,string,omitempty"`
	PublishAt time.Time `json:"publishAt,omitempty"`
	IsGray    int32     `json:"isGray,omitempty"`
	Status    int32     `json:"status,omitempty"`
	GrayType  int32     `json:"grayType,omitempty"`
	GrayScale int32     `json:"grayScale,omitempty"`
	TenantId  string    `json:"tenantId,omitempty"`
}

// 实体转pb对象
func OpmOtaPublish_e2pb(src *OpmOtaPublishEntitys) *proto.OpmOtaPublish {
	if src == nil {
		return nil
	}
	pbObj := proto.OpmOtaPublish{
		Id:        src.Id,
		PkgId:     src.PkgId,
		IsGray:    src.IsGray,
		Status:    src.Status,
		GrayType:  src.GrayType,
		GrayScale: src.GrayScale,
		TenantId:  src.TenantId,
	}
	return &pbObj
}

// pb对象转实体
func OpmOtaPublish_pb2e(src *proto.OpmOtaPublish) *OpmOtaPublishEntitys {
	if src == nil {
		return nil
	}
	grayType, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_gray_type)
	releaseMode, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_release_mode)

	entitysObj := OpmOtaPublishEntitys{
		Id:           src.Id,
		PkgId:        src.PkgId,
		PublishAt:    src.PublishAt.AsTime().Unix(),
		IsGray:       src.IsGray,
		Status:       src.Status,
		GrayType:     src.GrayType,
		GrayScale:    src.GrayScale,
		ProductName:  src.ProductName,
		FirmwareName: src.FirmwareName,
		OperTime:     iotutil.TimeFullFormat(time.Unix(src.PublishAt.AsTime().Unix(), 0)),
		Version:      src.Version,
		CreatedAt:    src.CreatedAt.AsTime().Unix(),
		UpdatedAt:    src.UpdatedAt.AsTime().Unix(),
		TenantId:     src.TenantId,
		TotalCount:   src.TotalCount,
		SuccesCount:  src.SuccessCount,
		PubResult:    src.PubResult,
	}
	entitysObj.ReleaseModeName = releaseMode.Value(src.IsGray)
	//灰度详情
	if src.IsGray == 1 {
		entitysObj.ReleaseDesc = "全量"
		entitysObj.GrayTypeName = ""
	} else {
		entitysObj.GrayTypeName = grayType.Value(src.GrayType)
		switch src.GrayType {
		case iotconst.OTA_GRAY_TYPE_SCALE:
			entitysObj.ReleaseDesc = "比例 " + fmt.Sprintf("%d", src.GrayScale) + "%"
		case iotconst.OTA_GRAY_TYPE_NUMBER:
			entitysObj.ReleaseDesc = "数量 " + fmt.Sprintf("%d", src.GrayScale)
		case iotconst.OTA_GRAY_TYPE_DEVICE:
			entitysObj.ReleaseDesc = "指定设备"
		}
	}
	return &entitysObj
}

func OpmOtaPublishFilter_e2pb(src *OpmOtaPublishFilter) *proto.OpmOtaPublish {
	if src == nil {
		return nil
	}
	pbObj := proto.OpmOtaPublish{
		Id:    src.Id,
		PkgId: src.PkgId,
	}
	return &pbObj
}
