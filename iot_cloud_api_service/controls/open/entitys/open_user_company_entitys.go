// Code generated by sgen.exe,2022-04-27 10:55:26. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	proto "cloud_platform/iot_proto/protos/protosService"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

// 授权请求参数
type OpenUserCompanyAuthReq struct {
	UserName string `json:"userName"`
	Remark   string `json:"remark"`
}

// 授权备注请求参数
type OpenUserCompanyAuthRemarkReq struct {
	Id     string `json:"id"`
	Remark string `json:"remark"`
}

type OpenUserCompanyAuthListReq struct {
	AccountType string `json:"accountType" form:"accountType"`
	RoleId      string `json:"roleId"  form:"roleId"`
	Account     string `json:"userName" form:"userName"`
}

type OpenUserCompanyAuthListRes struct {
	Id          string `json:"id"`
	UserName    string `json:"userName"`
	AccountType int32  `json:"accountType"`
	RoleId      int64  `json:"roleId,string"`
	RoleName    string `json:"roleName"`
	CreatedAt   int64  `json:"createdAt"`
	Remark      string `json:"remark"`
	CompanyName string `json:"companyName"`
}

// 实体转pb对象
func OpenUserCompanyAuthListRes_e2pb(src *proto.OpenUserCompanyAuthResponse) *OpenUserCompanyAuthListRes {
	if src == nil {
		return nil
	}
	entityObj := OpenUserCompanyAuthListRes{
		Id:          src.Id,
		UserName:    src.UserName,
		AccountType: src.AccountType,
		RoleName:    src.RoleName,
		CreatedAt:   src.CreatedAt,
		Remark:      src.Remark,
		RoleId:      src.RoleId,
		CompanyName: src.CompanyName,
	}
	return &entityObj
}

// 增、删、改及查询返回
type OpenUserCompanyEntitys struct {
	Id        int64     `json:"id,omitempty"`
	UserId    int64     `json:"userId,omitempty"`
	CompanyId int64     `json:"companyId,omitempty"`
	UserType  int32     `json:"userType,omitempty"`
	CreatedBy int64     `json:"createdBy,omitempty"`
	CreatedAt time.Time `json:"createdAt,omitempty"`
	UpdatedBy int64     `json:"updatedBy,omitempty"`
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
}

// 查询条件
type OpenUserCompanyQuery struct {
	Page      uint64                `json:"page,omitempty"`
	Limit     uint64                `json:"limit,omitempty"`
	Sort      string                `json:"sort,omitempty"`
	SortField string                `json:"sortField,omitempty"`
	Query     OpenUserCompanyFilter `json:"query,omitempty"`
}

// OpenUserCompanyFilter，查询条件，字段请根据需要自行增减
type OpenUserCompanyFilter struct {
	Id        int64     `json:"id,omitempty"`
	UserId    int64     `json:"userId,omitempty"`
	CompanyId int64     `json:"companyId,omitempty"`
	UserType  int32     `json:"userType,omitempty"`
	CreatedBy int64     `json:"createdBy,omitempty"`
	CreatedAt time.Time `json:"createdAt,omitempty"`
	UpdatedBy int64     `json:"updatedBy,omitempty"`
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
}

// 实体转pb对象
func OpenUserCompany_e2pb(src *OpenUserCompanyEntitys) *proto.OpenUserCompany {
	if src == nil {
		return nil
	}
	pbObj := proto.OpenUserCompany{
		Id:        src.Id,
		UserId:    src.UserId,
		CompanyId: src.CompanyId,
		UserType:  src.UserType,
		CreatedBy: src.CreatedBy,
		CreatedAt: timestamppb.New(src.CreatedAt),
		UpdatedBy: src.UpdatedBy,
		UpdatedAt: timestamppb.New(src.UpdatedAt),
	}
	return &pbObj
}

// pb对象转实体
func OpenUserCompany_pb2e(src *proto.OpenUserCompany) *OpenUserCompanyEntitys {
	if src == nil {
		return nil
	}
	entitysObj := OpenUserCompanyEntitys{
		Id:        src.Id,
		UserId:    src.UserId,
		CompanyId: src.CompanyId,
		UserType:  src.UserType,
		CreatedBy: src.CreatedBy,
		CreatedAt: src.CreatedAt.AsTime(),
		UpdatedBy: src.UpdatedBy,
		UpdatedAt: src.UpdatedAt.AsTime(),
	}
	return &entitysObj
}
