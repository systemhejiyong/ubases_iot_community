// Code generated by sgen.exe,2022-11-09 16:50:46. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"encoding/json"
	"errors"
)

// 增、删、改及查询返回
type SceneTemplateEntitys struct {
	Id            int64  `json:"id,string,omitempty"`
	Type          int32  `json:"type,omitempty"`
	Title         string `json:"title,omitempty"`
	TitleEn       string `json:"titleEn,omitempty"`
	Desc          string `json:"desc,omitempty"`
	DescEn        string `json:"descEn,omitempty"`
	SortNo        int32  `json:"sortNo,omitempty"`
	Status        int32  `json:"status,omitempty"`
	ConditionMode int32  `json:"conditionMode,omitempty"`
	Icon          string `json:"icon,omitempty"`
	UseCount      string `json:"useCount,omitempty"`
	CreatedBy     int64  `json:"createdBy,string,omitempty"`
	UpdatedBy     int64  `json:"updatedBy,string,omitempty"`
	CreatedAt     int64  `json:"createdAt,omitempty"`
	UpdatedAt     int64  `json:"updatedAt,omitempty"`
}

// 新增参数非空检查
func (s *SceneTemplateEntitys) AddCheck() error {
	return nil
}

// 修改参数非空检查
func (s *SceneTemplateEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*SceneTemplateQuery) QueryCheck() error {
	return nil
}

// 查询条件
type SceneTemplateQuery struct {
	Page      uint64               `json:"page,omitempty"`
	Limit     uint64               `json:"limit,omitempty"`
	Sort      string               `json:"sort,omitempty"`
	SortField string               `json:"sortField,omitempty"`
	SearchKey string               `json:"searchKey,omitempty"`
	Query     *SceneTemplateFilter `json:"query,omitempty"`
}

// SceneTemplateFilter，查询条件，字段请根据需要自行增减
type SceneTemplateFilter struct {
	Id            int64  `json:"id,string,omitempty"`
	Type          int32  `json:"type,omitempty"`
	Title         string `json:"title,omitempty"`
	TitleEn       string `json:"titleEn,omitempty"`
	Desc          string `json:"desc,omitempty"`
	DescEn        string `json:"descEn,omitempty"`
	SortNo        int32  `json:"sortNo,omitempty"`
	Status        int32  `json:"status,omitempty"`
	ConditionMode int32  `json:"conditionMode,omitempty"`
	Icon          string `json:"icon,omitempty"`
	UseCount      string `json:"useCount,omitempty"`
}

// 场景模板详情
type SceneTemplateApiEntity struct {
	Id            int64                `json:"id,string"`     //场景模板编号
	IsSpecifyApp  int32                `json:"isSpecifyApp"`  // 是否指定APP
	AppList       []*AppDetail         `json:"appList"`       // 授权APP列表
	ConditionMode int32                `json:"conditionMode"` // 条件模式（=1 全部满足 =2 任意满足）
	Icon          string               `json:"icon"`          // 模板场景图标
	Conditions    []*TemplateCondition `json:"conditions"`    // 场景条件列表
	Desc          string               `json:"desc"`          // 描述
	DescEn        string               `json:"descEn"`        // 描述英文
	Sort          int32                `json:"sort"`
	Status        int32                `json:"status"`  // 状态
	Tasks         []*TemplateTask      `json:"tasks"`   // 场景任务列表
	Title         string               `json:"title"`   // 场景名称（中文）
	TitleEn       string               `json:"titleEn"` // 场景名称（英文）
	Type          int32                `json:"type"`    // 场景类型（一键执行、自动执行）
	CreatedAt     int64                `json:"createdAt,omitempty"`
	UpdatedAt     int64                `json:"updatedAt,omitempty"`
	UseCount      int32                `json:"useCount"` //累计使用次数
}

// 新增参数非空检查
func (s *SceneTemplateApiEntity) AddCheck() error {
	return nil
}

// 修改参数非空检查
func (s *SceneTemplateApiEntity) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*SceneTemplateApiEntity) QueryCheck() error {
	return nil
}

// APP详情
type AppDetail struct {
	AppId    int64  `json:"appId,string"` // APPID
	AppKey   string `json:"appKey"`       // APPKEY
	AppName  string `json:"appName"`      // APP名称
	TenantId string `json:"tenantId"`     // 租户Id
}

// 模板条件
type TemplateCondition struct {
	Id            int64        `json:"id,string"` //条件Id
	ConditionType int32        `json:"conditionType,omitempty"`
	Statechange   *Statechange `json:"statechange,omitempty"`
	Timer         *Timer       `json:"timer,omitempty"`
	Weather       *Weather     `json:"weather,omitempty"`
}

// 设备状体变化条件
type Statechange struct {
	FuncCompare    int32  `json:"funcCompare"`
	FuncKey        string `json:"funcKey"`
	FuncValue      string `json:"funcValue"`
	FuncDesc       string `json:"funcDesc"`
	FuncIdentifier string `json:"funcIdentifier"`
	ProductId      int64  `json:"productId,string"`
	ProductKey     string `json:"productKey"`
}

// 定时器条件
type Timer struct {
	Value string `json:"value"`
	Weeks string `json:"weeks"`
}

// 定时器天气条件
type Weather struct {
	Type    int32  `json:"type"`
	Value   string `json:"value"`
	Compare int32  `json:"compare"`
}

// 场景模板任务
type TemplateTask struct {
	Id         int64       `json:"id,string"` //任务Id
	Functions  []*Function `json:"functions,omitempty"`
	ProductId  int64       `json:"productId,string,omitempty"`
	ProductKey string      `json:"productKey,omitempty"`
}

// 执行任务功能
type Function struct {
	FuncCompare    int32  `json:"funcCompare"`
	FuncKey        string `json:"funcKey"`
	FuncIdentifier string `json:"funcIdentifier"`
	FuncValue      string `json:"funcValue"`
	FuncDesc       string `json:"funcDesc"`
}

// 实体转pb对象
func SceneTemplate_e2pb(src *SceneTemplateApiEntity) (*proto.SceneTemplate, error) {
	if src == nil {
		return nil, errors.New("参数异常")
	}
	pbObj := proto.SceneTemplate{
		Id:            src.Id,
		Type:          src.Type,
		Title:         src.Title,
		TitleEn:       src.TitleEn,
		Desc:          src.Desc,
		DescEn:        src.DescEn,
		SortNo:        src.Sort,
		Status:        src.Status,
		ConditionMode: src.ConditionMode,
		Icon:          src.Icon,
		IsSpecifyApp:  src.IsSpecifyApp,
	}
	//task
	pbObj.Tasks = make([]*proto.SceneTemplateTask, 0)
	for _, task := range src.Tasks {
		pbObj.Tasks = append(pbObj.Tasks, &proto.SceneTemplateTask{
			SceneTemplateId: src.Id,
			ProductId:       task.ProductId,
			ProductKey:      task.ProductKey,
			Functions:       iotutil.ToString(task.Functions),
		})
	}
	//conditions
	pbObj.Conditions = make([]*proto.SceneTemplateCondition, 0)
	for _, c := range src.Conditions {
		item := &proto.SceneTemplateCondition{
			Id:              c.Id,
			SceneTemplateId: src.Id,
			ConditionType:   c.ConditionType,
		}
		switch iotconst.ConditionType(c.ConditionType) {
		case iotconst.CONDITION_TYPE_WEATHER:
			if c.Weather == nil {
				return nil, errors.New("天气参数异常")
			}
			item.WeatherType = c.Weather.Type
			item.WeatherValue = c.Weather.Value
			item.WeatherCompare = c.Weather.Compare
		case iotconst.CONDITION_TYPE_SATACHANGE:
			if c.Statechange == nil {
				return nil, errors.New("设备参数异常")
			}
			item.ProductId = c.Statechange.ProductId
			item.ProductKey = c.Statechange.ProductKey
			item.Functions = iotutil.ToString([]Function{
				{
					FuncKey:        c.Statechange.FuncKey,
					FuncCompare:    c.Statechange.FuncCompare,
					FuncValue:      c.Statechange.FuncValue,
					FuncDesc:       c.Statechange.FuncDesc,
					FuncIdentifier: c.Statechange.FuncIdentifier,
				},
			})
			item.FuncKey = c.Statechange.FuncKey
			item.FuncCompare = c.Statechange.FuncCompare
			item.FuncValue = c.Statechange.FuncValue
			item.FuncIdentifier = c.Statechange.FuncIdentifier
			item.FuncDesc = c.Statechange.FuncDesc
		case iotconst.CONDITION_TYPE_TIMER:
			if c.Timer == nil {
				return nil, errors.New("定时参数异常")
			}
			item.TimerWeeks = c.Timer.Weeks
			item.TimerValue = c.Timer.Value
		}
		pbObj.Conditions = append(pbObj.Conditions, item)
	}
	//appList
	pbObj.AppList = make([]*proto.SceneTemplateAppRelation, 0)
	for _, app := range src.AppList {
		pbObj.AppList = append(pbObj.AppList, &proto.SceneTemplateAppRelation{
			AppKey:   app.AppKey,
			TenantId: app.TenantId,
			AppName:  app.AppName,
			AppId:    app.AppId,
		})
	}
	return &pbObj, nil
}

// pb对象转实体
func SceneTemplate_pb2e(src *proto.SceneTemplate) *SceneTemplateApiEntity {
	if src == nil {
		return nil
	}
	entitysObj := SceneTemplateApiEntity{
		Id:            src.Id,
		Type:          src.Type,
		Title:         src.Title,
		TitleEn:       src.TitleEn,
		Desc:          src.Desc,
		DescEn:        src.DescEn,
		Sort:          src.SortNo,
		Status:        src.Status,
		ConditionMode: src.ConditionMode,
		Icon:          src.Icon,
		UseCount:      src.UseCount,
		IsSpecifyApp:  src.IsSpecifyApp,
		CreatedAt:     src.CreatedAt.AsTime().Unix(),
		UpdatedAt:     src.UpdatedAt.AsTime().Unix(),
	}

	entitysObj.Tasks = make([]*TemplateTask, 0)
	for _, task := range src.Tasks {
		var functions []*Function
		err := json.Unmarshal([]byte(task.Functions), &functions)
		if err != nil {
			functions = make([]*Function, 0)
		}
		entitysObj.Tasks = append(entitysObj.Tasks, &TemplateTask{
			ProductId:  task.ProductId,
			ProductKey: task.ProductKey,
			Functions:  functions,
		})
	}
	//conditions
	entitysObj.Conditions = make([]*TemplateCondition, 0)
	for _, c := range src.Conditions {
		item := &TemplateCondition{
			Id:            c.Id,
			ConditionType: c.ConditionType,
		}
		switch iotconst.ConditionType(c.ConditionType) {
		case iotconst.CONDITION_TYPE_WEATHER:
			item.Weather = &Weather{}
			item.Weather.Type = c.WeatherType
			item.Weather.Value = c.WeatherValue
			item.Weather.Compare = c.WeatherCompare
		case iotconst.CONDITION_TYPE_SATACHANGE:
			item.Statechange = &Statechange{}
			item.Statechange.ProductId = c.ProductId
			item.Statechange.ProductKey = c.ProductKey
			item.Statechange.FuncKey = c.FuncKey
			item.Statechange.FuncCompare = c.FuncCompare
			item.Statechange.FuncValue = c.FuncValue
			item.Statechange.FuncDesc = c.FuncDesc
			item.Statechange.FuncIdentifier = c.FuncIdentifier
		case iotconst.CONDITION_TYPE_TIMER:
			item.Timer = &Timer{}
			item.Timer.Weeks = c.TimerWeeks
			item.Timer.Value = c.TimerValue
		}
		entitysObj.Conditions = append(entitysObj.Conditions, item)
	}
	//appList
	entitysObj.AppList = make([]*AppDetail, 0)
	for _, app := range src.AppList {
		entitysObj.AppList = append(entitysObj.AppList, &AppDetail{
			AppKey:   app.AppKey,
			TenantId: app.TenantId,
			AppName:  app.AppName,
			AppId:    app.AppId,
		})
	}

	return &entitysObj
}
