// Code generated by sgen.exe,2022-10-24 09:40:31. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	"cloud_platform/iot_common/ioterrs"
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"encoding/json"
	"fmt"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"

	goerrors "go-micro.dev/v4/errors"
)

type ImageInfo struct {
	ImageUrl string `json:"imageUrl"`
	ImageMd5 string `json:"imageMd5"`
}

// 增、删、改及查询返回
type OemAppFlashScreenEntitys struct {
	Id           string      `json:"id,omitempty"`
	TenantId     string      `json:"tenantId,omitempty"`
	Name         string      `json:"name,omitempty"`
	AppName      string      `json:"appName,omitempty"`
	AppKey       string      `json:"appKey,omitempty"`
	AppVersion   string      `json:"appVersion,omitempty"`
	PutinUser    int32       `json:"putinUser,omitempty"`
	Accounts     []string    `json:"accounts"`
	OpenPageType int32       `json:"openPageType,omitempty"`
	AppPageType  int32       `json:"appPageType,omitempty"`
	OpenPageUrl  string      `json:"openPageUrl,omitempty"`
	StartTime    int64       `json:"startTime,omitempty"`
	EndTime      int64       `json:"endTime,omitempty"`
	ShowTime     int32       `json:"showTime,omitempty"`
	PutinImgUrls []ImageInfo `json:"putinImgUrls,omitempty"`
	Status       int32       `json:"status,omitempty"`
	CreatedBy    int64       `json:"createdBy,string,omitempty"`
	CreatedAt    int64       `json:"createdAt,omitempty"`
	UpdatedBy    int64       `json:"updatedBy,string,omitempty"`
	UpdatedAt    int64       `json:"updatedAt,omitempty"`
}

// 新增参数非空检查
func (s *OemAppFlashScreenEntitys) AddCheck() error {
	startTime := iotutil.GetTimeByUnit(s.StartTime)
	endTime := iotutil.GetTimeByUnit(s.EndTime)
	if !startTime.Before(endTime) {
		return goerrors.New("", "闪屏开始时间必须小于结束时间", ioterrs.ErrCloudRequestParam)
	}
	if len(s.Accounts) > 1000 {
		return goerrors.New("", "账号数量不能大于1000个", ioterrs.ErrCloudRequestParam)
	}
	for i := range s.Accounts {
		if !(iotutil.CheckAllPhone("", s.Accounts[i]) || iotutil.IsEmail(s.Accounts[i])) {
			return goerrors.New("", fmt.Sprintf("第%d账号不合法", i+1), ioterrs.ErrCloudRequestParam)
		}
	}
	return nil
}

// 修改参数非空检查
func (s *OemAppFlashScreenEntitys) UpdateCheck() error {
	startTime := iotutil.GetTimeByUnit(s.StartTime)
	endTime := iotutil.GetTimeByUnit(s.EndTime)
	if !startTime.Before(endTime) {
		return goerrors.New("", "闪屏开始时间必须小于结束时间", ioterrs.ErrCloudRequestParam)
	}
	return nil
}

// 查询参数必填检查
func (*OemAppFlashScreenQuery) QueryCheck() error {
	return nil
}

// 查询条件
type OemAppFlashScreenQuery struct {
	Page      uint64                   `json:"page,omitempty"`
	Limit     uint64                   `json:"limit,omitempty"`
	Sort      string                   `json:"sort,omitempty"`
	SortField string                   `json:"sortField,omitempty"`
	SearchKey string                   `json:"searchKey,omitempty"`
	Query     *OemAppFlashScreenFilter `json:"query,omitempty"`
}

// OemAppFlashScreenFilter，查询条件，字段请根据需要自行增减
type OemAppFlashScreenFilter struct {
	Id           int64     `json:"id,string,omitempty"`
	TenantId     string    `json:"tenantId,omitempty"`
	Name         string    `json:"name,omitempty"`
	AppName      string    `json:"appName,omitempty"`
	AppKey       string    `json:"appKey,omitempty"`
	AppVersion   string    `json:"appVersion,omitempty"`
	PutinUser    int32     `json:"putinUser,omitempty"`
	OpenPageType int32     `json:"openPageType,omitempty"`
	AppPageType  int32     `json:"appPageType,omitempty"`
	OpenPageUrl  string    `json:"openPageUrl,omitempty"`
	StartTime    time.Time `json:"startTime,omitempty"`
	EndTime      time.Time `json:"endTime,omitempty"`
	ShowTime     int32     `json:"showTime,omitempty"`
	PutinImgUrls string    `json:"putinImgUrls,omitempty"`
	Status       int32     `json:"status,omitempty"`
	CreatedBy    int64     `json:"createdBy,string,omitempty"`
	CreatedAt    int64     `json:"createdAt,omitempty"`
	UpdatedBy    int64     `json:"updatedBy,string,omitempty"`
	UpdatedAt    int64     `json:"updatedAt,omitempty"`
}

// 实体转pb对象
func OemAppFlashScreen_e2pb(src *OemAppFlashScreenEntitys) *proto.OemAppFlashScreen {
	if src == nil {
		return nil
	}
	startTime := iotutil.GetTimeByUnit(src.StartTime)
	endTime := iotutil.GetTimeByUnit(src.EndTime)
	imageInfo, err := json.Marshal(src.PutinImgUrls)
	if err != nil {
		return nil
	}
	pbObj := proto.OemAppFlashScreen{
		Id:           iotutil.ToInt64(src.Id),
		TenantId:     src.TenantId,
		Name:         src.Name,
		AppName:      src.AppName,
		AppKey:       src.AppKey,
		AppVersion:   src.AppVersion,
		PutinUser:    src.PutinUser,
		OpenPageType: src.OpenPageType,
		AppPageType:  src.AppPageType,
		OpenPageUrl:  src.OpenPageUrl,
		StartTime:    timestamppb.New(startTime),
		EndTime:      timestamppb.New(endTime),
		ShowTime:     src.ShowTime,
		PutinImgUrls: string(imageInfo),
		Status:       src.Status,
		CreatedBy:    src.CreatedBy,
		UpdatedBy:    src.UpdatedBy,
	}
	return &pbObj
}

// pb对象转实体
func OemAppFlashScreen_pb2e(src *proto.OemAppFlashScreen) *OemAppFlashScreenEntitys {
	if src == nil {
		return nil
	}
	imageInfos := []ImageInfo{}
	if err := json.Unmarshal([]byte(src.PutinImgUrls), &imageInfos); err != nil {
		return nil
	}
	entitysObj := OemAppFlashScreenEntitys{
		Id:           iotutil.ToString(src.Id),
		TenantId:     src.TenantId,
		Name:         src.Name,
		AppName:      src.AppName,
		AppKey:       src.AppKey,
		AppVersion:   src.AppVersion,
		PutinUser:    src.PutinUser,
		OpenPageType: src.OpenPageType,
		AppPageType:  src.AppPageType,
		OpenPageUrl:  src.OpenPageUrl,
		StartTime:    src.StartTime.AsTime().Unix(),
		EndTime:      src.EndTime.AsTime().Unix(),
		ShowTime:     src.ShowTime,
		PutinImgUrls: imageInfos,
		Status:       src.Status,
		CreatedBy:    src.CreatedBy,
		CreatedAt:    src.CreatedAt.AsTime().Unix(),
		UpdatedBy:    src.UpdatedBy,
		UpdatedAt:    src.UpdatedAt.AsTime().Unix(),
	}
	return &entitysObj
}
