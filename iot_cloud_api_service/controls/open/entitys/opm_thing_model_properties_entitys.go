// Code generated by sgen.exe,2022-04-29 15:04:32. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	"bytes"
	services "cloud_platform/iot_cloud_api_service/controls/global"
	langEntitys "cloud_platform/iot_cloud_api_service/controls/lang/entitys"
	"cloud_platform/iot_cloud_api_service/controls/product/entitys"
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"encoding/json"
	"fmt"
	"strings"
)

// 增、删、改及查询返回
type OpmThingModelPropertiesEntitys struct {
	Id               int64                               `json:"id,string"`
	ModelId          int64                               `json:"modelId,string"`
	ProductId        string                              `json:"productId"`
	CreateTs         string                              `json:"createTs"`
	Identifier       string                              `json:"identifier"`
	DataType         string                              `json:"dataType"`
	DataTypeDesc     string                              `json:"dataTypeDesc"`
	Name             string                              `json:"name"`
	RwFlag           string                              `json:"rwFlag"`
	RwFlagDesc       string                              `json:"rwFlagDesc"`
	DataSpecs        string                              `json:"dataSpecs"`
	DataSpecsDesc    string                              `json:"dataSpecsDesc"` //功能点属性
	DataSpecsList    string                              `json:"dataSpecsList"`
	Required         int32                               `json:"required"` //是否必填
	Custom           int32                               `json:"custom"`   //是否自定义
	Extension        string                              `json:"extension"`
	Desc             string                              `json:"desc"`     //功能描述
	Unit             string                              `json:"unit"`     //单位
	Step             int32                               `json:"step"`     //步长
	Multiple         int32                               `json:"multiple"` //倍数
	Standard         int32                               `json:"standard"` //是否为标准功能
	FuncType         string                              `json:"funcType"`
	Dpid             int32                               `json:"dpid"`
	TriggerCond      int32                               `json:"triggerCond"`
	ExecCond         int32                               `json:"execCond"`
	DefaultVal       string                              `json:"defaultVal"` //物模型默认值
	LangKey          string                              `json:"langKey"`
	Langs            []*langEntitys.LangTranslateEntitys `json:"langs"`
	FuncLangList     []*OpmThingModelPropertiesEnum      `json:"funcLangList"`
	NotAllowEdit     bool                                `json:"notAllowEdit"`
	TriggerCondArgs  string                              `json:"triggerCondArgs"`
	ExecCondArgs     string                              `json:"execCondArgs"`
	AllowAppointment int32                               `json:"allowAppointment"`
	AppointmentArgs  string                              `json:"appointmentArgs"`
	IsTop            int32                               `json:"isTop"`
	ParentId         int64                               `json:"parentId,string,omitempty"`
	Sort             int32                               `json:"sort"`
}

// 增、删、改及查询返回
type OpmThingModelPropertiesEnum struct {
	Name    string                              `json:"name"`
	LangKey string                              `json:"langKey"`
	Langs   []*langEntitys.LangTranslateEntitys `json:"langs"`
}

type AddStandardThingModelRequest struct {
	ProductId string                           `json:"productId"`
	FuncList  []OpmThingModelPropertiesEntitys `json:"funcList"`
}

type SetFuncSortRequest struct {
	ProductId string `json:"productId"`
	Id        int64  `json:"id,string"`
	Sort      int32  `json:"sort,string"` //排序 1 上移、 0 下移
}

type SetFuncLevelRequest struct {
	Id        int64  `json:"id,string"`
	ParentId  int64  `json:"parentId,string"`
	ProductId string `json:"productId"`
	IsTop     int32  `json:"isTop"`
}

// 新增参数非空检查
func (s *OpmThingModelPropertiesEntitys) AddCheck() error {

	return nil
}

// 修改参数非空检查
func (s *OpmThingModelPropertiesEntitys) UpdateCheck() error {

	return nil
}

// 查询条件
type OpmThingModelPropertiesQuery struct {
	Page      uint64                         `json:"page,omitempty"`
	Limit     uint64                         `json:"limit,omitempty"`
	Sort      string                         `json:"sort,omitempty"`
	SortField string                         `json:"sortField,omitempty"`
	SearchKey string                         `json:"searchKey,omitempty"`
	Query     *OpmThingModelPropertiesFilter `json:"query,omitempty"`
}

// OpmThingModelPropertiesFilter，查询条件，字段请根据需要自行增减
type OpmThingModelPropertiesFilter struct {
	Id            int64  `json:"id,omitempty"`
	ModelId       int64  `json:"modelId,omitempty"`
	ProductId     string `json:"productId,omitempty"`
	CreateTs      string `json:"createTs,omitempty"`
	Identifier    string `json:"identifier,omitempty"`
	DataType      string `json:"dataType,omitempty"`
	Name          string `json:"name,omitempty"`
	RwFlag        string `json:"rwFlag,omitempty"`
	DataSpecs     string `json:"dataSpecs,omitempty"`
	DataSpecsList string `json:"dataSpecsList,omitempty"`
	Required      int32  `json:"required,omitempty"`
	Custom        int32  `json:"custom,omitempty"`
	Desc          string `json:"desc"` //功能描述
	Extension     string `json:"extension,omitempty"`
}

// 实体转pb对象
func OpmThingModelProperties_e2pb(src *OpmThingModelPropertiesEntitys) *proto.OpmThingModelProperties {
	if src == nil {
		return nil
	}
	pbObj := proto.OpmThingModelProperties{
		Id:               src.Id,
		ModelId:          src.ModelId,
		ProductId:        src.ProductId,
		CreateTs:         src.CreateTs,
		Identifier:       src.Identifier,
		DataType:         src.DataType,
		Name:             src.Name,
		RwFlag:           src.RwFlag,
		DataSpecs:        src.DataSpecs,
		DataSpecsList:    src.DataSpecsList,
		Required:         src.Required,
		Custom:           src.Custom,
		Extension:        src.Extension,
		Unit:             src.Unit,
		Step:             src.Step,
		Desc:             src.Desc,
		Dpid:             src.Dpid,
		Multiple:         iotutil.ToString(src.Multiple),
		DefaultVal:       src.DefaultVal,
		TriggerCondArgs:  src.TriggerCondArgs,
		ExecCondArgs:     src.ExecCondArgs,
		AllowAppointment: src.AllowAppointment,
		AppointmentArgs:  src.AppointmentArgs,
		IsTop:            src.IsTop,
		ParentId:         src.ParentId,
	}
	return &pbObj
}

// pb对象转实体
func OpmThingModelProperties_pb2e(src *proto.OpmThingModelProperties) *OpmThingModelPropertiesEntitys {
	if src == nil {
		return nil
	}
	entitysObj := OpmThingModelPropertiesEntitys{
		Id:               src.Id,
		ModelId:          src.ModelId,
		ProductId:        src.ProductId,
		CreateTs:         src.CreateTs,
		Identifier:       src.Identifier,
		DataType:         src.DataType,
		Name:             src.Name,
		RwFlag:           src.RwFlag,
		DataSpecs:        src.DataSpecs,
		DataSpecsList:    src.DataSpecsList,
		FuncType:         src.FuncType,
		Required:         src.Required,
		Custom:           src.Custom,
		Desc:             src.Desc,
		TriggerCond:      src.TriggerCond,
		ExecCond:         src.ExecCond,
		Extension:        src.Extension,
		Dpid:             src.Dpid,
		DefaultVal:       src.DefaultVal,
		TriggerCondArgs:  src.TriggerCondArgs,
		ExecCondArgs:     src.ExecCondArgs,
		AllowAppointment: src.AllowAppointment,
		AppointmentArgs:  src.AppointmentArgs,
		IsTop:            src.IsTop,
		ParentId:         src.ParentId,
		Sort:             src.Sort,
	}

	entitysObj.FuncType = "properties"
	entitysObj.DataSpecsDesc, _ = transformPropertyAttributeDesc(src.DataType, src.DataSpecs, src.DataSpecsList)

	dataTransferType, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_data_transfer_type)
	entitysObj.RwFlagDesc = dataTransferType.ValueStr(src.RwFlag)

	dataTypes, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_data_type)
	entitysObj.DataTypeDesc = dataTypes.ValueStr(src.DataType)

	return &entitysObj
}

// 转换属性描述
func transformPropertyAttributeDesc(dataType string, space string, spaceLists string) (string, error) {
	var (
		ret string
		err error
	)
	//按照类型赋值属性
	switch dataType {
	case "INT", "FLOAT", "DOUBLE":
		var (
			data = new(entitys.ValueDataSpecs)
		)
		if err = iotutil.JsonToStruct(space, data); err != nil {
			return "", err
		}
		var rets []string
		if data.Max != nil && data.Min != nil {
			rets = append(rets, fmt.Sprintf("数值范围: %v-%v", data.Min, data.Max))
		}
		if data.Step != nil {
			rets = append(rets, fmt.Sprintf("间距: %v", data.Step))
		}
		if data.Unit != nil {
			rets = append(rets, fmt.Sprintf("单位: %v", data.Unit))
		}
		ret = strings.Join(rets, ", ")
	case "TEXT", "DATE", "JSON":
		var (
			data = new(entitys.StringDataSpecs)
		)
		err = iotutil.JsonToStruct(space, data)
		var rets []string
		if data.Length != nil {
			rets = append(rets, fmt.Sprintf("长度: %v", data.Length))
		}
		if data.DefaultValue != nil {
			rets = append(rets, fmt.Sprintf("默认值: %v", data.DefaultValue))
		}
		ret = strings.Join(rets, ", ")
	case "ENUM", "BOOL":
		var (
			buff bytes.Buffer
		)
		if dataType == "ENUM" {
			buff.WriteString("枚举值：")
		} else {
			buff.WriteString("布尔值：")
		}

		var slice []map[string]interface{}
		err := json.Unmarshal([]byte(spaceLists), &slice)
		if err != nil {
			return "", err
		}
		for _, v := range slice {
			tmpJson, err := json.Marshal(v)
			if err != nil {
				return ret, err
			}
			enum := entitys.EnumDataSpaces{}
			json.Unmarshal(tmpJson, &enum)
			buff.WriteString("\n")
			buff.WriteString(iotutil.ToString(enum.Value))
			buff.WriteString(" - ")
			buff.WriteString(enum.Name)
		}
		ret = buff.String()
	}
	return ret, err
}
