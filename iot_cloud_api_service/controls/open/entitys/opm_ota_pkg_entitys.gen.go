// Code generated by sgen.exe,2022-05-13 13:53:10. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	services "cloud_platform/iot_cloud_api_service/controls/global"
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"errors"
)

// 增、删、改及查询返回
type OpmOtaPkgEntitys struct {
	Id                   int64  `json:"id,string"`
	ProductId            int64  `json:"productId,string"`
	ProductKey           string `json:"productKey,omitempty"`
	Type                 int32  `json:"type,omitempty"`
	FirmwareId           int64  `json:"firmwareId,string"`
	FirmwareFlag         string `json:"firmwareFlag"`
	FirmwareType         int32  `json:"firmwareType"`
	FirmwareTypeName     string `json:"firmwareTypeName"`
	FirmwareName         string `json:"firmwareName"`
	Version              string `json:"version"`
	VersionId            int64  `json:"versionId,string"`
	UpgradeMode          int32  `json:"upgradeMode"`
	UpgradeModeName      string `json:"upgradeModeName"`
	Url                  string `json:"url,omitempty"`
	Status               int32  `json:"status"`
	IsAuto               int32  `json:"isAuto"`
	UpgradeTimeMode      int32  `json:"upgradeTimeMode"`
	UpgradeDesc          string `json:"upgradeDesc"`
	UpgradeDescEn        string `json:"upgradeDescEn"`
	AutoStartAt          string `json:"upgradeStartTime"`
	AutoEndAt            string `json:"upgradeEndTime"`
	SpecifiedVersionMode int32  `json:"specifiedVersionMode"`
	SpecifiedVersion     string `json:"specifiedVersion"`
	SpecifiedAreaMode    int32  `json:"specifiedAreaMode"`
	SpecifiedArea        string `json:"specifiedArea"`
	Md5                  string `json:"md5"`
	CreatedBy            int64  `json:"createdBy,omitempty"`
	UpdatedBy            int64  `json:"updatedBy,omitempty"`
	CreatedAt            int64  `json:"createdAt"`
	UpdatedAt            int64  `json:"updatedAt"`
	TenantId             string `json:"tenantId,omitempty"`
	IsCustomFirmware     int32  `json:"isCustom"` //是否自定义固件
	IsMust               int32  `json:"isMust"`   //是否必须

	Publish *OpmOtaPublishEntitys `json:"publish"`
}

// 新增参数非空检查
func (s *OpmOtaPkgEntitys) AddCheck() error {
	return nil
}

// 修改参数非空检查
func (s *OpmOtaPkgEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*OpmOtaPkgQuery) QueryCheck() error {
	return nil
}

// 查询条件
type OpmOtaPkgQuery struct {
	Page      int64            `json:"page,omitempty"`
	Limit     int64            `json:"limit,omitempty"`
	Sort      string           `json:"sort,omitempty"`
	SortField string           `json:"sortField,omitempty"`
	SearchKey string           `json:"searchKey,omitempty"`
	Query     *OpmOtaPkgFilter `json:"query,omitempty"`
}

// OpmOtaPkgFilter，查询条件，字段请根据需要自行增减
type OpmOtaPkgFilter struct {
	Id                   interface{} `json:"id,string,omitempty"`
	ProductId            int64       `json:"productId,string,omitempty"`
	ProductKey           string      `json:"productKey,omitempty"`
	FirmwareId           int64       `json:"firmwareId,string,omitempty"`
	FirmwareName         string      `json:"firmwareName,omitempty"`
	FirmwareFlag         string      `json:"firmwareFlag,omitempty"`
	FirmwareType         int32       `json:"firmwareType,omitempty"`
	VersionId            int64       `json:"versionId,string,omitempty"`
	Version              string      `json:"version,omitempty"`
	UpgradeMode          int32       `json:"upgradeMode,omitempty"`
	Url                  string      `json:"url,omitempty"`
	Status               int32       `json:"status,omitempty"`
	IsAuto               int32       `json:"isAuto,omitempty"`
	UpgradeTimeMode      int32       `json:"upgradeTimeMode"`
	UpgradeDesc          string      `json:"upgradeDesc,omitempty"`
	UpgradeDescEn        string      `json:"upgradeDescEn,omitempty"`
	AutoStartAt          string      `json:"upgradeStartTime"`
	AutoEndAt            string      `json:"upgradeEndTime"`
	SpecifiedVersionMode int32       `json:"specifiedVersionMode,omitempty"`
	SpecifiedVersion     string      `json:"specifiedVersion,omitempty"`
	SpecifiedAreaMode    int32       `json:"specifiedAreaMode,omitempty"`
	SpecifiedArea        string      `json:"specifiedArea,omitempty"`
	Md5                  string      `json:"md5,omitempty"`
	TenantId             string      `json:"tenantId,omitempty"`
	IsCustomFirmware     int32       `json:"isCustomFirmware"` //是否自定义固件
}

// 实体转pb对象
func OpmOtaPkg_e2pb(src *OpmOtaPkgEntitys) *proto.OpmOtaPkg {
	if src == nil {
		return nil
	}

	pbObj := proto.OpmOtaPkg{
		Id:                   src.Id,
		ProductId:            src.ProductId,
		ProductKey:           src.ProductKey,
		Type:                 src.Type,
		FirmwareId:           src.FirmwareId,
		FirmwareFlag:         src.FirmwareFlag,
		FirmwareType:         src.FirmwareType,
		FirmwareName:         src.FirmwareName,
		VersionId:            src.VersionId,
		Version:              src.Version,
		UpgradeMode:          src.UpgradeMode,
		Url:                  src.Url,
		Status:               src.Status,
		IsAuto:               src.IsAuto,
		UpgradeTimeMode:      src.UpgradeTimeMode,
		UpgradeDesc:          src.UpgradeDesc,
		UpgradeDescEn:        src.UpgradeDescEn,
		AutoStartAt:          src.AutoStartAt,
		AutoEndAt:            src.AutoEndAt,
		SpecifiedVersionMode: src.SpecifiedVersionMode,
		SpecifiedVersion:     src.SpecifiedVersion,
		SpecifiedAreaMode:    src.SpecifiedAreaMode,
		SpecifiedArea:        src.SpecifiedArea,
		Md5:                  src.Md5,
		CreatedBy:            src.CreatedBy,
		UpdatedBy:            src.UpdatedBy,
		TenantId:             src.TenantId,
		IsCustomFirmware:     src.IsCustomFirmware,
		IsMustVersion:        src.IsMust,
	}
	return &pbObj
}

// pb对象转实体
func OpmOtaPkg_pb2e(src *proto.OpmOtaPkg) *OpmOtaPkgEntitys {
	if src == nil {
		return nil
	}

	firmwareType, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_firmware_type)
	upgradeMode, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_upgrade_mode)

	entitysObj := OpmOtaPkgEntitys{
		Id:         src.Id,
		ProductId:  src.ProductId,
		ProductKey: src.ProductKey,
		//Type:                 src.Type,
		FirmwareId:           src.FirmwareId,
		FirmwareFlag:         src.FirmwareFlag,
		FirmwareType:         src.FirmwareType,
		FirmwareName:         src.FirmwareName,
		FirmwareTypeName:     firmwareType.Value(src.FirmwareType),
		VersionId:            src.VersionId,
		Version:              src.Version,
		UpgradeMode:          src.UpgradeMode,
		UpgradeModeName:      upgradeMode.Value(src.UpgradeMode),
		Url:                  src.Url,
		Status:               src.Status,
		IsAuto:               src.IsAuto,
		UpgradeTimeMode:      src.UpgradeTimeMode,
		UpgradeDesc:          src.UpgradeDesc,
		UpgradeDescEn:        src.UpgradeDescEn,
		AutoStartAt:          src.AutoStartAt,
		AutoEndAt:            src.AutoEndAt,
		SpecifiedVersionMode: src.SpecifiedVersionMode,
		SpecifiedVersion:     src.SpecifiedVersion,
		SpecifiedAreaMode:    src.SpecifiedAreaMode,
		SpecifiedArea:        src.SpecifiedArea,
		Md5:                  src.Md5,
		CreatedBy:            src.CreatedBy,
		UpdatedBy:            src.UpdatedBy,
		CreatedAt:            src.CreatedAt.AsTime().Unix(),
		UpdatedAt:            src.UpdatedAt.AsTime().Unix(),
		TenantId:             src.TenantId,
		IsCustomFirmware:     src.IsCustomFirmware,
		IsMust:               src.IsMustVersion,
	}
	entitysObj.Publish = OpmOtaPublish_pb2e(src.ListPublishRecord)

	return &entitysObj
}

func OpmOtaPkgFilter_e2pb(src *OpmOtaPkgFilter) *proto.OpmOtaPkg {
	if src == nil {
		return nil
	}
	id, _ := iotutil.ToInt64AndErr(src.Id)
	pbObj := proto.OpmOtaPkg{
		Id:         id,
		ProductId:  src.ProductId,
		ProductKey: src.ProductKey,
		//Type:                 src.Type,
		FirmwareId:           src.FirmwareId,
		FirmwareName:         src.FirmwareName,
		FirmwareFlag:         src.FirmwareFlag,
		FirmwareType:         src.FirmwareType,
		VersionId:            src.VersionId,
		Version:              src.Version,
		UpgradeMode:          src.UpgradeMode,
		Url:                  src.Url,
		Status:               src.Status,
		IsAuto:               src.IsAuto,
		UpgradeTimeMode:      src.UpgradeTimeMode,
		AutoStartAt:          src.AutoStartAt,
		AutoEndAt:            src.AutoEndAt,
		UpgradeDesc:          src.UpgradeDesc,
		UpgradeDescEn:        src.UpgradeDescEn,
		SpecifiedVersionMode: src.SpecifiedVersionMode,
		SpecifiedVersion:     src.SpecifiedVersion,
		SpecifiedAreaMode:    src.SpecifiedAreaMode,
		SpecifiedArea:        src.SpecifiedArea,
		Md5:                  src.Md5,
		IsCustomFirmware:     src.IsCustomFirmware,
	}
	return &pbObj
}

type OtaReleaseRequest struct {
	ProductID         int64    `json:"productId,string"`
	ProductKey        string   `json:"productKey"`
	ReleaseMode       int32    `json:"releaseMode"`
	GraySetting       int32    `json:"graySetting"` //灰度设置 1 指定数量 2 指定比例 3 指定设备
	GrayScale         int32    `json:"grayScale"`
	OtaPkgId          int64    `json:"otaPkgId,string"`
	FirmwareID        int64    `json:"firmwareId,string"`
	FirmwareVersionID int64    `json:"firmwareVersionId,string"`
	DeviceIds         []string `json:"deviceIds"` //设备Id
}

func (s OtaReleaseRequest) CheckParams() error {
	if s.ProductID == 0 {
		return errors.New("产品编号不能为空")
	}
	if s.OtaPkgId == 0 {
		return errors.New("固件OTA编号不能为空")
	}
	if s.ReleaseMode == 0 {
		return errors.New("发布方式不能空")
	}
	return nil
}
