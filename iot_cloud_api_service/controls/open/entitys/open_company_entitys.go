// Code generated by sgen.exe,2022-04-27 10:55:25. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"strings"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

// 企业基本信息请求参数
type OpenCompanyBaseReq struct {
	// UserName    string `json:"userName"`    //登录账号
	// IsRealName  int32  `json:"isRealName"`  //是否实名认证

	Id          string   `json:"id"`          // id
	Region      string   `json:"region"`      //国家地区
	CompanyName string   `json:"companyName"` //企业名称
	Phone       string   `json:"phone"`       //联系电话
	Email       string   `json:"email"`       //联系邮箱
	Address     string   `json:"address"`     //联系地址
	Area        []string `json:"area"`        //国家地区(前端显示)
	//AccountType int    `json:"accountType"` //账号类型
}

// 企业基本信息响应参数
type OpenCompanyBaseRes struct {
	Id          string   `json:"id"`          //id
	UserName    string   `json:"userName"`    //登录账号
	IsRealName  int32    `json:"isRealName"`  //是否实名认证
	AccountType int      `json:"accountType"` //账号类型
	Region      string   `json:"region"`      //国家地区(数据库存储)
	CompanyName string   `json:"companyName"` //企业名称
	Phone       string   `json:"phone"`       //联系电话
	Email       string   `json:"email"`       //联系邮箱
	Address     string   `json:"address"`     //联系地址
	Status      int32    `json:"status"`      //企业状态
	Area        []string `json:"area"`        //国家地区(前端显示)
	TenantId    string   `json:"tenantId"`    //
}

// 企业信息获取响应参数
type OpenCompanyInfoRes struct {
	Id          string               `json:"id"`          //id
	TenantId    string               `json:"tenantId"`    //租户ID
	CompanyName string               `json:"companyName"` //企业名称
	Status      int32                `json:"status"`      //认证状态
	Connect     []OpenCompanyConnect `json:"connect"`     //联系人集合

}

// 企业联系人请求和响应参数
type OpenCompanyConnect struct {
	Id      string `json:"id"`
	Name    string `json:"name"`
	Account string `json:"account"`
	Phone   string `json:"phone"`
	Job     string `json:"job"`
	Address string `json:"address"`
}

// 企业认证请求参数
type OpenCompanyAuthReq struct {
	Id             string `json:"id"`
	CompanyName    string `json:"companyName"`    //企业名称
	Nature         int32  `json:"nature"`         //企业性质
	LicenseNo      string `json:"licenseNo"`      //营业执照号码
	License        string `json:"license"`        //营业执照照片
	LegalPerson    string `json:"legalPerson"`    //法人姓名
	ApplyPerson    string `json:"applyPerson"`    //申请人姓名
	Idcard         string `json:"idcard"`         //身份证号码
	IdcardFrontImg string `json:"idcardFrontImg"` //身份证照片正面
	IdcardAfterImg string `json:"idcardAfterImg"` //身份证照片反面
	Phone          string `json:"phone"`          //联系电话
	Address        string `json:"address"`        //联系地址
}

// 企业认证请求参数
type OpenCompanyChangeNameReq struct {
	Id          string `json:"id"`
	CompanyName string `json:"companyName"` //企业名称
}

// 企业认证响应参数
type OpenCompanyAuthRes struct {
	Id             string            `json:"id"`
	CompanyName    string            `json:"companyName"`    //企业名称
	Nature         int32             `json:"nature"`         //企业性质
	LicenseNo      string            `json:"licenseNo"`      //营业执照号码
	License        string            `json:"license"`        //营业执照照片
	LegalPerson    string            `json:"legalPerson"`    //法人姓名
	ApplyPerson    string            `json:"applyPerson"`    //申请人姓名
	Idcard         string            `json:"idcard"`         //身份证号码
	IdcardFrontImg string            `json:"idcardFrontImg"` //身份证照片正面
	IdcardAfterImg string            `json:"idcardAfterImg"` //身份证照片反面
	Phone          string            `json:"phone"`          //联系电话
	Address        string            `json:"address"`        //联系地址
	Status         int32             `json:"status"`         //状态
	AuthList       []*OpenAuthEntity `json:"authList"`       //审核记录
}

// 审核列表
type OpenAuthEntity struct {
	Result    string `json:"result"`
	OpterTime int64  `json:"opterTime"`
	Why       string `json:"why"`
}

// 增、删、改及查询返回
type OpenCompanyEntitys struct {
	Id             int64     `json:"id,omitempty"`
	TenantId       string    `json:"tenantId,omitempty"`
	UserId         int64     `json:"userId,omitempty"`
	Name           string    `json:"name,omitempty"`
	Nature         int32     `json:"nature,omitempty"`
	LicenseNo      string    `json:"licenseNo,omitempty"`
	License        string    `json:"license,omitempty"`
	LegalPerson    string    `json:"legalPerson,omitempty"`
	ApplyPerson    string    `json:"applyPerson,omitempty"`
	Idcard         string    `json:"idcard,omitempty"`
	IdcardFrontImg string    `json:"idcardFrontImg,omitempty"`
	IdcardAfterImg string    `json:"idcardAfterImg,omitempty"`
	Address        string    `json:"address,omitempty"`
	Status         int32     `json:"status,omitempty"`
	AccountType    int32     `json:"accountType,omitempty"`
	CaseRemak      string    `json:"caseRemak,omitempty"`
	Email          string    `json:"email,omitempty"`
	IsRealName     int32     `json:"isRealName,omitempty"`
	CreatedBy      int64     `json:"createdBy,omitempty"`
	CreatedAt      time.Time `json:"createdAt,omitempty"`
	UpdatedBy      int64     `json:"updatedBy,omitempty"`
	UpdatedAt      time.Time `json:"updatedAt,omitempty"`
	DeletedAt      time.Time `json:"deletedAt,omitempty"`
}

// 查询条件
type OpenCompanyQuery struct {
	Page      uint64            `json:"page,omitempty"`
	Limit     uint64            `json:"limit,omitempty"`
	Sort      string            `json:"sort,omitempty"`
	SortField string            `json:"sortField,omitempty"`
	Query     OpenCompanyFilter `json:"query,omitempty"`
}

// OpenCompanyFilter，查询条件，字段请根据需要自行增减
type OpenCompanyFilter struct {
	Id             int64     `json:"id,omitempty"`
	TenantId       string    `json:"tenantId,omitempty"`
	UserId         int64     `json:"userId,omitempty"`
	Name           string    `json:"name,omitempty"`
	Nature         int32     `json:"nature,omitempty"`
	LicenseNo      string    `json:"licenseNo,omitempty"`
	License        string    `json:"license,omitempty"`
	LegalPerson    string    `json:"legalPerson,omitempty"`
	ApplyPerson    string    `json:"applyPerson,omitempty"`
	Idcard         string    `json:"idcard,omitempty"`
	IdcardFrontImg string    `json:"idcardFrontImg,omitempty"`
	IdcardAfterImg string    `json:"idcardAfterImg,omitempty"`
	Address        string    `json:"address,omitempty"`
	Status         int32     `json:"status,omitempty"`
	AccountType    int32     `json:"accountType,omitempty"`
	CaseRemak      string    `json:"caseRemak,omitempty"`
	Email          string    `json:"email,omitempty"`
	IsRealName     int32     `json:"isRealName,omitempty"`
	CreatedBy      int64     `json:"createdBy,omitempty"`
	CreatedAt      time.Time `json:"createdAt,omitempty"`
	UpdatedBy      int64     `json:"updatedBy,omitempty"`
	UpdatedAt      time.Time `json:"updatedAt,omitempty"`
	DeletedAt      time.Time `json:"deletedAt,omitempty"`
}

// 实体转pb对象
func OpenCompany_e2pb(src *OpenCompanyEntitys) *proto.OpenCompany {
	if src == nil {
		return nil
	}
	pbObj := proto.OpenCompany{
		Id:             src.Id,
		UserId:         src.UserId,
		Name:           src.Name,
		LicenseNo:      src.LicenseNo,
		License:        src.License,
		LegalPerson:    src.LegalPerson,
		ApplyPerson:    src.ApplyPerson,
		Idcard:         src.Idcard,
		IdcardFrontImg: src.IdcardFrontImg,
		IdcardAfterImg: src.IdcardAfterImg,
		Address:        src.Address,
		Status:         src.Status,
		AccountType:    src.AccountType,
		CaseRemak:      src.CaseRemak,
		Email:          src.Email,
		IsRealName:     src.IsRealName,
		CreatedBy:      src.CreatedBy,
		CreatedAt:      timestamppb.New(src.CreatedAt),
		UpdatedBy:      src.UpdatedBy,
		UpdatedAt:      timestamppb.New(src.UpdatedAt),
	}
	if src.Nature != 0 {
		pbObj.Nature = iotutil.ToString(src.Nature)
	}
	return &pbObj
}

// pb对象转实体
func OpenCompany_pb2eCompanyAuth(src *proto.OpenCompany) *OpenCompanyAuthRes {
	if src == nil {
		return nil
	}
	entitysObj := OpenCompanyAuthRes{
		Id:             iotutil.ToString(src.Id),
		CompanyName:    src.Name,
		LicenseNo:      src.LicenseNo,
		License:        src.License,
		LegalPerson:    src.LegalPerson,
		ApplyPerson:    src.ApplyPerson,
		Idcard:         src.Idcard,
		IdcardFrontImg: src.IdcardFrontImg,
		IdcardAfterImg: src.IdcardAfterImg,
		Address:        src.Address,
		Status:         src.Status,
		Phone:          src.Phone,
	}
	if src.Nature != "" {
		entitysObj.Nature = iotutil.ToInt32(src.Nature)
	}
	return &entitysObj
}

// pb对象转实体
func OpenCompany_pb2e(src *proto.OpenCompany) *OpenCompanyEntitys {
	if src == nil {
		return nil
	}
	entitysObj := OpenCompanyEntitys{
		Id:             src.Id,
		UserId:         src.UserId,
		Name:           src.Name,
		LicenseNo:      src.LicenseNo,
		License:        src.License,
		LegalPerson:    src.LegalPerson,
		ApplyPerson:    src.ApplyPerson,
		Idcard:         src.Idcard,
		IdcardFrontImg: src.IdcardFrontImg,
		IdcardAfterImg: src.IdcardAfterImg,
		Address:        src.Address,
		Status:         src.Status,
		AccountType:    src.AccountType,
		CaseRemak:      src.CaseRemak,
		Email:          src.Email,
		IsRealName:     src.IsRealName,
		CreatedBy:      src.CreatedBy,
		CreatedAt:      src.CreatedAt.AsTime(),
		UpdatedBy:      src.UpdatedBy,
		UpdatedAt:      src.UpdatedAt.AsTime(),
	}

	if src.Nature != "" {
		entitysObj.Nature = iotutil.ToInt32(src.Nature)
	}
	return &entitysObj
}

// pb对象转实体
func OpenCompany_pb2eRes(src *proto.OpenCompany) *OpenCompanyBaseRes {
	if src == nil {
		return nil
	}
	var area []string
	if src.Region != "" {
		area = strings.Split(src.Region, ",")
	}

	entitysObj := OpenCompanyBaseRes{
		Id:          iotutil.ToString(src.Id),
		AccountType: int(src.AccountType),
		Region:      src.Region,
		CompanyName: src.Name,
		Phone:       src.Phone,
		Email:       src.Email,
		Address:     src.Address,
		IsRealName:  src.IsRealName,
		Status:      src.Status,
		Area:        area,
		TenantId:    src.TenantId,
	}
	return &entitysObj
}

// pb对象转实体
func OpenCompany_pb2eCompanyInfoRes(src *proto.OpenCompany) *OpenCompanyInfoRes {
	if src == nil {
		return nil
	}
	entitysObj := OpenCompanyInfoRes{
		Id:          iotutil.ToString(src.Id),
		TenantId:    src.TenantId,
		Status:      src.Status,
		CompanyName: src.Name,
	}
	return &entitysObj
}
