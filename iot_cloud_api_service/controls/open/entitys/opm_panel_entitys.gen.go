// Code generated by sgen,2023-06-02 13:48:10. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	"cloud_platform/iot_cloud_api_service/controls/product/entitys"
	proto "cloud_platform/iot_proto/protos/protosService"
	"errors"
	"strconv"
	"time"
)

// 增、删、改及查询返回
type OpmPanelEntitys struct {
	Id               int64                    `json:"id,string"`
	TenantId         string                   `json:"tenantId,omitempty"`
	PanelName        string                   `json:"panelName"`
	PanelCode        string                   `json:"panelCode"`
	PanelType        int32                    `json:"panelType"`
	Status           int32                    `json:"status"`
	BuildStatus      int32                    `json:"buildStatus"`
	BuildErrStatus   int32                    `json:"buildErrStatus"`
	BuildDesc        string                   `json:"buildDesc"`
	BuildTime        time.Time                `json:"buildTime"`
	PanelUrl         string                   `json:"panelUrl,omitempty"`
	PanelUrlName     string                   `json:"panelUrlName,omitempty"`
	PanelSize        int32                    `json:"panelSize,omitempty"`
	PanelKey         string                   `json:"panelKey,omitempty"`
	PreviewName      string                   `json:"previewName"`
	PreviewUrl       string                   `json:"previewUrl"`
	PackageId        int64                    `json:"packageId,string"`
	PackageName      string                   `json:"packageName"`
	ModelId          int64                    `json:"modelId,string"`
	ModelName        string                   `json:"modelName"`
	Width            float64                  `json:"width"`
	Height           float64                  `json:"height"`
	CreatedAt        int64                `json:"createdAt,omitempty"`
	CreatedBy        int64                    `json:"createdBy,string,omitempty"`
	UpdatedAt        int64                `json:"updatedAt,omitempty"`
	UpdatedBy        int64                    `json:"updatedBy,string,omitempty"`
	PanelStudioPages []*OpmPanelStudioEntitys `json:"panelStudioPages"`
	BaseProductId    int64                    `json:"baseProductId,string,omitempty"`
	ProductId        int64                    `json:"productId,string,omitempty"`
	ThemeJson map[string]interface{}          `json:"themeJson,omitempty"`//主题
	LangFileName string `json:"langFileName,omitempty"`
	Remark string `json:"desc"`//面板描述
	UseCount int32 `json:"useCount"`
}

// 新增参数非空检查
func (s *OpmPanelEntitys) AddCheck() error {
	if s.PanelName == "" {
		return errors.New("面板名称不能为空")
	}
	if s.PanelType == 0 {
		return errors.New("面板类型不能为空")
	}
	return nil
}

// 修改参数非空检查
func (s *OpmPanelEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*OpmPanelQuery) QueryCheck() error {
	return nil
}

// 查询条件转换proto
func (s *OpmPanelQuery) OpmPanelQuery_e2pb() *proto.OpmPanel {
	queryObj := &proto.OpmPanel{}
	if s.Query != nil {
		queryObj.Status = s.Query.Status
		if s.Query.PanelName != "" {
			queryObj.PanelName = s.Query.PanelName
		}
		queryObj.PackageId = s.Query.PackageId
		queryObj.ModelId = s.Query.ModelId
		queryObj.TenantId = s.Query.TenantId
		queryObj.BaseProductId = s.Query.BaseProductId
		queryObj.ProductId = s.Query.ProductId
		queryObj.PanelType = s.Query.PanelType
	}
	return queryObj
}

// 查询条件
type OpmPanelQuery struct {
	Page      uint64          `json:"page,omitempty"`
	Limit     uint64          `json:"limit,omitempty"`
	Sort      string          `json:"sort,omitempty"`
	SortField string          `json:"sortField,omitempty"`
	SearchKey string          `json:"searchKey,omitempty"`
	Query     *OpmPanelFilter `json:"query,omitempty"`
}

// OpmPanelFilter，查询条件，字段请根据需要自行增减
type OpmPanelFilter struct {
	Id            int64     `json:"id,string,omitempty"`
	TenantId      string    `json:"tenantId,omitempty"`
	PanelName     string    `json:"panelName,omitempty"`
	PanelType     int32     `json:"panelType,omitempty"`
	Status        int32     `json:"status"`
	BuildStatus   int32     `json:"buildStatus"`
	PanelUrl      string    `json:"panelUrl,omitempty"`
	PanelUrlName  string    `json:"panelUrlName,omitempty"`
	PanelSize     int32     `json:"panelSize,omitempty"`
	PanelKey      string    `json:"panelKey,omitempty"`
	PreviewName   string    `json:"previewName,omitempty"`
	PreviewUrl    string    `json:"previewUrl,omitempty"`
	PackageId     int64     `json:"packageId,string,omitempty"`
	PackageName   string    `json:"packageName,omitempty"`
	ModelId       int64     `json:"modelId,string,omitempty"`
	ModelName     string    `json:"modelName,omitempty"`
	Width         float64   `json:"width,omitempty"`
	Height        float64   `json:"height,omitempty"`
	CreatedAt     time.Time `json:"createdAt,omitempty"`
	CreatedBy     int64     `json:"createdBy,string,omitempty"`
	UpdatedAt     time.Time `json:"updatedAt,omitempty"`
	UpdatedBy     int64     `json:"updatedBy,string,omitempty"`
	BaseProductId int64     `json:"baseProductId,string,omitempty"`
	ProductId     int64     `json:"productId,string,omitempty"`
}

// 实体转pb对象
func OpmPanel_e2pb(src *OpmPanelEntitys) *proto.OpmPanel {
	if src == nil {
		return nil
	}

	pageList := make([]*proto.OpmPanelStudio, 0)
	for _, p := range src.PanelStudioPages {
		pageList = append(pageList, OpmPanelStudio_e2pb(p))
	}

	pbObj := proto.OpmPanel{
		Id:             src.Id,
		TenantId:       src.TenantId,
		PanelName:      src.PanelName,
		PanelType:      src.PanelType,
		Status:         src.Status,
		BuildStatus:    src.BuildStatus,
		PanelUrl:       src.PanelUrl,
		PanelUrlName:   src.PanelUrlName,
		PanelSize:      src.PanelSize,
		PanelKey:       src.PanelKey,
		PreviewName:    src.PreviewName,
		PreviewUrl:     src.PreviewUrl,
		PackageId:      src.PackageId,
		PackageName:    src.PackageName,
		ModelId:        src.ModelId,
		ModelName:      src.ModelName,
		Width:          src.Width,
		Height:         src.Height,
		CreatedBy:      src.CreatedBy,
		UpdatedBy:      src.UpdatedBy,
		BaseProductId:  src.BaseProductId,
		ProductId:      src.ProductId,
		PageStudioList: pageList,
		LangFileName: src.LangFileName,
		Remark: src.Remark,
		Code: src.PanelCode,
	}
	return &pbObj
}

// pb对象转实体
func OpmPanel_pb2e(src *proto.OpmPanel) *OpmPanelEntitys {
	if src == nil {
		return nil
	}

	pageList := make([]*OpmPanelStudioEntitys, 0)
	for _, p := range src.PageStudioList {
		pageList = append(pageList, OpmPanelStudio_pb2e(p))
	}

	entitysObj := OpmPanelEntitys{
		Id:               src.Id,
		TenantId:         src.TenantId,
		PanelName:        src.PanelName,
		PanelType:        src.PanelType,
		Status:           src.Status,
		BuildStatus:      src.BuildStatus,
		PanelUrl:         src.PanelUrl,
		PanelUrlName:     src.PanelUrlName,
		PanelSize:        src.PanelSize,
		PanelKey:         src.PanelKey,
		PreviewName:      src.PreviewName,
		PreviewUrl:       src.PreviewUrl,
		PackageId:        src.PackageId,
		PackageName:      src.PackageName,
		ModelId:          src.ModelId,
		ModelName:        src.ModelName,
		Width:            src.Width,
		Height:           src.Height,
		CreatedAt:        src.CreatedAt.AsTime().Unix(),
		CreatedBy:        src.CreatedBy,
		UpdatedAt:        src.UpdatedAt.AsTime().Unix(),
		UpdatedBy:        src.UpdatedBy,
		BaseProductId:    src.BaseProductId,
		ProductId:        src.ProductId,
		BuildDesc:        src.BuildDesc,
		BuildTime:        src.BuildTime.AsTime(),
		BuildErrStatus:   src.BuildErrStatus,
		PanelStudioPages: pageList,
		Remark: src.Remark,
		LangFileName: src.LangFileName,
		UseCount: src.UseCount,
		PanelCode: src.Code,
	}
	return &entitysObj
}

// 编译进度
type OpmPanelBuildProcess struct {
	PanelId        int64     `json:"panelId,string"`
	BuildStatus    int32     `json:"buildStatus"`
	BuildErrStatus int32     `json:"buildErrStatus"`
	BuildDesc      string    `json:"buildDesc"`
	BuildTime      time.Time `json:"buildTime"`
}

// 构建通知请求接口
type OpmPanelBuildFinishNotifyReq struct {
	BuildId        string `json:"buildId"`        // 构建id
	BuildProgress  int64  `json:"buildProgress"`  // 构建进度
	BuildResultMsg string `json:"buildResultMsg"` // 构建错误描述
	BuildResult    int32  `json:"buildResult"`    //打包结果，打包机上报（要在数据字典定义）
	BuildStep      int32  `json:"buildStep"`      //打包步骤
	CommitID       string `json:"commitId"`       // git仓库提交码，打包机上报
	PanelUrl       string `json:"panelUrl"`       // 面板下载地址
	PanelKey       string `json:"panelKey"`       // 面板Key
	PanelSize      int32  `json:"panelSize"`      // 面板尺寸
	PanelName      string `json:"panelName"`      // 面板名称
	PanelUrlName   string `json:"panelUrlName"`   // 面板名称
	Status         int64  `json:"status"`         // 打包状态
	Mode int32 `json:"mode"`
}

type OpmPanelPerviewSubmitObj struct {
	Id          int64  `json:"id,string"`
	AppKey      string `json:"appKey"`
	UserAccount string `json:"userAccount"`
	UpdatedBy   int64  `json:"updatedBy,string,omitempty"`
	OriginType  int32  `json:"originType"` //来源 = 1 预览 =2发布
}

// pb对象转实体
func OpmPanels_pb2panels(src *proto.OpmPanel) *entitys.PmControlPanelsEntitys {
	if src == nil {
		return nil
	}
	entitysObj := entitys.PmControlPanelsEntitys{
		Id:          strconv.Itoa(int(src.Id)),
		Code: 		 src.Code,
		Name:        src.PanelName,
		Url:         src.PanelUrl,
		UrlName:     src.PanelUrlName,
		PanelSize:   src.PanelSize,
		PreviewName: src.PreviewName,
		PreviewUrl:  src.PreviewUrl,
		ProductId:   strconv.Itoa(int(src.BaseProductId)),
		Status:      src.Status,
	}
	return &entitysObj
}
