// Code generated by sgen.exe,2022-04-27 10:55:26. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	proto "cloud_platform/iot_proto/protos/protosService"
	"errors"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

// 开放平台注册信息
type OpenUserRegisterReq struct {
	UserName     string `json:"userName"`     //邮箱或是手机
	AccountType  int32  `json:"accountType"`  //账号类型[1 企业, 2 个人]
	CompanyName  string `json:"companyName"`  //公司名称
	UserPassword string `json:"userPassword"` //密码
	VerifyCode   string `json:"verifyCode"`   //验码
	TenantId     string `json:"tenantId"`     //租户Id 默认是0，自动创建租户Id
	IP           string `json:"ip"`           //客户请求IP
}

type OpenDeleteReq struct {
	Id string `json:"id"`
}

func (s *OpenUserRegisterReq) CheckRegister() error {
	if s.UserName == "" {
		return errors.New("邮箱或手机不能为空")
	}

	if s.CompanyName == "" && s.AccountType == 1 {
		return errors.New("公司名不能为空")
	}
	if s.VerifyCode == "" {
		return errors.New("验证码不能为空")
	}
	if s.UserPassword == "" {
		return errors.New("用户验证码不能为空")
	}
	return nil
}

type UserLoginReq struct {
	Username     string `json:"username"`             //用户名
	Password     string `json:"password"`             // 密码
	Channel      string `json:"channel,omitempty"`    // PC,APP渠道
	Verifycode   string `json:"verifyCode,omitempty"` // 验证码
	Platformtype string `json:"platformtype"`         //平台类型 （cloud 管理平台 open 开放平台）
	TenantId     string `json:"tenantId"`             //租户Id（当存在多个租户的情况，需要用户选择具体登录的租户，或者默认登录自己的）
	ClientIp     string `json:"clientIp,omitempty"`   //客户端Id
	Explorer     string `json:"explorer,omitempty"`   //客户端信息
	Os           string `json:"os,omitempty"`         //操作系统
}

// 修改密码
type OpenUserUpdatePasswordReq struct {
	UserName    string `json:"userName"`
	VerifyCode  string `json:"verifyCode"`
	NewPassword string `json:"newPassword"`
}

type OpenProfileUserCompany struct {
	Id          string `json:"id"`
	CompanyName string `json:"companyName"`
	TenantId    string `json:"tenantId"`
	UserType    int32  `json:"userType"` // 1主账号, 2 子账号

}

type OpenUserProfileRes struct {
	Id          string                    `json:"id"`
	UserName    string                    `json:"userName"`
	UserStatus  int32                     `json:"userStatus"`
	AccountType int32                     `json:"accountType"`
	Avatar      string                    `json:"avatar"`
	TenantId    string                    `json:"tenantId"`
	CompanyName string                    `json:"companyName"`
	UserType    int32                     `json:"userType"` // 1主账号, 2 子账号
	TenantList  []*OpenProfileUserCompany `json:"tenantList"`
}

// 增、删、改及查询返回
type OpenUserEntitys struct {
	Id            int64     `json:"id,omitempty"`
	UserName      string    `json:"userName,omitempty"`
	Mobile        string    `json:"mobile,omitempty"`
	UserNickname  string    `json:"userNickname,omitempty"`
	Birthday      int32     `json:"birthday,omitempty"`
	UserPassword  string    `json:"userPassword,omitempty"`
	UserSalt      string    `json:"userSalt,omitempty"`
	UserStatus    int32     `json:"userStatus,omitempty"`
	UserEmail     string    `json:"userEmail,omitempty"`
	Sex           int32     `json:"sex,omitempty"`
	Avatar        string    `json:"avatar,omitempty"`
	Remark        string    `json:"remark,omitempty"`
	Address       string    `json:"address,omitempty"`
	Describe      string    `json:"describe,omitempty"`
	LastLoginIp   string    `json:"lastLoginIp,omitempty"`
	LastLoginTime time.Time `json:"lastLoginTime,omitempty"`
	AccountType   int32     `json:"accountType,omitempty"`
	CompanyName   string    `json:"companyName,omitempty"`
	CreatedAt     time.Time `json:"createdAt,omitempty"`
	CreatedBy     int64     `json:"createdBy,omitempty"`
	UpdatedAt     time.Time `json:"updatedAt,omitempty"`
	UpdatedBy     int64     `json:"updatedBy,omitempty"`
	DeletedAt     time.Time `json:"deletedAt,omitempty"`
}

// 查询条件
type OpenUserQuery struct {
	Page      uint64         `json:"page,omitempty"`
	Limit     uint64         `json:"limit,omitempty"`
	Sort      string         `json:"sort,omitempty"`
	SortField string         `json:"sortField,omitempty"`
	Query     OpenUserFilter `json:"query,omitempty"`
}

// OpenUserFilter，查询条件，字段请根据需要自行增减
type OpenUserFilter struct {
	Id            int64     `json:"id,omitempty"`
	UserName      string    `json:"userName,omitempty"`
	Mobile        string    `json:"mobile,omitempty"`
	UserNickname  string    `json:"userNickname,omitempty"`
	Birthday      int32     `json:"birthday,omitempty"`
	UserPassword  string    `json:"userPassword,omitempty"`
	UserSalt      string    `json:"userSalt,omitempty"`
	UserStatus    int32     `json:"userStatus,omitempty"`
	UserEmail     string    `json:"userEmail,omitempty"`
	Sex           int32     `json:"sex,omitempty"`
	Avatar        string    `json:"avatar,omitempty"`
	Remark        string    `json:"remark,omitempty"`
	Address       string    `json:"address,omitempty"`
	Describe      string    `json:"describe,omitempty"`
	LastLoginIp   string    `json:"lastLoginIp,omitempty"`
	LastLoginTime time.Time `json:"lastLoginTime,omitempty"`
	AccountType   int32     `json:"accountType,omitempty"`
	CompanyName   string    `json:"companyName,omitempty"`
	CreatedAt     time.Time `json:"createdAt,omitempty"`
	CreatedBy     int64     `json:"createdBy,omitempty"`
	UpdatedAt     time.Time `json:"updatedAt,omitempty"`
	UpdatedBy     int64     `json:"updatedBy,omitempty"`
	DeletedAt     time.Time `json:"deletedAt,omitempty"`
}

// 实体转pb对象
func OpenUser_e2pb(src *OpenUserEntitys) *proto.OpenUser {
	if src == nil {
		return nil
	}
	pbObj := proto.OpenUser{
		Id:            src.Id,
		UserName:      src.UserName,
		Mobile:        src.Mobile,
		UserNickname:  src.UserNickname,
		Birthday:      src.Birthday,
		UserPassword:  src.UserPassword,
		UserSalt:      src.UserSalt,
		UserStatus:    src.UserStatus,
		UserEmail:     src.UserEmail,
		Sex:           src.Sex,
		Avatar:        src.Avatar,
		Remark:        src.Remark,
		Address:       src.Address,
		Describe:      src.Describe,
		LastLoginIp:   src.LastLoginIp,
		LastLoginTime: timestamppb.New(src.LastLoginTime),
		AccountType:   src.AccountType,
		CompanyName:   src.CompanyName,
		CreatedAt:     timestamppb.New(src.CreatedAt),
		CreatedBy:     src.CreatedBy,
		UpdatedAt:     timestamppb.New(src.UpdatedAt),
		UpdatedBy:     src.UpdatedBy,
	}
	return &pbObj
}

// pb对象转实体
func OpenUser_pb2e(src *proto.OpenUser) *OpenUserEntitys {
	if src == nil {
		return nil
	}
	entitysObj := OpenUserEntitys{
		Id:            src.Id,
		UserName:      src.UserName,
		Mobile:        src.Mobile,
		UserNickname:  src.UserNickname,
		Birthday:      src.Birthday,
		UserPassword:  src.UserPassword,
		UserSalt:      src.UserSalt,
		UserStatus:    src.UserStatus,
		UserEmail:     src.UserEmail,
		Sex:           src.Sex,
		Avatar:        src.Avatar,
		Remark:        src.Remark,
		Address:       src.Address,
		Describe:      src.Describe,
		LastLoginIp:   src.LastLoginIp,
		LastLoginTime: src.LastLoginTime.AsTime(),
		AccountType:   src.AccountType,
		CompanyName:   src.CompanyName,
		CreatedAt:     src.CreatedAt.AsTime(),
		CreatedBy:     src.CreatedBy,
		UpdatedAt:     src.UpdatedAt.AsTime(),
		UpdatedBy:     src.UpdatedBy,
	}
	return &entitysObj
}

// //新增和修改的时候给公共字段赋值, opterType 1 新增, 2 修改
// func OpenUser_SetCommonFiled(model *proto.OpenUser,userId int64,opterType int){
// 	if opterType == 1{
// 		model.CreatedAt = timestamppb.New(time.Now())
// 		model.CreatedBy = userId
// 	}
// 	model.UpdatedAt = timestamppb.New(time.Now())
//     model.UpdatedBy = userId
// }

// 刷新tokne
type RefreshToken struct {
	RefreshToken string `json:"refreshToken"`
	TenantId     string `json:"tenantId"`
}

// APP用户管理
type QueryUserListRsp struct {
	UserId       string `json:"userId"`
	UserMobile   string `json:"userMobile"`
	UserAccount  string `json:"userAccount"`
	UserEmail    string `json:"userEmail"`
	AppName      string `json:"appName"`
	Nickname     string `json:"nickname"`
	RegisterTime int64  `json:"registerTime"`
	Status       int32  `json:"status"`
}

// APP绑定设备详情
type QueryUserDeviceList struct {
	DeviceName      string `json:"deviceName"`
	DevicePid       string `json:"devicePid"`
	ProductName     string `json:"productName"`
	ProductTypeName string `json:"productTypeName"`
	AddMethod       int32  `json:"addMethod"`
}

// 语言查询列表
type LangBaseDataQuery struct {
	Page      int64  `json:"page,omitempty"`
	Limit     int64  `json:"limit,omitempty"`
	Sort      string `json:"sort,omitempty"`
	SortField string `json:"sortField,omitempty"`
	SearchKey string `json:"searchKey,omitempty"`
	DictLabel string `json:"dict_label,omitempty" form:"dictLabel"`
	DictType  string `json:"dict_type,omitempty" form:"dictType"`
}
