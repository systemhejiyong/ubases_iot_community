// Code generated by sgen.exe,2022-04-27 17:59:36. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"errors"
)

// 增、删、改及查询返回
type TplDocumentTemplateEntitys struct {
	Id         string `json:"id"`
	TplName    string `json:"tplName"`
	TplContent string `json:"tplContent"`
	TplParams  string `json:"tplParams"`
	Lang       string `json:"lang"`
	TplType    int32  `json:"tplType"`
	Status     *int32 `json:"status"`
	CreatedBy  int64  `json:"createdBy,omitempty"`
	UpdatedBy  int64  `json:"updatedBy,omitempty"`
	CreatedAt  int64  `json:"createdAt,omitempty"`
	UpdatedAt  int64  `json:"updatedAt,omitempty"`
}

func (s *TplDocumentTemplateEntitys) AddCheck() error {
	if s.Lang == "" {
		return errors.New("模板语言不能为空")
	}
	if s.TplName == "" {
		return errors.New("模板名称不能为空")
	}
	if s.TplContent == "" {
		return errors.New("模板内容不能为空")
	}
	return nil
}

func (s *TplDocumentTemplateEntitys) UpdateCheck() error {
	if s.Lang == "" {
		return errors.New("模板语言不能为空")
	}
	if s.TplName == "" {
		return errors.New("模板名称不能为空")
	}
	if s.TplContent == "" {
		return errors.New("模板内容不能为空")
	}
	return nil
}

// 查询条件
type TplDocumentTemplateQuery struct {
	Page      uint64                     `json:"page,omitempty"`
	Limit     uint64                     `json:"limit,omitempty"`
	Sort      string                     `json:"sort,omitempty"`
	SortField string                     `json:"sortField,omitempty"`
	SearchKey string                     `json:"searchKey,omitempty"`
	Query     *TplDocumentTemplateFilter `json:"query,omitempty"`
}

func (*TplDocumentTemplateQuery) QueryCheck() error {
	return nil
}

// TplDocumentTemplateFilter，查询条件，字段请根据需要自行增减
type TplDocumentTemplateFilter struct {
	Id         string `json:"id,omitempty"`
	TplName    string `json:"tplName,omitempty"`
	TplContent string `json:"tplContent,omitempty"`
	TplParams  string `json:"tplParams,omitempty"`
	Lang       string `json:"lang,omitempty"`
	TplType    int32  `json:"tplType,omitempty"`
	Status     *int32 `json:"status"`
	CreatedBy  int64  `json:"createdBy,omitempty"`
	UpdatedBy  int64  `json:"updatedBy,omitempty"`
	CreatedAt  int64  `json:"createdAt,omitempty"`
	UpdatedAt  int64  `json:"updatedAt,omitempty"`
}

// 实体转pb对象
func TplDocumentTemplate_e2pb(src *TplDocumentTemplateEntitys) *proto.TplDocumentTemplate {
	if src == nil {
		return nil
	}
	pbObj := proto.TplDocumentTemplate{
		TplName:    src.TplName,
		TplContent: src.TplContent,
		TplParams:  src.TplParams,
		Status:     *src.Status,
		Lang:       src.Lang,
		CreatedBy:  src.CreatedBy,
		UpdatedBy:  src.UpdatedBy,
	}
	if src.TplType != 0 {
		pbObj.TplType = iotutil.ToString(src.TplType)
	}
	if src.Id != "" {
		pbObj.Id = iotutil.ToInt64(src.Id)
	}
	return &pbObj
}

// pb对象转实体
func TplDocumentTemplate_pb2e(src *proto.TplDocumentTemplate) *TplDocumentTemplateEntitys {
	if src == nil {
		return nil
	}
	entitysObj := TplDocumentTemplateEntitys{
		Id:         iotutil.ToString(src.Id),
		TplName:    src.TplName,
		TplContent: src.TplContent,
		TplParams:  src.TplParams,
		Status:     &src.Status,
		Lang:       src.Lang,
		CreatedBy:  src.CreatedBy,
		UpdatedBy:  src.UpdatedBy,
		CreatedAt:  src.CreatedAt.AsTime().Unix(),
		UpdatedAt:  src.UpdatedAt.AsTime().Unix(),
	}
	if src.TplType != "" {
		entitysObj.TplType, _ = iotutil.ToInt32Err(src.TplType)
	}
	return &entitysObj
}
