// Code generated by sgen.exe,2022-04-27 15:20:05. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"errors"
)

// 增、删、改及查询返回
type TplTestcaseTemplateEntitys struct {
	Id              string `json:"id"`
	ProductTypeId   string `json:"productTypeId"`
	ProductTypeName string `json:"productTypeName"`
	ProductId       string `json:"productId"`
	Lang            string `json:"lang"`
	Version         string `json:"version"`
	TplName         string `json:"tplName"`
	TplFile         string `json:"tplFile"`
	TplFileName     string `json:"tplFileName"`
	TplFileSize     int64  `json:"tplFileSize"`
	TplDesc         string `json:"tplDesc"`
	Status          int32  `json:"status"`
	CreatedBy       int64  `json:"createdBy"`
	UpdatedBy       int64  `json:"updatedBy"`
	CreatedAt       int64  `json:"createdAt"`
	UpdatedAt       int64  `json:"updatedAt"`
}

func (s *TplTestcaseTemplateEntitys) AddCheck() error {
	if s.TplName == "" {
		return errors.New("模板名称不能为空")
	}
	if s.Version == "" {
		return errors.New("版本号不能为空")
	}
	if s.ProductTypeId == "" {
		return errors.New("产品类型编号不能为空")
	}
	//if s.Lang == "" {
	//	return errors.New("模板所属语言不能为空")
	//}
	return nil
}

func (s *TplTestcaseTemplateEntitys) UpdateCheck() error {
	if s.Version == "" {
		return errors.New("版本号不能为空")
	}
	if s.TplName == "" {
		return errors.New("模板名称不能为空")
	}
	if s.ProductTypeId == "" {
		return errors.New("产品类型编号不能为空")
	}
	//if s.Lang == "" {
	//	return errors.New("模板所属语言不能为空")
	//}
	//if s.TplFile == "" {
	//	return errors.New("模板文件不能为空")
	//}
	return nil
}

func (*TplTestcaseTemplateQuery) QueryCheck() error {
	return nil
}

// 查询条件
type TplTestcaseTemplateQuery struct {
	Page      uint64                     `json:"page,omitempty"`
	Limit     uint64                     `json:"limit,omitempty"`
	Sort      string                     `json:"sort,omitempty"`
	SortField string                     `json:"sortField,omitempty"`
	SearchKey string                     `json:"searchKey,omitempty"`
	Query     *TplTestcaseTemplateFilter `json:"query,omitempty"`
}

// TplTestcaseTemplateFilter，查询条件，字段请根据需要自行增减
type TplTestcaseTemplateFilter struct {
	Id            string `json:"id"`
	ProductTypeId string `json:"productTypeId"`
	ProductId     string `json:"productId"`
	Lang          string `json:"lang"`
	Version       string `json:"version"`
	TplName       string `json:"tplName"`
	TplFile       string `json:"tplFile"`
	TplDesc       string `json:"tplDesc"`
	Status        *int32 `json:"status"`
	CreatedBy     int64  `json:"createdBy"`
	UpdatedBy     int64  `json:"updatedBy"`
	CreatedAt     int64  `json:"createdAt"`
	UpdatedAt     int64  `json:"updatedAt"`
}

// 实体转pb对象
func TplTestcaseTemplate_e2pb(src *TplTestcaseTemplateEntitys) *proto.TplTestcaseTemplate {
	if src == nil {
		return nil
	}
	pbObj := proto.TplTestcaseTemplate{
		Lang:        src.Lang,
		TplName:     src.TplName,
		TplFile:     src.TplFile,
		TplFileName: src.TplFileName,
		TplFileSize: iotutil.ToInt32(src.TplFileSize),
		TplDesc:     src.TplDesc,
		Status:      src.Status,
		Version:     src.Version,
		CreatedBy:   src.CreatedBy,
		UpdatedBy:   src.UpdatedBy,
	}
	if src.Id != "" {
		pbObj.Id = iotutil.ToInt64(src.Id)
	}
	if src.ProductTypeId != "" {
		pbObj.ProductTypeId = iotutil.ToInt64(src.ProductTypeId)
	}
	if src.ProductId != "" {
		pbObj.ProductId = iotutil.ToInt64(src.ProductId)
	}
	return &pbObj
}

// pb对象转实体
func TplTestcaseTemplate_pb2e(src *proto.TplTestcaseTemplate) *TplTestcaseTemplateEntitys {
	if src == nil {
		return nil
	}
	entitysObj := TplTestcaseTemplateEntitys{
		Id:              iotutil.ToString(src.Id),
		ProductTypeId:   iotutil.ToString(src.ProductTypeId),
		ProductId:       iotutil.ToString(src.ProductId),
		ProductTypeName: src.ProductTypeName,
		Lang:            src.Lang,
		TplName:         src.TplName,
		TplFileName:     src.TplFileName,
		TplFileSize:     int64(src.TplFileSize),
		TplFile:         src.TplFile,
		TplDesc:         src.TplDesc,
		Status:          src.Status,
		Version:         src.Version,
		CreatedBy:       src.CreatedBy,
		UpdatedBy:       src.UpdatedBy,
		CreatedAt:       src.CreatedAt.AsTime().Unix(),
		UpdatedAt:       src.UpdatedAt.AsTime().Unix(),
	}
	return &entitysObj
}
