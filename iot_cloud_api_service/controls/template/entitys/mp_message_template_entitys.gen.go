// Code generated by sgen.exe,2022-05-31 10:02:23. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	proto "cloud_platform/iot_proto/protos/protosService"
	"errors"
)

// 增、删、改及查询返回
type MpMessageTemplateEntitys struct {
	Id          int64  `json:"id,string"`
	TplCode     string `json:"tplCode"`
	TplName     string `json:"tplName"`
	TplContent  string `json:"tplContent"`
	TplParams   string `json:"tplParams"`
	PushType    int32  `json:"pushType"`    //消息平台
	MessageType int32  `json:"messageType"` //消息类型
	AgentType   int32  `json:"agentType"`   //接收终端类型
	Lang        string `json:"lang"`
	ExpireHour  int32  `json:"expireHour"`
}

// 新增参数非空检查
func (s *MpMessageTemplateEntitys) AddCheck() error {
	if s.TplCode == "" {
		return errors.New("消息编码不能为空")
	}
	if s.TplName == "" {
		return errors.New("消息名称不能为空")
	}
	//if s.PushType == 0 {
	//	return errors.New("推送类型不能为空")
	//}
	//if s.MessageType == 0 {
	//	return errors.New("消息类型不能为空")
	//}
	if s.TplContent == "" {
		return errors.New("消息内容不能为空")
	}
	return nil
}

// 修改参数非空检查
func (s *MpMessageTemplateEntitys) UpdateCheck() error {
	if s.TplCode == "" {
		return errors.New("模板编码不能为空")
	}
	if s.TplName == "" {
		return errors.New("模板名称不能为空")
	}
	if s.MessageType == 0 {
		return errors.New("消息类型不能为空")
	}
	if s.TplContent == "" {
		return errors.New("模板内容不能为空")
	}
	return nil
}

// 查询参数必填检查
func (*MpMessageTemplateQuery) QueryCheck() error {
	return nil
}

// 查询条件
type MpMessageTemplateQuery struct {
	Page      uint64                   `json:"page,omitempty"`
	Limit     uint64                   `json:"limit,omitempty"`
	Sort      string                   `json:"sort,omitempty"`
	SortField string                   `json:"sortField,omitempty"`
	SearchKey string                   `json:"searchKey,omitempty"`
	Query     *MpMessageTemplateFilter `json:"query,omitempty"`
}

// MpMessageTemplateFilter，查询条件，字段请根据需要自行增减
type MpMessageTemplateFilter struct {
	Id          int64  `json:"id,string,omitempty"`
	TplCode     string `json:"tplCode,omitempty"`
	TplName     string `json:"tplName,omitempty"`
	TplContent  string `json:"tplContent,omitempty"`
	TplParams   string `json:"tplParams,omitempty"`
	PushType    int32  `json:"pushType,omitempty"`
	MessageType int32  `json:"messageType,omitempty"`
	AgentType   int32  `json:"agentType,omitempty"`
	Lang        string `json:"lang,omitempty"`
	ExpireHour  int32  `json:"expireHour,omitempty"`
}

// 实体转pb对象
func MpMessageTemplate_e2pb(src *MpMessageTemplateEntitys) *proto.MpMessageTemplate {
	if src == nil {
		return nil
	}
	pbObj := proto.MpMessageTemplate{
		Id:          src.Id,
		TplCode:     src.TplCode,
		TplName:     src.TplName,
		TplContent:  src.TplContent,
		TplParams:   src.TplParams,
		PushType:    src.PushType,
		MessageType: src.MessageType,
		AgentType:   src.AgentType,
		Lang:        src.Lang,
		ExpireHour:  src.ExpireHour,
	}
	return &pbObj
}

// pb对象转实体
func MpMessageTemplate_pb2e(src *proto.MpMessageTemplate) *MpMessageTemplateEntitys {
	if src == nil {
		return nil
	}
	entitysObj := MpMessageTemplateEntitys{
		Id:          src.Id,
		TplCode:     src.TplCode,
		TplName:     src.TplName,
		TplContent:  src.TplContent,
		TplParams:   src.TplParams,
		PushType:    src.PushType,
		MessageType: src.MessageType,
		AgentType:   src.AgentType,
		Lang:        src.Lang,
		ExpireHour:  src.ExpireHour,
	}
	return &entitysObj
}
