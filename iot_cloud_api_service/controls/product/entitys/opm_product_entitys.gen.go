// Code generated by sgen.exe,2022-05-07 20:21:04. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	proto "cloud_platform/iot_proto/protos/protosService"
	"errors"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

// 增、删、改及查询返回
type OpmProductEntitys struct {
	Id               int64     `json:"id,omitempty"`
	ProductTypeId    int64     `json:"productTypeId,omitempty"`
	ProductKey       string    `json:"productKey,omitempty"`
	Name             string    `json:"name,omitempty"`
	NameEn           string    `json:"nameEn,omitempty"`
	Identifier       string    `json:"identifier,omitempty"`
	Model            string    `json:"model,omitempty"`
	ImageUrl         string    `json:"imageUrl,omitempty"`
	WifiFlag         string    `json:"wifiFlag,omitempty"`
	NetworkType      int32     `json:"networkType,omitempty"`
	AttributeType    int32     `json:"attributeType,omitempty"`
	PowerConsumeType int32     `json:"powerConsumeType,omitempty"`
	Status           int32     `json:"status,omitempty"`
	IsVirtualTest    int32     `json:"isVirtualTest,omitempty"`
	IsScheme         int32     `json:"isScheme,omitempty"`
	Desc             string    `json:"desc,omitempty"`
	CreatedBy        int64     `json:"createdBy,omitempty"`
	CreatedAt        time.Time `json:"createdAt,omitempty"`
	UpdatedBy        int64     `json:"updatedBy,omitempty"`
	UpdatedAt        time.Time `json:"updatedAt,omitempty"`
	DeletedAt        time.Time `json:"deletedAt,omitempty"`
	ProductTypeName  string    `json:"productTypeName,omitempty"`
	TenantId         string    `json:"tenantId,omitempty"`
	ProductId        int64     `json:"productId,omitempty"`
}

// 新增参数非空检查
func (s *OpmProductEntitys) AddCheck() error {
	if s.TenantId == "" {
		return errors.New("当前用户未指定租户Id")
	}
	if s.ProductId == 0 {
		return errors.New("ProductId不能为空")
	}
	if s.ProductKey == "" {
		return errors.New("ProductKey不能为空")
	}
	if s.ProductTypeId == 0 {
		return errors.New("ProductTypeId不能为空")
	}
	return nil
}

// 修改参数非空检查
func (s *OpmProductEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*OpmProductQuery) QueryCheck() error {
	return nil
}

// 查询条件
type OpmProductQuery struct {
	Page      uint64            `json:"page,omitempty"`
	Limit     uint64            `json:"limit,omitempty"`
	Sort      string            `json:"sort,omitempty"`
	SortField string            `json:"sortField,omitempty"`
	SearchKey string            `json:"searchKey,omitempty"`
	Query     *OpmProductFilter `json:"query,omitempty"`
}

// OpmProductFilter，查询条件，字段请根据需要自行增减
type OpmProductFilter struct {
	Id               int64     `json:"id,omitempty"`
	ProductTypeId    int64     `json:"productTypeId,omitempty"`
	ProductKey       string    `json:"productKey,omitempty"`
	Name             string    `json:"name,omitempty"`
	NameEn           string    `json:"nameEn,omitempty"`
	Identifier       string    `json:"identifier,omitempty"`
	Model            string    `json:"model,omitempty"`
	ImageUrl         string    `json:"imageUrl,omitempty"`
	WifiFlag         string    `json:"wifiFlag,omitempty"`
	NetworkType      string    `json:"networkType,omitempty"`
	AttributeType    int32     `json:"attributeType,omitempty"`
	PowerConsumeType int32     `json:"powerConsumeType,omitempty"`
	Status           int32     `json:"status,omitempty"`
	IsVirtualTest    int32     `json:"isVirtualTest,omitempty"`
	IsScheme         int32     `json:"isScheme,omitempty"`
	Desc             string    `json:"desc,omitempty"`
	CreatedBy        int64     `json:"createdBy,omitempty"`
	CreatedAt        time.Time `json:"createdAt,omitempty"`
	UpdatedBy        int64     `json:"updatedBy,omitempty"`
	UpdatedAt        time.Time `json:"updatedAt,omitempty"`
	DeletedAt        time.Time `json:"deletedAt,omitempty"`
	ProductTypeName  string    `json:"productTypeName,omitempty"`
	TenantId         string    `json:"tenantId,omitempty"`
	ProductId        int64     `json:"productId,omitempty"`
}

// 实体转pb对象
func OpmProduct_e2pb(src *OpmProductEntitys) *proto.OpmProduct {
	if src == nil {
		return nil
	}
	pbObj := proto.OpmProduct{
		Id:               src.Id,
		ProductTypeId:    src.ProductTypeId,
		ProductKey:       src.ProductKey,
		Name:             src.Name,
		NameEn:           src.NameEn,
		Identifier:       src.Identifier,
		Model:            src.Model,
		ImageUrl:         src.ImageUrl,
		WifiFlag:         src.WifiFlag,
		NetworkType:      src.NetworkType,
		AttributeType:    src.AttributeType,
		PowerConsumeType: src.PowerConsumeType,
		Status:           src.Status,
		IsVirtualTest:    src.IsVirtualTest,
		IsScheme:         src.IsScheme,
		Desc:             src.Desc,
		CreatedBy:        src.CreatedBy,
		CreatedAt:        timestamppb.New(src.CreatedAt),
		UpdatedBy:        src.UpdatedBy,
		UpdatedAt:        timestamppb.New(src.UpdatedAt),
		ProductTypeName:  src.ProductTypeName,
		TenantId:         src.TenantId,
		//ProductId:        src.ProductId,
	}
	return &pbObj
}

// pb对象转实体
func OpmProduct_pb2e(src *proto.OpmProduct) *OpmProductEntitys {
	if src == nil {
		return nil
	}
	entitysObj := OpmProductEntitys{
		Id:               src.Id,
		ProductTypeId:    src.ProductTypeId,
		ProductKey:       src.ProductKey,
		Name:             src.Name,
		NameEn:           src.NameEn,
		Identifier:       src.Identifier,
		Model:            src.Model,
		ImageUrl:         src.ImageUrl,
		WifiFlag:         src.WifiFlag,
		NetworkType:      src.NetworkType,
		AttributeType:    src.AttributeType,
		PowerConsumeType: src.PowerConsumeType,
		Status:           src.Status,
		IsVirtualTest:    src.IsVirtualTest,
		IsScheme:         src.IsScheme,
		Desc:             src.Desc,
		CreatedBy:        src.CreatedBy,
		CreatedAt:        src.CreatedAt.AsTime(),
		UpdatedBy:        src.UpdatedBy,
		UpdatedAt:        src.UpdatedAt.AsTime(),
		ProductTypeName:  src.ProductTypeName,
		TenantId:         src.TenantId,
		//ProductId:        src.ProductId,
	}
	return &entitysObj
}

//
//// TPmProductVo mapped from table <t_pm_product>
//type TOpmThingModel struct {
//	Id           string `json:"id,omitempty"`           // 主键ID
//	FuncType     string `json:"funcType,omitempty"`     // 功能类型
//	FuncName     string `json:"funcName,omitempty"`     // 功能名称
//	Required     int32  `json:"required"`               // 必选
//	Identifier   string `json:"identifier,omitempty"`   // 标识符
//	RwFlag       string `json:"rwFlag,omitempty"`       // 数据传输类型
//	DataType     string `json:"dataType,omitempty"`     // 数据类型
//	Attribute    string `json:"attribute,omitempty"`    // 功能点属性
//	Space        string `json:"space,omitempty"`        // 属性数据
//	InputParams  string `json:"inputParams,omitempty"`  // 服务输入参数
//	OutputParams string `json:"outputParams,omitempty"` // 服务输出参数
//	Outputdata   string `json:"outputdata,omitempty"`   // 事件输出数据
//	ModelId      int64  `json:"modelId,omitempty"`      // 物模型ID
//	ProductKey   string `json:"productKey,omitempty"`   // 产品唯一标识
//	Specs        string `json:"specs,omitempty"`        //非列表型数据
//	SpecsList    string `json:"specsList,omitempty"`    //列表型数据
//	Custom       int32  `json:"custom,omitempty"`       //是否是自定义功能（0:否, 1:是）
//	CallType     int32  `json:"callType,omitempty"`     //服务的调用方式。1：异步调用, 0：同步调用
//	EventType    string `json:"eventType,omitempty"`    // 事件类型。INFO_EVENT_TYPE：信息。ALERT_EVENT_TYPE：告警。ERROR_EVENT_TYPE：故障。
//}
//
//// TPmProductVo mapped from table <t_pm_product>
//type TOpmThingModelVo struct {
//	Id           string `json:"id,omitempty"`           // 主键ID
//	FuncType     string `json:"funcType,omitempty"`     // 功能类型
//	FuncName     string `json:"funcName,omitempty"`     // 功能名称
//	Required     int32  `json:"required"`               // 必选
//	Identifier   string `json:"identifier,omitempty"`   // 标识符
//	RwFlag       string `json:"rwFlag,omitempty"`       // 数据传输类型
//	DataType     string `json:"dataType,omitempty"`     // 数据类型
//	Attribute    string `json:"attribute,omitempty"`    // 功能点属性
//	Space        string `json:"space,omitempty"`        // 属性数据
//	InputParams  string `json:"inputParams,omitempty"`  // 服务输入参数
//	OutputParams string `json:"outputParams,omitempty"` // 服务输出参数
//	Outputdata   string `json:"outputdata,omitempty"`   // 事件输出数据
//	EventType    string `json:"eventType,omitempty"`    // 事件类型。INFO_EVENT_TYPE：信息。ALERT_EVENT_TYPE：告警。ERROR_EVENT_TYPE：故障。
//}
