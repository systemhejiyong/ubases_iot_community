// Code generated by sgen.exe,2022-04-20 13:52:29. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	"cloud_platform/iot_common/iotenums"
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"errors"
)

// 增、删、改及查询返回
type PmFirmwareVersionEntitys struct {
	Id         string `json:"id,omitempty"`
	FirmwareId int64  `json:"firmwareId,string,omitempty"`
	Version    string `json:"version,omitempty"`
	Desc       string `json:"desc,omitempty"`
	Status     int32  `json:"status,omitempty"`
	StatusName string `json:"statusName,omitempty"`
	FileName   string `json:"fileName,omitempty"`
	FilePath   string `json:"filePath,omitempty"`
	FileKey    string `json:"fileKey,omitempty"`
	FileSize   int32  `json:"fileSize,omitempty"`

	ZipFileName string `json:"zipFileName,omitempty"`
	ZipFilePath string `json:"zipFilePath,omitempty"`
	ZipFileKey  string `json:"zipFileKey,omitempty"`
	ZipFileSize int32  `json:"zipFileSize,omitempty"`

	CreatedAt int64 `json:"createdAt,omitempty"`
	UpdatedBy int64 `json:"updatedBy,omitempty"`
	UpdatedAt int64 `json:"updatedAt,omitempty"`

	IsMust int32 `json:"isMust"` //是否必须
}

func (s *PmFirmwareVersionEntitys) AddCheck() error {
	if s.Version == "" {
		return errors.New("版本号不能为空")
	}
	if s.FirmwareId == 0 {
		return errors.New("固件编号不能为空")
	}
	if s.FileKey == "" {
		return errors.New("固件包必须上传")
	}
	return nil
}

func (s *PmFirmwareVersionEntitys) UpdateCheck() error {
	if s.Version == "" {
		return errors.New("版本号不能为空")
	}
	if s.FirmwareId == 0 {
		return errors.New("固件编号不能为空")
	}
	if s.FileKey == "" {
		return errors.New("固件包必须上传")
	}
	return nil
}

func (s *PmFirmwareVersionQuery) QueryCheck() error {
	if s.Query == nil || s.Query.FirmwareId == 0 {
		return errors.New("固件编号不能为空")
	}
	return nil
}

// 查询条件
type PmFirmwareVersionQuery struct {
	Page      uint64                   `json:"page,omitempty"`
	Limit     uint64                   `json:"limit,omitempty"`
	Sort      string                   `json:"sort,omitempty"`
	SortField string                   `json:"sortField,omitempty"`
	Query     *PmFirmwareVersionFilter `json:"query,omitempty"`
}

// PmFirmwareVersionFilter，查询条件，字段请根据需要自行增减
type PmFirmwareVersionFilter struct {
	Id         int64  `json:"id,string,omitempty"`
	FirmwareId int64  `json:"firmwareId,string,omitempty"`
	Version    string `json:"version,omitempty"`
	Desc       string `json:"desc,omitempty"`
	Status     int32  `json:"status,omitempty"`
	FileName   string `json:"fileName,omitempty"`
	FilePath   string `json:"filePath,omitempty"`
	FileKey    string `json:"fileKey,omitempty"`
	FileSize   int32  `json:"fileSize,omitempty"`
	CreatedAt  int64  `json:"createdAt,omitempty"`
	UpdatedBy  string `json:"updatedBy,omitempty"`
	UpdatedAt  int64  `json:"updatedAt,omitempty"`
}

// 实体转pb对象
func PmFirmwareVersion_e2pb(src *PmFirmwareVersionEntitys) *proto.PmFirmwareVersion {
	if src == nil {
		return nil
	}
	pbObj := proto.PmFirmwareVersion{
		FirmwareId:  src.FirmwareId,
		Version:     src.Version,
		Desc:        src.Desc,
		Status:      src.Status,
		FilePath:    src.FilePath,
		FileName:    src.FileName,
		FileKey:     src.FileKey,
		FileSize:    src.FileSize,
		ZipFilePath: src.ZipFilePath,
		ZipFileName: src.ZipFileName,
		ZipFileKey:  src.ZipFileKey,
		ZipFileSize: src.ZipFileSize,
		UpdatedBy:   src.UpdatedBy,
		IsMust:      src.IsMust,
	}
	if src.Id != "" {
		pbObj.Id = iotutil.ToInt64(src.Id)
	}
	return &pbObj
}

// pb对象转实体
func PmFirmwareVersion_pb2e(src *proto.PmFirmwareVersion) *PmFirmwareVersionEntitys {
	if src == nil {
		return nil
	}
	entitysObj := PmFirmwareVersionEntitys{
		Id:          iotutil.ToString(src.Id),
		FirmwareId:  src.FirmwareId,
		Version:     src.Version,
		Desc:        src.Desc,
		Status:      src.Status,
		StatusName:  iotenums.ToShelfName(src.Status),
		FilePath:    src.FilePath,
		FileName:    src.FileName,
		FileKey:     src.FileKey,
		FileSize:    src.FileSize,
		ZipFilePath: src.ZipFilePath,
		ZipFileName: src.ZipFileName,
		ZipFileKey:  src.ZipFileKey,
		ZipFileSize: src.ZipFileSize,
		CreatedAt:   src.CreatedAt.AsTime().Unix(),
		UpdatedBy:   src.UpdatedBy,
		UpdatedAt:   src.UpdatedAt.AsTime().Unix(),
		IsMust:      src.IsMust,
	}
	return &entitysObj
}
