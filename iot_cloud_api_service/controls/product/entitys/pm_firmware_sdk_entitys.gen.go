// Code generated by sgen.exe,2022-04-20 13:52:29. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	services "cloud_platform/iot_cloud_api_service/controls/global"
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"errors"
	"time"
)

// 增、删、改及查询返回
type PmFirmwareEntitys struct {
	Id              string `json:"id"`
	Name            string `json:"name"`
	NameEn          string `json:"nameEn"`
	Flag            string `json:"flag"`
	Type            int32  `json:"type"`
	TypeName        string `json:"typeName"`
	FlashSize       int32  `json:"flashSize"`
	UpgradeChannel  int32  `json:"upgradeChannel"`
	UpgradeOvertime int32  `json:"upgradeOvertime"`
	Remark          string `json:"remark"`
	Status          int32  `json:"status"`
	Version         string `json:"version"`
	CreatedAt       int64  `json:"createdAt"`
	UpdatedBy       int64  `json:"updatedBy,omitempty"`
	UpdatedAt       int64  `json:"updatedAt"`

	Desc     string `json:"desc,omitempty"`
	FileName string `json:"fileName,omitempty"`
	FilePath string `json:"filePath,omitempty"`
	FileKey  string `json:"fileKey,omitempty"`
	FileSize int32  `json:"fileSize,omitempty"`

	ZipFileName string `json:"zipFileName,omitempty"`
	ZipFilePath string `json:"zipFilePath,omitempty"`
	ZipFileKey  string `json:"zipFileKey,omitempty"`
	ZipFileSize int32  `json:"zipFileSize,omitempty"`
	IsMust      int32  `json:"isMust,omitempty"` //是否必须
}

func (s *PmFirmwareEntitys) AddCheck() error {
	if s.Name == "" {
		return errors.New("固件名称不能为空")
	}
	if s.NameEn == "" {
		return errors.New("固件英文不能为空")
	}
	if s.Flag == "" {
		return errors.New("固件标识不能为空")
	}
	if s.Type == 0 {
		return errors.New("固件类型不能为空")
	}
	if s.FlashSize == 0 {
		return errors.New("固件Flash尺寸不能为空")
	}
	//if s.UpgradeChannel == 0 {
	//	return errors.New("升级渠道不能为空")
	//}
	if s.UpgradeOvertime == 0 {
		return errors.New("升级超时时间不能为空")
	}
	if iotutil.Length(s.Remark) > 500 {
		return errors.New("备注超长")
	}
	return nil
}

func (s *PmFirmwareEntitys) UpdateCheck() error {
	if s.Name == "" {
		return errors.New("固件名称不能为空")
	}
	if s.NameEn == "" {
		return errors.New("固件英文不能为空")
	}
	if s.Flag == "" {
		return errors.New("固件标识不能为空")
	}
	if s.Type == 0 {
		return errors.New("固件类型不能为空")
	}
	if s.FlashSize == 0 {
		return errors.New("固件Flash尺寸不能为空")
	}
	//if s.UpgradeChannel == 0 {
	//	return errors.New("升级渠道不能为空")
	//}
	if s.UpgradeOvertime == 0 {
		return errors.New("升级超时时间不能为空")
	}
	if iotutil.Length(s.Remark) > 500 {
		return errors.New("备注超长")
	}
	return nil
}

func (s *PmFirmwareQuery) QueryCheck() error {
	return nil
}

// 查询条件
type PmFirmwareQuery struct {
	Page      uint64            `json:"page,omitempty"`
	Limit     uint64            `json:"limit,omitempty"`
	Sort      string            `json:"sort,omitempty"`
	SortField string            `json:"sortField,omitempty"`
	SearchKey string            `json:"searchKey,omitempty"`
	Query     *PmFirmwareFilter `json:"query,omitempty"`
}

// PmFirmwareFilter，查询条件，字段请根据需要自行增减
type PmFirmwareFilter struct {
	Id              string    `json:"id,omitempty"`
	FirmwareIds     []string  `json:"firmwareIds,omitempty"`
	ModuleIds       []string  `json:"moduleIds,omitempty"`
	Name            string    `json:"name,omitempty"`
	NameEn          string    `json:"nameEn,omitempty"`
	Flag            string    `json:"flag,omitempty"`
	Type            int32     `json:"type,omitempty"`
	FlashSize       int32     `json:"flashSize,omitempty"`
	UpgradeChannel  int32     `json:"upgradeChannel,omitempty"`
	UpgradeOvertime int32     `json:"upgradeOvertime,omitempty"`
	Status          int32     `json:"status,omitempty"`
	Remark          string    `json:"remark,omitempty"`
	Version         string    `json:"version,omitempty"`
	CreatedAt       time.Time `json:"createdAt,omitempty"`
	UpdatedBy       int64     `json:"updatedBy,omitempty"`
	UpdatedAt       time.Time `json:"updatedAt,omitempty"`
	DeletedAt       time.Time `json:"deletedAt,omitempty"`
}

// 实体转pb对象
func PmFirmware_e2pb(src *PmFirmwareEntitys) *proto.PmFirmware {
	if src == nil {
		return nil
	}
	pbObj := proto.PmFirmware{
		Name:            src.Name,
		NameEn:          src.NameEn,
		Flag:            src.Flag,
		Type:            iotutil.ToString(src.Type),
		FlashSize:       iotutil.ToInt32(src.FlashSize),
		UpgradeChannel:  src.UpgradeChannel,
		UpgradeOvertime: src.UpgradeOvertime,
		Remark:          src.Remark,
		Status:          src.Status,
		Version:         src.Version,
		UpdatedBy:       src.UpdatedBy,
		Desc:            src.Desc,
		FileSize:        src.FileSize,
		FilePath:        src.FilePath,
		FileKey:         src.FileKey,
		FileName:        src.FileName,
		ZipFileSize:     src.ZipFileSize,
		ZipFilePath:     src.ZipFilePath,
		ZipFileKey:      src.ZipFileKey,
		ZipFileName:     src.ZipFileName,
		IsMust:          src.IsMust,
	}
	//默认值为非必须
	if src.IsMust == 0 {
		src.IsMust = 2
	}

	if src.Id != "" {
		pbObj.Id = iotutil.ToInt64(src.Id)
	}
	return &pbObj
}

// pb对象转实体
func PmFirmware_pb2e(src *proto.PmFirmware) *PmFirmwareEntitys {
	if src == nil {
		return nil
	}

	firmwareType, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_firmware_type)

	entitysObj := PmFirmwareEntitys{
		Id:              iotutil.ToString(src.Id),
		Name:            src.Name,
		NameEn:          src.NameEn,
		Flag:            src.Flag,
		TypeName:        firmwareType.ValueStr(src.Type),
		FlashSize:       iotutil.ToInt32(src.FlashSize),
		UpgradeChannel:  src.UpgradeChannel,
		UpgradeOvertime: src.UpgradeOvertime,
		Remark:          src.Remark,
		Status:          src.Status,
		Version:         src.Version,
		CreatedAt:       src.CreatedAt.AsTime().Unix(),
		UpdatedBy:       src.UpdatedBy,
		UpdatedAt:       src.UpdatedAt.AsTime().Unix(),
	}
	if src.Type != "" {
		entitysObj.Type = iotutil.ToInt32(src.Type)
	}
	return &entitysObj
}
