// Code generated by sgen.exe,2022-04-20 13:52:30. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	services "cloud_platform/iot_cloud_api_service/controls/global"
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"errors"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

// 增、删、改及查询返回
type PmModuleEntitys struct {
	Id               string                             `json:"id"`
	ModuleName       string                             `json:"moduleName"`
	ModuleNameEn     string                             `json:"moduleNameEn"`
	FirmwareType     int32                              `json:"firmwareType"`
	FirmwareFlag     string                             `json:"firmwareFlag"`
	FirmwareName     string                             `json:"firmwareName"`
	FirmwareKey      string                             `json:"firmwareKey"`
	FirmwareTypeName string                             `json:"firmwareTypeName"`
	FirmwareId       string                             `json:"firmwareId"`
	ImgUrl           string                             `json:"imgUrl"`
	Status           int32                              `json:"status"`
	FileUrl          string                             `json:"fileUrl"`
	FileName         string                             `json:"fileName"`
	Remark           string                             `json:"remark"`
	CreatedAt        int64                              `json:"createdAt"`
	DefaultVersion   string                             `json:"defaultVersion,omitempty"`
	VersionList      []*proto.ModuleAuthFirmwareVersion `json:"versionList"`
	Version          string                             `json:"version,omitempty"`
	UpdatedBy        int64                              `json:"updatedBy"`
	UpdatedAt        int64                              `json:"updatedAt"`
}

func (s *PmModuleEntitys) AddCheck() error {
	if s.ModuleName == "" {
		return errors.New("模组名称不能为空")
	}
	if s.ModuleNameEn == "" {
		return errors.New("模组英文不能为空")
	}
	if s.FirmwareType == 0 {
		return errors.New("固件类型不能为空")
	}
	if s.FirmwareFlag == "" {
		return errors.New("固件标识不能为空")
	}
	if s.FirmwareId == "" {
		return errors.New("固件Key不能为空")
	}
	if s.ImgUrl == "" {
		return errors.New("请上传固件图片")
	}
	if s.FileUrl == "" {
		return errors.New("请上传固件包")
	}
	if iotutil.Length(s.Remark) > 500 {
		return errors.New("备注超长")
	}
	return nil
}

func (s *PmModuleEntitys) UpdateCheck() error {
	if s.ModuleName == "" {
		return errors.New("模组名称不能为空")
	}
	if s.ModuleNameEn == "" {
		return errors.New("模组英文不能为空")
	}
	if s.FirmwareType == 0 {
		return errors.New("固件类型不能为空")
	}
	if s.FirmwareFlag == "" {
		return errors.New("固件标识不能为空")
	}
	if s.FirmwareId == "" {
		return errors.New("固件Key不能为空")
	}
	if s.ImgUrl == "" {
		return errors.New("请上传固件图片")
	}
	if s.FileUrl == "" {
		return errors.New("请上传固件包")
	}
	if iotutil.Length(s.Remark) > 500 {
		return errors.New("备注超长")
	}
	return nil
}

func (s *PmModuleQuery) QueryCheck() error {
	return nil
}

// 查询条件
type PmModuleQuery struct {
	Page      uint64          `json:"page,omitempty"`
	Limit     uint64          `json:"limit,omitempty"`
	Sort      string          `json:"sort,omitempty"`
	SortField string          `json:"sortField,omitempty"`
	Query     *PmModuleFilter `json:"query,omitempty"`
}

// PmModuleFilter，查询条件，字段请根据需要自行增减
type PmModuleFilter struct {
	Id           string `json:"id,omitempty"`
	ModuleName   string `json:"moduleName,omitempty"`
	ModuleNameEn string `json:"moduleNameEn,omitempty"`
	FirmwareType int32  `json:"firmwareType,omitempty"`
	FirmwareFlag string `json:"firmwareFlag,omitempty"`
	FirmwareId   string `json:"firmwareId,omitempty"`
	Status       int32  `json:"status"`
	ImgUrl       string `json:"imgUrl,omitempty"`
	FileUrl      string `json:"fileUrl,omitempty"`
	Remark       string `json:"remark,omitempty"`
	CreatedAt    int64  `json:"createdAt,omitempty"`
	UpdatedBy    string `json:"updatedBy,omitempty"`
	UpdatedAt    int64  `json:"updatedAt,omitempty"`
}

// 实体转pb对象
func PmModule_e2pb(src *PmModuleEntitys) *proto.PmModule {
	if src == nil {
		return nil
	}
	pbObj := proto.PmModule{
		ModuleName:     src.ModuleName,
		ModuleNameEn:   src.ModuleNameEn,
		FirmwareFlag:   src.FirmwareFlag,
		FirmwareId:     iotutil.ToInt64(src.FirmwareId),
		ImgUrl:         src.ImgUrl,
		Status:         src.Status,
		FileUrl:        src.FileUrl,
		FileName:       src.FileName,
		Remark:         src.Remark,
		CreatedAt:      timestamppb.New(time.Unix(src.CreatedAt, 0)),
		UpdatedBy:      src.UpdatedBy,
		UpdatedAt:      timestamppb.New(time.Unix(src.UpdatedAt, 0)),
		DefaultVersion: src.DefaultVersion,
		VersionList:    src.VersionList,
	}
	if src.FirmwareType != 0 {
		pbObj.FirmwareType = iotutil.ToString(src.FirmwareType)
	}
	if src.Id != "" {
		pbObj.Id = iotutil.ToInt64(src.Id)
	}
	return &pbObj
}

// pb对象转实体
func PmModule_pb2e(src *proto.PmModule) *PmModuleEntitys {
	if src == nil {
		return nil
	}
	firmwareType, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_firmware_type)
	entitysObj := PmModuleEntitys{
		Id:               iotutil.ToString(src.Id),
		ModuleName:       src.ModuleName,
		ModuleNameEn:     src.ModuleNameEn,
		FirmwareFlag:     src.FirmwareFlag,
		FirmwareTypeName: firmwareType.ValueStr(src.FirmwareType),
		FirmwareId:       iotutil.ToString(src.FirmwareId),
		FileName:         src.FileName,
		ImgUrl:           src.ImgUrl,
		Status:           src.Status,
		FileUrl:          src.FileUrl,
		Remark:           src.Remark,
		DefaultVersion:   src.DefaultVersion,
		VersionList:      src.VersionList,
		CreatedAt:        src.CreatedAt.AsTime().Unix(),
		UpdatedBy:        src.UpdatedBy,
		UpdatedAt:        src.UpdatedAt.AsTime().Unix(),
		FirmwareName:     src.FirmwareName,
		FirmwareKey:      src.FirmwareKey,
	}
	if src.FirmwareType != "" {
		entitysObj.FirmwareType, _ = iotutil.ToInt32Err(src.FirmwareType)
	}
	return &entitysObj
}

// pb对象转实体
func PmModuleVo_pb2e(src *proto.PmModuleVo) *PmModuleEntitys {
	if src == nil {
		return nil
	}
	firmwareType, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_firmware_type)
	entitysObj := PmModuleEntitys{
		Id:               iotutil.ToString(src.Id),
		ModuleName:       src.ModuleName,
		ModuleNameEn:     src.ModuleNameEn,
		FirmwareFlag:     src.FirmwareFlag,
		FirmwareName:     src.FirmwareName,
		FirmwareTypeName: firmwareType.ValueStr(src.FirmwareType),
		FirmwareId:       iotutil.ToString(src.FirmwareId),
		FirmwareKey:      src.FirmwareKey,
		ImgUrl:           src.ImgUrl,
		Status:           src.Status,
		FileUrl:          src.FileUrl,
		Remark:           src.Remark,
		CreatedAt:        src.CreatedAt.AsTime().Unix(),
		UpdatedBy:        src.UpdatedBy,
		UpdatedAt:        src.UpdatedAt.AsTime().Unix(),
		Version:          src.Version,
	}
	if src.FirmwareType != "" {
		entitysObj.FirmwareType = iotutil.ToInt32(src.FirmwareType)
	}
	return &entitysObj
}

func ToFirmwareTypeName(status string) string {
	res := "其它"
	switch status {
	case "1":
		res = "模组通用固件方案"
	case "2":
		res = "通用固件方案"
	}
	return res
}
