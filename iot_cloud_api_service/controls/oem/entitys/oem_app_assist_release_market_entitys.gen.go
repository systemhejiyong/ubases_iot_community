// Code generated by sgen.exe,2022-10-24 09:40:29. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	proto "cloud_platform/iot_proto/protos/protosService"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

// 增、删、改及查询返回
type OemAppAssistReleaseMarketEntitys struct {
	Id              int64 `json:"id,string,omitempty"`
	MarketId        int64 `json:"marketId,string,omitempty"`
	ReleaseStatus   int32 `json:"releaseStatus,omitempty"`
	FinishTime      int64 `json:"finishTime,omitempty"`
	AssistReleaseId int64 `json:"assistReleaseId,string,omitempty"`
	IsCheck         int32 `json:"isCheck,omitempty"`
}

// 新增参数非空检查
func (s *OemAppAssistReleaseMarketEntitys) AddCheck() error {
	return nil
}

// 修改参数非空检查
func (s *OemAppAssistReleaseMarketEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*OemAppAssistReleaseMarketQuery) QueryCheck() error {
	return nil
}

// 查询条件
type OemAppAssistReleaseMarketQuery struct {
	Page      uint64                           `json:"page,omitempty"`
	Limit     uint64                           `json:"limit,omitempty"`
	Sort      string                           `json:"sort,omitempty"`
	SortField string                           `json:"sortField,omitempty"`
	SearchKey string                           `json:"searchKey,omitempty"`
	Query     *OemAppAssistReleaseMarketFilter `json:"query,omitempty"`
}

// OemAppAssistReleaseMarketFilter，查询条件，字段请根据需要自行增减
type OemAppAssistReleaseMarketFilter struct {
	Id              int64  `json:"id,string,omitempty"`
	MarketId        int64  `json:"marketId,string,omitempty"`
	ReleaseStatus   string `json:"releaseStatus,omitempty"`
	FinishTime      string `json:"finishTime,omitempty"`
	AssistReleaseId string `json:"assistReleaseId,omitempty"`
	IsCheck         string `json:"isCheck,omitempty"`
}

// 实体转pb对象
func OemAppAssistReleaseMarket_e2pb(src *OemAppAssistReleaseMarketEntitys) *proto.OemAppAssistReleaseMarket {
	if src == nil {
		return nil
	}
	pbObj := proto.OemAppAssistReleaseMarket{
		Id:              src.Id,
		MarketId:        src.MarketId,
		ReleaseStatus:   src.ReleaseStatus,
		FinishTime:      timestamppb.New(time.Unix(src.FinishTime, 0)),
		AssistReleaseId: src.AssistReleaseId,
		IsCheck:         src.IsCheck,
	}
	return &pbObj
}

// pb对象转实体
func OemAppAssistReleaseMarket_pb2e(src *proto.OemAppAssistReleaseMarket) *OemAppAssistReleaseMarketEntitys {
	if src == nil {
		return nil
	}
	entitysObj := OemAppAssistReleaseMarketEntitys{
		Id:              src.Id,
		MarketId:        src.MarketId,
		ReleaseStatus:   src.ReleaseStatus,
		FinishTime:      src.FinishTime.AsTime().Unix(),
		AssistReleaseId: src.AssistReleaseId,
		IsCheck:         src.IsCheck,
	}
	return &entitysObj
}
