// Code generated by sgen.exe,2022-10-24 09:40:29. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	proto "cloud_platform/iot_proto/protos/protosService"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

// 增、删、改及查询返回
type OemAppAssistReleaseEntitys struct {
	Id                 int64            `json:"id,string,omitempty"`
	DevelopId          int64            `json:"developId,string,omitempty"`
	TenantId           string           `json:"tenantId"`
	DevelopPhone       string           `json:"developPhone"`
	AppKey             string           `json:"appKey"`
	AppName            string           `json:"appName"`
	AppVersion         string           `json:"appVersion"`
	AppTemplateId      int64            `json:"appTemplateId,string,omitempty"`
	AppTemplateVersion string           `json:"appTemplateVersion"`
	SkinId             int64            `json:"skinId,string,omitempty"`
	SkinName           string           `json:"skinName,string"`
	StartTime          int64            `json:"startTime"`
	EndTime            int64            `json:"endTime"`
	Status             int32            `json:"status"`
	Remark             string           `json:"remark,omitempty"`
	CreatedBy          int64            `json:"createdBy,string,omitempty"`
	CreatedAt          time.Time        `json:"createdAt,omitempty"`
	UpdatedBy          int64            `json:"updatedBy,string,omitempty"`
	UpdatedAt          time.Time        `json:"updatedAt,omitempty"`
	ReleaseMarkets     []*ReleaseMarket `json:"releaseMarkets"`
}

// 上架市场详情
type ReleaseMarket struct {
	AssistReleaseId int64 `json:"assistReleaseId,string,omitempty"` // 辅助上架编号
	FinishTime      int64 `json:"finishTime"`                       // 完成时间
	IsCheck         int32 `json:"isCheck"`                          // 是否选择该市场
	MarketId        int64 `json:"marketId,string"`
	ReleaseStatus   int32 `json:"releaseStatus,omitempty"` // 上架状态
}

// 新增参数非空检查
func (s *OemAppAssistReleaseEntitys) AddCheck() error {
	return nil
}

// 修改参数非空检查
func (s *OemAppAssistReleaseEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*OemAppAssistReleaseQuery) QueryCheck() error {
	return nil
}

// 查询条件
type OemAppAssistReleaseQuery struct {
	Page      uint64                     `json:"page,omitempty"`
	Limit     uint64                     `json:"limit,omitempty"`
	Sort      string                     `json:"sort,omitempty"`
	SortField string                     `json:"sortField,omitempty"`
	SearchKey string                     `json:"searchKey,omitempty"`
	Query     *OemAppAssistReleaseFilter `json:"query,omitempty"`
}

// OemAppAssistReleaseFilter，查询条件，字段请根据需要自行增减
type OemAppAssistReleaseFilter struct {
	Id                 int64     `json:"id,string,omitempty"`
	DevelopId          int64     `json:"developId,string,omitempty"`
	TenantId           string    `json:"tenantId,omitempty"`
	DevelopPhone       string    `json:"account,omitempty"`
	AppKey             string    `json:"appKey,omitempty"`
	AppName            string    `json:"appName,omitempty"`
	AppVersion         string    `json:"appVersion,omitempty"`
	AppTemplateId      int64     `json:"appTemplateId,string,omitempty"`
	AppTemplateVersion string    `json:"appTemplateVersion,omitempty"`
	SkinId             int64     `json:"skinId,string,omitempty"`
	StartTime          int64     `json:"startTime,omitempty"`
	EndTime            int64     `json:"endTime,omitempty"`
	Status             int32     `json:"status,omitempty"`
	Remark             string    `json:"remark,omitempty"`
	CreatedBy          int64     `json:"createdBy,string,omitempty"`
	CreatedAt          time.Time `json:"createdAt,omitempty"`
	UpdatedBy          int64     `json:"updatedBy,string,omitempty"`
	UpdatedAt          time.Time `json:"updatedAt,omitempty"`
	DeletedAt          time.Time `json:"deletedAt,omitempty"`
}

// 实体转pb对象
func OemAppAssistRelease_e2pb(src *OemAppAssistReleaseEntitys) *proto.OemAppAssistRelease {
	if src == nil {
		return nil
	}
	pbObj := proto.OemAppAssistRelease{
		Id:                 src.Id,
		DevelopId:          src.DevelopId,
		TenantId:           src.TenantId,
		DevelopPhone:       src.DevelopPhone,
		AppKey:             src.AppKey,
		AppVersion:         src.AppVersion,
		AppTemplateId:      src.AppTemplateId,
		AppTemplateVersion: src.AppTemplateVersion,
		SkinId:             src.SkinId,
		StartTime:          timestamppb.New(time.Unix(src.StartTime, 0)),
		EndTime:            timestamppb.New(time.Unix(src.EndTime, 0)),
		Status:             src.Status,
		Remark:             src.Remark,
	}
	//绑定市场信息
	for _, market := range src.ReleaseMarkets {
		pbObj.ReleaseMarkets = append(pbObj.ReleaseMarkets, &proto.ReleaseMarket{
			AssistReleaseId: market.AssistReleaseId,
			FinishTime:      market.FinishTime,
			IsCheck:         market.IsCheck,
			MarketId:        market.MarketId,
			ReleaseStatus:   market.ReleaseStatus,
		})
	}
	return &pbObj
}

// pb对象转实体
func OemAppAssistRelease_pb2e(src *proto.OemAppAssistRelease) *OemAppAssistReleaseEntitys {
	if src == nil {
		return nil
	}
	entitysObj := OemAppAssistReleaseEntitys{
		Id:                 src.Id,
		DevelopId:          src.DevelopId,
		TenantId:           src.TenantId,
		DevelopPhone:       src.DevelopPhone,
		AppName:            src.AppName,
		SkinName:           src.SkinName,
		AppKey:             src.AppKey,
		AppVersion:         src.AppVersion,
		AppTemplateId:      src.AppTemplateId,
		AppTemplateVersion: src.AppTemplateVersion,
		SkinId:             src.SkinId,
		StartTime:          src.StartTime.AsTime().Unix(),
		EndTime:            src.EndTime.AsTime().Unix(),
		Status:             src.Status,
		Remark:             src.Remark,
		CreatedBy:          src.CreatedBy,
		CreatedAt:          src.CreatedAt.AsTime(),
		UpdatedBy:          src.UpdatedBy,
		UpdatedAt:          src.UpdatedAt.AsTime(),
	}

	//转换有效状态
	nowTime := time.Now().Unix()
	if nowTime >= entitysObj.StartTime && nowTime < entitysObj.EndTime {
		entitysObj.Status = 1
	} else {
		entitysObj.Status = 2
	}

	//绑定市场信息
	for _, market := range src.ReleaseMarkets {
		entitysObj.ReleaseMarkets = append(entitysObj.ReleaseMarkets, &ReleaseMarket{
			AssistReleaseId: market.AssistReleaseId,
			FinishTime:      market.FinishTime,
			IsCheck:         market.IsCheck,
			MarketId:        market.MarketId,
			ReleaseStatus:   market.ReleaseStatus,
		})
	}
	return &entitysObj
}

// 开发者APP
type DeveloperApp struct {
	AppList   []AppList `json:"appList"`
	DevelopId int64     `json:"developId,string"` // 开发者编号
	TenantId  string    `json:"tenantId"`         // 租户编号
}

type AppList struct {
	AppAndroidPkg string           `json:"appAndroidPkg"` // APP Android包名
	AppId         int64            `json:"appId,string"`  // APP编号
	AppIosPkg     string           `json:"appIosPkg"`     // APP IOS包名
	AppKey        string           `json:"appKey"`        // APPKey
	AppName       string           `json:"appName"`       // APP名称
	AppVersions   []AppVersionItem `json:"appVersions"`   // APP的版本列表
}

type AppVersionItem struct {
	AppTemplateId      int64                 `json:"appTemplateId,string"` // APP模板编号
	AppTemplateSkins   []AppTemplateSkinItem `json:"appTemplateSkins"`     // APP模板皮肤
	AppTemplateVersion string                `json:"appTemplateVersion"`   // APP模板版本号
	AppVersion         string                `json:"appVersion"`           // APP版本
}

type AppTemplateSkinItem struct {
	SkinImgs []string `json:"skinImgs"` // 皮肤图片集合
	SkinKey  string   `json:"skinKey"`  // 皮肤编号
	SkinName string   `json:"skinName"` // 皮肤名称
}

// pb对象转实体
func DeveloperApp_pb2e(app *proto.DeveloperEntitys, src []*proto.DeveloperAppList) *DeveloperApp {
	if src == nil {
		return nil
	}
	res := &DeveloperApp{
		DevelopId: app.Id,
		TenantId:  app.TenantId,
	}
	for _, row := range src {
		item := AppList{
			AppAndroidPkg: row.AppAndroidPkg,
			AppId:         row.AppId,
			AppIosPkg:     row.AppIosPkg,
			AppKey:        row.AppKey,
			AppName:       row.AppName,
			AppVersions:   []AppVersionItem{},
		}
		for _, version := range row.AppVersions {
			appVersionItem := AppVersionItem{
				AppTemplateId:      version.AppTemplateId,
				AppTemplateSkins:   []AppTemplateSkinItem{},
				AppTemplateVersion: version.AppTemplateVersion,
				AppVersion:         version.AppVersion,
			}
			for _, skin := range version.AppTemplateSkins {
				appVersionItem.AppTemplateSkins = append(appVersionItem.AppTemplateSkins, AppTemplateSkinItem{
					SkinImgs: skin.SkinImgs,
					SkinKey:  skin.SkinKey,
					SkinName: skin.SkinName,
				})
			}
			item.AppVersions = append(item.AppVersions, appVersionItem)
		}
		res.AppList = append(res.AppList, item)
	}
	return res
}
