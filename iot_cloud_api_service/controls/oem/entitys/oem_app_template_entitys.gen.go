// Code generated by sgen.exe,2022-10-24 09:40:32. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	proto "cloud_platform/iot_proto/protos/protosService"
)

// 增、删、改及查询返回
type OemAppTemplateEntitys struct {
	Id            int64             `json:"id,string"`
	Name          string            `json:"name"`
	NameEn        string            `json:"nameEn"`
	Type          int32             `json:"type"`
	Version       string            `json:"version"`
	GitUrl        string            `json:"gitUrl"`
	Status        int32             `json:"status"`
	Remark        string            `json:"remark"`
	OpenRangeType int32             `json:"openRangeType"`
	UseCount      int32             `json:"useCount"`
	CreatedBy     int64             `json:"createdBy,string,omitempty"`
	CreatedAt     int64             `json:"createdAt"`
	UpdatedBy     int64             `json:"updatedBy,string,omitempty"`
	UpdatedAt     int64             `json:"updatedAt"`
	Developers    []*DevelopersItem `json:"developers"` //绑定开发者列表
}

// 增、删、改及查询返回
type OemAppTemplateCopy struct {
	Id      int64  `json:"id,string,omitempty"`
	Version string `json:"version,omitempty"`
}

// 开发者信息
type DevelopersItem struct {
	DeveloperId int64  `json:"developerId"`
	Account     string `json:"account"`
	CompanyName string `json:"companyName"`
	TenantId    string `json:"tenantId"`
}

// 新增参数非空检查
func (s *OemAppTemplateEntitys) AddCheck() error {
	return nil
}

// 修改参数非空检查
func (s *OemAppTemplateEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*OemAppTemplateQuery) QueryCheck() error {
	return nil
}

// 查询条件
type OemAppTemplateQuery struct {
	Page      uint64                `json:"page,omitempty"`
	Limit     uint64                `json:"limit,omitempty"`
	Sort      string                `json:"sort,omitempty"`
	SortField string                `json:"sortField,omitempty"`
	SearchKey string                `json:"searchKey,omitempty"`
	Query     *OemAppTemplateFilter `json:"query,omitempty"`
}

// OemAppTemplateFilter，查询条件，字段请根据需要自行增减
type OemAppTemplateFilter struct {
	Id            int64  `json:"id,string,omitempty"`
	Name          string `json:"name,omitempty"`
	NameEn        string `json:"nameEn,omitempty"`
	Type          int32  `json:"type,omitempty"`
	Version       string `json:"version,omitempty"`
	GitUrl        string `json:"gitUrl,omitempty"`
	Status        int32  `json:"status,omitempty"`
	Remark        string `json:"remark,omitempty"`
	OpenRangeType int32  `json:"openRangeType,omitempty"`
}

// 实体转pb对象
func OemAppTemplate_e2pb(src *OemAppTemplateEntitys) *proto.OemAppTemplate {
	if src == nil {
		return nil
	}
	pbObj := proto.OemAppTemplate{
		Id:            src.Id,
		Name:          src.Name,
		NameEn:        src.NameEn,
		Type:          src.Type,
		Version:       src.Version,
		GitUrl:        src.GitUrl,
		Status:        src.Status,
		Remark:        src.Remark,
		OpenRangeType: src.OpenRangeType,
	}
	for _, developer := range src.Developers {
		pbObj.Developers = append(pbObj.Developers, &proto.TemplateDeveloperItem{
			DeveloperId: developer.DeveloperId,
			Account:     developer.Account,
			CompanyName: developer.CompanyName,
			TenantId:    developer.TenantId,
		})
	}
	return &pbObj
}

// pb对象转实体
func OemAppTemplate_pb2e(src *proto.OemAppTemplate) *OemAppTemplateEntitys {
	if src == nil {
		return nil
	}
	entitysObj := OemAppTemplateEntitys{
		Id:            src.Id,
		Name:          src.Name,
		NameEn:        src.NameEn,
		Type:          src.Type,
		Version:       src.Version,
		GitUrl:        src.GitUrl,
		Status:        src.Status,
		Remark:        src.Remark,
		OpenRangeType: src.OpenRangeType,
		CreatedBy:     src.CreatedBy,
		CreatedAt:     src.CreatedAt.AsTime().Unix(),
		UpdatedBy:     src.UpdatedBy,
		UseCount:      src.UseCount,
	}
	for _, developer := range src.Developers {
		entitysObj.Developers = append(entitysObj.Developers, &DevelopersItem{
			Account:     developer.Account,
			CompanyName: developer.CompanyName,
			TenantId:    developer.TenantId,
			DeveloperId: developer.DeveloperId,
		})
	}
	return &entitysObj
}
