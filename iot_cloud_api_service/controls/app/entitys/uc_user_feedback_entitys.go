// Code generated by sgen.exe,2022-05-18 23:26:55. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	services "cloud_platform/iot_cloud_api_service/controls/global"
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"strings"
)

// 增、删、改及查询返回
type UcUserFeedbackEntitys struct {
	Id               string   `json:"id"`
	UserId           string   `json:"userId"`
	QuestionTypeName string   `json:"typeName"`
	FeedbackTime     int64    `json:"findTime"`
	FeedbackContent  string   `json:"content"`
	Status           int32    `json:"status"`
	StatusName       string   `json:"statusName"`
	CreatedAt        int64    `json:"createdAt"`
	Pictures         []string `json:"pictures"` // 附件信息（图片、视频）
	Videos           []string `json:"videos"`
	Contact          string   `json:"contact"`
	Did              string   `json:"devId"`
	ProductKey       string   `json:"productKey"`
	ProductId        int64    `json:"productId,string"`
	ProductName      string   `json:"productName"`
	AppKey           string   `json:"appKey"`
	AppName          string   `json:"appName"`
}

type FollowUpRecord struct {
	Id        string `json:"id"`
	ReplyUser string `json:"ReplyUser"`
	ReplyTime int64  `json:"ReplyTime"`
	Content   string `json:"content"`
}

// 新增参数非空检查
func (s *UcUserFeedbackEntitys) AddCheck() error {
	return nil
}

// 修改参数非空检查
func (s *UcUserFeedbackEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*UcUserFeedbackQuery) QueryCheck() error {
	return nil
}

type UcUserFeedbackQuery2 struct {
	Page     int64                `json:"page"`
	Limit    int64                `json:"limit"`
	TenantId string               `json:"tenantId"`
	Query    UcUserFeedbackFilter `json:"query"`
}

type UcUserFeedbackQuery struct {
	Page     int64                `json:"page"`
	Limit    int64                `json:"limit"`
	TenantId string               `json:"tenantId"`
	Query    UcUserFeedbackFilter `json:"query"`
}

// UcUserFeedbackFilter，查询条件，字段请根据需要自行增减
type UcUserFeedbackFilter struct {
	AppKey        string `json:"appKey"`
	TypeId        int64  `json:"typeId"`
	ProductKey    string `json:"productKey"`
	TimeQueryMode int32  `json:"timeQueryMode"` //字典：time_query_mode 1= 全部 =2 最近一周 =3 最近一个月 =4 最近三个月
	Status        int32  `json:"status"`
}

// pb对象转实体
func UcUserFeedback_pb2e(src *proto.UcUserFeedback) *UcUserFeedbackEntitys {
	if src == nil {
		return &UcUserFeedbackEntitys{}
	}

	feedbackStatus, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_feedback_status)
	//feedbackType, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_feedback_type)
	entitysObj := &UcUserFeedbackEntitys{
		Id:              iotutil.ToString(src.Id),
		UserId:          iotutil.ToString(src.UserId),
		FeedbackTime:    src.FeedbackTime.AsTime().Unix(),
		FeedbackContent: src.FeedbackContent,
		Status:          src.Status,
		CreatedAt:       src.CreatedAt.AsTime().Unix(),
		Pictures:        strings.Split(src.Pictures, ","),
		Videos:          strings.Split(src.Videos, ","),
		Contact:         src.Contact,
		Did:             src.Did,
		ProductKey:      src.ProductKey,
		ProductId:       src.ProductId,
		ProductName:     "",
		AppName:         "",
		AppKey:          src.AppKey,
		StatusName:      feedbackStatus.Value(src.Status),
		//QuestionTypeName: feedbackType.Value(int32(src.QuestionTypeId)),
	}
	return entitysObj
}

// 反馈信息提交
type FeedbackReplySubmit struct {
	Content    string   `json:"content"`           // 回复内容
	FeedbackID int64    `json:"feedbackId,string"` // 反馈编号
	Pictures   []string `json:"pictures"`          // 图片
	Videos     []string `json:"videos"`            // 视频
	Operator   int64    `json:"operator"`          // 操作人（token自动获取）
}

// 反馈信息详情
type UcUserFeedbackDetails struct {
	Id               int64            `json:"id,string"`
	FeedbackContent  string           `json:"content"`
	FeedbackTime     int64            `json:"findtime"`
	CreatedTime      int64            `json:"createdTime"`
	Pictures         []string         `json:"pictures"`
	Videos           []string         `json:"videos"`
	QuestionTypeId   int64            `json:"typeId"`
	QuestionTypeName string           `json:"typeName"`
	Status           int32            `json:"status"`
	StatusName       string           `json:"statusName"`
	DeviceInfo       *DeviceInfoDto   `json:"deviceInfo"` //设备信息
	UserInfo         *UserInfoDto     `json:"userInfo"`   //用户信息
	AppInfo          *AppInfoDto      `json:"appInfo"`    //客户端信息
	ReplyList        []*ReplyListItem `json:"replyList"`  //回复列表
}

// 客户端信息
type AppInfoDto struct {
	AppName      string `json:"appName"`      // App名称
	AppVersion   string `json:"appVersion"`   // App版本
	MobileLang   string `json:"mobileLang"`   // 手机语言
	MobileModel  string `json:"mobileModel"`  // 手机型号
	MobileSystem string `json:"mobileSystem"` // 手机系统
}

// 问题设备信息
type DeviceInfoDto struct {
	DeviceID        string `json:"deviceId"`        // 设备ID
	DeviceName      string `json:"deviceName"`      // 设备名称
	FirmwareVersion string `json:"firmwareVersion"` // 固件版本
}

// 回复列表
type ReplyListItem struct {
	Content       string   `json:"content"`       // 反馈内容
	ID            string   `json:"id"`            // 反馈回复编号
	OperationTime int64    `json:"operationTime"` // 操作时间
	Operator      string   `json:"operator"`      // 操作人
	Pictures      []string `json:"pictures"`      // 图片
	Videos        []string `json:"videos"`        // 视频
}

// 用户信息
type UserInfoDto struct {
	NickName     string `json:"nickName"`     // 用户昵称
	Phone        string `json:"phone"`        // 用户联系方式
	RegisterTime int64  `json:"registerTime"` // 用户注册时间
	UserAccount  string `json:"userAccount"`  // 用户账号
}

// pb对象转实体
func UcUserFeedbackDetails_pb2e(src *proto.UcUserFeedbackDetailsResponse, nickName string) *UcUserFeedbackDetails {
	replyList := []*ReplyListItem{}
	for _, item := range src.ReplyList {
		replyList = append(replyList, &ReplyListItem{
			Content:       item.Content,
			ID:            item.Id,
			OperationTime: item.OperationTime,
			Operator:      nickName,
			Pictures:      strings.Split(item.Pictures, ","),
			Videos:        strings.Split(item.Videos, ","),
		})
	}
	feedbackStatus, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_feedback_status)
	//feedbackType, _ := new(services.DictTempData).GetDictByCode(iotconst.Dict_type_feedback_type)

	entitysObj := &UcUserFeedbackDetails{
		Id:               src.Data.Id,
		FeedbackContent:  src.Data.FeedbackContent,
		FeedbackTime:     src.Data.FeedbackTime.AsTime().Unix(),
		CreatedTime:      src.Data.CreatedAt.AsTime().Unix(),
		Pictures:         strings.Split(src.Data.Pictures, ","),
		Videos:           strings.Split(src.Data.Videos, ","),
		QuestionTypeId:   src.Data.QuestionTypeId,
		QuestionTypeName: src.Data.QuestionTypeName, // feedbackType.Value(int32(src.Data.QuestionTypeId)),
		Status:           src.Data.Status,
		StatusName:       feedbackStatus.Value(src.Data.Status),
		ReplyList:        replyList,
	}
	entitysObj.SetUserInfo(src.UserInfo)
	entitysObj.SetAppInfo(src.AppInfo)
	entitysObj.SetDeviceInfo(src.DeviceInfo)
	//设置联系方式
	if entitysObj.UserInfo != nil {
		entitysObj.UserInfo.Phone = src.Data.Contact
	}
	return entitysObj
}

func (s *UcUserFeedbackDetails) SetAppInfo(dto *proto.AppInfoDto) {
	s.AppInfo = &AppInfoDto{
		AppName:      dto.AppName,
		AppVersion:   dto.AppVersion,
		MobileLang:   dto.MobileLang,
		MobileModel:  dto.MobileModel,
		MobileSystem: dto.MobileSystem,
	}
}

func (s *UcUserFeedbackDetails) SetUserInfo(dto *proto.UserInfoDto) {
	s.UserInfo = &UserInfoDto{
		NickName:     dto.NickName,
		Phone:        dto.Phone,
		RegisterTime: dto.RegisterTime,
		UserAccount:  dto.UserAccount,
	}
}

func (s *UcUserFeedbackDetails) SetDeviceInfo(dto *proto.DeviceInfoDto) {
	s.DeviceInfo = &DeviceInfoDto{
		DeviceID:        dto.DeviceID,
		DeviceName:      dto.DeviceName,
		FirmwareVersion: dto.FirmwareVersion,
	}
}
