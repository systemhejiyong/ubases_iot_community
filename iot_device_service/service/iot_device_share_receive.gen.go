// Code generated by sgen.exe,2022-07-20 16:41:46. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_device_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_device/model"
	"cloud_platform/iot_model/db_device/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type IotDeviceShareReceiveSvc struct {
	Ctx context.Context
}

// 创建IotDeviceShareReceive
func (s *IotDeviceShareReceiveSvc) CreateIotDeviceShareReceive(req *proto.IotDeviceShareReceive) (*proto.IotDeviceShareReceive, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShareReceive
	do := t.WithContext(context.Background())
	dbObj := convert.IotDeviceShareReceive_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateIotDeviceShareReceive error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除IotDeviceShareReceive
func (s *IotDeviceShareReceiveSvc) DeleteIotDeviceShareReceive(req *proto.IotDeviceShareReceive) (*proto.IotDeviceShareReceive, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShareReceive
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.CustomName != "" { //字符串
		do = do.Where(t.CustomName.Eq(req.CustomName))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.Phone != "" { //字符串
		do = do.Where(t.Phone.Eq(req.Phone))
	}
	if req.Email != "" { //字符串
		do = do.Where(t.Email.Eq(req.Email))
	}
	if req.DeviceId != "" { //字符串
		do = do.Where(t.DeviceId.Eq(req.DeviceId))
	}
	if req.BelongUserId != 0 { //整数
		do = do.Where(t.BelongUserId.Eq(req.BelongUserId))
	}
	if req.HomeId != 0 { //整数
		do = do.Where(t.HomeId.Eq(req.HomeId))
	}
	if req.Photo != "" { //字符串
		do = do.Where(t.Photo.Eq(req.Photo))
	}
	if req.IsAgree != 0 { //整数
		do = do.Where(t.IsAgree.Eq(req.IsAgree))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteIotDeviceShareReceive error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除IotDeviceShareReceive
func (s *IotDeviceShareReceiveSvc) DeleteByIdIotDeviceShareReceive(req *proto.IotDeviceShareReceive) (*proto.IotDeviceShareReceive, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShareReceive
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdIotDeviceShareReceive error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除IotDeviceShareReceive
func (s *IotDeviceShareReceiveSvc) DeleteByIdsIotDeviceShareReceive(req *proto.IotDeviceShareReceiveBatchDeleteRequest) (*proto.IotDeviceShareReceiveBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TIotDeviceShareReceive
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsIotDeviceShareReceive error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新IotDeviceShareReceive
func (s *IotDeviceShareReceiveSvc) UpdateIotDeviceShareReceive(req *proto.IotDeviceShareReceive) (*proto.IotDeviceShareReceive, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShareReceive
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.CustomName != "" { //字符串
		updateField = append(updateField, t.CustomName)
	}
	if req.UserId != 0 { //整数
		updateField = append(updateField, t.UserId)
	}
	if req.Phone != "" { //字符串
		updateField = append(updateField, t.Phone)
	}
	if req.Email != "" { //字符串
		updateField = append(updateField, t.Email)
	}
	if req.DeviceId != "" { //字符串
		updateField = append(updateField, t.DeviceId)
	}
	if req.BelongUserId != 0 { //整数
		updateField = append(updateField, t.BelongUserId)
	}
	if req.HomeId != 0 { //整数
		updateField = append(updateField, t.HomeId)
	}
	if req.Photo != "" { //字符串
		updateField = append(updateField, t.Photo)
	}
	if req.IsAgree != 0 { //整数
		updateField = append(updateField, t.IsAgree)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateIotDeviceShareReceive error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.IotDeviceShareReceive_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateIotDeviceShareReceive error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段IotDeviceShareReceive
func (s *IotDeviceShareReceiveSvc) UpdateAllIotDeviceShareReceive(req *proto.IotDeviceShareReceive) (*proto.IotDeviceShareReceive, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShareReceive
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.CustomName)
	updateField = append(updateField, t.UserId)
	updateField = append(updateField, t.Phone)
	updateField = append(updateField, t.Email)
	updateField = append(updateField, t.DeviceId)
	updateField = append(updateField, t.BelongUserId)
	updateField = append(updateField, t.HomeId)
	updateField = append(updateField, t.Photo)
	updateField = append(updateField, t.IsAgree)
	updateField = append(updateField, t.SharedTime)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllIotDeviceShareReceive error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceShareReceive_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllIotDeviceShareReceive error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *IotDeviceShareReceiveSvc) UpdateFieldsIotDeviceShareReceive(req *proto.IotDeviceShareReceiveUpdateFieldsRequest) (*proto.IotDeviceShareReceive, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShareReceive
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsIotDeviceShareReceive error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsIotDeviceShareReceive error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceShareReceive_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsIotDeviceShareReceive error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找IotDeviceShareReceive
func (s *IotDeviceShareReceiveSvc) FindIotDeviceShareReceive(req *proto.IotDeviceShareReceiveFilter) (*proto.IotDeviceShareReceive, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShareReceive
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.CustomName != "" { //字符串
		do = do.Where(t.CustomName.Eq(req.CustomName))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.Phone != "" { //字符串
		do = do.Where(t.Phone.Eq(req.Phone))
	}
	if req.Email != "" { //字符串
		do = do.Where(t.Email.Eq(req.Email))
	}
	if req.DeviceId != "" { //字符串
		do = do.Where(t.DeviceId.Eq(req.DeviceId))
	}
	if req.BelongUserId != 0 { //整数
		do = do.Where(t.BelongUserId.Eq(req.BelongUserId))
	}
	if req.HomeId != 0 { //整数
		do = do.Where(t.HomeId.Eq(req.HomeId))
	}
	if req.Photo != "" { //字符串
		do = do.Where(t.Photo.Eq(req.Photo))
	}
	if req.IsAgree != 0 { //整数
		do = do.Where(t.IsAgree.Eq(req.IsAgree))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindIotDeviceShareReceive error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceShareReceive_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找IotDeviceShareReceive
func (s *IotDeviceShareReceiveSvc) FindByIdIotDeviceShareReceive(req *proto.IotDeviceShareReceiveFilter) (*proto.IotDeviceShareReceive, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShareReceive
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdIotDeviceShareReceive error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceShareReceive_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找IotDeviceShareReceive,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *IotDeviceShareReceiveSvc) GetListIotDeviceShareReceive(req *proto.IotDeviceShareReceiveListRequest) ([]*proto.IotDeviceShareReceive, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShareReceive
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.CustomName != "" { //字符串
			do = do.Where(t.CustomName.Like("%" + query.CustomName + "%"))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.Phone != "" { //字符串
			do = do.Where(t.Phone.Like("%" + query.Phone + "%"))
		}
		if query.Email != "" { //字符串
			do = do.Where(t.Email.Like("%" + query.Email + "%"))
		}
		if query.DeviceId != "" { //字符串
			do = do.Where(t.DeviceId.Like("%" + query.DeviceId + "%"))
		}
		if query.BelongUserId != 0 { //整数
			do = do.Where(t.BelongUserId.Eq(query.BelongUserId))
		}
		if query.HomeId != 0 { //整数
			do = do.Where(t.HomeId.Eq(query.HomeId))
		}
		if query.Photo != "" { //字符串
			do = do.Where(t.Photo.Like("%" + query.Photo + "%"))
		}
		if query.IsAgree != 0 { //整数
			do = do.Where(t.IsAgree.Eq(query.IsAgree))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TIotDeviceShareReceive
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListIotDeviceShareReceive error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.IotDeviceShareReceive, len(list))
	for i, v := range list {
		result[i] = convert.IotDeviceShareReceive_db2pb(v)
	}
	return result, total, nil
}
