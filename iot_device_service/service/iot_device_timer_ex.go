// Code generated by sgen.exe,2022-12-23 15:25:01. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/ioterrs"
	"context"
	"errors"
	goerrors "go-micro.dev/v4/errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_device_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_device/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type IotDeviceTimerSvcEx struct {
	Ctx context.Context
}

func (h *IotDeviceTimerSvcEx) StartIotDeviceTimerJob(ctx context.Context, req *proto.IotDeviceTimerJobReq) error {
	s := IotDeviceTimerSvcEx{Ctx: ctx}
	infoReq := &proto.IotDeviceTimerFilter{
		Id: req.Id,
	}
	jobInfo, err := s.FindByIdIotDeviceTimer(infoReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBDeviceGet)
	}
	if jobInfo.Enabled == 1 {
		return goerrors.New("", "倒计时任务已启动", ioterrs.ErrTimerAlreadyStarted)
	}
	// 调用job服务rpc接口
	reqJob := &proto.JobReq{
		Id: req.Id,
	}
	jobSvc := IotJobSvc{Ctx: s.Ctx}
	err = jobSvc.StartJob(ctx, reqJob)
	if err != nil {
		return err
	}
	repJob := &proto.IotDeviceTimer{
		Id:       req.Id,
		DaysMode: jobInfo.DaysMode,
		Weeks:    jobInfo.Weeks,
		Enabled:  1,
	}
	_, err = s.UpdateIotDeviceTimer(repJob)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerUpdate)
	}
	return nil
}

func (s *IotDeviceTimerSvcEx) StopIotDeviceTimerJob(req *proto.IotDeviceTimerJobReq) error {
	infoReq := &proto.IotDeviceTimerFilter{
		Id: req.Id,
	}
	jobInfo, err := s.FindByIdIotDeviceTimer(infoReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBDeviceGet)
	}
	if jobInfo.Enabled == 2 {
		return goerrors.New("", "倒计时任务已停止", ioterrs.ErrTimerAlreadyStopted)
	}
	// 调用job服务rpc接口
	reqJob := &proto.JobReq{
		Id: req.Id,
	}
	jobSvc := IotJobSvc{Ctx: s.Ctx}
	err = jobSvc.StopJob(s.Ctx, reqJob)
	if err != nil {
		return err
	}
	repJob := &proto.IotDeviceTimer{
		Id:       req.Id,
		DaysMode: jobInfo.DaysMode,
		Weeks:    jobInfo.Weeks,
		Enabled:  2,
	}
	_, err = s.UpdateIotDeviceTimer(repJob)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerUpdate)
	}
	return nil
}

// 根据主键更新IotDeviceTimer
func (s *IotDeviceTimerSvcEx) UpdateIotDeviceTimer(req *proto.IotDeviceTimer) (*proto.IotDeviceTimer, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceTimer
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Hour != "" { //字符串
		updateField = append(updateField, t.Hour)
	}
	if req.Minute != "" { //字符串
		updateField = append(updateField, t.Minute)
	}
	if req.DaysMode >= 0 { //整数
		updateField = append(updateField, t.DaysMode)
	}
	// if req.Weeks != "" {//字符串
	updateField = append(updateField, t.Weeks)
	// }
	if req.Remark != "" { //字符串
		updateField = append(updateField, t.Remark)
	}
	if req.FuncKey != "" { //字符串
		updateField = append(updateField, t.FuncKey)
	}
	if req.FuncValue != "" { //字符串
		updateField = append(updateField, t.FuncValue)
	}
	if req.UserId != 0 { //整数
		updateField = append(updateField, t.UserId)
	}
	if req.DeviceId != "" { //字符串
		updateField = append(updateField, t.DeviceId)
	}
	if req.Enabled != 0 { //整数
		updateField = append(updateField, t.Enabled)
	}
	if req.Cron != "" { //字符串
		updateField = append(updateField, t.Cron)
	}
	if req.TaskId != "" { //字符串
		updateField = append(updateField, t.TaskId)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if req.Functions != "" { //字符串
		updateField = append(updateField, t.Functions)
	}
	if req.Name != "" { //字符串
		updateField = append(updateField, t.Name)
	}
	if req.EndHour != "" { //字符串
		updateField = append(updateField, t.EndHour)
	}
	if req.EndMinute != "" { //字符串
		updateField = append(updateField, t.EndMinute)
	}
	if req.EndCron != "" { //字符串
		updateField = append(updateField, t.EndCron)
	}
	if req.FirstTime != nil {
		updateField = append(updateField, t.FirstTime)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateIotDeviceTimer error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.IotDeviceTimer_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateIotDeviceTimer error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键查找IotDeviceTimer
func (s *IotDeviceTimerSvcEx) FindByIdIotDeviceTimer(req *proto.IotDeviceTimerFilter) (*proto.IotDeviceTimer, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceTimer
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdIotDeviceTimer error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceTimer_db2pb(dbObj)
	return res, err
}
