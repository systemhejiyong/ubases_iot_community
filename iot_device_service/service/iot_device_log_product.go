// Code generated by sgen.exe,2022-08-18 08:44:03. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_cloud_api_service/controls/open/entitys"
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotlogger"
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_common/iotstruct"
	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_device_service/config"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_device/model"
	"cloud_platform/iot_model/db_device/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"context"
	"errors"
	"fmt"
	"strconv"
	"strings"
	"time"
)

type IotDeviceLogProductSvc struct {
	Ctx context.Context
}

// 字段类型转换
func fieldTypeConvert(typeStr string) string {
	dbType := "Nullable(String)"
	switch typeStr {
	case "BOOL":
		dbType = "Nullable(Bool)"
	case "ENUM":
		dbType = "Nullable(Int32)"
	case "DOUBLE":
		dbType = "Nullable(Float64)"
	case "INT":
		dbType = "Nullable(Int64)"
	case "TEXT":
		dbType = "Nullable(String)"
	default:
		dbType = "Nullable(String)"
	}
	return dbType
}

// CreateLogTable 重新创建数据库表
func (s *IotDeviceLogProductSvc) CreateLogTable(req *proto.CreateProductLogTableResponse) error {
	var db, ok = config.DBMap["iot_log"]
	if !ok {
		return errors.New("数据库未初始化")
	}
	tableName := fmt.Sprintf("iot_device_log_%s", req.ProductKey)
	//if db.Migrator().HasTable(tableName) {
	//	return errors.New("数据库表已存在，" + tableName)
	//}
	sqlBuilder := strings.Builder{}
	//TODO 物模型判断更新，暂时屏蔽，采用每次重新生成
	//alter table iot_device_log_ecfeZh6v  add column IF NOT EXISTS filter_days2       Int64 DEFAULT 0 COMMENT '备注';
	//var tableCount int64
	//existsTx := db.Raw("SHOW TABLES FROM iot_log LIKE '" + tableName + "'").Count(&tableCount)
	//if existsTx.Error != nil {
	//	return errors.New("SHOW TABLES FROM iot_log Error " + existsTx.Error.Error())
	//}
	//if tableCount > 0 {
	//	//TODO 表已经存在,则更新，是否考虑删除历史字段；
	//	sqlBuilder.WriteString("alter table " + tableName)
	//	autoFields := strings.Builder{}
	//	for f, typeStr := range req.ThingModels {
	//		autoFields.WriteString(fmt.Sprintf("   add column IF NOT EXISTS %s %s,", f, fieldTypeConvert(typeStr)))
	//	}
	//	autoFields.WriteString(fmt.Sprintf("   add column IF NOT EXISTS updated_at DateTime64(3);"))
	//	return nil
	//} else {
	sqlBuilder.WriteString("create table " + tableName)
	sqlBuilder.WriteString("(")
	sqlBuilder.WriteString("    id            String,")
	//sqlBuilder.WriteString("    product_id   Int64,")
	sqlBuilder.WriteString("    product_key   String,")
	sqlBuilder.WriteString("    device_id     String,")
	sqlBuilder.WriteString("    ver        	String,")
	sqlBuilder.WriteString("    ns        	String,")
	sqlBuilder.WriteString("    name         String,")
	sqlBuilder.WriteString("    gid 			String,")
	sqlBuilder.WriteString("    from 		String,")
	sqlBuilder.WriteString("    " + iotconst.FIELD_ONLINE + " 		String,")
	sqlBuilder.WriteString("    startTs    	DateTime64(3),")
	sqlBuilder.WriteString("    endTs    	Nullable(DateTime64(3)),")
	sqlBuilder.WriteString("    controls 	String,") //控制内容集合

	autoFields := strings.Builder{}
	for f, typeStr := range req.ThingModels {
		autoFields.WriteString(fmt.Sprintf("    %s    	%s,", f, fieldTypeConvert(typeStr)))
	}
	sqlBuilder.WriteString(autoFields.String())

	sqlBuilder.WriteString("    updated_at    	Nullable(DateTime64(3)),")
	sqlBuilder.WriteString("    created_at    	DateTime64(3),")
	sqlBuilder.WriteString("    code    	Nullable(Int32) ")
	sqlBuilder.WriteString(")")
	sqlBuilder.WriteString("engine = MergeTree ORDER BY tuple()")
	sqlBuilder.WriteString("SETTINGS index_granularity = 8192;")
	//}

	tx := db.Exec(fmt.Sprintf("DROP TABLE IF EXISTS %s", tableName))
	if tx.Error != nil {
		//记录一下错误
		iotlogger.LogHelper.Error("CreateLogTable error ", tx.Error.Error())
	}

	tx = db.Exec(sqlBuilder.String())
	if tx.Error != nil {
		iotlogger.LogHelper.Error("CreateLogTable error ", tx.Error.Error())
		return tx.Error
	}
	return nil
}

// 查询设备日志（统计记录）
func (s *IotDeviceLogProductSvc) QueryDeviceLogs(request *proto.ProductLogRequest) ([]*proto.ProductEventLogItem, error) {
	var db, ok = config.DBMap["iot_log"]
	if !ok {
		return nil, errors.New("数据库未初始化")
	}
	//if request.ProductId == 0 {
	//	return nil, errors.New("产品Id不能为空")
	//}
	if request.DeviceId == "" {
		return nil, errors.New("设备Id不能为空")
	}
	var (
		deviceId   string = request.DeviceId
		productKey string = request.ProductKey
		tz                = iotutil.GetTimeLocation(request.Timezone)
		//productId  string = iotutil.ToString(request.ProductId)
	)

	rdCmd := iotredis.GetClient().HGetAll(context.Background(), iotconst.HKEY_PRODUCT_DATA+productKey)
	if rdCmd.Err() != nil {
		return nil, rdCmd.Err()
	}
	tlsMap := map[string]map[string]interface{}{}
	for k, v := range rdCmd.Val() {
		if strings.Index(k, iotconst.FIELD_PREFIX_TLS) == -1 {
			continue
		}
		var tlsInfo map[string]interface{}
		err := json.Unmarshal([]byte(v), &tlsInfo)
		if err != nil || tlsInfo == nil {
			continue
		}
		identifier := iotutil.ToString(tlsInfo["identifier"])
		//name := iotutil.ToString(tlsInfo["name"])
		tlsMap[identifier] = tlsInfo
	}

	tableName := fmt.Sprintf("iot_device_log_%s", productKey)
	if !db.Migrator().HasTable(tableName) {
		return nil, fmt.Errorf("Table %s doesn't exist.", tableName)
	}

	sqlBuilder := strings.Builder{}
	//alter table t_iot_log_app_records update event_name='测试' where id='4765245804501893120'
	sqlBuilder.WriteString(" select * from ")
	sqlBuilder.WriteString(tableName)
	sqlBuilder.WriteString(" where ")
	sqlBuilder.WriteString(" device_id = ? ")

	params := []interface{}{}
	params = append(params, deviceId)
	if request.TimeRange != nil && len(request.TimeRange) == 2 {
		if request.TimeRange[0] != 0 && request.TimeRange[1] != 0 {
			sqlBuilder.WriteString(" and created_at between ? and ?")
			params = append(params, time.Unix(request.TimeRange[0], 0))
			params = append(params, time.Unix(request.TimeRange[1], 0))
		}
	}
	if !iotutil.IsEmpty(request.Identifier) {
		sqlBuilder.WriteString(" and controls like ?")
		params = append(params, "%"+request.Identifier+",%")
	}
	if !iotutil.IsEmpty(request.Ns) {
		sqlBuilder.WriteString(" and ns = ?")
		params = append(params, request.Ns)
	}
	if !iotutil.IsEmpty(request.Name) {
		sqlBuilder.WriteString(" and name = ?")
		params = append(params, request.Name)
	}
	//上报下发属性
	//Identifier 事件名称
	//事件来源
	sqlBuilder.WriteString(" order by created_at desc ")

	rows, _ := db.Raw(sqlBuilder.String(), params...).Rows()
	cols, _ := rows.Columns()

	var newList []*proto.ProductEventLogItem
	for rows.Next() {
		columns := make([]interface{}, len(cols))
		columnPoints := make([]interface{}, len(cols))
		for i, _ := range columns {
			columnPoints[i] = &columns[i]
		}
		if err := rows.Scan(columnPoints...); err != nil {
			return nil, err
		}
		m := make(map[string]interface{})
		for i, col := range cols {
			val := columnPoints[i].(*interface{})
			m[col] = *val
		}

		time, _ := m["created_at"].(time.Time)
		time = time.In(tz) //将时间转换为客户的时间
		item := new(proto.ProductEventLogItem)
		item.Date = iotutil.TimeFormat(time)
		item.Time = iotutil.DateTimeFormat(time)
		item.FullTime = time.Unix()
		item.From = iotutil.ToString(m["from"])
		item.Name = iotutil.ToString(m["name"])

		item.OnlineStatus = iotutil.ToString(m[iotconst.FIELD_ONLINE])
		item.Properties = make([]*proto.ProductLogEventProperties, 0)
		if m["controls"] == iotconst.FIELD_ONLINE {
			continue
		}

		for col, val := range m {
			//control上报的属性名称
			if col != "controls" {
				continue
			}
			//control上报的属性名称
			strVal := val.(string)
			if strVal == "" {
				continue
			}

			controls := strings.Split(strVal, ",")
			for _, control := range controls {
				if control == "" {
					continue
				}
				if propertyVal, ok := m[control]; ok {
					property := tlsMap[control]
					item.Properties = append(item.Properties, &proto.ProductLogEventProperties{
						Dpid:       iotutil.ToString(property["dpid"]),
						Value:      iotutil.ToString(propertyVal),
						Identifier: control,
						Name:       iotutil.ToString(property["name"]),
					})
				}
			}
		}
		newList = append(newList, item)
	}
	return newList, nil
}

// 查询设备日志，列表记录
func (s *IotDeviceLogProductSvc) QueryDeviceLogRecord(request *proto.ProductLogRequest) ([]*proto.ProductLogRecord, error) {
	var db, ok = config.DBMap["iot_log"]
	if !ok {
		return nil, errors.New("数据库未初始化")
	}
	if request.DeviceId == "" {
		return nil, errors.New("设备Id不能为空")
	}
	var (
		deviceId   string = request.DeviceId
		productKey string = request.ProductKey
	)

	rdCmd := iotredis.GetClient().HGetAll(context.Background(), iotconst.HKEY_PRODUCT_DATA+productKey)
	if rdCmd.Err() != nil {
		return nil, rdCmd.Err()
	}
	tlsMap := map[string]map[string]interface{}{}
	for k, v := range rdCmd.Val() {
		if strings.Index(k, iotconst.FIELD_PREFIX_TLS) == -1 {
			continue
		}
		var tlsInfo map[string]interface{}
		err := json.Unmarshal([]byte(v), &tlsInfo)
		if err != nil || tlsInfo == nil {
			continue
		}
		identifier := iotutil.ToString(tlsInfo["identifier"])
		//name := iotutil.ToString(tlsInfo["name"])
		tlsMap[identifier] = tlsInfo
	}

	tableName := fmt.Sprintf("iot_device_log_%s", productKey)
	if !db.Migrator().HasTable(tableName) {
		return nil, fmt.Errorf("Table %s doesn't exist.", tableName)
	}

	sqlBuilder := strings.Builder{}
	//alter table t_iot_log_app_records update event_name='测试' where id='4765245804501893120'
	sqlBuilder.WriteString(" select * from ")
	sqlBuilder.WriteString(tableName)
	sqlBuilder.WriteString(" where ")
	sqlBuilder.WriteString(" device_id = ? ")

	params := []interface{}{}
	params = append(params, deviceId)
	if request.TimeRange != nil && len(request.TimeRange) == 2 {
		if request.TimeRange[0] != 0 && request.TimeRange[1] != 0 {
			sqlBuilder.WriteString(" and created_at between ? and ?")
			params = append(params, time.Unix(request.TimeRange[0], 0))
			params = append(params, time.Unix(request.TimeRange[1], 0))
		}
	}
	if !iotutil.IsEmpty(request.Identifier) {
		sqlBuilder.WriteString(" and controls like ?")
		params = append(params, "%"+request.Identifier+",%")
	}
	if !iotutil.IsEmpty(request.Ns) {
		sqlBuilder.WriteString(" and ns = ?")
		params = append(params, request.Ns)
	}
	if !iotutil.IsEmpty(request.Name) {
		sqlBuilder.WriteString(" and name = ?")
		params = append(params, request.Name)
	}

	switch request.Origin {
	case 1: //设备本身
		sqlBuilder.WriteString(" and `from`=?")
		params = append(params, "device")
	case 2: //其它设备
		sqlBuilder.WriteString(" and `from`<> ? and `from`<> ?")
		params = append(params, "device")
		params = append(params, "app")
	case 3: //客户端
		sqlBuilder.WriteString(" and `from`= ?")
		params = append(params, "app")
	}

	//上报下发属性
	//Identifier 事件名称
	//事件来源
	sqlBuilder.WriteString(" order by created_at desc ")

	rows, _ := db.Raw(sqlBuilder.String(), params...).Rows()
	cols, _ := rows.Columns()

	var newList []*proto.ProductLogRecord
	for rows.Next() {
		columns := make([]interface{}, len(cols))
		columnPoints := make([]interface{}, len(cols))
		for i, _ := range columns {
			columnPoints[i] = &columns[i]
		}
		if err := rows.Scan(columnPoints...); err != nil {
			return nil, err
		}
		m := make(map[string]interface{})
		for i, col := range cols {
			val := columnPoints[i].(*interface{})
			m[col] = *val
		}

		createdAt, _ := m["created_at"].(time.Time)
		item := new(proto.ProductLogRecord)
		item.CreatedAt = createdAt.Unix()
		item.MsgId = iotutil.ToString(m["id"])
		item.Did = iotutil.ToString(m["device_id"])
		item.ProductKey = iotutil.ToString(m["product_key"])
		item.Ver = iotutil.ToString(m["ver"])
		item.Ns = iotutil.ToString(m["ns"])
		item.EventType = iotutil.ToString(m["name"])
		item.From = iotutil.ToString(m["from"])
		item.OnlineStatus = iotutil.ToString(m[iotconst.FIELD_ONLINE])
		item.Properties = make([]*proto.ProductLogEventProperties, 0)
		if m["controls"] == iotconst.FIELD_ONLINE {
			continue
		}
		for col, val := range m {
			//control上报的属性名称
			if col != "controls" {
				continue
			}
			//control上报的属性名称
			strVal := val.(string)
			if strVal == "" {
				continue
			}
			controls := strings.Split(strVal, ",")
			for _, control := range controls {
				if control == "" {
					continue
				}
				if propertyVal, ok := m[control]; ok {
					property := tlsMap[control]
					item.Properties = append(item.Properties, &proto.ProductLogEventProperties{
						Dpid:       iotutil.ToString(property["dpid"]),
						Value:      iotutil.ToString(propertyVal),
						Identifier: control,
						Name:       iotutil.ToString(property["name"]),
					})
				}
			}
		}
		newList = append(newList, item)
	}
	return newList, nil
}

// UpdateLogTable 建议重新生成，调用CreateLogTable
func (s *IotDeviceLogProductSvc) UpdateLogTable(req *proto.CreateProductLogTableResponse) error {
	//var db, ok = config.DBMap["iot_log"]
	//if !ok {
	//	return errors.New("数据库未初始化")
	//}
	return nil
}

// ReportControl
func (s *IotDeviceLogProductSvc) ReportControl(natsData *iotstruct.MqttToNatsData, deviceId, productId string,
	payload map[string]interface{}) error {
	var db, ok = config.DBMap["iot_log"]
	if !ok {
		return errors.New("数据库未初始化")
	}
	params := []interface{}{}
	params = append(params, natsData.MID)
	params = append(params, natsData.ProductKey)
	params = append(params, deviceId)
	params = append(params, natsData.Ver)
	params = append(params, natsData.Ns)
	params = append(params, natsData.Name)
	params = append(params, natsData.Gid)
	params = append(params, time.Unix(natsData.Time, 0))
	params = append(params, natsData.From)
	columnsSql := strings.Builder{}
	valSql := strings.Builder{}
	//dpid 转换 identifier
	rdCmd := iotredis.GetClient().HGetAll(context.Background(), iotconst.HKEY_PRODUCT_DATA+natsData.ProductKey)
	if rdCmd.Err() != nil {
		return rdCmd.Err()
	}
	var controls []string
	for key, val := range payload {
		tlsStr := rdCmd.Val()[iotconst.FIELD_PREFIX_TLS+key]
		var tlsInfo map[string]interface{}
		err := json.Unmarshal([]byte(tlsStr), &tlsInfo)
		if err != nil || tlsInfo == nil {
			continue
		}
		identifier := iotutil.ToString(tlsInfo["identifier"])
		columnsSql.WriteString(identifier + ",")
		valSql.WriteString("?,")
		params = append(params, val)
		controls = append(controls, identifier)
	}

	if len(controls) == 0 {
		return errors.New("未匹配到物模型, payload: " + iotutil.ToString(payload))
	}

	tableName := fmt.Sprintf("iot_device_log_%s", natsData.ProductKey)
	if !db.Migrator().HasTable(tableName) {
		return fmt.Errorf("Table %s doesn't exist.", tableName)
	}

	//if valSql.String() == "" {
	//	return errors.New("无任何属性设置")
	//}
	sqlBuilder := strings.Builder{}
	//alter table t_iot_log_app_records update event_name='测试' where id='4765245804501893120'
	sqlBuilder.WriteString(" INSERT INTO " + tableName)
	sqlBuilder.WriteString(" (id, product_key, device_id, ver, ns, name, gid, startTs,from, ")
	sqlBuilder.WriteString(columnsSql.String())
	sqlBuilder.WriteString("created_at, controls)")
	sqlBuilder.WriteString(" VALUES ")
	sqlBuilder.WriteString(fmt.Sprintf(" (?, ?, ?, ?, ?, ?, ?, ?, ?, "))
	sqlBuilder.WriteString(valSql.String())
	controlStr := ""
	if len(controls) > 0 {
		controlStr = strings.Join(controls, ",") + ","
	}
	sqlBuilder.WriteString("?, ?)")
	params = append(params, time.Now())
	params = append(params, controlStr) //controls 本次上报的内容（用于查询）

	tx := db.Exec(sqlBuilder.String(), params...)
	if tx.Error != nil {
		iotlogger.LogHelper.Errorf("ReportControl error : %s", tx.Error.Error())
		return tx.Error
	}
	return nil
}

// ReportControl
func (s *IotDeviceLogProductSvc) ReportOnline(natsData *iotstruct.MqttToNatsData, deviceId, onlineStatus string) error {
	var db, ok = config.DBMap["iot_log"]
	if !ok {
		return errors.New("数据库未初始化")
	}
	tableName := fmt.Sprintf("iot_device_log_%s", natsData.ProductKey)
	if !db.Migrator().HasTable(tableName) {
		return fmt.Errorf("Table %s doesn't exist.", tableName)
	}
	params := []interface{}{}
	params = append(params, natsData.MID)
	params = append(params, natsData.ProductKey)
	params = append(params, deviceId)
	params = append(params, natsData.Ver)
	params = append(params, natsData.Ns)
	params = append(params, natsData.Name)
	params = append(params, natsData.Gid)
	params = append(params, time.Unix(natsData.Time, 0))
	params = append(params, natsData.From)
	params = append(params, time.Now())
	params = append(params, iotconst.FIELD_ONLINE)
	params = append(params, onlineStatus)
	sqlBuilder := strings.Builder{}
	//alter table t_iot_log_app_records update event_name='测试' where id='4765245804501893120'
	sqlBuilder.WriteString(" INSERT INTO " + tableName)
	sqlBuilder.WriteString(" (id, product_key, device_id, ver, ns, name, gid, startTs,from,created_at, controls, onlineStatus)")
	sqlBuilder.WriteString(" VALUES ")
	sqlBuilder.WriteString(fmt.Sprintf(" (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"))
	params = append(params, time.Now())

	tx := db.Exec(sqlBuilder.String(), params...)
	if tx.Error != nil {
		iotlogger.LogHelper.Errorf("ReportControl error : %s", tx.Error.Error())
		return tx.Error
	}
	return nil
}

// FindReportLog 通过Id查询上报日志记录
func (s *IotDeviceLogProductSvc) FindReportLog(mId string, productKey string) (int64, error) {
	var db, ok = config.DBMap["iot_log"]
	if !ok {
		return 0, errors.New("数据库未初始化")
	}
	if mId == "" {
		return 0, errors.New("设备Id不能为空")
	}
	tableName := fmt.Sprintf("iot_device_log_%s", productKey)
	if !db.Migrator().HasTable(tableName) {
		return 0, fmt.Errorf("Table %s doesn't exist.", tableName)
	}
	sqlBuilder := strings.Builder{}
	sqlBuilder.WriteString(" select * from ")
	sqlBuilder.WriteString(tableName)
	sqlBuilder.WriteString(" where ")
	sqlBuilder.WriteString(" id = ? ")
	params := []interface{}{}
	params = append(params, mId)
	var count int64
	tx := db.Table(tableName).Where("id = ?", mId).Count(&count)
	//tx := db.Raw(sqlBuilder.String(), params...).Count(&count)
	if tx.Error != nil {
		return 0, tx.Error
	}
	return count, nil
}

// ReportControlAck
func (s *IotDeviceLogProductSvc) ReportControlAck(natsData *iotstruct.MqttToNatsData, deviceId, productKey string,
	payload map[string]interface{}) error {
	var db, ok = config.DBMap["iot_log"]
	if !ok {
		return errors.New("数据库未初始化")
	}
	tableName := fmt.Sprintf("iot_device_log_%s", productKey)
	if !db.Migrator().HasTable(tableName) {
		return fmt.Errorf("Table %s doesn't exist.", tableName)
	}
	params := []interface{}{}
	sqlBuilder := strings.Builder{}
	//alter table t_iot_log_app_records update event_name='测试' where id='4765245804501893120'
	sqlBuilder.WriteString(" alter table " + tableName)
	sqlBuilder.WriteString(" update code = ?, updated_at = ?, endTs = ? where id = ? ")
	params = append(params, payload["code"])
	params = append(params, time.Now())
	params = append(params, time.Unix(natsData.Time, 0))
	params = append(params, natsData.MID)

	tx := db.Exec(sqlBuilder.String(), params...)
	if tx.Error != nil {
		iotlogger.LogHelper.Errorf("ReportControlAck error : %s", tx.Error.Error())
		return tx.Error
	}
	return nil
}

// 查询设备日志（统计记录）
func (s *IotDeviceLogProductSvc) SaveDeviceOperationFailLog(request *proto.DeviceOperationFailLogRequest) error {
	var db, ok = config.DBMap["iot_log"]
	if !ok {
		return errors.New("数据库未初始化")
	}
	if request.DeviceId == "" {
		return errors.New("设备Id不能为空")
	}
	params := []interface{}{}
	params = append(params, iotutil.GetNextSeqInt64())
	params = append(params, request.DeviceId)
	params = append(params, request.Type)
	params = append(params, request.Content)
	params = append(params, request.UserAccount)
	params = append(params, request.UserId)
	params = append(params, request.TenantId)
	params = append(params, request.AppKey)
	params = append(params, time.Now().Unix())
	sqlBuilder := strings.Builder{}
	sqlBuilder.WriteString(" INSERT INTO iot_device_operation_fail_log ")
	sqlBuilder.WriteString(" (id, device_id, type, content, user_account, user_id, tenant_id, app_key, created_at)")
	sqlBuilder.WriteString(" VALUES (?, ?, ?, ?, ?, ?, ?, ?, ? )")
	tx := db.Exec(sqlBuilder.String(), params...)
	if tx.Error != nil {
		iotlogger.LogHelper.Errorf("ReportControl error : %s", tx.Error.Error())
		return tx.Error
	}
	return nil
}

// 查询设备日志（统计记录）
func (s *IotDeviceLogProductSvc) SaveOperationFailLog(request *proto.OperationFailLogRequest) error {
	var db, ok = config.DBMap["iot_log"]
	if !ok {
		return errors.New("数据库未初始化")
	}
	rows := buildRows(request.Data)
	for _, v := range rows {
		sqlBuilder := strings.Builder{}
		sqlBuilder.WriteString(" INSERT INTO iot_device_operation_fail_log_ex ")
		sqlBuilder.WriteString(" (id,device_id,`type`,content,user_account,user_id," +
			"tenant_id,app_key,created_at,product_key,code,timezone,region,lang,os,model,version,desc,upload_from,upload_method)")
		sqlBuilder.WriteString(" VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )")
		err := db.Exec(sqlBuilder.String(), v...).Error
		if err != nil { //如果失败，请检查buildRows的字段个数是否等于上边?的个数
			iotlogger.LogHelper.Errorf("ReportControl error : %s", err.Error())
			return err
		}
	}
	return nil
}

// 构建iot_device_operation_fail_log_ex表行
func buildRows(data []*proto.DeviceOperationFailLogRequestEx) [][]interface{} {
	var rows [][]interface{}
	var sysinfo SystemInfo
	if len(data) > 0 { //app api调用，1次调用上传多条故障信息，sysinfo相同
		sysinfo = GetSystemInfo(data[0].Sysinfo)
	}
	for _, v := range data {
		row := []interface{}{}
		row = append(row, iotutil.GetNextSeqInt64())
		row = append(row, v.DeviceId)
		row = append(row, v.Type)
		row = append(row, v.Content)
		row = append(row, v.UserAccount)
		row = append(row, v.UserId)
		row = append(row, v.TenantId)
		row = append(row, v.AppKey)
		row = append(row, time.Unix(v.FailTime, 0).Format("2006-01-02 15:04:05"))
		row = append(row, v.ProductKey)
		row = append(row, v.Code)
		row = append(row, v.Timezone)
		row = append(row, v.Region)
		row = append(row, v.Lang)
		row = append(row, sysinfo.Os)
		row = append(row, sysinfo.Model)
		row = append(row, sysinfo.Version)
		row = append(row, config.FaultConfig.GetValue(v.Code))
		row = append(row, v.UploadFrom)
		row = append(row, v.UploadMethod)
		rows = append(rows, row)
	}
	return rows
}

func (s *IotDeviceLogProductSvc) FailLogLists(request *proto.DeviceOperationFailLogListRequest) ([]*proto.DeviceOperationFailLogListResponseObj, int64, error) {
	var db, ok = config.DBMap["iot_log"]
	if !ok {
		return nil, 0, errors.New("数据库未初始化")
	}
	sqlBuildSelect := strings.Builder{}
	sqlBuild := strings.Builder{}
	params := []interface{}{}
	sqlBuildSelect.WriteString("SELECT id,device_id,`type`,content,user_account,user_id," +
		"tenant_id,app_key,created_at,product_key,code,timezone,region,lang,os,model,version,desc,upload_from,upload_method FROM iot_device_operation_fail_log_ex t WHERE 1=1 ")
	searchKey := strings.TrimSpace(request.SearchKey)
	if searchKey != "" {
		sqlBuild.WriteString(fmt.Sprintf(" AND t.desc like '%%%s%%' ", searchKey))
	}
	if request.Query != nil {
		did := strings.TrimSpace(request.Query.Did)
		if did != "" {
			sqlBuild.WriteString(" AND t.device_id = ? ")
			params = append(params, did)
		}
		product_key := strings.TrimSpace(request.Query.ProductKey)
		if product_key != "" {
			sqlBuild.WriteString(" AND t.product_key = ? ")
			params = append(params, product_key)
		}
		code := request.Query.Code
		if code != "" && code != "0" {
			if nCode, err := strconv.Atoi(code); err == nil {
				sqlBuild.WriteString(" AND t.code = ? ")
				params = append(params, nCode)
			}
		}
		var start time.Time
		var end time.Time
		if request.Query.StartTime > 0 || request.Query.EndTime > 0 {
			if request.Query.StartTime > 0 {
				start = time.Unix(request.Query.StartTime, 0)
			} else {
				start = GetStartTime(2)
			}
			if request.Query.EndTime > 0 && request.Query.EndTime > request.Query.StartTime {
				end = time.Unix(request.Query.EndTime, 0)
			} else {
				end = iotutil.New(time.Now()).EndOfDay()
			}
		} else {
			start = GetStartTime(2)
			end = iotutil.New(time.Now()).EndOfDay()

		}
		sqlBuild.WriteString(" AND t.created_at BETWEEN ? AND ? ")
		params = append(params, start.Format("2006-01-02 15:04:05"), end.Format("2006-01-02 15:04:05"))

		upload_from := strings.TrimSpace(request.Query.UploadFrom)
		if upload_from != "" {
			sqlBuild.WriteString(" AND t.upload_from = ? ")
			params = append(params, upload_from)
		}
		upload_method := strings.TrimSpace(request.Query.UploadMethod)
		if upload_method != "" {
			sqlBuild.WriteString(" AND t.upload_method = ? ")
			params = append(params, upload_method)
		}
	}
	var count int64
	sqlBuildSelectCount := "SELECT count(t.id) FROM iot_device_operation_fail_log_ex t WHERE 1=1"
	err := db.Raw(sqlBuildSelectCount+sqlBuild.String(), params...).Scan(&count).Error
	if err != nil {
		return nil, 0, err
	}
	if count == 0 {
		return nil, 0, nil
	}
	//ORDER BY `t_uc_user`.`created_at` DESC LIMIT 10 OFFSET 10
	orderKey := strings.TrimSpace(request.OrderKey)
	orderDesc := strings.TrimSpace(request.OrderDesc)
	if orderKey == "" {
		orderKey = "created_at"
	}
	if orderDesc == "" {
		orderDesc = "DESC"
	}
	sqlBuild.WriteString(fmt.Sprintf(" ORDER BY t.%s  %s  ", orderKey, orderDesc))

	//分页查询
	if request.PageSize > 0 {
		limit := request.PageSize
		if request.Page == 0 {
			request.Page = 1
		}
		offset := request.PageSize * (request.Page - 1)
		sqlBuild.WriteString(" LIMIT ? OFFSET ?")
		params = append(params, limit, offset)
	}
	rows, err := db.Raw(sqlBuildSelect.String()+sqlBuild.String(), params...).Rows()
	if err != nil { //如果失败，请检查buildRows的字段个数是否等于上边?的个数
		return nil, 0, err
	}
	defer rows.Close()

	var ret []*proto.DeviceOperationFailLogListResponseObj
	var obj DeviceOperationFailLogListModel
	for rows.Next() {
		err = db.ScanRows(rows, &obj)
		if err != nil {
			return nil, 0, err
		}
		ret = append(ret, DeviceOperationFailLogListObj_e2pb(&obj))
	}
	return ret, count, nil
}

// 删除设备日志
func (s *IotDeviceLogProductSvc) DeferClearDeviceLogs(request *proto.ProductLogRequest) error {
	defer iotutil.PanicHandler(&request)
	return s.ClearDeviceLogs(request)
}

// 删除设备日志
func (s *IotDeviceLogProductSvc) ClearDeviceLogs(request *proto.ProductLogRequest) error {
	var db, ok = config.DBMap["iot_log"]
	if !ok {
		return errors.New("数据库未初始化")
	}
	if request.DeviceId == "" {
		return errors.New("设备Id不能为空")
	}
	if request.ProductKey == "" {
		return errors.New("产品Key不能为空")
	}
	var (
		deviceId   string = request.DeviceId
		productKey string = request.ProductKey
	)
	tableName := fmt.Sprintf("iot_device_log_%s", productKey)
	if !db.Migrator().HasTable(tableName) {
		return fmt.Errorf("Table %s doesn't exist.", tableName)
	}

	sqlBuilder := strings.Builder{}
	sqlBuilder.WriteString(" ALTER TABLE ")
	sqlBuilder.WriteString(tableName)
	sqlBuilder.WriteString(" DELETE WHERE  device_id = ? ")

	params := []interface{}{}
	params = append(params, deviceId)
	tx := db.Exec(sqlBuilder.String(), params...)
	if tx.Error != nil {
		return tx.Error
	}
	return nil
}

type SystemInfo struct {
	Os      string
	Model   string
	Version string
}

func GetSystemInfo(sysinfo string) SystemInfo {
	var ret SystemInfo
	sysArrs := strings.Split(sysinfo, ",")
	for i, v := range sysArrs {
		if i == 0 {
			ret.Os = v
		} else if i == 1 {
			ret.Model = v
		} else if i == 2 {
			ret.Version = v
		}
	}
	return ret
}

type DeviceOperationFailLogListModel struct {
	Id           string
	DeviceId     string //设备Id
	Type         int32  //类型 1-配网 2-OTA升级
	Content      string //上报内容
	UserAccount  string //用户账号
	UserId       string //用户Id
	TenantId     string //租户编号
	AppKey       string //APP Key
	CreatedAt    time.Time
	ProductKey   string //产品key
	Code         int32  //错误码
	Timezone     string //用户app 时区
	Region       string //用户app 登录的区域，区域id
	Lang         string //用户app app语言
	Os           string //操作系统
	Model        string //手机型号
	AppVersion   string //app版本
	Desc         string
	UploadFrom   string //上报端 app\device\broker
	UploadMethod string //上报方式 http\mqtt
}

func DeviceOperationFailLogListObj_e2pb(src *DeviceOperationFailLogListModel) *proto.DeviceOperationFailLogListResponseObj {
	if src == nil {
		return nil
	}
	ret := proto.DeviceOperationFailLogListResponseObj{
		Id:           src.Id,
		DeviceId:     src.DeviceId,
		Type:         src.Type,
		Content:      src.Content,
		UserId:       src.UserId,
		UserAccount:  src.UserAccount,
		TenantId:     src.TenantId,
		AppKey:       src.AppKey,
		ProductKey:   src.ProductKey,
		FailTime:     src.CreatedAt.Unix(),
		Code:         src.Code,
		Timezone:     src.Timezone,
		Region:       src.Region,
		Lang:         src.Lang,
		Os:           src.Os,
		Model:        src.Model,
		AppVersion:   src.AppVersion,
		Desc:         src.Desc,
		UploadFrom:   src.UploadFrom,
		UploadMethod: src.UploadMethod,
	}
	return &ret
}
func (s *IotDeviceLogProductSvc) ReportFault(natsData *iotstruct.MqttToNatsData, deviceId, deviceName, productId string,
	payload map[string]interface{}) error {
	rdCmd := iotredis.GetClient().HGetAll(context.Background(), iotconst.HKEY_PRODUCT_DATA+natsData.ProductKey)
	if rdCmd.Err() != nil {
		return rdCmd.Err()
	}
	//注意，redis中productId是产品品类ID，不是产品ID
	baseProductId := rdCmd.Val()["productId"]
	var nBaseProductId int64
	if baseProductId != "" {
		nBaseProductId = iotutil.ToInt64(baseProductId)
	}
	tenantId := rdCmd.Val()["tenantId"]
	productName := rdCmd.Val()["productName"]
	nProductId, _ := strconv.Atoi(productId) //产品ID
	var faultList []*model.TIotDeviceFault
	for key, val := range payload {
		tlsStr := rdCmd.Val()[iotconst.FIELD_PREFIX_TLS+key]
		var tlsInfo map[string]interface{}
		err := json.Unmarshal([]byte(tlsStr), &tlsInfo)
		if err != nil || tlsInfo == nil {
			continue
		}
		identifier := iotutil.ToString(tlsInfo["identifier"])

		//故障类型
		dpid, _ := strconv.Atoi(key)
		dataType := iotutil.ToString(tlsInfo["dataType"])
		if dataType == "FAULT" {
			fault := &model.TIotDeviceFault{
				Id:              iotutil.GetNextSeqInt64(),
				DeviceId:        0,
				DeviceKey:       deviceId,
				DeviceName:      deviceName,
				BaseProductId:   nBaseProductId,
				ProductId:       int64(nProductId),
				ProductKey:      natsData.ProductKey,
				ProductName:     productName,
				FaultIdentifier: identifier,
				FaultDpid:       int32(dpid),
				TenantId:        tenantId,
				//FaultCode:       val.(string),
				//FaultName:       "",
				CreatedAt: time.Unix(natsData.Time, 0),
			}
			var faultSpaces []entitys.EnumDataSpaces
			dataSpecListStr := iotutil.ToString(tlsInfo["dataSpecsList"])
			err = json.Unmarshal([]byte(dataSpecListStr), &faultSpaces)
			if err != nil {
				continue
			}
			for _, v := range faultSpaces {
				if int(v.Value) == iotutil.ToInt(val) {
					fault.FaultCode = strconv.Itoa(int(v.Value))
					fault.FaultName = v.Name
					faultList = append(faultList, fault)
					break
				}
			}
		}
	}
	if len(faultList) > 0 {
		err := orm.Use(iotmodel.GetDB()).TIotDeviceFault.WithContext(context.Background()).CreateInBatches(faultList, len(faultList))
		if err != nil {
			iotlogger.LogHelper.Errorf("存储故障数据错误:%s", err.Error())
		}
	}
	return nil
}
