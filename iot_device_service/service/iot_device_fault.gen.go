// Code generated by sgen.exe,2022-06-10 10:05:12. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_device_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_device/model"
	"cloud_platform/iot_model/db_device/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type IotDeviceFaultSvc struct {
	Ctx context.Context
}

// 创建IotDeviceFault
func (s *IotDeviceFaultSvc) CreateIotDeviceFault(req *proto.IotDeviceFault) (*proto.IotDeviceFault, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TIotDeviceFault
	do := t.WithContext(context.Background())
	dbObj := convert.IotDeviceFault_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateIotDeviceFault error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除IotDeviceFault
func (s *IotDeviceFaultSvc) DeleteIotDeviceFault(req *proto.IotDeviceFault) (*proto.IotDeviceFault, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceFault
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.DeviceId != 0 { //整数
		do = do.Where(t.DeviceId.Eq(req.DeviceId))
	}
	if req.DeviceKey != "" { //字符串
		do = do.Where(t.DeviceKey.Eq(req.DeviceKey))
	}
	if req.DeviceName != "" { //字符串
		do = do.Where(t.DeviceName.Eq(req.DeviceName))
	}
	if req.BaseProductId != 0 { //整数
		do = do.Where(t.BaseProductId.Eq(req.BaseProductId))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.ProductName != "" { //字符串
		do = do.Where(t.ProductName.Eq(req.ProductName))
	}
	if req.FaultIdentifier != "" { //字符串
		do = do.Where(t.FaultIdentifier.Eq(req.FaultIdentifier))
	}
	if req.FaultDpid != 0 { //整数
		do = do.Where(t.FaultDpid.Eq(req.FaultDpid))
	}
	if req.FaultCode != "" { //字符串
		do = do.Where(t.FaultCode.Eq(req.FaultCode))
	}
	if req.FaultName != "" { //字符串
		do = do.Where(t.FaultName.Eq(req.FaultName))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteIotDeviceFault error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除IotDeviceFault
func (s *IotDeviceFaultSvc) DeleteByIdIotDeviceFault(req *proto.IotDeviceFault) (*proto.IotDeviceFault, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceFault
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdIotDeviceFault error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除IotDeviceFault
func (s *IotDeviceFaultSvc) DeleteByIdsIotDeviceFault(req *proto.IotDeviceFaultBatchDeleteRequest) (*proto.IotDeviceFaultBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TIotDeviceFault
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsIotDeviceFault error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新IotDeviceFault
func (s *IotDeviceFaultSvc) UpdateIotDeviceFault(req *proto.IotDeviceFault) (*proto.IotDeviceFault, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceFault
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.DeviceId != 0 { //整数
		updateField = append(updateField, t.DeviceId)
	}
	if req.DeviceKey != "" { //字符串
		updateField = append(updateField, t.DeviceKey)
	}
	if req.DeviceName != "" { //字符串
		updateField = append(updateField, t.DeviceName)
	}
	if req.BaseProductId != 0 { //整数
		updateField = append(updateField, t.BaseProductId)
	}
	if req.ProductId != 0 { //整数
		updateField = append(updateField, t.ProductId)
	}
	if req.ProductKey != "" { //字符串
		updateField = append(updateField, t.ProductKey)
	}
	if req.ProductName != "" { //字符串
		updateField = append(updateField, t.ProductName)
	}
	if req.FaultIdentifier != "" { //字符串
		updateField = append(updateField, t.FaultIdentifier)
	}
	if req.FaultDpid != 0 { //整数
		updateField = append(updateField, t.FaultDpid)
	}
	if req.FaultCode != "" { //字符串
		updateField = append(updateField, t.FaultCode)
	}
	if req.FaultName != "" { //字符串
		updateField = append(updateField, t.FaultName)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateIotDeviceFault error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.IotDeviceFault_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateIotDeviceFault error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段IotDeviceFault
func (s *IotDeviceFaultSvc) UpdateAllIotDeviceFault(req *proto.IotDeviceFault) (*proto.IotDeviceFault, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceFault
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.DeviceId)
	updateField = append(updateField, t.DeviceKey)
	updateField = append(updateField, t.DeviceName)
	updateField = append(updateField, t.BaseProductId)
	updateField = append(updateField, t.ProductId)
	updateField = append(updateField, t.ProductKey)
	updateField = append(updateField, t.ProductName)
	updateField = append(updateField, t.FaultIdentifier)
	updateField = append(updateField, t.FaultDpid)
	updateField = append(updateField, t.FaultCode)
	updateField = append(updateField, t.FaultName)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllIotDeviceFault error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceFault_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllIotDeviceFault error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *IotDeviceFaultSvc) UpdateFieldsIotDeviceFault(req *proto.IotDeviceFaultUpdateFieldsRequest) (*proto.IotDeviceFault, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceFault
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsIotDeviceFault error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsIotDeviceFault error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceFault_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsIotDeviceFault error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找IotDeviceFault
func (s *IotDeviceFaultSvc) FindIotDeviceFault(req *proto.IotDeviceFaultFilter) (*proto.IotDeviceFault, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceFault
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.DeviceId != 0 { //整数
		do = do.Where(t.DeviceId.Eq(req.DeviceId))
	}
	if req.DeviceKey != "" { //字符串
		do = do.Where(t.DeviceKey.Eq(req.DeviceKey))
	}
	if req.DeviceName != "" { //字符串
		do = do.Where(t.DeviceName.Eq(req.DeviceName))
	}
	if req.BaseProductId != 0 { //整数
		do = do.Where(t.BaseProductId.Eq(req.BaseProductId))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.ProductName != "" { //字符串
		do = do.Where(t.ProductName.Eq(req.ProductName))
	}
	if req.FaultIdentifier != "" { //字符串
		do = do.Where(t.FaultIdentifier.Eq(req.FaultIdentifier))
	}
	if req.FaultDpid != 0 { //整数
		do = do.Where(t.FaultDpid.Eq(req.FaultDpid))
	}
	if req.FaultCode != "" { //字符串
		do = do.Where(t.FaultCode.Eq(req.FaultCode))
	}
	if req.FaultName != "" { //字符串
		do = do.Where(t.FaultName.Eq(req.FaultName))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindIotDeviceFault error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceFault_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找IotDeviceFault
func (s *IotDeviceFaultSvc) FindByIdIotDeviceFault(req *proto.IotDeviceFaultFilter) (*proto.IotDeviceFault, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceFault
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdIotDeviceFault error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceFault_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找IotDeviceFault,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *IotDeviceFaultSvc) GetListIotDeviceFault(req *proto.IotDeviceFaultListRequest) ([]*proto.IotDeviceFault, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	q := orm.Use(iotmodel.GetDB())
	t := q.TIotDeviceFault
	tTriad := q.TIotDeviceTriad
	do := t.WithContext(context.Background()).LeftJoin(tTriad, tTriad.Did.EqCol(t.DeviceKey))
	query := req.Query
	if query != nil {
		//if query.DeviceId != 0 { //整数
		//	do = do.Where(do.Where(t.DeviceId.Eq(query.DeviceId)).Or(t.DeviceKey.Like("%" + query.DeviceKey + "%")))
		//}
		if query.TenantId != "" {
			do = do.Where(tTriad.TenantId.Eq(query.TenantId))
		}
		if query.DeviceKey != "" { //整数
			do = do.Where(t.DeviceKey.Like("%" + query.DeviceKey + "%"))
		}
		if query.BaseProductId != 0 { //整数
			do = do.Where(t.BaseProductId.Eq(query.BaseProductId))
		}
		if query.ProductId != 0 { //整数
			do = do.Where(t.ProductId.Eq(query.ProductId))
		}
		if query.ProductIds != nil && len(query.ProductIds) > 0 { //整数
			do = do.Where(t.ProductId.In(query.ProductIds...))
		}
		if query.FaultCode != "" { //字符串
			do = do.Where(t.FaultCode.Like("%" + query.FaultCode + "%"))
		}
		if query.StartTime != nil && query.EndTime != nil && query.StartTime.AsTime().Unix() !=0 && query.EndTime.AsTime().Unix() !=0 {
			do = do.Where(t.CreatedAt.Between(iotutil.GetTodaySartTime(query.StartTime.AsTime()), iotutil.GetTodayLastTime(query.EndTime.AsTime())))
		}
		if query.LastDay > 0 {
			start := GetStartTime(int(query.LastDay))
			do = do.Where(t.CreatedAt.Gte(start))
		}
		do = do.Where(t.CreatedAt.Lte(time.Now()))
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}
	do = do.Select(t.ALL, tTriad.TenantId)
	var list []struct{
		model.TIotDeviceFault
		TenantId  string `gorm:"column:tenant_id" json:"tenantId"`
	}
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do.ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListIotDeviceFault error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.IotDeviceFault, len(list))
	for i, v := range list {
		result[i] = convert.IotDeviceFault_db2pb(&v.TIotDeviceFault)
		result[i].TenantId = v.TenantId
	}
	return result, total, nil
}

func GetStartTime(flag int) time.Time {
	t0 := iotutil.New(time.Now()).BeginningOfDay()
	t := t0
	switch flag {
	case 1: //今日
	case 2: //近7日
		t = t0.Add(-6 * 24 * time.Hour)
	case 3: //近30日
		t = t0.Add(-29 * 24 * time.Hour)
	case 4: //近60日
		t = t0.Add(-59 * 24 * time.Hour)
	default:
	}
	return t
}
