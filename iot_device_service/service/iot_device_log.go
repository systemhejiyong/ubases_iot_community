// Code generated by sgen.exe,2022-04-21 19:06:38. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_device_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_device/model"
	"cloud_platform/iot_model/db_device/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type IotDeviceLogSvc struct {
	Ctx context.Context
}

// 创建IotDeviceLog
func (s *IotDeviceLogSvc) CreateIotDeviceLog(req *proto.IotDeviceLog) (*proto.IotDeviceLog, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TIotDeviceLog
	do := t.WithContext(context.Background())
	dbObj := convert.IotDeviceLog_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateIotDeviceLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除IotDeviceLog
func (s *IotDeviceLogSvc) DeleteIotDeviceLog(req *proto.IotDeviceLog) (*proto.IotDeviceLog, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Did != "" { //字符串
		do = do.Where(t.Did.Eq(req.Did))
	}
	if req.EventType != 0 { //整数
		do = do.Where(t.EventType.Eq(req.EventType))
	}
	if req.FuncKey != "" { //字符串
		do = do.Where(t.FuncKey.Eq(req.FuncKey))
	}
	if req.FuncValue != "" { //字符串
		do = do.Where(t.FuncValue.Eq(req.FuncValue))
	}
	if req.FuncDesc != "" { //字符串
		do = do.Where(t.FuncDesc.Eq(req.FuncDesc))
	}
	if req.OriginType != 0 { //整数
		do = do.Where(t.OriginType.Eq(req.OriginType))
	}
	if req.OriginDetail != "" { //字符串
		do = do.Where(t.OriginDetail.Eq(req.OriginDetail))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteIotDeviceLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除IotDeviceLog
func (s *IotDeviceLogSvc) DeleteByIdIotDeviceLog(req *proto.IotDeviceLog) (*proto.IotDeviceLog, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdIotDeviceLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除IotDeviceLog
func (s *IotDeviceLogSvc) DeleteByIdsIotDeviceLog(req *proto.IotDeviceLogBatchDeleteRequest) (*proto.IotDeviceLogBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TIotDeviceLog
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsIotDeviceLog error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新IotDeviceLog
func (s *IotDeviceLogSvc) UpdateIotDeviceLog(req *proto.IotDeviceLog) (*proto.IotDeviceLog, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Did != "" { //字符串
		updateField = append(updateField, t.Did)
	}
	if req.EventType != 0 { //整数
		updateField = append(updateField, t.EventType)
	}
	if req.FuncKey != "" { //字符串
		updateField = append(updateField, t.FuncKey)
	}
	if req.FuncValue != "" { //字符串
		updateField = append(updateField, t.FuncValue)
	}
	if req.FuncDesc != "" { //字符串
		updateField = append(updateField, t.FuncDesc)
	}
	if req.OriginType != 0 { //整数
		updateField = append(updateField, t.OriginType)
	}
	if req.OriginDetail != "" { //字符串
		updateField = append(updateField, t.OriginDetail)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateIotDeviceLog error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.IotDeviceLog_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateIotDeviceLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段IotDeviceLog
func (s *IotDeviceLogSvc) UpdateAllIotDeviceLog(req *proto.IotDeviceLog) (*proto.IotDeviceLog, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Did)
	updateField = append(updateField, t.ReportTime)
	updateField = append(updateField, t.EventType)
	updateField = append(updateField, t.FuncKey)
	updateField = append(updateField, t.FuncValue)
	updateField = append(updateField, t.FuncDesc)
	updateField = append(updateField, t.OriginType)
	updateField = append(updateField, t.OriginDetail)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllIotDeviceLog error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceLog_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllIotDeviceLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *IotDeviceLogSvc) UpdateFieldsIotDeviceLog(req *proto.IotDeviceLogUpdateFieldsRequest) (*proto.IotDeviceLog, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceLog
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsIotDeviceLog error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsIotDeviceLog error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceLog_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsIotDeviceLog error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找IotDeviceLog
func (s *IotDeviceLogSvc) FindIotDeviceLog(req *proto.IotDeviceLogFilter) (*proto.IotDeviceLog, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Did != "" { //字符串
		do = do.Where(t.Did.Like("%" + req.Did + "%"))
	}
	if req.EventType != 0 { //整数
		do = do.Where(t.EventType.Eq(req.EventType))
	}
	if req.FuncKey != "" { //字符串
		do = do.Where(t.FuncKey.Like("%" + req.FuncKey + "%"))
	}
	if req.FuncValue != "" { //字符串
		do = do.Where(t.FuncValue.Like("%" + req.FuncValue + "%"))
	}
	if req.FuncDesc != "" { //字符串
		do = do.Where(t.FuncDesc.Like("%" + req.FuncDesc + "%"))
	}
	if req.OriginType != 0 { //整数
		do = do.Where(t.OriginType.Eq(req.OriginType))
	}
	if req.OriginDetail != "" { //字符串
		do = do.Where(t.OriginDetail.Like("%" + req.OriginDetail + "%"))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindIotDeviceLog error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceLog_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找IotDeviceLog
func (s *IotDeviceLogSvc) FindByIdIotDeviceLog(req *proto.IotDeviceLogFilter) (*proto.IotDeviceLog, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdIotDeviceLog error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceLog_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找IotDeviceLog,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *IotDeviceLogSvc) GetListIotDeviceLog(req *proto.IotDeviceLogListRequest) ([]*proto.IotDeviceLog, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TIotDeviceLog
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {
		if query.Did != "" { //字符串
			do = do.Where(t.Did.Eq(query.Did))
		}
		if query.EventType != "0" && query.EventType != "" { //事件类型
			do = do.Where(t.EventType.Eq(iotutil.ToInt32(query.EventType)))
		}
		if query.EventKey != "0" && query.EventKey != "" { //字符串
			do = do.Where(t.FuncKey.Eq(query.EventKey))
		}
		if query.Origin != "0" && query.Origin != "" { //字符串
			do = do.Where(t.FuncKey.Eq(query.Origin))
		}
		if query.StartTime != 0 && query.EndTime != 0 { //字符串
			do = do.Where(t.ReportTime.Between(time.Unix(query.StartTime, 0), time.Unix(query.EndTime, 0)))
		}
	}

	// 是否仅仅返回统计数量
	if req.Query.IsOnlyCount == 1 {
		total, err := do.Count()
		if err != nil {
			logger.Errorf("GetListIotDeviceLog Count error : %s", err.Error())
			return nil, 0, err
		}
		return nil, total, nil
	}

	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TIotDeviceLog
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListIotDeviceLog error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.IotDeviceLog, len(list))
	for i, v := range list {
		result[i] = convert.IotDeviceLog_db2pb(v)
	}
	return result, total, nil
}
