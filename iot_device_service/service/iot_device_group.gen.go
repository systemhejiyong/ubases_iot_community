// Code generated by sgen.exe,2022-08-16 10:17:33. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"gorm.io/gen"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_device_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_device/model"
	"cloud_platform/iot_model/db_device/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type IotDeviceGroupSvc struct {
	Ctx context.Context
}

// 创建IotDeviceGroup
func (s *IotDeviceGroupSvc) CreateIotDeviceGroup(req *proto.IotDeviceGroup) (*proto.IotDeviceGroup, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TIotDeviceGroup
	do := t.WithContext(context.Background())
	dbObj := convert.IotDeviceGroup_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateIotDeviceGroup error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除IotDeviceGroup
func (s *IotDeviceGroupSvc) DeleteIotDeviceGroup(req *proto.IotDeviceGroup) (*proto.IotDeviceGroup, error) {
	q := orm.Use(iotmodel.GetDB())
	err := q.Transaction(func(tx *orm.Query) error {
		tList := tx.TIotDeviceGroupList
		tGroup := tx.TIotDeviceGroup
		doGroup := tGroup.WithContext(context.Background())

		var filters []gen.Condition
		if req.Id != 0 { //整数
			filters = append(filters, tGroup.Id.Eq(req.Id))
		}
		if req.Name != "" { //字符串
			filters = append(filters, tGroup.Name.Eq(req.Name))
		}
		if req.RoomId != 0 { //整数
			filters = append(filters, tGroup.RoomId.Eq(req.RoomId))
		}
		if req.RoomName != "" { //字符串
			filters = append(filters, tGroup.RoomName.Eq(req.RoomName))
		}
		if req.HomeId != 0 { //整数
			filters = append(filters, tGroup.HomeId.Eq(req.HomeId))
		}
		if req.UserId != 0 { //整数
			filters = append(filters, tGroup.UserId.Eq(req.UserId))
		}
		if len(filters) == 0 {
			return errors.New("未设置过滤条件")
		}

		//获取Id
		list, err := doGroup.Where(filters...).Find()
		if len(list) == 0 {
			return nil
		}
		groupIds := make([]int64, 0)
		for _, l := range list {
			groupIds = append(groupIds, l.Id)
		}

		_, err = tList.WithContext(context.Background()).Where(tList.Id.In(groupIds...)).Delete()
		if err != nil {
			logger.Errorf("DeleteIotDeviceGroup list error : %s", err.Error())
			return err
		}
		_, err = doGroup.Where(filters...).Delete()
		if err != nil {
			logger.Errorf("DeleteIotDeviceGroup error : %s", err.Error())
			return err
		}
		return nil
	})
	return req, err
}

// 根据数据库表主键删除IotDeviceGroup
func (s *IotDeviceGroupSvc) DeleteByIdIotDeviceGroup(req *proto.IotDeviceGroup) (*proto.IotDeviceGroup, error) {
	q := orm.Use(iotmodel.GetDB())
	err := q.Transaction(func(tx *orm.Query) error {
		tList := tx.TIotDeviceGroupList
		tGroup := tx.TIotDeviceGroup
		doGroup := tGroup.WithContext(context.Background())

		var filters []gen.Condition
		if req.Id != 0 { //整数
			filters = append(filters, tGroup.Id.Eq(req.Id))
		}
		if len(filters) == 0 {
			return errors.New("未设置过滤条件")
		}
		_, err := tList.WithContext(context.Background()).Join(tGroup, tList.GroupId.EqCol(tList.GroupId)).Where(filters...).Delete()
		if err != nil {
			logger.Errorf("DeleteByIdIotDeviceGroup list error : %s", err.Error())
			return err
		}
		_, err = doGroup.Where(filters...).Delete()
		if err != nil {
			logger.Errorf("DeleteByIdIotDeviceGroup error : %s", err.Error())
			return err
		}
		return nil
	})
	return req, err
}

// 根据数据库表主键批量删除IotDeviceGroup
func (s *IotDeviceGroupSvc) DeleteByIdsIotDeviceGroup(req *proto.IotDeviceGroupBatchDeleteRequest) (*proto.IotDeviceGroupBatchDeleteRequest, error) {
	if len(req.Keys) == 0 {
		return nil, errors.New("未设置过滤条件")
	}
	q := orm.Use(iotmodel.GetDB())
	err := q.Transaction(func(tx *orm.Query) error {
		tList := tx.TIotDeviceGroupList
		tGroup := tx.TIotDeviceGroup
		doGroup := tGroup.WithContext(context.Background())
		var filters []gen.Condition
		ids := make([]int64, 0)
		for _, k := range req.Keys {
			ids = append(ids, k.Id)
		}
		filters = append(filters, tGroup.Id.In(ids...))
		_, err := tList.WithContext(context.Background()).Join(tGroup, tList.GroupId.EqCol(tList.GroupId)).Where(filters...).Delete()
		if err != nil {
			logger.Errorf("DeleteByIdIotDeviceGroup list error : %s", err.Error())
			return err
		}
		_, err = doGroup.Where(filters...).Delete()
		if err != nil {
			logger.Errorf("DeleteByIdIotDeviceGroup error : %s", err.Error())
			return err
		}
		return nil
	})
	return req, err
}

// 根据主键更新IotDeviceGroup
func (s *IotDeviceGroupSvc) UpdateIotDeviceGroup(req *proto.IotDeviceGroup) (*proto.IotDeviceGroup, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceGroup
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Name != "" { //字符串
		updateField = append(updateField, t.Name)
	}
	if req.RoomId != 0 { //整数
		updateField = append(updateField, t.RoomId)
	}
	if req.RoomName != "" { //字符串
		updateField = append(updateField, t.RoomName)
	}
	if req.HomeId != 0 { //整数
		updateField = append(updateField, t.HomeId)
	}
	if req.UserId != 0 { //整数
		updateField = append(updateField, t.UserId)
	}
	if req.Pic != "" { //字符串
		updateField = append(updateField, t.Pic)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateIotDeviceGroup error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.IotDeviceGroup_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateIotDeviceGroup error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段IotDeviceGroup
func (s *IotDeviceGroupSvc) UpdateAllIotDeviceGroup(req *proto.IotDeviceGroup) (*proto.IotDeviceGroup, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceGroup
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Name)
	updateField = append(updateField, t.RoomId)
	updateField = append(updateField, t.RoomName)
	updateField = append(updateField, t.HomeId)
	updateField = append(updateField, t.UserId)
	updateField = append(updateField, t.Pic)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllIotDeviceGroup error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceGroup_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllIotDeviceGroup error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *IotDeviceGroupSvc) UpdateFieldsIotDeviceGroup(req *proto.IotDeviceGroupUpdateFieldsRequest) (*proto.IotDeviceGroup, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceGroup
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsIotDeviceGroup error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsIotDeviceGroup error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceGroup_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsIotDeviceGroup error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找IotDeviceGroup
func (s *IotDeviceGroupSvc) FindIotDeviceGroup(req *proto.IotDeviceGroupFilter) (*proto.IotDeviceGroup, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceGroup
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.RoomId != 0 { //整数
		do = do.Where(t.RoomId.Eq(req.RoomId))
	}
	if req.RoomName != "" { //字符串
		do = do.Where(t.RoomName.Eq(req.RoomName))
	}
	if req.HomeId != 0 { //整数
		do = do.Where(t.HomeId.Eq(req.HomeId))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.Pic != "" { //字符串
		do = do.Where(t.Pic.Eq(req.Pic))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindIotDeviceGroup error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceGroup_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找IotDeviceGroup
func (s *IotDeviceGroupSvc) FindByIdIotDeviceGroup(req *proto.IotDeviceGroupFilter) (*proto.IotDeviceGroup, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceGroup
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdIotDeviceGroup error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceGroup_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找IotDeviceGroup,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *IotDeviceGroupSvc) GetListIotDeviceGroup(req *proto.IotDeviceGroupListRequest) ([]*proto.IotDeviceGroup, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TIotDeviceGroup
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Name != "" { //字符串
			do = do.Where(t.Name.Like("%" + query.Name + "%"))
		}
		if query.RoomId != 0 { //整数
			do = do.Where(t.RoomId.Eq(query.RoomId))
		}
		if query.RoomName != "" { //字符串
			do = do.Where(t.RoomName.Like("%" + query.RoomName + "%"))
		}
		if query.HomeId != 0 { //整数
			do = do.Where(t.HomeId.Eq(query.HomeId))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.Pic != "" { //字符串
			do = do.Where(t.Pic.Like("%" + query.Pic + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TIotDeviceGroup
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListIotDeviceGroup error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.IotDeviceGroup, len(list))
	for i, v := range list {
		result[i] = convert.IotDeviceGroup_db2pb(v)
	}
	return result, total, nil
}

// 创建IotDeviceGroup
func (s *IotDeviceGroupSvc) UpsertGroup(req *proto.UpsertGroupRequest) (*proto.IotDeviceGroup, error) {
	iotDeviceGroup := proto.IotDeviceGroup{}
	groupId, _ := iotutil.ToInt64AndErr(req.IotDeviceGroupReq.GroupId)
	//if req.IotDeviceGroupReq.GroupName == "" {
	//	return nil, errors.New("groupname is empty")
	//}
	var q = orm.Use(iotmodel.GetDB())
	err := q.Transaction(func(tx *orm.Query) error {
		if groupId == 0 { //新增
			deviceList := req.IotDeviceGroupReq.DeviceList
			if len(deviceList) < 2 {
				return errors.New("至少两个设备才可创建群组")
			}
			res, err := s.createDeviceGroup(tx, req)
			if err != nil {
				return err
			}
			groupId = res
		} else { //修改
			res, err := s.updateDeviceGroup(tx, req)
			if err != nil {
				return err
			}
			groupId = res
		}
		return nil
	})

	if err != nil {
		logger.Errorf("tUcHomeRoom create failed, error:%s", err.Error())
		return &iotDeviceGroup, err
	}
	//})
	iotDeviceGroup.Id = groupId
	return &iotDeviceGroup, nil
}

// 创建村组
func (s *IotDeviceGroupSvc) createDeviceGroup(tx *orm.Query, req *proto.UpsertGroupRequest) (int64, error) {
	tGroupTable := tx.TIotDeviceGroup
	tGroupListTable := tx.TIotDeviceGroupList
	tGroup := tGroupTable.WithContext(context.Background())
	tGroupList := tGroupListTable.WithContext(context.Background())
	iotDeviceGroupReq := req.IotDeviceGroupReq
	groupId := iotutil.GetNextSeqInt64()
	roomId, _ := iotutil.ToInt64AndErr(iotDeviceGroupReq.RoomId)
	if iotDeviceGroupReq.GroupName == "" {
		return 0, errors.New("groupname is empty")
	}
	deviceList := iotDeviceGroupReq.DeviceList
	if len(deviceList) < 2 {
		return 0, errors.New("至少两个设备才可创建群组")
	}

	deviceGroup := &model.TIotDeviceGroup{
		Id:       groupId,
		Name:     iotDeviceGroupReq.GroupName,
		RoomId:   roomId,
		RoomName: iotDeviceGroupReq.RoomName,
		HomeId:   req.HomeId,
		UserId:   req.UserId,
		Pic:      "",
	}
	err := tGroup.Create(deviceGroup)
	if err != nil {
		logger.Errorf("TIotDeviceGroup create failed, error:%s", err.Error())
		return 0, err
	}

	deviceGroupList := []*model.TIotDeviceGroupList{}
	for i, devparam := range deviceList {
		g := model.TIotDeviceGroupList{}
		g.Id = iotutil.GetNextSeqInt64()
		g.GroupId = groupId
		g.DevId = devparam.DevId
		g.UserId = req.UserId
		g.HomeId = req.HomeId
		g.Sort = int32(i + 1)
		deviceGroupList = append(deviceGroupList, &g)
	}
	err = tGroupList.Create(deviceGroupList...)
	if err != nil {
		logger.Errorf("tUcHomeRoom create failed, error:%s", err.Error())
		return 0, err
	}
	return groupId, nil
}

// 修改村组
func (s *IotDeviceGroupSvc) updateDeviceGroup(tx *orm.Query, req *proto.UpsertGroupRequest) (int64, error) {
	tGroupTable := tx.TIotDeviceGroup
	tGroupListTable := tx.TIotDeviceGroupList
	doGroup := tGroupTable.WithContext(context.Background())
	doGroupList := tGroupListTable.WithContext(context.Background())
	groupReq := req.IotDeviceGroupReq
	groupId, _ := iotutil.ToInt64AndErr(groupReq.GroupId)
	roomId, _ := iotutil.ToInt64AndErr(groupReq.RoomId)

	//更新群组数据
	doGroup = doGroup.Select(tGroupTable.Name, tGroupTable.RoomId, tGroupTable.RoomName).
		Where(tGroupTable.Id.Eq(groupId))

	//修改群组信息
	var updateField []field.Expr
	if groupReq.GroupName != "" { //字符串
		updateField = append(updateField, tGroupTable.Name)
	}
	if roomId != 0 { //字符串
		updateField = append(updateField, tGroupTable.RoomId)
	}
	if groupReq.RoomName != "" { //字符串
		updateField = append(updateField, tGroupTable.RoomName)
	}
	_, err := doGroup.Select(updateField...).Updates(model.TIotDeviceGroup{
		Id:       groupId,
		Name:     groupReq.GroupName,
		RoomId:   roomId,
		RoomName: groupReq.RoomName,
	})
	if err != nil {
		logger.Errorf("updateDeviceGroup tGroup.Updates error : %s", err.Error())
		return 0, err
	}
	//判断为修改群组的信息，直接返回。
	if req.IotDeviceGroupReq.DeviceList == nil {
		return groupId, nil
	}

	deviceList := req.IotDeviceGroupReq.DeviceList
	if len(deviceList) < 2 {
		return groupId, errors.New("至少两个设备才可创建群组")
	}

	//查询原群组的关联数据，获取已关联设备列表
	groupList, err := tx.TIotDeviceGroupList.WithContext(context.Background()).Where(tx.TIotDeviceGroupList.GroupId.Eq(groupId)).Find()
	if err != nil {
		return 0, err
	}
	//目前已选择的设备Id
	deviceIds := make([]string, 0)
	//需要删除的设备Id
	delDeviceIds := make([]string, 0)
	//需要新增的数据
	addDeviceGroupList := []*model.TIotDeviceGroupList{}

	groupDeviceMap := map[string]*proto.DeviceData{}
	for _, d := range groupReq.DeviceList {
		groupDeviceMap[d.DevId] = d
	}
	dbGroupDeviceMap := map[string]string{}
	for _, d := range groupList {
		dbGroupDeviceMap[d.DevId] = d.DevId
	}
	//提取删除的
	for _, item := range groupList {
		deviceIds = append(deviceIds, item.DevId)
		if _, ok := groupDeviceMap[item.DevId]; !ok {
			delDeviceIds = append(delDeviceIds, item.DevId)
		}
	}
	//提取新增的
	for _, item := range groupReq.DeviceList {
		//如果数据库已经存在，则不处理。
		if _, ok := dbGroupDeviceMap[item.DevId]; ok {
			continue
		}
		deviceGroupListInfo := model.TIotDeviceGroupList{
			Id:      iotutil.GetNextSeqInt64(),
			GroupId: groupId,
			DevId:   item.DevId,
			HomeId:  req.HomeId,
			UserId:  req.UserId,
		}
		addDeviceGroupList = append(addDeviceGroupList, &deviceGroupListInfo)
	}

	//删除移除的设备
	if len(delDeviceIds) > 0 {
		_, err := doGroupList.Where(tGroupListTable.DevId.In(delDeviceIds...)).Delete()
		if err != nil {
			return 0, err
		}
	}
	//新增设备
	if len(addDeviceGroupList) > 0 {
		err = doGroupList.Create(addDeviceGroupList...)
		if err != nil {
			return 0, err
		}
	}
	//批量排序修改
	for i, d := range deviceList {
		doGroupList.Where(tGroupListTable.GroupId.Eq(iotutil.ToInt64(req.IotDeviceGroupReq.GroupId)), tGroupListTable.DevId.Eq(d.DevId)).Update(tGroupListTable.Sort, int32(i+1))
	}
	return groupId, nil
}
