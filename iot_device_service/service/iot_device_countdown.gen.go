// Code generated by sgen.exe,2022-06-17 14:48:11. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_device_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_device/model"
	"cloud_platform/iot_model/db_device/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type IotDeviceCountdownSvc struct {
	Ctx context.Context
}

// 创建IotDeviceCountdown
func (s *IotDeviceCountdownSvc) CreateIotDeviceCountdown(req *proto.IotDeviceCountdown) (*proto.IotDeviceCountdown, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TIotDeviceCountdown
	do := t.WithContext(context.Background())
	dbObj := convert.IotDeviceCountdown_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateIotDeviceCountdown error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除IotDeviceCountdown
func (s *IotDeviceCountdownSvc) DeleteIotDeviceCountdown(req *proto.IotDeviceCountdown) (*proto.IotDeviceCountdown, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceCountdown
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Hour != "" { //字符串
		do = do.Where(t.Hour.Eq(req.Hour))
	}
	if req.Minute != "" { //字符串
		do = do.Where(t.Minute.Eq(req.Minute))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.FuncKey != "" { //字符串
		do = do.Where(t.FuncKey.Eq(req.FuncKey))
	}
	if req.FuncValue != "" { //字符串
		do = do.Where(t.FuncValue.Eq(req.FuncValue))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.DeviceId != "" { //字符串
		do = do.Where(t.DeviceId.Eq(req.DeviceId))
	}
	if req.Enabled != 0 { //整数
		do = do.Where(t.Enabled.Eq(req.Enabled))
	}
	if req.TotalSecond != 0 { //整数
		do = do.Where(t.TotalSecond.Eq(req.TotalSecond))
	}
	if req.TaskId != "" { //字符串
		do = do.Where(t.TaskId.Eq(req.TaskId))
	}
	if req.Cron != "" { //字符串
		do = do.Where(t.Cron.Eq(req.Cron))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteIotDeviceCountdown error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除IotDeviceCountdown
func (s *IotDeviceCountdownSvc) DeleteByIdIotDeviceCountdown(req *proto.IotDeviceCountdown) (*proto.IotDeviceCountdown, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceCountdown
	do := t.WithContext(context.Background())
	// fixme 请检查条件
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdIotDeviceCountdown error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除IotDeviceCountdown
func (s *IotDeviceCountdownSvc) DeleteByIdsIotDeviceCountdown(req *proto.IotDeviceCountdownBatchDeleteRequest) (*proto.IotDeviceCountdownBatchDeleteRequest, error) {
	var err error
	for _, _ = range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TIotDeviceCountdown
		do := t.WithContext(context.Background())

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsIotDeviceCountdown error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新IotDeviceCountdown
func (s *IotDeviceCountdownSvc) UpdateIotDeviceCountdown(req *proto.IotDeviceCountdown) (*proto.IotDeviceCountdown, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceCountdown
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Id != 0 { //整数
		updateField = append(updateField, t.Id)
	}
	if req.Hour != "" { //字符串
		updateField = append(updateField, t.Hour)
	}
	if req.Minute != "" { //字符串
		updateField = append(updateField, t.Minute)
	}
	if req.Remark != "" { //字符串
		updateField = append(updateField, t.Remark)
	}
	if req.FuncKey != "" { //字符串
		updateField = append(updateField, t.FuncKey)
	}
	if req.FuncValue != "" { //字符串
		updateField = append(updateField, t.FuncValue)
	}
	if req.UserId != 0 { //整数
		updateField = append(updateField, t.UserId)
	}
	if req.DeviceId != "" { //字符串
		updateField = append(updateField, t.DeviceId)
	}
	if req.Enabled != 0 { //整数
		updateField = append(updateField, t.Enabled)
	}
	if req.TotalSecond != 0 { //整数
		updateField = append(updateField, t.TotalSecond)
	}
	if req.TaskId != "" { //字符串
		updateField = append(updateField, t.TaskId)
	}
	if req.Cron != "" { //字符串
		updateField = append(updateField, t.Cron)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateIotDeviceCountdown error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.IotDeviceCountdown_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateIotDeviceCountdown error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段IotDeviceCountdown
func (s *IotDeviceCountdownSvc) UpdateAllIotDeviceCountdown(req *proto.IotDeviceCountdown) (*proto.IotDeviceCountdown, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceCountdown
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Id)
	updateField = append(updateField, t.Hour)
	updateField = append(updateField, t.Minute)
	updateField = append(updateField, t.Remark)
	updateField = append(updateField, t.FuncKey)
	updateField = append(updateField, t.FuncValue)
	updateField = append(updateField, t.UserId)
	updateField = append(updateField, t.DeviceId)
	updateField = append(updateField, t.Enabled)
	updateField = append(updateField, t.TotalSecond)
	updateField = append(updateField, t.ExecutionTime)
	updateField = append(updateField, t.TaskId)
	updateField = append(updateField, t.Cron)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if !HasPrimaryKey {
		logger.Error("UpdateAllIotDeviceCountdown error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceCountdown_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllIotDeviceCountdown error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *IotDeviceCountdownSvc) UpdateFieldsIotDeviceCountdown(req *proto.IotDeviceCountdownUpdateFieldsRequest) (*proto.IotDeviceCountdown, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceCountdown
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsIotDeviceCountdown error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsIotDeviceCountdown error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceCountdown_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsIotDeviceCountdown error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找IotDeviceCountdown
func (s *IotDeviceCountdownSvc) FindIotDeviceCountdown(req *proto.IotDeviceCountdownFilter) (*proto.IotDeviceCountdown, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceCountdown
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Hour != "" { //字符串
		do = do.Where(t.Hour.Eq(req.Hour))
	}
	if req.Minute != "" { //字符串
		do = do.Where(t.Minute.Eq(req.Minute))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.FuncKey != "" { //字符串
		do = do.Where(t.FuncKey.Eq(req.FuncKey))
	}
	if req.FuncValue != "" { //字符串
		do = do.Where(t.FuncValue.Eq(req.FuncValue))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.DeviceId != "" { //字符串
		do = do.Where(t.DeviceId.Eq(req.DeviceId))
	}
	if req.Enabled != 0 { //整数
		do = do.Where(t.Enabled.Eq(req.Enabled))
	}
	if req.TotalSecond != 0 { //整数
		do = do.Where(t.TotalSecond.Eq(req.TotalSecond))
	}
	if req.TaskId != "" { //字符串
		do = do.Where(t.TaskId.Eq(req.TaskId))
	}
	if req.Cron != "" { //字符串
		do = do.Where(t.Cron.Eq(req.Cron))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindIotDeviceCountdown error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceCountdown_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找IotDeviceCountdown
func (s *IotDeviceCountdownSvc) FindByIdIotDeviceCountdown(req *proto.IotDeviceCountdownFilter) (*proto.IotDeviceCountdown, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceCountdown
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdIotDeviceCountdown error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceCountdown_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找IotDeviceCountdown,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *IotDeviceCountdownSvc) GetListIotDeviceCountdown(req *proto.IotDeviceCountdownListRequest) ([]*proto.IotDeviceCountdown, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TIotDeviceCountdown
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Hour != "" { //字符串
			do = do.Where(t.Hour.Like("%" + query.Hour + "%"))
		}
		if query.Minute != "" { //字符串
			do = do.Where(t.Minute.Like("%" + query.Minute + "%"))
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
		if query.FuncKey != "" { //字符串
			do = do.Where(t.FuncKey.Like("%" + query.FuncKey + "%"))
		}
		if query.FuncValue != "" { //字符串
			do = do.Where(t.FuncValue.Like("%" + query.FuncValue + "%"))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.DeviceId != "" { //字符串
			do = do.Where(t.DeviceId.Like("%" + query.DeviceId + "%"))
		}
		if query.Enabled != 0 { //整数
			do = do.Where(t.Enabled.Eq(query.Enabled))
		}
		if query.TotalSecond != 0 { //整数
			do = do.Where(t.TotalSecond.Eq(query.TotalSecond))
		}
		if query.TaskId != "" { //字符串
			do = do.Where(t.TaskId.Like("%" + query.TaskId + "%"))
		}
		if query.Cron != "" { //字符串
			do = do.Where(t.Cron.Like("%" + query.Cron + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TIotDeviceCountdown
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListIotDeviceCountdown error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.IotDeviceCountdown, len(list))
	for i, v := range list {
		result[i] = convert.IotDeviceCountdown_db2pb(v)
	}
	return result, total, nil
}

func (s *IotDeviceCountdownSvc) UpdateByDevId(req *proto.IotDeviceCountdown) (*proto.IotDeviceCountdown, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceCountdown
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr
	if req.Enabled != 0 { //整数
		updateField = append(updateField, t.Enabled)
	}
	if req.TotalSecond != 0 { //整数
		updateField = append(updateField, t.TotalSecond)
	}
	if req.Cron != "" { //字符串
		updateField = append(updateField, t.Cron)
	}

	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	do = do.Where(t.DeviceId.Eq(req.DeviceId))
	dbObj := convert.IotDeviceCountdown_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllIotDeviceCountdown error : %s", err.Error())
		return nil, err
	}
	return req, err
}
