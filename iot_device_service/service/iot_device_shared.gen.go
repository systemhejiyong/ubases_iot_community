// Code generated by sgen.exe,2022-07-20 16:42:04. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_device_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_device/model"
	"cloud_platform/iot_model/db_device/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type IotDeviceSharedSvc struct {
	Ctx context.Context
}

// 创建IotDeviceShared
func (s *IotDeviceSharedSvc) CreateIotDeviceShared(req *proto.IotDeviceShared) (*proto.IotDeviceShared, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShared
	do := t.WithContext(context.Background())
	dbObj := convert.IotDeviceShared_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateIotDeviceShared error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除IotDeviceShared
func (s *IotDeviceSharedSvc) DeleteIotDeviceShared(req *proto.IotDeviceShared) (*proto.IotDeviceShared, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShared
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.CustomName != "" { //字符串
		do = do.Where(t.CustomName.Eq(req.CustomName))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.Phone != "" { //字符串
		do = do.Where(t.Phone.Eq(req.Phone))
	}
	if req.Email != "" { //字符串
		do = do.Where(t.Email.Eq(req.Email))
	}
	if req.DeviceId != "" { //字符串
		do = do.Where(t.DeviceId.Eq(req.DeviceId))
	}
	if req.HomeId != 0 { //整数
		do = do.Where(t.HomeId.Eq(req.HomeId))
	}
	if req.Photo != "" { //字符串
		do = do.Where(t.Photo.Eq(req.Photo))
	}
	if req.Sid != 0 { //整数
		do = do.Where(t.Sid.Eq(req.Sid))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteIotDeviceShared error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除IotDeviceShared
func (s *IotDeviceSharedSvc) DeleteByIdIotDeviceShared(req *proto.IotDeviceShared) (*proto.IotDeviceShared, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShared
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdIotDeviceShared error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除IotDeviceShared
func (s *IotDeviceSharedSvc) DeleteByIdsIotDeviceShared(req *proto.IotDeviceSharedBatchDeleteRequest) (*proto.IotDeviceSharedBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TIotDeviceShared
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsIotDeviceShared error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新IotDeviceShared
func (s *IotDeviceSharedSvc) UpdateIotDeviceShared(req *proto.IotDeviceShared) (*proto.IotDeviceShared, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShared
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.CustomName != "" { //字符串
		updateField = append(updateField, t.CustomName)
	}
	if req.UserId != 0 { //整数
		updateField = append(updateField, t.UserId)
	}
	if req.Phone != "" { //字符串
		updateField = append(updateField, t.Phone)
	}
	if req.Email != "" { //字符串
		updateField = append(updateField, t.Email)
	}
	if req.DeviceId != "" { //字符串
		updateField = append(updateField, t.DeviceId)
	}
	if req.HomeId != 0 { //整数
		updateField = append(updateField, t.HomeId)
	}
	if req.Photo != "" { //字符串
		updateField = append(updateField, t.Photo)
	}
	if req.Sid != 0 { //整数
		updateField = append(updateField, t.Sid)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateIotDeviceShared error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.IotDeviceShared_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateIotDeviceShared error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段IotDeviceShared
func (s *IotDeviceSharedSvc) UpdateAllIotDeviceShared(req *proto.IotDeviceShared) (*proto.IotDeviceShared, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShared
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.CustomName)
	updateField = append(updateField, t.UserId)
	updateField = append(updateField, t.Phone)
	updateField = append(updateField, t.Email)
	updateField = append(updateField, t.DeviceId)
	updateField = append(updateField, t.HomeId)
	updateField = append(updateField, t.Photo)
	updateField = append(updateField, t.Sid)
	updateField = append(updateField, t.SharedTime)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllIotDeviceShared error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceShared_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllIotDeviceShared error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *IotDeviceSharedSvc) UpdateFieldsIotDeviceShared(req *proto.IotDeviceSharedUpdateFieldsRequest) (*proto.IotDeviceShared, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShared
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsIotDeviceShared error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsIotDeviceShared error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceShared_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsIotDeviceShared error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找IotDeviceShared
func (s *IotDeviceSharedSvc) FindIotDeviceShared(req *proto.IotDeviceSharedFilter) (*proto.IotDeviceShared, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShared
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.CustomName != "" { //字符串
		do = do.Where(t.CustomName.Eq(req.CustomName))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.Phone != "" { //字符串
		do = do.Where(t.Phone.Eq(req.Phone))
	}
	if req.Email != "" { //字符串
		do = do.Where(t.Email.Eq(req.Email))
	}
	if req.DeviceId != "" { //字符串
		do = do.Where(t.DeviceId.Eq(req.DeviceId))
	}
	if req.HomeId != 0 { //整数
		do = do.Where(t.HomeId.Eq(req.HomeId))
	}
	if req.Photo != "" { //字符串
		do = do.Where(t.Photo.Eq(req.Photo))
	}
	if req.Sid != 0 { //整数
		do = do.Where(t.Sid.Eq(req.Sid))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindIotDeviceShared error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceShared_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找IotDeviceShared
func (s *IotDeviceSharedSvc) FindByIdIotDeviceShared(req *proto.IotDeviceSharedFilter) (*proto.IotDeviceShared, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShared
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdIotDeviceShared error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceShared_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找IotDeviceShared,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *IotDeviceSharedSvc) GetListIotDeviceShared(req *proto.IotDeviceSharedListRequest) ([]*proto.IotDeviceShared, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TIotDeviceShared
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.CustomName != "" { //字符串
			do = do.Where(t.CustomName.Like("%" + query.CustomName + "%"))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.Phone != "" { //字符串
			do = do.Where(t.Phone.Like("%" + query.Phone + "%"))
		}
		if query.Email != "" { //字符串
			do = do.Where(t.Email.Like("%" + query.Email + "%"))
		}
		if query.DeviceId != "" { //字符串
			do = do.Where(t.DeviceId.Like("%" + query.DeviceId + "%"))
		}
		if len(query.DeviceIds) != 0 { //
			do = do.Where(t.DeviceId.In(query.DeviceIds...))
		}
		if query.HomeId != 0 { //整数
			do = do.Where(t.HomeId.Eq(query.HomeId))
		}
		if query.Photo != "" { //字符串
			do = do.Where(t.Photo.Like("%" + query.Photo + "%"))
		}
		if query.Sid != 0 { //整数
			do = do.Where(t.Sid.Eq(query.Sid))
		}

		if query.DeviceIdList != nil && len(query.DeviceIdList) > 0 {
			do = do.Where(t.DeviceId.In(query.DeviceIdList...))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TIotDeviceShared
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListIotDeviceShared error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.IotDeviceShared, len(list))
	for i, v := range list {
		result[i] = convert.IotDeviceShared_db2pb(v)
	}
	return result, total, nil
}
