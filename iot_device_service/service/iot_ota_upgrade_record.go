// Code generated by sgen.exe,2022-08-18 08:44:03. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotprotocol"
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_common/iotstruct"
	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_device_service/rpc/rpcClient"
	"cloud_platform/iot_model/db_device/clickhouse/model"
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_device_service/config"
	"cloud_platform/iot_device_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_device/clickhouse/orm"
	ormMysql "cloud_platform/iot_model/db_device/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type IotOtaUpgradeRecordSvc struct {
	Ctx context.Context
}

// ReportUpgradeResult 修改升级进度和结果
func (s *IotOtaUpgradeRecordSvc) ReportUpgradeResult(deviceId, productKey, version, tenantId string, pubId int64, area, fwVer string, otaState string, otaCode *int32, otaProgress *int32) error {
	var dataDB, ok = config.DBMap["iot_device"]
	if !ok {
		return errors.New("数据库未初始化")
	}
	var err error
	t := orm.Use(dataDB).TIotOtaUpgradeRecord
	do := t.WithContext(context.Background())
	var updateField []field.Expr
	dbObj := model.TIotOtaUpgradeRecord{}
	if otaState != "" {
		dbObj.OtaState = otaState
		updateField = append(updateField, t.OtaState)
	}
	if otaProgress != nil {
		dbObj.OtaProgress = *otaProgress
		updateField = append(updateField, t.OtaProgress)
	}
	if otaCode != nil {
		dbObj.OtaCode = *otaCode
		updateField = append(updateField, t.OtaCode)
	}

	//转换ota状态
	if otaState == "Downloading" {
		dbObj.Status = 2 //下载中
	} else if otaState == "Installing" {
		dbObj.Status = 3 //安装中
	} else {
		if *otaCode == 0 {
			dbObj.Status = 4 //成功
		} else {
			dbObj.Status = 5 //失败
		}
	}
	updateField = append(updateField, t.Status)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	} else {
		return errors.New("无任何数据修改")
	}
	do = do.Where(t.DeviceId.Eq(deviceId), t.PublishId.Eq(pubId)) //t.ProductKey.Eq(productKey), t.Version.Eq(version))
	count, _ := do.Count()
	if count > 0 {
		_, err = do.Updates(dbObj)
	} else {
		//升级记录上报
		create := &model.TIotOtaUpgradeRecord{
			Id:              iotutil.GetNextSeqInt64(),
			Version:         version,
			PublishId:       pubId,
			ProductKey:      productKey,
			DeviceId:        deviceId,
			OriginalVersion: fwVer,
			Status:          1,
			IsGray:          1,
			TenantId:        tenantId,
			Area:            area,
		}
		err = do.WithContext(context.Background()).Create(create)
	}

	if err != nil {
		logger.Errorf("UpdateAllIotOtaUpgradeRecord error : %s", err.Error())
		return err
	}
	return nil
}

// 生成升级设备GenerateUpgradeDeviceMySql （备份）
func (s *IotOtaUpgradeRecordSvc) GenerateUpgradeDeviceMySql(req *proto.GenerateUpgradeDeviceRequest) (int64, error) {
	// fixme 请在这里校验参数
	if req.Version == "" {
		return 0, errors.New("升级版本不能为空")
	}
	if req.PublishId == 0 {
		return 0, errors.New("发布编号不能为空")
	}
	if req.IsGray == 0 {
		return 0, errors.New("是否灰度不能为空")
	}
	//如果按比例
	if req.GrayType != 1 {
		if req.GrayScale == 0 {
			return 0, errors.New("灰度比例不能为空")
		}
	}
	if req.TenantId == "" {
		return 0, errors.New("租户不能为空")
	}
	params := []interface{}{}
	str := strings.Builder{}
	str.WriteString("INSERT INTO `iot_device`.`t_iot_ota_upgrade_record` (`id`, `version`, `publish_id`, `product_key`, `device_id`, `original_version`, `status`, `is_gray`, `tenant_id`) ")
	str.WriteString(" select ")
	str.WriteString("? as id,")
	params = append(params, iotutil.GetNextSeqInt64())
	str.WriteString("? as version,")
	params = append(params, req.Version)
	str.WriteString("? as publish_id,")
	params = append(params, req.PublishId)
	str.WriteString("? as product_key,")
	params = append(params, req.ProductKey)
	str.WriteString("C.did as device_id,")
	str.WriteString("C.device_version as original_version,")
	str.WriteString("1 as status,")
	str.WriteString("? as is_gray,")
	params = append(params, req.GrayScale)
	str.WriteString("? as tenant_id,")
	params = append(params, req.TenantId)
	str.WriteString("? as created_at ")
	params = append(params, time.Now())
	str.WriteString(" from ")
	str.WriteString(" (select A.id, A.did, A.product_key, A.device_version,A.tenant_id,@row_num:=@row_num+1 as ROW_NUM from t_iot_device_info as A, (SELECT @row_num:=0) as B " +
		"where A.tenant_id = ? and A.product_key = ? and A.deleted_at is null " +
		"order by RAND()) as C ")

	params = append(params, req.TenantId)
	params = append(params, req.ProductKey)
	//按照比例
	//随机抽取N个激活在线设备
	//按比例抽取N个激活在线设备
	if req.GrayType != 1 {
		str.WriteString(fmt.Sprintf(" where C.ROW_NUM<=(@row_num*%f)", float64(req.GrayScale)/100))
	} else {
		str.WriteString(fmt.Sprintf(" where C.ROW_NUM<=(@row_num*%v)", req.GrayScale))
	}
	db := iotmodel.GetDB()
	tx := db.Exec(str.String(), params...)
	if tx.Error != nil {
		logger.Errorf("CreateIotOtaUpgradeRecord error : %s", tx.Error.Error())
		return 0, tx.Error
	}
	//tx.RowsAffected 实际发送量
	return tx.RowsAffected, nil
}

// 生成升级设备GenerateUpgradeDevice clickhouse
func (s *IotOtaUpgradeRecordSvc) GenerateUpgradeDevice(req *proto.GenerateUpgradeDeviceRequest) (int64, error) {
	if req.Version == "" {
		return 0, errors.New("升级版本不能为空")
	}
	if req.PublishId == 0 {
		return 0, errors.New("发布编号不能为空")
	}
	if req.IsGray == 0 {
		return 0, errors.New("是否灰度不能为空")
	}

	//参数验证（预留）
	switch req.GrayType {
	case 1:
		//
	case 2:
		if req.GrayScale == 0 {
			return 0, errors.New("灰度比例不能为空")
		}
	case 3:
		if len(req.DeviceIds) == 0 {
			return 0, errors.New("设备Id列表不能为空")
		}
	default:
		return 0, errors.New("未知错误")
	}

	if req.TenantId == "" {
		return 0, errors.New("租户不能为空")
	}

	if _, ok := config.DBMap["iot_device"]; !ok {
		return 0, errors.New("数据库未初始化")
	}

	params := []interface{}{}
	str := strings.Builder{}

	if req.GrayType == iotconst.OTA_GRAY_TYPE_DEVICE {
		if req.DeviceIds == nil || len(req.DeviceIds) == 0 {
			return 0, errors.New("DeviceIds不能为空")
		}
		//str.WriteString("select A.id, A.did, A.product_key, A.device_version, A.country,A.tenant_id from t_iot_device_info as A " +
		//	"where A.tenant_id = ? and A.product_key = ? And A.did in ('" + strings.Join(req.DeviceIds, "','") + "') ")
		str.WriteString("select A.id, A.did, A.product_key, A.device_version, A.country,A.tenant_id " +
			"from t_iot_device_info as A " +
			"inner join (" +
			" SELECT did, MAX(created_at) AS latest_created_at  " +
			" FROM t_iot_device_info where tenant_id = ? and product_key = ? And did in ('" + strings.Join(req.DeviceIds, "','") + "') " +
			" GROUP BY did" +
			") as B on A.did=B.did and A.created_at=B.latest_created_at ")// +
			//"where A.tenant_id = ? and A.product_key = ? And A.did in ('" + strings.Join(req.DeviceIds, "','") + "') " )

		params = append(params, req.TenantId)
		params = append(params, req.ProductKey)
	} else {

		sql := "select t1.id, t1.did, t1.product_key, t1.device_version, t1.country,t1.tenant_id " +
			"from t_iot_device_info as t1 " +
			"inner join ( " +
			"SELECT did, MAX(created_at) AS latest_created_at  " +
			"FROM t_iot_device_info where tenant_id = ? and product_key = ? " +
			"GROUP BY did" +
			") as t2 on t1.did=t2.did and t1.created_at=t2.latest_created_at "

		str.WriteString("select * from (select A.*,@row_num:=@row_num+1 as ROW_NUM " +
			"from ("+sql+") as A, " +
			"(SELECT @row_num:=0) as B " +
			//"where A.tenant_id = ? and A.product_key = ? and A.use_type = 0 " +
			"order by RAND() ) as C ")

		params = append(params, req.TenantId)
		params = append(params, req.ProductKey)
		//按照比例
		//随机抽取N个激活在线设备
		//按比例抽取N个激活在线设备
		if req.GrayType == iotconst.OTA_GRAY_TYPE_SCALE {
			str.WriteString(fmt.Sprintf(" where C.ROW_NUM<=(@row_num*%v)", float64(req.GrayScale)/100))
		} else if req.GrayType == iotconst.OTA_GRAY_TYPE_NUMBER {
			str.WriteString(fmt.Sprintf(" where C.ROW_NUM<=%v", req.GrayScale))
		} else {
			return 0, errors.New("灰度方式错误")
		}
	}
	//db := iotmodel.GetDB()
	//var successCount int
	//var totalCount int64 = 0

	//countTx := db.Raw(str.String(), params...).Count(&totalCount)
	//if countTx.Error != nil {
	//	return 0, countTx.Error
	//}
	//if totalCount == 0 {
	//	logger.Errorf("GenerateUpgradeDevice 未找到发布设备 : %s", str.String())
	//	return 0, errors.New("未找到发布设备")
	//}

	//异步处理
	go s.asyncUpgradeDevice(req, str.String(), params)

	//return int64(successCount), nil
	return 0, nil
}

func (s *IotOtaUpgradeRecordSvc) asyncUpgradeDevice(req *proto.GenerateUpgradeDeviceRequest, sql string, params []interface{}) (int, error) {
	db := iotmodel.GetDB()

	var result []struct {
		Id            int64
		Did           string
		ProductKey    string
		DeviceVersion string
		Country       string
	}
	var dataDB, ok = config.DBMap["iot_device"]
	if !ok {
		s.pushPublishRecord(req.PublishId, 0, 0, 4, "数据库未初始化")
		return 0, errors.New("数据库未初始化")
	}
	mysqlTx := db.Raw(sql, params...).Scan(&result)
	if mysqlTx.Error != nil {
		s.pushPublishRecord(req.PublishId, 0, 0, 4, mysqlTx.Error.Error())
		return 0, mysqlTx.Error
	}
	dataTx := orm.Use(dataDB)
	var totalCount int = 0   //总发布记录条数
	var successCount int = 0 //成功记录条数
	var saveCount int = 400  //fen'q
	tRecord := dataTx.TIotOtaUpgradeRecord
	list := []*model.TIotOtaUpgradeRecord{}
	for _, res := range result {
		totalCount++
		version, isAuto, _ := s.getDeviceCachedIsAutoAndVer(res.Did)
		item := &model.TIotOtaUpgradeRecord{
			Id:              iotutil.GetNextSeqInt64(),
			Version:         req.Version,
			PublishId:       req.PublishId,
			ProductKey:      req.ProductKey,
			DeviceId:        res.Did,
			OriginalVersion: res.DeviceVersion,
			Status:          1,
			IsGray:          req.IsGray,
			TenantId:        req.TenantId,
			Area:            res.Country,
			FwVer:           version,
			IsAutoUpgrade:   isAuto,
		}
		list = append(list, item)
		if len(list) == saveCount || totalCount == len(result) {
			err := tRecord.WithContext(context.Background()).Create(list...)
			if err != nil {
				break
			}
			successCount += len(list)
			//如果为强制升级
			if req.UpgradeMode == 2 {
				s.batchPublishNotice(req, list)
			}
			s.batchSetDeviceCached(req, list)
			//清空
			list = make([]*model.TIotOtaUpgradeRecord, 0)
			//推送发布记录
			s.pushPublishRecord(req.PublishId, successCount, totalCount, 4, "发布中")
			continue
		}
	}
	//发布完成状态
	s.pushPublishRecord(req.PublishId, successCount, totalCount, 3, "ok")
	return totalCount, nil
}

func (s *IotOtaUpgradeRecordSvc) getDeviceCachedAutoUpgrade(deviceId string) bool {
	var isAuto bool
	deviceInfo := iotredis.GetClient().HMGet(context.Background(), iotconst.HKEY_DEV_DATA_PREFIX+deviceId, iotconst.FIELD_IS_AUTH_UPGRADE)
	if deviceInfo.Err() != nil {
		return isAuto
	}
	list := deviceInfo.Val()
	if len(list) > 0 {
		isAuto = iotutil.ToString(list[0]) == "true"
	}
	return isAuto
}

func (s *IotOtaUpgradeRecordSvc) getDeviceCachedIsAutoAndVer(deviceId string) (version string, isAuto bool, otaVer string) {
	deviceInfo := iotredis.GetClient().HMGet(context.Background(), iotconst.HKEY_DEV_DATA_PREFIX+deviceId, iotconst.FIELD_IS_FW_VER, iotconst.FIELD_IS_AUTH_UPGRADE, iotconst.FIELD_UPGRADE_OTA_VER)
	if deviceInfo.Err() != nil {
		return
	}
	list := deviceInfo.Val()
	if len(list) > 0 {
		version = iotutil.ToString(list[0])
	}
	if len(list) > 1 {
		isAuto = iotutil.ToString(list[1]) == "true"
	}
	if len(list) > 2 {
		otaVer = iotutil.ToString(list[2])
	}
	return
}

// 设备设备缓存
func (s *IotOtaUpgradeRecordSvc) setDeviceCached(devId string, data map[string]interface{}) error {
	if data == nil || len(data) == 0 || len(devId) == 0 {
		return errors.New("参数异常")
	}
	err := iotredis.GetClient().HMSet(context.Background(), iotconst.HKEY_DEV_DATA_PREFIX+devId, data).Err()
	if err != nil {
		return err
	}
	return nil
}

// 批量设置redis缓存
func (s *IotOtaUpgradeRecordSvc) batchSetDeviceCached(req *proto.GenerateUpgradeDeviceRequest, devices []*model.TIotOtaUpgradeRecord) error {
	for _, device := range devices {
		s.setDeviceCached(device.DeviceId, map[string]interface{}{
			iotconst.FIELD_UPGRADE_HAS:       "true",
			iotconst.FIELD_UPGRADE_MODE:      iotutil.ToString(req.UpgradeMode),
			iotconst.FIELD_UPGRADE_FORCE_VER: device.Version,
			iotconst.FIELD_UPGRADE_TIMEOUT:   req.UpgradeOvertime,
		})
		//是否自动推送升级
		if req.UpgradeMode == 2 && device.IsAutoUpgrade && req.IsAuto == 1 {
			s.publishUpgrade(req, device.DeviceId)
		}
	}
	return nil
}

// 批量设置redis缓存
func (s *IotOtaUpgradeRecordSvc) pushPublishRecord(publishId int64, successCount, totalCount int, status int32, message string) error {
	pushOtaPublishLog(iotstruct.OtaPublishLog{
		PubId:        publishId,
		SuccessCount: int64(successCount),
		TotalCount:   int64(totalCount),
		Message:      message,
		Status:       status,
	})
	return nil
}

// 批量设置redis缓存
func (s *IotOtaUpgradeRecordSvc) batchSetDeviceStopCached(req *proto.GenerateUpgradeDeviceRequest, devices []*model.TIotOtaUpgradeRecord) error {
	for _, device := range devices {
		//如果本次取消的版本
		//ota的版本req.Version
		//fwVer最新的ota版本
		//if i, _ := iotutil.VerCompare(req.Version, device.FwVer); i == 0 {
		s.setDeviceCached(device.DeviceId, map[string]interface{}{
			iotconst.FIELD_UPGRADE_HAS:       "false",
			iotconst.FIELD_UPGRADE_MODE:      0,
			iotconst.FIELD_UPGRADE_FORCE_VER: "",
		})
		//是否自动推送升级 （泼出去的水，已经收不回来了）
		//if device.IsAutoUpgrade {
		//	s.publishUpgrade(req, device.DeviceId)
		//}
		//}
	}
	return nil
}

// 给APP推送升级通知
func (s *IotOtaUpgradeRecordSvc) batchPublishNotice(req *proto.GenerateUpgradeDeviceRequest, devices []*model.TIotOtaUpgradeRecord) error {
	topics := []string{}
	for _, device := range devices {
		if device.IsAutoUpgrade && req.IsAuto == 1 {
			continue
		}
		//只推送，升级设备版本号大于固件本身版本号
		if i, _ := iotutil.VerCompare(device.Version, device.FwVer); i == 1 {
			topics = append(topics, iotprotocol.GetTopic(iotprotocol.TP_E_NOTICE, req.ProductKey, device.DeviceId))
		}
	}
	if len(topics) == 0 {
		return nil
	}
	//TODO 推送时间控制逻辑
	//推送升级通知
	var obj iotprotocol.PackNotice
	buf, _ := obj.Encode(iotprotocol.NOTICE_HEAD_UPGRADE_NOTICE_NAME, map[string]interface{}{
		"version":         req.Version,
		"isGray":          req.IsGray,
		"pubId":           req.PublishId,
		"isAuto":          req.IsAuto,
		"upgradeMode":     req.UpgradeMode,
		"hasForceUpgrade": req.UpgradeMode == 2,
	})
	_, pubErr := rpcClient.ClientMqttService.BatchPublish(context.Background(), &proto.BatchPublishMessage{
		TopicFullNameList: topics,
		MessageContent:    string(buf),
		Qos:               proto.Qos_ExactlyOnce,
		Retained:          false,
	})
	if pubErr != nil {
		logger.Errorf("CreateIotOtaUpgradeRecord BatchPublish error : %s", pubErr.Error())
		return pubErr
	}
	return nil
}

// 给APP推送升级取消通知
func (s *IotOtaUpgradeRecordSvc) batchPublishStopNotice(req *proto.GenerateUpgradeDeviceRequest, devices []*model.TIotOtaUpgradeRecord) error {
	topics := []string{}
	for _, device := range devices {
		//只推送，升级设备版本号大于固件本身版本号
		if i, _ := iotutil.VerCompare(device.Version, device.FwVer); i == 1 {
			topics = append(topics, iotprotocol.GetTopic(iotprotocol.TP_E_NOTICE, req.ProductKey, device.DeviceId))
		}
	}
	//TODO 推送时间控制逻辑
	//推送升级通知
	var obj iotprotocol.PackNotice
	buf, _ := obj.Encode(iotprotocol.NOTICE_HEAD_UPGRADE_NOTICE_NAME, map[string]interface{}{
		"version":         req.Version,
		"isGray":          req.IsGray,
		"pubId":           req.PublishId,
		"isAuto":          0,
		"upgradeMode":     0,
		"hasForceUpgrade": false,
	})
	_, pubErr := rpcClient.ClientMqttService.BatchPublish(context.Background(), &proto.BatchPublishMessage{
		TopicFullNameList: topics,
		MessageContent:    string(buf),
		Qos:               proto.Qos_ExactlyOnce,
		Retained:          false,
	})
	if pubErr != nil {
		logger.Errorf("CreateIotOtaUpgradeRecord BatchPublish error : %s", pubErr.Error())
		return pubErr
	}
	return nil
}

// 给APP推送升级通知
func (s *IotOtaUpgradeRecordSvc) publishUpgrade(req *proto.GenerateUpgradeDeviceRequest, deviceId string) error {
	if req.UpgradeOvertime == 0 {
		req.UpgradeOvertime = 300
	}
	mcuUrl := ""
	otaType := "module_ota_all"
	switch req.FirmwareType {
	case iotconst.FIRMWARE_TYPE_MODULE:
		//模组升级
	case iotconst.FIRMWARE_TYPE_BLE, iotconst.FIRMWARE_TYPE_ZIGBEE, iotconst.FIRMWARE_TYPE_EXTAND, iotconst.FIRMWARE_TYPE_MCU:
		//如果是mcu模组，则推送mcu升级 module_mcu_all
		otaType = "module_mcu_all"
		mcuUrl = req.FirmwareUrl
	}
	//推送升级通知
	var obj iotprotocol.PackUpgrade
	params := iotprotocol.UpgradeDetailParam{
		Chanel:     1, //升级渠道（1-云端、2-APP）
		OtaVer:     req.Version,
		PubId:      iotutil.ToString(req.PublishId),
		PointVer:   req.SpecifiedVersion,
		BaseVer:    "",
		McuBaseVer: "",
		OtaType:    otaType,         //
		AppURL:     req.FirmwareUrl, //
		McuURL:     mcuUrl,
		Md5:        req.FirmwareMd5, //
		Timeout:    req.UpgradeOvertime,
	}
	params.AppURL = strings.Replace(req.FirmwareUrl, "https://", "http://", 1)
	if req.FirmwareType == 3 {
		params.OtaType = "module_mcu_all"
	}
	topic := iotprotocol.GetTopic(iotprotocol.TP_C_UPGRADE, req.ProductKey, deviceId)
	buf, _ := obj.Encode("", params)
	_, pubErr := rpcClient.ClientMqttService.Publish(context.Background(), &proto.PublishMessage{
		TopicFullName:  topic,
		MessageContent: string(buf),
		Qos:            proto.Qos_ExactlyOnce,
		Retained:       false, //TODO  需要考虑设备离线的情况，true，设备上线的时候，检测设备的升级状态，并推送升级
	})
	if pubErr != nil {
		logger.Errorf("CreateIotOtaUpgradeRecord BatchPublish error : %s", pubErr.Error())
		return pubErr
	}
	return nil
}

// DeviceSimpleInfo 设备简单信息
type DeviceSimpleInfo struct {
	Id            int64
	Did           string
	ProductKey    string
	DeviceVersion string
	Country       string
}

func (s *IotOtaUpgradeRecordSvc) GenerateUpgradeDeviceAll(req *proto.GenerateUpgradeDeviceRequest) (int64, error) {
	if req.IsGray != 1 {
		return 0, errors.New("是否灰度不能为空")
	}
	if req.TenantId == "" {
		return 0, errors.New("租户不能为空")
	}

	t := ormMysql.Use(iotmodel.GetDB()).TIotDeviceTriad
	//do := t.WithContext(context.Background()).Where(t.ProductKey.Eq(req.ProductKey), t.UseType.Eq(0), t.Status.Eq(1))
	do := t.WithContext(context.Background()).Where(t.ProductKey.Eq(req.ProductKey))
	totalCount, errCount := do.Count()
	if errCount != nil {
		return 0, errCount
	}
	if totalCount == 0 {
		return 0, errors.New("无设备数据")
	}
	if _, ok := config.DBMap["iot_device"]; !ok {
		return 0, errors.New("数据库未初始化")
	}
	go s.asyncPublishOta(totalCount, req)

	return totalCount, nil
}

func (s IotOtaUpgradeRecordSvc) asyncPublishOta(totalCount int64, req *proto.GenerateUpgradeDeviceRequest) error {
	t := ormMysql.Use(iotmodel.GetDB()).TIotDeviceTriad
	do := t.WithContext(context.Background()).Where(t.ProductKey.Eq(req.ProductKey)) //, t.Status.Eq(1)

	var limit int = 500
	pageCount := int(math.Ceil(float64(totalCount) / float64(limit)))
	if pageCount == 0 {
		s.pushPublishRecord(req.PublishId, 0, 0, 4, "无设备数据")
		return errors.New("无设备数据")
	}
	var dataDB, ok = config.DBMap["iot_device"]
	if !ok {
		s.pushPublishRecord(req.PublishId, 0, int(totalCount), 4, "数据库未初始化")
		return errors.New("数据库未初始化")
	}
	dataTx := orm.Use(dataDB)
	var successCount int = 0
	for page := 1; page <= pageCount; page++ {
		offset := limit * (page - 1)
		var result []DeviceSimpleInfo
		_, err := do.ScanByPage(&result, offset, limit)
		if err != nil {
			return err
		}
		if len(result) == 0 {
			break
		}
		tRecord := dataTx.TIotOtaUpgradeRecord
		list := []*model.TIotOtaUpgradeRecord{}
		for _, res := range result {
			version, isAuto, _ := s.getDeviceCachedIsAutoAndVer(res.Did)
			list = append(list, &model.TIotOtaUpgradeRecord{
				Id:              iotutil.GetNextSeqInt64(),
				Version:         req.Version,
				PublishId:       req.PublishId,
				ProductKey:      req.ProductKey,
				DeviceId:        res.Did,
				OriginalVersion: res.DeviceVersion,
				Status:          1,
				IsGray:          req.IsGray,
				TenantId:        req.TenantId,
				Area:            res.Country,
				FwVer:           version,
				IsAutoUpgrade:   isAuto,
			})
		}
		err = tRecord.WithContext(context.Background()).Create(list...)
		if err != nil {
			break
		}
		//如果为强制升级
		if req.UpgradeMode == 2 {
			s.batchPublishNotice(req, list)
		}
		s.batchSetDeviceCached(req, list)
		successCount += len(list)
		s.pushPublishRecord(req.PublishId, successCount, int(totalCount), 4, "发布中")
		//清空
		list = make([]*model.TIotOtaUpgradeRecord, 0)
	}
	s.pushPublishRecord(req.PublishId, successCount, int(totalCount), 3, "ok")
	return nil
}

func (s *IotOtaUpgradeRecordSvc) StopUpgradeDevice(req *proto.GenerateUpgradeDeviceRequest) (int64, error) {
	if req.TenantId == "" {
		return 0, errors.New("租户不能为空")
	}
	var dataDB, ok = config.DBMap["iot_device"]
	if !ok {
		return 0, errors.New("数据库未初始化")
	}

	t := orm.Use(dataDB).TIotOtaUpgradeRecord
	do := t.WithContext(context.Background())
	do = do.Where(t.PublishId.Eq(req.PublishId))

	totalCount, err := do.Count()
	if err != nil {
		return 0, errors.New("数据库未初始化")
	}

	go s.asyncStopOtaRecord(totalCount, req)

	return totalCount, nil
}

// 异步定制ota
func (s IotOtaUpgradeRecordSvc) asyncStopOtaRecord(totalCount int64, req *proto.GenerateUpgradeDeviceRequest) error {
	var dataDB, ok = config.DBMap["iot_device"]
	if !ok {
		return errors.New("数据库未初始化")
	}

	t := orm.Use(dataDB).TIotOtaUpgradeRecord
	do := t.WithContext(context.Background())
	do = do.Where(t.PublishId.Eq(req.PublishId))

	var page int = 1
	var limit int64 = 500
	pageCount := int(math.Ceil(float64(totalCount) / float64(limit)))
	if pageCount == 0 {
		return errors.New("无设备数据")
	}
	var successCount int = 0
	for i := 0; i < pageCount; i++ {
		offset := int(limit) * (page - 1)
		pageList, _, err := do.Order(t.DeviceId).FindByPage(int(offset), int(limit))
		if err != nil {
			logger.Errorf("StopUpgradeDevice error : offset:%v,limit:%v,err:%v", offset, limit, err.Error())
			continue
		}
		list := []*model.TIotOtaUpgradeRecord{}
		for _, res := range pageList {
			_, isAuto, otaVer := s.getDeviceCachedIsAutoAndVer(res.DeviceId)
			list = append(list, &model.TIotOtaUpgradeRecord{
				Id:              iotutil.GetNextSeqInt64(),
				Version:         res.Version,
				PublishId:       res.PublishId,
				ProductKey:      res.ProductKey,
				DeviceId:        res.DeviceId,
				OriginalVersion: res.Version,
				Status:          1,
				IsGray:          res.IsGray,
				TenantId:        res.TenantId,
				Area:            res.Area,
				FwVer:           otaVer,
				IsAutoUpgrade:   isAuto,
			})
		}
		//如果为强制升级
		//if req.UpgradeMode == 2 {
		//	s.batchPublishStopNotice(req, list)
		//}
		s.batchSetDeviceStopCached(req, list)
		//统计执行总数
		successCount = successCount + len(list)
		//清空
		list = make([]*model.TIotOtaUpgradeRecord, 0)
	}
	return nil
}

// 创建IotOtaUpgradeRecord
func (s *IotOtaUpgradeRecordSvc) CreateIotOtaUpgradeRecord(req *proto.IotOtaUpgradeRecord) (*proto.IotOtaUpgradeRecord, error) {
	// fixme 请在这里校验参数
	var dataDB, ok = config.DBMap["iot_device"]
	if !ok {
		return nil, errors.New("数据库未初始化")
	}
	t := orm.Use(dataDB).TIotOtaUpgradeRecord
	do := t.WithContext(context.Background())
	dbObj := convert.IotOtaUpgradeRecord_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateIotOtaUpgradeRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除IotOtaUpgradeRecord
func (s *IotOtaUpgradeRecordSvc) DeleteIotOtaUpgradeRecord(req *proto.IotOtaUpgradeRecord) (*proto.IotOtaUpgradeRecord, error) {
	var dataDB, ok = config.DBMap["iot_device"]
	if !ok {
		return nil, errors.New("数据库未初始化")
	}
	t := orm.Use(dataDB).TIotOtaUpgradeRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.PublishId != 0 { //整数
		do = do.Where(t.PublishId.Eq(req.PublishId))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.DeviceId != "" { //字符串
		do = do.Where(t.DeviceId.Eq(req.DeviceId))
	}
	if req.OriginalVersion != "" { //字符串
		do = do.Where(t.OriginalVersion.Eq(req.OriginalVersion))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.IsGray != 0 { //整数
		do = do.Where(t.IsGray.Eq(req.IsGray))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteIotOtaUpgradeRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除IotOtaUpgradeRecord
func (s *IotOtaUpgradeRecordSvc) DeleteByIdIotOtaUpgradeRecord(req *proto.IotOtaUpgradeRecord) (*proto.IotOtaUpgradeRecord, error) {
	var dataDB, ok = config.DBMap["iot_device"]
	if !ok {
		return nil, errors.New("数据库未初始化")
	}
	t := orm.Use(dataDB).TIotOtaUpgradeRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdIotOtaUpgradeRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除IotOtaUpgradeRecord
func (s *IotOtaUpgradeRecordSvc) DeleteByIdsIotOtaUpgradeRecord(req *proto.IotOtaUpgradeRecordBatchDeleteRequest) (*proto.IotOtaUpgradeRecordBatchDeleteRequest, error) {
	var err error
	var dataDB, ok = config.DBMap["iot_device"]
	if !ok {
		return nil, errors.New("数据库未初始化")
	}
	t := orm.Use(dataDB).TIotOtaUpgradeRecord
	for _, k := range req.Keys {
		do := t.WithContext(context.Background())
		do = do.Where(t.Id.Eq(k.Id))
		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsIotOtaUpgradeRecord error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新IotOtaUpgradeRecord
func (s *IotOtaUpgradeRecordSvc) UpdateIotOtaUpgradeRecord(req *proto.IotOtaUpgradeRecord) (*proto.IotOtaUpgradeRecord, error) {
	var dataDB, ok = config.DBMap["iot_device"]
	if !ok {
		return nil, errors.New("数据库未初始化")
	}
	t := orm.Use(dataDB).TIotOtaUpgradeRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Version != "" { //字符串
		updateField = append(updateField, t.Version)
	}
	if req.PublishId != 0 { //整数
		updateField = append(updateField, t.PublishId)
	}
	if req.ProductKey != "" { //字符串
		updateField = append(updateField, t.ProductKey)
	}
	if req.DeviceId != "" { //字符串
		updateField = append(updateField, t.DeviceId)
	}
	if req.OriginalVersion != "" { //字符串
		updateField = append(updateField, t.OriginalVersion)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.IsGray != 0 { //整数
		updateField = append(updateField, t.IsGray)
	}
	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.TenantId)
	}
	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.OtaState)
	}
	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.OtaProgress)
	}
	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.OtaCode)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateIotOtaUpgradeRecord error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.IotOtaUpgradeRecord_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateIotOtaUpgradeRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段IotOtaUpgradeRecord
func (s *IotOtaUpgradeRecordSvc) UpdateAllIotOtaUpgradeRecord(req *proto.IotOtaUpgradeRecord) (*proto.IotOtaUpgradeRecord, error) {
	var dataDB, ok = config.DBMap["iot_device"]
	if !ok {
		return nil, errors.New("数据库未初始化")
	}
	t := orm.Use(dataDB).TIotOtaUpgradeRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Version)
	updateField = append(updateField, t.PublishId)
	updateField = append(updateField, t.ProductKey)
	updateField = append(updateField, t.DeviceId)
	updateField = append(updateField, t.OriginalVersion)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.IsGray)
	updateField = append(updateField, t.TenantId)
	updateField = append(updateField, t.OtaState)
	updateField = append(updateField, t.OtaProgress)
	updateField = append(updateField, t.OtaCode)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllIotOtaUpgradeRecord error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotOtaUpgradeRecord_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllIotOtaUpgradeRecord error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *IotOtaUpgradeRecordSvc) UpdateFieldsIotOtaUpgradeRecord(req *proto.IotOtaUpgradeRecordUpdateFieldsRequest) (*proto.IotOtaUpgradeRecord, error) {
	var dataDB, ok = config.DBMap["iot_device"]
	if !ok {
		return nil, errors.New("数据库未初始化")
	}
	t := orm.Use(dataDB).TIotOtaUpgradeRecord
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsIotOtaUpgradeRecord error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsIotOtaUpgradeRecord error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotOtaUpgradeRecord_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsIotOtaUpgradeRecord error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找IotOtaUpgradeRecord
func (s *IotOtaUpgradeRecordSvc) FindIotOtaUpgradeRecord(req *proto.IotOtaUpgradeRecordFilter) (*proto.IotOtaUpgradeRecord, error) {
	var dataDB, ok = config.DBMap["iot_device"]
	if !ok {
		return nil, errors.New("数据库未初始化")
	}
	t := orm.Use(dataDB).TIotOtaUpgradeRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.PublishId != 0 { //整数
		do = do.Where(t.PublishId.Eq(req.PublishId))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.DeviceId != "" { //字符串
		do = do.Where(t.DeviceId.Eq(req.DeviceId))
	}
	if req.OriginalVersion != "" { //字符串
		do = do.Where(t.OriginalVersion.Eq(req.OriginalVersion))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.IsGray != 0 { //整数
		do = do.Where(t.IsGray.Eq(req.IsGray))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindIotOtaUpgradeRecord error : %s", err.Error())
		return nil, err
	}
	res := convert.IotOtaUpgradeRecord_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找IotOtaUpgradeRecord
func (s *IotOtaUpgradeRecordSvc) FindByIdIotOtaUpgradeRecord(req *proto.IotOtaUpgradeRecordFilter) (*proto.IotOtaUpgradeRecord, error) {
	var dataDB, ok = config.DBMap["iot_device"]
	if !ok {
		return nil, errors.New("数据库未初始化")
	}
	t := orm.Use(dataDB).TIotOtaUpgradeRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdIotOtaUpgradeRecord error : %s", err.Error())
		return nil, err
	}
	res := convert.IotOtaUpgradeRecord_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找IotOtaUpgradeRecord,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *IotOtaUpgradeRecordSvc) GetListIotOtaUpgradeRecord(req *proto.IotOtaUpgradeRecordListRequest) ([]*proto.IotOtaUpgradeRecord, int64, []*StatusTotal, error) {
	var err error
	var dataDB, ok = config.DBMap["iot_device"]
	if !ok {
		return nil, 0, nil, errors.New("数据库未初始化")
	}
	t := orm.Use(dataDB).TIotOtaUpgradeRecord
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Version != "" { //字符串
			do = do.Where(t.Version.Eq(query.Version))
		}
		if query.PublishId != 0 { //整数
			do = do.Where(t.PublishId.Eq(query.PublishId))
		}
		if query.ProductKey != "" { //字符串
			do = do.Where(t.ProductKey.Eq(query.ProductKey))
		}
		if query.DeviceId != "" { //字符串
			do = do.Where(t.DeviceId.Eq(query.DeviceId))
		}
		if query.OriginalVersion != "" { //字符串
			do = do.Where(t.OriginalVersion.Eq(query.OriginalVersion))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.StatusList != nil && len(query.StatusList) > 0 { //整数
			do = do.Where(t.Status.In(query.StatusList...))
		}
		if query.IsGray != 0 { //整数
			do = do.Where(t.IsGray.Eq(query.IsGray))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Eq(query.TenantId))
		}
		if query.Area != "" { //字符串
			do = do.Where(t.Area.Eq(query.Area))
		}
	}

	var list []*model.TIotOtaUpgradeRecord
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.Order(t.DeviceId).FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Order(t.DeviceId).Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListIotOtaUpgradeRecord error : %s", err.Error())
		return nil, 0, nil, err
	}

	//统计总数
	var statusTotal []*StatusTotal
	err = t.WithContext(context.Background()).Where(t.PublishId.Eq(req.Query.PublishId)).Group(t.Status).Select(t.Id.Count().As("count"), t.Status).Scan(&statusTotal)
	if err != nil {
		logger.Errorf("GetListIotOtaUpgradeRecord total error : %s", err.Error())
		return nil, 0, nil, err
	}
	if len(list) == 0 {
		return nil, total, statusTotal, nil
	}
	result := make([]*proto.IotOtaUpgradeRecord, len(list))
	for i, v := range list {
		result[i] = convert.IotOtaUpgradeRecord_db2pb(v)
	}
	return result, total, statusTotal, nil
}

type StatusTotal struct {
	Status int32 `json:"status"`
	Count  int64 `json:"count"`
}
