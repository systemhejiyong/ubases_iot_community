// Code generated by sgen.exe,2022-04-21 13:46:11. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/ioterrs"
	"cloud_platform/iot_common/iotlogger"
	"cloud_platform/iot_common/iotprotocol"
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_common/iotstruct"
	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_device_service/config"
	"cloud_platform/iot_device_service/rpc/rpcClient"
	"cloud_platform/iot_smart_speaker_service/cached"
	"context"
	"errors"
	"sort"
	"strings"

	goerrors "go-micro.dev/v4/errors"

	"gorm.io/gorm"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_device_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_device/model"
	"cloud_platform/iot_model/db_device/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type IotDeviceHomeSvc struct {
	Ctx context.Context
}

// 事务创建调用此方法
func (s *IotDeviceHomeSvc) TranCreate(tx *orm.Query, req *model.TIotDeviceHome) error {
	do := tx.TIotDeviceHome.WithContext(context.Background())
	//TODO 先删除原来的绑定关系信息
	_, err := do.Where(tx.TIotDeviceHome.DeviceId.Eq(req.DeviceId)).Delete()
	if err != nil {
		logger.Errorf("TransalteCreate delete old error : %s", err.Error())
		return err
	}
	err = do.Create(req)
	if err != nil {
		logger.Errorf("TransalteCreate error : %s", err.Error())
		return err
	}
	return nil
}

// 创建IotDeviceHome
func (s *IotDeviceHomeSvc) CreateIotDeviceHome(req *proto.IotDeviceHome) (*proto.IotDeviceHome, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TIotDeviceHome
	do := t.WithContext(context.Background())
	dbObj := convert.IotDeviceHome_pb2db(req)
	err := do.Save(dbObj)
	if err != nil {
		logger.Errorf("CreateIotDeviceHome error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除IotDeviceHome
func (s *IotDeviceHomeSvc) DeleteIotDeviceHome(req *proto.IotDeviceHome) (*proto.IotDeviceHome, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceHome
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.HomeId != 0 { //整数
		do = do.Where(t.HomeId.Eq(req.HomeId))
	}
	if req.DeviceId != "" { //字符串
		do = do.Where(t.DeviceId.Eq(req.DeviceId))
	}
	if req.RoomId != 0 { //整数
		do = do.Where(t.RoomId.Eq(req.RoomId))
	}
	if req.CustomName != "" { //字符串
		do = do.Where(t.CustomName.Eq(req.CustomName))
	}
	if req.CustomPic != "" { //字符串
		do = do.Where(t.CustomPic.Eq(req.CustomPic))
	}
	if req.Secrtkey != "" { //字符串
		do = do.Where(t.Secrtkey.Eq(req.Secrtkey))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteIotDeviceHome error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除IotDeviceHome
func (s *IotDeviceHomeSvc) DeleteByIdIotDeviceHome(req *proto.IotDeviceHome) (*proto.IotDeviceHome, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceHome
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdIotDeviceHome error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除IotDeviceHome
func (s *IotDeviceHomeSvc) DeleteByIdsIotDeviceHome(req *proto.IotDeviceHomeBatchDeleteRequest) (*proto.IotDeviceHomeBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TIotDeviceHome
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsIotDeviceHome error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新IotDeviceHome
func (s *IotDeviceHomeSvc) UpdateIotDeviceHome(req *proto.IotDeviceHome) (*proto.IotDeviceHome, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceHome
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.HomeId != 0 { //整数
		updateField = append(updateField, t.HomeId)
	}
	if req.DeviceId != "" { //字符串
		updateField = append(updateField, t.DeviceId)
	}
	if req.RoomId != 0 { //整数
		updateField = append(updateField, t.RoomId)
	}
	if req.CustomName != "" { //字符串
		updateField = append(updateField, t.CustomName)
	}
	if req.CustomPic != "" { //字符串
		updateField = append(updateField, t.CustomPic)
	}
	if req.Secrtkey != "" { //字符串
		updateField = append(updateField, t.Secrtkey)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateIotDeviceHome error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.IotDeviceHome_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateIotDeviceHome error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段IotDeviceHome
func (s *IotDeviceHomeSvc) UpdateAllIotDeviceHome(req *proto.IotDeviceHome) (*proto.IotDeviceHome, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceHome
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.HomeId)
	updateField = append(updateField, t.DeviceId)
	updateField = append(updateField, t.RoomId)
	updateField = append(updateField, t.CustomName)
	updateField = append(updateField, t.BindTime)
	updateField = append(updateField, t.CustomPic)
	updateField = append(updateField, t.Secrtkey)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllIotDeviceHome error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceHome_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllIotDeviceHome error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *IotDeviceHomeSvc) UpdateFieldsIotDeviceHome(req *proto.IotDeviceHomeUpdateFieldsRequest) (*proto.IotDeviceHome, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceHome
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsIotDeviceHome error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsIotDeviceHome error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceHome_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsIotDeviceHome error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找IotDeviceHome
func (s *IotDeviceHomeSvc) FindIotDeviceHome(req *proto.IotDeviceHomeFilter) (*proto.IotDeviceHome, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceHome
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.HomeId != 0 { //整数
		do = do.Where(t.HomeId.Eq(req.HomeId))
	}
	if req.DeviceId != "" { //字符串
		do = do.Where(t.DeviceId.Eq(req.DeviceId))
	}
	if req.RoomId != 0 { //整数
		do = do.Where(t.RoomId.Eq(req.RoomId))
	}
	if req.CustomName != "" { //字符串
		do = do.Where(t.CustomName.Eq(req.CustomName))
	}
	if req.CustomPic != "" { //字符串
		do = do.Where(t.CustomPic.Eq(req.CustomPic))
	}
	if req.Secrtkey != "" { //字符串
		do = do.Where(t.Secrtkey.Eq(req.Secrtkey))
	}
	if req.AppPanelType != 0 { //整数
		do = do.Where(t.AppPanelType.Eq(req.AppPanelType))
	}
	if req.PanelId != 0 { //整数
		do = do.Where(t.PanelId.Eq(req.PanelId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindIotDeviceHome error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceHome_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找IotDeviceHome
func (s *IotDeviceHomeSvc) FindByIdIotDeviceHome(req *proto.IotDeviceHomeFilter) (*proto.IotDeviceHome, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceHome
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdIotDeviceHome error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceHome_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找IotDeviceHome,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *IotDeviceHomeSvc) GetListIotDeviceHome(req *proto.IotDeviceHomeListRequest) ([]*proto.IotDeviceHome, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TIotDeviceHome
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.HomeId != 0 { //整数
			do = do.Where(t.HomeId.Eq(query.HomeId))
		}
		if query.DeviceId != "" { //字符串
			do = do.Where(t.DeviceId.Like("%" + query.DeviceId + "%"))
		}
		if query.RoomId != 0 { //整数
			do = do.Where(t.RoomId.Eq(query.RoomId))
		}
		if query.CustomName != "" { //字符串
			do = do.Where(t.CustomName.Like("%" + query.CustomName + "%"))
		}
		if query.CustomPic != "" { //字符串
			do = do.Where(t.CustomPic.Like("%" + query.CustomPic + "%"))
		}
		if query.Secrtkey != "" { //字符串
			do = do.Where(t.Secrtkey.Like("%" + query.Secrtkey + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TIotDeviceHome
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListIotDeviceHome error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.IotDeviceHome, len(list))
	for i, v := range list {
		result[i] = convert.IotDeviceHome_db2pb(v)
	}
	return result, total, nil
}

func (s *IotDeviceHomeSvc) GetDevCountByHomeRoom(req *proto.IotDeviceHomeDevCount) ([]*proto.DevCountByHomeRoom, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceHome
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	result := make([]map[string]interface{}, 0)
	homeId := req.HomeId
	err := do.WithContext(context.Background()).Select(t.HomeId.As("homeId"), t.Id.Count().As("devCount"), t.RoomId.As("roomId")).
		Where(t.HomeId.Eq(homeId)).Group(t.HomeId, t.RoomId).Scan(&result)

	devCountResult := []*proto.DevCountByHomeRoom{}
	for _, v := range result {
		devCountResult = append(devCountResult, &proto.DevCountByHomeRoom{
			DevCount: iotutil.ToInt32(v["devCount"]),
			HomeId:   iotutil.ToInt64(v["homeId"]),
			RoomId:   iotutil.ToInt64(v["roomId"]),
		})
	}
	return devCountResult, err
}

// 根据分页条件查找IotDeviceHome,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *IotDeviceHomeSvc) UserDevCount(req *proto.IotUserHomeDev) ([]*proto.IotDeviceHome, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TIotDeviceHome
	do := t.WithContext(context.Background())
	//query := req.Query
	//if query != nil {

	//if query.Id != 0 { //整数
	//	do = do.Where(t.Id.Eq(query.Id))
	//}
	//if query.HomeId != 0 { //整数
	do = do.Where(t.HomeId.In(req.HomeIds...))
	//}
	//if query.DeviceId != "" { //字符串
	//	do = do.Where(t.DeviceId.Like("%" + query.DeviceId + "%"))
	//}
	//if query.RoomId != 0 { //整数
	//	do = do.Where(t.RoomId.Eq(query.RoomId))
	//}
	//if query.CustomName != "" { //字符串
	//	do = do.Where(t.CustomName.Like("%" + query.CustomName + "%"))
	//}
	//if query.CustomPic != "" { //字符串
	//	do = do.Where(t.CustomPic.Like("%" + query.CustomPic + "%"))
	//}
	//if query.Secrtkey != "" { //字符串
	//	do = do.Where(t.Secrtkey.Like("%" + query.Secrtkey + "%"))
	//}
	//if query.CreatedBy != 0 { //整数
	//	do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
	//}
	//if query.UpdatedBy != 0 { //整数
	//	do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
	//}
	//}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TIotDeviceHome
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListIotDeviceHome error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.IotDeviceHome, len(list))
	for i, v := range list {
		result[i] = convert.IotDeviceHome_db2pb(v)
	}
	return result, total, nil
}

// 根据分页条件查找IotDeviceHome,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *IotDeviceHomeSvc) UserDevList(homeId int64) ([]*proto.IotDevInfo, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	var q = orm.Use(iotmodel.GetDB())
	tIotDeviceHome := q.TIotDeviceHome
	tIotDeviceInfo := q.TIotDeviceInfo
	do := tIotDeviceHome.WithContext(context.Background()).LeftJoin(tIotDeviceInfo, tIotDeviceHome.DeviceId.EqCol(tIotDeviceInfo.Did))

	do = do.Where(tIotDeviceHome.HomeId.Eq(homeId), tIotDeviceInfo.DeletedAt.IsNull())
	var list []*model.TIotDeviceInfo
	var total int64
	err = do.Select(tIotDeviceInfo.ALL).Scan(&list)
	total = int64(len(list))
	if err != nil {
		logger.Errorf("GetListIotDeviceHome error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.IotDevInfo, len(list))
	for i, v := range list {
		result[i] = convert.IotDevInfo_db2pb(v)
	}
	return result, total, nil
}

func (s *IotDeviceHomeSvc) HomeDevCount(req *proto.IotDeviceHomeHomeId) (*proto.IotHomeDevCountResponse, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceHome
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	result := proto.IotHomeDevCountResponse{}
	var devCountResult []*struct {
		DevCount int32 `gorm:"column:devCount;default:0" json:"devCount"`
		HomeId   int64 `gorm:"column:homeId" json:"homeId"`
	}
	homeIds := req.HomeIds
	err := do.WithContext(context.Background()).Select(t.Id.Count().As("devCount"), t.HomeId.As("homeId")).Group(t.HomeId).
		Where(t.HomeId.In(homeIds...)).Scan(&devCountResult)
	if err != nil {
		logger.Errorf("HomeDevCount error : %s", err.Error())
		return nil, err
	}
	result.DevCounts = map[int64]int32{}
	if devCountResult != nil {
		for _, v := range devCountResult {
			result.DevCounts[v.HomeId] = v.DevCount
		}
	}
	return &result, nil
}

func (s *IotDeviceHomeSvc) HomeDevList(homeId int64, homeIds []int64) ([]*proto.IotDevInfo, error) {
	logger.Infof("GetListIotDeviceHome in : %d, homeIds: %v", homeId, homeIds)

	var err error
	var q = orm.Use(iotmodel.GetDB())
	tIotDeviceHome := q.TIotDeviceHome
	tIotDeviceInfo := q.TIotDeviceInfo
	do := tIotDeviceHome.WithContext(context.Background()).
		LeftJoin(tIotDeviceInfo, tIotDeviceHome.DeviceId.EqCol(tIotDeviceInfo.Did))

	if homeId == 0 && (homeIds == nil || len(homeIds) == 0) {
		return nil, errors.New("参数错误")
	}

	if homeId == 0 && homeIds != nil && len(homeIds) > 0 {
		do = do.Where(tIotDeviceHome.HomeId.In(homeIds...), tIotDeviceInfo.DeletedAt.IsNull())
	} else {
		do = do.Where(tIotDeviceHome.HomeId.Eq(homeId), tIotDeviceInfo.DeletedAt.IsNull())
	}
	var list []*convert.TIotDeviceInfoData
	err = do.Select(tIotDeviceInfo.ALL, tIotDeviceHome.ProductKey,
		tIotDeviceHome.RoomId, tIotDeviceHome.CustomName, tIotDeviceHome.Secrtkey,
		tIotDeviceHome.HomeId, tIotDeviceHome.Sort, tIotDeviceHome.BindTime, tIotDeviceHome.PanelId, tIotDeviceHome.AppPanelType).
		Order(tIotDeviceHome.Sort).
		Scan(&list)
	if err != nil {
		logger.Errorf("GetListIotDeviceHome error : %s", err.Error())
		return nil, err
	}
	if len(list) == 0 {
		return nil, nil
	}
	result := make([]*proto.IotDevInfo, len(list))
	var MqttServer string
	if len(config.Global.AppMQTT.Addrs) > 0 {
		MqttServer = config.Global.AppMQTT.Addrs[0]
	} else {
		MqttServer = "ws://120.77.64.252:8883/mqtt"
	}
	for i, v := range list {
		devInfo := convert.IotDevInfo_db2pbNew(v)
		devInfo.RoomId = v.RoomId
		devInfo.SecretKey = v.Salt
		devInfo.MqttServer = MqttServer
		devInfo.ProductPic = v.ProductKey
		devInfo.ProductKey = v.ProductKey
		devInfo.OnlineStatus = 0
		devInfo.Switch = 0
		//读取设备列表
		deviceStatus, redisErr := iotredis.GetClient().HGetAll(context.Background(), iotconst.HKEY_DEV_DATA_PREFIX+v.Did).Result()
		iotlogger.LogHelper.Info("deviceStatus:", deviceStatus)
		if redisErr == nil {
			if val, ok := deviceStatus["onlineStatus"]; ok {
				if val == "online" {
					devInfo.OnlineStatus = 1
				} else {
					devInfo.OnlineStatus = 0
				}
			}
			if val, ok := deviceStatus["1"]; ok {
				if val == "true" {
					devInfo.Switch = 1
				} else {
					devInfo.Switch = 0
				}
			}
		}
		result[i] = devInfo
	}
	//根据sort进行排序
	sort.Slice(result, func(i, j int) bool {
		return result[i].BindTime.AsTime().Unix() > result[j].BindTime.AsTime().Unix()
	})
	return result, nil
}

func (s *IotDeviceHomeSvc) RemoveDev(request *proto.RemoveDevRequest) error {
	q := orm.Use(iotmodel.GetDB())
	q.Transaction(func(tx *orm.Query) error {
		t := tx.TIotDeviceHome
		tIotDeviceHomeDo := t.WithContext(context.Background())

		devIds := []string{}
		if request.DevId != "" {
			//request.RoomId必传
			devIds = append(devIds, request.DevId)
			tIotDeviceHomeDo = tIotDeviceHomeDo.Where(t.RoomId.Eq(iotutil.ToInt64(request.RoomId)))
		} else if len(request.DevIdList) > 0 {
			devIds = request.DevIdList
		} else {
			logger.Errorf("设备id参数有误")
			return errors.New("设备id参数有误")
		}
		if request.DevId != "" {
			_, err := tIotDeviceHomeDo.Select(t.RoomId).UpdateColumn(t.RoomId, 0)

			if err != nil {
				logger.Errorf("RemoveDev error : %s", err.Error())
				return err
			}
		} else {
			deviceHomes, err := tIotDeviceHomeDo.Where(t.HomeId.Eq(iotutil.ToInt64(request.HomeId)),
				t.DeviceId.In(devIds...)).Find()
			if err != nil {
				return err
			}
			_, err = tIotDeviceHomeDo.Where(t.HomeId.Eq(iotutil.ToInt64(request.HomeId)),
				t.DeviceId.In(devIds...)).Delete()

			if err != nil {
				logger.Errorf("RemoveDev error : %s", err.Error())
				return err
			}

			if len(request.DevIdList) > 0 {
				//还原设备三元组
				tTriad := tx.TIotDeviceTriad
				doTriad := tTriad.WithContext(context.Background())
				deviceList, err := doTriad.Where(tTriad.Did.In(request.DevIdList...)).Find()
				if err != nil {
					return err
				}
				if len(deviceList) == 0 {
					logger.Errorf("RemoveDev query deviceTriad :  not found")
					return errors.New("未找到三元组数据")
				}
				virtualDevIds := []string{}
				normalDevIds := []string{}
				for _, dev := range deviceList {
					if dev.UseType == iotconst.Use_Type_Device_Real_Test {
						virtualDevIds = append(virtualDevIds, dev.Did)
					} else {
						normalDevIds = append(normalDevIds, dev.Did)
					}
				}
				//虚拟设备直接移除
				if len(virtualDevIds) > 0 {
					doTriad.Where(tTriad.Did.In(virtualDevIds...)).Delete()
				}
				//真实设备恢复初始化
				if len(normalDevIds) > 0 {
					_, err = doTriad.Where(tTriad.Did.In(normalDevIds...)).
						Select(tTriad.IsTest, tTriad.AppName, tTriad.AppKey, tTriad.UserAccount, tTriad.UserId, tTriad.Status).
						Updates(map[string]interface{}{
							string(tTriad.UserId.ColumnName()):      gorm.Expr("NULL"),
							string(tTriad.AppName.ColumnName()):     gorm.Expr("NULL"),
							string(tTriad.AppKey.ColumnName()):      gorm.Expr("NULL"),
							string(tTriad.UserAccount.ColumnName()): gorm.Expr("NULL"),
							string(tTriad.Status.ColumnName()):      0,
						})
					if err != nil {
						return err
					}
				}
				//移除设备信息
				tInfo := tx.TIotDeviceInfo
				_, err = tInfo.WithContext(context.Background()).Where(tInfo.Did.In(request.DevIdList...)).Delete()
				if err != nil {
					return err
				}

				//清理相关资料
				go goRemoveDeviceClear(request, deviceHomes)
			}
		}
		return nil
	})
	return nil
}

func goRemoveDeviceClear(request *proto.RemoveDevRequest, devices []*model.TIotDeviceHome) error {
	defer iotutil.PanicHandler()
	q := orm.Use(iotmodel.GetDB())
	//移除用户的共享设备信息
	iotDeviceShared := q.TIotDeviceShared
	deviceSharedDo := iotDeviceShared.WithContext(context.Background()).Where(iotDeviceShared.DeviceId.In(request.DevIdList...))
	count, err := deviceSharedDo.Count()
	if count > 0 {
		_, err = deviceSharedDo.Delete()
		if err != nil {
			return err
		}
		//设备分享
		iotDeviceShareReceive := q.TIotDeviceShareReceive
		_, err = iotDeviceShareReceive.WithContext(context.Background()).
			Where(iotDeviceShareReceive.DeviceId.In(request.DevIdList...)).Delete()
		if err != nil {
			logger.Errorf("RemoveDev error : %s", err.Error())
			return err
		}
	}
	//删除缓存
	deviceCachedRemove(request.DevIdList)
	//推送移除设备
	publishRemoveDevice(devices)
	//清理定时器、倒计时
	clearDeviceTimers(request.DevIdList)
	//清理群组

	//推送音响通知
	publishVideoNotice(request.UserId, request.DevIdList)
	return nil
}

func publishVideoNotice(userId string, deviceIds []string) error {
	if userId == "" {
		return nil
	}
	du := iotstruct.DeviceRedisUpdate{
		UserId: userId,
	}
	duBytes, err := json.Marshal(du)
	if err != nil {
		return err
	}
	err = cached.RedisStore.GetClient().Publish(context.Background(), strings.Join([]string{iotconst.HKEY_UPDATE_DATA_PUB_PREFIX, userId}, "."), string(duBytes)).Err()
	if err != nil {
		return err
	}
	return nil
}

// 设备缓存Redis清理
func deviceCachedRemove(deviceIds []string) {
	cachedDevs := []string{}
	for _, did := range deviceIds {
		cachedDevs = append(cachedDevs, iotconst.HKEY_DEV_DATA_PREFIX+did)
	}
	delCmd := iotredis.GetClient().Del(context.Background(),
		cachedDevs...)
	if delCmd.Err() != nil {
		logger.Errorf("FindByIdIotDeviceInfo redis error : %s", delCmd.Err().Error())
	}
}

// 推送移除设备
func publishRemoveDevice(devices []*model.TIotDeviceHome) {
	defer iotutil.PanicHandler()
	for _, device := range devices {
		//推送移除设备
		var obj iotprotocol.PackControl
		buf, err := obj.Encode("", iotprotocol.CONTROL_HEAD_NAME_RESTORE, nil)
		if err != nil {
			continue
		}
		ret, err := rpcClient.ClientMqttService.Publish(context.Background(), &proto.PublishMessage{
			TopicFullName:  iotprotocol.GetTopic(iotprotocol.TP_C_CONTROL, device.ProductKey, device.DeviceId),
			MessageContent: string(buf),
			Qos:            proto.Qos_ExactlyOnce,
			Retained:       false,
		})
		if err != nil {
			logger.Errorf("RemoveDev Publish - error : %s", err.Error())
			return
		}
		if ret.Code != 200 {
			logger.Errorf("RemoveDev Publish code!=200 error : %s", ret.Message)
		}
		//
		buf, err = obj.Encode("", iotprotocol.ONLINE_HEAD_NS, nil)
		if err != nil {
			continue
		}
		////清除离线消息
		//ret, err = rpcClient.ClientMqttService.Publish(context.Background(), &proto.PublishMessage{
		//	TopicFullName:  iotprotocol.GetTopic(iotprotocol.TP_E_ONLINE, device.ProductKey, device.DeviceId),
		//	MessageContent: "",
		//	Qos:            proto.Qos_ExactlyOnce,
		//	Retained:       true,
		//})
		//if err != nil {
		//	logger.Errorf("RemoveDev Publish clear online - error : %s", err.Error())
		//	return
		//}
		//if ret.Code != 200 {
		//	logger.Errorf("RemoveDev Publish clear online code!=200 error : %s", ret.Message)
		//}
		//清理工作日志
		logSvc := IotDeviceLogProductSvc{}
		logSvc.ClearDeviceLogs(&proto.ProductLogRequest{ProductKey: device.ProductKey, DeviceId: device.DeviceId})
	}
}

// 批量删除设备定时器
func clearDeviceTimers(deviceIds []string) error {
	//s := IotDeviceTimerSvcEx{Ctx: context.Background()}
	t := orm.Use(iotmodel.GetDB()).TIotDeviceTimer
	timers, err := t.WithContext(context.Background()).Where(t.DeviceId.In(deviceIds...)).Find()
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerList)
	}
	if len(timers) == 0 {
		return nil
	}
	ids := make([]*proto.IotJobPrimarykey, 0)
	for _, t := range timers {
		ids = append(ids, &proto.IotJobPrimarykey{Id: t.Id})
	}
	// 调用job服务rpc接口
	reqJob := &proto.IotJobBatchDeleteRequest{
		Keys: ids,
	}
	svc := IotJobSvc{Ctx: context.Background()}
	_, err = svc.DeleteByIdsIotJob(reqJob)
	if err != nil {
		return err
	}
	_, err = t.WithContext(context.Background()).Where(t.DeviceId.In(deviceIds...)).Delete()
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerDelete)
	}
	return nil
}

// 消息中需要获取
func clearDeviceGroup(homeId int64, deviceIds []string) error {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceGroup
	tList := orm.Use(iotmodel.GetDB()).TIotDeviceGroupList
	groupList, err := tList.WithContext(context.Background()).Where(t.HomeId.Eq(homeId)).Find()
	if err != nil {
		return err
	}
	//没用群组直接返回
	if len(groupList) > 0 {
		return nil
	}
	//将群组进行分组
	groupMap := map[int64][]*model.TIotDeviceGroupList{}
	for _, r := range groupList {
		if _, ok := groupMap[r.GroupId]; ok {
			groupMap[r.GroupId] = append(groupMap[r.GroupId], r)
		} else {
			groupMap[r.GroupId] = []*model.TIotDeviceGroupList{r}
		}
	}

	groupMapNew := map[int64][]*model.TIotDeviceGroupList{}
	groupIds := []int64{}
	for _, devId := range deviceIds {
		for groupId, groupList := range groupMap {
			hasDevId := false
			for _, item := range groupList {
				if item.DevId == devId {
					hasDevId = true
				}
			}
			if len(groupList) <= 2 && hasDevId {
				groupIds = append(groupIds, groupId)
				groupMapNew[groupId] = groupList
			}
		}
	}
	if len(groupMapNew) > 0 {
		//删除数据
		t.WithContext(context.Background()).Where(t.Id.In(groupIds...))
		tList.WithContext(context.Background()).Where(tList.GroupId.In(groupIds...))
		//推送消息

	}
	return nil
}

func clearDeviceCountdown(deviceIds []string) error {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceCountdown
	countdowns, err := t.WithContext(context.Background()).Where(t.DeviceId.In(deviceIds...)).Find()
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerList)
	}
	if len(countdowns) == 0 {
		return nil
	}
	ids := make([]*proto.IotJobPrimarykey, 0)
	for _, t := range countdowns {
		ids = append(ids, &proto.IotJobPrimarykey{Id: t.Id})
	}
	// 调用job服务rpc接口
	reqJob := &proto.IotJobBatchDeleteRequest{
		Keys: ids,
	}
	svc := IotJobSvc{Ctx: context.Background()}
	_, err = svc.DeleteByIdsIotJob(reqJob)
	if err != nil {
		return err
	}
	_, err = t.WithContext(context.Background()).Where(t.DeviceId.In(deviceIds...)).Delete()
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerDelete)
	}
	return nil
}

func (s *IotDeviceHomeSvc) UpdateDeviceInfo(req *proto.IotDeviceHome) (*proto.IotDeviceHome, error) {
	q := orm.Use(iotmodel.GetDB())
	q.Transaction(func(tx *orm.Query) error {
		t := tx.TIotDeviceHome
		do := t.WithContext(context.Background())
		// fixme 请检查条件和校验参数
		//要更新的字段,不包括主键
		var updateField []field.Expr

		//if req.HomeId != 0 { //整数
		//	updateField = append(updateField, t.HomeId)
		//}
		if req.RoomId != 0 { //整数
			updateField = append(updateField, t.RoomId)
		}
		if req.CustomName != "" { //字符串
			updateField = append(updateField, t.CustomName)
		}
		if req.Sort != 0 { //整数
			updateField = append(updateField, t.Sort)
		}
		if len(updateField) > 0 {
			do = do.Select(updateField...)
		}

		if req.DeviceId == "" || req.HomeId == 0 {
			logger.Error("UpdateDeviceInfo error : Missing condition")
			return errors.New("Missing condition")
		}
		do = do.Where(t.DeviceId.Eq(req.DeviceId))
		do = do.Where(t.HomeId.Eq(req.HomeId))

		dbObj := convert.IotDeviceHome_pb2db(req)
		_, err := do.Updates(dbObj)
		if err != nil {
			logger.Errorf("UpdateDeviceInfo error : %s", err.Error())
			return err
		}

		if req.CustomName != "" { //字符串
			deviceInfoT := tx.TIotDeviceInfo
			deviceInfoDo := deviceInfoT.WithContext(context.Background())
			// fixme 请检查条件和校验参数
			//要更新的字段,不包括主键
			var deviceInfoUpdateField []field.Expr
			deviceInfoUpdateField = append(deviceInfoUpdateField, deviceInfoT.DeviceName)
			if len(deviceInfoUpdateField) > 0 {
				deviceInfoDo = deviceInfoDo.Select(deviceInfoUpdateField...)
			}

			if req.DeviceId == "" {
				logger.Error("UpdateDeviceInfo error : Missing condition")
				return errors.New("Missing condition")
			}
			deviceInfoDo = deviceInfoDo.Where(deviceInfoT.Did.Eq(req.DeviceId))
			DeviceInfoDbObj := convert.IotDeviceInfo_pb2db(&proto.IotDeviceInfo{
				DeviceName: req.CustomName,
			})
			_, err = deviceInfoDo.Updates(DeviceInfoDbObj)
			if err != nil {
				logger.Errorf("UpdateDeviceInfo error : %s", err.Error())
				return err
			}

			iotDeviceShared := tx.TIotDeviceShared
			deviceSharedDo := iotDeviceShared.WithContext(context.Background())
			deviceSharedDo = deviceSharedDo.Where(iotDeviceShared.DeviceId.Eq(req.DeviceId))
			list, err1 := deviceSharedDo.Find()
			if err1 != nil {
				logger.Errorf("GetListIotDeviceShared error : %s", err.Error())
				return nil
			}
			if len(list) > 0 {
				//要更新的字段,不包括主键
				var deviceSharedUpdateField []field.Expr
				deviceSharedUpdateField = append(deviceSharedUpdateField, iotDeviceShared.CustomName)
				if len(deviceSharedUpdateField) > 0 {
					deviceSharedDo = deviceSharedDo.Select(deviceSharedUpdateField...)
				}

				deviceSharedDo = deviceSharedDo.Where(iotDeviceShared.DeviceId.Eq(req.DeviceId))
				deviceSharedDbObj := convert.IotDeviceShared_pb2db(&proto.IotDeviceShared{
					CustomName: req.CustomName,
				})
				_, err = deviceSharedDo.Updates(deviceSharedDbObj)
				if err != nil {
					logger.Errorf("UpdateDeviceInfo error : %s", err.Error())
					return err
				}

				iotDeviceShareReceive := tx.TIotDeviceShareReceive
				deviceShareReceiveDo := iotDeviceShareReceive.WithContext(context.Background())
				var deviceShareReceiveUpdateField []field.Expr
				deviceShareReceiveUpdateField = append(deviceShareReceiveUpdateField, iotDeviceShareReceive.CustomName)
				if len(deviceShareReceiveUpdateField) > 0 {
					deviceShareReceiveDo = deviceShareReceiveDo.Select(deviceShareReceiveUpdateField...)
				}

				deviceShareReceiveDo = deviceShareReceiveDo.Where(iotDeviceShareReceive.DeviceId.Eq(req.DeviceId))
				deviceShareReceiveDbObj := convert.IotDeviceShareReceive_pb2db(&proto.IotDeviceShareReceive{
					CustomName: req.CustomName,
				})
				_, err = deviceShareReceiveDo.Updates(deviceShareReceiveDbObj)
				if err != nil {
					logger.Errorf("UpdateDeviceInfo error : %s", err.Error())
					return err
				}
			}
		}
		return nil
	})
	return req, nil
}

func (s *IotDeviceHomeSvc) SetDevSort(req *proto.SetDevSortRequest) (*proto.IotDeviceHome, error) {
	if req.HomeId == 0 {
		logger.Error("UpdateDeviceInfo error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	for _, v := range req.Data {
		t := orm.Use(iotmodel.GetDB()).TIotDeviceHome
		// fixme 请检查条件和校验参数
		do := t.WithContext(context.Background())
		if v.DevId == "" || v.Sort == 0 {
			logger.Error("SetDevSort error : Missing condition")
			return nil, errors.New("Missing condition")
		}

		//要更新的字段,不包括主键
		var updateField []field.Expr
		if v.Sort != 0 { //整数
			updateField = append(updateField, t.Sort)
		}
		if len(updateField) > 0 {
			do = do.Select(updateField...)
		}

		do = do.Where(t.DeviceId.Eq(v.DevId), t.HomeId.Eq(req.HomeId))
		//do = do.Where(t.HomeId.Eq(req.HomeId))

		dbObj := convert.IotSetDevSort_pb2db(&convert.SetDevSortParam{
			HomeId: req.HomeId,
			DevId:  v.DevId,
			Sort:   v.Sort,
		})
		_, err := do.Updates(dbObj)
		if err != nil {
			logger.Errorf("UpdateDeviceInfo error : %s", err.Error())
			return nil, err
		}
	}

	return nil, nil
}

// 创建IotDeviceHome
func (s *IotDeviceHomeSvc) QueryDeviceAreas(req *proto.DeviceAreaRequest) (map[string]int64, error) {
	q := orm.Use(iotmodel.GetDB())
	tInfo := q.TIotDeviceInfo
	var list []*iotstruct.CountResult
	//TODO 这个的数据需要扩展到缓存或者到定时任务自动生成
	err := tInfo.WithContext(context.Background()).
		Where(tInfo.ProductId.Eq(req.ProductId), tInfo.TenantId.Eq(req.TenantId)).Select(tInfo.Country.As("key"), tInfo.Country.Count().As("count")).
		Group(tInfo.Country).Unscoped().Scan(&list)
	if err != nil {
		return nil, err
	}
	res := make(map[string]int64)
	for _, result := range list {
		res[result.Key] = result.Count
	}
	return res, nil
}

func (s *IotDeviceHomeSvc) HomeDevListExcludeVirtualDevices(homeId int64, homeIds []int64) ([]*proto.IotDevInfo, error) {
	logger.Infof("GetListIotDeviceHome in : %d, homeIds: %v", homeId, homeIds)

	var err error
	var q = orm.Use(iotmodel.GetDB())
	tIotDeviceHome := q.TIotDeviceHome
	tIotDeviceInfo := q.TIotDeviceInfo
	tIotDeviceTriad := q.TIotDeviceTriad
	do := tIotDeviceHome.WithContext(context.Background()).
		LeftJoin(tIotDeviceInfo, tIotDeviceHome.DeviceId.EqCol(tIotDeviceInfo.Did)).
		LeftJoin(tIotDeviceTriad, tIotDeviceInfo.Did.EqCol(tIotDeviceTriad.Did))

	if homeId == 0 && (homeIds == nil || len(homeIds) == 0) {
		return nil, errors.New("参数错误")
	}

	if homeId == 0 && homeIds != nil && len(homeIds) > 0 {
		do = do.Where(tIotDeviceHome.HomeId.In(homeIds...), tIotDeviceInfo.DeletedAt.IsNull())
	} else {
		do = do.Where(tIotDeviceHome.HomeId.Eq(homeId), tIotDeviceInfo.DeletedAt.IsNull(), tIotDeviceTriad.UseType.Eq(0))
	}
	var list []*convert.TIotDeviceInfoData
	err = do.Select(tIotDeviceInfo.ALL, tIotDeviceHome.RoomId, tIotDeviceHome.CustomName, tIotDeviceHome.Secrtkey, tIotDeviceHome.HomeId, tIotDeviceHome.Sort, tIotDeviceHome.BindTime).Scan(&list)
	if err != nil {
		logger.Errorf("GetListIotDeviceHome error : %s", err.Error())
		return nil, err
	}
	if len(list) == 0 {
		return nil, nil
	}
	result := make([]*proto.IotDevInfo, len(list))
	var MqttServer string
	if len(config.Global.AppMQTT.Addrs) > 0 {
		MqttServer = config.Global.AppMQTT.Addrs[0]
	} else {
		MqttServer = "ws://120.77.64.252:8883/mqtt"
	}
	for i, v := range list {
		devInfo := convert.IotDevInfo_db2pbNew(v)
		devInfo.RoomId = v.RoomId
		devInfo.SecretKey = v.Salt
		devInfo.MqttServer = MqttServer
		devInfo.OnlineStatus = 0
		devInfo.Switch = 0
		//读取设备列表
		deviceStatus, redisErr := iotredis.GetClient().HGetAll(context.Background(), iotconst.HKEY_DEV_DATA_PREFIX+v.Did).Result()
		iotlogger.LogHelper.Info("deviceStatus:", deviceStatus)
		if redisErr == nil {
			if val, ok := deviceStatus["onlineStatus"]; ok {
				if val == "online" {
					iotlogger.LogHelper.Info("deviceStatus:online")
					devInfo.OnlineStatus = 1
				} else {
					devInfo.OnlineStatus = 0
				}
			}
			if val, ok := deviceStatus["1"]; ok {
				if val == "true" {
					iotlogger.LogHelper.Info("switch:true")
					devInfo.Switch = 1
				} else {
					devInfo.Switch = 0
				}
			}
		}
		result[i] = devInfo
	}
	//根据sort进行排序
	sort.Slice(result, func(i, j int) bool {
		return result[i].BindTime.AsTime().Unix() > result[j].BindTime.AsTime().Unix()
	})
	return result, nil
}
