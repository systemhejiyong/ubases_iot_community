// Code generated by sgen.exe,2022-04-21 13:46:11. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotlogger"
	"cloud_platform/iot_common/iotnatsjs"
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_common/iotstruct"
	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_device_service/rpc/rpcClient"
	"context"
	"errors"
	"fmt"
	"time"

	"gorm.io/gorm"

	"google.golang.org/protobuf/types/known/timestamppb"

	"go-micro.dev/v4/logger"
	"go-micro.dev/v4/metadata"
	"gorm.io/gen/field"

	"cloud_platform/iot_device_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_device/model"
	"cloud_platform/iot_model/db_device/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type IotDeviceTriadSvc struct {
	Ctx context.Context
}

// 事务创建调用此方法
func (s *IotDeviceTriadSvc) SetUseStatus(tx *orm.Query, did string) error {
	do := tx.TIotDeviceTriad.WithContext(context.Background())
	_, err := do.Where(tx.TIotDeviceTriad.Did.Eq(did)).
		Update(tx.TIotDeviceTriad.Status, 1)
	if err != nil {
		logger.Errorf("SetUse delete old error : %s", err.Error())
		return err
	}
	if err != nil {
		logger.Errorf("SetUse error : %s", err.Error())
		return err
	}
	return nil
}

// 设备用户信息
func (s *IotDeviceTriadSvc) SetDeviceUser(tx *orm.Query, did string, field []field.Expr, triad *model.TIotDeviceTriad) error {
	do := tx.TIotDeviceTriad.WithContext(context.Background())
	_, err := do.Where(tx.TIotDeviceTriad.Did.Eq(did)).Select(field...).Updates(triad)
	if err != nil {
		logger.Errorf("SetUse delete old error : %s", err.Error())
		return err
	}
	if err != nil {
		logger.Errorf("SetUse error : %s", err.Error())
		return err
	}
	return nil
}

// 创建IotDeviceTriad
func (s *IotDeviceTriadSvc) CreateIotDeviceTriad(req *proto.IotDeviceTriad) (*proto.IotDeviceTriad, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TIotDeviceTriad
	do := t.WithContext(context.Background())
	dbObj := convert.IotDeviceTriad_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateIotDeviceTriad error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除IotDeviceTriad
func (s *IotDeviceTriadSvc) DeleteIotDeviceTriad(req *proto.IotDeviceTriad) (*proto.IotDeviceTriad, error) {
	err := orm.Use(iotmodel.GetDB()).Transaction(func(tx *orm.Query) error {
		t := tx.TIotDeviceTriad
		do := t.WithContext(context.Background())
		// fixme 请检查条件

		if req.Id != 0 { //整数
			do = do.Where(t.Id.Eq(req.Id))
		}
		if req.TenantId != "" { //整数
			do = do.Where(t.TenantId.Eq(req.TenantId))
		}
		if req.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(req.UserId))
		}
		if req.Did != "" { //字符串
			do = do.Where(t.Did.Eq(req.Did))
		}
		if req.UserName != "" { //字符串
			do = do.Where(t.UserName.Eq(req.UserName))
		}
		if req.Passward != "" { //字符串
			do = do.Where(t.Passward.Eq(req.Passward))
		}
		if req.ProductKey != "" { //字符串
			do = do.Where(t.Passward.Eq(req.ProductKey))
		}
		if req.Salt != "" { //字符串
			do = do.Where(t.Salt.Eq(req.Salt))
		}
		if req.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
		}
		if req.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
		}
		did := req.Did
		if did == "" {
			device, err := do.First()
			if err != nil {
				return err
			}
			did = device.Did
		}
		s.RemoveDeleteCached(did, tx)
		_, err := do.Delete()
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		logger.Errorf("DeleteIotDeviceTriad error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除IotDeviceTriad
func (s *IotDeviceTriadSvc) DeleteByIdIotDeviceTriad(req *proto.IotDeviceTriad) (*proto.IotDeviceTriad, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceTriad
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdIotDeviceTriad error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除IotDeviceTriad
func (s *IotDeviceTriadSvc) DeleteByIdsIotDeviceTriad(req *proto.IotDeviceTriadBatchDeleteRequest) (*proto.IotDeviceTriadBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TIotDeviceTriad
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsIotDeviceTriad error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新IotDeviceTriad
func (s *IotDeviceTriadSvc) UpdateIotDeviceTriad(req *proto.IotDeviceTriad) (*proto.IotDeviceTriad, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceTriad
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.TenantId != "" { //整数
		updateField = append(updateField, t.TenantId)
	}
	if req.UserId != 0 { //整数
		updateField = append(updateField, t.UserId)
	}
	if req.Did != "" { //字符串
		updateField = append(updateField, t.Did)
	}
	if req.ProductKey != "" { //字符串
		updateField = append(updateField, t.ProductKey)
	}
	if req.UserName != "" { //字符串
		updateField = append(updateField, t.UserName)
	}
	if req.Passward != "" { //字符串
		updateField = append(updateField, t.Passward)
	}
	if req.Salt != "" { //字符串
		updateField = append(updateField, t.Salt)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateIotDeviceTriad error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.IotDeviceTriad_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateIotDeviceTriad error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据主键更新所有字段IotDeviceTriad
func (s *IotDeviceTriadSvc) UpdateAllIotDeviceTriad(req *proto.IotDeviceTriad) (*proto.IotDeviceTriad, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceTriad
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.TenantId)
	updateField = append(updateField, t.UserId)
	updateField = append(updateField, t.Did)
	updateField = append(updateField, t.UserName)
	updateField = append(updateField, t.Passward)
	updateField = append(updateField, t.ProductKey)
	updateField = append(updateField, t.Salt)
	updateField = append(updateField, t.DeviceSecret)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllIotDeviceTriad error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceTriad_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllIotDeviceTriad error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *IotDeviceTriadSvc) UpdateFieldsIotDeviceTriad(req *proto.IotDeviceTriadUpdateFieldsRequest) (*proto.IotDeviceTriad, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceTriad
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsIotDeviceTriad error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsIotDeviceTriad error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceTriad_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsIotDeviceTriad error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找IotDeviceTriad
func (s *IotDeviceTriadSvc) FindIotDeviceTriad(req *proto.IotDeviceTriadFilter) (*proto.IotDeviceTriad, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceTriad
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TenantId != "" { //整数
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.Did != "" { //字符串
		do = do.Where(t.Did.Eq(req.Did))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.UserName != "" { //字符串
		do = do.Where(t.UserName.Like("%" + req.UserName + "%"))
	}
	if req.Passward != "" { //字符串
		do = do.Where(t.Passward.Like("%" + req.Passward + "%"))
	}
	if req.Salt != "" { //字符串
		do = do.Where(t.Salt.Like("%" + req.Salt + "%"))
	}
	if req.DeviceSecret != "" { //字符串
		do = do.Where(t.DeviceSecret.Eq(req.DeviceSecret))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindIotDeviceTriad error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceTriad_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找IotDeviceTriad
func (s *IotDeviceTriadSvc) FindByIdIotDeviceTriad(req *proto.IotDeviceTriadFilter) (*proto.IotDeviceTriad, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceTriad
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdIotDeviceTriad error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceTriad_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找IotDeviceTriad,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *IotDeviceTriadSvc) GetListIotDeviceTriad(req *proto.IotDeviceTriadListRequest) ([]*proto.IotDeviceTriad, int64, error) {
	var err error
	tenantId, _ := CheckTenantId(s.Ctx)
	q := orm.Use(iotmodel.GetDB())
	t := q.TIotDeviceTriad
	tInfo := q.TIotDeviceInfo
	do := t.WithContext(context.Background()).LeftJoin(tInfo, tInfo.Did.EqCol(t.Did), tInfo.DeletedAt.IsNull())
	if req.Query == nil {
		return nil, 0, errors.New("query参数不能为空")
	}
	currTenantId := ""
	if req.Query.TenantId != "" {
		currTenantId = req.Query.TenantId
		do = do.Where(t.TenantId.Eq(req.Query.TenantId))
	} else {
		if tenantId != "" {
			currTenantId = tenantId
			do = do.Where(t.TenantId.Eq(tenantId))
		}
	}

	//非平台查询，tenantId不能为空
	if !req.Query.IsPlatform && currTenantId == "" {
		return nil, 0, errors.New("非平台查询，tenantId不能为空")
	}

	query := req.Query
	if req.SearchKey != "" { //字符串
		w := t.WithContext(context.Background()).Where(tInfo.DeviceName.Like("%" + req.SearchKey + "%")).
			Or(t.Did.Like("%" + req.SearchKey + "%")).
			Or(t.ProductKey.Like("%" + req.SearchKey + "%"))
		if query != nil {
			//通过设备名称查询，设备不一定激活了，用户也不一定修改了名称
			if query.QueryProductIds != nil && len(query.QueryProductIds) > 0 {
				w2 := t.WithContext(context.Background()).Where(tInfo.DeviceName.IsNull(), t.ProductId.In(query.QueryProductIds...))
				w = w.Or(w2)
			}
		}
		do = do.Where(w)
	}
	if query != nil {
		if query.PlatformCode != "" { //字符串
			do = do.Where(t.PlatformCode.Eq(query.PlatformCode), t.IsOtherPlatform.Eq(1))
		}
		if query.DeviceInfo != nil {
			if query.DeviceInfo.Did != "" { //字符串
				do = do.Where(t.Did.Like("%" + query.DeviceInfo.Did + "%"))
			}
			if query.DeviceInfo.ProductId != 0 { //整数
				do = do.Where(tInfo.ProductId.Eq(query.DeviceInfo.ProductId))
			}
			if query.DeviceInfo.OnlineStatus >= 0 { //整数
				if query.DeviceInfo.OnlineStatus == 2 || query.DeviceInfo.OnlineStatus == 0 {
					do = do.Where(t.WithContext(context.Background()).Where(tInfo.OnlineStatus.IsNull()).Or(tInfo.OnlineStatus.Eq(2)))
				} else {
					do = do.Where(t.WithContext(context.Background()).Where(tInfo.OnlineStatus.Eq(query.DeviceInfo.OnlineStatus)))
				}
			}
			if query.DeviceInfo.DeviceName != "" { //字符串
				//通过设备名称查询，设备不一定激活了，用户也不一定修改了名称
				w := t.WithContext(context.Background()).
					Where(tInfo.DeviceName.Like("%" + query.DeviceInfo.DeviceName + "%")).
					Or(tInfo.ProductKey.Like("%" + query.DeviceInfo.DeviceName + "%"))
				if query != nil {
					//通过设备名称查询，设备不一定激活了，用户也不一定修改了名称
					if query.QueryProductIds != nil && len(query.QueryProductIds) > 0 {
						w2 := t.WithContext(context.Background()).Where(tInfo.DeviceName.IsNull(), t.ProductId.In(query.QueryProductIds...))
						w = w.Or(w2)
					}
				}
				do = do.Where(w)
			}
			if query.DeviceInfo.Sn != "" { //字符串
				do = do.Where(tInfo.Sn.Like("%" + query.DeviceInfo.Sn + "%"))
			}
			if query.DeviceInfo.BatchId != 0 { //整数
				do = do.Where(tInfo.BatchId.Eq(query.DeviceInfo.BatchId))
			}
			if query.DeviceInfo.ProductId != 0 { //整数
				do = do.Where(tInfo.ProductId.Eq(query.DeviceInfo.ProductId))
			}
			if query.DeviceInfo.ProductKey != "" { //产品key
				do = do.Where(tInfo.ProductKey.Eq(query.DeviceInfo.ProductKey))
				//do = do.Where(tInfo.ProductKey.Like("%" + query.DeviceInfo.ProductKey + "%"))
			}
			if query.DeviceInfo.ActiveStatus != "" { //字符串
				if query.DeviceInfo.ActiveStatus == "2" {
					do = do.Where(t.WithContext(context.Background()).Where(tInfo.ActiveStatus.IsNull()).Or(tInfo.ActiveStatus.Eq("2")))
				} else {
					do = do.Where(t.WithContext(context.Background()).Where(tInfo.ActiveStatus.Eq(query.DeviceInfo.ActiveStatus)))
				}
			}
			if !query.IsQueryTriadData {
				if query.DeviceInfo.QueryStartTime != 0 {
					do = do.Where(tInfo.ActivatedTime.Gte(iotutil.GetTodaySartTime(time.Unix(query.DeviceInfo.QueryStartTime, 0))))
				}
				if query.DeviceInfo.QueryEndTime != 0 {
					do = do.Where(tInfo.ActivatedTime.Lte(iotutil.GetTodayLastTime(time.Unix(query.DeviceInfo.QueryEndTime, 0))))
				}
			} else {
				if query.DeviceInfo.QueryStartTime != 0 && query.DeviceInfo.QueryEndTime != 0 {
					do = do.Where(t.CreatedAt.Between(iotutil.GetTodaySartTime(time.Unix(query.DeviceInfo.QueryStartTime, 0)),
						iotutil.GetTodayLastTime(time.Unix(query.DeviceInfo.QueryEndTime, 0))))
				}
			}
		}
		//查询设备数据
		if !query.IsQueryTriadData {
			do = do.Where(t.FirstActiveTime.IsNotNull(), t.FirstActiveTime.Neq(time.Time{}))
		}
		if query.IsQueryExport != 0 {
			if query.IsQueryExport  == 1 {
				do = do.Where(t.ExportCount.Gte(1)) //大于等于1
			} else {
				do = do.Where(t.ExportCount.Eq(0))
			}
		}
		//通过用户的租户查询
		if query.DeveloperTenantIds != nil && len(query.DeveloperTenantIds) > 0 {
			do = do.Where(t.TenantId.In(query.DeveloperTenantIds...))
		}
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.DeviceNatureKey != 0 { //字符串
			do = do.Where(t.DeviceNatureKey.Eq(query.DeviceNatureKey))
		}
		if query.TenantId != "" { //整数
			do = do.Where(t.TenantId.Eq(query.TenantId))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.Did != "" { //字符串
			do = do.Where(t.Did.Eq(query.Did))
		}
		if query.ProductKey != "" { //字符串
			do = do.Where(t.ProductKey.Eq(query.ProductKey))
		}
		if query.ProductId != 0 {
			do = do.Where(t.ProductId.Eq(query.ProductId))
		}
		if query.UserName != "" { //字符串
			do = do.Where(t.UserName.Like("%" + query.UserName + "%"))
		}
		if query.Passward != "" { //字符串
			do = do.Where(t.Passward.Like("%" + query.Passward + "%"))
		}
		if query.Salt != "" { //字符串
			do = do.Where(t.Salt.Like("%" + query.Salt + "%"))
		}
		if query.DeviceSecret != "" { //字符串
			do = do.Where(t.DeviceSecret.Like("%" + query.DeviceSecret + "%"))
		}
		if query.UseType != -1 { //字符串
			do = do.Where(t.UseType.Eq(query.UseType))
		}
		if query.IsTest != -1 { //字符串
			do = do.Where(t.IsTest.Eq(query.IsTest))
		}
		if query.BatchId != 0 {
			do = do.Where(t.BatchId.Eq(query.BatchId))
		}
		if query.EnableZeroBatchId && query.BatchId == 0 {
			do = do.Where(t.BatchId.Eq(query.BatchId))
		}
		if query.SerialNumber != "" {
			do = do.Where(t.SerialNumber.Eq(query.SerialNumber))
		}
		if query.UserAccount != "" {
			do = do.Where(t.UserAccount.Eq(query.UserAccount))
		}
		if query.Status != -1 {
			if query.Status == 2 || query.Status == 0 {
				//TODO 需要统一状态 0，2目前都视为未激活
				do = do.Where(t.Status.In([]int32{0, 2}...))
			} else {
				do = do.Where(t.Status.Eq(query.Status))
			}
		}
		if query.DeviceIds != nil && len(query.DeviceIds) > 0 {
			do = do.Where(t.Did.In(query.DeviceIds...))
		}
		//导出次数查询
		if query.ExportCount != 0 {
			do = do.Where(t.ExportCount.Eq(query.ExportCount))
		}
	}
	// 是否仅仅返回统计数量
	if req.IsOnlyCount == 1 {
		total, err := do.Count()
		if err != nil {
			logger.Errorf("GetListIotDeviceTriad Count error : %s", err.Error())
			return nil, 0, err
		}
		return nil, total, nil
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.CreatedAt.Desc())
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}
	var list []*struct {
		*model.TIotDeviceTriad
		*model.TIotDeviceInfo
	}
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do.Select(t.ALL, tInfo.ALL).ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Select(t.ALL, tInfo.ALL).Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListIotDeviceTriad error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.IotDeviceTriad, len(list))
	dids := make([]string, 0)
	for i, v := range list {
		result[i] = convert.IotDeviceTriad_db2pb(v.TIotDeviceTriad)
		if v.TIotDeviceInfo != nil {
			result[i].RegionServerId = v.TIotDeviceInfo.RegionServerId
			result[i].DeviceInfo = convert.IotDeviceInfo_db2pb(v.TIotDeviceInfo)
		}
		if v.TIotDeviceTriad.FirstActiveTime != (time.Time{}) {
			result[i].DeviceInfo.ActivatedTime = timestamppb.New(v.TIotDeviceTriad.FirstActiveTime)
		}
		dids = append(dids, result[i].Did)
	}
	//如果是导出数据，需要异步将导出统计值修改
	if req.Query != nil && req.Query.IsExport {
		go func() {
			defer iotutil.PanicHandler()
			// 每页处理1000条数据
			pageSize := 1000
			// 计算总页数
			didCount := len(dids)
			totalPages := (didCount + pageSize - 1) / pageSize
			// 遍历每一页并输出
			for page := 0; page < totalPages; page++ {
				// 计算当前页的起始索引和结束索引
				start := page * pageSize
				end := start + pageSize
				// 获取当前页的数据
				var pageDids []string
				if end > didCount {
					pageDids = dids[start:]
				} else {
					pageDids = dids[start:end]
				}
				// 输出当前页的数据
				addInt := field.NewInt(t.TableName(), t.ExportCount.ColumnName().String())
				addString := field.NewString(t.TableName(), t.ExportTimeList.ColumnName().String())
				addExportTime := field.NewTime(t.TableName(), t.ExportTime.ColumnName().String())

				(t.WithContext(context.Background()).Where(t.Did.In(pageDids...)).Select(t.ExportCount, t.ExportTimeList).
					UpdateSimple(
						addInt.Add(1),
						addString.ConcatExtract("", time.Now().Format("2006-01-02 15:04:05")+","),
						addExportTime.Value(time.Now())))
			}
		}()
	}
	return result, total, nil
}

func (s *IotDeviceTriadSvc) SetExportCount(req *proto.IotDeviceTriadListRequest) error {
	var err error
	tenantId, err := CheckTenantId(s.Ctx)
	q := orm.Use(iotmodel.GetDB())
	t := q.TIotDeviceTriad
	tInfo := q.TIotDeviceInfo
	do := t.WithContext(context.Background()).LeftJoin(tInfo, tInfo.Did.EqCol(t.Did), tInfo.DeletedAt.IsNull())
	//
	if req.Query != nil && req.Query.TenantId != "" {
		do = do.Where(t.TenantId.Eq(req.Query.TenantId))
	} else {
		if tenantId != "" {
			do = do.Where(t.TenantId.Eq(tenantId))
		}
	}
	query := req.Query
	if req.SearchKey != "" { //字符串
		w := t.WithContext(context.Background()).Where(tInfo.DeviceName.Like("%" + req.SearchKey + "%")).
			Or(t.Did.Like("%" + req.SearchKey + "%")).
			Or(t.ProductKey.Like("%" + req.SearchKey + "%"))
		if query != nil {
			//通过设备名称查询，设备不一定激活了，用户也不一定修改了名称
			if query.QueryProductIds != nil && len(query.QueryProductIds) > 0 {
				w2 := t.WithContext(context.Background()).Where(tInfo.DeviceName.IsNull(), t.ProductId.In(query.QueryProductIds...))
				w = w.Or(w2)
			}
		}
		do = do.Where(w)
	}
	if query != nil {
		if query.DeviceInfo != nil {
			if query.DeviceInfo.Did != "" { //字符串
				do = do.Where(t.Did.Like("%" + query.DeviceInfo.Did + "%"))
			}
			if query.DeviceInfo.ProductId != 0 { //整数
				do = do.Where(tInfo.ProductId.Eq(query.DeviceInfo.ProductId))
			}
			if query.DeviceInfo.OnlineStatus >= 0 { //整数
				if query.DeviceInfo.OnlineStatus == 2 || query.DeviceInfo.OnlineStatus == 0 {
					do = do.Where(t.WithContext(context.Background()).Where(tInfo.OnlineStatus.IsNull()).Or(tInfo.OnlineStatus.Eq(2)))
				} else {
					do = do.Where(t.WithContext(context.Background()).Where(tInfo.OnlineStatus.Eq(query.DeviceInfo.OnlineStatus)))
				}
			}
			if query.DeviceInfo.DeviceName != "" { //字符串
				//通过设备名称查询，设备不一定激活了，用户也不一定修改了名称
				//if query.QueryProductIds != nil && len(query.QueryProductIds) > 0 {
				//	deviceNameDo := t.WithContext(context.Background())
				//	w := deviceNameDo.Where(t.ProductId.In(query.QueryProductIds...)).Or(tInfo.DeviceName.Like("%" + query.DeviceInfo.DeviceName + "%"))
				//	do = do.Where(w)
				//} else {
				//	do = do.Where(tInfo.DeviceName.Like("%" + query.DeviceInfo.DeviceName + "%"))
				//}
				w := t.WithContext(context.Background()).
					Where(tInfo.DeviceName.Like("%" + query.DeviceInfo.DeviceName + "%")).
					Or(tInfo.ProductKey.Like("%" + query.DeviceInfo.DeviceName + "%"))
				if query != nil {
					//通过设备名称查询，设备不一定激活了，用户也不一定修改了名称
					if query.QueryProductIds != nil && len(query.QueryProductIds) > 0 {
						w2 := t.WithContext(context.Background()).Where(tInfo.DeviceName.IsNull(), t.ProductId.In(query.QueryProductIds...))
						w = w.Or(w2)
					}
				}
				do = do.Where(w)
			}
			if query.DeviceInfo.Sn != "" { //字符串
				do = do.Where(tInfo.Sn.Like("%" + query.DeviceInfo.Sn + "%"))
			}
			if query.DeviceInfo.BatchId != 0 { //整数
				do = do.Where(tInfo.BatchId.Eq(query.DeviceInfo.BatchId))
			}
			if query.DeviceInfo.ProductId != 0 { //整数
				do = do.Where(tInfo.ProductId.Eq(query.DeviceInfo.ProductId))
			}
			if query.DeviceInfo.ProductKey != "" { //产品key
				do = do.Where(tInfo.ProductKey.Eq(query.DeviceInfo.ProductKey))
				//do = do.Where(tInfo.ProductKey.Like("%" + query.DeviceInfo.ProductKey + "%"))
			}
			if query.DeviceInfo.ActiveStatus != "" { //字符串
				if query.DeviceInfo.ActiveStatus == "2" {
					do = do.Where(t.WithContext(context.Background()).Where(tInfo.ActiveStatus.IsNull()).Or(tInfo.ActiveStatus.Eq("2")))
				} else {
					do = do.Where(t.WithContext(context.Background()).Where(tInfo.ActiveStatus.Eq(query.DeviceInfo.ActiveStatus)))
				}
			}
			if query.DeviceInfo.QueryStartTime != 0 {
				do = do.Where(tInfo.ActivatedTime.Gte(iotutil.GetTodaySartTime(time.Unix(query.DeviceInfo.QueryStartTime, 0))))
			}
			if query.DeviceInfo.QueryEndTime != 0 {
				do = do.Where(tInfo.ActivatedTime.Lte(iotutil.GetTodayLastTime(time.Unix(query.DeviceInfo.QueryEndTime, 0))))
			}
		}

		//通过用户的租户查询
		if query.DeveloperTenantIds != nil && len(query.DeveloperTenantIds) > 0 {
			do = do.Where(t.TenantId.In(query.DeveloperTenantIds...))
		}

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}

		if query.DeviceNatureKey != 0 { //字符串
			do = do.Where(t.DeviceNatureKey.Eq(query.DeviceNatureKey))
		}
		if query.TenantId != "" { //整数
			do = do.Where(t.TenantId.Eq(query.TenantId))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.Did != "" { //字符串
			do = do.Where(t.Did.Eq(query.Did))
		}
		if query.ProductKey != "" { //字符串
			do = do.Where(t.ProductKey.Eq(query.ProductKey))
		}
		if query.ProductId != 0 {
			do = do.Where(t.ProductId.Eq(query.ProductId))
		}
		if query.UserName != "" { //字符串
			do = do.Where(t.UserName.Like("%" + query.UserName + "%"))
		}
		if query.Passward != "" { //字符串
			do = do.Where(t.Passward.Like("%" + query.Passward + "%"))
		}
		if query.Salt != "" { //字符串
			do = do.Where(t.Salt.Like("%" + query.Salt + "%"))
		}
		if query.DeviceSecret != "" { //字符串
			do = do.Where(t.DeviceSecret.Like("%" + query.DeviceSecret + "%"))
		}
		if query.UseType != -1 { //字符串
			do = do.Where(t.UseType.Eq(query.UseType))
		}
		if query.IsTest != -1 { //字符串
			do = do.Where(t.IsTest.Eq(query.IsTest))
		}
		if query.BatchId != 0 {
			do = do.Where(t.BatchId.Eq(query.BatchId))
		}
		if query.SerialNumber != "" {
			do = do.Where(t.SerialNumber.Eq(query.SerialNumber))
		}
		if query.Status != -1 {
			if query.Status == 2 || query.Status == 0 {
				//TODO 需要统一状态 0，2目前都视为未激活
				do = do.Where(t.Status.In([]int32{0, 2}...))
			} else {
				do = do.Where(t.Status.Eq(query.Status))
			}
		}
	}
	_, err = do.Select(t.ExportCount, t.ExportTime).Updates(map[string]interface{}{
		"export_count": gorm.Expr("count + ?", 1),
		"export_time":  timestamppb.New(time.Now())})

	if err != nil {
		logger.Errorf("GetListIotDeviceTriad error : %s", err.Error())
		return err
	}
	return nil
}

// 批量生成三元组
func (s *IotDeviceTriadSvc) GeneratorDeviceTriad(req *proto.IotDeviceTriadGenerateRequest) error {
	//数量不能为空
	if req.Number == 0 {
		return errors.New("Number not found")
	}
	userId, err := CheckUserId(s.Ctx)
	if err != nil {
		return errors.New("未获取登录用户信息")
	}
	tenantId, err := CheckTenantId(s.Ctx)
	if err != nil {
		//如果没有tenantId，则必须要有platformCode
		if req.PlatformCode == "" {
			return errors.New("未获取登录用户租户信息")
		}
	}
	var batchId int32 = 0
	if req.Batch != "" {
		batchId, err = iotutil.ToInt32Err(req.Batch)
		if err != nil {
			return errors.New("批次号异常，" + req.Batch)
		}
	}
	//如果是导入三元组，先检查三元组的有效性
	if req.DeviceImport != nil && len(req.DeviceImport) > 0 {
		err = VerifyKey(req.DeviceImport)
		if err != nil {
			return err
		}
	}
	q := orm.Use(iotmodel.GetDB())
	t := q.TIotDeviceTriad

	var deviceSnList []struct {
		SerialNumber string
		Did          string
	}
	err = t.WithContext(context.Background()).Where(t.TenantId.Eq(tenantId)).Select(t.SerialNumber, t.Did).Distinct().Scan(&deviceSnList)
	if err != nil {
		return err
	}
	//重复三元组和序列号检测
	var snMap map[string]int = make(map[string]int)
	var devMap map[string]int = make(map[string]int)
	for _, sn := range deviceSnList {
		if sn.SerialNumber != "" {
			if _, ok := snMap[sn.SerialNumber]; !ok {
				snMap[sn.SerialNumber] = 1
			}
		}
		if sn.Did != "" {
			if _, ok := devMap[sn.Did]; !ok {
				devMap[sn.Did] = 1
			}
		}
	}

	var triadsList []iotstruct.MqttToNatsDeviceTriadData

	err = orm.Use(iotmodel.GetDB()).Transaction(func(tx *orm.Query) error {
		var err error
		//生成三元组的逻辑
		if req.SerialNumbers != nil && len(req.SerialNumbers) > 0 {
			var tempList []iotstruct.MqttToNatsDeviceTriadData
			tempList, err = s.genBySerialNumbers(tx, snMap, batchId, userId, tenantId, req)
			triadsList = append(triadsList, tempList...)
		}
		//导入三元组的逻辑
		if req.DeviceImport != nil && len(req.DeviceImport) > 0 {
			var tempList []iotstruct.MqttToNatsDeviceTriadData
			tempList, err = s.genByDeviceIds(tx, devMap, batchId, userId, tenantId, req)
			triadsList = append(triadsList, tempList...)
		}
		return err
	})

	if err != nil {
		logger.Errorf("GeneratorDeviceTriad error : %s", err.Error())
		return err
	}

	//发生错误可以忽略，延迟到设备登录时通过grpc接口获取三元组
	str, err := json.Marshal(triadsList)
	if err == nil {
		iotnatsjs.GetJsClientPub().PushData(&iotnatsjs.NatsPubData{Subject: iotconst.NATS_SUBJECT_AUTH, Data: string(str)})
	}
	return nil
}

func (s *IotDeviceTriadSvc) genBySerialNumbers(tx *orm.Query, snMap map[string]int, batchId int32, userId string, tenantId string, req *proto.IotDeviceTriadGenerateRequest) (triadsList []iotstruct.MqttToNatsDeviceTriadData, err error) {
	saveObjs := make([]*model.TIotDeviceTriad, 0)
	//repeatSN := []string{}
	pageSize := 100
	totalCount := len(req.SerialNumbers)
	runCount := 0
	newDevIds, err := s.newDevIds(totalCount)
	if err != nil {
		return nil, err
	}
	for i, sn := range req.SerialNumbers {
		if _, ok := snMap[sn]; ok {
			err = errors.New(fmt.Sprintf("【%s】序列号重复", sn))
			break
		}
		deviceTriad := model.TIotDeviceTriad{
			Id:              iotutil.GetNextSeqInt64(),
			TenantId:        tenantId,
			Did:             newDevIds[i].GetId(), //iotutil.GetSecret(14),
			ProductKey:      req.ProductKey,
			ProductId:       req.ProductId,
			DeviceNatureKey: req.DeviceNatureKey,
			UseType:         req.UseType,
			IsTest:          req.IsTest,
			BatchId:         batchId,
			SerialNumber:    sn,
			UserName:        newDevIds[i].GetUser(),     //iotutil.GetSecret(6),
			Passward:        newDevIds[i].GetPassword(), //iotutil.GetSecret(14),
			Status:          0,
			Salt:            newDevIds[i].GetSalt(), // iotutil.GetSecret(8),
			DeviceSecret:    iotutil.GetSecret(8),
			CreatedBy:       iotutil.ToInt64(userId),
		}
		if req.PlatformCode != "" {
			deviceTriad.PlatformCode = req.PlatformCode
			deviceTriad.IsOtherPlatform = 1
		}
		saveObjs = append(saveObjs, &deviceTriad)
		triadsList = append(triadsList, iotstruct.MqttToNatsDeviceTriadData{
			ProductKey: deviceTriad.ProductKey,
			DeviceId:   deviceTriad.Did,
			UserName:   deviceTriad.UserName,
			Passward:   deviceTriad.Passward,
			Salt:       deviceTriad.Salt,
		})
		runCount++
		if len(saveObjs) == pageSize || runCount == totalCount {
			err = tx.TIotDeviceTriad.WithContext(context.Background()).Create(saveObjs...)
			saveObjs = make([]*model.TIotDeviceTriad, 0)
			continue
		}
	}
	return
}

func (s *IotDeviceTriadSvc) newDevIds(count int) (newDevIds []*proto.Triad, err error) {
	rsp, err := rpcClient.ClientMqttService.BatchGenTriad(context.Background(), &proto.BatchGenTriadRequest{Nums: int64(count)})
	if err != nil {
		return nil, err
	}
	if rsp.Code != 200 {
		return nil, errors.New(rsp.Msg)
	}
	if len(rsp.Data) == 0 {
		return nil, errors.New("未生成设备Id")
	}
	if len(rsp.Data) != count {
		return nil, errors.New("生成设备Id的数量不一致")
	}
	return rsp.Data, nil
}

func (s *IotDeviceTriadSvc) newVirtualDevIds() (newDevIds []*proto.Triad, err error) {
	rsp, err := rpcClient.ClientMqttService.GenVirtualTriad(context.Background(), &proto.BatchGenTriadRequest{Nums: 1})
	if err != nil {
		return nil, err
	}
	if rsp.Code != 200 {
		return nil, errors.New(rsp.Msg)
	}
	if len(rsp.Data) == 0 {
		return nil, errors.New("未生成虚拟设备Id")
	}
	return rsp.Data, nil
}

func VerifyKey(devices []*proto.GenDeviceTriadData) error {
	req := proto.VerifyTriadRequest{}
	for _, d := range devices {
		req.Data = append(req.Data, &proto.Triad{Id: d.DeviceId})
	}
	rsp, err := rpcClient.ClientMqttService.VerifyTriad(context.Background(), &req)
	if err != nil {
		return err
	}
	if rsp.Code != 200 {
		return errors.New(rsp.Msg)
	}
	var failureList []string
	for k, v := range rsp.Data {
		if !v {
			failureList = append(failureList, k)
		}
	}
	if len(failureList) == 0 {
		return nil
	}
	return fmt.Errorf("failureList:%v", failureList)
}

func (s *IotDeviceTriadSvc) genByDeviceIds(tx *orm.Query, devMap map[string]int, batchId int32, userId string, tenantId string, req *proto.IotDeviceTriadGenerateRequest) (triadsList []iotstruct.MqttToNatsDeviceTriadData, err error) {
	saveObjs := make([]*model.TIotDeviceTriad, 0)
	pageSize := 100
	totalCount := len(req.DeviceImport)
	runCount := 0
	for _, d := range req.DeviceImport {
		if _, ok := devMap[d.DeviceId]; ok {
			err = errors.New(fmt.Sprintf("【%s】序列号重复", d.DeviceId))
			break
		}
		deviceTriad := model.TIotDeviceTriad{
			Id:              iotutil.GetNextSeqInt64(),
			TenantId:        tenantId,
			Did:             d.DeviceId,
			ProductKey:      req.ProductKey,
			ProductId:       req.ProductId,
			DeviceNatureKey: req.DeviceNatureKey,
			UseType:         req.UseType,
			IsTest:          req.IsTest,
			BatchId:         batchId,
			SerialNumber:    d.Sn,
			UserName:        d.UserName,
			Passward:        d.Password,
			Status:          0,
			Salt:            iotutil.GetSecret(8),
			DeviceSecret:    iotutil.GetSecret(8),
			CreatedBy:       iotutil.ToInt64(userId),
		}
		if req.PlatformCode != "" {
			deviceTriad.PlatformCode = req.PlatformCode
			deviceTriad.IsOtherPlatform = 1
		}
		saveObjs = append(saveObjs, &deviceTriad)
		triadsList = append(triadsList, iotstruct.MqttToNatsDeviceTriadData{
			ProductKey: deviceTriad.ProductKey,
			DeviceId:   deviceTriad.Did,
			UserName:   deviceTriad.UserName,
			Passward:   deviceTriad.Passward,
			Salt:       deviceTriad.Salt,
		})
		runCount++
		if len(saveObjs) == pageSize || runCount == totalCount {
			err = tx.TIotDeviceTriad.WithContext(context.Background()).Create(saveObjs...)
			saveObjs = make([]*model.TIotDeviceTriad, 0)
			continue
		}
	}
	return
}

// 获取当前租户的授权设备总数
func (s *IotDeviceTriadSvc) GetDeviceTriadCountByTenantId(req *proto.IotDeviceTriadFilter) (int64, error) {
	tenantId, _ := metadata.Get(s.Ctx, "tenantid")
	if tenantId == "" {
		return 0, errors.New("租户ID获取失败。")
	}
	t := orm.Use(iotmodel.GetDB()).TIotDeviceTriad
	do := t.WithContext(context.Background()).Where(t.TenantId.Eq(tenantId), t.UseType.Eq(req.UseType), t.IsTest.Eq(req.IsTest))
	if req.ProductId != 0 {
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.ProductKey != "" {
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.AppKey != "" {
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	return do.Select(t.Id).Count()
}

// 设置测试账号（解除测试、启用测试）
func (s *IotDeviceTriadSvc) SetTestDeviceTriad(req *proto.SetTestTriadRequest) error {
	tenantId, _ := metadata.Get(s.Ctx, "tenantid")
	if tenantId == "" {
		return errors.New("租户ID获取失败。")
	}
	if req.DeviceId == "" && req.DeviceDataId == 0 {
		return errors.New("设备参数不能为空。")
	}
	q := orm.Use(iotmodel.GetDB())
	err := q.Transaction(func(tx *orm.Query) error {
		t := tx.TIotDeviceTriad
		do := t.WithContext(context.Background()).Where(t.TenantId.Eq(tenantId))
		if req.DeviceId != "" {
			do = do.Where(t.Did.Eq(req.DeviceId))
		}
		if req.DeviceDataId != 0 {
			do = do.Where(t.Id.Eq(req.DeviceDataId))
		}
		//检查三元组是否为这个产品的三元组
		list, err := do.Find()
		if err != nil {
			return err
		}
		if len(list) == 0 {
			return errors.New("非法设备ID")
		}
		device := list[0]
		//设置为真实测试设备，需要判断设备是否已经被绑定，需要判断当前设备Id是否为产品Key
		if req.IsTest == 1 {
			//if device.Status == 1 {
			//	return errors.New("设备已被绑定")
			//}
			if device.ProductKey != req.ProductKey {
				return errors.New("设备Id不属于当前产品")
			}
		}
		//TODO isTest==0 不做限制 修改为测试设备，需要移除设备
		//s.RemoveDeleteCached(device.Did, tx)
		//修改状态
		doUpdate := t.WithContext(context.Background()).Where(t.TenantId.Eq(tenantId))
		if req.DeviceId != "" {
			doUpdate = doUpdate.Where(t.Did.Eq(req.DeviceId))
		}
		if req.DeviceDataId != 0 {
			doUpdate = doUpdate.Where(t.Id.Eq(req.DeviceDataId))
		}
		//设置is_test, 清空：app_name, user_account, app_key, user_id
		//info, err := doUpdate.Select(t.IsTest, t.AppName, t.AppKey, t.UserAccount, t.UserId, t.Status).
		//	Updates(model.TIotDeviceTriad{
		//		IsTest:      req.IsTest,
		//		AppName:     "",
		//		UserAccount: "",
		//		AppKey:      "",
		//		Status:      0,
		//	})
		info, err := doUpdate.Select(t.IsTest, t.AppName, t.AppKey, t.UserAccount, t.UserId, t.Status).
			Updates(map[string]interface{}{
				//string(t.UserId.ColumnName()):      gorm.Expr("NULL"),
				//string(t.AppName.ColumnName()):     gorm.Expr("NULL"),
				//string(t.AppKey.ColumnName()):      gorm.Expr("NULL"),
				//string(t.UserAccount.ColumnName()): gorm.Expr("NULL"),
				//string(t.Status.ColumnName()):      0,
				string(t.IsTest.ColumnName()): req.IsTest,
			})

		if err != nil {
			return err
		}
		if info.Error != nil {
			return info.Error
		}
		return err
	})
	if err != nil {
		logger.Errorf("SetTestDeviceTriad delete old error : %s", err.Error())
		return err
	}
	return nil
}

func (s *IotDeviceTriadSvc) RemoveDeleteCached(did string, tx *orm.Query) error {
	if did == "" {
		return errors.New("RemoveDeleteCached 设备Id为空")
	}
	//删除deviceHome
	_, err := tx.TIotDeviceHome.WithContext(context.Background()).Where(tx.TIotDeviceHome.DeviceId.Eq(did)).Delete()
	if err != nil {
		return errors.New("该三元组不属于当前产品")
	}
	//删除deviceInfo
	_, err = tx.TIotDeviceInfo.WithContext(context.Background()).Where(tx.TIotDeviceInfo.Did.Eq(did)).Delete()
	if err != nil {
		return errors.New("该三元组不属于当前产品")
	}
	//删除缓存
	iotredis.GetClient().HDel(context.Background(), iotconst.HKEY_DEV_DATA_PREFIX+did)
	return nil
}

// 设置测试账号
func (s *IotDeviceTriadSvc) BindTestAccount(req *proto.BindTestAccountRequest) error {
	tenantId, _ := metadata.Get(s.Ctx, "tenantid")
	if tenantId == "" {
		return errors.New("租户ID获取失败.")
	}
	q := orm.Use(iotmodel.GetDB())
	tTriad := q.TIotDeviceTriad
	deviceInfos, err := q.TIotDeviceTriad.WithContext(context.Background()).Where(tTriad.Did.Eq(req.DeviceId)).Find()
	if err != nil {
		return err
	}
	if len(deviceInfos) == 0 {
		return errors.New("设备ID不存在")
	}
	deviceInfo := deviceInfos[0]
	//if deviceInfo.IsTest == 1 {
	//	return errors.New("设备已是测试设备，无法重复设置")
	//}
	//if deviceInfo.Status == 1 {
	//	return errors.New("设备已是激活设备，无法设置为测试设备")
	//}
	err = q.Transaction(func(tx *orm.Query) error {
		return s.DeviceBindHome(deviceInfo, req, tx)
	})
	if err != nil {
		logger.Errorf("TransalteCreate delete old error : %s", err.Error())
		return err
	}
	return err
}

func (s *IotDeviceTriadSvc) DeviceBindHome(deviceInfo *model.TIotDeviceTriad, req *proto.BindTestAccountRequest, tx *orm.Query) error {
	//将三元组信息激活
	deviceTriadSvc := IotDeviceTriadSvc{Ctx: s.Ctx}
	err := deviceTriadSvc.SetUseStatus(tx, req.DeviceId)
	if err != nil {
		iotlogger.LogHelper.Error("设备家庭绑定失败, err=" + err.Error())
		return err
	}

	do := tx.TIotDeviceHome.WithContext(context.Background())
	deviceHome := &model.TIotDeviceHome{
		Id:           iotutil.GetNextSeqInt64(),
		HomeId:       req.HomeId,
		DeviceId:     deviceInfo.Did,
		RoomId:       0,
		ProductId:    req.ProductId,
		ProductKey:   req.ProductKey,
		CustomName:   req.ProductName,
		BindTime:     time.Now(),
		Secrtkey:     req.SecretKey,
		AddMethod:    2,
		CreatedBy:    req.UserId,
		UpdatedBy:    req.UserId,
		PanelId:      req.PanelId,
		AppPanelType: req.AppPanelType,
	}
	t := tx.TIotDeviceHome
	//count, err := do.Where(t.DeviceId.Eq(req.DeviceId)).Count()
	//if err != nil {
	//	logger.Errorf("TransalteCreate count error : %s", err.Error())
	//	return err
	//}
	//if count > 0 {
	//	return errors.New("设备已被绑定")
	//}
	_, err = do.Where(t.DeviceId.Eq(req.DeviceId)).Delete()
	if err != nil {
		logger.Errorf("TransalteCreate delete old error : %s", err.Error())
		return err
	}
	err = do.Create(deviceHome)
	if err != nil {
		logger.Errorf("TransalteCreate error : %s", err.Error())
		return err
	}
	tTriad := tx.TIotDeviceTriad
	_, err = tTriad.WithContext(context.Background()).
		Where(tTriad.Id.Eq(deviceInfo.Id)).Select(tTriad.UserAccount, tTriad.AppKey, tTriad.AppName, tTriad.UserId).
		Updates(model.TIotDeviceTriad{
			AppName:     req.AppName,
			AppKey:      req.AppKey,
			UserId:      req.UserId,
			UserAccount: req.UserAccount,
		})
	if err != nil {
		logger.Errorf("update deviceTriad error : %s", err.Error())
		return err
	}
	//创建设备信息
	deviceInfoSvc := IotDeviceInfoSvc{Ctx: s.Ctx}
	err = deviceInfoSvc.TranCreate(tx, &model.TIotDeviceInfo{
		Id:                iotutil.GetNextSeqInt64(),
		Did:               deviceInfo.Did,
		ProductId:         req.ProductId,
		OnlineStatus:      1,
		Sn:                deviceInfo.SerialNumber,
		DeviceName:        req.ProductName,
		DeviceModel:       req.ProductKey,
		UserName:          deviceInfo.UserName,
		Passward:          deviceInfo.Passward,
		Salt:              deviceInfo.Salt,      //triad.Salt
		DeviceSecretHttp:  iotutil.GetSecret(6), //t
		DeviceSecretMqtt:  iotutil.GetSecret(6),
		ActivatedTime:     time.Now(),
		ActiveStatus:      "1",
		LastActivatedTime: time.Now(),
		ProductKey:        req.ProductKey,
		ActiveUserId:      req.UserId,
		ActiveUserName:    req.UserAccount,
		TenantId:          deviceInfo.TenantId,
		AppKey:            req.AppKey,
		ActiveChannel:     4, //TODO 激活渠道确认
		UseType:           deviceInfo.UseType,
	})
	if err != nil {
		iotlogger.LogHelper.Error("设备家庭绑定失败, err=" + err.Error())
		return err
	}
	//缓存设备信息
	var deviceInitStatus map[string]interface{} = map[string]interface{}{
		"productKey":              req.ProductKey,
		"serialNumber":            deviceInfo.SerialNumber,
		"productId":               req.ProductId,
		"did":                     deviceInfo.Did,
		"productName":             req.ProductName,
		"deviceName":              req.ProductName,
		"userId":                  req.UserId,
		"homeId":                  req.HomeId,
		"appKey":                  req.AppKey,
		"tenantId":                req.TenantId,
		iotconst.FIELD_ONLINE:     "online",
		iotconst.FIELD_ONLINETIME: time.Now().Unix(),
	}
	newDeviceStatusCmd := iotredis.GetClient().HMSet(context.Background(), iotconst.HKEY_DEV_DATA_PREFIX+deviceInfo.Did, deviceInitStatus)
	if newDeviceStatusCmd.Err() != nil {
		logger.Errorf("FindByIdIotDeviceInfo redis error : %s", newDeviceStatusCmd.Err().Error())
		return newDeviceStatusCmd.Err()
	}

	//不再发送上线消息，改为由设备模拟器发送
	//默认设备上线
	/*
		var obj iotprotocol.PackOnline
		buf, err := obj.Encode("", true)
		if err != nil {
			logger.Errorf("iotprotocol.PackOnline Encode error : %s", err.Error())
			return nil
		}
		ret, err := rpcClient.ClientMqttService.Publish(context.Background(), &proto.PublishMessage{
			TopicFullName:  iotprotocol.GetTopic(iotprotocol.TP_E_ONLINE, req.ProductKey, req.DeviceId),
			MessageContent: string(buf),
			Qos:            proto.Qos_ExactlyOnce,
			Retained:       true,
		})
		if err != nil {
			logger.Errorf("rpcClient.ClientMqttService.Publish error : %s", err.Error())
			return nil
		}
		if ret.Code != 200 {
			logger.Errorf("rpcClient.ClientMqttService.Publish error : %s", ret.Message)
		}
	*/
	return nil
}

// 批量生成三元组
func (s *IotDeviceTriadSvc) CreateAndBindDeviceTriad(req *proto.IotDeviceTriadGenerateRequest) error {
	userId, err := CheckUserId(s.Ctx)
	if err != nil {
		return errors.New("未获取登录用户信息")
	}

	//如果未传入租户id，则使用默认租户id
	if req.BindInfo.TenantId == "" {
		//req.BindInfo.TenantId, err = CheckTenantId(s.Ctx)
		if err != nil {
			return errors.New("TenantId不能为空")
		}
	}
	var batchId int32 = 0
	if req.Batch != "" {
		batchId, err = iotutil.ToInt32Err(req.Batch)
		if err != nil {
			return errors.New("批次号异常，" + req.Batch)
		}
	}
	var triadsList []iotstruct.MqttToNatsDeviceTriadData
	newDevIds, err := s.newVirtualDevIds()
	if err != nil {
		return err
	}
	err = orm.Use(iotmodel.GetDB()).Transaction(func(tx *orm.Query) error {
		deviceTriad := &model.TIotDeviceTriad{
			Id:              iotutil.GetNextSeqInt64(),
			TenantId:        req.BindInfo.TenantId,
			CreatedBy:       iotutil.ToInt64(userId),
			Did:             newDevIds[0].GetId(),
			ProductKey:      req.ProductKey,
			ProductId:       req.ProductId,
			DeviceNatureKey: req.DeviceNatureKey,
			UseType:         req.UseType,
			IsTest:          req.IsTest,
			BatchId:         batchId,
			UserName:        newDevIds[0].GetUser(),     //iotutil.GetSecret(6),
			Passward:        newDevIds[0].GetPassword(), //iotutil.GetSecret(14),
			Salt:            newDevIds[0].GetSalt(),     // iotutil.GetSecret(8),
			SerialNumber:    iotutil.GetSecret(8),
			Status:          0,
			DeviceSecret:    iotutil.GetSecret(8),
			FirstActiveTime: time.Now(),
		}
		triadsList = append(triadsList, iotstruct.MqttToNatsDeviceTriadData{
			ProductKey: deviceTriad.ProductKey,
			DeviceId:   deviceTriad.Did,
			UserName:   deviceTriad.UserName,
			Passward:   deviceTriad.Passward,
			Salt:       deviceTriad.Salt,
		})
		req.BindInfo.DeviceId = deviceTriad.Did
		err = tx.TIotDeviceTriad.WithContext(context.Background()).Create(deviceTriad)
		s.DeviceBindHome(deviceTriad, req.BindInfo, tx)
		return err
	})

	if err != nil {
		logger.Errorf("GeneratorDeviceTriad error : %s", err.Error())
		return err
	}

	//发生错误可以忽略，延迟到设备登录时通过grpc接口获取三元组
	str, err := json.Marshal(triadsList)
	if err == nil {
		iotnatsjs.GetJsClientPub().PushData(&iotnatsjs.NatsPubData{Subject: iotconst.NATS_SUBJECT_AUTH, Data: string(str)})
	}
	return nil
}

func (s *IotDeviceTriadSvc) GetDeviceTriadCount(req *proto.IotDeviceTriadCountRequest) ([]*proto.IotDeviceTriadCount, error) {
	q := orm.Use(iotmodel.GetDB())
	t := q.TIotDeviceTriad
	do := t.WithContext(context.Background())

	if req.TenantId != "" {
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.ProductId != 0 {
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.PlatformCode != "" {
		do = do.Where(t.PlatformCode.Eq(req.PlatformCode))
	}
	if req.IsExport != 0 {
		if req.IsExport == 1 {
			do = do.Where(t.ExportCount.Gt(0))
		} else if req.IsExport == 2 {
			do = do.Where(t.ExportCount.Eq(0))
		}
	}
	var deviceCounts []*proto.IotDeviceTriadCount
 	err := do.Where(t.PlatformCode.IsNotNull()).Group(t.PlatformCode).Select(t.PlatformCode.As("key"), t.Id.Count().As("value")).Scan(&deviceCounts)
	if err != nil {
		logger.Errorf("GetDeviceTriadCount error : %s", err.Error())
		return nil, err
	}
	return deviceCounts, nil
}