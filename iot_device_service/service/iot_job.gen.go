// Code generated by sgen.exe,2022-12-23 15:26:00. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/ioterrs"
	"context"
	"errors"
	goerrors "go-micro.dev/v4/errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_device_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_device/model"
	"cloud_platform/iot_model/db_device/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type IotJobSvc struct {
	Ctx context.Context
}

// 创建IotJob
func (s *IotJobSvc) CreateIotJob(req *proto.IotJob) (*proto.IotJob, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TIotJob
	do := t.WithContext(context.Background())
	dbObj := convert.IotJob_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateIotJob error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除IotJob
func (s *IotJobSvc) DeleteIotJob(req *proto.IotJob) (*proto.IotJob, error) {
	t := orm.Use(iotmodel.GetDB()).TIotJob
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.DeviceId != "" { //字符串
		do = do.Where(t.DeviceId.Eq(req.DeviceId))
	}
	if req.TaskId != 0 { //整数
		do = do.Where(t.TaskId.Eq(req.TaskId))
	}
	if req.TaskType != 0 { //整数
		do = do.Where(t.TaskType.Eq(req.TaskType))
	}
	if req.Enabled != 0 { //整数
		do = do.Where(t.Enabled.Eq(req.Enabled))
	}
	if req.Cron != "" { //字符串
		do = do.Where(t.Cron.Eq(req.Cron))
	}
	if req.Data != "" { //字符串
		do = do.Where(t.Data.Eq(req.Data))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.EndData != "" { //字符串
		do = do.Where(t.EndData.Eq(req.EndData))
	}
	if req.EndCron != "" { //字符串
		do = do.Where(t.EndCron.Eq(req.EndCron))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteIotJob error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除IotJob
func (s *IotJobSvc) DeleteByIdIotJob(req *proto.IotJob) (*proto.IotJob, error) {
	t := orm.Use(iotmodel.GetDB()).TIotJob
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdIotJob error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除IotJob
func (s *IotJobSvc) DeleteByIdsIotJob(req *proto.IotJobBatchDeleteRequest) (*proto.IotJobBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TIotJob
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsIotJob error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新IotJob
func (s *IotJobSvc) UpdateIotJob(req *proto.IotJob) (*proto.IotJob, error) {
	t := orm.Use(iotmodel.GetDB()).TIotJob
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.ProductKey != "" { //字符串
		updateField = append(updateField, t.ProductKey)
	}
	if req.DeviceId != "" { //字符串
		updateField = append(updateField, t.DeviceId)
	}
	if req.TaskId != 0 { //整数
		updateField = append(updateField, t.TaskId)
	}
	if req.TaskType != 0 { //整数
		updateField = append(updateField, t.TaskType)
	}
	if req.Enabled != 0 { //整数
		updateField = append(updateField, t.Enabled)
	}
	if req.Cron != "" { //字符串
		updateField = append(updateField, t.Cron)
	}
	if req.Data != "" { //字符串
		updateField = append(updateField, t.Data)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if req.EndData != "" { //字符串
		updateField = append(updateField, t.EndData)
	}
	if req.EndCron != "" { //字符串
		updateField = append(updateField, t.EndCron)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateIotJob error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.IotJob_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateIotJob error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段IotJob
func (s *IotJobSvc) UpdateAllIotJob(req *proto.IotJob) (*proto.IotJob, error) {
	t := orm.Use(iotmodel.GetDB()).TIotJob
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.ProductKey)
	updateField = append(updateField, t.DeviceId)
	updateField = append(updateField, t.TaskId)
	updateField = append(updateField, t.TaskType)
	updateField = append(updateField, t.Enabled)
	updateField = append(updateField, t.Cron)
	updateField = append(updateField, t.Data)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	updateField = append(updateField, t.EndData)
	updateField = append(updateField, t.EndCron)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllIotJob error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotJob_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllIotJob error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *IotJobSvc) UpdateFieldsIotJob(req *proto.IotJobUpdateFieldsRequest) (*proto.IotJob, error) {
	t := orm.Use(iotmodel.GetDB()).TIotJob
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsIotJob error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsIotJob error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotJob_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsIotJob error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找IotJob
func (s *IotJobSvc) FindIotJob(req *proto.IotJobFilter) (*proto.IotJob, error) {
	t := orm.Use(iotmodel.GetDB()).TIotJob
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.DeviceId != "" { //字符串
		do = do.Where(t.DeviceId.Eq(req.DeviceId))
	}
	if req.TaskId != 0 { //整数
		do = do.Where(t.TaskId.Eq(req.TaskId))
	}
	if req.TaskType != 0 { //整数
		do = do.Where(t.TaskType.Eq(req.TaskType))
	}
	if req.Enabled != 0 { //整数
		do = do.Where(t.Enabled.Eq(req.Enabled))
	}
	if req.Cron != "" { //字符串
		do = do.Where(t.Cron.Eq(req.Cron))
	}
	if req.Data != "" { //字符串
		do = do.Where(t.Data.Eq(req.Data))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.EndData != "" { //字符串
		do = do.Where(t.EndData.Eq(req.EndData))
	}
	if req.EndCron != "" { //字符串
		do = do.Where(t.EndCron.Eq(req.EndCron))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindIotJob error : %s", err.Error())
		return nil, err
	}
	res := convert.IotJob_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找IotJob
func (s *IotJobSvc) FindByIdIotJob(req *proto.IotJobFilter) (*proto.IotJob, error) {
	t := orm.Use(iotmodel.GetDB()).TIotJob
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdIotJob error : %s", err.Error())
		return nil, err
	}
	res := convert.IotJob_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找IotJob,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *IotJobSvc) GetListIotJob(req *proto.IotJobListRequest) ([]*proto.IotJob, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TIotJob
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {
		if query.RegionServerId != 0 { //整数
			do = do.Where(t.RegionServerId.Eq(query.RegionServerId))
		}
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.ProductKey != "" { //字符串
			do = do.Where(t.ProductKey.Like("%" + query.ProductKey + "%"))
		}
		if query.DeviceId != "" { //字符串
			do = do.Where(t.DeviceId.Like("%" + query.DeviceId + "%"))
		}
		if query.TaskId != 0 { //整数
			do = do.Where(t.TaskId.Eq(query.TaskId))
		}
		if query.TaskType != 0 { //整数
			do = do.Where(t.TaskType.Eq(query.TaskType))
		}
		if query.Enabled != 0 { //整数
			do = do.Where(t.Enabled.Eq(query.Enabled))
		}
		if query.Cron != "" { //字符串
			do = do.Where(t.Cron.Like("%" + query.Cron + "%"))
		}
		if query.Data != "" { //字符串
			do = do.Where(t.Data.Like("%" + query.Data + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
		if query.EndData != "" { //字符串
			do = do.Where(t.EndData.Like("%" + query.EndData + "%"))
		}
		if query.EndCron != "" { //字符串
			do = do.Where(t.EndCron.Like("%" + query.EndCron + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TIotJob
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListIotJob error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.IotJob, len(list))
	for i, v := range list {
		result[i] = convert.IotJob_db2pb(v)
	}
	return result, total, nil
}

// 启动job任务
func (s *IotJobSvc) StartJob(ctx context.Context, req *proto.JobReq) error {
	infoReq := &proto.IotJobFilter{
		Id: req.Id,
	}
	jobInfo, err := s.FindByIdIotJob(infoReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBJobGet)
	}
	if jobInfo.Enabled == 1 {
		return goerrors.New("", "job任务已启动", ioterrs.ErrJobTaskAlreadyStarted)
	}
	reqJob := &proto.IotJob{
		Id:      req.Id,
		Enabled: 1,
	}
	_, err = s.UpdateIotJob(reqJob)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBJobUpdate)
	}
	err = GetCron().CreateJob(jobInfo)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrJobTaskCreate)
	}
	return nil
}

// 停止job任务
func (s *IotJobSvc) StopJob(ctx context.Context, req *proto.JobReq) error {
	infoReq := &proto.IotJobFilter{
		Id: req.Id,
	}
	jobInfo, err := s.FindByIdIotJob(infoReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBJobGet)
	}
	if jobInfo.Enabled == 2 {
		return goerrors.New("", "job任务已停止", ioterrs.ErrJobTaskAlreadyStopped)
	}
	reqJob := &proto.IotJob{
		Id:      req.Id,
		Enabled: 2,
	}
	_, err = s.UpdateIotJob(reqJob)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBJobUpdate)
	}
	err = GetCron().DeleteJob(jobInfo)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrJobTaskDelete)
	}
	return nil
}
