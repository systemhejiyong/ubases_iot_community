// Code generated by sgen.exe,2022-08-16 10:18:03. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_device_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_device/model"
	"cloud_platform/iot_model/db_device/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type IotDeviceGroupListSvc struct {
	Ctx context.Context
}

// 创建IotDeviceGroupList
func (s *IotDeviceGroupListSvc) CreateIotDeviceGroupList(req *proto.IotDeviceGroupList) (*proto.IotDeviceGroupList, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TIotDeviceGroupList
	do := t.WithContext(context.Background())
	dbObj := convert.IotDeviceGroupList_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateIotDeviceGroupList error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除IotDeviceGroupList
func (s *IotDeviceGroupListSvc) DeleteIotDeviceGroupList(req *proto.IotDeviceGroupList) (*proto.IotDeviceGroupList, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceGroupList
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.GroupId != 0 { //整数
		do = do.Where(t.GroupId.Eq(req.GroupId))
	}
	if req.DevName != "" { //字符串
		do = do.Where(t.DevName.Eq(req.DevName))
	}
	if req.DevId != "" { //字符串
		do = do.Where(t.DevId.Eq(req.DevId))
	}
	if req.HomeId != 0 { //整数
		do = do.Where(t.HomeId.Eq(req.HomeId))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteIotDeviceGroupList error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除IotDeviceGroupList
func (s *IotDeviceGroupListSvc) DeleteByIdIotDeviceGroupList(req *proto.IotDeviceGroupList) (*proto.IotDeviceGroupList, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceGroupList
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdIotDeviceGroupList error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除IotDeviceGroupList
func (s *IotDeviceGroupListSvc) DeleteByIdsIotDeviceGroupList(req *proto.IotDeviceGroupListBatchDeleteRequest) (*proto.IotDeviceGroupListBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TIotDeviceGroupList
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsIotDeviceGroupList error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新IotDeviceGroupList
func (s *IotDeviceGroupListSvc) UpdateIotDeviceGroupList(req *proto.IotDeviceGroupList) (*proto.IotDeviceGroupList, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceGroupList
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.GroupId != 0 { //整数
		updateField = append(updateField, t.GroupId)
	}
	if req.DevName != "" { //字符串
		updateField = append(updateField, t.DevName)
	}
	if req.DevId != "" { //字符串
		updateField = append(updateField, t.DevId)
	}
	if req.HomeId != 0 { //整数
		updateField = append(updateField, t.HomeId)
	}
	if req.UserId != 0 { //整数
		updateField = append(updateField, t.UserId)
	}
	if req.ProductKey != "" { //字符串
		updateField = append(updateField, t.ProductKey)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateIotDeviceGroupList error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.IotDeviceGroupList_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateIotDeviceGroupList error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段IotDeviceGroupList
func (s *IotDeviceGroupListSvc) UpdateAllIotDeviceGroupList(req *proto.IotDeviceGroupList) (*proto.IotDeviceGroupList, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceGroupList
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.GroupId)
	updateField = append(updateField, t.DevName)
	updateField = append(updateField, t.DevId)
	updateField = append(updateField, t.HomeId)
	updateField = append(updateField, t.UserId)
	updateField = append(updateField, t.ProductKey)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllIotDeviceGroupList error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceGroupList_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllIotDeviceGroupList error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *IotDeviceGroupListSvc) UpdateFieldsIotDeviceGroupList(req *proto.IotDeviceGroupListUpdateFieldsRequest) (*proto.IotDeviceGroupList, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceGroupList
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsIotDeviceGroupList error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsIotDeviceGroupList error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.IotDeviceGroupList_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsIotDeviceGroupList error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找IotDeviceGroupList
func (s *IotDeviceGroupListSvc) FindIotDeviceGroupList(req *proto.IotDeviceGroupListFilter) (*proto.IotDeviceGroupList, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceGroupList
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.GroupId != 0 { //整数
		do = do.Where(t.GroupId.Eq(req.GroupId))
	}
	if req.DevName != "" { //字符串
		do = do.Where(t.DevName.Eq(req.DevName))
	}
	if req.DevId != "" { //字符串
		do = do.Where(t.DevId.Eq(req.DevId))
	}
	if req.HomeId != 0 { //整数
		do = do.Where(t.HomeId.Eq(req.HomeId))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindIotDeviceGroupList error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceGroupList_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找IotDeviceGroupList
func (s *IotDeviceGroupListSvc) FindByIdIotDeviceGroupList(req *proto.IotDeviceGroupListFilter) (*proto.IotDeviceGroupList, error) {
	t := orm.Use(iotmodel.GetDB()).TIotDeviceGroupList
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdIotDeviceGroupList error : %s", err.Error())
		return nil, err
	}
	res := convert.IotDeviceGroupList_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找IotDeviceGroupList,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *IotDeviceGroupListSvc) GetListIotDeviceGroupList(req *proto.IotDeviceGroupListListRequest) ([]*proto.IotDeviceGroupList, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	q := orm.Use(iotmodel.GetDB())
	t := q.TIotDeviceGroupList
	tGroup := q.TIotDeviceGroup
	do := t.WithContext(context.Background()).LeftJoin(tGroup, tGroup.Id.EqCol(t.GroupId))
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.GroupId != 0 { //整数
			do = do.Where(t.GroupId.Eq(query.GroupId))
		}
		if query.DevName != "" { //字符串
			do = do.Where(t.DevName.Like("%" + query.DevName + "%"))
		}
		if query.DevId != "" { //字符串
			do = do.Where(t.DevId.Like("%" + query.DevId + "%"))
		}
		if query.HomeId != 0 { //整数
			do = do.Where(t.HomeId.Eq(query.HomeId))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.ProductKey != "" { //字符串
			do = do.Where(t.ProductKey.Like("%" + query.ProductKey + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Sort
		do = do.Order(t.Sort)
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []struct {
		model.TIotDeviceGroupList
		Name string `json:"name"`
	}
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do.Select(t.ALL, tGroup.Name).ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Select(t.ALL, tGroup.Name).Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListIotDeviceGroupList error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.IotDeviceGroupList, len(list))
	for i, v := range list {
		result[i] = convert.IotDeviceGroupList_db2pb(&v.TIotDeviceGroupList)
		result[i].GroupName = v.Name
	}
	return result, total, nil
}
