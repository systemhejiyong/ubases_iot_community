// Code generated by sgen.exe,2022-08-18 08:44:03. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"cloud_platform/iot_common/iotconst"
	"context"

	"cloud_platform/iot_device_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type IotOtaUpgradeRecordHandler struct{}

// 生成升级设备
func (h *IotOtaUpgradeRecordHandler) GenerateUpgradeDevice(ctx context.Context, request *proto.GenerateUpgradeDeviceRequest, response *proto.GenerateUpgradeDeviceResponse) error {
	s := service.IotOtaUpgradeRecordSvc{Ctx: ctx}
	var total int64
	var err error
	//如果是灰度测试
	if request.IsGray == iotconst.OTA_PUBLISH_GRAY {
		total, err = s.GenerateUpgradeDevice(request)
	} else {
		total, err = s.GenerateUpgradeDeviceAll(request)
	}
	if err != nil {
		response.Code = ERROR
		response.Message = err.Error()
	} else {
		response.Code = SUCCESS
		response.Message = "success"
		response.Total = total
	}
	return nil
}

// 停止升级设备
func (h *IotOtaUpgradeRecordHandler) StopUpgradeDevice(ctx context.Context, request *proto.GenerateUpgradeDeviceRequest, response *proto.GenerateUpgradeDeviceResponse) error {
	s := service.IotOtaUpgradeRecordSvc{Ctx: ctx}
	var total int64
	var err error
	//如果是灰度测试
	total, err = s.StopUpgradeDevice(request)

	if err != nil {
		response.Code = ERROR
		response.Message = err.Error()
	} else {
		response.Code = SUCCESS
		response.Message = "success"
		response.Total = total
	}
	return nil
}

// 创建
func (h *IotOtaUpgradeRecordHandler) Create(ctx context.Context, req *proto.IotOtaUpgradeRecord, resp *proto.Response) error {
	s := service.IotOtaUpgradeRecordSvc{Ctx: ctx}
	_, err := s.CreateIotOtaUpgradeRecord(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *IotOtaUpgradeRecordHandler) Delete(ctx context.Context, req *proto.IotOtaUpgradeRecord, resp *proto.Response) error {
	s := service.IotOtaUpgradeRecordSvc{Ctx: ctx}
	_, err := s.DeleteIotOtaUpgradeRecord(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *IotOtaUpgradeRecordHandler) DeleteById(ctx context.Context, req *proto.IotOtaUpgradeRecord, resp *proto.Response) error {
	s := service.IotOtaUpgradeRecordSvc{Ctx: ctx}
	_, err := s.DeleteByIdIotOtaUpgradeRecord(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *IotOtaUpgradeRecordHandler) DeleteByIds(ctx context.Context, req *proto.IotOtaUpgradeRecordBatchDeleteRequest, resp *proto.Response) error {
	s := service.IotOtaUpgradeRecordSvc{Ctx: ctx}
	_, err := s.DeleteByIdsIotOtaUpgradeRecord(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *IotOtaUpgradeRecordHandler) Update(ctx context.Context, req *proto.IotOtaUpgradeRecord, resp *proto.Response) error {
	s := service.IotOtaUpgradeRecordSvc{Ctx: ctx}
	_, err := s.UpdateIotOtaUpgradeRecord(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *IotOtaUpgradeRecordHandler) UpdateAll(ctx context.Context, req *proto.IotOtaUpgradeRecord, resp *proto.Response) error {
	s := service.IotOtaUpgradeRecordSvc{Ctx: ctx}
	_, err := s.UpdateAllIotOtaUpgradeRecord(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *IotOtaUpgradeRecordHandler) UpdateFields(ctx context.Context, req *proto.IotOtaUpgradeRecordUpdateFieldsRequest, resp *proto.Response) error {
	s := service.IotOtaUpgradeRecordSvc{Ctx: ctx}
	_, err := s.UpdateFieldsIotOtaUpgradeRecord(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *IotOtaUpgradeRecordHandler) Find(ctx context.Context, req *proto.IotOtaUpgradeRecordFilter, resp *proto.IotOtaUpgradeRecordResponse) error {
	s := service.IotOtaUpgradeRecordSvc{Ctx: ctx}
	data, err := s.FindIotOtaUpgradeRecord(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *IotOtaUpgradeRecordHandler) FindById(ctx context.Context, req *proto.IotOtaUpgradeRecordFilter, resp *proto.IotOtaUpgradeRecordResponse) error {
	s := service.IotOtaUpgradeRecordSvc{Ctx: ctx}
	data, err := s.FindByIdIotOtaUpgradeRecord(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *IotOtaUpgradeRecordHandler) Lists(ctx context.Context, req *proto.IotOtaUpgradeRecordListRequest, resp *proto.IotOtaUpgradeRecordResponse) error {
	s := service.IotOtaUpgradeRecordSvc{Ctx: ctx}
	data, total, statusTotal, err := s.GetListIotOtaUpgradeRecord(req)
	h.SetPageResponse(resp, data, total, err)
	//状态数据赋值
	if err == nil {
		for _, t := range statusTotal {
			switch t.Status {
			case 4:
				resp.SuccessTotal = t.Count
			case 5:
				resp.FailTotal = t.Count
			}
		}
	}
	return nil
}

func (h *IotOtaUpgradeRecordHandler) SetResponse(resp *proto.IotOtaUpgradeRecordResponse, data *proto.IotOtaUpgradeRecord, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *IotOtaUpgradeRecordHandler) SetPageResponse(resp *proto.IotOtaUpgradeRecordResponse, list []*proto.IotOtaUpgradeRecord, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
