// Code generated by sgen.exe,2022-04-21 14:24:40. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_device_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type IotDeviceInfoHandler struct{}

// 作废，已经改为nats推送激活信息
func (h *IotDeviceInfoHandler) ActiveDevice(ctx context.Context, request *proto.ActiveDeviceRequest, response *proto.Response) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	err := s.ActiveDevice(request)
	if err != nil {
		response.Code = ERROR
		response.Message = err.Error()
	} else {
		response.Code = SUCCESS
		response.Message = "success"
	}
	return nil
}

func (h *IotDeviceInfoHandler) QueryDetails(ctx context.Context, req *proto.IotDeviceInfoFilter, resp *proto.IotDeviceInfoDetailsResponse) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	data, err := s.GetCountIotDeviceInfoDetails(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Data = data
	}
	return nil
}

func (h *IotDeviceInfoHandler) QueryCount(ctx context.Context, req *proto.IotDeviceInfoListRequest, resp *proto.IotDeviceInfoCountResponse) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	data, err := s.GetCountIotDeviceInfoCount(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Data = data
	}
	return nil
}

// 创建
func (h *IotDeviceInfoHandler) Create(ctx context.Context, req *proto.IotDeviceInfo, resp *proto.Response) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	_, err := s.CreateIotDeviceInfo(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *IotDeviceInfoHandler) Delete(ctx context.Context, req *proto.IotDeviceInfo, resp *proto.Response) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	_, err := s.DeleteIotDeviceInfo(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *IotDeviceInfoHandler) DeleteById(ctx context.Context, req *proto.IotDeviceInfo, resp *proto.Response) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	_, err := s.DeleteByIdIotDeviceInfo(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *IotDeviceInfoHandler) DeleteByIds(ctx context.Context, req *proto.IotDeviceInfoBatchDeleteRequest, resp *proto.Response) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	_, err := s.DeleteByIdsIotDeviceInfo(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *IotDeviceInfoHandler) Update(ctx context.Context, req *proto.IotDeviceInfo, resp *proto.Response) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	_, err := s.UpdateIotDeviceInfo(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *IotDeviceInfoHandler) UpdateAll(ctx context.Context, req *proto.IotDeviceInfo, resp *proto.Response) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	_, err := s.UpdateAllIotDeviceInfo(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *IotDeviceInfoHandler) UpdateFields(ctx context.Context, req *proto.IotDeviceInfoUpdateFieldsRequest, resp *proto.Response) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	_, err := s.UpdateFieldsIotDeviceInfo(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *IotDeviceInfoHandler) Find(ctx context.Context, req *proto.IotDeviceInfoFilter, resp *proto.IotDeviceInfoResponse) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	data, err := s.FindIotDeviceInfo(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *IotDeviceInfoHandler) FindById(ctx context.Context, req *proto.IotDeviceInfoFilter, resp *proto.IotDeviceInfoResponse) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	data, err := s.FindByIdIotDeviceInfo(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *IotDeviceInfoHandler) Lists(ctx context.Context, req *proto.IotDeviceInfoListRequest, resp *proto.IotDeviceInfoResponse) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	data, total, err := s.GetListIotDeviceInfo(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *IotDeviceInfoHandler) SetResponse(resp *proto.IotDeviceInfoResponse, data *proto.IotDeviceInfo, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *IotDeviceInfoHandler) SetPageResponse(resp *proto.IotDeviceInfoResponse, list []*proto.IotDeviceInfo, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}

func (h *IotDeviceInfoHandler) CurrentDeviceInfo(ctx context.Context, filter *proto.CurrentDeviceInfoFilter, response *proto.CurrentDeviceInfoResponse) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	resp, _ := s.CurrentDeviceInfo(filter)
	if resp == nil {
		return nil
	}
	response.Data = resp.Data
	return nil
}

func (h *IotDeviceInfoHandler) DeviceInfoListByDevIds(ctx context.Context, req *proto.DeviceInfoListByDevIdsFilter, response *proto.IotDeviceInfoResponse) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	data, total, err := s.DeviceInfoListByDevIds(req)
	h.SetPageResponse(response, data, total, err)
	return nil
}

func (h *IotDeviceInfoHandler) GetDeviceFunctionSetList(ctx context.Context, req *proto.IotDeviceFunctionSet, resp *proto.IotDeviceFunctionSetResponse) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	data, total, err := s.GetDeviceFunctionSetList(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = data
	}
	return nil
}

func (h *IotDeviceInfoHandler) SaveDeviceFunctionSet(ctx context.Context, req *proto.IotDeviceFunctionSet, resp *proto.Response) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	err := s.SaveDeviceFunctionSet(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
	}
	return nil
}

func (h *IotDeviceInfoHandler) SaveDeviceFunctionBatchSet(ctx context.Context, req *proto.IotDeviceFunctionBatchSet, resp *proto.Response) error {
	s := service.IotDeviceInfoSvc{Ctx: ctx}
	err := s.SaveDeviceFunctionBatchSet(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
	}
	return nil
}
