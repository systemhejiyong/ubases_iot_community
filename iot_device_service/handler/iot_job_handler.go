// Code generated by sgen.exe,2022-07-04 19:10:21. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	goerrors "go-micro.dev/v4/errors"

	"cloud_platform/iot_common/ioterrs"
	"cloud_platform/iot_device_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type IotJobHandler struct{}

// 创建
func (h *IotJobHandler) Create(ctx context.Context, req *proto.IotJob, resp *proto.Response) error {
	s := service.IotJobSvc{Ctx: ctx}
	_, err := s.CreateIotJob(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrJobTaskCreate)
	}

	return nil
}

// 匹配多条件删除
func (h *IotJobHandler) Delete(ctx context.Context, req *proto.IotJob, resp *proto.Response) error {
	s := service.IotJobSvc{Ctx: ctx}
	_, err := s.DeleteIotJob(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBJobDelete)
	}

	return nil
}

// 匹配ID删除
func (h *IotJobHandler) DeleteById(ctx context.Context, req *proto.IotJob, resp *proto.Response) error {
	s := service.IotJobSvc{Ctx: ctx}
	_, err := s.DeleteByIdIotJob(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBJobDelete)
	}
	return nil
}

// 根据主键批量删除
func (h *IotJobHandler) DeleteByIds(ctx context.Context, req *proto.IotJobBatchDeleteRequest, resp *proto.Response) error {
	s := service.IotJobSvc{Ctx: ctx}
	_, err := s.DeleteByIdsIotJob(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBJobDelete)
	}

	return nil
}

// 更新
func (h *IotJobHandler) Update(ctx context.Context, req *proto.IotJob, resp *proto.Response) error {
	s := service.IotJobSvc{Ctx: ctx}
	_, err := s.UpdateIotJob(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBJobUpdate)
	}

	return nil
}

// 根据主键更新所有字段
func (h *IotJobHandler) UpdateAll(ctx context.Context, req *proto.IotJob, resp *proto.Response) error {
	s := service.IotJobSvc{Ctx: ctx}
	_, err := s.UpdateAllIotJob(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBJobUpdate)
	}

	return nil
}

// 根据主键更新指定列
func (h *IotJobHandler) UpdateFields(ctx context.Context, req *proto.IotJobUpdateFieldsRequest, resp *proto.Response) error {
	s := service.IotJobSvc{Ctx: ctx}
	_, err := s.UpdateFieldsIotJob(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBJobUpdate)
	}
	return nil
}

// 多条件查找，返回单条数据
func (h *IotJobHandler) Find(ctx context.Context, req *proto.IotJobFilter, resp *proto.IotJobResponse) error {
	s := service.IotJobSvc{Ctx: ctx}
	data, err := s.FindIotJob(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBJobGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 根据ID查找，返回单条数据
func (h *IotJobHandler) FindById(ctx context.Context, req *proto.IotJobFilter, resp *proto.IotJobResponse) error {
	s := service.IotJobSvc{Ctx: ctx}
	data, err := s.FindByIdIotJob(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBJobGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *IotJobHandler) Lists(ctx context.Context, req *proto.IotJobListRequest, resp *proto.IotJobResponse) error {
	s := service.IotJobSvc{Ctx: ctx}
	data, total, err := s.GetListIotJob(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBJobGet)
	}
	h.SetPageResponse(resp, data, total)
	return nil
}

func (h *IotJobHandler) SetResponse(resp *proto.IotJobResponse, data *proto.IotJob) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	if data != nil {
		resp.Total = 1
		resp.Data = append(resp.Data, data)
	}
}

func (h *IotJobHandler) SetPageResponse(resp *proto.IotJobResponse, list []*proto.IotJob, total int64) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	resp.Total = total
	resp.Data = list
}

// 启动job任务
func (h *IotJobHandler) StartJob(ctx context.Context, req *proto.JobReq, resp *proto.IotJobResponse) error {
	s := service.IotJobSvc{Ctx: ctx}
	infoReq := &proto.IotJobFilter{
		Id: req.Id,
	}
	jobInfo, err := s.FindByIdIotJob(infoReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBJobGet)
	}
	if jobInfo.Enabled == 1 {
		return goerrors.New("", "job任务已启动", ioterrs.ErrJobTaskAlreadyStarted)
	}
	reqJob := &proto.IotJob{
		Id:      req.Id,
		Enabled: 1,
	}
	_, err = s.UpdateIotJob(reqJob)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBJobUpdate)
	}
	return nil
}

// 停止job任务
func (h *IotJobHandler) StopJob(ctx context.Context, req *proto.JobReq, resp *proto.IotJobResponse) error {
	s := service.IotJobSvc{Ctx: ctx}
	infoReq := &proto.IotJobFilter{
		Id: req.Id,
	}
	jobInfo, err := s.FindByIdIotJob(infoReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBJobGet)
	}
	if jobInfo.Enabled == 2 {
		return goerrors.New("", "job任务已停止", ioterrs.ErrJobTaskAlreadyStopped)
	}
	reqJob := &proto.IotJob{
		Id:      req.Id,
		Enabled: 2,
	}
	_, err = s.UpdateIotJob(reqJob)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBJobUpdate)
	}

	return nil
}
