// Code generated by sgen.exe,2022-06-17 14:48:00. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/ioterrs"
	"cloud_platform/iot_common/iotlogger"
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_common/iotstruct"
	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_device_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
	"context"
	"encoding/json"
	"fmt"

	goerrors "go-micro.dev/v4/errors"
)

type IotDeviceTimerHandler struct{}

func getProductTsl(productKey string) (map[string]string, error) {
	defer iotutil.PanicHandler()
	strCmd := iotredis.GetClient().HGetAll(context.Background(), iotconst.HKEY_PRODUCT_DATA+productKey)
	return strCmd.Val(), strCmd.Err()
}

// checkMakeUpFuncs 检查补全Functions
func checkMakeUpFuncs(productKey string, req *proto.IotDeviceTimer) (map[string]interface{}, string, error) {
	//通过产品Key获取功能缓存
	tslMap, err := getProductTsl(productKey)
	if err != nil {
		return nil, req.Functions, goerrors.New("", err.Error(), ioterrs.ErrDevJsonMarshal)
	}
	data := map[string]interface{}{}
	functions := []*iotstruct.TimerFunctions{}
	err = json.Unmarshal([]byte(req.Functions), &functions)
	if err != nil {
		return nil, req.Functions, goerrors.New("", "Functions异常,"+err.Error(), ioterrs.ErrDevJsonUnMarshal)
	}
	dataTemp := map[string]string{}
	for i, f := range functions {
		dataTemp[iotutil.ToString(f.FuncKey)] = iotutil.ToString(f.FuncValue)
		if f.FuncIdentifier == "" {
			if v, ok := tslMap[fmt.Sprintf("tls_%v", f.FuncKey)]; ok {
				//functions[i] =
				funcsMap, err := iotutil.JsonToMapErr(v)
				if err == nil {
					if funcsMap["identifier"] != nil {
						functions[i].FuncIdentifier = funcsMap["identifier"].(string)
					}
					if functions[i].FuncDesc == "" && funcsMap["name"] != nil {
						functions[i].FuncDesc = funcsMap["name"].(string)
					}
				}
			}
		}
	}
	req.Functions = iotutil.ToString(functions)
	data = iotutil.MapStringToInterface(dataTemp)
	return data, iotutil.ToString(functions), nil
}

// 创建
func (h *IotDeviceTimerHandler) Create(ctx context.Context, req *proto.IotDeviceTimer, resp *proto.Response) error {
	// 根据device_id获取product_key
	devSvc := service.IotDeviceInfoSvc{Ctx: ctx}
	devReq := &proto.IotDeviceInfoFilter{Did: req.DeviceId}
	devInfo, err := devSvc.FindIotDeviceInfo(devReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBDeviceGet)
	}
	iotlogger.LogHelper.Infof("设备信息: %v", devInfo)
	if devInfo.ActiveStatus == "0" {
		return goerrors.New("", "设备未激活", ioterrs.ErrDeviceNotActive)
	}
	if devInfo.ProductKey == "" {
		return goerrors.New("", "产品Key为空", ioterrs.ErrDevProductKeyEmpty)
	}
	data := map[string]interface{}{}

	if req.Functions != "" {
		data, req.Functions, err = checkMakeUpFuncs(devInfo.ProductKey, req)
		if err != nil {
			return goerrors.New("", "Functions异常,"+err.Error(), ioterrs.ErrDevJsonUnMarshal)
		}
		iotlogger.LogHelper.Infof("定时器推送指令(Functions): %v, %v", req.DeviceId, iotutil.ToString(data))
	} else {
		if req.FuncKey == "" {
			return goerrors.New("", "FuncKey异常,"+err.Error(), ioterrs.ErrDevTimerFuncKeyIsEmpty)
		}
		dataStr := map[string]string{}
		dataStr[req.FuncKey] = req.FuncValue
		data = iotutil.MapStringToInterface(dataStr)
		iotlogger.LogHelper.Infof("定时器推送指令:  %v, %v", req.DeviceId, iotutil.ToString(data))
	}

	dataBytes, err := json.Marshal(data)
	if err != nil {
		SetResponse(resp, err)
		return nil
	}
	// 调用job服务rpc接口
	reqJob := &proto.IotJob{
		Id:             req.Id,
		ProductKey:     devInfo.ProductKey,
		DeviceId:       req.DeviceId,
		TaskType:       iotconst.Task_Timer_Job_Many,
		Enabled:        req.Enabled,
		Cron:           req.Cron,
		Data:           string(dataBytes),
		CreatedBy:      req.CreatedBy,
		UpdatedBy:      req.UpdatedBy,
		Timezone:       req.Timezone,
		RegionServerId: req.RegionServerId,
	}
	if req.DaysMode == 1 {
		reqJob.TaskType = iotconst.Task_Timer_Job_Once
	}
	if req.EndCron != "" {
		reqJob.EndCron = req.EndCron
		endData := map[string]interface{}{
			"1": false,
		}
		endDataBytes, err := json.Marshal(endData)
		if err != nil {
			return goerrors.New("", err.Error(), ioterrs.ErrDevJsonMarshal)
		}
		reqJob.EndData = string(endDataBytes)
	}

	jobSvc := service.IotJobSvc{Ctx: ctx}
	_, err = jobSvc.CreateIotJob(reqJob)
	if err != nil {
		return err
	}

	s := service.IotDeviceTimerSvc{Ctx: ctx}
	_, err = s.CreateIotDeviceTimer(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerCreate)
	}
	return nil
}

// 匹配多条件删除
func (h *IotDeviceTimerHandler) Delete(ctx context.Context, req *proto.IotDeviceTimer, resp *proto.Response) error {
	s := service.IotDeviceTimerSvc{Ctx: ctx}
	devReq := &proto.IotDeviceTimerFilter{DeviceId: req.DeviceId}
	cdInfo, err := s.FindIotDeviceTimer(devReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerGet)
	}
	if cdInfo == nil {
		return goerrors.New("", "定时器不存在", ioterrs.ErrDBTimerGet)
	}
	// 调用job服务rpc接口
	reqJob := &proto.IotJob{
		Id: cdInfo.Id,
	}
	jobSvc := service.IotJobSvc{Ctx: ctx}
	_, err = jobSvc.DeleteIotJob(reqJob)
	if err != nil {
		return err
	}
	_, err = s.DeleteIotDeviceTimer(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerDelete)
	}
	return nil
}

// 匹配ID删除
func (h *IotDeviceTimerHandler) DeleteById(ctx context.Context, req *proto.IotDeviceTimer, resp *proto.Response) error {
	// 调用job服务rpc接口
	reqJob := &proto.IotJob{
		Id: req.Id,
	}
	jobSvc := service.IotJobSvc{Ctx: ctx}
	_, err := jobSvc.DeleteByIdIotJob(reqJob)
	if err != nil {
		return err
	}
	s := service.IotDeviceTimerSvc{Ctx: ctx}
	_, err = s.DeleteByIdIotDeviceTimer(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerDelete)
	}
	return nil
}

// 根据主键批量删除
func (h *IotDeviceTimerHandler) DeleteByIds(ctx context.Context, req *proto.IotDeviceTimerBatchDeleteRequest, resp *proto.Response) error {
	s := service.IotDeviceTimerSvc{Ctx: ctx}
	_, err := s.DeleteByIdsIotDeviceTimer(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerDelete)
	}
	return nil
}

// 更新
func (h *IotDeviceTimerHandler) Update(ctx context.Context, req *proto.IotDeviceTimer, resp *proto.Response) error {
	// 根据device_id获取product_key
	devSvc := service.IotDeviceInfoSvc{Ctx: ctx}
	devReq := &proto.IotDeviceInfoFilter{Did: req.DeviceId}
	devInfo, err := devSvc.FindIotDeviceInfo(devReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBDeviceGet)
	}
	data := map[string]interface{}{}
	if req.Functions != "" {
		data, req.Functions, err = checkMakeUpFuncs(devInfo.ProductKey, req)
		if err != nil {
			return goerrors.New("", "Functions异常,"+err.Error(), ioterrs.ErrDevJsonUnMarshal)
		}
		iotlogger.LogHelper.Infof("定时器推送指令(Functions): %v, %v", req.DeviceId, iotutil.ToString(data))
	} else {
		if req.FuncKey == "" {
			return goerrors.New("", "FuncKey异常,"+err.Error(), ioterrs.ErrDevTimerFuncKeyIsEmpty)
		}
		dataStr := map[string]string{}
		dataStr[req.FuncKey] = req.FuncValue
		data = iotutil.MapStringToInterface(dataStr)
		iotlogger.LogHelper.Infof("定时器推送指令:  %v, %v", req.DeviceId, iotutil.ToString(data))
	}
	dataBytes, err := json.Marshal(data)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDevJsonMarshal)
	}
	// 调用job服务rpc接口
	reqJob := &proto.IotJob{
		Id:         req.Id,
		ProductKey: devInfo.ProductKey,
		DeviceId:   req.DeviceId,
		TaskType:   iotconst.Task_Timer_Job_Many,
		Enabled:    req.Enabled,
		Cron:       req.Cron,
		Data:       string(dataBytes),
		UpdatedBy:  req.UpdatedBy,
		UpdatedAt:  req.UpdatedAt,
	}
	if req.DaysMode == 1 {
		reqJob.TaskType = iotconst.Task_Timer_Job_Once
	}
	if req.EndCron != "" {
		reqJob.EndCron = req.EndCron
		endData := map[string]interface{}{
			"1": false,
		}
		endDataBytes, err := json.Marshal(endData)
		if err != nil {
			return goerrors.New("", err.Error(), ioterrs.ErrDevJsonMarshal)
		}
		reqJob.EndData = string(endDataBytes)
	}
	jobSvc := service.IotJobSvc{Ctx: ctx}
	_, err = jobSvc.UpdateIotJob(reqJob)
	if err != nil {
		return err
	}
	s := service.IotDeviceTimerSvc{Ctx: ctx}
	_, err = s.UpdateIotDeviceTimer(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerUpdate)
	}
	return nil
}

// 根据主键更新所有字段
func (h *IotDeviceTimerHandler) UpdateAll(ctx context.Context, req *proto.IotDeviceTimer, resp *proto.Response) error {
	s := service.IotDeviceTimerSvc{Ctx: ctx}
	_, err := s.UpdateAllIotDeviceTimer(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerUpdate)
	}
	return nil
}

// 根据主键更新指定列
func (h *IotDeviceTimerHandler) UpdateFields(ctx context.Context, req *proto.IotDeviceTimerUpdateFieldsRequest, resp *proto.Response) error {
	s := service.IotDeviceTimerSvc{Ctx: ctx}
	_, err := s.UpdateFieldsIotDeviceTimer(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerUpdate)
	}
	return nil
}

// 多条件查找，返回单条数据
func (h *IotDeviceTimerHandler) Find(ctx context.Context, req *proto.IotDeviceTimerFilter, resp *proto.IotDeviceTimerResponse) error {
	s := service.IotDeviceTimerSvc{Ctx: ctx}
	data, err := s.FindIotDeviceTimer(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 根据ID查找，返回单条数据
func (h *IotDeviceTimerHandler) FindById(ctx context.Context, req *proto.IotDeviceTimerFilter, resp *proto.IotDeviceTimerResponse) error {
	s := service.IotDeviceTimerSvc{Ctx: ctx}
	data, err := s.FindByIdIotDeviceTimer(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *IotDeviceTimerHandler) Lists(ctx context.Context, req *proto.IotDeviceTimerListRequest, resp *proto.IotDeviceTimerResponse) error {
	s := service.IotDeviceTimerSvc{Ctx: ctx}
	data, total, err := s.GetListIotDeviceTimer(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownList)
	}
	h.SetPageResponse(resp, data, total)
	return nil
}

func (h *IotDeviceTimerHandler) SetResponse(resp *proto.IotDeviceTimerResponse, data *proto.IotDeviceTimer) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	if data != nil {
		resp.Total = 1
		resp.Data = append(resp.Data, data)
	}
}

func (h *IotDeviceTimerHandler) SetPageResponse(resp *proto.IotDeviceTimerResponse, list []*proto.IotDeviceTimer, total int64) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	resp.Total = total
	resp.Data = list
}

func (h *IotDeviceTimerHandler) StartIotDeviceTimerJob(ctx context.Context, req *proto.IotDeviceTimerJobReq, resp *proto.Response) error {
	s := service.IotDeviceTimerSvc{Ctx: ctx}
	infoReq := &proto.IotDeviceTimerFilter{
		Id: req.Id,
	}
	jobInfo, err := s.FindByIdIotDeviceTimer(infoReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBDeviceGet)
	}
	if jobInfo.Enabled == 1 {
		return goerrors.New("", "倒计时任务已启动", ioterrs.ErrTimerAlreadyStarted)
	}
	// 调用job服务rpc接口
	reqJob := &proto.JobReq{
		Id: req.Id,
	}
	jobSvc := service.IotJobSvc{Ctx: ctx}
	err = jobSvc.StartJob(ctx, reqJob)
	if err != nil {
		return err
	}
	repJob := &proto.IotDeviceTimer{
		Id:       req.Id,
		DaysMode: jobInfo.DaysMode,
		Weeks:    jobInfo.Weeks,
		Enabled:  1,
	}
	_, err = s.UpdateIotDeviceTimer(repJob)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerUpdate)
	}
	return nil
}

func (h *IotDeviceTimerHandler) StopIotDeviceTimerJob(ctx context.Context, req *proto.IotDeviceTimerJobReq, resp *proto.Response) error {
	s := service.IotDeviceTimerSvc{Ctx: ctx}
	infoReq := &proto.IotDeviceTimerFilter{
		Id: req.Id,
	}
	jobInfo, err := s.FindByIdIotDeviceTimer(infoReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBDeviceGet)
	}
	if jobInfo.Enabled == 2 {
		return goerrors.New("", "倒计时任务已停止", ioterrs.ErrTimerAlreadyStopted)
	}
	// 调用job服务rpc接口
	reqJob := &proto.JobReq{
		Id: req.Id,
	}
	jobSvc := service.IotJobSvc{Ctx: ctx}
	err = jobSvc.StopJob(ctx, reqJob)
	if err != nil {
		return err
	}
	repJob := &proto.IotDeviceTimer{
		Id:       req.Id,
		DaysMode: jobInfo.DaysMode,
		Weeks:    jobInfo.Weeks,
		Enabled:  2,
	}
	_, err = s.UpdateIotDeviceTimer(repJob)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBTimerUpdate)
	}
	return nil
}
