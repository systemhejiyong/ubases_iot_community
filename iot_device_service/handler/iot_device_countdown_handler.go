// Code generated by sgen.exe,2022-06-17 14:48:11. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/ioterrs"
	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_device_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
	"context"
	"encoding/json"
	"errors"

	goerrors "go-micro.dev/v4/errors"

	"gorm.io/gorm"
)

type IotDeviceCountdownHandler struct{}

// 创建
func (h *IotDeviceCountdownHandler) Create(ctx context.Context, req *proto.IotDeviceCountdown, resp *proto.Response) error {
	// 根据device_id获取product_key
	devSvc := service.IotDeviceInfoSvc{Ctx: ctx}
	devReq := &proto.IotDeviceInfoFilter{Did: req.DeviceId}
	devInfo, err := devSvc.FindIotDeviceInfo(devReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBDeviceGet)
	}
	if devInfo.ActiveStatus == "0" {
		return goerrors.New("", "设备未激活", ioterrs.ErrDeviceNotActive)
	}
	if devInfo.ProductKey == "" {
		return goerrors.New("", "产品Key为空", ioterrs.ErrDevProductKeyEmpty)
	}
	s := service.IotDeviceCountdownSvc{Ctx: ctx}
	reqCd := &proto.IotDeviceCountdownFilter{
		DeviceId: req.DeviceId,
	}
	_, err = s.FindIotDeviceCountdown(reqCd)
	if err != nil && !errors.Is(err, gorm.ErrRecordNotFound) {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownGet)
	}
	reqDel := &proto.IotDeviceCountdown{
		DeviceId: req.DeviceId,
	}
	_, err = s.DeleteIotDeviceCountdown(reqDel)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownDelete)
	}
	data := map[string]string{
		req.FuncKey: req.FuncValue,
	}
	dataNew := iotutil.MapStringToInterface(data)

	dataBytes, err := json.Marshal(dataNew)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDevJsonMarshal)
	}
	// 调用job服务rpc接口
	reqJob := &proto.IotJob{
		Id:             req.Id,
		ProductKey:     devInfo.ProductKey,
		DeviceId:       req.DeviceId,
		TaskType:       iotconst.Task_Countdown_Job,
		Enabled:        req.Enabled,
		Cron:           req.Cron,
		Data:           string(dataBytes),
		CreatedBy:      req.CreatedBy,
		UpdatedBy:      req.UpdatedBy,
		Timezone:       req.Timezone,
		RegionServerId: req.RegionServerId,
	}
	jobSvc := service.IotJobSvc{Ctx: ctx}
	_, err = jobSvc.CreateIotJob(reqJob)
	if err != nil {
		return err
	}
	_, err = s.CreateIotDeviceCountdown(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownCreate)
	}
	return nil
}

// 匹配多条件删除
func (h *IotDeviceCountdownHandler) Delete(ctx context.Context, req *proto.IotDeviceCountdown, resp *proto.Response) error {
	s := service.IotDeviceCountdownSvc{Ctx: ctx}
	devReq := &proto.IotDeviceCountdownFilter{DeviceId: req.DeviceId}
	cdInfo, err := s.FindIotDeviceCountdown(devReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownGet)
	}
	if cdInfo == nil {
		return goerrors.New("", "倒计时不存在", ioterrs.ErrCountDownNotExist)
	}
	// 调用job服务rpc接口
	reqJob := &proto.IotJob{
		Id: cdInfo.Id,
	}
	jobSvc := service.IotJobSvc{Ctx: ctx}
	_, err = jobSvc.DeleteIotJob(reqJob)
	if err != nil {
		return err
	}
	_, err = s.DeleteIotDeviceCountdown(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownDelete)
	}
	return nil
}

// 匹配ID删除
func (h *IotDeviceCountdownHandler) DeleteById(ctx context.Context, req *proto.IotDeviceCountdown, resp *proto.Response) error {
	s := service.IotDeviceCountdownSvc{Ctx: ctx}
	devReq := &proto.IotDeviceCountdownFilter{DeviceId: req.DeviceId}
	cdInfo, err := s.FindIotDeviceCountdown(devReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownGet)
	}
	if cdInfo == nil {
		return goerrors.New("", "倒计时不存在", ioterrs.ErrCountDownNotExist)
	}
	// 调用job服务rpc接口
	reqJob := &proto.IotJob{
		Id: cdInfo.Id,
	}
	jobSvc := service.IotJobSvc{Ctx: ctx}
	_, err = jobSvc.DeleteByIdIotJob(reqJob)
	if err != nil {
		return err
	}
	_, err = s.DeleteByIdIotDeviceCountdown(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownDelete)
	}
	return nil
}

// 根据主键批量删除
func (h *IotDeviceCountdownHandler) DeleteByIds(ctx context.Context, req *proto.IotDeviceCountdownBatchDeleteRequest, resp *proto.Response) error {
	s := service.IotDeviceCountdownSvc{Ctx: ctx}
	_, err := s.DeleteByIdsIotDeviceCountdown(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownDelete)
	}
	return nil
}

// 更新
func (h *IotDeviceCountdownHandler) Update(ctx context.Context, req *proto.IotDeviceCountdown, resp *proto.Response) error {
	// 根据device_id获取product_key
	devSvc := service.IotDeviceInfoSvc{Ctx: ctx}
	devReq := &proto.IotDeviceInfoFilter{Did: req.DeviceId}
	devInfo, err := devSvc.FindIotDeviceInfo(devReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBDeviceGet)
	}
	data := map[string]string{
		req.FuncKey: req.FuncValue,
	}
	dataNew := iotutil.MapStringToInterface(data)

	dataBytes, err := json.Marshal(dataNew)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDevJsonMarshal)
	}
	// 调用job服务rpc接口
	reqJob := &proto.IotJob{
		Id:         req.Id,
		ProductKey: devInfo.ProductKey,
		DeviceId:   req.DeviceId,
		TaskType:   iotconst.Task_Countdown_Job,
		Enabled:    req.Enabled,
		Cron:       req.Cron,
		Data:       string(dataBytes),
		UpdatedBy:  req.UpdatedBy,
		UpdatedAt:  req.UpdatedAt,
	}
	jobSvc := service.IotJobSvc{Ctx: ctx}
	_, err = jobSvc.UpdateIotJob(reqJob)
	if err != nil {
		return err
	}
	s := service.IotDeviceCountdownSvc{Ctx: ctx}
	_, err = s.UpdateIotDeviceCountdown(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownUpdate)
	}
	return nil
}

// 根据主键更新所有字段
func (h *IotDeviceCountdownHandler) UpdateAll(ctx context.Context, req *proto.IotDeviceCountdown, resp *proto.Response) error {
	s := service.IotDeviceCountdownSvc{Ctx: ctx}
	_, err := s.UpdateAllIotDeviceCountdown(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownUpdate)
	}
	return nil
}

// 根据主键更新指定列
func (h *IotDeviceCountdownHandler) UpdateFields(ctx context.Context, req *proto.IotDeviceCountdownUpdateFieldsRequest, resp *proto.Response) error {
	s := service.IotDeviceCountdownSvc{Ctx: ctx}
	_, err := s.UpdateFieldsIotDeviceCountdown(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownUpdate)
	}
	return nil
}

// 多条件查找，返回单条数据
func (h *IotDeviceCountdownHandler) Find(ctx context.Context, req *proto.IotDeviceCountdownFilter, resp *proto.IotDeviceCountdownResponse) error {
	s := service.IotDeviceCountdownSvc{Ctx: ctx}
	data, err := s.FindIotDeviceCountdown(req)
	if errors.Is(err, gorm.ErrRecordNotFound) {
		return nil
	}
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 根据ID查找，返回单条数据
func (h *IotDeviceCountdownHandler) FindById(ctx context.Context, req *proto.IotDeviceCountdownFilter, resp *proto.IotDeviceCountdownResponse) error {
	s := service.IotDeviceCountdownSvc{Ctx: ctx}
	data, err := s.FindByIdIotDeviceCountdown(req)
	if errors.Is(err, gorm.ErrRecordNotFound) {
		return nil
	}
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownGet)
	}
	h.SetResponse(resp, data)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *IotDeviceCountdownHandler) Lists(ctx context.Context, req *proto.IotDeviceCountdownListRequest, resp *proto.IotDeviceCountdownResponse) error {
	s := service.IotDeviceCountdownSvc{Ctx: ctx}
	data, total, err := s.GetListIotDeviceCountdown(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownList)
	}
	h.SetPageResponse(resp, data, total)
	return nil
}

func (h *IotDeviceCountdownHandler) SetResponse(resp *proto.IotDeviceCountdownResponse, data *proto.IotDeviceCountdown) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	if data != nil {
		resp.Total = 1
		resp.Data = append(resp.Data, data)
	}
}

func (h *IotDeviceCountdownHandler) SetPageResponse(resp *proto.IotDeviceCountdownResponse, list []*proto.IotDeviceCountdown, total int64) {
	resp.Code = ioterrs.Success
	resp.Message = "success"
	resp.Total = total
	resp.Data = list
}

func (h *IotDeviceCountdownHandler) UpdateByDevId(ctx context.Context, req *proto.IotDeviceCountdown, resp *proto.Response) error {
	devSvc := service.IotDeviceInfoSvc{Ctx: ctx}
	devReq := &proto.IotDeviceInfoFilter{Did: req.DeviceId}
	devInfo, err := devSvc.FindIotDeviceInfo(devReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBDeviceGet)
	}
	data := map[string]string{
		req.FuncKey: req.FuncValue,
	}
	dataNew := iotutil.MapStringToInterface(data)

	dataBytes, err := json.Marshal(dataNew)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDevJsonMarshal)
	}
	// 调用job服务rpc接口
	reqJob := &proto.IotJob{
		Id:         req.Id,
		ProductKey: devInfo.ProductKey,
		DeviceId:   req.DeviceId,
		TaskType:   iotconst.Task_Countdown_Job,
		Enabled:    req.Enabled,
		Cron:       req.Cron,
		Data:       string(dataBytes),
		UpdatedBy:  req.UpdatedBy,
		UpdatedAt:  req.UpdatedAt,
	}
	jobSvc := service.IotJobSvc{Ctx: ctx}
	_, err = jobSvc.UpdateIotJob(reqJob)
	if err != nil {
		return err
	}
	s := service.IotDeviceCountdownSvc{Ctx: ctx}
	_, err = s.UpdateByDevId(req)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownUpdate)
	}
	return nil
}

func (h *IotDeviceCountdownHandler) StartIotDeviceCountdownJob(ctx context.Context, req *proto.IotDeviceCountdownJobReq, resp *proto.Response) error {
	s := service.IotDeviceCountdownSvc{Ctx: ctx}
	infoReq := &proto.IotDeviceCountdownFilter{
		Id: req.Id,
	}
	jobInfo, err := s.FindIotDeviceCountdown(infoReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBDeviceGet)
	}
	if jobInfo.Enabled == 1 {
		return goerrors.New("", "倒计时任务已启动", ioterrs.ErrCountDownAlreadyStarted)
	}
	// 调用job服务rpc接口
	reqJob := &proto.JobReq{
		Id: req.Id,
	}
	jobSvc := service.IotJobSvc{Ctx: ctx}
	err = jobSvc.StartJob(ctx, reqJob)
	if err != nil {
		return err
	}
	repJob := &proto.IotDeviceCountdown{
		Id:      req.Id,
		Enabled: 1,
	}
	_, err = s.UpdateIotDeviceCountdown(repJob)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownUpdate)
	}
	return nil
}

func (h *IotDeviceCountdownHandler) StopIotDeviceCountdownJob(ctx context.Context, req *proto.IotDeviceCountdownJobReq, resp *proto.Response) error {
	s := service.IotDeviceCountdownSvc{Ctx: ctx}
	infoReq := &proto.IotDeviceCountdownFilter{
		Id: req.Id,
	}
	jobInfo, err := s.FindIotDeviceCountdown(infoReq)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBDeviceGet)
	}
	if jobInfo.Enabled == 2 {
		return goerrors.New("", "倒计时任务已停止", ioterrs.ErrCountDownAlreadyStopped)
	}
	// 调用job服务rpc接口
	reqJob := &proto.JobReq{
		Id: req.Id,
	}
	jobSvc := service.IotJobSvc{Ctx: ctx}
	err = jobSvc.StopJob(ctx, reqJob)
	if err != nil {
		return err
	}
	repJob := &proto.IotDeviceCountdown{
		Id:      req.Id,
		Enabled: 2,
	}
	_, err = s.UpdateIotDeviceCountdown(repJob)
	if err != nil {
		return goerrors.New("", err.Error(), ioterrs.ErrDBCountDownUpdate)
	}
	return nil
}
