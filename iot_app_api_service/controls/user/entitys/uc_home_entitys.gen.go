// Code generated by sgen.exe,2022-05-04 16:39:29. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	"cloud_platform/iot_app_api_service/controls"
	"cloud_platform/iot_common/iotutil"
	deviceModel "cloud_platform/iot_model/db_device/model"
	proto "cloud_platform/iot_proto/protos/protosService"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

// 增、删、改及查询返回
type UcHomeEntitys struct {
	Id         string    `json:"id"`
	Name       string    `json:"name"`
	IconUrl    string    `json:"iconUrl"`
	Sid        string    `json:"sid"`
	Lat        float64   `json:"lat"`
	Lng        float64   `json:"lng"`
	Country    string    `json:"country"`
	Province   string    `json:"province"`
	City       string    `json:"city"`
	District   string    `json:"district"`
	Address    string    `json:"address"`   //家庭位置
	CoordType  int64     `json:"coordType"` //1-GPS   2-火星坐标系
	RoomList   []RoomObj `json:"RoomList"`  //房间列表
	CreatedBy  int64     `json:"createdBy"`
	UpdatedBy  int64     `json:"updatedBy"`
	CreatedAt  time.Time `json:"createdAt"`
	UpdatedAt  time.Time `json:"updatedAt"`
	DeletedAt  time.Time `json:"deletedAt"`
	CountryId  string    `json:"countryId"`
	ProvinceId string    `json:"provinceId"`
	CityId     string    `json:"cityId"`
}

type RoomObj struct {
	Name string `json:"name"` //房间名称
	Icon string `json:"icon"` //房间图标
}

type UpdateHomeEntitys struct {
	Name      string `json:"name"`         //家庭名称
	Address   string `json:"address"`      //家庭位置
	City      string `json:"cityName"`     //城市
	Country   string `json:"countryName"`  //国家
	District  string `json:"districtName"` //地区
	CoordType int64  `json:"coordType"`    //1-GPS   2-火星坐标系
	//EnCode   string  `json:"enCode"`   //国家码
	//EnName   string  `json:"enName"`   //英文名
	Lat        float64 `json:"lat"`      //
	Lng        float64 `json:"lng"`      //
	Province   string  `json:"province"` //省份
	CountryId  string  `json:"countryId"`
	ProvinceId string  `json:"provinceId"`
	CityId     string  `json:"cityId"`
	//CountryName  string  `json:"countryName"`
	//ProvinceName string  `json:"provinceName"`
	//CityName     string  `json:"cityName"`
}

type SendInvitationCode struct {
	HomeId string `json:"homeId"` //家庭id
}

type JoinHome struct {
	Code string `json:"code"` //邀请码
}

type SetRole struct {
	HomeId string `json:"homeId"` //家庭id
	UserId string `json:"userId"` //用户id
	Role   int    `json:"role"`   //角色类型 1-家庭所有者，2-管理员，3-成员
}

type RemoveMembers struct {
	HomeId string `json:"homeId"` //家庭id
	UserId string `json:"userId"` //用户id
}

type TransferOwnership struct {
	HomeId string `json:"homeId"` //家庭id
	UserId string `json:"userId"` //用户id
}

type Quit struct {
	HomeId string `json:"homeId"` //家庭id
}

// 查询条件
type UcHomeQuery struct {
	Page      uint64        `json:"page"`
	Limit     uint64        `json:"limit"`
	Sort      string        `json:"sort"`
	SortField string        `json:"sortField"`
	SearchKey string        `json:"searchKey"`
	Query     *UcHomeFilter `json:"query"`
}

// UcHomeFilter，查询条件，字段请根据需要自行增减
type UcHomeFilter struct {
	Id         string    `json:"id"`
	Name       string    `json:"name"`
	IconUrl    string    `json:"iconUrl"`
	Sid        string    `json:"sid"`
	Lat        float64   `json:"lat"`
	Lng        float64   `json:"lng"`
	Country    string    `json:"country"`
	Province   string    `json:"province"`
	City       string    `json:"city"`
	District   string    `json:"district"`
	Address    string    `json:"address"`
	CreatedBy  int64     `json:"createdBy"`
	UpdatedBy  int64     `json:"updatedBy"`
	CreatedAt  time.Time `json:"createdAt"`
	UpdatedAt  time.Time `json:"updatedAt"`
	DeletedAt  time.Time `json:"deletedAt"`
	CountryId  string    `json:"countryId"`
	ProvinceId string    `json:"provinceId"`
	CityId     string    `json:"cityId"`
}

func IotDevInfo_pb2db(src *proto.IotDevInfo) deviceModel.TIotDeviceInfo {
	if src == nil {
		return deviceModel.TIotDeviceInfo{}
	}
	dbObj := deviceModel.TIotDeviceInfo{
		Id:               src.Id,
		Did:              src.Did,
		ProductId:        src.ProductId,
		OnlineStatus:     src.OnlineStatus,
		DeviceName:       src.DeviceName,
		DeviceNature:     src.DeviceNature,
		Sn:               src.Sn,
		BatchId:          src.BatchId,
		GroupId:          src.GroupId,
		DeviceModel:      src.DeviceModel,
		UserName:         src.UserName,
		Passward:         src.Passward,
		Salt:             src.Salt,
		DeviceSecretHttp: src.DeviceSecretHttp,
		DeviceSecretMqtt: src.DeviceSecretMqtt,
		IpAddress:        src.IpAddress,
		Lat:              src.Lat,
		Lng:              src.Lng,
		Country:          src.Country,
		Province:         src.Province,
		City:             src.City,
		District:         src.District,
		ActivatedTime:    src.ActivatedTime.AsTime(),
		MacAddress:       src.MacAddress,
		DeviceVersion:    src.DeviceVersion,
		ActiveStatus:     src.ActiveStatus,
	}
	return dbObj
}

type UcHomeDetailEntitys struct {
	//HomeInfo userModel.TUcHome `json:"homeInfo"` //用户列表
	Id              string         `json:"id"`      // 唯一ID
	Name            string         `json:"name"`    // 家庭名称
	IconUrl         string         `json:"iconUrl"` // 图标地址
	Sid             string         `json:"sid"`     // 服务器唯一ID
	Lat             float64        `json:"lat"`     // 经度
	Lng             float64        `json:"lng"`     // 纬度
	Country         string         `json:"country"`
	Province        string         `json:"province"`
	City            string         `json:"city"`
	District        string         `json:"district"`
	Address         string         `json:"address"`
	CoordType       int64          `json:"coordType"` //1-GPS   2-火星坐标系
	CurrentUserRole int32          `json:"currentUserRole"`
	UserList        []HomeUser     `json:"userList"`   //用户列表
	RoomList        []HomeRoom     `json:"roomList"`   //房间列表
	DeviceList      []HomeDevice   `json:"deviceList"` //设备列表
	PanelList       []ProductPanel `json:"panelList"`  //设备列表
	//ControlServer string    `json:"controlServer"`
	//Server 	 ServerSimpleEntity `json:"server"`	//控制单元地址
	CountryId    string `json:"countryId"`
	ProvinceId   string `json:"provinceId"`
	CityId       string `json:"cityId"`
	CountryName  string `json:"countryName"`
	ProvinceName string `json:"provinceName"`
	CityName     string `json:"cityName"`
}

// 产品面板
type ProductPanel struct {
	Url        string `json:"url"`
	Key        string `json:"key"`
	ProductKey string `json:"productKey"`
}

type HomeUser struct {
	UserId   string `json:"userId"`
	Role     int32  `json:"role"`
	Photo    string `json:"photo"`
	NickName string `json:"nickname"`
}

type HomeRoom struct {
	RoomId      string `json:"roomId"`
	Name        string `json:"name"`
	Sort        int32  `json:"sort"`
	Icon        string `json:"icon"`
	DeviceCount int32  `json:"deviceCount"`
	TemplateId  int64  `json:"templateId"`
}

type HomeDevice struct {
	Did              string `json:"devId"`
	GroupId          string `json:"groupId,omitempty"`
	ProductId        int64  `json:"productId,string"`
	DeviceName       string `json:"name"`
	ProductPic       string `json:"pic"`
	RoomName         string `json:"roomName"`
	HomeName         string `json:"homeName"`
	RoomId           string `json:"roomId"`
	ProductKey       string `json:"productKey"`
	SecretKey        string `json:"secretKey"`
	MqttServer       string `json:"mqttServer"`
	OnlineState      int32  `json:"state"`              //设备状态 1-在线 , 0-离线
	DevSwitch        int32  `json:"switch"`             //开关状态 1-打开 ，0-关闭
	HasForceUpgrade  bool   `json:"hasForceUpgrade"`    //还强制升级
	Version          string `json:"version"`            //设备版本号
	OtaUpgradeStatus int32  `json:"otaUpgradeStatus"`   // =0 未升级 =1 需要升级 =2 升级中
	DevType          int32  `json:"devType"`            //1-用户设备，2-共享设备，3-群组
	DevCount         int32  `json:"devCount,omitempty"` //设备数量
	Sort             int32  `json:"sort"`
	Time             int64  `json:"time"` //时间
	TemplateId       int64  `json:"templateId"`
	PanelId          int64  `json:"panelId,string"`
	AppPanelType     int32  `json:"appPanelType"`
	PanelCode     string  `json:"panelCode"`
}

type DeviceCachedData struct {
	OnlineStatus     int32  `json:"onlineStatus"`
	PowerState       int32  `json:"powerState"`
	OtaUpgradeStatus int32  `json:"hasOtaUpgrade"` //
	UpgradeMode      int32  `json:"upgradeModel"`  //升级方式 1: APP提醒升级, 2: APP强制升级, 3: APP检测升级
	Version          string `json:"version"`
	UpgradeState     string `json:"upgradeState"`
	IsUpgradeRunning bool   `json:"isUpgradeRunning"` //是否正在升级
	HasForceUpgrade  bool   `json:"hasForceUpgrade"`  //是否存在强制升级
}

// 实体转pb对象
func UcHome_e2pb(src *UcHomeEntitys) *proto.UcHome {
	if src == nil {
		return nil
	}
	pbObj := proto.UcHome{
		Id:       iotutil.ToInt64(src.Id),
		Name:     src.Name,
		IconUrl:  src.IconUrl,
		Sid:      iotutil.ToInt64(src.Sid),
		Lat:      src.Lat,
		Lng:      src.Lng,
		Country:  src.Country,
		Province: src.Province,
		City:     src.City,
		District: src.District,
		Address:  src.Address,
		//CreatedBy:src.CreatedBy,
		//UpdatedBy:src.UpdatedBy,
		//CreatedAt:timestamppb.New(src.CreatedAt),
		//UpdatedAt:timestamppb.New(src.UpdatedAt),
	}
	return &pbObj
}

// 实体转pb对象
func HomeDevice_2e(homeName string, devInfo *proto.HomeIotDevInfo, devStatus *DeviceCachedData, mqttInfo *proto.SysRegionServer) *HomeDevice {
	if devInfo == nil {
		return nil
	}
	pbObj := HomeDevice{
		Did:          devInfo.Did,
		ProductId:    devInfo.ProductId,
		DeviceName:   devInfo.DeviceName,
		ProductPic:   devInfo.ProductPic,
		RoomName:     devInfo.RoomName,
		RoomId:       devInfo.RoomId,
		HomeName:     homeName,
		ProductKey:   devInfo.ProductKey,
		SecretKey:    devInfo.SecretKey,
		MqttServer:   devInfo.MqttServer,
		DevType:      1,
		Time:         devInfo.BindTime.AsTime().Unix(),
		TemplateId:   devInfo.RoomTemplateId,
		PanelId:      devInfo.PanelId,
		AppPanelType: devInfo.AppPanelType,
	}
	//从区域获取mqtt地址
	if mqttInfo != nil && mqttInfo.WebsocketServer != "" {
		pbObj.MqttServer = mqttInfo.WebsocketServer
	}
	pbObj.ProductPic = controls.ConvertProImg(pbObj.ProductPic)
	if devStatus != nil {
		//设备在线状态
		pbObj.OnlineState = devStatus.OnlineStatus
		//设备开关状态
		pbObj.DevSwitch = devStatus.PowerState
		pbObj.HasForceUpgrade = devStatus.UpgradeMode == 2 && devStatus.OtaUpgradeStatus == 1
		pbObj.Version = devStatus.Version
		//是否升级中
		var upgradeStatus int32 = 0
		if devStatus.OtaUpgradeStatus == 1 {
			if devStatus.UpgradeState == "Downloading" || devStatus.UpgradeState == "Installing" {
				upgradeStatus = 1
			}
		}
		pbObj.OtaUpgradeStatus = upgradeStatus
		//是否强制升级
		//pbObj.UpgradeMode = devStatus.UpgradeMode
	}
	return &pbObj
}

// 实体转pb对象
func UpdateHome_e2pb(src *UpdateHomeEntitys) *proto.UcHome {
	if src == nil {
		return nil
	}
	pbObj := proto.UcHome{
		Name:      src.Name,
		Lat:       src.Lat,
		Lng:       src.Lng,
		Country:   src.Country,
		Province:  src.Province,
		City:      src.City,
		District:  src.District,
		Address:   src.Address,
		CoordType: iotutil.ToInt32(src.CoordType),
	}
	if len(src.CountryId) != 0 {
		pbObj.CountryId = iotutil.ToInt64(src.CountryId)
		pbObj.Country = src.Country
	}
	if len(src.ProvinceId) != 0 {
		pbObj.ProvinceId = iotutil.ToInt64(src.ProvinceId)
		pbObj.Province = src.Province
	}
	if len(src.CityId) != 0 {
		pbObj.CityId = iotutil.ToInt64(src.CityId)
		pbObj.City = src.City
	}
	return &pbObj
}

// 实体转pb对象
func UcHomeReq_e2pb(src *UcHomeEntitys) *proto.UcHomeReq {
	if src == nil {
		return nil
	}
	hId, _ := iotutil.ToInt64AndErr(src.Id)
	sId, _ := iotutil.ToInt64AndErr(src.Sid)
	homeRoomList := []*proto.HomeRoom{}
	for _, v := range src.RoomList {
		homeRoomList = append(homeRoomList, &proto.HomeRoom{
			Name: v.Name,
			Icon: v.Icon,
		})
	}

	pbObj := proto.UcHomeReq{
		Id:        hId,
		Name:      src.Name,
		IconUrl:   src.IconUrl,
		Sid:       sId,
		Lat:       src.Lat,
		Lng:       src.Lng,
		Country:   src.Country,
		Province:  src.Province,
		City:      src.City,
		District:  src.District,
		Address:   src.Address,
		CoordType: iotutil.ToInt32(src.CoordType),
		CreatedAt: timestamppb.New(src.CreatedAt),
		UpdatedAt: timestamppb.New(src.UpdatedAt),
		CreatedBy: src.CreatedBy,
		UpdatedBy: src.UpdatedBy,
		RoomList:  homeRoomList,
	}
	if len(src.CountryId) != 0 {
		pbObj.CountryId = iotutil.ToInt64(src.CountryId)
	}
	if len(src.ProvinceId) != 0 {
		pbObj.ProvinceId = iotutil.ToInt64(src.ProvinceId)
	}
	if len(src.CityId) != 0 {
		pbObj.CityId = iotutil.ToInt64(src.CityId)
	}
	return &pbObj
}

// pb对象转实体
func UcHome_pb2e(src *proto.UcHome) *UcHomeEntitys {
	if src == nil {
		return nil
	}
	entitysObj := UcHomeEntitys{
		Id:        iotutil.ToString(src.Id),
		Name:      src.Name,
		IconUrl:   src.IconUrl,
		Sid:       iotutil.ToString(src.Sid),
		Lat:       src.Lat,
		Lng:       src.Lng,
		Country:   src.Country,
		Province:  src.Province,
		City:      src.City,
		District:  src.District,
		Address:   src.Address,
		CoordType: iotutil.ToInt64(src.CoordType),
		//CreatedBy:src.CreatedBy,
		//UpdatedBy:src.UpdatedBy,
		//CreatedAt:src.CreatedAt.AsTime(),
		//UpdatedAt:src.UpdatedAt.AsTime(),
	}
	return &entitysObj
}

func UcHome_pb2db(src *proto.UcHome) *UcHomeDetailEntitys {
	if src == nil {
		return nil
	}
	dbObj := &UcHomeDetailEntitys{
		Id:           iotutil.ToString(src.Id),
		Name:         src.Name,
		IconUrl:      src.IconUrl,
		Sid:          iotutil.ToString(src.Sid),
		Lat:          src.Lat,
		Lng:          src.Lng,
		Country:      src.Country,
		Province:     src.Province,
		City:         src.City,
		CountryName:  src.Country,
		ProvinceName: src.Province,
		CityName:     src.City,
		District:     src.District,
		Address:      src.Address,
		CoordType:    iotutil.ToInt64(src.CoordType),
	}
	if src.CountryId != 0 {
		dbObj.CountryId = iotutil.ToString(src.CountryId)
	}
	if src.ProvinceId != 0 {
		dbObj.ProvinceId = iotutil.ToString(src.ProvinceId)
	}
	if src.CityId != 0 {
		dbObj.CityId = iotutil.ToString(src.CityId)
	}
	return dbObj
}

// 设备房间信息，并设置房间设备数量
func (s *UcHomeDetailEntitys) SetRoom(defaultRooms map[string]string, roomList []*proto.RoomHome, roomDeviceCount map[string]int32) {
	for _, v := range roomList {
		roomName := v.Name
		if v.RoomTemplateId != 0 {
			if dfVal, ok := defaultRooms[iotutil.ToString(v.RoomTemplateId)]; ok {
				roomName = dfVal
			}
		}
		s.RoomList = append(s.RoomList, HomeRoom{
			RoomId:      v.RoomId,
			Name:        roomName,
			Sort:        v.Sort,
			Icon:        v.Icon,
			TemplateId:  v.RoomTemplateId,
			DeviceCount: roomDeviceCount[v.RoomId],
		})
	}
}

// 实体转pb对象
func UcHomeRoom_e2pb(src *UcHomeRoomEntitys) *proto.UcHomeRoom {
	if src == nil {
		return nil
	}
	homeId, _ := iotutil.ToInt64AndErr(src.HomeId)
	pbObj := proto.UcHomeRoom{
		Id:        iotutil.ToInt64(src.Id),
		HomeId:    homeId,
		RoomName:  src.RoomName,
		IconUrl:   src.IconUrl,
		Sort:      src.Sort,
		CreatedBy: src.CreatedBy,
		UpdatedBy: src.UpdatedBy,
		CreatedAt: timestamppb.New(src.CreatedAt),
		UpdatedAt: timestamppb.New(src.UpdatedAt),
	}
	return &pbObj
}

// pb对象转实体
func RoomUcHomeRoom_pb2e(src *proto.UcHomeRoom) *UcHomeRoomEntitys {
	if src == nil {
		return nil
	}
	entitysObj := UcHomeRoomEntitys{
		Id:        iotutil.ToString(src.Id),
		HomeId:    iotutil.ToString(src.HomeId),
		RoomName:  src.RoomName,
		IconUrl:   src.IconUrl,
		Sort:      src.Sort,
		CreatedBy: src.CreatedBy,
		UpdatedBy: src.UpdatedBy,
		CreatedAt: src.CreatedAt.AsTime(),
		UpdatedAt: src.UpdatedAt.AsTime(),
	}
	return &entitysObj
}

type ServerSimpleEntity struct {
	Id              string `json:"id" `             //用户唯一编号
	WebsocketServer string `json:"websocketServer"` //Wss代理地址	wss://axydev.aithinker.com:444/mqtt
	ControlServer   string `json:"controlServer"`   //
}

type AddDevParam struct {
	HomeId string `json:"homeId"` //家庭ID
	DevId  string `json:"devId"`  //设备ID
	Name   string `json:"name"`   //设备名称
	Model  string `json:"model"`  //设备类型
	State  string `json:"state"`  //设备状态 1-在线
}

type SetDevSort struct {
	HomeId    string         `json:"homeId"`    //家庭id
	ParamList []RoomDevParam `json:"paramList"` //设备id和设备序号数组
}

type RoomDevParam struct {
	DevId string `json:"devId"`
	Sort  int32  `json:"sort"`
}

func IotDeviceInfo_pb2db(src *proto.IotDevInfo) *proto.HomeIotDevInfo {
	if src == nil {
		return nil
	}
	dbObj := proto.HomeIotDevInfo{
		Id:               src.Id,
		Did:              src.Did,
		ProductId:        src.ProductId,
		OnlineStatus:     src.OnlineStatus,
		DeviceName:       src.DeviceName,
		DeviceNature:     src.DeviceNature,
		Sn:               src.Sn,
		BatchId:          src.BatchId,
		GroupId:          src.GroupId,
		DeviceModel:      src.DeviceModel,
		UserName:         src.UserName,
		Passward:         src.Passward,
		Salt:             src.Salt,
		DeviceSecretHttp: src.DeviceSecretHttp,
		DeviceSecretMqtt: src.DeviceSecretMqtt,
		IpAddress:        src.IpAddress,
		Lat:              src.Lat,
		Lng:              src.Lng,
		Country:          src.Country,
		Province:         src.Province,
		City:             src.City,
		District:         src.District,
		MacAddress:       src.MacAddress,
		DeviceVersion:    src.DeviceVersion,
		ActiveStatus:     src.ActiveStatus,
		RoomName:         src.RoomName,
		ProductPic:       src.ProductPic,
		RoomId:           src.RoomId,
		ProductKey:       src.ProductKey,
		SecretKey:        src.SecretKey,
		MqttServer:       src.MqttServer,
		RoomTemplateId:   src.RoomTemplateId,
	}
	return &dbObj
}
