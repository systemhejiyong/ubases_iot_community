// Code generated by sgen.exe,2022-05-20 13:36:03. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	proto "cloud_platform/iot_proto/protos/protosService"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

// 增、删、改及查询返回
type SceneIntelligenceEntitys struct {
	Id               int64     `json:"id,omitempty"`
	Type             int32     `json:"type,omitempty"`
	Title            string    `json:"title,omitempty"`
	SortNo           int32     `json:"sortNo,omitempty"`
	EnableDisplay    int32     `json:"enableDisplay,omitempty"`
	Status           int32     `json:"status,omitempty"`
	RunStatus        int32     `json:"runStatus,omitempty"`
	UserId           int64     `json:"userId,omitempty"`
	HomeId           int64     `json:"homeId,omitempty"`
	ConditionMode    int32     `json:"conditionMode,omitempty"`
	StyleIcon        string    `json:"styleIcon,omitempty"`
	StyleColor       string    `json:"styleColor,omitempty"`
	StyleImg         string    `json:"styleImg,omitempty"`
	EffectTimeSwitch int32     `json:"effectTimeSwitch,omitempty"`
	EffectTimeDesc   string    `json:"effectTimeDesc,omitempty"`
	EffectTimeWeeks  string    `json:"effectTimeWeeks,omitempty"`
	EffectTimeStart  string    `json:"effectTimeStart,omitempty"`
	EffectTimeEnd    string    `json:"effectTimeEnd,omitempty"`
	CreatedBy        int64     `json:"createdBy,omitempty"`
	UpdatedBy        int64     `json:"updatedBy,omitempty"`
	CreatedAt        time.Time `json:"createdAt,omitempty"`
	UpdatedAt        time.Time `json:"updatedAt,omitempty"`
	DeletedAt        time.Time `json:"deletedAt,omitempty"`
}

// 新增参数非空检查
func (s *SceneIntelligenceEntitys) AddCheck() error {
	return nil
}

// 修改参数非空检查
func (s *SceneIntelligenceEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*SceneIntelligenceQuery) QueryCheck() error {
	return nil
}

// 查询条件
type SceneIntelligenceQuery struct {
	Page      uint64                   `json:"page,omitempty"`
	Limit     uint64                   `json:"limit,omitempty"`
	Sort      string                   `json:"sort,omitempty"`
	SortField string                   `json:"sortField,omitempty"`
	SearchKey string                   `json:"searchKey,omitempty"`
	Query     *SceneIntelligenceFilter `json:"query,omitempty"`
}

// SceneIntelligenceFilter，查询条件，字段请根据需要自行增减
type SceneIntelligenceFilter struct {
	Id               int64     `json:"id,omitempty"`
	Type             int32     `json:"type,omitempty"`
	Title            string    `json:"title,omitempty"`
	SortNo           int32     `json:"sortNo,omitempty"`
	EnableDisplay    int32     `json:"enableDisplay,omitempty"`
	Status           int32     `json:"status,omitempty"`
	RunStatus        int32     `json:"runStatus,omitempty"`
	UserId           int64     `json:"userId,omitempty"`
	HomeId           int64     `json:"homeId,omitempty"`
	ConditionMode    int32     `json:"conditionMode,omitempty"`
	StyleIcon        string    `json:"styleIcon,omitempty"`
	StyleColor       string    `json:"styleColor,omitempty"`
	StyleImg         string    `json:"styleImg,omitempty"`
	EffectTimeSwitch int32     `json:"effectTimeSwitch,omitempty"`
	EffectTimeDesc   string    `json:"effectTimeDesc,omitempty"`
	EffectTimeWeeks  string    `json:"effectTimeWeeks,omitempty"`
	EffectTimeStart  string    `json:"effectTimeStart,omitempty"`
	EffectTimeEnd    string    `json:"effectTimeEnd,omitempty"`
	CreatedBy        int64     `json:"createdBy,omitempty"`
	UpdatedBy        int64     `json:"updatedBy,omitempty"`
	CreatedAt        time.Time `json:"createdAt,omitempty"`
	UpdatedAt        time.Time `json:"updatedAt,omitempty"`
	DeletedAt        time.Time `json:"deletedAt,omitempty"`
}

// 实体转pb对象
func SceneIntelligence_e2pb(src *SceneIntelligenceEntitys) *proto.SceneIntelligence {
	if src == nil {
		return nil
	}
	pbObj := proto.SceneIntelligence{
		Id:               src.Id,
		Type:             src.Type,
		Title:            src.Title,
		SortNo:           src.SortNo,
		EnableDisplay:    src.EnableDisplay,
		Status:           src.Status,
		RunStatus:        src.RunStatus,
		UserId:           src.UserId,
		HomeId:           src.HomeId,
		ConditionMode:    src.ConditionMode,
		StyleIcon:        src.StyleIcon,
		StyleColor:       src.StyleColor,
		StyleImg:         src.StyleImg,
		EffectTimeSwitch: src.EffectTimeSwitch,
		EffectTimeDesc:   src.EffectTimeDesc,
		EffectTimeWeeks:  src.EffectTimeWeeks,
		EffectTimeStart:  src.EffectTimeStart,
		EffectTimeEnd:    src.EffectTimeEnd,
		CreatedBy:        src.CreatedBy,
		UpdatedBy:        src.UpdatedBy,
		CreatedAt:        timestamppb.New(src.CreatedAt),
		UpdatedAt:        timestamppb.New(src.UpdatedAt),
	}
	return &pbObj
}

// pb对象转实体
func SceneIntelligence_pb2e(src *proto.SceneIntelligence) *SceneIntelligenceEntitys {
	if src == nil {
		return nil
	}
	entitysObj := SceneIntelligenceEntitys{
		Id:               src.Id,
		Type:             src.Type,
		Title:            src.Title,
		SortNo:           src.SortNo,
		EnableDisplay:    src.EnableDisplay,
		Status:           src.Status,
		RunStatus:        src.RunStatus,
		UserId:           src.UserId,
		HomeId:           src.HomeId,
		ConditionMode:    src.ConditionMode,
		StyleIcon:        src.StyleIcon,
		StyleColor:       src.StyleColor,
		StyleImg:         src.StyleImg,
		EffectTimeSwitch: src.EffectTimeSwitch,
		EffectTimeDesc:   src.EffectTimeDesc,
		EffectTimeWeeks:  src.EffectTimeWeeks,
		EffectTimeStart:  src.EffectTimeStart,
		EffectTimeEnd:    src.EffectTimeEnd,
		CreatedBy:        src.CreatedBy,
		UpdatedBy:        src.UpdatedBy,
		CreatedAt:        src.CreatedAt.AsTime(),
		UpdatedAt:        src.UpdatedAt.AsTime(),
	}
	return &entitysObj
}
