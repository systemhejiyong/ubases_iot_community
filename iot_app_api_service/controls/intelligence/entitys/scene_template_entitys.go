// Code generated by sgen.exe,2022-11-09 16:50:46. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	"cloud_platform/iot_app_api_service/controls"
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_proto/protos/protosService"
	proto "cloud_platform/iot_proto/protos/protosService"
	"context"
	"encoding/json"
	"fmt"
)

// 增、删、改及查询返回
type SceneTemplateEntitys struct {
	Id            int64  `json:"id,string,omitempty"`
	Type          int32  `json:"type,omitempty"`
	Title         string `json:"title,omitempty"`
	TitleEn       string `json:"titleEn,omitempty"`
	Desc          string `json:"desc,omitempty"`
	DescEn        string `json:"descEn,omitempty"`
	SortNo        int32  `json:"sortNo,omitempty"`
	Status        int32  `json:"status,omitempty"`
	ConditionMode int32  `json:"conditionMode,omitempty"`
	Icon          string `json:"icon,omitempty"`
	UseCount      string `json:"useCount,omitempty"`
	CreatedBy     int64  `json:"createdBy,string,omitempty"`
	UpdatedBy     int64  `json:"updatedBy,string,omitempty"`
	CreatedAt     int64  `json:"createdAt,omitempty"`
	UpdatedAt     int64  `json:"updatedAt,omitempty"`
}

// 新增参数非空检查
func (s *SceneTemplateEntitys) AddCheck() error {
	return nil
}

// 修改参数非空检查
func (s *SceneTemplateEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*SceneTemplateQuery) QueryCheck() error {
	return nil
}

// 查询条件
type SceneTemplateQuery struct {
	Page      uint64               `json:"page,omitempty"`
	Limit     uint64               `json:"limit,omitempty"`
	Sort      string               `json:"sort,omitempty"`
	SortField string               `json:"sortField,omitempty"`
	SearchKey string               `json:"searchKey,omitempty"`
	Query     *SceneTemplateFilter `json:"query,omitempty"`
}

// SceneTemplateFilter，查询条件，字段请根据需要自行增减
type SceneTemplateFilter struct {
	Id            int64  `json:"id,string,omitempty"`
	Type          int32  `json:"type,omitempty"`
	Title         string `json:"title,omitempty"`
	TitleEn       string `json:"titleEn,omitempty"`
	Desc          string `json:"desc,omitempty"`
	DescEn        string `json:"descEn,omitempty"`
	SortNo        int32  `json:"sortNo,omitempty"`
	Status        int32  `json:"status,omitempty"`
	ConditionMode int32  `json:"conditionMode,omitempty"`
	Icon          string `json:"icon,omitempty"`
	UseCount      string `json:"useCount,omitempty"`
}

// 场景模板详情
type SceneTemplateApiEntity struct {
	Id            int64                `json:"id,string"`         //场景模板编号
	IsSpecifyApp  int32                `json:"isSpecifyApp"`      // 是否指定APP
	AppList       []*AppDetail         `json:"appList,omitempty"` // 授权APP列表
	ConditionMode int32                `json:"conditionMode"`     // 条件模式（=1 全部满足 =2 任意满足）
	Icon          string               `json:"icon"`              // 模板场景图标
	Conditions    []*TemplateCondition `json:"conditions"`        // 场景条件列表
	Desc          string               `json:"desc"`              // 描述
	DescEn        string               `json:"descEn"`            // 描述英文
	Sort          int32                `json:"sort"`
	Status        int32                `json:"status"`  // 状态
	Tasks         []*TemplateTask      `json:"tasks"`   // 场景任务列表
	Title         string               `json:"title"`   // 场景名称（中文）
	TitleEn       string               `json:"titleEn"` // 场景名称（英文）
	Type          int32                `json:"type"`    // 场景类型（一键执行、自动执行）
	CreatedAt     int64                `json:"createdAt,omitempty"`
	UpdatedAt     int64                `json:"updatedAt,omitempty"`
	UseCount      int32                `json:"useCount"` //累计使用次数
}

// 新增参数非空检查
func (s *SceneTemplateApiEntity) AddCheck() error {
	return nil
}

// 修改参数非空检查
func (s *SceneTemplateApiEntity) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*SceneTemplateApiEntity) QueryCheck() error {
	return nil
}

// APP详情
type AppDetail struct {
	AppId    int64  `json:"appId,string"` // APPID
	AppKey   string `json:"appKey"`       // APPKEY
	AppName  string `json:"appName"`      // APP名称
	TenantId string `json:"tenantId"`     // 租户Id
}

// 模板条件
type TemplateCondition struct {
	Id            int64                `json:"id,string"` //条件Id
	ConditionType int32                `json:"conditionType"`
	Statechange   *TemplateStatechange `json:"statechange,omitempty"`
	Timer         *TemplateTimer       `json:"timer,omitempty"`
	Weather       *TemplateWeather     `json:"weather,omitempty"`
}

// 设备状体变化条件
type TemplateStatechange struct {
	FuncCompare    int32       `json:"funcCompare"`
	FuncKey        string      `json:"funcKey"`
	FuncValue      string      `json:"funcValue"`
	FuncValueDesc  string      `json:"funcValueDesc"`
	FuncDesc       string      `json:"funcDesc"`
	FuncIdentifier string      `json:"funcIdentifier"`
	ProductId      int64       `json:"productId,string"`
	ProductKey     string      `json:"productKey"`
	ProductName    string      `json:"productName"`
	ProductPic     string      `json:"productPic"`
	HasDevice      bool        `json:"hasDevice"`
	DeviceId       string      `json:"deviceId"`
	Multiple       interface{} `json:"multiple,omitempty"` // 设备属倍数（int、double、float时候生效）
	DataType       interface{} `json:"dataType"`           // 设备属数据类型
}

// 定时器条件
type TemplateTimer struct {
	Value string `json:"value"`
	Weeks string `json:"weeks"`
}

// 定时器天气条件
type TemplateWeather struct {
	Type    int32  `json:"type"`
	Value   string `json:"value"`
	Compare int32  `json:"compare"`
}

// 场景模板任务
type TemplateTask struct {
	Id          int64       `json:"id,string"` //任务Id
	Functions   []*Function `json:"functions"`
	ProductId   int64       `json:"productId,string"`
	ProductKey  string      `json:"productKey"`
	ProductName string      `json:"productName"`
	DeviceId    string      `json:"deviceId"`
	ProductPic  string      `json:"productPic"`
	HasDevice   bool        `json:"hasDevice"`
}

func (m TemplateTask) copyPoint() *TemplateTask {
	newObj := iotutil.ToString(m)
	var t TemplateTask
	err := json.Unmarshal([]byte(newObj), &t)
	if err != nil {
		return &m
	}
	return &t
	//vt := reflect.TypeOf(m).Elem()
	//newoby := reflect.New(vt)
	//newoby.Elem().Set(reflect.ValueOf(m).Elem())
	//return newoby.Interface().(*TemplateTask)
}

func (m TemplateCondition) copyPoint() *TemplateCondition {
	newObj := iotutil.ToString(m)
	var t TemplateCondition
	json.Unmarshal([]byte(newObj), &t)
	err := json.Unmarshal([]byte(newObj), &t)
	if err != nil {
		return &m
	}
	return &t
	//vt := reflect.TypeOf(m).Elem()
	//newoby := reflect.New(vt)
	//newoby.Elem().Set(reflect.ValueOf(m).Elem())
	//return newoby.Interface().(*TemplateCondition)
}

// 执行任务功能
type Function struct {
	FuncCompare    int32       `json:"funcCompare"`
	FuncKey        string      `json:"funcKey"`
	FuncDesc       string      `json:"funcDesc"`
	FuncIdentifier string      `json:"funcIdentifier"`
	FuncValue      string      `json:"funcValue"`
	FuncValueDesc  string      `json:"funcValueDesc"`
	Multiple       interface{} `json:"multiple,omitempty"`
	DataType       string      `json:"dataType"`
}

// 实体转pb对象
func SceneTemplate_e2pb(src *SceneTemplateApiEntity) *proto.SceneTemplate {
	if src == nil {
		return nil
	}
	pbObj := proto.SceneTemplate{
		Id:            src.Id,
		Type:          src.Type,
		Title:         src.Title,
		TitleEn:       src.TitleEn,
		Desc:          src.Desc,
		DescEn:        src.DescEn,
		SortNo:        src.Sort,
		Status:        src.Status,
		ConditionMode: src.ConditionMode,
		Icon:          src.Icon,
		IsSpecifyApp:  src.IsSpecifyApp,
	}
	//task
	pbObj.Tasks = make([]*proto.SceneTemplateTask, 0)
	for _, task := range src.Tasks {
		pbObj.Tasks = append(pbObj.Tasks, &proto.SceneTemplateTask{
			SceneTemplateId: src.Id,
			ProductId:       task.ProductId,
			ProductKey:      task.ProductKey,
			Functions:       iotutil.ToString(task.Functions),
		})
	}
	//conditions
	pbObj.Conditions = make([]*proto.SceneTemplateCondition, 0)
	for _, c := range src.Conditions {
		item := &proto.SceneTemplateCondition{
			Id:              c.Id,
			SceneTemplateId: src.Id,
			ConditionType:   c.ConditionType,
		}
		switch iotconst.ConditionType(c.ConditionType) {
		case iotconst.CONDITION_TYPE_WEATHER:
			item.WeatherType = c.Weather.Type
			item.WeatherValue = c.Weather.Value
			item.WeatherCompare = c.Weather.Compare
		case iotconst.CONDITION_TYPE_SATACHANGE:
			item.ProductId = c.Statechange.ProductId
			item.ProductKey = c.Statechange.ProductKey
			item.Functions = iotutil.ToString([]Function{
				{
					FuncKey:     c.Statechange.FuncKey,
					FuncCompare: c.Statechange.FuncCompare,
					FuncValue:   c.Statechange.FuncValue,
				},
			})
			item.FuncKey = c.Statechange.FuncKey
			item.FuncCompare = c.Statechange.FuncCompare
			item.FuncValue = c.Statechange.FuncValue
		case iotconst.CONDITION_TYPE_TIMER:
			item.TimerWeeks = c.Timer.Weeks
			item.TimerValue = c.Timer.Value
		}
		pbObj.Conditions = append(pbObj.Conditions, item)
	}
	//appList
	pbObj.AppList = make([]*proto.SceneTemplateAppRelation, 0)
	for _, app := range src.AppList {
		pbObj.AppList = append(pbObj.AppList, &proto.SceneTemplateAppRelation{
			AppKey:   app.AppKey,
			TenantId: app.TenantId,
			AppName:  app.AppName,
			AppId:    app.AppId,
		})
	}
	return &pbObj
}

// pb对象转实体
func SceneTemplate_pb2e(lang string, tenantId string, src *proto.SceneTemplate, userDevices []*proto.IotDevInfo) *SceneTemplateApiEntity {
	if src == nil {
		return nil
	}
	proCached := controls.ProductCachedData{}
	proImgMap := map[string]string{}
	entitysObj := SceneTemplateApiEntity{
		Id:            src.Id,
		Type:          src.Type,
		Title:         src.Title,
		TitleEn:       src.TitleEn,
		Desc:          src.Desc,
		DescEn:        src.DescEn,
		Sort:          src.SortNo,
		Status:        src.Status,
		ConditionMode: src.ConditionMode,
		Icon:          src.Icon,
		UseCount:      src.UseCount,
		IsSpecifyApp:  src.IsSpecifyApp,
		CreatedAt:     src.CreatedAt.AsTime().Unix(),
		UpdatedAt:     src.UpdatedAt.AsTime().Unix(),
	}
	if lang != iotconst.LANG_CHINA {
		entitysObj.Title = src.TitleEn
		entitysObj.Desc = src.DescEn
	}

	//用户设备
	userDeviceMap := map[string][]*proto.IotDevInfo{}
	if userDevices != nil {
		for _, d := range userDevices {
			userDeviceMap[d.ProductKey] = append(userDeviceMap[d.ProductKey], &protosService.IotDevInfo{
				Did:        d.Did,
				ProductKey: d.ProductKey,
				ProductPic: d.ProductPic,
				ProductId:  d.ProductId,
				DeviceName: d.DeviceName,
				RoomName:   d.RoomName,
			})
		}
	}
	//读取产品翻译
	cacheKey := fmt.Sprintf("%s_%s", tenantId, iotconst.HKEY_LANGUAGE_DATA_PREFIX+iotconst.LANG_PRODUCT_NAME)
	langMap, err := iotredis.GetClient().HGetAll(context.Background(), cacheKey).Result()
	if err != nil {
		langMap = make(map[string]string)
	}
	cacheKey = fmt.Sprintf("%s_%s", tenantId, iotconst.HKEY_LANGUAGE_DATA_PREFIX+iotconst.LANG_PRODUCT_THINGS_MODEL)
	thingsLangMap, err := iotredis.GetClient().HGetAll(context.Background(), cacheKey).Result()
	if err != nil {
		thingsLangMap = make(map[string]string)
	}
	entitysObj.Tasks = make([]*TemplateTask, 0)
	tlsOp := TlsInfo{}
	for _, task := range src.Tasks {
		var functions []*Function
		err := json.Unmarshal([]byte(task.Functions), &functions)
		if err != nil {
			functions = make([]*Function, 0)
		}
		resTask := &TemplateTask{
			ProductId:  task.ProductId,
			ProductKey: task.ProductKey,
			Functions:  functions,
		}
		if resTask.ProductKey != "" {
			resTask.ProductName = iotutil.MapGetStringVal(langMap[fmt.Sprintf("%s_%s_name", lang, resTask.ProductKey)], resTask.ProductKey)
			//防止未进行翻译，导致设备名称显示异常
			if resTask.ProductKey == resTask.ProductName {
				productName, _ := proCached.GetProductByFieldName(resTask.ProductKey, "productName")
				if productName != nil {
					resTask.ProductName = iotutil.ToString(productName)
				}
			}
			if img, ok := proImgMap[resTask.ProductKey]; !ok {
				imageUrl, _ := proCached.GetProductByFieldName(resTask.ProductKey, "imageUrl")
				if imageUrl != nil {
					resTask.ProductPic = iotutil.ToString(imageUrl)
				}
			} else {
				resTask.ProductPic = img
			}
			for j, function := range resTask.Functions {
				multiple, dataType := tlsOp.GetMultipleAndDataType(task.ProductKey, function.FuncKey)
				resTask.Functions[j].FuncDesc = iotutil.MapGetStringVal(thingsLangMap[fmt.Sprintf("%s_%s_%s_name", lang, resTask.ProductKey, function.FuncIdentifier)], function.FuncIdentifier)
				resTask.Functions[j].FuncValueDesc = iotutil.MapGetStringVal(thingsLangMap[fmt.Sprintf("%s_%s_%s_%v_name", lang, resTask.ProductKey, function.FuncIdentifier, function.FuncValue)], resTask.Functions[j].FuncValue)
				resTask.Functions[j].DataType = dataType
				resTask.Functions[j].Multiple = multiple
			}
			if v, ok := userDeviceMap[task.ProductKey]; ok && len(v) > 0 {
				resTask.HasDevice = true
				for _, d := range v {
					resTaskNew := resTask.copyPoint()
					resTaskNew.DeviceId = d.Did
					resTaskNew.ProductName = d.DeviceName
					entitysObj.Tasks = append(entitysObj.Tasks, resTaskNew)
				}
				continue
			} else {
				entitysObj.Tasks = append(entitysObj.Tasks, resTask)
			}
		} else {
			entitysObj.Tasks = append(entitysObj.Tasks, resTask)
		}
	}
	//conditions
	entitysObj.Conditions = make([]*TemplateCondition, 0)
	for _, c := range src.Conditions {
		item := &TemplateCondition{
			Id:            c.Id,
			ConditionType: c.ConditionType,
		}
		switch iotconst.ConditionType(c.ConditionType) {
		case iotconst.CONDITION_TYPE_WEATHER:
			item.Weather = &TemplateWeather{}
			item.Weather.Type = c.WeatherType
			item.Weather.Value = c.WeatherValue
			item.Weather.Compare = c.WeatherCompare
			entitysObj.Conditions = append(entitysObj.Conditions, item)
		case iotconst.CONDITION_TYPE_SATACHANGE:
			multiple, dataType := tlsOp.GetMultipleAndDataType(c.ProductKey, c.FuncKey)
			item.Statechange = &TemplateStatechange{}
			item.Statechange.ProductId = c.ProductId
			item.Statechange.ProductKey = c.ProductKey
			item.Statechange.FuncKey = c.FuncKey
			item.Statechange.FuncCompare = c.FuncCompare
			item.Statechange.FuncValue = c.FuncValue
			item.Statechange.FuncIdentifier = c.FuncIdentifier
			item.Statechange.FuncDesc = iotutil.MapGetStringVal(thingsLangMap[fmt.Sprintf("%s_%s_%s_name", lang, c.ProductKey, c.FuncIdentifier)], c.FuncIdentifier)
			item.Statechange.FuncValueDesc = iotutil.MapGetStringVal(thingsLangMap[fmt.Sprintf("%s_%s_%s_%v_name", lang, c.ProductKey, c.FuncIdentifier, c.FuncValue)], c.FuncValue)
			item.Statechange.ProductName = iotutil.MapGetStringVal(langMap[fmt.Sprintf("%s_%s_name", lang, c.ProductKey)], c.ProductKey)
			item.Statechange.Multiple = multiple
			item.Statechange.DataType = dataType

			//防止未进行翻译，导致设备名称显示异常
			if c.ProductKey == item.Statechange.ProductName {
				productName, _ := proCached.GetProductByFieldName(c.ProductKey, "productName")
				if productName != nil {
					item.Statechange.ProductName = iotutil.ToString(productName)
				}
			}
			if img, ok := proImgMap[c.ProductKey]; !ok {
				imageUrl, _ := proCached.GetProductByFieldName(c.ProductKey, "imageUrl")
				if imageUrl != nil {
					item.Statechange.ProductPic = iotutil.ToString(imageUrl)
				}
			} else {
				item.Statechange.ProductPic = img
			}

			if v, ok := userDeviceMap[c.ProductKey]; ok && len(v) > 0 {
				for _, d := range v {
					itemNew := item.copyPoint()
					itemNew.Statechange.HasDevice = true
					itemNew.Statechange.DeviceId = d.Did
					//显示客户自定义的名称
					itemNew.Statechange.ProductName = d.DeviceName
					entitysObj.Conditions = append(entitysObj.Conditions, itemNew)
				}
				continue
			} else {
				entitysObj.Conditions = append(entitysObj.Conditions, item)
			}
		case iotconst.CONDITION_TYPE_TIMER:
			item.Timer = &TemplateTimer{}
			item.Timer.Weeks = c.TimerWeeks
			item.Timer.Value = c.TimerValue
			entitysObj.Conditions = append(entitysObj.Conditions, item)
		default:
			entitysObj.Conditions = append(entitysObj.Conditions, item)
		}
	}
	return &entitysObj
}
