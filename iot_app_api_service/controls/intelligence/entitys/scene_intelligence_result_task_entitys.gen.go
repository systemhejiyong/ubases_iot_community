// Code generated by sgen.exe,2022-05-20 13:36:04. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	proto "cloud_platform/iot_proto/protos/protosService"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

// 增、删、改及查询返回
type SceneIntelligenceResultTaskEntitys struct {
	Id             int64     `json:"id,string,omitempty"`
	StartTime      time.Time `json:"startTime,omitempty"`
	EndTime        time.Time `json:"endTime,omitempty"`
	IntelligenceId int64     `json:"intelligenceId,string,omitempty"`
	ResultId       int64     `json:"resultId,string,omitempty"`
	IsSuccess      int32     `json:"isSuccess,omitempty"`
	ResultMsg      string    `json:"resultMsg,omitempty"`
	TaskId         int64     `json:"taskId,string,omitempty"`
	TaskImg        string    `json:"taskImg,omitempty"`
	TaskDesc       string    `json:"taskDesc,omitempty"`
	TaskType       int32     `json:"taskType,omitempty"`
	ObjectId       string    `json:"objectId,omitempty"`
	ObjectDesc     string    `json:"objectDesc,omitempty"`
	FuncKey        string    `json:"funcKey,omitempty"`
	FuncDesc       string    `json:"funcDesc,omitempty"`
	FuncValue      string    `json:"funcValue,omitempty"`
	CreatedAt      time.Time `json:"createdAt,omitempty"`
	UpdatedAt      time.Time `json:"updatedAt,omitempty"`
}

// 新增参数非空检查
func (s *SceneIntelligenceResultTaskEntitys) AddCheck() error {
	return nil
}

// 修改参数非空检查
func (s *SceneIntelligenceResultTaskEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*SceneIntelligenceResultTaskQuery) QueryCheck() error {
	return nil
}

// 查询条件
type SceneIntelligenceResultTaskQuery struct {
	Page      uint64                             `json:"page,omitempty"`
	Limit     uint64                             `json:"limit,omitempty"`
	Sort      string                             `json:"sort,omitempty"`
	SortField string                             `json:"sortField,omitempty"`
	SearchKey string                             `json:"searchKey,omitempty"`
	Query     *SceneIntelligenceResultTaskFilter `json:"query,omitempty"`
}

// SceneIntelligenceResultTaskFilter，查询条件，字段请根据需要自行增减
type SceneIntelligenceResultTaskFilter struct {
	Id             int64     `json:"id,string,omitempty"`
	StartTime      time.Time `json:"startTime,omitempty"`
	EndTime        time.Time `json:"endTime,omitempty"`
	IntelligenceId int64     `json:"intelligenceId,string,omitempty"`
	ResultId       int64     `json:"resultId,string,omitempty"`
	IsSuccess      int32     `json:"isSuccess,omitempty"`
	ResultMsg      string    `json:"resultMsg,omitempty"`
	TaskId         int64     `json:"taskId,string,omitempty"`
	TaskImg        string    `json:"taskImg,omitempty"`
	TaskDesc       string    `json:"taskDesc,omitempty"`
	TaskType       int32     `json:"taskType,omitempty"`
	ObjectId       string    `json:"objectId,omitempty"`
	ObjectDesc     string    `json:"objectDesc,omitempty"`
	FuncKey        string    `json:"funcKey,omitempty"`
	FuncDesc       string    `json:"funcDesc,omitempty"`
	FuncValue      string    `json:"funcValue,omitempty"`
	CreatedAt      time.Time `json:"createdAt,omitempty"`
	UpdatedAt      time.Time `json:"updatedAt,omitempty"`
}

// 实体转pb对象
func SceneIntelligenceResultTask_e2pb(src *SceneIntelligenceResultTaskEntitys) *proto.SceneIntelligenceResultTask {
	if src == nil {
		return nil
	}
	pbObj := proto.SceneIntelligenceResultTask{
		Id:             src.Id,
		StartTime:      timestamppb.New(src.StartTime),
		EndTime:        timestamppb.New(src.EndTime),
		IntelligenceId: src.IntelligenceId,
		ResultId:       src.ResultId,
		IsSuccess:      src.IsSuccess,
		ResultMsg:      src.ResultMsg,
		TaskId:         src.TaskId,
		TaskImg:        src.TaskImg,
		TaskDesc:       src.TaskDesc,
		TaskType:       src.TaskType,
		ObjectId:       src.ObjectId,
		ObjectDesc:     src.ObjectDesc,
		FuncKey:        src.FuncKey,
		FuncDesc:       src.FuncDesc,
		FuncValue:      src.FuncValue,
		CreatedAt:      timestamppb.New(src.CreatedAt),
		UpdatedAt:      timestamppb.New(src.UpdatedAt),
	}
	return &pbObj
}

// pb对象转实体
func SceneIntelligenceResultTask_pb2e(src *proto.SceneIntelligenceResultTask) *SceneIntelligenceResultTaskEntitys {
	if src == nil {
		return nil
	}
	entitysObj := SceneIntelligenceResultTaskEntitys{
		Id:             src.Id,
		StartTime:      src.StartTime.AsTime(),
		EndTime:        src.EndTime.AsTime(),
		IntelligenceId: src.IntelligenceId,
		ResultId:       src.ResultId,
		IsSuccess:      src.IsSuccess,
		ResultMsg:      src.ResultMsg,
		TaskId:         src.TaskId,
		TaskImg:        src.TaskImg,
		TaskDesc:       src.TaskDesc,
		TaskType:       src.TaskType,
		ObjectId:       src.ObjectId,
		ObjectDesc:     src.ObjectDesc,
		FuncKey:        src.FuncKey,
		FuncDesc:       src.FuncDesc,
		FuncValue:      src.FuncValue,
		CreatedAt:      src.CreatedAt.AsTime(),
		UpdatedAt:      src.UpdatedAt.AsTime(),
	}
	return &entitysObj
}
