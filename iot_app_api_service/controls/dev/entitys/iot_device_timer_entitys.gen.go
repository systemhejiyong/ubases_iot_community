// Code generated by sgen.exe,2022-06-17 14:48:00. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	"cloud_platform/iot_common/iotstruct"
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"encoding/json"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

type IotDeviceTimerUpdate struct {
	Id             int64
	Hour           int32                       `json:"hour,omitempty"`
	Minute         int32                       `json:"minute,omitempty"`
	DaysMode       int32                       `json:"daysMode,omitempty"`
	Weeks          string                      `json:"weeks,omitempty"`
	Remark         string                      `json:"remark,omitempty"`
	Functions      []*iotstruct.TimerFunctions `json:"functions,omitempty"`
	FuncKey        string                      `json:"funcKey,omitempty"`
	FuncValue      interface{}                 `json:"funcValue,omitempty"`
	UserId         int64                       `json:"userId,omitempty"`
	DeviceId       string                      `json:"devId,omitempty"`
	Enabled        int32                       `json:"enabled,omitempty"`
	FirstTime      time.Time                   `json:"firstTime,omitempty"`
	Cron           string                      `json:"cron,omitempty"`
	TaskId         string                      `json:"taskId,omitempty"`
	CreatedBy      int64                       `json:"createdBy,omitempty"`
	UpdatedBy      int64                       `json:"updatedBy,omitempty"`
	CreatedAt      time.Time                   `json:"createdAt,omitempty"`
	UpdatedAt      time.Time                   `json:"updatedAt,omitempty"`
	Name           string                      `json:"name,omitempty"`
	EndHour        int32                       `json:"endHour,omitempty"`
	EndMinute      int32                       `json:"endMinute,omitempty"`
	EndCron        string                      `json:"endCron,omitempty"`
	Type           int                         `json:"type,omitempty"`
	Timezone       string                      `json:"timezone"`       //时区
	RegionServerId int64                       `json:"regionServerId"` //区域服务器Id
}

// 增、删、改及查询返回
type IotDeviceTimerEntitys struct {
	Id             int64                      `json:"id,omitempty"`
	Hour           int32                      `json:"hour,omitempty"`
	Minute         int32                      `json:"minute,omitempty"`
	DaysMode       int32                      `json:"daysMode,omitempty"`
	Weeks          string                     `json:"weeks,omitempty"`
	Remark         string                     `json:"remark,omitempty"`
	Functions      []iotstruct.TimerFunctions `json:"functions,omitempty"`
	FuncKey        string                     `json:"funcKey,omitempty"`
	FuncValue      interface{}                `json:"funcValue,omitempty"`
	UserId         int64                      `json:"userId,omitempty"`
	DeviceId       string                     `json:"devId,omitempty"`
	Enabled        int32                      `json:"enabled,omitempty"`
	FirstTime      time.Time                  `json:"firstTime,omitempty"`
	Cron           string                     `json:"cron,omitempty"`
	TaskId         string                     `json:"taskId,omitempty"`
	CreatedBy      int64                      `json:"createdBy,omitempty"`
	UpdatedBy      int64                      `json:"updatedBy,omitempty"`
	CreatedAt      time.Time                  `json:"createdAt,omitempty"`
	UpdatedAt      time.Time                  `json:"updatedAt,omitempty"`
	Name           string                     `json:"name,omitempty"`
	EndHour        int32                      `json:"endHour,omitempty"`
	EndMinute      int32                      `json:"endMinute,omitempty"`
	EndCron        string                     `json:"endCron,omitempty"`
	Type           int                        `json:"type,omitempty"`
	Timezone       string                     `json:"timezone"`       //时区
	RegionServerId int64                      `json:"regionServerId"` //区域服务器Id
}

// 新增参数非空检查
func (s *IotDeviceTimerEntitys) AddCheck() error {
	return nil
}

// 修改参数非空检查
func (s *IotDeviceTimerEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*IotDeviceTimerQuery) QueryCheck() error {
	return nil
}

// 查询条件
type IotDeviceTimerQuery struct {
	Page      uint64                `json:"page,omitempty"`
	Limit     uint64                `json:"limit,omitempty"`
	Sort      string                `json:"sort,omitempty"`
	SortField string                `json:"sortField,omitempty"`
	SearchKey string                `json:"searchKey,omitempty"`
	Query     *IotDeviceTimerFilter `json:"query,omitempty"`
}

// IotDeviceTimerFilter，查询条件，字段请根据需要自行增减
type IotDeviceTimerFilter struct {
	Id        int64     `json:"id,omitempty"`
	Hour      string    `json:"hour,omitempty"`
	Minute    string    `json:"minute,omitempty"`
	DaysMode  int32     `json:"daysMode,omitempty"`
	Weeks     string    `json:"weeks,omitempty"`
	Remark    string    `json:"remark,omitempty"`
	FuncKey   string    `json:"funcKey,omitempty"`
	FuncValue string    `json:"funcValue,omitempty"`
	UserId    int64     `json:"userId,omitempty"`
	DeviceId  string    `json:"devId,omitempty"`
	Enabled   int32     `json:"enabled,omitempty"`
	FirstTime time.Time `json:"firstTime,omitempty"`
	Cron      string    `json:"cron,omitempty"`
	TaskId    string    `json:"taskId,omitempty"`
	CreatedBy int64     `json:"createdBy,omitempty"`
	UpdatedBy int64     `json:"updatedBy,omitempty"`
	CreatedAt time.Time `json:"createdAt,omitempty"`
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	Name      string    `json:"name,omitempty"`
	EndHour   string    `json:"endHour,omitempty"`
	EndMinute string    `json:"endMinute,omitempty"`
	EndCron   string    `json:"endCron,omitempty"`
}

// 实体转pb对象
func IotDeviceTimer_e2pbUpdate(src *IotDeviceTimerUpdate) *proto.IotDeviceTimer {
	if src == nil {
		return nil
	}
	pbObj := proto.IotDeviceTimer{
		Id:             src.Id,
		Hour:           iotutil.ToString(src.Hour),
		Minute:         iotutil.ToString(src.Minute),
		DaysMode:       src.DaysMode,
		Weeks:          src.Weeks,
		Remark:         src.Remark,
		FuncKey:        src.FuncKey,
		FuncValue:      iotutil.ToString(src.FuncValue),
		UserId:         src.UserId,
		DeviceId:       src.DeviceId,
		Enabled:        src.Enabled,
		FirstTime:      timestamppb.New(src.FirstTime),
		Cron:           src.Cron,
		TaskId:         src.TaskId,
		CreatedBy:      src.CreatedBy,
		UpdatedBy:      src.UpdatedBy,
		CreatedAt:      timestamppb.New(src.CreatedAt),
		UpdatedAt:      timestamppb.New(src.UpdatedAt),
		Name:           src.Name,
		EndHour:        iotutil.ToString(src.EndHour),
		EndMinute:      iotutil.ToString(src.EndMinute),
		EndCron:        src.EndCron,
		Timezone:       src.Timezone,
		RegionServerId: src.RegionServerId,
	}
	pbObj.Functions = iotutil.ToString(src.Functions)
	return &pbObj
}

// 实体转pb对象
func IotDeviceTimer_e2pb(src *IotDeviceTimerEntitys) *proto.IotDeviceTimer {
	if src == nil {
		return nil
	}
	pbObj := proto.IotDeviceTimer{
		Id:             src.Id,
		Hour:           iotutil.ToString(src.Hour),
		Minute:         iotutil.ToString(src.Minute),
		DaysMode:       src.DaysMode,
		Weeks:          src.Weeks,
		Remark:         src.Remark,
		FuncKey:        src.FuncKey,
		FuncValue:      iotutil.ToString(src.FuncValue),
		UserId:         src.UserId,
		DeviceId:       src.DeviceId,
		Enabled:        src.Enabled,
		FirstTime:      timestamppb.New(src.FirstTime),
		Cron:           src.Cron,
		TaskId:         src.TaskId,
		CreatedBy:      src.CreatedBy,
		UpdatedBy:      src.UpdatedBy,
		CreatedAt:      timestamppb.New(src.CreatedAt),
		UpdatedAt:      timestamppb.New(src.UpdatedAt),
		Name:           src.Name,
		EndHour:        iotutil.ToString(src.EndHour),
		EndMinute:      iotutil.ToString(src.EndMinute),
		EndCron:        src.EndCron,
		Timezone:       src.Timezone,
		RegionServerId: src.RegionServerId,
	}
	pbObj.Functions = iotutil.ToString(src.Functions)
	return &pbObj
}

// pb对象转实体
func IotDeviceTimer_pb2e(src *proto.IotDeviceTimer) *IotDeviceTimerEntitys {
	if src == nil {
		return nil
	}
	entitysObj := IotDeviceTimerEntitys{
		Id:             src.Id,
		Hour:           iotutil.ToInt32(src.Hour),
		Minute:         iotutil.ToInt32(src.Minute),
		DaysMode:       src.DaysMode,
		Weeks:          src.Weeks,
		Remark:         src.Remark,
		FuncKey:        src.FuncKey,
		FuncValue:      src.FuncValue,
		UserId:         src.UserId,
		DeviceId:       src.DeviceId,
		Enabled:        src.Enabled,
		FirstTime:      src.FirstTime.AsTime(),
		Cron:           src.Cron,
		TaskId:         src.TaskId,
		CreatedBy:      src.CreatedBy,
		UpdatedBy:      src.UpdatedBy,
		CreatedAt:      src.CreatedAt.AsTime(),
		UpdatedAt:      src.UpdatedAt.AsTime(),
		Name:           src.Name,
		EndHour:        iotutil.ToInt32(src.EndHour),
		EndMinute:      iotutil.ToInt32(src.EndMinute),
		EndCron:        src.EndCron,
		Timezone:       src.Timezone,
		RegionServerId: src.RegionServerId,
	}
	return &entitysObj
}

type TimerListQuery struct {
	DevId string `json:"devId"` // 设备ID
	Page  int64  `json:"page"`
	Limit int64  `json:"limit"`
}

type IotDeviceTimerVo struct {
	Id               int64                       `json:"id,string"`
	Hour             int32                       `json:"hour"`
	Minute           int32                       `json:"minute"`
	DaysMode         int32                       `json:"daysMode"`
	Weeks            string                      `json:"weeks"`
	Remark           string                      `json:"remark"`
	FuncKey          string                      `json:"funcKey"`
	FuncValue        string                      `json:"funcValue"`
	DeviceId         string                      `json:"devId"`
	Enabled          int32                       `json:"enabled"`
	FirstTime        time.Time                   `json:"firstTime"`
	Cron             string                      `json:"cron"`
	TaskId           string                      `json:"taskId"`
	CreatedBy        int64                       `json:"createdBy,string"`
	Functions        []*iotstruct.TimerFunctions `json:"functions,omitempty"`
	Name             string                      `json:"name"`
	EndHour          int32                       `json:"endHour"`
	EndMinute        int32                       `json:"endMinute"`
	EndCron          string                      `json:"endCron"`
	FirstTimeWeekDay int8                        `json:"firstTimeWeekDay"`
	Timezone         string                      `json:"timezone"`       //时区
	RegionServerId   int64                       `json:"regionServerId"` //区域服务器Id
	FuncDesc         string                      `json:"funcDesc"`       //功能描述
}

// pb对象转实体
func IotDeviceTimer_vo(src *proto.IotDeviceTimer) *IotDeviceTimerVo {
	if src == nil {
		return nil
	}
	entitysObj := IotDeviceTimerVo{
		Id:             src.Id,
		Hour:           iotutil.ToInt32(src.Hour),
		Minute:         iotutil.ToInt32(src.Minute),
		DaysMode:       src.DaysMode,
		Weeks:          src.Weeks,
		Remark:         src.Remark,
		FuncKey:        src.FuncKey,
		FuncValue:      src.FuncValue,
		DeviceId:       src.DeviceId,
		Enabled:        src.Enabled,
		FirstTime:      src.FirstTime.AsTime(),
		Cron:           src.Cron,
		TaskId:         src.TaskId,
		CreatedBy:      src.CreatedBy,
		Name:           src.Name,
		EndCron:        src.EndCron,
		Timezone:       src.Timezone,
		RegionServerId: src.RegionServerId,
	}
	if src.EndHour != "" {
		entitysObj.EndHour = iotutil.ToInt32(src.EndHour)
	}
	if src.EndMinute != "" {
		entitysObj.EndMinute = iotutil.ToInt32(src.EndMinute)
	}
	if src.Functions != "" {
		json.Unmarshal([]byte(src.Functions), &entitysObj.Functions)
	} else {
		//兼容处理
		entitysObj.Functions = []*iotstruct.TimerFunctions{
			{
				FuncKey:   src.FuncKey,
				FuncValue: src.FuncValue,
			},
		}
	}
	// 对于预约功能，只执行一次定时需要做状态展览，需要返回首次执行时间是周几
	if src.DaysMode == 1 {
		entitysObj.FirstTimeWeekDay = int8(entitysObj.FirstTime.Local().Weekday())
		if entitysObj.FirstTimeWeekDay == 0 {
			entitysObj.FirstTimeWeekDay = 7
		}
	}
	return &entitysObj
}

func (s *IotDeviceTimerVo) SetDesc(desc string) *IotDeviceTimerVo {
	s.FuncDesc = desc
	return s
}
