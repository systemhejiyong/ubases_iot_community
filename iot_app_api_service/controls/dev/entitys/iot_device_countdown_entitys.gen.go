// Code generated by sgen.exe,2022-06-17 14:48:11. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

// 增、删、改及查询返回
type IotDeviceCountdown struct {
	Hour           int32     `json:"hour,omitempty"`
	Minute         int32     `json:"minute,omitempty"`
	Remark         string    `json:"remark,omitempty"`
	FuncKey        string    `json:"funcKey,omitempty"`
	FuncValue      string    `json:"funcValue,omitempty"`
	UserId         int64     `json:"userId,omitempty"`
	Enabled        int32     `json:"enabled,omitempty"`
	TotalSecond    int32     `json:"totalSecond,omitempty"`
	ExecutionTime  time.Time `json:"executionTime,omitempty"`
	TaskId         string    `json:"taskId,omitempty"`
	Cron           string    `json:"cron,omitempty"`
	CreatedBy      int64     `json:"createdBy,omitempty"`
	UpdatedBy      int64     `json:"updatedBy,omitempty"`
	CreatedAt      time.Time `json:"createdAt,omitempty"`
	UpdatedAt      time.Time `json:"updatedAt,omitempty"`
	Timezone       string    `json:"timezone"`       //时区
	RegionServerId int64     `json:"regionServerId"` //区域服务器Id
}

// 增、删、改及查询返回
type IotDeviceCountdownEntitys struct {
	Id             int64     `json:"id,omitempty"`
	Hour           int32     `json:"hour,omitempty"`
	Minute         int32     `json:"minute,omitempty"`
	Remark         string    `json:"remark,omitempty"`
	FuncKey        string    `json:"funcKey,omitempty"`
	FuncValue      string    `json:"funcValue,omitempty"`
	UserId         int64     `json:"userId,omitempty"`
	DeviceId       string    `json:"devId,omitempty"`
	Enabled        int32     `json:"enabled,omitempty"`
	TotalSecond    int32     `json:"totalSecond,omitempty"`
	ExecutionTime  time.Time `json:"executionTime,omitempty"`
	TaskId         string    `json:"taskId,omitempty"`
	Cron           string    `json:"cron,omitempty"`
	CreatedBy      int64     `json:"createdBy,omitempty"`
	UpdatedBy      int64     `json:"updatedBy,omitempty"`
	CreatedAt      time.Time `json:"createdAt,omitempty"`
	UpdatedAt      time.Time `json:"updatedAt,omitempty"`
	Timezone       string    `json:"timezone"`       //时区
	RegionServerId int64     `json:"regionServerId"` //区域服务器Id
}

// 新增参数非空检查
func (s *IotDeviceCountdownEntitys) AddCheck() error {
	return nil
}

// 修改参数非空检查
func (s *IotDeviceCountdownEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*IotDeviceCountdownQuery) QueryCheck() error {
	return nil
}

// 查询条件
type IotDeviceCountdownQuery struct {
	Page      uint64                    `json:"page,omitempty"`
	Limit     uint64                    `json:"limit,omitempty"`
	Sort      string                    `json:"sort,omitempty"`
	SortField string                    `json:"sortField,omitempty"`
	SearchKey string                    `json:"searchKey,omitempty"`
	Query     *IotDeviceCountdownFilter `json:"query,omitempty"`
}

// IotDeviceCountdownFilter，查询条件，字段请根据需要自行增减
type IotDeviceCountdownFilter struct {
	Id            int64     `json:"id,omitempty"`
	Hour          string    `json:"hour,omitempty"`
	Minute        string    `json:"minute,omitempty"`
	Remark        string    `json:"remark,omitempty"`
	FuncKey       string    `json:"funcKey,omitempty"`
	FuncValue     string    `json:"funcValue,omitempty"`
	UserId        int64     `json:"userId,omitempty"`
	DeviceId      string    `json:"devId,omitempty"`
	Enabled       int32     `json:"enabled,omitempty"`
	TotalSecond   int32     `json:"totalSecond,omitempty"`
	ExecutionTime time.Time `json:"executionTime,omitempty"`
	TaskId        string    `json:"taskId,omitempty"`
	Cron          string    `json:"cron,omitempty"`
	CreatedBy     int64     `json:"createdBy,omitempty"`
	UpdatedBy     int64     `json:"updatedBy,omitempty"`
	CreatedAt     time.Time `json:"createdAt,omitempty"`
	UpdatedAt     time.Time `json:"updatedAt,omitempty"`
}

// 实体转pb对象
func IotDeviceCountdown_e2pb(src *IotDeviceCountdownEntitys) *proto.IotDeviceCountdown {
	if src == nil {
		return nil
	}
	pbObj := proto.IotDeviceCountdown{
		Id:             src.Id,
		Hour:           iotutil.ToString(src.Hour),
		Minute:         iotutil.ToString(src.Minute),
		Remark:         src.Remark,
		FuncKey:        src.FuncKey,
		FuncValue:      src.FuncValue,
		UserId:         src.UserId,
		DeviceId:       src.DeviceId,
		Enabled:        src.Enabled,
		TotalSecond:    src.TotalSecond,
		ExecutionTime:  timestamppb.New(src.ExecutionTime),
		TaskId:         src.TaskId,
		Cron:           src.Cron,
		CreatedBy:      src.CreatedBy,
		UpdatedBy:      src.UpdatedBy,
		CreatedAt:      timestamppb.New(src.CreatedAt),
		UpdatedAt:      timestamppb.New(src.UpdatedAt),
		RegionServerId: src.RegionServerId,
	}
	return &pbObj
}

// pb对象转实体
func IotDeviceCountdown_pb2e(src *proto.IotDeviceCountdown) *IotDeviceCountdownEntitys {
	if src == nil {
		return nil
	}
	entitysObj := IotDeviceCountdownEntitys{
		Id:             src.Id,
		Hour:           iotutil.ToInt32(src.Hour),
		Minute:         iotutil.ToInt32(src.Minute),
		Remark:         src.Remark,
		FuncKey:        src.FuncKey,
		FuncValue:      src.FuncValue,
		UserId:         src.UserId,
		DeviceId:       src.DeviceId,
		Enabled:        src.Enabled,
		TotalSecond:    src.TotalSecond,
		ExecutionTime:  src.ExecutionTime.AsTime(),
		TaskId:         src.TaskId,
		Cron:           src.Cron,
		CreatedBy:      src.CreatedBy,
		UpdatedBy:      src.UpdatedBy,
		CreatedAt:      src.CreatedAt.AsTime(),
		UpdatedAt:      src.UpdatedAt.AsTime(),
		RegionServerId: src.RegionServerId,
	}
	return &entitysObj
}

// 增、删、改及查询返回
type IotDeviceCountdownVo struct {
	Id             int64     `json:"id,string"`
	Hour           int32     `json:"hour,omitempty"`
	Minute         int32     `json:"minute,omitempty"`
	Remark         string    `json:"remark,omitempty"`
	FuncKey        string    `json:"funcKey,omitempty"`
	FuncValue      string    `json:"funcValue,omitempty"`
	DeviceId       string    `json:"devId,omitempty"`
	Enabled        int32     `json:"enabled,omitempty"`
	TotalSecond    int32     `json:"totalSecond,omitempty"`
	ExecutionTime  time.Time `json:"executionTime,omitempty"`
	SurplusTime    int64     `json:"surplusTime"`
	TaskId         string    `json:"taskId,omitempty"`
	Cron           string    `json:"cron,omitempty"`
	CreatedBy      int64     `json:"createdBy,string"`
	RegionServerId int64     `json:"regionServerId"` //区域服务器Id
}

// pb对象转实体
func IotDeviceCountdown_vo(src *proto.IotDeviceCountdown) *IotDeviceCountdownVo {
	if src == nil {
		return nil
	}
	entitysObj := IotDeviceCountdownVo{
		Id:             src.Id,
		Hour:           iotutil.ToInt32(src.Hour),
		Minute:         iotutil.ToInt32(src.Minute),
		Remark:         src.Remark,
		FuncKey:        src.FuncKey,
		FuncValue:      src.FuncValue,
		DeviceId:       src.DeviceId,
		Enabled:        src.Enabled,
		TotalSecond:    src.TotalSecond,
		ExecutionTime:  src.ExecutionTime.AsTime(),
		TaskId:         src.TaskId,
		Cron:           src.Cron,
		CreatedBy:      src.CreatedBy,
		RegionServerId: src.RegionServerId,
	}
	return &entitysObj
}
