// Code generated by sgen.exe,2022-05-18 23:26:55. DO NOT EDIT.
// versions: v1.0.0
//  API结构体封装，请自行根据需要删减字段修改

package entitys

import (
	"cloud_platform/iot_common/iotutil"
	proto "cloud_platform/iot_proto/protos/protosService"
	"strings"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

// 增、删、改及查询返回
type UcUserFeedbackEntitys struct {
	Id               string           `json:"id"`
	UserId           string           `json:"userId"`
	QuestionTypeId   string           `json:"typeId"`
	QuestionTypeName string           `json:"typeName"`
	ProductId        string           `json:"productId,omitempty"`
	FeedbackTime     int64            `json:"findTime"`
	FeedbackContent  string           `json:"content"`
	Status           int32            `json:"status"`
	CreatedBy        int64            `json:"createdBy"`
	CreatedAt        int64            `json:"createdAt"`
	UpdatedBy        int64            `json:"updatedBy"`
	Pictures         []string         `json:"pictures"` // 附件信息（图片、视频）
	Videos           []string         `json:"videos"`
	Contact          string           `json:"contact"`
	Did              string           `json:"devId"`
	ProductKey       string           `json:"productKey"`
	Records          []FollowUpRecord `json:"followUpRecord"`
	AppVersion       string           `json:"appVersion"`   // App版本
	MobileLang       string           `json:"mobileLang"`   // 手机语言
	MobileModel      string           `json:"mobileModel"`  // 手机型号
	MobileSystem     string           `json:"mobileSystem"` // 手机系统
}

type FollowUpRecord struct {
	Id        string   `json:"id"`
	ReplyUser string   `json:"ReplyUser"`
	ReplyTime int64    `json:"ReplyTime"`
	Content   string   `json:"content"`
	Pictures  []string `json:"pictures"` // 附件信息（图片、视频）
	Videos    []string `json:"videos"`
}

// 新增参数非空检查
func (s *UcUserFeedbackEntitys) AddCheck() error {
	return nil
}

// 修改参数非空检查
func (s *UcUserFeedbackEntitys) UpdateCheck() error {
	return nil
}

// 查询参数必填检查
func (*UcUserFeedbackQuery) QueryCheck() error {
	return nil
}

//查询条件
//type UcUserFeedbackQuery struct {
//	Page      uint64                `json:"page,omitempty"`
//	Limit     uint64                `json:"limit,omitempty"`
//	Sort      string                `json:"sort,omitempty"`
//	SortField string                `json:"sortField,omitempty"`
//	SearchKey string                `json:"searchKey,omitempty"`
//	Query     *UcUserFeedbackFilter `json:"query,omitempty"`
//}

type UcUserFeedbackQuery struct {
	Page   int64 `json:"page,omitempty"`
	Limit  int64 `json:"limit,omitempty"`
	UserId int64 `json:"userId,omitempty"`
}

// UcUserFeedbackFilter，查询条件，字段请根据需要自行增减
type UcUserFeedbackFilter struct {
	Id              int64     `json:"id,omitempty"`
	UserId          int64     `json:"userId,omitempty"`
	QuestionTypeId  int64     `json:"questionTypeId,omitempty"`
	ProductId       int64     `json:"productId,omitempty"`
	FeedbackTime    time.Time `json:"feedbackTime,omitempty"`
	FeedbackContent string    `json:"feedbackContent,omitempty"`
	Status          int32     `json:"status,omitempty"`
	CreatedBy       int64     `json:"createdBy,omitempty"`
	UpdatedBy       int64     `json:"updatedBy,omitempty"`
	Files           string    `json:"files,omitempty"`
}

// 实体转pb对象
func UcUserFeedback_e2pb(src *UcUserFeedbackEntitys) *proto.UcUserFeedback {
	if src == nil {
		return nil
	}
	id, _ := iotutil.ToInt64AndErr(src.Id)
	productId, _ := iotutil.ToInt64AndErr(src.ProductId)
	questionTypeId, _ := iotutil.ToInt64AndErr(src.QuestionTypeId)
	pbObj := proto.UcUserFeedback{
		Id:              id,
		UserId:          iotutil.ToInt64(src.UserId),
		ProductId:       productId,
		FeedbackTime:    timestamppb.New(time.Unix(src.FeedbackTime, 0)),
		FeedbackContent: src.FeedbackContent,
		Status:          src.Status,
		CreatedBy:       src.CreatedBy,
		UpdatedBy:       src.UpdatedBy,
		Pictures:        strings.Join(src.Pictures, ","),
		Videos:          strings.Join(src.Videos, ","),
		Contact:         src.Contact,
		Did:             src.Did,
		ProductKey:      src.ProductKey,
		QuestionTypeId:  questionTypeId,
		AppVersion:      strings.TrimSpace(src.AppVersion),
		MobileLang:      src.MobileLang,
		MobileModel:     src.MobileModel,
		MobileSystem:    src.MobileSystem,
	}
	return &pbObj
}

// pb对象转实体
func UcUserFeedback_pb2e(src *proto.UcUserFeedback) UcUserFeedbackEntitys {
	if src == nil {
		return UcUserFeedbackEntitys{}
	}

	Records := []FollowUpRecord{}
	for _, item := range src.Records {
		recordpictures := []string{}
		recordvideos := []string{}
		if item.Pictures != "" {
			recordpictures = strings.Split(item.Pictures, ",")
		}
		if item.Videos != "" {
			recordvideos = strings.Split(item.Videos, ",")
		}
		Records = append(Records, FollowUpRecord{
			Id:        item.Id,
			ReplyUser: item.ReplyUser,
			ReplyTime: iotutil.ToInt64(item.ReplyTime),
			Content:   item.Content,
			Pictures:  recordpictures,
			Videos:    recordvideos,
		})
	}
	pictures := []string{}
	videos := []string{}
	if src.Pictures != "" {
		pictures = strings.Split(src.Pictures, ",")
	}
	if src.Videos != "" {
		videos = strings.Split(src.Videos, ",")
	}
	entitysObj := UcUserFeedbackEntitys{
		Id:               iotutil.ToString(src.Id),
		UserId:           iotutil.ToString(src.UserId),
		ProductId:        iotutil.ToString(src.ProductId),
		FeedbackTime:     src.FeedbackTime.AsTime().Unix(),
		FeedbackContent:  src.FeedbackContent,
		Status:           src.Status,
		CreatedBy:        src.CreatedBy,
		UpdatedBy:        src.UpdatedBy,
		CreatedAt:        src.CreatedAt.AsTime().Unix(),
		Pictures:         pictures,
		Videos:           videos,
		Contact:          src.Contact,
		Did:              src.Did,
		ProductKey:       src.ProductKey,
		QuestionTypeId:   iotutil.ToString(src.QuestionTypeId),
		QuestionTypeName: src.QuestionTypeName,
		Records:          Records,
		AppVersion:       src.AppVersion,
		MobileLang:       src.MobileLang,
		MobileModel:      src.MobileModel,
		MobileSystem:     src.MobileSystem,
	}
	return entitysObj
}

// 反馈问题类型
type FeedBackQuestionType struct {
	Id   int64  `json:"id,string"`
	Name string `json:"name"`
}

// pb对象转实体
func FeedBackQuestionType_pb2e(lang string, src *proto.OemFeedbackType) *FeedBackQuestionType {
	entitysObj := FeedBackQuestionType{
		Id:   src.Id,
		Name: src.Name,
	}
	return &entitysObj
}
