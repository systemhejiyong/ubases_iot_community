// Code generated by sgen.exe,2022-08-10 22:26:35. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_statistics/model"
	"cloud_platform/iot_model/db_statistics/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_statistics_service/convert"
)

type AppUserMonthSvc struct {
	Ctx context.Context
}

// 创建AppUserMonth
func (s *AppUserMonthSvc) CreateAppUserMonth(req *proto.AppUserMonth) (*proto.AppUserMonth, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TAppUserMonth
	do := t.WithContext(context.Background())
	dbObj := convert.AppUserMonth_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateAppUserMonth error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除AppUserMonth
func (s *AppUserMonthSvc) DeleteAppUserMonth(req *proto.AppUserMonth) (*proto.AppUserMonth, error) {
	t := orm.Use(iotmodel.GetDB()).TAppUserMonth
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.RegisterSum != 0 { //整数
		do = do.Where(t.RegisterSum.Eq(req.RegisterSum))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteAppUserMonth error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除AppUserMonth
func (s *AppUserMonthSvc) DeleteByIdAppUserMonth(req *proto.AppUserMonth) (*proto.AppUserMonth, error) {
	t := orm.Use(iotmodel.GetDB()).TAppUserMonth
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdAppUserMonth error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除AppUserMonth
func (s *AppUserMonthSvc) DeleteByIdsAppUserMonth(req *proto.AppUserMonthBatchDeleteRequest) (*proto.AppUserMonthBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TAppUserMonth
		do := t.WithContext(context.Background())

		do = do.Where(t.DataTime.Eq(k.DataTime.AsTime()))

		do = do.Where(t.TenantId.Eq(k.TenantId))

		do = do.Where(t.AppKey.Eq(k.AppKey))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsAppUserMonth error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新AppUserMonth
func (s *AppUserMonthSvc) UpdateAppUserMonth(req *proto.AppUserMonth) (*proto.AppUserMonth, error) {
	t := orm.Use(iotmodel.GetDB()).TAppUserMonth
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.RegisterSum != 0 { //整数
		updateField = append(updateField, t.RegisterSum)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
		HasPrimaryKey = true
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateAppUserMonth error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.AppUserMonth_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAppUserMonth error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段AppUserMonth
func (s *AppUserMonthSvc) UpdateAllAppUserMonth(req *proto.AppUserMonth) (*proto.AppUserMonth, error) {
	t := orm.Use(iotmodel.GetDB()).TAppUserMonth
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.RegisterSum)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
		HasPrimaryKey = true
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllAppUserMonth error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.AppUserMonth_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllAppUserMonth error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *AppUserMonthSvc) UpdateFieldsAppUserMonth(req *proto.AppUserMonthUpdateFieldsRequest) (*proto.AppUserMonth, error) {
	t := orm.Use(iotmodel.GetDB()).TAppUserMonth
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsAppUserMonth error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.Data.TenantId))
		HasPrimaryKey = true
	}
	if req.Data.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.Data.AppKey))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsAppUserMonth error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.AppUserMonth_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsAppUserMonth error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找AppUserMonth
func (s *AppUserMonthSvc) FindAppUserMonth(req *proto.AppUserMonthFilter) (*proto.AppUserMonth, error) {
	t := orm.Use(iotmodel.GetDB()).TAppUserMonth
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.RegisterSum != 0 { //整数
		do = do.Where(t.RegisterSum.Eq(req.RegisterSum))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindAppUserMonth error : %s", err.Error())
		return nil, err
	}
	res := convert.AppUserMonth_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找AppUserMonth
func (s *AppUserMonthSvc) FindByIdAppUserMonth(req *proto.AppUserMonthFilter) (*proto.AppUserMonth, error) {
	t := orm.Use(iotmodel.GetDB()).TAppUserMonth
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdAppUserMonth error : %s", err.Error())
		return nil, err
	}
	res := convert.AppUserMonth_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找AppUserMonth,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *AppUserMonthSvc) GetListAppUserMonth(req *proto.AppUserMonthListRequest) ([]*proto.AppUserMonth, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TAppUserMonth
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Like("%" + query.TenantId + "%"))
		}
		if query.AppKey != "" { //字符串
			do = do.Where(t.AppKey.Like("%" + query.AppKey + "%"))
		}
		if query.RegisterSum != 0 { //整数
			do = do.Where(t.RegisterSum.Eq(query.RegisterSum))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.DataTime
		orderCol = t.TenantId
		orderCol = t.AppKey
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TAppUserMonth
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListAppUserMonth error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.AppUserMonth, len(list))
	for i, v := range list {
		result[i] = convert.AppUserMonth_db2pb(v)
	}
	return result, total, nil
}
