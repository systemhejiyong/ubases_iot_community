// Code generated by sgen.exe,2022-08-11 14:51:05. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_statistics/model"
	"cloud_platform/iot_model/db_statistics/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_statistics_service/convert"
)

type PmAppDataSvc struct {
	Ctx context.Context
}

// 创建PmAppData
func (s *PmAppDataSvc) CreatePmAppData(req *proto.PmAppData) (*proto.PmAppData, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TPmAppData
	do := t.WithContext(context.Background())
	dbObj := convert.PmAppData_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreatePmAppData error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除PmAppData
func (s *PmAppDataSvc) DeletePmAppData(req *proto.PmAppData) (*proto.PmAppData, error) {
	t := orm.Use(iotmodel.GetDB()).TPmAppData
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.AppName != "" { //字符串
		do = do.Where(t.AppName.Eq(req.AppName))
	}
	if req.LastVersion != "" { //字符串
		do = do.Where(t.LastVersion.Eq(req.LastVersion))
	}
	if req.DevAccount != "" { //字符串
		do = do.Where(t.DevAccount.Eq(req.DevAccount))
	}
	if req.RegisterUserSum != 0 { //整数
		do = do.Where(t.RegisterUserSum.Eq(req.RegisterUserSum))
	}
	if req.ActiveUserSum != 0 { //整数
		do = do.Where(t.ActiveUserSum.Eq(req.ActiveUserSum))
	}
	if req.VersionSum != 0 { //整数
		do = do.Where(t.VersionSum.Eq(req.VersionSum))
	}
	if req.FeedbackSum != 0 { //整数
		do = do.Where(t.FeedbackSum.Eq(req.FeedbackSum))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeletePmAppData error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除PmAppData
func (s *PmAppDataSvc) DeleteByIdPmAppData(req *proto.PmAppData) (*proto.PmAppData, error) {
	t := orm.Use(iotmodel.GetDB()).TPmAppData
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdPmAppData error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除PmAppData
func (s *PmAppDataSvc) DeleteByIdsPmAppData(req *proto.PmAppDataBatchDeleteRequest) (*proto.PmAppDataBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TPmAppData
		do := t.WithContext(context.Background())

		do = do.Where(t.AppId.Eq(k.AppId))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsPmAppData error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新PmAppData
func (s *PmAppDataSvc) UpdatePmAppData(req *proto.PmAppData) (*proto.PmAppData, error) {
	t := orm.Use(iotmodel.GetDB()).TPmAppData
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.AppKey != "" { //字符串
		updateField = append(updateField, t.AppKey)
	}
	if req.AppName != "" { //字符串
		updateField = append(updateField, t.AppName)
	}
	if req.LastVersion != "" { //字符串
		updateField = append(updateField, t.LastVersion)
	}
	if req.DevAccount != "" { //字符串
		updateField = append(updateField, t.DevAccount)
	}
	if req.RegisterUserSum != 0 { //整数
		updateField = append(updateField, t.RegisterUserSum)
	}
	if req.ActiveUserSum != 0 { //整数
		updateField = append(updateField, t.ActiveUserSum)
	}
	if req.VersionSum != 0 { //整数
		updateField = append(updateField, t.VersionSum)
	}
	if req.FeedbackSum != 0 { //整数
		updateField = append(updateField, t.FeedbackSum)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdatePmAppData error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.PmAppData_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdatePmAppData error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段PmAppData
func (s *PmAppDataSvc) UpdateAllPmAppData(req *proto.PmAppData) (*proto.PmAppData, error) {
	t := orm.Use(iotmodel.GetDB()).TPmAppData
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.AppKey)
	updateField = append(updateField, t.AppName)
	updateField = append(updateField, t.LastVersion)
	updateField = append(updateField, t.DevAccount)
	updateField = append(updateField, t.RegisterUserSum)
	updateField = append(updateField, t.ActiveUserSum)
	updateField = append(updateField, t.VersionSum)
	updateField = append(updateField, t.FeedbackSum)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllPmAppData error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.PmAppData_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllPmAppData error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *PmAppDataSvc) UpdateFieldsPmAppData(req *proto.PmAppDataUpdateFieldsRequest) (*proto.PmAppData, error) {
	t := orm.Use(iotmodel.GetDB()).TPmAppData
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsPmAppData error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.Data.AppId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsPmAppData error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.PmAppData_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsPmAppData error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找PmAppData
func (s *PmAppDataSvc) FindPmAppData(req *proto.PmAppDataFilter) (*proto.PmAppData, error) {
	t := orm.Use(iotmodel.GetDB()).TPmAppData
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.AppName != "" { //字符串
		do = do.Where(t.AppName.Eq(req.AppName))
	}
	if req.LastVersion != "" { //字符串
		do = do.Where(t.LastVersion.Eq(req.LastVersion))
	}
	if req.DevAccount != "" { //字符串
		do = do.Where(t.DevAccount.Eq(req.DevAccount))
	}
	if req.RegisterUserSum != 0 { //整数
		do = do.Where(t.RegisterUserSum.Eq(req.RegisterUserSum))
	}
	if req.ActiveUserSum != 0 { //整数
		do = do.Where(t.ActiveUserSum.Eq(req.ActiveUserSum))
	}
	if req.VersionSum != 0 { //整数
		do = do.Where(t.VersionSum.Eq(req.VersionSum))
	}
	if req.FeedbackSum != 0 { //整数
		do = do.Where(t.FeedbackSum.Eq(req.FeedbackSum))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindPmAppData error : %s", err.Error())
		return nil, err
	}
	res := convert.PmAppData_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找PmAppData
func (s *PmAppDataSvc) FindByIdPmAppData(req *proto.PmAppDataFilter) (*proto.PmAppData, error) {
	t := orm.Use(iotmodel.GetDB()).TPmAppData
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.AppId != 0 { //整数
		do = do.Where(t.AppId.Eq(req.AppId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdPmAppData error : %s", err.Error())
		return nil, err
	}
	res := convert.PmAppData_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找PmAppData,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *PmAppDataSvc) GetListPmAppData(req *proto.PmAppDataListRequest) ([]*proto.PmAppData, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TPmAppData
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.AppId != 0 { //整数
			do = do.Where(t.AppId.Eq(query.AppId))
		}
		if query.AppKey != "" { //字符串
			do = do.Where(t.AppKey.Like("%" + query.AppKey + "%"))
		}
		if query.AppName != "" { //字符串
			do = do.Where(t.AppName.Like("%" + query.AppName + "%"))
		}
		if query.LastVersion != "" { //字符串
			do = do.Where(t.LastVersion.Like("%" + query.LastVersion + "%"))
		}
		if query.DevAccount != "" { //字符串
			do = do.Where(t.DevAccount.Like("%" + query.DevAccount + "%"))
		}
		if query.RegisterUserSum != 0 { //整数
			do = do.Where(t.RegisterUserSum.Eq(query.RegisterUserSum))
		}
		if query.ActiveUserSum != 0 { //整数
			do = do.Where(t.ActiveUserSum.Eq(query.ActiveUserSum))
		}
		if query.VersionSum != 0 { //整数
			do = do.Where(t.VersionSum.Eq(query.VersionSum))
		}
		if query.FeedbackSum != 0 { //整数
			do = do.Where(t.FeedbackSum.Eq(query.FeedbackSum))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.AppId
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TPmAppData
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListPmAppData error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.PmAppData, len(list))
	for i, v := range list {
		result[i] = convert.PmAppData_db2pb(v)
	}
	return result, total, nil
}
