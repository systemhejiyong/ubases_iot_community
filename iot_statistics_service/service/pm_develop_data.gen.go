// Code generated by sgen.exe,2022-08-08 23:06:49. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_statistics/model"
	"cloud_platform/iot_model/db_statistics/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_statistics_service/convert"
)

type PmDevelopDataSvc struct {
	Ctx context.Context
}

// 创建PmDevelopData
func (s *PmDevelopDataSvc) CreatePmDevelopData(req *proto.PmDevelopData) (*proto.PmDevelopData, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TPmDevelopData
	do := t.WithContext(context.Background())
	dbObj := convert.PmDevelopData_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreatePmDevelopData error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除PmDevelopData
func (s *PmDevelopDataSvc) DeletePmDevelopData(req *proto.PmDevelopData) (*proto.PmDevelopData, error) {
	t := orm.Use(iotmodel.GetDB()).TPmDevelopData
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.DeviceSum != 0 { //整数
		do = do.Where(t.DeviceSum.Eq(req.DeviceSum))
	}
	if req.DeviceActiveSum != 0 { //整数
		do = do.Where(t.DeviceActiveSum.Eq(req.DeviceActiveSum))
	}
	if req.AppSum != 0 { //整数
		do = do.Where(t.AppSum.Eq(req.AppSum))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeletePmDevelopData error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除PmDevelopData
func (s *PmDevelopDataSvc) DeleteByIdPmDevelopData(req *proto.PmDevelopData) (*proto.PmDevelopData, error) {
	t := orm.Use(iotmodel.GetDB()).TPmDevelopData
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdPmDevelopData error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除PmDevelopData
func (s *PmDevelopDataSvc) DeleteByIdsPmDevelopData(req *proto.PmDevelopDataBatchDeleteRequest) (*proto.PmDevelopDataBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TPmDevelopData
		do := t.WithContext(context.Background())

		do = do.Where(t.TenantId.Eq(k.TenantId))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsPmDevelopData error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新PmDevelopData
func (s *PmDevelopDataSvc) UpdatePmDevelopData(req *proto.PmDevelopData) (*proto.PmDevelopData, error) {
	t := orm.Use(iotmodel.GetDB()).TPmDevelopData
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.DeviceSum != 0 { //整数
		updateField = append(updateField, t.DeviceSum)
	}
	if req.DeviceActiveSum != 0 { //整数
		updateField = append(updateField, t.DeviceActiveSum)
	}
	if req.AppSum != 0 { //整数
		updateField = append(updateField, t.AppSum)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdatePmDevelopData error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.PmDevelopData_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdatePmDevelopData error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段PmDevelopData
func (s *PmDevelopDataSvc) UpdateAllPmDevelopData(req *proto.PmDevelopData) (*proto.PmDevelopData, error) {
	t := orm.Use(iotmodel.GetDB()).TPmDevelopData
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.DeviceSum)
	updateField = append(updateField, t.DeviceActiveSum)
	updateField = append(updateField, t.AppSum)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllPmDevelopData error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.PmDevelopData_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllPmDevelopData error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *PmDevelopDataSvc) UpdateFieldsPmDevelopData(req *proto.PmDevelopDataUpdateFieldsRequest) (*proto.PmDevelopData, error) {
	t := orm.Use(iotmodel.GetDB()).TPmDevelopData
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsPmDevelopData error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.Data.TenantId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsPmDevelopData error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.PmDevelopData_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsPmDevelopData error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找PmDevelopData
func (s *PmDevelopDataSvc) FindPmDevelopData(req *proto.PmDevelopDataFilter) (*proto.PmDevelopData, error) {
	t := orm.Use(iotmodel.GetDB()).TPmDevelopData
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.DeviceSum != 0 { //整数
		do = do.Where(t.DeviceSum.Eq(req.DeviceSum))
	}
	if req.DeviceActiveSum != 0 { //整数
		do = do.Where(t.DeviceActiveSum.Eq(req.DeviceActiveSum))
	}
	if req.AppSum != 0 { //整数
		do = do.Where(t.AppSum.Eq(req.AppSum))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindPmDevelopData error : %s", err.Error())
		return nil, err
	}
	res := convert.PmDevelopData_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找PmDevelopData
func (s *PmDevelopDataSvc) FindByIdPmDevelopData(req *proto.PmDevelopDataFilter) (*proto.PmDevelopData, error) {
	t := orm.Use(iotmodel.GetDB()).TPmDevelopData
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdPmDevelopData error : %s", err.Error())
		return nil, err
	}
	res := convert.PmDevelopData_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找PmDevelopData,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *PmDevelopDataSvc) GetListPmDevelopData(req *proto.PmDevelopDataListRequest) ([]*proto.PmDevelopData, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TPmDevelopData
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Like("%" + query.TenantId + "%"))
		}
		if query.DeviceSum != 0 { //整数
			do = do.Where(t.DeviceSum.Eq(query.DeviceSum))
		}
		if query.DeviceActiveSum != 0 { //整数
			do = do.Where(t.DeviceActiveSum.Eq(query.DeviceActiveSum))
		}
		if query.AppSum != 0 { //整数
			do = do.Where(t.AppSum.Eq(query.AppSum))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.TenantId
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TPmDevelopData
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListPmDevelopData error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.PmDevelopData, len(list))
	for i, v := range list {
		result[i] = convert.PmDevelopData_db2pb(v)
	}
	return result, total, nil
}
