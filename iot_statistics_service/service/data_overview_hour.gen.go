// Code generated by sgen.exe,2022-06-17 09:58:13. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_statistics_service/config"
	"context"
	"errors"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_statistics/model"
	"cloud_platform/iot_model/db_statistics/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_statistics_service/convert"
)

type DataOverviewHourSvc struct {
	Ctx context.Context
}

// 创建DataOverviewHour
func (s *DataOverviewHourSvc) CreateDataOverviewHour(req *proto.DataOverviewHour) (*proto.DataOverviewHour, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TDataOverviewHour
	do := t.WithContext(context.Background())
	dbObj := convert.DataOverviewHour_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateDataOverviewHour error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除DataOverviewHour
func (s *DataOverviewHourSvc) DeleteDataOverviewHour(req *proto.DataOverviewHour) (*proto.DataOverviewHour, error) {
	t := orm.Use(iotmodel.GetDB()).TDataOverviewHour
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.DeviceActiveSum != 0 { //整数
		do = do.Where(t.DeviceActiveSum.Eq(req.DeviceActiveSum))
	}
	if req.DeviceFaultSum != 0 { //整数
		do = do.Where(t.DeviceFaultSum.Eq(req.DeviceFaultSum))
	}
	if req.DeveloperRegisterSum != 0 { //整数
		do = do.Where(t.DeveloperRegisterSum.Eq(req.DeveloperRegisterSum))
	}
	if req.UserRegisterSum != 0 { //整数
		do = do.Where(t.UserRegisterSum.Eq(req.UserRegisterSum))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteDataOverviewHour error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除DataOverviewHour
func (s *DataOverviewHourSvc) DeleteByIdDataOverviewHour(req *proto.DataOverviewHour) (*proto.DataOverviewHour, error) {
	t := orm.Use(iotmodel.GetDB()).TDataOverviewHour
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdDataOverviewHour error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除DataOverviewHour
func (s *DataOverviewHourSvc) DeleteByIdsDataOverviewHour(req *proto.DataOverviewHourBatchDeleteRequest) (*proto.DataOverviewHourBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TDataOverviewHour
		do := t.WithContext(context.Background())

		do = do.Where(t.DataTime.Eq(k.DataTime.AsTime()))

		do = do.Where(t.TenantId.Eq(k.TenantId))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsDataOverviewHour error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新DataOverviewHour
func (s *DataOverviewHourSvc) UpdateDataOverviewHour(req *proto.DataOverviewHour) (*proto.DataOverviewHour, error) {
	t := orm.Use(iotmodel.GetDB()).TDataOverviewHour
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.DeviceActiveSum != 0 { //整数
		updateField = append(updateField, t.DeviceActiveSum)
	}
	if req.DeviceFaultSum != 0 { //整数
		updateField = append(updateField, t.DeviceFaultSum)
	}
	if req.DeveloperRegisterSum != 0 { //整数
		updateField = append(updateField, t.DeveloperRegisterSum)
	}
	if req.UserRegisterSum != 0 { //整数
		updateField = append(updateField, t.UserRegisterSum)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateDataOverviewHour error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.DataOverviewHour_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateDataOverviewHour error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段DataOverviewHour
func (s *DataOverviewHourSvc) UpdateAllDataOverviewHour(req *proto.DataOverviewHour) (*proto.DataOverviewHour, error) {
	t := orm.Use(iotmodel.GetDB()).TDataOverviewHour
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.DeviceActiveSum)
	updateField = append(updateField, t.DeviceFaultSum)
	updateField = append(updateField, t.DeveloperRegisterSum)
	updateField = append(updateField, t.UserRegisterSum)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllDataOverviewHour error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.DataOverviewHour_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllDataOverviewHour error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *DataOverviewHourSvc) UpdateFieldsDataOverviewHour(req *proto.DataOverviewHourUpdateFieldsRequest) (*proto.DataOverviewHour, error) {
	t := orm.Use(iotmodel.GetDB()).TDataOverviewHour
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsDataOverviewHour error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.Data.TenantId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsDataOverviewHour error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.DataOverviewHour_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsDataOverviewHour error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找DataOverviewHour
func (s *DataOverviewHourSvc) FindDataOverviewHour(req *proto.DataOverviewHourFilter) (*proto.DataOverviewHour, error) {
	t := orm.Use(iotmodel.GetDB()).TDataOverviewHour
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.DeviceActiveSum != 0 { //整数
		do = do.Where(t.DeviceActiveSum.Eq(req.DeviceActiveSum))
	}
	if req.DeviceFaultSum != 0 { //整数
		do = do.Where(t.DeviceFaultSum.Eq(req.DeviceFaultSum))
	}
	if req.DeveloperRegisterSum != 0 { //整数
		do = do.Where(t.DeveloperRegisterSum.Eq(req.DeveloperRegisterSum))
	}
	if req.UserRegisterSum != 0 { //整数
		do = do.Where(t.UserRegisterSum.Eq(req.UserRegisterSum))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindDataOverviewHour error : %s", err.Error())
		return nil, err
	}
	res := convert.DataOverviewHour_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找DataOverviewHour
func (s *DataOverviewHourSvc) FindByIdDataOverviewHour(req *proto.DataOverviewHourFilter) (*proto.DataOverviewHour, error) {
	t := orm.Use(iotmodel.GetDB()).TDataOverviewHour
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdDataOverviewHour error : %s", err.Error())
		return nil, err
	}
	res := convert.DataOverviewHour_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找DataOverviewHour,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *DataOverviewHourSvc) GetListDataOverviewHour(req *proto.DataOverviewHourListRequest) ([]*proto.DataOverviewHour, int64, error) {
	// fixme 请检查条件和校验参数
	db, ok := config.DBMap["iot_statistics"]
	if !ok {
		return nil, 0, errors.New("数据库未初始化")
	}
	var err error
	t := orm.Use(db).TDataOverviewHour
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {
		do = do.Where(t.TenantId.Eq(query.TenantId))
		if query.StartTime != nil {
			do = do.Where(t.DataTime.Gte(query.StartTime.AsTime()))
		}
		if query.EndTime != nil {
			do = do.Where(t.DataTime.Lte(query.EndTime.AsTime()))
		} else {
			do = do.Where(t.DataTime.Lte(time.Now()))
		}
	} else {
		return nil, 0, errors.New("缺查询条件")
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.DataTime
		orderCol = t.TenantId
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TDataOverviewHour
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListDataOverviewHour error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.DataOverviewHour, 0, len(list)+1)
	for _, v := range list {
		result = append(result, convert.DataOverviewHour_db2pb(v))
	}
	if totalObj, err := s.GetDataOverviewTotayTotal(query.TenantId, query.StartTime.AsTime(), query.EndTime.AsTime()); err != nil {
		return nil, 0, errors.New("查询总计失败")
	} else {
		result = append(result, totalObj)
	}
	return result, total, nil
}

func (s *DataOverviewHourSvc) GetDataOverviewTotayTotal(tenantId string, start, end time.Time) (*proto.DataOverviewHour, error) {
	db, ok := config.DBMap["iot_statistics"]
	if !ok {
		return nil, errors.New("数据库未初始化")
	}
	if start.IsZero() {
		start = iotutil.New(time.Now()).BeginningOfDay()
	}
	if end.IsZero() {
		end = iotutil.New(time.Now()).BeginningOfHour()
	}
	var err error
	t := orm.Use(db).TDataOverviewHour
	do := t.WithContext(context.Background())

	do = do.Select(t.DeviceActiveSum.Sum().IfNull(0).As("device_active_sum"), t.DeviceFaultSum.Sum().IfNull(0).As("device_fault_sum"),
		t.DeveloperRegisterSum.Sum().IfNull(0).As("developer_register_sum"), t.UserRegisterSum.Sum().IfNull(0).As("user_register_sum"))
	var scanObj TotalStruct
	err = do.Where(t.TenantId.Eq(tenantId), t.DataTime.Gte(start), t.DataTime.Lte(end)).Scan(&scanObj)
	if err != nil {
		return nil, err
	}

	var totalObj proto.DataOverviewHour
	totalObj.DataTime = timestamppb.New(time.Time{})
	totalObj.DeviceActiveSum = scanObj.DeviceActiveSum
	totalObj.DeviceFaultSum = scanObj.DeviceFaultSum
	totalObj.UserRegisterSum = scanObj.UserRegisterSum
	totalObj.DeveloperRegisterSum = scanObj.DeveloperRegisterSum

	return &totalObj, nil
}
