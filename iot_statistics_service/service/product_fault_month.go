// Code generated by sgen.exe,2022-08-03 19:34:57. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_model/db_statistics/model"
	"cloud_platform/iot_model/db_statistics/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_statistics_service/config"
	"cloud_platform/iot_statistics_service/convert"

	"google.golang.org/protobuf/types/known/timestamppb"
)

type ProductFaultMonthSvc struct {
	Ctx context.Context
}

// 创建ProductFaultMonth
func (s *ProductFaultMonthSvc) CreateProductFaultMonth(req *proto.ProductFaultMonth) (*proto.ProductFaultMonth, error) {
	// fixme 请在这里校验参数
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultMonth
	do := t.WithContext(context.Background())
	dbObj := convert.ProductFaultMonth_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateProductFaultMonth error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除ProductFaultMonth
func (s *ProductFaultMonthSvc) DeleteProductFaultMonth(req *proto.ProductFaultMonth) (*proto.ProductFaultMonth, error) {
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultMonth
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.Total != 0 { //整数
		do = do.Where(t.Total.Eq(req.Total))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteProductFaultMonth error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除ProductFaultMonth
func (s *ProductFaultMonthSvc) DeleteByIdProductFaultMonth(req *proto.ProductFaultMonth) (*proto.ProductFaultMonth, error) {
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultMonth
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdProductFaultMonth error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除ProductFaultMonth
func (s *ProductFaultMonthSvc) DeleteByIdsProductFaultMonth(req *proto.ProductFaultMonthBatchDeleteRequest) (*proto.ProductFaultMonthBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultMonth
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsProductFaultMonth error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新ProductFaultMonth
func (s *ProductFaultMonthSvc) UpdateProductFaultMonth(req *proto.ProductFaultMonth) (*proto.ProductFaultMonth, error) {
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultMonth
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.ProductKey != "" { //字符串
		updateField = append(updateField, t.ProductKey)
	}
	if req.Total != 0 { //整数
		updateField = append(updateField, t.Total)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateProductFaultMonth error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.ProductFaultMonth_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateProductFaultMonth error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段ProductFaultMonth
func (s *ProductFaultMonthSvc) UpdateAllProductFaultMonth(req *proto.ProductFaultMonth) (*proto.ProductFaultMonth, error) {
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultMonth
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.ProductKey)
	updateField = append(updateField, t.Month)
	updateField = append(updateField, t.Total)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllProductFaultMonth error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.ProductFaultMonth_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllProductFaultMonth error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *ProductFaultMonthSvc) UpdateFieldsProductFaultMonth(req *proto.ProductFaultMonthUpdateFieldsRequest) (*proto.ProductFaultMonth, error) {
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultMonth
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsProductFaultMonth error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsProductFaultMonth error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.ProductFaultMonth_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsProductFaultMonth error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找ProductFaultMonth
func (s *ProductFaultMonthSvc) FindProductFaultMonth(req *proto.ProductFaultMonthFilter) (*proto.ProductFaultMonth, error) {
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultMonth
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.Total != 0 { //整数
		do = do.Where(t.Total.Eq(req.Total))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindProductFaultMonth error : %s", err.Error())
		return nil, err
	}
	res := convert.ProductFaultMonth_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找ProductFaultMonth
func (s *ProductFaultMonthSvc) FindByIdProductFaultMonth(req *proto.ProductFaultMonthFilter) (*proto.ProductFaultMonth, error) {
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultMonth
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdProductFaultMonth error : %s", err.Error())
		return nil, err
	}
	res := convert.ProductFaultMonth_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找ProductFaultMonth,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *ProductFaultMonthSvc) GetListProductFaultMonth(req *proto.ProductFaultMonthListRequest) ([]*proto.ProductFaultMonth, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultMonth
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.ProductKey != "" { //字符串
			do = do.Where(t.ProductKey.Like("%" + query.ProductKey + "%"))
		}
		if query.Total != 0 { //整数
			do = do.Where(t.Total.Eq(query.Total))
		}
	}
	endTime, _ := iotutil.GetMouthStartAndEndTime()
	startTime := endTime.AddDate(0, -12, 0)
	do = do.Where(t.Month.Gte(startTime), t.Month.Lt(endTime))
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TProductFaultMonth
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListProductFaultMonth error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.ProductFaultMonth, len(list))
	for i, v := range list {
		result[i] = convert.ProductFaultMonth_db2pb(v)
	}
	return result, total, nil
}

// 根据分页条件查找ProductFaultMonth,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *ProductFaultMonthSvc) GetProductFaultMonthList(req *proto.ProductFaultMonthListRequest) ([]*proto.ProductFaultMonth, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultMonth
	var total int64
	result := make([]*proto.ProductFaultMonth, 0)
	nowTime := &iotutil.Now{
		Time: time.Now(),
	}
	nowMonth := nowTime.BeginningOfMonth()
	for i := 12; i > 0; i-- {
		do := t.WithContext(context.Background())
		query := req.Query
		if query != nil {
			if query.ProductKey != "" { //字符串
				do = do.Where(t.ProductKey.Like("%" + query.ProductKey + "%"))
			}
		}
		start := nowMonth.AddDate(0, -i+1, 0)
		end := start.AddDate(0, 1, 0)
		do = do.Select(t.ProductKey, t.Total.Sum().IfNull(0).As("total")).Where(t.Month.Gte(start), t.Month.Lt(end)).Group(t.ProductKey)
		list, err := do.Find()
		if err != nil {
			return nil, total, err
		}
		if len(list) != 0 {
			for _, v := range list {
				result = append(result, &proto.ProductFaultMonth{
					ProductKey: query.ProductKey,
					Month:      timestamppb.New(start),
					Total:      v.Total,
				})
				total += v.Total
			}
		} else {
			result = append(result, &proto.ProductFaultMonth{
				ProductKey: query.ProductKey,
				Month:      timestamppb.New(start),
				Total:      0,
			})
		}
	}
	if err != nil {
		logger.Errorf("GetProductFaultMonthList error : %s", err.Error())
		return nil, 0, err
	}
	return result, total, nil
}
