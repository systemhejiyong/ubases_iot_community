// Code generated by sgen.exe,2022-08-03 19:35:11. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_model/db_statistics/model"
	"cloud_platform/iot_model/db_statistics/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_statistics_service/config"
	"cloud_platform/iot_statistics_service/convert"
)

type ProductFaultTypeSvc struct {
	Ctx context.Context
}

// 创建ProductFaultType
func (s *ProductFaultTypeSvc) CreateProductFaultType(req *proto.ProductFaultType) (*proto.ProductFaultType, error) {
	// fixme 请在这里校验参数
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultType
	do := t.WithContext(context.Background())
	dbObj := convert.ProductFaultType_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateProductFaultType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除ProductFaultType
func (s *ProductFaultTypeSvc) DeleteProductFaultType(req *proto.ProductFaultType) (*proto.ProductFaultType, error) {
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultType
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.FaultType != "" { //字符串
		do = do.Where(t.FaultType.Eq(req.FaultType))
	}
	if req.Total != 0 { //整数
		do = do.Where(t.Total.Eq(req.Total))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteProductFaultType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除ProductFaultType
func (s *ProductFaultTypeSvc) DeleteByIdProductFaultType(req *proto.ProductFaultType) (*proto.ProductFaultType, error) {
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultType
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdProductFaultType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除ProductFaultType
func (s *ProductFaultTypeSvc) DeleteByIdsProductFaultType(req *proto.ProductFaultTypeBatchDeleteRequest) (*proto.ProductFaultTypeBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultType
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsProductFaultType error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新ProductFaultType
func (s *ProductFaultTypeSvc) UpdateProductFaultType(req *proto.ProductFaultType) (*proto.ProductFaultType, error) {
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultType
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.ProductKey != "" { //字符串
		updateField = append(updateField, t.ProductKey)
	}
	if req.FaultType != "" { //字符串
		updateField = append(updateField, t.FaultType)
	}
	if req.Total != 0 { //整数
		updateField = append(updateField, t.Total)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateProductFaultType error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.ProductFaultType_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateProductFaultType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段ProductFaultType
func (s *ProductFaultTypeSvc) UpdateAllProductFaultType(req *proto.ProductFaultType) (*proto.ProductFaultType, error) {
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultType
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.ProductKey)
	updateField = append(updateField, t.Month)
	updateField = append(updateField, t.FaultType)
	updateField = append(updateField, t.Total)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllProductFaultType error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.ProductFaultType_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllProductFaultType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *ProductFaultTypeSvc) UpdateFieldsProductFaultType(req *proto.ProductFaultTypeUpdateFieldsRequest) (*proto.ProductFaultType, error) {
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultType
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsProductFaultType error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsProductFaultType error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.ProductFaultType_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsProductFaultType error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找ProductFaultType
func (s *ProductFaultTypeSvc) FindProductFaultType(req *proto.ProductFaultTypeFilter) (*proto.ProductFaultType, error) {
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultType
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.FaultType != "" { //字符串
		do = do.Where(t.FaultType.Eq(req.FaultType))
	}
	if req.Total != 0 { //整数
		do = do.Where(t.Total.Eq(req.Total))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindProductFaultType error : %s", err.Error())
		return nil, err
	}
	res := convert.ProductFaultType_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找ProductFaultType
func (s *ProductFaultTypeSvc) FindByIdProductFaultType(req *proto.ProductFaultTypeFilter) (*proto.ProductFaultType, error) {
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultType
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdProductFaultType error : %s", err.Error())
		return nil, err
	}
	res := convert.ProductFaultType_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找ProductFaultType,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *ProductFaultTypeSvc) GetListProductFaultType(req *proto.ProductFaultTypeListRequest) ([]*proto.ProductFaultType, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(config.DBMap["iot_statistics"]).TProductFaultType
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.ProductKey != "" { //字符串
			do = do.Where(t.ProductKey.Like("%" + query.ProductKey + "%"))
		}
		if query.FaultType != "" { //字符串
			do = do.Where(t.FaultType.Like("%" + query.FaultType + "%"))
		}
		if query.Total != 0 { //整数
			do = do.Where(t.Total.Eq(query.Total))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TProductFaultType
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListProductFaultType error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.ProductFaultType, len(list))
	for i, v := range list {
		result[i] = convert.ProductFaultType_db2pb(v)
	}
	return result, total, nil
}

// 根据分页条件查找ProductFaultType,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *ProductFaultTypeSvc) GetProductFaultTypeList(req *proto.ProductFaultTypeListRequest) ([]*proto.ProductFaultType, int64, error) {
	// fixme 请检查条件和校验参数
	dbStatis, ok := config.DBMap["iot_statistics"]
	if !ok {
		return nil, 0, errors.New("get iot statistics db failed")
	}
	rows, err := dbStatis.Debug().Table("t_product_fault_type").Select("fault_type, sum(total) AS total").Where("product_key = ?", req.Query.ProductKey).Group("fault_type").Rows()
	if err != nil {
		return nil, 0, errors.New("get iot statistics db failed")
	}
	var list []*model.TProductFaultType
	var total int64
	for rows.Next() {
		dd := struct {
			FaultType string `json:"fault_type"`
			Total     int64  `json:"total"`
		}{}
		if err := rows.Scan(&dd.FaultType, &dd.Total); err != nil {
			return nil, 0, err
		}
		data := &model.TProductFaultType{
			FaultType: dd.FaultType,
			Total:     dd.Total,
		}
		total += dd.Total
		list = append(list, data)
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.ProductFaultType, len(list))
	for i, v := range list {
		result[i] = convert.ProductFaultType_db2pb(v)
	}
	return result, total, nil
}
