// Code generated by sgen.exe,2022-05-20 13:36:04. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_intelligence_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_device/model"
	"cloud_platform/iot_model/db_device/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type SceneIntelligenceTaskSvc struct {
	Ctx context.Context
}

// 创建SceneIntelligenceTask
func (s *SceneIntelligenceTaskSvc) CreateSceneIntelligenceTask(req *proto.SceneIntelligenceTask) (*proto.SceneIntelligenceTask, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceTask
	do := t.WithContext(context.Background())
	dbObj := convert.SceneIntelligenceTask_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateSceneIntelligenceTask error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除SceneIntelligenceTask
func (s *SceneIntelligenceTaskSvc) DeleteSceneIntelligenceTask(req *proto.SceneIntelligenceTask) (*proto.SceneIntelligenceTask, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceTask
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.IntelligenceId != 0 { //整数
		do = do.Where(t.IntelligenceId.Eq(req.IntelligenceId))
	}
	if req.TaskImg != "" { //字符串
		do = do.Where(t.TaskImg.Eq(req.TaskImg))
	}
	if req.TaskDesc != "" { //字符串
		do = do.Where(t.TaskDesc.Eq(req.TaskDesc))
	}
	if req.TaskType != 0 { //整数
		do = do.Where(t.TaskType.Eq(req.TaskType))
	}
	if req.ObjectId != "" { //字符串
		do = do.Where(t.ObjectId.Eq(req.ObjectId))
	}
	if req.ObjectDesc != "" { //字符串
		do = do.Where(t.ObjectDesc.Eq(req.ObjectDesc))
	}
	if req.FuncKey != "" { //字符串
		do = do.Where(t.FuncKey.Eq(req.FuncKey))
	}
	if req.FuncDesc != "" { //字符串
		do = do.Where(t.FuncDesc.Eq(req.FuncDesc))
	}
	if req.FuncValue != "" { //字符串
		do = do.Where(t.FuncValue.Eq(req.FuncValue))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteSceneIntelligenceTask error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除SceneIntelligenceTask
func (s *SceneIntelligenceTaskSvc) DeleteByIdSceneIntelligenceTask(req *proto.SceneIntelligenceTask) (*proto.SceneIntelligenceTask, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceTask
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdSceneIntelligenceTask error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除SceneIntelligenceTask
func (s *SceneIntelligenceTaskSvc) DeleteByIdsSceneIntelligenceTask(req *proto.SceneIntelligenceTaskBatchDeleteRequest) (*proto.SceneIntelligenceTaskBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceTask
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsSceneIntelligenceTask error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新SceneIntelligenceTask
func (s *SceneIntelligenceTaskSvc) UpdateSceneIntelligenceTask(req *proto.SceneIntelligenceTask) (*proto.SceneIntelligenceTask, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceTask
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.IntelligenceId != 0 { //整数
		updateField = append(updateField, t.IntelligenceId)
	}
	if req.TaskImg != "" { //字符串
		updateField = append(updateField, t.TaskImg)
	}
	if req.TaskDesc != "" { //字符串
		updateField = append(updateField, t.TaskDesc)
	}
	if req.TaskType != 0 { //整数
		updateField = append(updateField, t.TaskType)
	}
	if req.ObjectId != "" { //字符串
		updateField = append(updateField, t.ObjectId)
	}
	if req.ObjectDesc != "" { //字符串
		updateField = append(updateField, t.ObjectDesc)
	}
	if req.FuncKey != "" { //字符串
		updateField = append(updateField, t.FuncKey)
	}
	if req.FuncDesc != "" { //字符串
		updateField = append(updateField, t.FuncDesc)
	}
	if req.FuncValue != "" { //字符串
		updateField = append(updateField, t.FuncValue)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateSceneIntelligenceTask error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.SceneIntelligenceTask_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateSceneIntelligenceTask error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段SceneIntelligenceTask
func (s *SceneIntelligenceTaskSvc) UpdateAllSceneIntelligenceTask(req *proto.SceneIntelligenceTask) (*proto.SceneIntelligenceTask, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceTask
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.IntelligenceId)
	updateField = append(updateField, t.TaskImg)
	updateField = append(updateField, t.TaskDesc)
	updateField = append(updateField, t.TaskType)
	updateField = append(updateField, t.ObjectId)
	updateField = append(updateField, t.ObjectDesc)
	updateField = append(updateField, t.FuncKey)
	updateField = append(updateField, t.FuncDesc)
	updateField = append(updateField, t.FuncValue)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllSceneIntelligenceTask error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SceneIntelligenceTask_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllSceneIntelligenceTask error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *SceneIntelligenceTaskSvc) UpdateFieldsSceneIntelligenceTask(req *proto.SceneIntelligenceTaskUpdateFieldsRequest) (*proto.SceneIntelligenceTask, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceTask
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsSceneIntelligenceTask error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsSceneIntelligenceTask error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SceneIntelligenceTask_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsSceneIntelligenceTask error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找SceneIntelligenceTask
func (s *SceneIntelligenceTaskSvc) FindSceneIntelligenceTask(req *proto.SceneIntelligenceTaskFilter) (*proto.SceneIntelligenceTask, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceTask
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.IntelligenceId != 0 { //整数
		do = do.Where(t.IntelligenceId.Eq(req.IntelligenceId))
	}
	if req.TaskImg != "" { //字符串
		do = do.Where(t.TaskImg.Eq(req.TaskImg))
	}
	if req.TaskDesc != "" { //字符串
		do = do.Where(t.TaskDesc.Eq(req.TaskDesc))
	}
	if req.TaskType != 0 { //整数
		do = do.Where(t.TaskType.Eq(req.TaskType))
	}
	if req.ObjectId != "" { //字符串
		do = do.Where(t.ObjectId.Eq(req.ObjectId))
	}
	if req.ObjectDesc != "" { //字符串
		do = do.Where(t.ObjectDesc.Eq(req.ObjectDesc))
	}
	if req.FuncKey != "" { //字符串
		do = do.Where(t.FuncKey.Eq(req.FuncKey))
	}
	if req.FuncDesc != "" { //字符串
		do = do.Where(t.FuncDesc.Eq(req.FuncDesc))
	}
	if req.FuncValue != "" { //字符串
		do = do.Where(t.FuncValue.Eq(req.FuncValue))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindSceneIntelligenceTask error : %s", err.Error())
		return nil, err
	}
	res := convert.SceneIntelligenceTask_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找SceneIntelligenceTask
func (s *SceneIntelligenceTaskSvc) FindByIdSceneIntelligenceTask(req *proto.SceneIntelligenceTaskFilter) (*proto.SceneIntelligenceTask, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceTask
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdSceneIntelligenceTask error : %s", err.Error())
		return nil, err
	}
	res := convert.SceneIntelligenceTask_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找SceneIntelligenceTask,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *SceneIntelligenceTaskSvc) GetListSceneIntelligenceTask(req *proto.SceneIntelligenceTaskListRequest) ([]*proto.SceneIntelligenceTask, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceTask
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.IntelligenceId != 0 { //整数
			do = do.Where(t.IntelligenceId.Eq(query.IntelligenceId))
		}
		if query.TaskImg != "" { //字符串
			do = do.Where(t.TaskImg.Like("%" + query.TaskImg + "%"))
		}
		if query.TaskDesc != "" { //字符串
			do = do.Where(t.TaskDesc.Like("%" + query.TaskDesc + "%"))
		}
		if query.TaskType != 0 { //整数
			do = do.Where(t.TaskType.Eq(query.TaskType))
		}
		if query.ObjectId != "" { //字符串
			do = do.Where(t.ObjectId.Like("%" + query.ObjectId + "%"))
		}
		if query.ObjectDesc != "" { //字符串
			do = do.Where(t.ObjectDesc.Like("%" + query.ObjectDesc + "%"))
		}
		if query.FuncKey != "" { //字符串
			do = do.Where(t.FuncKey.Like("%" + query.FuncKey + "%"))
		}
		if query.FuncDesc != "" { //字符串
			do = do.Where(t.FuncDesc.Like("%" + query.FuncDesc + "%"))
		}
		if query.FuncValue != "" { //字符串
			do = do.Where(t.FuncValue.Like("%" + query.FuncValue + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.Sort)
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*model.TSceneIntelligenceTask
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListSceneIntelligenceTask error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.SceneIntelligenceTask, len(list))
	for i, v := range list {
		result[i] = convert.SceneIntelligenceTask_db2pb(v)
	}
	return result, total, nil
}
