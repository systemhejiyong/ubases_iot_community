// Code generated by sgen.exe,2022-11-11 13:37:03. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_intelligence_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_device/model"
	"cloud_platform/iot_model/db_device/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type SceneTemplateConditionSvc struct {
	Ctx context.Context
}

// 创建SceneTemplateCondition
func (s *SceneTemplateConditionSvc) CreateSceneTemplateCondition(req *proto.SceneTemplateCondition) (*proto.SceneTemplateCondition, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TSceneTemplateCondition
	do := t.WithContext(context.Background())
	dbObj := convert.SceneTemplateCondition_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateSceneTemplateCondition error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除SceneTemplateCondition
func (s *SceneTemplateConditionSvc) DeleteSceneTemplateCondition(req *proto.SceneTemplateCondition) (*proto.SceneTemplateCondition, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneTemplateCondition
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.SceneTemplateId != 0 { //整数
		do = do.Where(t.SceneTemplateId.Eq(req.SceneTemplateId))
	}
	if req.ConditionType != 0 { //整数
		do = do.Where(t.ConditionType.Eq(req.ConditionType))
	}
	if req.Desc != "" { //字符串
		do = do.Where(t.Desc.Eq(req.Desc))
	}
	if req.WeatherType != 0 { //整数
		do = do.Where(t.WeatherType.Eq(req.WeatherType))
	}
	if req.WeatherValue != "" { //字符串
		do = do.Where(t.WeatherValue.Eq(req.WeatherValue))
	}
	if req.WeatherCompare != 0 { //整数
		do = do.Where(t.WeatherCompare.Eq(req.WeatherCompare))
	}
	if req.TimerWeeks != "" { //字符串
		do = do.Where(t.TimerWeeks.Eq(req.TimerWeeks))
	}
	if req.TimerValue != "" { //字符串
		do = do.Where(t.TimerValue.Eq(req.TimerValue))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.Functions != "" { //字符串
		do = do.Where(t.Functions.Eq(req.Functions))
	}
	if req.FuncKey != "" { //字符串
		do = do.Where(t.FuncKey.Eq(req.FuncKey))
	}
	if req.FuncCompare != 0 { //整数
		do = do.Where(t.FuncCompare.Eq(req.FuncCompare))
	}
	if req.FuncValue != "" { //字符串
		do = do.Where(t.FuncValue.Eq(req.FuncValue))
	}
	if req.Sort != 0 { //整数
		do = do.Where(t.Sort.Eq(req.Sort))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteSceneTemplateCondition error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除SceneTemplateCondition
func (s *SceneTemplateConditionSvc) DeleteByIdSceneTemplateCondition(req *proto.SceneTemplateCondition) (*proto.SceneTemplateCondition, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneTemplateCondition
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdSceneTemplateCondition error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除SceneTemplateCondition
func (s *SceneTemplateConditionSvc) DeleteByIdsSceneTemplateCondition(req *proto.SceneTemplateConditionBatchDeleteRequest) (*proto.SceneTemplateConditionBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TSceneTemplateCondition
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsSceneTemplateCondition error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新SceneTemplateCondition
func (s *SceneTemplateConditionSvc) UpdateSceneTemplateCondition(req *proto.SceneTemplateCondition) (*proto.SceneTemplateCondition, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneTemplateCondition
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.SceneTemplateId != 0 { //整数
		updateField = append(updateField, t.SceneTemplateId)
	}
	if req.ConditionType != 0 { //整数
		updateField = append(updateField, t.ConditionType)
	}
	if req.Desc != "" { //字符串
		updateField = append(updateField, t.Desc)
	}
	if req.WeatherType != 0 { //整数
		updateField = append(updateField, t.WeatherType)
	}
	if req.WeatherValue != "" { //字符串
		updateField = append(updateField, t.WeatherValue)
	}
	if req.WeatherCompare != 0 { //整数
		updateField = append(updateField, t.WeatherCompare)
	}
	if req.TimerWeeks != "" { //字符串
		updateField = append(updateField, t.TimerWeeks)
	}
	if req.TimerValue != "" { //字符串
		updateField = append(updateField, t.TimerValue)
	}
	if req.ProductId != 0 { //整数
		updateField = append(updateField, t.ProductId)
	}
	if req.ProductKey != "" { //字符串
		updateField = append(updateField, t.ProductKey)
	}
	if req.Functions != "" { //字符串
		updateField = append(updateField, t.Functions)
	}
	if req.FuncKey != "" { //字符串
		updateField = append(updateField, t.FuncKey)
	}
	if req.FuncCompare != 0 { //整数
		updateField = append(updateField, t.FuncCompare)
	}
	if req.FuncValue != "" { //字符串
		updateField = append(updateField, t.FuncValue)
	}
	if req.Sort != 0 { //整数
		updateField = append(updateField, t.Sort)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateSceneTemplateCondition error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.SceneTemplateCondition_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateSceneTemplateCondition error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段SceneTemplateCondition
func (s *SceneTemplateConditionSvc) UpdateAllSceneTemplateCondition(req *proto.SceneTemplateCondition) (*proto.SceneTemplateCondition, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneTemplateCondition
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.SceneTemplateId)
	updateField = append(updateField, t.ConditionType)
	updateField = append(updateField, t.Desc)
	updateField = append(updateField, t.WeatherType)
	updateField = append(updateField, t.WeatherValue)
	updateField = append(updateField, t.WeatherCompare)
	updateField = append(updateField, t.TimerWeeks)
	updateField = append(updateField, t.TimerValue)
	updateField = append(updateField, t.ProductId)
	updateField = append(updateField, t.ProductKey)
	updateField = append(updateField, t.Functions)
	updateField = append(updateField, t.FuncKey)
	updateField = append(updateField, t.FuncCompare)
	updateField = append(updateField, t.FuncValue)
	updateField = append(updateField, t.Sort)
	updateField = append(updateField, t.CreatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllSceneTemplateCondition error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SceneTemplateCondition_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllSceneTemplateCondition error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *SceneTemplateConditionSvc) UpdateFieldsSceneTemplateCondition(req *proto.SceneTemplateConditionUpdateFieldsRequest) (*proto.SceneTemplateCondition, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneTemplateCondition
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsSceneTemplateCondition error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsSceneTemplateCondition error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SceneTemplateCondition_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsSceneTemplateCondition error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找SceneTemplateCondition
func (s *SceneTemplateConditionSvc) FindSceneTemplateCondition(req *proto.SceneTemplateConditionFilter) (*proto.SceneTemplateCondition, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneTemplateCondition
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.SceneTemplateId != 0 { //整数
		do = do.Where(t.SceneTemplateId.Eq(req.SceneTemplateId))
	}
	if req.ConditionType != 0 { //整数
		do = do.Where(t.ConditionType.Eq(req.ConditionType))
	}
	if req.Desc != "" { //字符串
		do = do.Where(t.Desc.Eq(req.Desc))
	}
	if req.WeatherType != 0 { //整数
		do = do.Where(t.WeatherType.Eq(req.WeatherType))
	}
	if req.WeatherValue != "" { //字符串
		do = do.Where(t.WeatherValue.Eq(req.WeatherValue))
	}
	if req.WeatherCompare != 0 { //整数
		do = do.Where(t.WeatherCompare.Eq(req.WeatherCompare))
	}
	if req.TimerWeeks != "" { //字符串
		do = do.Where(t.TimerWeeks.Eq(req.TimerWeeks))
	}
	if req.TimerValue != "" { //字符串
		do = do.Where(t.TimerValue.Eq(req.TimerValue))
	}
	if req.ProductId != 0 { //整数
		do = do.Where(t.ProductId.Eq(req.ProductId))
	}
	if req.ProductKey != "" { //字符串
		do = do.Where(t.ProductKey.Eq(req.ProductKey))
	}
	if req.Functions != "" { //字符串
		do = do.Where(t.Functions.Eq(req.Functions))
	}
	if req.FuncKey != "" { //字符串
		do = do.Where(t.FuncKey.Eq(req.FuncKey))
	}
	if req.FuncCompare != 0 { //整数
		do = do.Where(t.FuncCompare.Eq(req.FuncCompare))
	}
	if req.FuncValue != "" { //字符串
		do = do.Where(t.FuncValue.Eq(req.FuncValue))
	}
	if req.Sort != 0 { //整数
		do = do.Where(t.Sort.Eq(req.Sort))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindSceneTemplateCondition error : %s", err.Error())
		return nil, err
	}
	res := convert.SceneTemplateCondition_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找SceneTemplateCondition
func (s *SceneTemplateConditionSvc) FindByIdSceneTemplateCondition(req *proto.SceneTemplateConditionFilter) (*proto.SceneTemplateCondition, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneTemplateCondition
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdSceneTemplateCondition error : %s", err.Error())
		return nil, err
	}
	res := convert.SceneTemplateCondition_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找SceneTemplateCondition,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *SceneTemplateConditionSvc) GetListSceneTemplateCondition(req *proto.SceneTemplateConditionListRequest) ([]*proto.SceneTemplateCondition, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TSceneTemplateCondition
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.SceneTemplateId != 0 { //整数
			do = do.Where(t.SceneTemplateId.Eq(query.SceneTemplateId))
		}
		if query.ConditionType != 0 { //整数
			do = do.Where(t.ConditionType.Eq(query.ConditionType))
		}
		if query.Desc != "" { //字符串
			do = do.Where(t.Desc.Like("%" + query.Desc + "%"))
		}
		if query.WeatherType != 0 { //整数
			do = do.Where(t.WeatherType.Eq(query.WeatherType))
		}
		if query.WeatherValue != "" { //字符串
			do = do.Where(t.WeatherValue.Like("%" + query.WeatherValue + "%"))
		}
		if query.WeatherCompare != 0 { //整数
			do = do.Where(t.WeatherCompare.Eq(query.WeatherCompare))
		}
		if query.TimerWeeks != "" { //字符串
			do = do.Where(t.TimerWeeks.Like("%" + query.TimerWeeks + "%"))
		}
		if query.TimerValue != "" { //字符串
			do = do.Where(t.TimerValue.Like("%" + query.TimerValue + "%"))
		}
		if query.ProductId != 0 { //整数
			do = do.Where(t.ProductId.Eq(query.ProductId))
		}
		if query.ProductKey != "" { //字符串
			do = do.Where(t.ProductKey.Like("%" + query.ProductKey + "%"))
		}
		if query.Functions != "" { //字符串
			do = do.Where(t.Functions.Like("%" + query.Functions + "%"))
		}
		if query.FuncKey != "" { //字符串
			do = do.Where(t.FuncKey.Like("%" + query.FuncKey + "%"))
		}
		if query.FuncCompare != 0 { //整数
			do = do.Where(t.FuncCompare.Eq(query.FuncCompare))
		}
		if query.FuncValue != "" { //字符串
			do = do.Where(t.FuncValue.Like("%" + query.FuncValue + "%"))
		}
		if query.Sort != 0 { //整数
			do = do.Where(t.Sort.Eq(query.Sort))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TSceneTemplateCondition
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListSceneTemplateCondition error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.SceneTemplateCondition, len(list))
	for i, v := range list {
		result[i] = convert.SceneTemplateCondition_db2pb(v)
	}
	return result, total, nil
}
