// Code generated by sgen.exe,2022-05-20 13:36:03. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_intelligence_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_device/model"
	"cloud_platform/iot_model/db_device/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type SceneIntelligenceConditionSvc struct {
	Ctx context.Context
}

// 创建SceneIntelligenceCondition
func (s *SceneIntelligenceConditionSvc) CreateSceneIntelligenceCondition(req *proto.SceneIntelligenceCondition) (*proto.SceneIntelligenceCondition, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceCondition
	do := t.WithContext(context.Background())
	dbObj := convert.SceneIntelligenceCondition_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateSceneIntelligenceCondition error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除SceneIntelligenceCondition
func (s *SceneIntelligenceConditionSvc) DeleteSceneIntelligenceCondition(req *proto.SceneIntelligenceCondition) (*proto.SceneIntelligenceCondition, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceCondition
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.IntelligenceId != 0 { //整数
		do = do.Where(t.IntelligenceId.Eq(req.IntelligenceId))
	}
	if req.ConditionType != 0 { //整数
		do = do.Where(t.ConditionType.Eq(req.ConditionType))
	}
	if req.Desc != "" { //字符串
		do = do.Where(t.Desc.Eq(req.Desc))
	}
	if req.WeatherCountry != "" { //字符串
		do = do.Where(t.WeatherCountry.Eq(req.WeatherCountry))
	}
	if req.WeatherCity != "" { //字符串
		do = do.Where(t.WeatherCity.Eq(req.WeatherCity))
	}
	if req.WeatherArea != "" { //字符串
		do = do.Where(t.WeatherArea.Eq(req.WeatherArea))
	}
	if req.WeatherType != 0 { //整数
		do = do.Where(t.WeatherType.Eq(req.WeatherType))
	}
	if req.WeatherValue != "" { //字符串
		do = do.Where(t.WeatherValue.Eq(req.WeatherValue))
	}
	if req.WeatherCompare != 0 { //整数
		do = do.Where(t.WeatherCompare.Eq(req.WeatherCompare))
	}
	if req.TimerWeeks != "" { //字符串
		do = do.Where(t.TimerWeeks.Eq(req.TimerWeeks))
	}
	if req.TimerValue != "" { //字符串
		do = do.Where(t.TimerValue.Eq(req.TimerValue))
	}
	if req.DeviceDid != "" { //字符串
		do = do.Where(t.DeviceDid.Eq(req.DeviceDid))
	}
	if req.DevicePropKey != "" { //字符串
		do = do.Where(t.DevicePropKey.Eq(req.DevicePropKey))
	}
	if req.DevicePropCompare != 0 { //整数
		do = do.Where(t.DevicePropCompare.Eq(req.DevicePropCompare))
	}
	if req.DevicePropValue != "" { //字符串
		do = do.Where(t.DevicePropValue.Eq(req.DevicePropValue))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteSceneIntelligenceCondition error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除SceneIntelligenceCondition
func (s *SceneIntelligenceConditionSvc) DeleteByIdSceneIntelligenceCondition(req *proto.SceneIntelligenceCondition) (*proto.SceneIntelligenceCondition, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceCondition
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdSceneIntelligenceCondition error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除SceneIntelligenceCondition
func (s *SceneIntelligenceConditionSvc) DeleteByIdsSceneIntelligenceCondition(req *proto.SceneIntelligenceConditionBatchDeleteRequest) (*proto.SceneIntelligenceConditionBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceCondition
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsSceneIntelligenceCondition error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新SceneIntelligenceCondition
func (s *SceneIntelligenceConditionSvc) UpdateSceneIntelligenceCondition(req *proto.SceneIntelligenceCondition) (*proto.SceneIntelligenceCondition, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceCondition
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.IntelligenceId != 0 { //整数
		updateField = append(updateField, t.IntelligenceId)
	}
	if req.ConditionType != 0 { //整数
		updateField = append(updateField, t.ConditionType)
	}
	if req.Desc != "" { //字符串
		updateField = append(updateField, t.Desc)
	}
	if req.WeatherCountry != "" { //字符串
		updateField = append(updateField, t.WeatherCountry)
	}
	if req.WeatherCity != "" { //字符串
		updateField = append(updateField, t.WeatherCity)
	}
	if req.WeatherArea != "" { //字符串
		updateField = append(updateField, t.WeatherArea)
	}
	if req.WeatherType != 0 { //整数
		updateField = append(updateField, t.WeatherType)
	}
	if req.WeatherValue != "" { //字符串
		updateField = append(updateField, t.WeatherValue)
	}
	if req.WeatherCompare != 0 { //整数
		updateField = append(updateField, t.WeatherCompare)
	}
	if req.TimerWeeks != "" { //字符串
		updateField = append(updateField, t.TimerWeeks)
	}
	if req.TimerValue != "" { //字符串
		updateField = append(updateField, t.TimerValue)
	}
	if req.DeviceDid != "" { //字符串
		updateField = append(updateField, t.DeviceDid)
	}
	if req.DevicePropKey != "" { //字符串
		updateField = append(updateField, t.DevicePropKey)
	}
	if req.DevicePropCompare != 0 { //整数
		updateField = append(updateField, t.DevicePropCompare)
	}
	if req.DevicePropValue != "" { //字符串
		updateField = append(updateField, t.DevicePropValue)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateSceneIntelligenceCondition error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.SceneIntelligenceCondition_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateSceneIntelligenceCondition error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段SceneIntelligenceCondition
func (s *SceneIntelligenceConditionSvc) UpdateAllSceneIntelligenceCondition(req *proto.SceneIntelligenceCondition) (*proto.SceneIntelligenceCondition, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceCondition
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.IntelligenceId)
	updateField = append(updateField, t.ConditionType)
	updateField = append(updateField, t.Desc)
	updateField = append(updateField, t.WeatherCountry)
	updateField = append(updateField, t.WeatherCity)
	updateField = append(updateField, t.WeatherArea)
	updateField = append(updateField, t.WeatherType)
	updateField = append(updateField, t.WeatherValue)
	updateField = append(updateField, t.WeatherCompare)
	updateField = append(updateField, t.TimerWeeks)
	updateField = append(updateField, t.TimerValue)
	updateField = append(updateField, t.DeviceDid)
	updateField = append(updateField, t.DevicePropKey)
	updateField = append(updateField, t.DevicePropCompare)
	updateField = append(updateField, t.DevicePropValue)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllSceneIntelligenceCondition error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SceneIntelligenceCondition_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllSceneIntelligenceCondition error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *SceneIntelligenceConditionSvc) UpdateFieldsSceneIntelligenceCondition(req *proto.SceneIntelligenceConditionUpdateFieldsRequest) (*proto.SceneIntelligenceCondition, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceCondition
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsSceneIntelligenceCondition error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsSceneIntelligenceCondition error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SceneIntelligenceCondition_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsSceneIntelligenceCondition error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找SceneIntelligenceCondition
func (s *SceneIntelligenceConditionSvc) FindSceneIntelligenceCondition(req *proto.SceneIntelligenceConditionFilter) (*proto.SceneIntelligenceCondition, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceCondition
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.IntelligenceId != 0 { //整数
		do = do.Where(t.IntelligenceId.Eq(req.IntelligenceId))
	}
	if req.ConditionType != 0 { //整数
		do = do.Where(t.ConditionType.Eq(req.ConditionType))
	}
	if req.Desc != "" { //字符串
		do = do.Where(t.Desc.Eq(req.Desc))
	}
	if req.WeatherCountry != "" { //字符串
		do = do.Where(t.WeatherCountry.Eq(req.WeatherCountry))
	}
	if req.WeatherCity != "" { //字符串
		do = do.Where(t.WeatherCity.Eq(req.WeatherCity))
	}
	if req.WeatherArea != "" { //字符串
		do = do.Where(t.WeatherArea.Eq(req.WeatherArea))
	}
	if req.WeatherType != 0 { //整数
		do = do.Where(t.WeatherType.Eq(req.WeatherType))
	}
	if req.WeatherValue != "" { //字符串
		do = do.Where(t.WeatherValue.Eq(req.WeatherValue))
	}
	if req.WeatherCompare != 0 { //整数
		do = do.Where(t.WeatherCompare.Eq(req.WeatherCompare))
	}
	if req.TimerWeeks != "" { //字符串
		do = do.Where(t.TimerWeeks.Eq(req.TimerWeeks))
	}
	if req.TimerValue != "" { //字符串
		do = do.Where(t.TimerValue.Eq(req.TimerValue))
	}
	if req.DeviceDid != "" { //字符串
		do = do.Where(t.DeviceDid.Eq(req.DeviceDid))
	}
	if req.DevicePropKey != "" { //字符串
		do = do.Where(t.DevicePropKey.Eq(req.DevicePropKey))
	}
	if req.DevicePropCompare != 0 { //整数
		do = do.Where(t.DevicePropCompare.Eq(req.DevicePropCompare))
	}
	if req.DevicePropValue != "" { //字符串
		do = do.Where(t.DevicePropValue.Eq(req.DevicePropValue))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindSceneIntelligenceCondition error : %s", err.Error())
		return nil, err
	}
	res := convert.SceneIntelligenceCondition_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找SceneIntelligenceCondition
func (s *SceneIntelligenceConditionSvc) FindByIdSceneIntelligenceCondition(req *proto.SceneIntelligenceConditionFilter) (*proto.SceneIntelligenceCondition, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceCondition
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdSceneIntelligenceCondition error : %s", err.Error())
		return nil, err
	}
	res := convert.SceneIntelligenceCondition_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找SceneIntelligenceCondition,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *SceneIntelligenceConditionSvc) GetListSceneIntelligenceCondition(req *proto.SceneIntelligenceConditionListRequest) ([]*proto.SceneIntelligenceCondition, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligenceCondition
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.IntelligenceId != 0 { //整数
			do = do.Where(t.IntelligenceId.Eq(query.IntelligenceId))
		}
		if query.ConditionType != 0 { //整数
			do = do.Where(t.ConditionType.Eq(query.ConditionType))
		}
		if query.Desc != "" { //字符串
			do = do.Where(t.Desc.Like("%" + query.Desc + "%"))
		}
		if query.WeatherCountry != "" { //字符串
			do = do.Where(t.WeatherCountry.Like("%" + query.WeatherCountry + "%"))
		}
		if query.WeatherCity != "" { //字符串
			do = do.Where(t.WeatherCity.Like("%" + query.WeatherCity + "%"))
		}
		if query.WeatherArea != "" { //字符串
			do = do.Where(t.WeatherArea.Like("%" + query.WeatherArea + "%"))
		}
		if query.WeatherType != 0 { //整数
			do = do.Where(t.WeatherType.Eq(query.WeatherType))
		}
		if query.WeatherValue != "" { //字符串
			do = do.Where(t.WeatherValue.Like("%" + query.WeatherValue + "%"))
		}
		if query.WeatherCompare != 0 { //整数
			do = do.Where(t.WeatherCompare.Eq(query.WeatherCompare))
		}
		if query.TimerWeeks != "" { //字符串
			do = do.Where(t.TimerWeeks.Like("%" + query.TimerWeeks + "%"))
		}
		if query.TimerValue != "" { //字符串
			do = do.Where(t.TimerValue.Like("%" + query.TimerValue + "%"))
		}
		if query.DeviceDid != "" { //字符串
			do = do.Where(t.DeviceDid.Like("%" + query.DeviceDid + "%"))
		}
		if query.DevicePropKey != "" { //字符串
			do = do.Where(t.DevicePropKey.Like("%" + query.DevicePropKey + "%"))
		}
		if query.DevicePropCompare != 0 { //整数
			do = do.Where(t.DevicePropCompare.Eq(query.DevicePropCompare))
		}
		if query.DevicePropValue != "" { //字符串
			do = do.Where(t.DevicePropValue.Like("%" + query.DevicePropValue + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.Sort)
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}
	var list []*model.TSceneIntelligenceCondition
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListSceneIntelligenceCondition error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.SceneIntelligenceCondition, len(list))
	for i, v := range list {
		result[i] = convert.SceneIntelligenceCondition_db2pb(v)
	}
	return result, total, nil
}
