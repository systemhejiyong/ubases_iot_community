// Code generated by sgen.exe,2022-05-20 13:36:03. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_intelligence_service/service/scene_executor"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"go-micro.dev/v4/metadata"
	"gorm.io/gen/field"

	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_intelligence_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_device/model"
	"cloud_platform/iot_model/db_device/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type SceneIntelligenceSvc struct {
	Ctx context.Context
}

// 创建SceneIntelligence
func (s *SceneIntelligenceSvc) CreateSceneIntelligence(req *proto.SceneIntelligence) (*proto.SceneIntelligence, error) {
	userId, _ := metadata.Get(s.Ctx, "Userid")
	tenantId, _ := metadata.Get(s.Ctx, "tenantid")
	appKey, _ := metadata.Get(s.Ctx, "appkey")
	timezone, _ := metadata.Get(s.Ctx, "tz")
	region := GetRegionInt(s.Ctx)

	//判断场景添加数量
	tSceneIntell := orm.Use(iotmodel.GetDB()).TSceneIntelligence
	count, err := tSceneIntell.WithContext(context.Background()).Where(tSceneIntell.AppKey.Eq(appKey), tSceneIntell.Type.Eq(req.Type), tSceneIntell.HomeId.Eq(req.HomeId)).Count()
	if err != nil {
		return nil, errors.New("查询场景数量异常")
	}
	if count >= 50 {
		return nil, errors.New("每个家庭最多场景50个场景任务")
	}

	userIdI := iotutil.ToInt64(userId)
	if userIdI == 0 {
		return nil, errors.New("用户Id获取失败")
	}
	db := iotmodel.GetDB().Begin()
	dbObj := convert.SceneIntelligence_pb2db(req)
	dbObj.TenantId = tenantId
	dbObj.Timezone = timezone
	dbObj.RegionServerId = region
	dbObj.AppKey = appKey
	//新增智能场景
	if dbObj.Id == 0 {
		dbObj.Id = iotutil.GetNextSeqInt64()
		dbObj.Status = 1
		dbObj.UserId = userIdI
		err := db.Create(dbObj).Error
		if err != nil {
			logger.Errorf("CreateSceneIntelligence error : %s", err.Error())
			db.Rollback()
			return nil, err
		}
	} else {
		//更新智能场景
		dbObj.UpdatedBy = userIdI
		err := db.Omit("created_at", "id").Updates(dbObj).Error
		if err != nil {
			logger.Errorf("UpdateSceneIntelligence error : %s", err.Error())
			db.Rollback()
			return nil, err
		}
	}
	var notDeleteConditionIds []int64
	//保存智能场景条件
	for i, condition := range req.SceneIntelligenceCondition {
		conditionObj := convert.SceneIntelligenceCondition_pb2db(condition)
		if conditionObj.Id == 0 {
			conditionObj.Id = iotutil.GetNextSeqInt64()
			conditionObj.IntelligenceId = dbObj.Id
			conditionObj.Sort = int32(i) + 1
			err := db.Create(conditionObj).Error
			if err != nil {
				logger.Errorf("CreateSceneIntelligenceCondition error : %s", err.Error())
				db.Rollback()
				return nil, err
			}
		} else {
			conditionObj.Sort = int32(i) + 1
			err := db.Omit("intelligence_id", "id").Updates(conditionObj).Error
			if err != nil {
				logger.Errorf("UpdateSceneIntelligenceCondition error : %s", err.Error())
				db.Rollback()
				return nil, err
			}
		}
		notDeleteConditionIds = append(notDeleteConditionIds, conditionObj.Id)
	}
	var notDeleteTaskIds []int64
	//保存智能场景任务
	for i, task := range req.SceneIntelligenceTask {
		taskObj := convert.SceneIntelligenceTask_pb2db(task)
		if taskObj.Id == 0 {
			taskObj.Id = iotutil.GetNextSeqInt64()
			taskObj.IntelligenceId = dbObj.Id
			taskObj.Sort = int32(i) + 1
			err := db.Create(taskObj).Error
			if err != nil {
				logger.Errorf("CreateSceneIntelligenceTask error : %s", err.Error())
				db.Rollback()
				return nil, err
			}
		} else {
			taskObj.Sort = int32(i) + 1
			err := db.Omit("intelligence_id", "id").Updates(taskObj).Error
			if err != nil {
				logger.Errorf("UpdateSceneIntelligenceTask error : %s", err.Error())
				db.Rollback()
				return nil, err
			}
		}
		notDeleteTaskIds = append(notDeleteTaskIds, taskObj.Id)
	}

	//删除智能场景条件
	if notDeleteConditionIds != nil && len(notDeleteConditionIds) > 0 {
		err := db.Where("intelligence_id = ?", dbObj.Id).Not("id", notDeleteConditionIds).Delete(model.TSceneIntelligenceCondition{}).Error
		if err != nil {
			logger.Errorf("DeleteTask error : %s", err.Error())
			db.Rollback()
			return nil, err
		}
	} else {
		err := db.Where("intelligence_id = ?", dbObj.Id).Delete(model.TSceneIntelligenceCondition{}).Error
		if err != nil {
			logger.Errorf("DeleteTask error : %s", err.Error())
			db.Rollback()
			return nil, err
		}
	}

	//删除智能场景任务
	if notDeleteTaskIds != nil && len(notDeleteTaskIds) > 0 {
		err := db.Where("intelligence_id = ?", dbObj.Id).Not("id", notDeleteTaskIds).Delete(model.TSceneIntelligenceTask{}).Error
		if err != nil {
			logger.Errorf("DeleteTask error : %s", err.Error())
			db.Rollback()
			return nil, err
		}
	} else {
		err := db.Where("intelligence_id = ?", dbObj.Id).Delete(model.TSceneIntelligenceTask{}).Error
		if err != nil {
			logger.Errorf("DeleteTask error : %s", err.Error())
			db.Rollback()
			return nil, err
		}
	}
	db.Commit()

	s.SetRedis(dbObj.Id)
	//如果未启动，则创建规则
	//=1 一键执行任务 =2 自动化场景任务
	if dbObj.Status == 1 && dbObj.Type == 2 {
		rule := scene_executor.IntelligenceRule{}
		rule.CreateRule(iotutil.ToString(dbObj.Id), dbObj.Title)
		if req.SceneIntelligenceCondition != nil {
			//如果是天气，则增加天气监控
			for _, condition := range req.SceneIntelligenceCondition {
				if iotconst.ConditionType(condition.ConditionType) == iotconst.CONDITION_TYPE_WEATHER {
					scene_executor.MonitorWeatherChange(condition.GetWeatherCity())
				}
			}
		}
	}
	return req, nil
}

func (s SceneIntelligenceSvc) SetRedis(id int64) {
	details, err := s.GetIntelligenceDetails(&proto.SceneIntelligencePrimarykey{Id: id})
	if err != nil {
		logger.Errorf("SetRedis error : %s", err.Error())
		return
	}
	//iotconst.HKEY_INTELLIGENCE_DATA+intelligenceId
	iotredis.GetClient().Set(context.Background(), iotconst.HKEY_INTELLIGENCE_DATA+iotutil.ToString(details.Id), iotutil.ToString(details), 0)
}

func (s SceneIntelligenceSvc) RemoveRedis(id ...interface{}) {
	idStr := []string{}
	for _, i := range id {
		idStr = append(idStr, iotconst.HKEY_INTELLIGENCE_DATA+iotutil.ToString(i))
	}
	iotredis.GetClient().Del(context.Background(), idStr...)
}

// 根据条件删除SceneIntelligence
func (s *SceneIntelligenceSvc) DeleteSceneIntelligence(req *proto.SceneIntelligence) (*proto.SceneIntelligence, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligence
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Type != 0 { //整数
		do = do.Where(t.Type.Eq(req.Type))
	}
	if req.Title != "" { //字符串
		do = do.Where(t.Title.Eq(req.Title))
	}
	if req.SortNo != 0 { //整数
		do = do.Where(t.SortNo.Eq(req.SortNo))
	}
	if req.EnableDisplay != 0 { //整数
		do = do.Where(t.EnableDisplay.Eq(req.EnableDisplay))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.RunStatus != 0 { //整数
		do = do.Where(t.RunStatus.Eq(req.RunStatus))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.HomeId != 0 { //整数
		do = do.Where(t.HomeId.Eq(req.HomeId))
	}
	if req.ConditionMode != 0 { //整数
		do = do.Where(t.ConditionMode.Eq(req.ConditionMode))
	}
	if req.StyleIcon != "" { //字符串
		do = do.Where(t.StyleIcon.Eq(req.StyleIcon))
	}
	if req.StyleColor != "" { //字符串
		do = do.Where(t.StyleColor.Eq(req.StyleColor))
	}
	if req.StyleImg != "" { //字符串
		do = do.Where(t.StyleImg.Eq(req.StyleImg))
	}
	if req.EffectTimeSwitch != 0 { //整数
		do = do.Where(t.EffectTimeSwitch.Eq(req.EffectTimeSwitch))
	}
	if req.EffectTimeDesc != "" { //字符串
		do = do.Where(t.EffectTimeDesc.Eq(req.EffectTimeDesc))
	}
	if req.EffectTimeWeeks != "" { //字符串
		do = do.Where(t.EffectTimeWeeks.Eq(req.EffectTimeWeeks))
	}
	if req.EffectTimeStart != "" { //字符串
		do = do.Where(t.EffectTimeStart.Eq(req.EffectTimeStart))
	}
	if req.EffectTimeEnd != "" { //字符串
		do = do.Where(t.EffectTimeEnd.Eq(req.EffectTimeEnd))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteSceneIntelligence error : %s", err.Error())
		return nil, err
	}
	s.RemoveRedis(req.Id)
	scene_executor.RemoveRule(req.Id)
	return req, err
}

// 根据数据库表主键删除SceneIntelligence
func (s *SceneIntelligenceSvc) DeleteByIdSceneIntelligence(req *proto.SceneIntelligence) (*proto.SceneIntelligence, error) {
	db := iotmodel.GetDB().Begin()
	//删除智能场景
	err := db.Unscoped().Where("id = ? ", req.Id).Delete(model.TSceneIntelligence{}).Error
	if err != nil {
		logger.Errorf("DeleteByIdSceneIntelligence error : %s", err.Error())
		db.Rollback()
		return nil, err
	}

	//删除智能场景条件
	err = db.Where("intelligence_id = ? ", req.Id).Delete(model.TSceneIntelligenceCondition{}).Error
	if err != nil {
		logger.Errorf("DeleteSceneIntelligenceCondition error : %s", err.Error())
		db.Rollback()
		return nil, err
	}

	//删除智能场景任务
	err = db.Where("intelligence_id = ? ", req.Id).Delete(model.TSceneIntelligenceTask{}).Error
	if err != nil {
		logger.Errorf("DeleteSceneIntelligenceTask error : %s", err.Error())
		db.Rollback()
		return nil, err
	}

	//删除智能场景结果
	err = db.Where("intelligence_id = ? ", req.Id).Delete(model.TSceneIntelligenceResult{}).Error
	if err != nil {
		logger.Errorf("DeleteSceneIntelligenceResult error : %s", err.Error())
		db.Rollback()
		return nil, err
	}

	db.Commit()
	s.RemoveRedis(req.Id)
	//删除规则
	scene_executor.RemoveRule(req.Id)
	return req, err
}

// 根据数据库表主键批量删除SceneIntelligence
func (s *SceneIntelligenceSvc) DeleteByIdsSceneIntelligence(req *proto.SceneIntelligenceBatchDeleteRequest) (*proto.SceneIntelligenceBatchDeleteRequest, error) {
	var err error
	var ids []interface{}
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TSceneIntelligence
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsSceneIntelligence error : %s", err.Error())
			break
		}
		ids = append(ids, k.Id)
	}

	s.RemoveRedis(ids...)
	//删除规则
	scene_executor.RemoveRules(ids...)
	return req, err
}

// 根据主键更新SceneIntelligence
func (s *SceneIntelligenceSvc) UpdateSceneIntelligence(req *proto.SceneIntelligence) (*proto.SceneIntelligence, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligence
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Type != 0 { //整数
		updateField = append(updateField, t.Type)
	}
	if req.Title != "" { //字符串
		updateField = append(updateField, t.Title)
	}
	if req.SortNo != 0 { //整数
		updateField = append(updateField, t.SortNo)
	}
	if req.EnableDisplay != 0 { //整数
		updateField = append(updateField, t.EnableDisplay)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.RunStatus != 0 { //整数
		updateField = append(updateField, t.RunStatus)
	}
	if req.UserId != 0 { //整数
		updateField = append(updateField, t.UserId)
	}
	if req.HomeId != 0 { //整数
		updateField = append(updateField, t.HomeId)
	}
	if req.ConditionMode != 0 { //整数
		updateField = append(updateField, t.ConditionMode)
	}
	if req.StyleIcon != "" { //字符串
		updateField = append(updateField, t.StyleIcon)
	}
	if req.StyleColor != "" { //字符串
		updateField = append(updateField, t.StyleColor)
	}
	if req.StyleImg != "" { //字符串
		updateField = append(updateField, t.StyleImg)
	}
	if req.EffectTimeSwitch != 0 { //整数
		updateField = append(updateField, t.EffectTimeSwitch)
	}
	if req.EffectTimeDesc != "" { //字符串
		updateField = append(updateField, t.EffectTimeDesc)
	}
	if req.EffectTimeWeeks != "" { //字符串
		updateField = append(updateField, t.EffectTimeWeeks)
	}
	if req.EffectTimeStart != "" { //字符串
		updateField = append(updateField, t.EffectTimeStart)
	}
	if req.EffectTimeEnd != "" { //字符串
		updateField = append(updateField, t.EffectTimeEnd)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateSceneIntelligence error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	queryObj, err := t.WithContext(context.Background()).Where(t.Id.Eq(req.Id)).First()
	if err != nil {
		logger.Errorf("FindSceneIntelligence error : %s", err.Error())
		return nil, err
	}

	dbObj := convert.SceneIntelligence_pb2db(req)
	_, err = do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateSceneIntelligence error : %s", err.Error())
		return nil, err
	}

	s.SetRedis(dbObj.Id)
	logger.Errorf("UpdateSceneIntelligence status:%d, type:%d, id: %d", dbObj.Status, queryObj.Type, queryObj.Id)
	if dbObj.Status == 1 && queryObj.Type == 2 {
		rule := scene_executor.IntelligenceRule{}
		rule.CreateRule(iotutil.ToString(dbObj.Id), dbObj.Title)
		if req.SceneIntelligenceCondition != nil {
			//如果是天气，则增加天气监控
			for _, condition := range req.SceneIntelligenceCondition {
				if iotconst.ConditionType(condition.ConditionType) == iotconst.CONDITION_TYPE_WEATHER {
					scene_executor.MonitorWeatherChange(condition.GetWeatherCity())
				}
			}
		}
	} else {
		rule := scene_executor.IntelligenceRule{}
		rule.DeleteRule(iotutil.ToString(dbObj.Id))
		//scene_executor.RemoveRule(iotutil.ToString(dbObj.Id))
	}
	return req, err
}

// //根据主键更新所有字段SceneIntelligence
func (s *SceneIntelligenceSvc) UpdateAllSceneIntelligence(req *proto.SceneIntelligence) (*proto.SceneIntelligence, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligence
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Type)
	updateField = append(updateField, t.Title)
	updateField = append(updateField, t.SortNo)
	updateField = append(updateField, t.EnableDisplay)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.RunStatus)
	updateField = append(updateField, t.UserId)
	updateField = append(updateField, t.HomeId)
	updateField = append(updateField, t.ConditionMode)
	updateField = append(updateField, t.StyleIcon)
	updateField = append(updateField, t.StyleColor)
	updateField = append(updateField, t.StyleImg)
	updateField = append(updateField, t.EffectTimeSwitch)
	updateField = append(updateField, t.EffectTimeDesc)
	updateField = append(updateField, t.EffectTimeWeeks)
	updateField = append(updateField, t.EffectTimeStart)
	updateField = append(updateField, t.EffectTimeEnd)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllSceneIntelligence error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	queryObj, err := t.WithContext(context.Background()).Where(t.Id.Eq(req.Id)).First()
	if err != nil {
		logger.Errorf("FindSceneIntelligence error : %s", err.Error())
		return nil, err
	}

	dbObj := convert.SceneIntelligence_pb2db(req)
	_, err = do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllSceneIntelligence error : %s", err.Error())
		return nil, err
	}

	s.SetRedis(dbObj.Id)
	logger.Errorf("UpdateAllSceneIntelligence status:%d, type:%d, id: %d", dbObj.Status, queryObj.Type, queryObj.Id)
	if dbObj.Status == 1 && queryObj.Type == 2 {
		rule := scene_executor.IntelligenceRule{}
		rule.CreateRule(iotutil.ToString(dbObj.Id), dbObj.Title)
		if req.SceneIntelligenceCondition != nil {
			//如果是天气，则增加天气监控
			for _, condition := range req.SceneIntelligenceCondition {
				if iotconst.ConditionType(condition.ConditionType) == iotconst.CONDITION_TYPE_WEATHER {
					scene_executor.MonitorWeatherChange(condition.GetWeatherCity())
				}
			}
		}
		//scene_executor.CreateRule(iotutil.ToString(dbObj.Id), dbObj.Title, 10)
		//if req.SceneIntelligenceCondition != nil {
		//	for _, condition := range req.SceneIntelligenceCondition {
		//		if iotconst.ConditionType(condition.ConditionType) == iotconst.CONDITION_TYPE_WEATHER {
		//			weather.MonitorWeatherChange(condition.GetWeatherCity())
		//		}
		//	}
		//}
	} else {
		rule := scene_executor.IntelligenceRule{}
		rule.DeleteRule(iotutil.ToString(dbObj.Id))
		//scene_executor.RemoveRule(iotutil.ToString(dbObj.Id))
	}
	return req, err
}

func (s *SceneIntelligenceSvc) UpdateFieldsSceneIntelligence(req *proto.SceneIntelligenceUpdateFieldsRequest) (*proto.SceneIntelligence, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligence
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsSceneIntelligence error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsSceneIntelligence error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	queryObj, err := t.WithContext(context.Background()).Where(t.Id.Eq(req.Data.Id)).First()
	if err != nil {
		logger.Errorf("FindSceneIntelligence error : %s", err.Error())
		return nil, err
	}

	dbObj := convert.SceneIntelligence_pb2db(req.Data)
	_, err = do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsSceneIntelligence error : %s", err.Error())
		return nil, err
	}

	s.SetRedis(dbObj.Id)
	logger.Errorf("UpdateFieldsSceneIntelligence status:%d, type:%d, id: %d", dbObj.Status, queryObj.Type, queryObj.Id)
	if dbObj.Status == 1 && queryObj.Type == 2 {
		rule := scene_executor.IntelligenceRule{}
		rule.CreateRule(iotutil.ToString(dbObj.Id), dbObj.Title)
		//scene_executor.CreateRule(iotutil.ToString(dbObj.Id), dbObj.Title, 10)
	} else {
		rule := scene_executor.IntelligenceRule{}
		rule.DeleteRule(iotutil.ToString(dbObj.Id), dbObj.Title)
		//scene_executor.RemoveRule(iotutil.ToString(dbObj.Id))
	}
	return req.Data, nil
}

// 根据非空条件查找SceneIntelligence
func (s *SceneIntelligenceSvc) FindSceneIntelligence(req *proto.SceneIntelligenceFilter) (*proto.SceneIntelligence, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligence
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Type != 0 { //整数
		do = do.Where(t.Type.Eq(req.Type))
	}
	if req.Title != "" { //字符串
		do = do.Where(t.Title.Eq(req.Title))
	}
	if req.SortNo != 0 { //整数
		do = do.Where(t.SortNo.Eq(req.SortNo))
	}
	if req.EnableDisplay != 0 { //整数
		do = do.Where(t.EnableDisplay.Eq(req.EnableDisplay))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.RunStatus != 0 { //整数
		do = do.Where(t.RunStatus.Eq(req.RunStatus))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.HomeId != 0 { //整数
		do = do.Where(t.HomeId.Eq(req.HomeId))
	}
	if req.ConditionMode != 0 { //整数
		do = do.Where(t.ConditionMode.Eq(req.ConditionMode))
	}
	if req.StyleIcon != "" { //字符串
		do = do.Where(t.StyleIcon.Eq(req.StyleIcon))
	}
	if req.StyleColor != "" { //字符串
		do = do.Where(t.StyleColor.Eq(req.StyleColor))
	}
	if req.StyleImg != "" { //字符串
		do = do.Where(t.StyleImg.Eq(req.StyleImg))
	}
	if req.EffectTimeSwitch != 0 { //整数
		do = do.Where(t.EffectTimeSwitch.Eq(req.EffectTimeSwitch))
	}
	if req.EffectTimeDesc != "" { //字符串
		do = do.Where(t.EffectTimeDesc.Eq(req.EffectTimeDesc))
	}
	if req.EffectTimeWeeks != "" { //字符串
		do = do.Where(t.EffectTimeWeeks.Eq(req.EffectTimeWeeks))
	}
	if req.EffectTimeStart != "" { //字符串
		do = do.Where(t.EffectTimeStart.Eq(req.EffectTimeStart))
	}
	if req.EffectTimeEnd != "" { //字符串
		do = do.Where(t.EffectTimeEnd.Eq(req.EffectTimeEnd))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindSceneIntelligence error : %s", err.Error())
		return nil, err
	}
	res := convert.SceneIntelligence_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找SceneIntelligence
func (s *SceneIntelligenceSvc) FindByIdSceneIntelligence(req *proto.SceneIntelligenceFilter) (*proto.SceneIntelligence, error) {
	t := orm.Use(iotmodel.GetDB()).TSceneIntelligence
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id == 0 { //整数
		logger.Errorf("FindByIdSceneIntelligence Id is empty")
		return nil, errors.New("Id is empty")
	}

	do = do.Where(t.Id.Eq(req.Id))
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdSceneIntelligence error : %s", err.Error())
		return nil, err
	}
	res := convert.SceneIntelligence_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找SceneIntelligence,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *SceneIntelligenceSvc) GetListSceneIntelligence(req *proto.SceneIntelligenceListRequest) ([]*proto.SceneIntelligence, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	q := orm.Use(iotmodel.GetDB())
	t := q.TSceneIntelligence
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Type != 0 { //整数
			do = do.Where(t.Type.Eq(query.Type))
		}
		if query.Title != "" { //字符串
			do = do.Where(t.Title.Like("%" + query.Title + "%"))
		}
		if query.SortNo != 0 { //整数
			do = do.Where(t.SortNo.Eq(query.SortNo))
		}
		if query.EnableDisplay != 0 { //整数
			do = do.Where(t.EnableDisplay.Eq(query.EnableDisplay))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.RunStatus != 0 { //整数
			do = do.Where(t.RunStatus.Eq(query.RunStatus))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.HomeId != 0 { //整数
			do = do.Where(t.HomeId.Eq(query.HomeId))
		}
		if query.ConditionMode != 0 { //整数
			do = do.Where(t.ConditionMode.Eq(query.ConditionMode))
		}
		if query.StyleIcon != "" { //字符串
			do = do.Where(t.StyleIcon.Like("%" + query.StyleIcon + "%"))
		}
		if query.StyleColor != "" { //字符串
			do = do.Where(t.StyleColor.Like("%" + query.StyleColor + "%"))
		}
		if query.StyleImg != "" { //字符串
			do = do.Where(t.StyleImg.Like("%" + query.StyleImg + "%"))
		}
		if query.EffectTimeSwitch != 0 { //整数
			do = do.Where(t.EffectTimeSwitch.Eq(query.EffectTimeSwitch))
		}
		if query.EffectTimeDesc != "" { //字符串
			do = do.Where(t.EffectTimeDesc.Like("%" + query.EffectTimeDesc + "%"))
		}
		if query.EffectTimeWeeks != "" { //字符串
			do = do.Where(t.EffectTimeWeeks.Like("%" + query.EffectTimeWeeks + "%"))
		}
		if query.EffectTimeStart != "" { //字符串
			do = do.Where(t.EffectTimeStart.Like("%" + query.EffectTimeStart + "%"))
		}
		if query.EffectTimeEnd != "" { //字符串
			do = do.Where(t.EffectTimeEnd.Like("%" + query.EffectTimeEnd + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
		if query.IntelligenceId != 0 { //排除当前场景ID
			do = do.Where(t.Id.Neq(query.IntelligenceId))
		}
		//productKey时候在条件或者任务中
		if query.ProductKey != "" {
			//任务产品Key过滤
			taskw := q.TSceneIntelligenceTask.WithContext(context.Background()).
				Where(q.TSceneIntelligenceTask.IntelligenceId.EqCol(t.Id), q.TSceneIntelligenceTask.TaskType.Eq(int32(iotconst.TASK_TYPE_DEVICE)), q.TSceneIntelligenceTask.ProductKey.Eq(query.ProductKey))
			//do = do.Where(field.CompareSubQuery(field.ExistsOp, nil, taskw.UnderlyingDB()))
			//条件产品key过滤
			conditionw := q.TSceneIntelligenceCondition.WithContext(context.Background()).
				Where(q.TSceneIntelligenceCondition.IntelligenceId.EqCol(t.Id), q.TSceneIntelligenceCondition.ConditionType.Eq(int32(iotconst.CONDITION_TYPE_SATACHANGE)), q.TSceneIntelligenceCondition.ProductKey.Eq(query.ProductKey))
			//do = do.Where(field.CompareSubQuery(field.ExistsOp, nil, conditionw.UnderlyingDB()))
			do = do.Where(q.TSceneIntelligence.WithContext(context.Background()).Where(field.CompareSubQuery(field.ExistsOp, nil, taskw.UnderlyingDB())).Or(field.CompareSubQuery(field.ExistsOp, nil, conditionw.UnderlyingDB())))
		}
		//通过设备Id查询场景信息
		if query.DeviceId != "" {
			//任务设备Id过滤
			taskw := q.TSceneIntelligenceTask.WithContext(context.Background()).
				Where(q.TSceneIntelligenceTask.IntelligenceId.EqCol(t.Id), q.TSceneIntelligenceTask.TaskType.Eq(int32(iotconst.TASK_TYPE_DEVICE)), q.TSceneIntelligenceTask.ObjectId.Eq(query.DeviceId))
			//do = do.Where(field.CompareSubQuery(field.ExistsOp, nil, taskw.UnderlyingDB()))
			//条件设备Id过滤
			conditionw := q.TSceneIntelligenceCondition.WithContext(context.Background()).
				Where(q.TSceneIntelligenceCondition.IntelligenceId.EqCol(t.Id), q.TSceneIntelligenceCondition.ConditionType.Eq(int32(iotconst.CONDITION_TYPE_SATACHANGE)), q.TSceneIntelligenceCondition.DeviceDid.Eq(query.DeviceId))
			//do = do.Where(field.CompareSubQuery(field.ExistsOp, nil, conditionw.UnderlyingDB()))
			//do = do.Or(field.CompareSubQuery(field.ExistsOp, nil, taskw.UnderlyingDB()), field.CompareSubQuery(field.ExistsOp, nil, conditionw.UnderlyingDB()))
			do = do.Where(q.TSceneIntelligence.WithContext(context.Background()).Where(field.CompareSubQuery(field.ExistsOp, nil, taskw.UnderlyingDB())).Or(field.CompareSubQuery(field.ExistsOp, nil, conditionw.UnderlyingDB())))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.CreatedAt.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TSceneIntelligence
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListSceneIntelligence error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.SceneIntelligence, len(list))
	intellIds := []int64{}
	for _, item := range list {
		intellIds = append(intellIds, item.Id)
	}
	//读取任务列表
	taskMap := map[int64][]*proto.SceneIntelligenceTask{}
	if len(intellIds) > 0 {
		taskList, err := q.TSceneIntelligenceTask.WithContext(context.Background()).
			Where(q.TSceneIntelligenceTask.IntelligenceId.In(intellIds...)).Order(q.TSceneIntelligenceTask.Sort).Find()
		if err == nil {
			for _, task := range taskList {
				if _, ok := taskMap[task.IntelligenceId]; ok {
					taskMap[task.IntelligenceId] = append(taskMap[task.IntelligenceId], convert.SceneIntelligenceTask_db2pb(task))
				} else {
					taskMap[task.IntelligenceId] = []*proto.SceneIntelligenceTask{convert.SceneIntelligenceTask_db2pb(task)}
				}
			}
		}
	}
	for i, v := range list {
		result[i] = convert.SceneIntelligence_db2pb(v)
		if vals, ok := taskMap[v.Id]; ok {
			result[i].SceneIntelligenceTask = vals
		}
	}
	return result, total, nil
}

// 根据数据库表主键查找SceneIntelligence
func (s *SceneIntelligenceSvc) OneKeyExec(req *proto.SceneIntelligencePrimarykey) (int64, error) {
	//查询智能场景详情
	retData, err := s.FindByIdSceneIntelligence(&proto.SceneIntelligenceFilter{
		Id: req.Id,
	})
	if err != nil {
		return 0, err
	}

	taskSvc := SceneIntelligenceTaskSvc{Ctx: s.Ctx}
	//查询智能任务列表
	taskRet, _, err := taskSvc.GetListSceneIntelligenceTask(&proto.SceneIntelligenceTaskListRequest{
		Query: &proto.SceneIntelligenceTask{
			IntelligenceId: req.Id,
		},
	})

	if err != nil {
		return 0, err
	}

	if retData != nil && taskRet != nil && len(taskRet) > 0 {
		retData.SceneIntelligenceTask = taskRet
		resultId := iotutil.GetNextSeqInt64()
		//异步执行
		go func() {
			defer iotutil.PanicHandler()
			//按照步骤执行任务
			executor := scene_executor.SceneIntelligenceExecutor{}
			executor.ExecuteTask(retData, resultId)
		}()
		return resultId, nil
	} else {
		return 0, errors.New("查询智能场景失败")
	}
}

// 根据数据库表主键查找SceneIntelligence
func (s *SceneIntelligenceSvc) GetIntelligenceDetails(req *proto.SceneIntelligencePrimarykey) (*proto.SceneIntelligence, error) {
	//查询智能场景详情
	retData, err := s.FindByIdSceneIntelligence(&proto.SceneIntelligenceFilter{
		Id: req.Id,
	})
	if err != nil {
		return nil, err
	}

	taskSvc := SceneIntelligenceTaskSvc{Ctx: s.Ctx}
	conditionSvc := SceneIntelligenceConditionSvc{Ctx: s.Ctx}

	//查询智能任务列表
	taskRet, _, err := taskSvc.GetListSceneIntelligenceTask(&proto.SceneIntelligenceTaskListRequest{
		Query: &proto.SceneIntelligenceTask{
			IntelligenceId: req.Id,
		},
	})
	if err != nil {
		return nil, err
	}

	//查询智能任务列表
	conditionRet, _, err := conditionSvc.GetListSceneIntelligenceCondition(&proto.SceneIntelligenceConditionListRequest{
		Query: &proto.SceneIntelligenceCondition{
			IntelligenceId: req.Id,
		},
	})
	if err != nil {
		return nil, err
	}

	retData.SceneIntelligenceCondition = conditionRet
	retData.SceneIntelligenceTask = taskRet

	if retData != nil {
		return retData, nil
	} else {
		return nil, errors.New("查询智能场景失败")
	}
}
