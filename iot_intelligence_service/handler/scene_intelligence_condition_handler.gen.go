// Code generated by sgen.exe,2022-05-20 13:36:03. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_intelligence_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type SceneIntelligenceConditionHandler struct{}

// 创建
func (h *SceneIntelligenceConditionHandler) Create(ctx context.Context, req *proto.SceneIntelligenceCondition, resp *proto.Response) error {
	s := service.SceneIntelligenceConditionSvc{Ctx: ctx}
	_, err := s.CreateSceneIntelligenceCondition(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *SceneIntelligenceConditionHandler) Delete(ctx context.Context, req *proto.SceneIntelligenceCondition, resp *proto.Response) error {
	s := service.SceneIntelligenceConditionSvc{Ctx: ctx}
	_, err := s.DeleteSceneIntelligenceCondition(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *SceneIntelligenceConditionHandler) DeleteById(ctx context.Context, req *proto.SceneIntelligenceCondition, resp *proto.Response) error {
	s := service.SceneIntelligenceConditionSvc{Ctx: ctx}
	_, err := s.DeleteByIdSceneIntelligenceCondition(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *SceneIntelligenceConditionHandler) DeleteByIds(ctx context.Context, req *proto.SceneIntelligenceConditionBatchDeleteRequest, resp *proto.Response) error {
	s := service.SceneIntelligenceConditionSvc{Ctx: ctx}
	_, err := s.DeleteByIdsSceneIntelligenceCondition(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *SceneIntelligenceConditionHandler) Update(ctx context.Context, req *proto.SceneIntelligenceCondition, resp *proto.Response) error {
	s := service.SceneIntelligenceConditionSvc{Ctx: ctx}
	_, err := s.UpdateSceneIntelligenceCondition(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *SceneIntelligenceConditionHandler) UpdateAll(ctx context.Context, req *proto.SceneIntelligenceCondition, resp *proto.Response) error {
	s := service.SceneIntelligenceConditionSvc{Ctx: ctx}
	_, err := s.UpdateAllSceneIntelligenceCondition(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *SceneIntelligenceConditionHandler) UpdateFields(ctx context.Context, req *proto.SceneIntelligenceConditionUpdateFieldsRequest, resp *proto.Response) error {
	s := service.SceneIntelligenceConditionSvc{Ctx: ctx}
	_, err := s.UpdateFieldsSceneIntelligenceCondition(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *SceneIntelligenceConditionHandler) Find(ctx context.Context, req *proto.SceneIntelligenceConditionFilter, resp *proto.SceneIntelligenceConditionResponse) error {
	s := service.SceneIntelligenceConditionSvc{Ctx: ctx}
	data, err := s.FindSceneIntelligenceCondition(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *SceneIntelligenceConditionHandler) FindById(ctx context.Context, req *proto.SceneIntelligenceConditionFilter, resp *proto.SceneIntelligenceConditionResponse) error {
	s := service.SceneIntelligenceConditionSvc{Ctx: ctx}
	data, err := s.FindByIdSceneIntelligenceCondition(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *SceneIntelligenceConditionHandler) Lists(ctx context.Context, req *proto.SceneIntelligenceConditionListRequest, resp *proto.SceneIntelligenceConditionResponse) error {
	s := service.SceneIntelligenceConditionSvc{Ctx: ctx}
	data, total, err := s.GetListSceneIntelligenceCondition(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *SceneIntelligenceConditionHandler) SetResponse(resp *proto.SceneIntelligenceConditionResponse, data *proto.SceneIntelligenceCondition, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *SceneIntelligenceConditionHandler) SetPageResponse(resp *proto.SceneIntelligenceConditionResponse, list []*proto.SceneIntelligenceCondition, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
