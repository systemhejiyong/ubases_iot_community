// Code generated by sgen.exe,2022-05-22 07:25:56. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_message_service/service/push"
	"context"

	"cloud_platform/iot_message_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type MpMessageHandler struct{}

func (h *MpMessageHandler) ClearAlias(ctx context.Context, request *proto.ClearAliasRequest, response *proto.Response) error {
	smSvc := push.PushMessage{}
	userId, err := iotutil.ToInt64AndErr(request.UserId)
	if err != nil {
		response.Code = ERROR
		response.Message = err.Error()
		return nil
	}
	if request.AppPushId != "" && request.UserId != "" {
		ptSvc := service.AppPushTokenUserSvc{Ctx: ctx}
		ptSvc.CreateAppPushTokenUser(&proto.AppPushTokenUser{
			UserId:    userId,
			AppPushId: request.AppPushId,
			AppKey:    request.AppKey,
			TenantId:  request.TenantId,
		})
	}

	if request.AppKey == "" || request.UserId == "" {
		response.Code = ERROR
		response.Message = "参数AppKey、UserId异常"
		return nil
	}
	err = smSvc.ClearAlias(request.UserId, request.AppKey)
	if err != nil {
		response.Code = ERROR
		response.Message = err.Error()
	} else {
		response.Code = SUCCESS
		response.Message = "success"
	}
	return nil
}

func (h *MpMessageHandler) SendLaserMessage(ctx context.Context, message *proto.SendMessageRequest, response *proto.Response) error {
	smSvc := service.SendMessageSvc{}
	smSvc.SendLaserMessage(message)
	return nil
}

func (h *MpMessageHandler) SendMessage(ctx context.Context, message *proto.SendMessageRequest, response *proto.Response) error {
	s := service.MpMessageSvc{Ctx: ctx}
	res, err := s.PushMessage(message)
	if err != nil {
		response.Message = err.Error()
		return nil
	}
	smSvc := service.SendMessageSvc{}
	smSvc.SendMessage(res.Id, message)
	return nil
}

// 创建
func (h *MpMessageHandler) Create(ctx context.Context, req *proto.MpMessage, resp *proto.Response) error {
	s := service.MpMessageSvc{Ctx: ctx}
	_, err := s.CreateMpMessage(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *MpMessageHandler) Delete(ctx context.Context, req *proto.MpMessage, resp *proto.Response) error {
	s := service.MpMessageSvc{Ctx: ctx}
	_, err := s.DeleteMpMessage(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *MpMessageHandler) DeleteById(ctx context.Context, req *proto.MpMessage, resp *proto.Response) error {
	s := service.MpMessageSvc{Ctx: ctx}
	_, err := s.DeleteByIdMpMessage(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *MpMessageHandler) DeleteByIds(ctx context.Context, req *proto.MpMessageBatchDeleteRequest, resp *proto.Response) error {
	s := service.MpMessageSvc{Ctx: ctx}
	_, err := s.DeleteByIdsMpMessage(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *MpMessageHandler) Update(ctx context.Context, req *proto.MpMessage, resp *proto.Response) error {
	s := service.MpMessageSvc{Ctx: ctx}
	_, err := s.UpdateMpMessage(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *MpMessageHandler) UpdateAll(ctx context.Context, req *proto.MpMessage, resp *proto.Response) error {
	s := service.MpMessageSvc{Ctx: ctx}
	_, err := s.UpdateAllMpMessage(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *MpMessageHandler) UpdateFields(ctx context.Context, req *proto.MpMessageUpdateFieldsRequest, resp *proto.Response) error {
	s := service.MpMessageSvc{Ctx: ctx}
	_, err := s.UpdateFieldsMpMessage(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *MpMessageHandler) Find(ctx context.Context, req *proto.MpMessageFilter, resp *proto.MpMessageResponse) error {
	s := service.MpMessageSvc{Ctx: ctx}
	data, err := s.FindMpMessage(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *MpMessageHandler) FindById(ctx context.Context, req *proto.MpMessageFilter, resp *proto.MpMessageResponse) error {
	s := service.MpMessageSvc{Ctx: ctx}
	data, err := s.FindByIdMpMessage(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *MpMessageHandler) Lists(ctx context.Context, req *proto.MpMessageListRequest, resp *proto.MpMessageResponse) error {
	s := service.MpMessageSvc{Ctx: ctx}
	data, total, err := s.GetListMpMessage(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *MpMessageHandler) SetResponse(resp *proto.MpMessageResponse, data *proto.MpMessage, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *MpMessageHandler) SetPageResponse(resp *proto.MpMessageResponse, list []*proto.MpMessage, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
