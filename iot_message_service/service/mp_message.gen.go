// Code generated by sgen.exe,2022-05-12 23:37:47. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_message_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_message/model"
	"cloud_platform/iot_model/db_message/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type MpMessageSvc struct {
	Ctx context.Context
}

// 创建MpMessage
func (s *MpMessageSvc) PushMessage(req *proto.SendMessageRequest) (dbObj *model.TMpMessage, err error) {
	q := orm.Use(iotmodel.GetDB())
	err = q.Transaction(func(tx *orm.Query) error {
		t := q.TMpMessage
		do := t.WithContext(context.Background())
		dbObj = convert.SetMpMessage(req)
		err = do.Create(dbObj)
		if err != nil {
			return err
		}
		//TODO UserIn是否需要添加记录呢？
		//q.TMpMessageUserIn.WithContext(context.Background()).Create()

		return nil
	})
	if err != nil {
		logger.Errorf("CreateMpMessage error : %s", err.Error())
		return nil, err
	}
	return
}

// 创建MpMessage
func (s *MpMessageSvc) CreateMpMessage(req *proto.MpMessage) (*proto.MpMessage, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TMpMessage
	do := t.WithContext(context.Background())
	dbObj := convert.MpMessage_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateMpMessage error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除MpMessage
func (s *MpMessageSvc) DeleteMpMessage(req *proto.MpMessage) (*proto.MpMessage, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessage
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.PushType != 0 { //整数
		do = do.Where(t.PushType.Eq(req.PushType))
	}
	if req.MessageType != 0 { //整数
		do = do.Where(t.MessageType.Eq(req.MessageType))
	}
	if req.PushTo != "" { //字符串
		do = do.Where(t.PushTo.Eq(req.PushTo))
	}
	if req.PushMode != 0 { //整数
		do = do.Where(t.PushMode.Eq(req.PushMode))
	}
	if req.PushStatus != 0 { //整数
		do = do.Where(t.PushStatus.Eq(req.PushStatus))
	}
	if req.AgentType != 0 { //整数
		do = do.Where(t.AgentType.Eq(req.AgentType))
	}
	if req.ExpireHour != 0 { //整数
		do = do.Where(t.ExpireHour.Eq(req.ExpireHour))
	}
	if req.ActionType != 0 { //整数
		do = do.Where(t.ActionType.Eq(req.ActionType))
	}
	if req.Content != "" { //字符串
		do = do.Where(t.Content.Eq(req.Content))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}

	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteMpMessage error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除MpMessage
func (s *MpMessageSvc) DeleteByIdMpMessage(req *proto.MpMessage) (*proto.MpMessage, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessage
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdMpMessage error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除MpMessage
func (s *MpMessageSvc) DeleteByIdsMpMessage(req *proto.MpMessageBatchDeleteRequest) (*proto.MpMessageBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TMpMessage
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsMpMessage error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新MpMessage
func (s *MpMessageSvc) UpdateMpMessage(req *proto.MpMessage) (*proto.MpMessage, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessage
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.PushType != 0 { //整数
		updateField = append(updateField, t.PushType)
	}
	if req.MessageType != 0 { //整数
		updateField = append(updateField, t.MessageType)
	}
	if req.PushTo != "" { //字符串
		updateField = append(updateField, t.PushTo)
	}
	if req.PushMode != 0 { //整数
		updateField = append(updateField, t.PushMode)
	}
	if req.PushStatus != 0 { //整数
		updateField = append(updateField, t.PushStatus)
	}
	if req.AgentType != 0 { //整数
		updateField = append(updateField, t.AgentType)
	}
	if req.ExpireHour != 0 { //整数
		updateField = append(updateField, t.ExpireHour)
	}
	if req.ActionType != 0 { //整数
		updateField = append(updateField, t.ActionType)
	}
	if req.Content != "" { //字符串
		updateField = append(updateField, t.Content)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}

	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateMpMessage error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.MpMessage_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateMpMessage error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段MpMessage
func (s *MpMessageSvc) UpdateAllMpMessage(req *proto.MpMessage) (*proto.MpMessage, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessage
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.PushType)
	updateField = append(updateField, t.MessageType)
	updateField = append(updateField, t.PushTo)
	updateField = append(updateField, t.PushMode)
	updateField = append(updateField, t.PushStatus)
	updateField = append(updateField, t.AgentType)
	updateField = append(updateField, t.PushTime)
	updateField = append(updateField, t.ExpireHour)
	updateField = append(updateField, t.ActionType)
	updateField = append(updateField, t.Content)
	updateField = append(updateField, t.CreatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllMpMessage error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.MpMessage_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllMpMessage error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *MpMessageSvc) UpdateFieldsMpMessage(req *proto.MpMessageUpdateFieldsRequest) (*proto.MpMessage, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessage
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsMpMessage error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsMpMessage error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.MpMessage_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsMpMessage error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找MpMessage
func (s *MpMessageSvc) FindMpMessage(req *proto.MpMessageFilter) (*proto.MpMessage, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessage
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.PushType != 0 { //整数
		do = do.Where(t.PushType.Eq(req.PushType))
	}
	if req.MessageType != 0 { //整数
		do = do.Where(t.MessageType.Eq(req.MessageType))
	}
	if req.PushTo != "" { //字符串
		do = do.Where(t.PushTo.Eq(req.PushTo))
	}
	if req.PushMode != 0 { //整数
		do = do.Where(t.PushMode.Eq(req.PushMode))
	}
	if req.PushStatus != 0 { //整数
		do = do.Where(t.PushStatus.Eq(req.PushStatus))
	}
	if req.AgentType != 0 { //整数
		do = do.Where(t.AgentType.Eq(req.AgentType))
	}
	if req.ExpireHour != 0 { //整数
		do = do.Where(t.ExpireHour.Eq(req.ExpireHour))
	}
	if req.ActionType != 0 { //整数
		do = do.Where(t.ActionType.Eq(req.ActionType))
	}
	if req.Content != "" { //字符串
		do = do.Where(t.Content.Eq(req.Content))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindMpMessage error : %s", err.Error())
		return nil, err
	}
	res := convert.MpMessage_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找MpMessage
func (s *MpMessageSvc) FindByIdMpMessage(req *proto.MpMessageFilter) (*proto.MpMessage, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessage
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdMpMessage error : %s", err.Error())
		return nil, err
	}
	res := convert.MpMessage_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找MpMessage,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *MpMessageSvc) GetListMpMessage(req *proto.MpMessageListRequest) ([]*proto.MpMessage, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TMpMessage
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.PushType != 0 { //整数
			do = do.Where(t.PushType.Eq(query.PushType))
		}
		if query.MessageType != 0 { //整数
			do = do.Where(t.MessageType.Eq(query.MessageType))
		}
		if query.PushTo != "" { //字符串
			do = do.Where(t.PushTo.Like("%" + query.PushTo + "%"))
		}
		if query.PushMode != 0 { //整数
			do = do.Where(t.PushMode.Eq(query.PushMode))
		}
		if query.PushStatus != 0 { //整数
			do = do.Where(t.PushStatus.Eq(query.PushStatus))
		}
		if query.AgentType != 0 { //整数
			do = do.Where(t.AgentType.Eq(query.AgentType))
		}
		if query.ExpireHour != 0 { //整数
			do = do.Where(t.ExpireHour.Eq(query.ExpireHour))
		}
		if query.ActionType != 0 { //整数
			do = do.Where(t.ActionType.Eq(query.ActionType))
		}
		if query.Content != "" { //字符串
			do = do.Where(t.Content.Like("%" + query.Content + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TMpMessage
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListMpMessage error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.MpMessage, len(list))
	for i, v := range list {
		result[i] = convert.MpMessage_db2pb(v)
	}
	return result, total, nil
}
