// Code generated by sgen.exe,2022-05-31 10:02:23. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"
	"fmt"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_message_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_message/model"
	"cloud_platform/iot_model/db_message/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type MpMessageTemplateSvc struct {
	Ctx context.Context
}

// 创建MpMessageTemplate
func (s *MpMessageTemplateSvc) CreateMpMessageTemplate(req *proto.MpMessageTemplate) (*proto.MpMessageTemplate, error) {
	if isExists, err := s.existsByUnion(req.TplCode, 0); isExists {
		if err != nil {
			return nil, err
		}
		return nil, errors.New("模板已存在")
	}

	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TMpMessageTemplate
	do := t.WithContext(context.Background())
	dbObj := convert.MpMessageTemplate_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateMpMessageTemplate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除MpMessageTemplate
func (s *MpMessageTemplateSvc) DeleteMpMessageTemplate(req *proto.MpMessageTemplate) (*proto.MpMessageTemplate, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageTemplate
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TplCode != "" { //字符串
		do = do.Where(t.TplCode.Eq(req.TplCode))
	}
	if req.TplName != "" { //字符串
		do = do.Where(t.TplName.Eq(req.TplName))
	}
	if req.TplContent != "" { //字符串
		do = do.Where(t.TplContent.Eq(req.TplContent))
	}
	if req.TplParams != "" { //字符串
		do = do.Where(t.TplParams.Eq(req.TplParams))
	}
	if req.PushType != 0 { //整数
		do = do.Where(t.PushType.Eq(req.PushType))
	}
	if req.MessageType != 0 { //整数
		do = do.Where(t.MessageType.Eq(req.MessageType))
	}
	if req.AgentType != 0 { //整数
		do = do.Where(t.AgentType.Eq(req.AgentType))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.ExpireHour != 0 { //整数
		do = do.Where(t.ExpireHour.Eq(req.ExpireHour))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteMpMessageTemplate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除MpMessageTemplate
func (s *MpMessageTemplateSvc) DeleteByIdMpMessageTemplate(req *proto.MpMessageTemplate) (*proto.MpMessageTemplate, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageTemplate
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdMpMessageTemplate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除MpMessageTemplate
func (s *MpMessageTemplateSvc) DeleteByIdsMpMessageTemplate(req *proto.MpMessageTemplateBatchDeleteRequest) (*proto.MpMessageTemplateBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TMpMessageTemplate
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsMpMessageTemplate error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新MpMessageTemplate
func (s *MpMessageTemplateSvc) UpdateMpMessageTemplate(req *proto.MpMessageTemplate) (*proto.MpMessageTemplate, error) {
	if isExists, err := s.existsByUnion(req.TplCode, req.Id); isExists {
		if err != nil {
			return nil, err
		}
		return nil, errors.New("模板已存在")
	}

	t := orm.Use(iotmodel.GetDB()).TMpMessageTemplate
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.TplCode != "" { //字符串
		updateField = append(updateField, t.TplCode)
	}
	if req.TplName != "" { //字符串
		updateField = append(updateField, t.TplName)
	}
	if req.TplContent != "" { //字符串
		updateField = append(updateField, t.TplContent)
	}
	if req.TplParams != "" { //字符串
		updateField = append(updateField, t.TplParams)
	}
	if req.PushType != 0 { //整数
		updateField = append(updateField, t.PushType)
	}
	if req.MessageType != 0 { //整数
		updateField = append(updateField, t.MessageType)
	}
	if req.AgentType != 0 { //整数
		updateField = append(updateField, t.AgentType)
	}
	if req.Lang != "" { //字符串
		updateField = append(updateField, t.Lang)
	}
	if req.ExpireHour != 0 { //整数
		updateField = append(updateField, t.ExpireHour)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateMpMessageTemplate error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.MpMessageTemplate_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateMpMessageTemplate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段MpMessageTemplate
func (s *MpMessageTemplateSvc) UpdateAllMpMessageTemplate(req *proto.MpMessageTemplate) (*proto.MpMessageTemplate, error) {
	if isExists, err := s.existsByUnion(req.TplCode, req.Id); isExists {
		if err != nil {
			return nil, err
		}
		return nil, errors.New("模板已存在")
	}
	t := orm.Use(iotmodel.GetDB()).TMpMessageTemplate
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.TplCode)
	updateField = append(updateField, t.TplName)
	updateField = append(updateField, t.TplContent)
	updateField = append(updateField, t.TplParams)
	updateField = append(updateField, t.PushType)
	updateField = append(updateField, t.MessageType)
	updateField = append(updateField, t.AgentType)
	updateField = append(updateField, t.Lang)
	updateField = append(updateField, t.ExpireHour)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllMpMessageTemplate error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.MpMessageTemplate_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllMpMessageTemplate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *MpMessageTemplateSvc) UpdateFieldsMpMessageTemplate(req *proto.MpMessageTemplateUpdateFieldsRequest) (*proto.MpMessageTemplate, error) {

	if req.Data.TplCode != "" {
		if isExists, err := s.existsByUnion(req.Data.TplCode, req.Data.Id); isExists {
			if err != nil {
				return nil, err
			}
			return nil, errors.New("模板已存在")
		}
	}

	t := orm.Use(iotmodel.GetDB()).TMpMessageTemplate
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsMpMessageTemplate error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsMpMessageTemplate error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.MpMessageTemplate_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsMpMessageTemplate error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找MpMessageTemplate
func (s *MpMessageTemplateSvc) FindMpMessageTemplate(req *proto.MpMessageTemplateFilter) (*proto.MpMessageTemplate, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageTemplate
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TplCode != "" { //字符串
		do = do.Where(t.TplCode.Eq(req.TplCode))
	}
	if req.TplName != "" { //字符串
		do = do.Where(t.TplName.Eq(req.TplName))
	}
	if req.TplContent != "" { //字符串
		do = do.Where(t.TplContent.Eq(req.TplContent))
	}
	if req.TplParams != "" { //字符串
		do = do.Where(t.TplParams.Eq(req.TplParams))
	}
	if req.PushType != 0 { //整数
		do = do.Where(t.PushType.Eq(req.PushType))
	}
	if req.MessageType != 0 { //整数
		do = do.Where(t.MessageType.Eq(req.MessageType))
	}
	if req.AgentType != 0 { //整数
		do = do.Where(t.AgentType.Eq(req.AgentType))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.ExpireHour != 0 { //整数
		do = do.Where(t.ExpireHour.Eq(req.ExpireHour))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindMpMessageTemplate error : %s", err.Error())
		return nil, err
	}
	res := convert.MpMessageTemplate_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找MpMessageTemplate
func (s *MpMessageTemplateSvc) FindByIdMpMessageTemplate(req *proto.MpMessageTemplateFilter) (*proto.MpMessageTemplate, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageTemplate
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdMpMessageTemplate error : %s", err.Error())
		return nil, err
	}
	res := convert.MpMessageTemplate_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找MpMessageTemplate,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *MpMessageTemplateSvc) GetListMpMessageTemplate(req *proto.MpMessageTemplateListRequest) ([]*proto.MpMessageTemplate, int64, error) {
	var err error
	t := orm.Use(iotmodel.GetDB()).TMpMessageTemplate
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.TplCode != "" { //字符串
			do = do.Where(t.TplCode.Like("%" + query.TplCode + "%"))
		}
		if query.TplName != "" { //字符串
			do = do.Where(t.TplName.Like("%" + query.TplName + "%"))
		}
		if query.TplContent != "" { //字符串
			do = do.Where(t.TplContent.Like("%" + query.TplContent + "%"))
		}
		if query.TplParams != "" { //字符串
			do = do.Where(t.TplParams.Like("%" + query.TplParams + "%"))
		}
		if query.PushType != 0 { //整数
			do = do.Where(t.PushType.Eq(query.PushType))
		}
		if query.MessageType != 0 { //整数
			do = do.Where(t.MessageType.Eq(query.MessageType))
		}
		if query.AgentType != 0 { //整数
			do = do.Where(t.AgentType.Eq(query.AgentType))
		}
		if query.ExpireHour != 0 { //整数
			do = do.Where(t.ExpireHour.Eq(query.ExpireHour))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.TplName)
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}
	var list []*model.TMpMessageTemplate
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListMpMessageTemplate error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.MpMessageTemplate, len(list))
	for i, v := range list {
		result[i] = convert.MpMessageTemplate_db2pb(v)
	}
	return result, total, nil
}

// GetMessageTemplateByCode 通过模板编码获取模板详细信息
func (s *MpMessageTemplateSvc) GetMessageTemplateByCode(code string) (*model.TMpMessageTemplate, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageTemplate
	dbObj, err := t.WithContext(context.Background()).Where(t.TplCode.Eq(code)).Find()
	if err != nil {
		logger.Errorf("FindMpMessageTemplate error : %s", err.Error())
		return nil, err
	}
	if len(dbObj) == 0 {
		return nil, errors.New(fmt.Sprintf("未配置【%s】模板记录", code))
	}
	return dbObj[0], err
}

// 新增和修改的时候判断是否重复
func (s *MpMessageTemplateSvc) existsByUnion(tplcode string, id int64) (bool, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageTemplate
	do := t.WithContext(context.Background())
	do = do.Where(t.TplCode.Eq(tplcode))

	//编辑的时候验证名称是否重复
	if id != 0 {
		do = do.Where(t.Id.Neq(id))
	}
	count, err := do.Count()
	if err != nil {
		return true, err
	}

	return count > 0, err
}

// GetMessageTemplateAll 获取所有的模板列表，TODO 需要做缓存
func (s *MpMessageTemplateSvc) GetMessageTemplateAll() (map[string]*model.TMpMessageTemplate, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageTemplate
	list, err := t.WithContext(context.Background()).Find()
	if err != nil {
		logger.Errorf("GetMessageTemplateAll error : %s", err.Error())
		return nil, err
	}
	resMap := map[string]*model.TMpMessageTemplate{}
	for _, r := range list {
		resMap[r.TplCode] = r
	}
	return resMap, err
}
