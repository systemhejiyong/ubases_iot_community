// Code generated by sgen.exe,2022-05-22 07:39:34. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"bytes"
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_common/iotutil"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"text/template"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_message_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_message/model"
	"cloud_platform/iot_model/db_message/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type MpMessageRedDotSvc struct {
	Ctx context.Context
}

// 创建MpMessageRedDot
func (s *MpMessageRedDotSvc) CreateMpMessageRedDot(req *proto.MpMessageRedDot) (*proto.MpMessageRedDot, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TMpMessageRedDot
	do := t.WithContext(context.Background())
	dbObj := convert.MpMessageRedDot_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateMpMessageRedDot error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除MpMessageRedDot
func (s *MpMessageRedDotSvc) DeleteMpMessageRedDot(req *proto.MpMessageRedDot) (*proto.MpMessageRedDot, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageRedDot
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.HomeMsg != 0 { //整数
		do = do.Where(t.HomeMsg.Eq(req.HomeMsg))
	}
	if req.SystemMsg != 0 { //整数
		do = do.Where(t.SystemMsg.Eq(req.SystemMsg))
	}
	if req.DeviceMsg != 0 { //整数
		do = do.Where(t.DeviceMsg.Eq(req.DeviceMsg))
	}
	if req.PublicMsg != 0 { //整数
		do = do.Where(t.PublicMsg.Eq(req.PublicMsg))
	}
	if req.FeedbackMsg != 0 { //整数
		do = do.Where(t.FeedbackMsg.Eq(req.FeedbackMsg))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteMpMessageRedDot error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除MpMessageRedDot
func (s *MpMessageRedDotSvc) DeleteByIdMpMessageRedDot(req *proto.MpMessageRedDot) (*proto.MpMessageRedDot, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageRedDot
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdMpMessageRedDot error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除MpMessageRedDot
func (s *MpMessageRedDotSvc) DeleteByIdsMpMessageRedDot(req *proto.MpMessageRedDotBatchDeleteRequest) (*proto.MpMessageRedDotBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TMpMessageRedDot
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsMpMessageRedDot error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新MpMessageRedDot
func (s *MpMessageRedDotSvc) UpdateMpMessageRedDot(req *proto.MpMessageRedDot) (*proto.MpMessageRedDot, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageRedDot
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.UserId != 0 { //整数
		updateField = append(updateField, t.UserId)
	}
	if req.HomeMsg != 0 { //整数
		updateField = append(updateField, t.HomeMsg)
	}
	if req.SystemMsg != 0 { //整数
		updateField = append(updateField, t.SystemMsg)
	}
	if req.DeviceMsg != 0 { //整数
		updateField = append(updateField, t.DeviceMsg)
	}
	if req.PublicMsg != 0 { //整数
		updateField = append(updateField, t.PublicMsg)
	}
	if req.FeedbackMsg != 0 { //整数
		updateField = append(updateField, t.FeedbackMsg)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateMpMessageRedDot error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.MpMessageRedDot_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateMpMessageRedDot error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段MpMessageRedDot
func (s *MpMessageRedDotSvc) UpdateAllMpMessageRedDot(req *proto.MpMessageRedDot) (*proto.MpMessageRedDot, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageRedDot
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.UserId)
	updateField = append(updateField, t.HomeMsg)
	updateField = append(updateField, t.SystemMsg)
	updateField = append(updateField, t.DeviceMsg)
	updateField = append(updateField, t.PublicMsg)
	updateField = append(updateField, t.FeedbackMsg)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllMpMessageRedDot error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.MpMessageRedDot_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllMpMessageRedDot error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *MpMessageRedDotSvc) UpdateFieldsMpMessageRedDot(req *proto.MpMessageRedDotUpdateFieldsRequest) (*proto.MpMessageRedDot, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageRedDot
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsMpMessageRedDot error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsMpMessageRedDot error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.MpMessageRedDot_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsMpMessageRedDot error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找MpMessageRedDot
func (s *MpMessageRedDotSvc) FindMpMessageRedDot(req *proto.MpMessageRedDotFilter) (*proto.MpMessageRedDot, error) {
	q := orm.Use(iotmodel.GetDB())
	t := q.TMpMessageRedDot
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.HomeMsg != 0 { //整数
		do = do.Where(t.HomeMsg.Eq(req.HomeMsg))
	}
	if req.SystemMsg != 0 { //整数
		do = do.Where(t.SystemMsg.Eq(req.SystemMsg))
	}
	if req.DeviceMsg != 0 { //整数
		do = do.Where(t.DeviceMsg.Eq(req.DeviceMsg))
	}
	if req.PublicMsg != 0 { //整数
		do = do.Where(t.PublicMsg.Eq(req.PublicMsg))
	}
	if req.FeedbackMsg != 0 { //整数
		do = do.Where(t.FeedbackMsg.Eq(req.FeedbackMsg))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		if err.Error() == "record not found" {
			return &proto.MpMessageRedDot{
				HomeMsg:     0,
				DeviceMsg:   0,
				SystemMsg:   0,
				FeedbackMsg: 0,
				DeviceList:  nil,
			}, nil
		}
		logger.Errorf("FindMpMessageRedDot error : %s", err.Error())
		return nil, err
	}

	res := convert.MpMessageRedDot_db2pb(dbObj)

	//TODO 查询用户的设备设备消息，这里的设备消息类型默认写为3，待修改为全局参数
	userInSvc := MpMessageUserInSvc{Ctx: s.Ctx}
	msgs, _, err := userInSvc.GetGroupListFristData(req.UserId, 3)
	if err != nil {
		return nil, err
	}
	if msgs != nil {
		//处理消息模板翻译
		tempSvc := MpMessageTemplateSvc{}
		tempMap, _ := tempSvc.GetMessageTemplateAll()
		lang, _ := getLang(s.Ctx)

		for _, msg := range msgs {
			pushContent := msg.PushContent
			if v, ok := tempMap[msg.TplCode]; ok {
				//内容翻译
				langKey := fmt.Sprintf("%s_%v_tplContent", lang, v.TplCode)
				langMap, _ := iotredis.GetClient().HMGet(context.Background(),
					iotconst.HKEY_LANGUAGE_DATA_PREFIX+iotconst.LANG_MESSAGE_TEMPLATE, langKey).Result()
				if len(langMap) > 0 && iotutil.ToString(langMap[0]) != "" {
					v.TplContent = iotutil.ToString(langMap[0])
					params := make(map[string]string)
					if v.TplParams != "" {
						json.Unmarshal([]byte(v.TplParams), &params)
					}
					pushContent, _ = s.paramIntoContent(v.TplContent, params)
				}
			}
			res.DeviceList = append(res.DeviceList, &proto.MpMessageRedDotDevice{
				Did:       msg.Did,
				IsNew:     msg.ReadFlag == 0,
				Content:   pushContent,
				Title:     msg.PushTitle,
				TplCode:   msg.TplCode,
				Params:    msg.Params,
				CreatedAt: msg.CreatedAt.AsTime().Unix(),
			})
		}
	}
	return res, err
}

func (s *MpMessageRedDotSvc) paramIntoContent(templateContent string, params interface{}) (string, error) {
	tmp, err := template.New("TemplateContent").Parse(templateContent)
	if err != nil {
		return templateContent, err
	}
	buf := new(bytes.Buffer)
	if err = tmp.Execute(buf, params); err != nil {
		return templateContent, err
	}
	return buf.String(), nil
}

// 根据数据库表主键查找MpMessageRedDot
func (s *MpMessageRedDotSvc) FindByIdMpMessageRedDot(req *proto.MpMessageRedDotFilter) (*proto.MpMessageRedDot, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageRedDot
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdMpMessageRedDot error : %s", err.Error())
		return nil, err
	}
	res := convert.MpMessageRedDot_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找MpMessageRedDot,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *MpMessageRedDotSvc) GetListMpMessageRedDot(req *proto.MpMessageRedDotListRequest) ([]*proto.MpMessageRedDot, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TMpMessageRedDot
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.HomeMsg != 0 { //整数
			do = do.Where(t.HomeMsg.Eq(query.HomeMsg))
		}
		if query.SystemMsg != 0 { //整数
			do = do.Where(t.SystemMsg.Eq(query.SystemMsg))
		}
		if query.DeviceMsg != 0 { //整数
			do = do.Where(t.DeviceMsg.Eq(query.DeviceMsg))
		}
		if query.PublicMsg != 0 { //整数
			do = do.Where(t.PublicMsg.Eq(query.PublicMsg))
		}
		if query.FeedbackMsg != 0 { //整数
			do = do.Where(t.FeedbackMsg.Eq(query.FeedbackMsg))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TMpMessageRedDot
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListMpMessageRedDot error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.MpMessageRedDot, len(list))
	for i, v := range list {
		result[i] = convert.MpMessageRedDot_db2pb(v)
	}
	return result, total, nil
}
