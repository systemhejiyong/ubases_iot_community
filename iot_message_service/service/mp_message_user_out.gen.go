// Code generated by sgen.exe,2022-05-12 23:37:48. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_message_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_message/model"
	"cloud_platform/iot_model/db_message/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type MpMessageUserOutSvc struct {
	Ctx context.Context
}

// 创建MpMessageUserOut
func (s *MpMessageUserOutSvc) CreateMpMessageUserOut(req *proto.MpMessageUserOut) (*proto.MpMessageUserOut, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserOut
	do := t.WithContext(context.Background())
	dbObj := convert.MpMessageUserOut_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateMpMessageUserOut error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除MpMessageUserOut
func (s *MpMessageUserOutSvc) DeleteMpMessageUserOut(req *proto.MpMessageUserOut) (*proto.MpMessageUserOut, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserOut
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.MessageType != 0 { //整数
		do = do.Where(t.MessageType.Eq(req.MessageType))
	}
	if req.ActionType != 0 { //整数
		do = do.Where(t.ActionType.Eq(req.ActionType))
	}
	if req.PushMode != 0 { //整数
		do = do.Where(t.PushMode.Eq(req.PushMode))
	}
	if req.TplCode != "" { //字符串
		do = do.Where(t.TplCode.Eq(req.TplCode))
	}
	if req.MessageId != 0 { //整数
		do = do.Where(t.MessageId.Eq(req.MessageId))
	}
	if req.Did != "" { //字符串
		do = do.Where(t.Did.Eq(req.Did))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.LinkType != 0 { //整数
		do = do.Where(t.LinkType.Eq(req.LinkType))
	}
	if req.LinkFunctionCode != "" { //字符串
		do = do.Where(t.LinkFunctionCode.Eq(req.LinkFunctionCode))
	}
	if req.LinkUrl != "" { //字符串
		do = do.Where(t.LinkUrl.Eq(req.LinkUrl))
	}
	if req.Dynamic != "" { //字符串
		do = do.Where(t.Dynamic.Eq(req.Dynamic))
	}
	if req.PushTitle != "" { //字符串
		do = do.Where(t.PushTitle.Eq(req.PushTitle))
	}
	if req.PushContent != "" { //字符串
		do = do.Where(t.PushContent.Eq(req.PushContent))
	}
	if req.ExternalId != "" { //字符串
		do = do.Where(t.ExternalId.Eq(req.ExternalId))
	}
	if req.ExternalStatus != 0 { //整数
		do = do.Where(t.ExternalStatus.Eq(req.ExternalStatus))
	}
	if req.ExternalErrorMessage != "" { //字符串
		do = do.Where(t.ExternalErrorMessage.Eq(req.ExternalErrorMessage))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteMpMessageUserOut error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除MpMessageUserOut
func (s *MpMessageUserOutSvc) DeleteByIdMpMessageUserOut(req *proto.MpMessageUserOut) (*proto.MpMessageUserOut, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserOut
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdMpMessageUserOut error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除MpMessageUserOut
func (s *MpMessageUserOutSvc) DeleteByIdsMpMessageUserOut(req *proto.MpMessageUserOutBatchDeleteRequest) (*proto.MpMessageUserOutBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TMpMessageUserOut
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsMpMessageUserOut error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新MpMessageUserOut
func (s *MpMessageUserOutSvc) UpdateMpMessageUserOut(req *proto.MpMessageUserOut) (*proto.MpMessageUserOut, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserOut
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Lang != "" { //字符串
		updateField = append(updateField, t.Lang)
	}
	if req.MessageType != 0 { //整数
		updateField = append(updateField, t.MessageType)
	}
	if req.ActionType != 0 { //整数
		updateField = append(updateField, t.ActionType)
	}
	if req.PushMode != 0 { //整数
		updateField = append(updateField, t.PushMode)
	}
	if req.TplCode != "" { //字符串
		updateField = append(updateField, t.TplCode)
	}
	if req.MessageId != 0 { //整数
		updateField = append(updateField, t.MessageId)
	}
	if req.Did != "" { //字符串
		updateField = append(updateField, t.Did)
	}
	if req.UserId != 0 { //整数
		updateField = append(updateField, t.UserId)
	}
	if req.LinkType != 0 { //整数
		updateField = append(updateField, t.LinkType)
	}
	if req.LinkFunctionCode != "" { //字符串
		updateField = append(updateField, t.LinkFunctionCode)
	}
	if req.LinkUrl != "" { //字符串
		updateField = append(updateField, t.LinkUrl)
	}
	if req.Dynamic != "" { //字符串
		updateField = append(updateField, t.Dynamic)
	}
	if req.PushTitle != "" { //字符串
		updateField = append(updateField, t.PushTitle)
	}
	if req.PushContent != "" { //字符串
		updateField = append(updateField, t.PushContent)
	}
	if req.ExternalId != "" { //字符串
		updateField = append(updateField, t.ExternalId)
	}
	if req.ExternalStatus != 0 { //整数
		updateField = append(updateField, t.ExternalStatus)
	}
	if req.ExternalErrorMessage != "" { //字符串
		updateField = append(updateField, t.ExternalErrorMessage)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateMpMessageUserOut error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.MpMessageUserOut_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateMpMessageUserOut error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段MpMessageUserOut
func (s *MpMessageUserOutSvc) UpdateAllMpMessageUserOut(req *proto.MpMessageUserOut) (*proto.MpMessageUserOut, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserOut
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Lang)
	updateField = append(updateField, t.MessageType)
	updateField = append(updateField, t.ActionType)
	updateField = append(updateField, t.PushMode)
	updateField = append(updateField, t.TplCode)
	updateField = append(updateField, t.MessageId)
	updateField = append(updateField, t.Did)
	updateField = append(updateField, t.UserId)
	updateField = append(updateField, t.LinkType)
	updateField = append(updateField, t.LinkFunctionCode)
	updateField = append(updateField, t.LinkUrl)
	updateField = append(updateField, t.Dynamic)
	updateField = append(updateField, t.PushTitle)
	updateField = append(updateField, t.PushContent)
	updateField = append(updateField, t.ExternalId)
	updateField = append(updateField, t.ExternalStatus)
	updateField = append(updateField, t.ExternalErrorMessage)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllMpMessageUserOut error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.MpMessageUserOut_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllMpMessageUserOut error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *MpMessageUserOutSvc) UpdateFieldsMpMessageUserOut(req *proto.MpMessageUserOutUpdateFieldsRequest) (*proto.MpMessageUserOut, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserOut
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsMpMessageUserOut error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsMpMessageUserOut error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.MpMessageUserOut_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsMpMessageUserOut error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找MpMessageUserOut
func (s *MpMessageUserOutSvc) FindMpMessageUserOut(req *proto.MpMessageUserOutFilter) (*proto.MpMessageUserOut, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserOut
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.MessageType != 0 { //整数
		do = do.Where(t.MessageType.Eq(req.MessageType))
	}
	if req.ActionType != 0 { //整数
		do = do.Where(t.ActionType.Eq(req.ActionType))
	}
	if req.PushMode != 0 { //整数
		do = do.Where(t.PushMode.Eq(req.PushMode))
	}
	if req.TplCode != "" { //字符串
		do = do.Where(t.TplCode.Eq(req.TplCode))
	}
	if req.MessageId != 0 { //整数
		do = do.Where(t.MessageId.Eq(req.MessageId))
	}
	if req.Did != "" { //字符串
		do = do.Where(t.Did.Eq(req.Did))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.LinkType != 0 { //整数
		do = do.Where(t.LinkType.Eq(req.LinkType))
	}
	if req.LinkFunctionCode != "" { //字符串
		do = do.Where(t.LinkFunctionCode.Eq(req.LinkFunctionCode))
	}
	if req.LinkUrl != "" { //字符串
		do = do.Where(t.LinkUrl.Eq(req.LinkUrl))
	}
	if req.Dynamic != "" { //字符串
		do = do.Where(t.Dynamic.Eq(req.Dynamic))
	}
	if req.PushTitle != "" { //字符串
		do = do.Where(t.PushTitle.Eq(req.PushTitle))
	}
	if req.PushContent != "" { //字符串
		do = do.Where(t.PushContent.Eq(req.PushContent))
	}
	if req.ExternalId != "" { //字符串
		do = do.Where(t.ExternalId.Eq(req.ExternalId))
	}
	if req.ExternalStatus != 0 { //整数
		do = do.Where(t.ExternalStatus.Eq(req.ExternalStatus))
	}
	if req.ExternalErrorMessage != "" { //字符串
		do = do.Where(t.ExternalErrorMessage.Eq(req.ExternalErrorMessage))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindMpMessageUserOut error : %s", err.Error())
		return nil, err
	}
	res := convert.MpMessageUserOut_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找MpMessageUserOut
func (s *MpMessageUserOutSvc) FindByIdMpMessageUserOut(req *proto.MpMessageUserOutFilter) (*proto.MpMessageUserOut, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserOut
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdMpMessageUserOut error : %s", err.Error())
		return nil, err
	}
	res := convert.MpMessageUserOut_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找MpMessageUserOut,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *MpMessageUserOutSvc) GetListMpMessageUserOut(req *proto.MpMessageUserOutListRequest) ([]*proto.MpMessageUserOut, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserOut
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Lang != "" { //字符串
			do = do.Where(t.Lang.Like("%" + query.Lang + "%"))
		}
		if query.MessageType != 0 { //整数
			do = do.Where(t.MessageType.Eq(query.MessageType))
		}
		if query.ActionType != 0 { //整数
			do = do.Where(t.ActionType.Eq(query.ActionType))
		}
		if query.PushMode != 0 { //整数
			do = do.Where(t.PushMode.Eq(query.PushMode))
		}
		if query.TplCode != "" { //字符串
			do = do.Where(t.TplCode.Like("%" + query.TplCode + "%"))
		}
		if query.MessageId != 0 { //整数
			do = do.Where(t.MessageId.Eq(query.MessageId))
		}
		if query.Did != "" { //字符串
			do = do.Where(t.Did.Like("%" + query.Did + "%"))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.LinkType != 0 { //整数
			do = do.Where(t.LinkType.Eq(query.LinkType))
		}
		if query.LinkFunctionCode != "" { //字符串
			do = do.Where(t.LinkFunctionCode.Like("%" + query.LinkFunctionCode + "%"))
		}
		if query.LinkUrl != "" { //字符串
			do = do.Where(t.LinkUrl.Like("%" + query.LinkUrl + "%"))
		}
		if query.Dynamic != "" { //字符串
			do = do.Where(t.Dynamic.Like("%" + query.Dynamic + "%"))
		}
		if query.PushTitle != "" { //字符串
			do = do.Where(t.PushTitle.Like("%" + query.PushTitle + "%"))
		}
		if query.PushContent != "" { //字符串
			do = do.Where(t.PushContent.Like("%" + query.PushContent + "%"))
		}
		if query.ExternalId != "" { //字符串
			do = do.Where(t.ExternalId.Like("%" + query.ExternalId + "%"))
		}
		if query.ExternalStatus != 0 { //整数
			do = do.Where(t.ExternalStatus.Eq(query.ExternalStatus))
		}
		if query.ExternalErrorMessage != "" { //字符串
			do = do.Where(t.ExternalErrorMessage.Like("%" + query.ExternalErrorMessage + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TMpMessageUserOut
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListMpMessageUserOut error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.MpMessageUserOut, len(list))
	for i, v := range list {
		result[i] = convert.MpMessageUserOut_db2pb(v)
	}
	return result, total, nil
}

// 根据分页条件查找MpMessageUserOut,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *MpMessageUserOutSvc) GetGroupListMpMessageUserOut(req *proto.MpMessageUserOutListRequest) ([]*proto.MpMessageUserOutGroupItem, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserOut
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Lang != "" { //字符串
			do = do.Where(t.Lang.Like("%" + query.Lang + "%"))
		}
		if query.MessageType != 0 { //整数
			do = do.Where(t.MessageType.Eq(query.MessageType))
		}
		if query.ActionType != 0 { //整数
			do = do.Where(t.ActionType.Eq(query.ActionType))
		}
		if query.PushMode != 0 { //整数
			do = do.Where(t.PushMode.Eq(query.PushMode))
		}
		if query.TplCode != "" { //字符串
			do = do.Where(t.TplCode.Like("%" + query.TplCode + "%"))
		}
		if query.MessageId != 0 { //整数
			do = do.Where(t.MessageId.Eq(query.MessageId))
		}
		if query.Did != "" { //字符串
			do = do.Where(t.Did.Like("%" + query.Did + "%"))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.LinkType != 0 { //整数
			do = do.Where(t.LinkType.Eq(query.LinkType))
		}
		if query.LinkFunctionCode != "" { //字符串
			do = do.Where(t.LinkFunctionCode.Like("%" + query.LinkFunctionCode + "%"))
		}
		if query.LinkUrl != "" { //字符串
			do = do.Where(t.LinkUrl.Like("%" + query.LinkUrl + "%"))
		}
		if query.Dynamic != "" { //字符串
			do = do.Where(t.Dynamic.Like("%" + query.Dynamic + "%"))
		}
		if query.PushTitle != "" { //字符串
			do = do.Where(t.PushTitle.Like("%" + query.PushTitle + "%"))
		}
		if query.PushContent != "" { //字符串
			do = do.Where(t.PushContent.Like("%" + query.PushContent + "%"))
		}
		if query.ExternalId != "" { //字符串
			do = do.Where(t.ExternalId.Like("%" + query.ExternalId + "%"))
		}
		if query.ExternalStatus != 0 { //整数
			do = do.Where(t.ExternalStatus.Eq(query.ExternalStatus))
		}
		if query.ExternalErrorMessage != "" { //字符串
			do = do.Where(t.ExternalErrorMessage.Like("%" + query.ExternalErrorMessage + "%"))
		}
		if query.CreatedAt != nil { //查询时间范围
			do = do.Where(t.CreatedAt.Gt(query.CreatedAt.AsTime()))
		}
	}
	do = do.Order(t.CreatedAt.Desc())

	var list []*model.TMpMessageUserOut
	list, err = do.Find()

	if err != nil {
		logger.Errorf("GetGroupListMpMessageUserOut error : %s", err.Error())
		return nil, 0, err
	}
	result := make([]*proto.MpMessageUserOutGroupItem, len(list))
	dates := map[string][]*proto.MpMessageUserOut{}
	for _, v := range list {
		dateGroup := iotutil.DateFormat(v.CreatedAt)
		if _, ok := dates[dateGroup]; ok {
			dates[dateGroup] = append(dates[dateGroup], convert.MpMessageUserOut_db2pb(v))
		}
	}
	var total int64 = 0 //天数
	for s2, outs := range dates {
		total++
		result = append(result, &proto.MpMessageUserOutGroupItem{Date: s2, Data: outs})
	}
	return result, total, nil
}
