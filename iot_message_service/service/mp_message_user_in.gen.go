// Code generated by sgen.exe,2022-05-12 23:37:48. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotgincache/persist"
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_message_service/cached"
	"cloud_platform/iot_message_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_message/model"
	"cloud_platform/iot_model/db_message/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type MpMessageUserInSvc struct {
	Ctx context.Context
}

// 创建MpMessageUserIn
func (s *MpMessageUserInSvc) CreateMpMessageUserIn(req *proto.MpMessageUserIn) (*proto.MpMessageUserIn, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserIn
	do := t.WithContext(context.Background())
	dbObj := convert.MpMessageUserIn_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateMpMessageUserIn error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除MpMessageUserIn
func (s *MpMessageUserInSvc) DeleteMpMessageUserIn(req *proto.MpMessageUserIn) (*proto.MpMessageUserIn, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserIn
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.MessageType != 0 { //整数
		do = do.Where(t.MessageType.Eq(req.MessageType))
	}
	if req.ActionType != 0 { //整数
		do = do.Where(t.ActionType.Eq(req.ActionType))
	}
	if req.PushMode != 0 { //整数
		do = do.Where(t.PushMode.Eq(req.PushMode))
	}
	if req.TplCode != "" { //字符串
		do = do.Where(t.TplCode.Eq(req.TplCode))
	}
	if req.MessageId != 0 { //整数
		do = do.Where(t.MessageId.Eq(req.MessageId))
	}
	if req.Did != "" { //字符串
		do = do.Where(t.Did.Eq(req.Did))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.MsgTag != "" { //字符串
		do = do.Where(t.MsgTag.Eq(req.MsgTag))
	}
	if req.IconUrl != "" { //字符串
		do = do.Where(t.IconUrl.Eq(req.IconUrl))
	}
	if req.PushTitle != "" { //字符串
		do = do.Where(t.PushTitle.Eq(req.PushTitle))
	}
	if req.PushContent != "" { //字符串
		do = do.Where(t.PushContent.Eq(req.PushContent))
	}
	if req.ReadFlag != 0 { //整数
		do = do.Where(t.ReadFlag.Eq(req.ReadFlag))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteMpMessageUserIn error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除MpMessageUserIn
func (s *MpMessageUserInSvc) DeleteByIdMpMessageUserIn(req *proto.MpMessageUserIn) (*proto.MpMessageUserIn, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserIn
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdMpMessageUserIn error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除MpMessageUserIn
func (s *MpMessageUserInSvc) DeleteByIdsMpMessageUserIn(req *proto.MpMessageUserInBatchDeleteRequest) (*proto.MpMessageUserInBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TMpMessageUserIn
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsMpMessageUserIn error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新MpMessageUserIn
func (s *MpMessageUserInSvc) UpdateMpMessageUserIn(req *proto.MpMessageUserIn) (*proto.MpMessageUserIn, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserIn
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Lang != "" { //字符串
		updateField = append(updateField, t.Lang)
	}
	if req.MessageType != 0 { //整数
		updateField = append(updateField, t.MessageType)
	}
	if req.ActionType != 0 { //整数
		updateField = append(updateField, t.ActionType)
	}
	if req.PushMode != 0 { //整数
		updateField = append(updateField, t.PushMode)
	}
	if req.TplCode != "" { //字符串
		updateField = append(updateField, t.TplCode)
	}
	if req.MessageId != 0 { //整数
		updateField = append(updateField, t.MessageId)
	}
	if req.Did != "" { //字符串
		updateField = append(updateField, t.Did)
	}
	if req.UserId != 0 { //整数
		updateField = append(updateField, t.UserId)
	}
	if req.MsgTag != "" { //字符串
		updateField = append(updateField, t.MsgTag)
	}
	if req.IconUrl != "" { //字符串
		updateField = append(updateField, t.IconUrl)
	}
	if req.PushTitle != "" { //字符串
		updateField = append(updateField, t.PushTitle)
	}
	if req.PushContent != "" { //字符串
		updateField = append(updateField, t.PushContent)
	}
	if req.ReadFlag != 0 { //整数
		updateField = append(updateField, t.ReadFlag)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateMpMessageUserIn error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.MpMessageUserIn_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateMpMessageUserIn error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段MpMessageUserIn
func (s *MpMessageUserInSvc) UpdateAllMpMessageUserIn(req *proto.MpMessageUserIn) (*proto.MpMessageUserIn, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserIn
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Lang)
	updateField = append(updateField, t.MessageType)
	updateField = append(updateField, t.ActionType)
	updateField = append(updateField, t.PushMode)
	updateField = append(updateField, t.TplCode)
	updateField = append(updateField, t.MessageId)
	updateField = append(updateField, t.Did)
	updateField = append(updateField, t.UserId)
	updateField = append(updateField, t.MsgTag)
	updateField = append(updateField, t.IconUrl)
	updateField = append(updateField, t.PushTitle)
	updateField = append(updateField, t.PushContent)
	updateField = append(updateField, t.ReadFlag)
	updateField = append(updateField, t.CreatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllMpMessageUserIn error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.MpMessageUserIn_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllMpMessageUserIn error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *MpMessageUserInSvc) UpdateFieldsMpMessageUserIn(req *proto.MpMessageUserInUpdateFieldsRequest) (*proto.MpMessageUserIn, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserIn
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsMpMessageUserIn error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsMpMessageUserIn error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.MpMessageUserIn_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsMpMessageUserIn error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找MpMessageUserIn
func (s *MpMessageUserInSvc) FindMpMessageUserIn(req *proto.MpMessageUserInFilter) (*proto.MpMessageUserIn, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserIn
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.MessageType != 0 { //整数
		do = do.Where(t.MessageType.Eq(req.MessageType))
	}
	if req.ActionType != 0 { //整数
		do = do.Where(t.ActionType.Eq(req.ActionType))
	}
	if req.PushMode != 0 { //整数
		do = do.Where(t.PushMode.Eq(req.PushMode))
	}
	if req.TplCode != "" { //字符串
		do = do.Where(t.TplCode.Eq(req.TplCode))
	}
	if req.MessageId != 0 { //整数
		do = do.Where(t.MessageId.Eq(req.MessageId))
	}
	if req.Did != "" { //字符串
		do = do.Where(t.Did.Eq(req.Did))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.MsgTag != "" { //字符串
		do = do.Where(t.MsgTag.Eq(req.MsgTag))
	}
	if req.IconUrl != "" { //字符串
		do = do.Where(t.IconUrl.Eq(req.IconUrl))
	}
	if req.PushTitle != "" { //字符串
		do = do.Where(t.PushTitle.Eq(req.PushTitle))
	}
	if req.PushContent != "" { //字符串
		do = do.Where(t.PushContent.Eq(req.PushContent))
	}
	if req.ReadFlag != 0 { //整数
		do = do.Where(t.ReadFlag.Eq(req.ReadFlag))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindMpMessageUserIn error : %s", err.Error())
		return nil, err
	}
	res := convert.MpMessageUserIn_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找MpMessageUserIn
func (s *MpMessageUserInSvc) FindByIdMpMessageUserIn(req *proto.MpMessageUserInFilter) (*proto.MpMessageUserIn, error) {
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserIn
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdMpMessageUserIn error : %s", err.Error())
		return nil, err
	}
	res := convert.MpMessageUserIn_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找MpMessageUserIn,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *MpMessageUserInSvc) GetListMpMessageUserIn(req *proto.MpMessageUserInListRequest) ([]*proto.MpMessageUserIn, int64, error) {
	userId, _ := CheckUserId(s.Ctx)
	if userId == "" {
		return nil, 0, errors.New("用户编号不能为空")
	}
	// fixme 请检查条件和校验参数
	var err error
	q := orm.Use(iotmodel.GetDB())
	t := q.TMpMessageUserIn
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Lang != "" { //字符串
			do = do.Where(t.Lang.Like("%" + query.Lang + "%"))
		}
		if query.MessageType != 0 { //整数
			do = do.Where(t.MessageType.Eq(query.MessageType))
		}
		if query.ActionType != 0 { //整数
			do = do.Where(t.ActionType.Eq(query.ActionType))
		}
		if query.PushMode != 0 { //整数
			do = do.Where(t.PushMode.Eq(query.PushMode))
		}
		if query.TplCode != "" { //字符串
			do = do.Where(t.TplCode.Like("%" + query.TplCode + "%"))
		}
		if query.MessageId != 0 { //整数
			do = do.Where(t.MessageId.Eq(query.MessageId))
		}
		if query.Did != "" { //字符串
			do = do.Where(t.Did.Like("%" + query.Did + "%"))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.MsgTag != "" { //字符串
			do = do.Where(t.MsgTag.Like("%" + query.MsgTag + "%"))
		}
		if query.IconUrl != "" { //字符串
			do = do.Where(t.IconUrl.Like("%" + query.IconUrl + "%"))
		}
		if query.PushTitle != "" { //字符串
			do = do.Where(t.PushTitle.Like("%" + query.PushTitle + "%"))
		}
		if query.PushContent != "" { //字符串
			do = do.Where(t.PushContent.Like("%" + query.PushContent + "%"))
		}
		if query.ReadFlag != 0 { //整数
			do = do.Where(t.ReadFlag.Eq(query.ReadFlag))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TMpMessageUserIn
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListMpMessageUserIn error : %s", err.Error())
		return nil, 0, err
	}

	//设置红点状态
	defer func() {
		if req.Query != nil {
			var messageId int64
			if len(list) > 0 {
				messageId = list[0].Id
			}
			setRedDot(req.Query.UserId, req.Query.MessageType, messageId)
		}
	}()

	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.MpMessageUserIn, len(list))
	for i, v := range list {
		result[i] = convert.MpMessageUserIn_db2pb(v)
	}
	return result, total, nil
}

// 根据分页条件查找MpMessageUserIn,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *MpMessageUserInSvc) GetGroupListMpMessageUserIn(req *proto.MpMessageUserInListRequest) ([]*proto.MpMessageUserInGroupItem, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserIn
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Lang != "" { //字符串
			do = do.Where(t.Lang.Like("%" + query.Lang + "%"))
		}
		if query.MessageType != 0 { //整数
			do = do.Where(t.MessageType.Eq(query.MessageType))
		}
		if query.ActionType != 0 { //整数
			do = do.Where(t.ActionType.Eq(query.ActionType))
		}
		if query.PushMode != 0 { //整数
			do = do.Where(t.PushMode.Eq(query.PushMode))
		}
		if query.TplCode != "" { //字符串
			do = do.Where(t.TplCode.Like("%" + query.TplCode + "%"))
		}
		//if query.MessageId != 0 { //整数
		//	do = do.Where(t.MessageId.Eq(query.MessageId))
		//}
		if query.Did != "" { //字符串
			do = do.Where(t.Did.Like("%" + query.Did + "%"))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.MsgTag != "" { //字符串
			do = do.Where(t.MsgTag.Like("%" + query.MsgTag + "%"))
		}
		if query.IconUrl != "" { //字符串
			do = do.Where(t.IconUrl.Like("%" + query.IconUrl + "%"))
		}
		if query.PushTitle != "" { //字符串
			do = do.Where(t.PushTitle.Like("%" + query.PushTitle + "%"))
		}
		if query.PushContent != "" { //字符串
			do = do.Where(t.PushContent.Like("%" + query.PushContent + "%"))
		}
		if query.ReadFlag != 0 { //整数
			do = do.Where(t.ReadFlag.Eq(query.ReadFlag))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
	}
	do = do.Order(t.CreatedAt.Desc())

	var list []*model.TMpMessageUserIn
	list, err = do.Find()

	if err != nil {
		logger.Errorf("GetGroupListMpMessageUserIn error : %s", err.Error())
		return nil, 0, err
	}
	result := make([]*proto.MpMessageUserInGroupItem, 0)
	dates := map[string][]*proto.MpMessageUserIn{}

	for _, v := range list {
		dateGroup := iotutil.DateFormat(v.CreatedAt)
		if _, ok := dates[dateGroup]; ok {
			dates[dateGroup] = append(dates[dateGroup], convert.MpMessageUserIn_db2pb(v))
		} else {
			dates[dateGroup] = []*proto.MpMessageUserIn{convert.MpMessageUserIn_db2pb(v)}
		}
	}
	var total int64 = 0 //天数
	for s2, outs := range dates {
		total++
		result = append(result, &proto.MpMessageUserInGroupItem{Date: s2, Data: outs})
	}
	//红点数据清空，数据已阅清理
	if req.Query != nil {
		var messageId int64
		if len(list) > 0 {
			messageId = list[0].Id
		}
		setRedDot(req.Query.UserId, req.Query.MessageType, messageId)
		if len(list) > 0 {
			if req.Query.MessageType == 3 {
				do = t.WithContext(context.Background())
				do = do.Where(t.UserId.Eq(req.Query.UserId), t.MessageType.Eq(req.Query.MessageType))
				if req.Query.Did != "" {
					do = do.Where(t.Did.Eq(req.Query.Did))
				}
				_, err := do.UpdateColumn(t.ReadFlag, 1)
				if err != nil {
					logger.Errorf("LoginSuccess 取消注销状态异常 : %s", err.Error())
					return nil, 0, err
				}
			}
		}
	}
	return result, total, nil
}

// 根据分页条件查找MpMessageUserIn,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *MpMessageUserInSvc) GetGroupListFristData(userId int64, messageType int32) ([]*proto.MpMessageUserIn, int64, error) {
	var err error
	t := orm.Use(iotmodel.GetDB()).TMpMessageUserIn
	do := t.WithContext(context.Background()).Where(t.UserId.Eq(userId), t.MessageType.Eq(messageType))
	do = do.Order(t.CreatedAt.Desc())

	var list []*model.TMpMessageUserIn
	list, err = do.Find()

	if err != nil {
		logger.Errorf("GetGroupListMpMessageUserIn error : %s", err.Error())
		return nil, 0, err
	}
	result := make([]*proto.MpMessageUserIn, 0)
	dates := map[string]*proto.MpMessageUserIn{}
	for _, v := range list {
		dateGroup := v.Did
		if _, ok := dates[dateGroup]; ok {
			continue
		} else {
			dates[dateGroup] = convert.MpMessageUserIn_db2pb(v)
		}
	}
	var total int64 = 0 //天数
	for _, outs := range dates {
		total++
		result = append(result, outs)
	}
	return result, total, nil
}

func setRedDot(userId int64, messageType int32, messageId int64) {
	if userId == 0 || messageType == 0 {
		return
	}
	q := orm.Use(iotmodel.GetDB())
	redhot, _ := q.TMpMessageRedDot.WithContext(context.Background()).Where(q.TMpMessageRedDot.UserId.Eq(userId)).Find()
	if redhot == nil || len(redhot) == 0 {
		redhot = []*model.TMpMessageRedDot{
			&model.TMpMessageRedDot{
				Id:     iotutil.GetNextSeqInt64(),
				UserId: userId,
			}}
	}
	//消息类型
	switch messageType {
	case 1: //"home":
		redhot[0].HomeMsg = 0
		redhot[0].HomeMsgNum = 0
	case 2: //"notice":
		redhot[0].SystemMsg = 0
		redhot[0].SystemMsgId = messageId
		redhot[0].SystemMsgNum = 0
	case 3, 4: //"device":"alarm":
		redhot[0].DeviceMsg = 0
		redhot[0].DeviceMsgNum = 0
	}
	err := q.TMpMessageRedDot.WithContext(context.Background()).Save(redhot[0])
	if err != nil {
		logger.Errorf("set message redhot error : %s", err.Error())
	}
	// 清除缓存的用户红点信息，下次从数据库重新读取，再加入缓存
	if err := cached.RedisStore.Delete(persist.GetRedisKey(iotconst.RED_DOT_DATA, userId)); err != nil {
		logger.Errorf("cache red dot message to redis error : %s", err.Error())
		return
	}
}
