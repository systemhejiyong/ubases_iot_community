// Code generated by sgen,2024-06-11 17:59:56. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_message/model"
	"cloud_platform/iot_model/db_message/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_message_service/convert"
)

var MsNoticerecordSvc MsNoticeRecordSvc

type MsNoticeRecordSvc struct {
	Ctx context.Context
}

// SaveNoticeRecord
func (s *MsNoticeRecordSvc) SaveNoticeRecord(id int64, platform int32, title, content, lang, tenantId, appKey string, template *model.TMsNoticeTemplate, account ...string) error {
	_, err := s.CreateMsNoticeRecord(&proto.MsNoticeRecord{
		Id:              id,
		Lang:            lang,
		Platform:        platform,
		Account:         account[0],
		Method:          template.Method,
		SmsSupplier:     template.SmsSupplier,
		Type:            template.TplType,
		ThirdparyCode:   template.ThirdparyCode,
		NoticeTempateId: template.Id,
		Title:           title,
		Content:         content,
		AppKey:          appKey,
		TenantId:        tenantId,
		Status:          0,
	})
	return err
}

func (s *MsNoticeRecordSvc) SetStatus(id int64, status int32, msg string) error {
	defer iotutil.PanicHandler(id, status, msg)
	if id == 0 {
		return errors.New("id not found")
	}
	_, err := s.UpdateMsNoticeRecord(&proto.MsNoticeRecord{
		Id:              id,
		Status:          status,
		SendErrMsg: msg,
	})
	return err
}

//创建MsNoticeRecord
func (s *MsNoticeRecordSvc) CreateMsNoticeRecord(req *proto.MsNoticeRecord) (*proto.MsNoticeRecord, error) {
	defer iotutil.PanicHandler(req)
	if req.Id == 0 {
		return nil, errors.New("id not found")
	}
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TMsNoticeRecord
	do := t.WithContext(context.Background())
	dbObj := convert.MsNoticeRecord_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateMsNoticeRecord error : %s", err.Error())
		return nil,err
	}
	return req, err
}

//根据条件删除MsNoticeRecord
func (s *MsNoticeRecordSvc) DeleteMsNoticeRecord(req *proto.MsNoticeRecord) (*proto.MsNoticeRecord, error) {
    t := orm.Use(iotmodel.GetDB()).TMsNoticeRecord
    do := t.WithContext(context.Background())
    // fixme 请检查条件
    
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
    }
    if req.Lang != "" {//字符串
        do = do.Where(t.Lang.Eq(req.Lang))
    }
    if req.Platform != 0 {//整数
        do = do.Where(t.Platform.Eq(req.Platform))
    }
    if req.Account != "" {//字符串
        do = do.Where(t.Account.Eq(req.Account))
    }
    if req.Method != 0 {//整数
        do = do.Where(t.Method.Eq(req.Method))
    }
    if req.SmsSupplier != 0 {//整数
        do = do.Where(t.SmsSupplier.Eq(req.SmsSupplier))
    }
    if req.Type != 0 {//整数
        do = do.Where(t.Type.Eq(req.Type))
    }
    if req.ThirdparyCode != "" {//字符串
        do = do.Where(t.ThirdparyCode.Eq(req.ThirdparyCode))
    }
    if req.NoticeTempateId != 0 {//整数
        do = do.Where(t.NoticeTempateId.Eq(req.NoticeTempateId))
    }
    if req.Title != "" {//字符串
        do = do.Where(t.Title.Eq(req.Title))
    }
    if req.Content != "" {//字符串
        do = do.Where(t.Content.Eq(req.Content))
    }
    if req.AppKey != "" {//字符串
        do = do.Where(t.AppKey.Eq(req.AppKey))
    }
    if req.TenantId != "" {//字符串
        do = do.Where(t.TenantId.Eq(req.TenantId))
    }
    if req.Status != 0 {//整数
        do = do.Where(t.Status.Eq(req.Status))
    }
    if req.SendErrMsg != "" {//字符串
        do = do.Where(t.SendErrMsg.Eq(req.SendErrMsg))
    }
    if req.CreatedBy != 0 {//整数
        do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
    }
    _,err := do.Delete()
    if err != nil {
        logger.Errorf("DeleteMsNoticeRecord error : %s", err.Error())
		return nil,err
    }
    return req, err
}

//根据数据库表主键删除MsNoticeRecord
func (s *MsNoticeRecordSvc) DeleteByIdMsNoticeRecord(req *proto.MsNoticeRecord) (*proto.MsNoticeRecord, error) {
    t := orm.Use(iotmodel.GetDB()).TMsNoticeRecord
    do := t.WithContext(context.Background())
    // fixme 请检查条件
    
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
    }
   _,err := do.Delete()
    if err != nil {
        logger.Errorf("DeleteByIdMsNoticeRecord error : %s", err.Error())
		return nil,err
    }
    return req, err
}

//根据数据库表主键批量删除MsNoticeRecord
func (s *MsNoticeRecordSvc) DeleteByIdsMsNoticeRecord(req *proto.MsNoticeRecordBatchDeleteRequest) (*proto.MsNoticeRecordBatchDeleteRequest, error) {
    var err error
    for _,k := range req.Keys {
        t := orm.Use(iotmodel.GetDB()).TMsNoticeRecord
        do := t.WithContext(context.Background())
         
        do = do.Where(t.Id.Eq(k.Id))
                        
         _,err = do.Delete()
         if err != nil {
             logger.Errorf("DeleteByIdsMsNoticeRecord error : %s", err.Error())
             break
         }
    }
    return req, err
}

//根据主键更新MsNoticeRecord
func (s *MsNoticeRecordSvc) UpdateMsNoticeRecord(req *proto.MsNoticeRecord) (*proto.MsNoticeRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TMsNoticeRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField  []field.Expr
    
    if req.Lang != "" {//字符串
        updateField = append(updateField,t.Lang)
    }
    if req.Platform != 0 {//整数
        updateField = append(updateField,t.Platform)
    }
    if req.Account != "" {//字符串
        updateField = append(updateField,t.Account)
    }
    if req.Method != 0 {//整数
        updateField = append(updateField,t.Method)
    }
    if req.SmsSupplier != 0 {//整数
        updateField = append(updateField,t.SmsSupplier)
    }
    if req.Type != 0 {//整数
        updateField = append(updateField,t.Type)
    }
    if req.ThirdparyCode != "" {//字符串
        updateField = append(updateField,t.ThirdparyCode)
    }
    if req.NoticeTempateId != 0 {//整数
        updateField = append(updateField,t.NoticeTempateId)
    }
    if req.Title != "" {//字符串
        updateField = append(updateField,t.Title)
    }
    if req.Content != "" {//字符串
        updateField = append(updateField,t.Content)
    }
    if req.AppKey != "" {//字符串
        updateField = append(updateField,t.AppKey)
    }
    if req.TenantId != "" {//字符串
        updateField = append(updateField,t.TenantId)
    }
    if req.Status != 0 {//整数
        updateField = append(updateField,t.Status)
    }
    if req.SendErrMsg != "" {//字符串
        updateField = append(updateField,t.SendErrMsg)
    }
    if req.CreatedBy != 0 {//整数
        updateField = append(updateField,t.CreatedBy)
    }
    if len(updateField) > 0 {
        do = do.Select(updateField...)
    }
    //主键条件
    HasPrimaryKey := false
      
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
        HasPrimaryKey = true
    }                

    if !HasPrimaryKey {
        logger.Error("UpdateMsNoticeRecord error : Missing condition")
        return nil,errors.New("Missing condition")
    }

	dbObj := convert.MsNoticeRecord_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateMsNoticeRecord error : %s", err.Error())
		return nil,err
	}
	return req, err
}

////根据主键更新所有字段MsNoticeRecord
func (s *MsNoticeRecordSvc) UpdateAllMsNoticeRecord(req *proto.MsNoticeRecord) (*proto.MsNoticeRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TMsNoticeRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField  []field.Expr
      
        updateField = append(updateField,t.Lang) 
        updateField = append(updateField,t.Platform) 
        updateField = append(updateField,t.Account) 
        updateField = append(updateField,t.Method) 
        updateField = append(updateField,t.SmsSupplier) 
        updateField = append(updateField,t.Type) 
        updateField = append(updateField,t.ThirdparyCode) 
        updateField = append(updateField,t.NoticeTempateId) 
        updateField = append(updateField,t.Title) 
        updateField = append(updateField,t.Content) 
        updateField = append(updateField,t.AppKey) 
        updateField = append(updateField,t.TenantId) 
        updateField = append(updateField,t.Status) 
        updateField = append(updateField,t.SendErrMsg) 
        updateField = append(updateField,t.CreatedBy) 
    if len(updateField) > 0 {
        do = do.Select(updateField...)
    }
    //主键条件
    HasPrimaryKey := false   
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
        HasPrimaryKey = true
    }                
    if !HasPrimaryKey {
        logger.Error("UpdateAllMsNoticeRecord error : Missing condition")
        return nil,errors.New("Missing condition")
    }
	dbObj := convert.MsNoticeRecord_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllMsNoticeRecord error : %s", err.Error())
		return nil,err
	}
	return req, err
}

func (s *MsNoticeRecordSvc) UpdateFieldsMsNoticeRecord(req *proto.MsNoticeRecordUpdateFieldsRequest) (*proto.MsNoticeRecord, error) {
    t := orm.Use(iotmodel.GetDB()).TMsNoticeRecord
	do := t.WithContext(context.Background())

	var updateField  []field.Expr
	for _,v:=range req.Fields {
	    col, ok := t.GetFieldByName(v)
        if ok {
          updateField = append(updateField,col)
        }
    }
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsMsNoticeRecord error : missing updateField")
		logger.Error(err)
		return nil,err
	}
	do = do.Select(updateField...)

    //主键条件
    HasPrimaryKey := false   
    if req.Data.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Data.Id))
        HasPrimaryKey = true
    }                
    if !HasPrimaryKey {
        logger.Error("UpdateFieldsMsNoticeRecord error : Missing condition")
        return nil,errors.New("Missing condition")
    }
	dbObj := convert.MsNoticeRecord_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsMsNoticeRecord error : %s", err.Error())
		return nil,err
	}
	return req.Data, nil
}

//根据非空条件查找MsNoticeRecord
func (s *MsNoticeRecordSvc) FindMsNoticeRecord(req *proto.MsNoticeRecordFilter) (*proto.MsNoticeRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TMsNoticeRecord
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
    
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
    }
    if req.Lang != "" {//字符串
        do = do.Where(t.Lang.Eq(req.Lang))
    }
    if req.Platform != 0 {//整数
        do = do.Where(t.Platform.Eq(req.Platform))
    }
    if req.Account != "" {//字符串
        do = do.Where(t.Account.Eq(req.Account))
    }
    if req.Method != 0 {//整数
        do = do.Where(t.Method.Eq(req.Method))
    }
    if req.SmsSupplier != 0 {//整数
        do = do.Where(t.SmsSupplier.Eq(req.SmsSupplier))
    }
    if req.Type != 0 {//整数
        do = do.Where(t.Type.Eq(req.Type))
    }
    if req.ThirdparyCode != "" {//字符串
        do = do.Where(t.ThirdparyCode.Eq(req.ThirdparyCode))
    }
    if req.NoticeTempateId != 0 {//整数
        do = do.Where(t.NoticeTempateId.Eq(req.NoticeTempateId))
    }
    if req.Title != "" {//字符串
        do = do.Where(t.Title.Eq(req.Title))
    }
    if req.Content != "" {//字符串
        do = do.Where(t.Content.Eq(req.Content))
    }
    if req.AppKey != "" {//字符串
        do = do.Where(t.AppKey.Eq(req.AppKey))
    }
    if req.TenantId != "" {//字符串
        do = do.Where(t.TenantId.Eq(req.TenantId))
    }
    if req.Status != 0 {//整数
        do = do.Where(t.Status.Eq(req.Status))
    }
    if req.SendErrMsg != "" {//字符串
        do = do.Where(t.SendErrMsg.Eq(req.SendErrMsg))
    }
    if req.CreatedBy != 0 {//整数
        do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
    }
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindMsNoticeRecord error : %s", err.Error())
		return nil,err
	}
	res := convert.MsNoticeRecord_db2pb(dbObj)
	return res, err
}

//根据数据库表主键查找MsNoticeRecord
func (s *MsNoticeRecordSvc) FindByIdMsNoticeRecord(req *proto.MsNoticeRecordFilter) (*proto.MsNoticeRecord, error) {
	t := orm.Use(iotmodel.GetDB()).TMsNoticeRecord
	do := t.WithContext(context.Background())
    // fixme 请检查条件和校验参数
    
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
    }
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdMsNoticeRecord error : %s", err.Error())
		return nil,err
	}
	res := convert.MsNoticeRecord_db2pb(dbObj)
	return res, err
}

//根据分页条件查找MsNoticeRecord,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *MsNoticeRecordSvc) GetListMsNoticeRecord(req *proto.MsNoticeRecordListRequest) ([]*proto.MsNoticeRecord, int64, error) {
    // fixme 请检查条件和校验参数
    var err error
    t := orm.Use(iotmodel.GetDB()).TMsNoticeRecord
    do := t.WithContext(context.Background())
    query := req.Query
    if query != nil {
        
        if query.Id != 0 {//整数
            do = do.Where(t.Id.Eq(query.Id))
        }
        if query.Lang != "" {//字符串
            do = do.Where(t.Lang.Like("%" + query.Lang + "%"))
        }
        if query.Platform != 0 {//整数
            do = do.Where(t.Platform.Eq(query.Platform))
        }
        if query.Account != "" {//字符串
            do = do.Where(t.Account.Like("%" + query.Account + "%"))
        }
        if query.Method != 0 {//整数
            do = do.Where(t.Method.Eq(query.Method))
        }
        if query.SmsSupplier != 0 {//整数
            do = do.Where(t.SmsSupplier.Eq(query.SmsSupplier))
        }
        if query.Type != 0 {//整数
            do = do.Where(t.Type.Eq(query.Type))
        }
        if query.ThirdparyCode != "" {//字符串
            do = do.Where(t.ThirdparyCode.Like("%" + query.ThirdparyCode + "%"))
        }
        if query.NoticeTempateId != 0 {//整数
            do = do.Where(t.NoticeTempateId.Eq(query.NoticeTempateId))
        }
        if query.Title != "" {//字符串
            do = do.Where(t.Title.Like("%" + query.Title + "%"))
        }
        if query.Content != "" {//字符串
            do = do.Where(t.Content.Like("%" + query.Content + "%"))
        }
        if query.AppKey != "" {//字符串
            do = do.Where(t.AppKey.Like("%" + query.AppKey + "%"))
        }
        if query.TenantId != "" {//字符串
            do = do.Where(t.TenantId.Like("%" + query.TenantId + "%"))
        }
        if query.Status != 0 {//整数
            do = do.Where(t.Status.Eq(query.Status))
        }
        if query.SendErrMsg != "" {//字符串
            do = do.Where(t.SendErrMsg.Like("%" + query.SendErrMsg + "%"))
        }
        if query.CreatedBy != 0 {//整数
            do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
        }
		if query.BeginTime != 0 && query.EndTime != 0  {//整数
			do = do.Where(t.CreatedAt.Between(iotutil.GetTodaySartTime(time.Unix(query.BeginTime, 0)), iotutil.GetTodayLastTime(time.Unix(query.EndTime, 0))))
		}
		if query.Methods != nil && len(query.Methods) > 0 {//整数
			do = do.Where(t.Method.In(query.Methods...))
		}
    }
    orderCol, ok := t.GetFieldByName(req.OrderKey)
    if !ok { 
        orderCol = t.CreatedAt
    }
    if req.OrderDesc != "" {
        do = do.Order(orderCol.Desc())
    } else {
        do = do.Order(orderCol.Desc())
    }

	var list []*model.TMsNoticeRecord
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
	    logger.Errorf("GetListMsNoticeRecord error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
	     return nil, total, nil
	}
	result := make([]*proto.MsNoticeRecord,len(list))
    for i, v := range list {
        result[i] = convert.MsNoticeRecord_db2pb(v)
    }
    return result, total, nil
}