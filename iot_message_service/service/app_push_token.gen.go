// Code generated by sgen,2023-08-12 17:29:59. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_message_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_message/model"
	"cloud_platform/iot_model/db_message/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type AppPushTokenSvc struct {
	Ctx context.Context
}

// 创建AppPushToken
func (s *AppPushTokenSvc) CreateAppPushToken(req *proto.AppPushToken) (*proto.AppPushToken, error) {
	if req.AppPushId == "" {
		return nil, errors.New("AppPushId is empty")
	}
	if req.AppToken == "" {
		return nil, errors.New("AppToken is empty")
	}
	if req.AppPushPlatform == "" {
		return nil, errors.New("AppPushPlatform is empty")
	}
	if req.AppPacketName == "" {
		return nil, errors.New("AppPacketName is empty")
	}
	t := orm.Use(iotmodel.GetDB()).TAppPushToken
	do := t.WithContext(context.Background())
	info, err := do.Where(t.AppPushId.Eq(req.AppPushId)).First()
	dbObj := convert.AppPushToken_pb2db(req)
	if err == nil {
		dbObj.Id = info.Id
	} else {
		dbObj.Id = iotutil.GetNextSeqInt64()
	}
	err = do.Save(dbObj)
	if err != nil {
		logger.Errorf("CreateAppPushToken error : %s", err.Error())
		return nil, err
	}

	if req.UserId != 0 {
		//如果有用户ID，则token于用户的关系
		userSvc := AppPushTokenUserSvc{Ctx: s.Ctx}
		userSvc.CreateAppPushTokenUser(&proto.AppPushTokenUser{
			UserId:    req.UserId,
			AppPushId: req.AppPushId,
			AppKey:    req.AppKey,
			TenantId:  req.TenantId,
			RegionId:  req.RegionId,
		})
	}
	return req, err
}

// 根据条件删除AppPushToken
func (s *AppPushTokenSvc) DeleteAppPushToken(req *proto.AppPushToken) (*proto.AppPushToken, error) {
	t := orm.Use(iotmodel.GetDB()).TAppPushToken
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.AppToken != "" { //字符串
		do = do.Where(t.AppToken.Eq(req.AppToken))
	}
	if req.AppPushId != "" { //字符串
		do = do.Where(t.AppPushId.Eq(req.AppPushId))
	}
	if req.AppPushPlatform != "" { //字符串
		do = do.Where(t.AppPushPlatform.Eq(req.AppPushPlatform))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.AppPacketName != "" { //字符串
		do = do.Where(t.AppPacketName.Eq(req.AppPacketName))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteAppPushToken error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除AppPushToken
func (s *AppPushTokenSvc) DeleteByIdAppPushToken(req *proto.AppPushToken) (*proto.AppPushToken, error) {
	t := orm.Use(iotmodel.GetDB()).TAppPushToken
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdAppPushToken error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除AppPushToken
func (s *AppPushTokenSvc) DeleteByIdsAppPushToken(req *proto.AppPushTokenBatchDeleteRequest) (*proto.AppPushTokenBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TAppPushToken
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsAppPushToken error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新AppPushToken
func (s *AppPushTokenSvc) UpdateAppPushToken(req *proto.AppPushToken) (*proto.AppPushToken, error) {
	t := orm.Use(iotmodel.GetDB()).TAppPushToken
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.AppToken != "" { //字符串
		updateField = append(updateField, t.AppToken)
	}
	if req.AppPushId != "" { //字符串
		updateField = append(updateField, t.AppPushId)
	}
	if req.AppPushPlatform != "" { //字符串
		updateField = append(updateField, t.AppPushPlatform)
	}
	if req.AppKey != "" { //字符串
		updateField = append(updateField, t.AppKey)
	}
	if req.AppPacketName != "" { //字符串
		updateField = append(updateField, t.AppPacketName)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateAppPushToken error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.AppPushToken_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAppPushToken error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段AppPushToken
func (s *AppPushTokenSvc) UpdateAllAppPushToken(req *proto.AppPushToken) (*proto.AppPushToken, error) {
	t := orm.Use(iotmodel.GetDB()).TAppPushToken
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.AppToken)
	updateField = append(updateField, t.AppPushId)
	updateField = append(updateField, t.AppPushPlatform)
	updateField = append(updateField, t.LastPushTime)
	updateField = append(updateField, t.AppKey)
	updateField = append(updateField, t.AppPacketName)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllAppPushToken error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.AppPushToken_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllAppPushToken error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *AppPushTokenSvc) UpdateFieldsAppPushToken(req *proto.AppPushTokenUpdateFieldsRequest) (*proto.AppPushToken, error) {
	t := orm.Use(iotmodel.GetDB()).TAppPushToken
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsAppPushToken error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsAppPushToken error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.AppPushToken_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsAppPushToken error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找AppPushToken
func (s *AppPushTokenSvc) FindAppPushToken(req *proto.AppPushTokenFilter) (*proto.AppPushToken, error) {
	t := orm.Use(iotmodel.GetDB()).TAppPushToken
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.AppToken != "" { //字符串
		do = do.Where(t.AppToken.Eq(req.AppToken))
	}
	if req.AppPushId != "" { //字符串
		do = do.Where(t.AppPushId.Eq(req.AppPushId))
	}
	if req.AppPushPlatform != "" { //字符串
		do = do.Where(t.AppPushPlatform.Eq(req.AppPushPlatform))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.AppPacketName != "" { //字符串
		do = do.Where(t.AppPacketName.Eq(req.AppPacketName))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindAppPushToken error : %s", err.Error())
		return nil, err
	}
	res := convert.AppPushToken_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找AppPushToken
func (s *AppPushTokenSvc) FindByIdAppPushToken(req *proto.AppPushTokenFilter) (*proto.AppPushToken, error) {
	t := orm.Use(iotmodel.GetDB()).TAppPushToken
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdAppPushToken error : %s", err.Error())
		return nil, err
	}
	res := convert.AppPushToken_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找AppPushToken,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *AppPushTokenSvc) GetListAppPushToken(req *proto.AppPushTokenListRequest) ([]*proto.AppPushToken, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TAppPushToken
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.AppToken != "" { //字符串
			do = do.Where(t.AppToken.Like("%" + query.AppToken + "%"))
		}
		if query.AppPushId != "" { //字符串
			do = do.Where(t.AppPushId.Like("%" + query.AppPushId + "%"))
		}
		if query.AppPushPlatform != "" { //字符串
			do = do.Where(t.AppPushPlatform.Like("%" + query.AppPushPlatform + "%"))
		}
		if query.AppKey != "" { //字符串
			do = do.Where(t.AppKey.Like("%" + query.AppKey + "%"))
		}
		if query.AppPacketName != "" { //字符串
			do = do.Where(t.AppPacketName.Like("%" + query.AppPacketName + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TAppPushToken
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListAppPushToken error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.AppPushToken, len(list))
	for i, v := range list {
		result[i] = convert.AppPushToken_db2pb(v)
	}
	return result, total, nil
}
