// Code generated by sgen.exe,2022-05-22 07:25:56. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package convert

import (
	"cloud_platform/iot_common/iotutil"
	"cloud_platform/iot_message_service/service/push/pushModel"
	"cloud_platform/iot_model/db_message/model"
	proto "cloud_platform/iot_proto/protos/protosService"
	"time"

	"google.golang.org/protobuf/types/known/timestamppb"
)

func SetMpMessage(src *proto.SendMessageRequest) *model.TMpMessage {
	if src == nil {
		return nil
	}
	dbObj := model.TMpMessage{
		Id:         iotutil.GetNextSeqInt64(),
		PushTo:     src.PushTo,
		PushMode:   0,
		PushStatus: 1,
		TplCode:    src.TplCode,
		PushParams: iotutil.ToString(src.Params),
		TargetIds:  iotutil.ToString(src.UserId),
		Did:        src.SourceRowId,
		ProductKey: src.ProductKey,
	}
	return &dbObj
}

func SetMpMessageUserIn(messageId int64, userId int64, message *proto.SendMessageRequest, src *pushModel.MessageRequestModel) *model.TMpMessageUserIn {
	if src == nil {
		return nil
	}
	dbObj := model.TMpMessageUserIn{
		Id:   iotutil.GetNextSeqInt64(),
		Lang: message.Lang,
		//MessageType: src.Type,
		ChildType: iotutil.ToString(message.ChildType),
		//ActionType:  src,
		//PushMode:    0,
		TplCode:    message.TplCode,
		MessageId:  messageId,
		IsPublic:   0, //message.IsPublic,
		Did:        message.SourceRowId,
		ProductKey: message.ProductKey,
		UserId:     userId,
		HomeId:     message.HomeId,
		MsgTag:     "alias",
		//IconUrl:     "",
		PushTitle:   src.Title,
		PushContent: src.Content,
		ReadFlag:    0,
		UnSetExpire: 0,
		CreatedBy:   0,
		CreatedAt:   time.Time{},
		SourceTable: message.SourceTable,
		SourceRowId: message.SourceRowId,
		Url:         message.Url,
		AppKey:      message.AppKey,
		TenantId:    message.TenantId,
	}
	if message.SourceRowId != "" {
		dbObj.SourceRowId = message.SourceRowId
	}
	return &dbObj
}

func MpMessage_pb2db(src *proto.MpMessage) *model.TMpMessage {
	if src == nil {
		return nil
	}
	dbObj := model.TMpMessage{
		Id:          src.Id,
		PushType:    src.PushType,
		MessageType: src.MessageType,
		PushTo:      src.PushTo,
		PushMode:    src.PushMode,
		PushStatus:  src.PushStatus,
		AgentType:   src.AgentType,
		PushTime:    src.PushTime.AsTime(),
		ExpireHour:  src.ExpireHour,
		ActionType:  src.ActionType,
		TplCode:     src.TplCode,
		PushParams:  src.PushParams,
		TargetIds:   src.TargetIds,
		Did:         src.Did,
		ProductKey:  src.ProductKey,
		Content:     src.Content,
		CreatedBy:   src.CreatedBy,
		CreatedAt:   src.CreatedAt.AsTime(),
	}
	return &dbObj
}

func MpMessage_db2pb(src *model.TMpMessage) *proto.MpMessage {
	if src == nil {
		return nil
	}
	pbObj := proto.MpMessage{
		Id:          src.Id,
		PushType:    src.PushType,
		MessageType: src.MessageType,
		PushTo:      src.PushTo,
		PushMode:    src.PushMode,
		PushStatus:  src.PushStatus,
		AgentType:   src.AgentType,
		PushTime:    timestamppb.New(src.PushTime),
		ExpireHour:  src.ExpireHour,
		ActionType:  src.ActionType,
		TplCode:     src.TplCode,
		PushParams:  src.PushParams,
		TargetIds:   src.TargetIds,
		Did:         src.Did,
		ProductKey:  src.ProductKey,
		Content:     src.Content,
		CreatedBy:   src.CreatedBy,
		CreatedAt:   timestamppb.New(src.CreatedAt),
	}
	return &pbObj
}
