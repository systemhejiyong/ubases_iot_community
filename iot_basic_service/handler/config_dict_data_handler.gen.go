// Code generated by sgen.exe,2022-05-16 15:51:16. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotnatsjs"
	"cloud_platform/iot_common/iotstruct"
	"context"
	"fmt"

	"cloud_platform/iot_basic_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type ConfigDictDataHandler struct{}

// 创建
func (h *ConfigDictDataHandler) Create(ctx context.Context, req *proto.ConfigDictData, resp *proto.Response) error {
	s := service.ConfigDictDataSvc{Ctx: ctx}
	ret, err := s.CreateConfigDictData(req)
	SetResponse(resp, err)
	if ret != nil && err == nil {
		resp.Data = ret.DictCode
		//service.GetJsPublisherMgr().PushData(&service.NatsPubData{
		//	Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
		//	Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_CONFIG_DICT_DATA, fmt.Sprintf("%s-%v", req.DictType, req.DictValue), "name", req.DictLabel, ""),
		//})
		////TODO 临时处理
		//service.GetJsPublisherMgr().PushData(&service.NatsPubData{
		//	Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
		//	Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_CONFIG_DICT_DATA, fmt.Sprintf("%s-%v", req.DictType, req.DictCode), "name", req.DictLabel, ""),
		//})
		iotnatsjs.GetJsClientPub().PushData(&iotnatsjs.NatsPubData{
			Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
			Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_CONFIG_DICT_DATA, fmt.Sprintf("%s-%v", req.DictType, req.DictCode), "name", req.DictLabel, ""),
		})
	}
	return nil
}

// 匹配多条件删除
func (h *ConfigDictDataHandler) Delete(ctx context.Context, req *proto.ConfigDictData, resp *proto.Response) error {
	s := service.ConfigDictDataSvc{Ctx: ctx}
	_, err := s.DeleteConfigDictData(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *ConfigDictDataHandler) DeleteById(ctx context.Context, req *proto.ConfigDictData, resp *proto.Response) error {
	s := service.ConfigDictDataSvc{Ctx: ctx}
	_, err := s.DeleteByIdConfigDictData(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *ConfigDictDataHandler) DeleteByIds(ctx context.Context, req *proto.ConfigDictDataBatchDeleteRequest, resp *proto.Response) error {
	s := service.ConfigDictDataSvc{Ctx: ctx}
	_, err := s.DeleteByIdsConfigDictData(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *ConfigDictDataHandler) Update(ctx context.Context, req *proto.ConfigDictData, resp *proto.Response) error {
	s := service.ConfigDictDataSvc{Ctx: ctx}
	_, err := s.UpdateConfigDictData(req)
	SetResponse(resp, err)
	if err == nil {
		//service.GetJsPublisherMgr().PushData(&service.NatsPubData{
		//	Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
		//	Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_CONFIG_DICT_DATA, fmt.Sprintf("%v-%v", req.DictType, req.DictValue), "name", req.DictLabel, ""),
		//})
		////TODO 临时处理
		//service.GetJsPublisherMgr().PushData(&service.NatsPubData{
		//	Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
		//	Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_CONFIG_DICT_DATA, fmt.Sprintf("%v-%v", req.DictType, req.DictCode), "name", req.DictLabel, ""),
		//})
		iotnatsjs.GetJsClientPub().PushData(&iotnatsjs.NatsPubData{
			Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
			Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_CONFIG_DICT_DATA, fmt.Sprintf("%v-%v", req.DictType, req.DictValue), "name", req.DictLabel, ""),
		})
		iotnatsjs.GetJsClientPub().PushData(&iotnatsjs.NatsPubData{
			Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
			Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_CONFIG_DICT_DATA, fmt.Sprintf("%v-%v", req.DictType, req.DictCode), "name", req.DictLabel, ""),
		})
	}
	return nil
}

// 根据主键更新所有字段
func (h *ConfigDictDataHandler) UpdateAll(ctx context.Context, req *proto.ConfigDictData, resp *proto.Response) error {
	s := service.ConfigDictDataSvc{Ctx: ctx}
	_, err := s.UpdateAllConfigDictData(req)
	SetResponse(resp, err)
	if err == nil {
		//service.GetJsPublisherMgr().PushData(&service.NatsPubData{
		//	Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
		//	Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_CONFIG_DICT_DATA, fmt.Sprintf("%s-%v", req.DictType, req.DictValue), "name", req.DictLabel, ""),
		//})
		////TODO 临时处理
		//service.GetJsPublisherMgr().PushData(&service.NatsPubData{
		//	Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
		//	Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_CONFIG_DICT_DATA, fmt.Sprintf("%s-%v", req.DictType, req.DictCode), "name", req.DictLabel, ""),
		//})
		iotnatsjs.GetJsClientPub().PushData(&iotnatsjs.NatsPubData{
			Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
			Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_CONFIG_DICT_DATA, fmt.Sprintf("%v-%v", req.DictType, req.DictValue), "name", req.DictLabel, ""),
		})
		iotnatsjs.GetJsClientPub().PushData(&iotnatsjs.NatsPubData{
			Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
			Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_CONFIG_DICT_DATA, fmt.Sprintf("%s-%v", req.DictType, req.DictCode), "name", req.DictLabel, ""),
		})
	}
	return nil
}

// 根据主键更新指定列
func (h *ConfigDictDataHandler) UpdateFields(ctx context.Context, req *proto.ConfigDictDataUpdateFieldsRequest, resp *proto.Response) error {
	s := service.ConfigDictDataSvc{Ctx: ctx}
	_, err := s.UpdateFieldsConfigDictData(req)
	SetResponse(resp, err)
	if err == nil {
		if req.Data.DictLabel != "" {
			//service.GetJsPublisherMgr().PushData(&service.NatsPubData{
			//	Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
			//	Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_CONFIG_DICT_DATA, fmt.Sprintf("%s-%d", req.Data.DictType, req.Data.DictValue), "name", req.Data.DictLabel, ""),
			//})
			////TODO 临时处理
			//service.GetJsPublisherMgr().PushData(&service.NatsPubData{
			//	Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
			//	Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_CONFIG_DICT_DATA, fmt.Sprintf("%s-%d", req.Data.DictType, req.Data.DictCode), "name", req.Data.DictLabel, ""),
			//})
			iotnatsjs.GetJsClientPub().PushData(&iotnatsjs.NatsPubData{
				Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
				Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_CONFIG_DICT_DATA, fmt.Sprintf("%v-%v", req.Data.DictType, req.Data.DictValue), "name", req.Data.DictLabel, ""),
			})
			iotnatsjs.GetJsClientPub().PushData(&iotnatsjs.NatsPubData{
				Subject: iotconst.NATS_SUBJECT_LANGUAGE_UPDATE,
				Data:    iotstruct.TranslatePush{}.SetContent(iotconst.LANG_T_CONFIG_DICT_DATA, fmt.Sprintf("%s-%v", req.Data.DictType, req.Data.DictCode), "name", req.Data.DictLabel, ""),
			})
		}
	}
	return nil
}

// 多条件查找，返回单条数据
func (h *ConfigDictDataHandler) Find(ctx context.Context, req *proto.ConfigDictDataFilter, resp *proto.ConfigDictDataResponse) error {
	s := service.ConfigDictDataSvc{Ctx: ctx}
	data, err := s.FindConfigDictData(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *ConfigDictDataHandler) FindById(ctx context.Context, req *proto.ConfigDictDataFilter, resp *proto.ConfigDictDataResponse) error {
	s := service.ConfigDictDataSvc{Ctx: ctx}
	data, err := s.FindByIdConfigDictData(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *ConfigDictDataHandler) Lists(ctx context.Context, req *proto.ConfigDictDataListRequest, resp *proto.ConfigDictDataResponse) error {
	s := service.ConfigDictDataSvc{Ctx: ctx}
	data, total, err := s.GetListConfigDictData(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *ConfigDictDataHandler) SetResponse(resp *proto.ConfigDictDataResponse, data *proto.ConfigDictData, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *ConfigDictDataHandler) SetPageResponse(resp *proto.ConfigDictDataResponse, list []*proto.ConfigDictData, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
