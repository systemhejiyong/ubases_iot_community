// Code generated by sgen.exe,2022-11-12 16:51:01. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_basic_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_config/model"
	"cloud_platform/iot_model/db_config/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type SysRegionServerSvc struct {
	Ctx context.Context
}

// 创建SysRegionServer
func (s *SysRegionServerSvc) CreateSysRegionServer(req *proto.SysRegionServer) (*proto.SysRegionServer, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TSysRegionServer
	do := t.WithContext(context.Background())
	dbObj := convert.SysRegionServer_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateSysRegionServer error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除SysRegionServer
func (s *SysRegionServerSvc) DeleteSysRegionServer(req *proto.SysRegionServer) (*proto.SysRegionServer, error) {
	t := orm.Use(iotmodel.GetDB()).TSysRegionServer
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Sid != "" { //字符串
		do = do.Where(t.Sid.Eq(req.Sid))
	}
	if req.LimitedCount != 0 { //整数
		do = do.Where(t.LimitedCount.Eq(req.LimitedCount))
	}
	if req.BindedCount != 0 { //整数
		do = do.Where(t.BindedCount.Eq(req.BindedCount))
	}
	if req.MqttServer != "" { //字符串
		do = do.Where(t.MqttServer.Eq(req.MqttServer))
	}
	if req.HttpServer != "" { //字符串
		do = do.Where(t.HttpServer.Eq(req.HttpServer))
	}
	if req.Describe != "" { //字符串
		do = do.Where(t.Describe.Eq(req.Describe))
	}
	if req.EnDescribe != "" { //字符串
		do = do.Where(t.EnDescribe.Eq(req.EnDescribe))
	}
	if req.Enabled != 0 { //整数
		do = do.Where(t.Enabled.Eq(req.Enabled))
	}
	if req.Country != "" { //字符串
		do = do.Where(t.Country.Eq(req.Country))
	}
	if req.Province != "" { //字符串
		do = do.Where(t.Province.Eq(req.Province))
	}
	if req.City != "" { //字符串
		do = do.Where(t.City.Eq(req.City))
	}
	if req.District != "" { //字符串
		do = do.Where(t.District.Eq(req.District))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.AreaPhoneNumber != "" { //字符串
		do = do.Where(t.AreaPhoneNumber.Eq(req.AreaPhoneNumber))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteSysRegionServer error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除SysRegionServer
func (s *SysRegionServerSvc) DeleteByIdSysRegionServer(req *proto.SysRegionServer) (*proto.SysRegionServer, error) {
	t := orm.Use(iotmodel.GetDB()).TSysRegionServer
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdSysRegionServer error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除SysRegionServer
func (s *SysRegionServerSvc) DeleteByIdsSysRegionServer(req *proto.SysRegionServerBatchDeleteRequest) (*proto.SysRegionServerBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TSysRegionServer
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsSysRegionServer error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新SysRegionServer
func (s *SysRegionServerSvc) UpdateSysRegionServer(req *proto.SysRegionServer) (*proto.SysRegionServer, error) {
	t := orm.Use(iotmodel.GetDB()).TSysRegionServer
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Sid != "" { //字符串
		updateField = append(updateField, t.Sid)
	}
	if req.LimitedCount != 0 { //整数
		updateField = append(updateField, t.LimitedCount)
	}
	if req.BindedCount != 0 { //整数
		updateField = append(updateField, t.BindedCount)
	}
	if req.MqttServer != "" { //字符串
		updateField = append(updateField, t.MqttServer)
	}
	if req.HttpServer != "" { //字符串
		updateField = append(updateField, t.HttpServer)
	}
	if req.Describe != "" { //字符串
		updateField = append(updateField, t.Describe)
	}
	if req.EnDescribe != "" { //字符串
		updateField = append(updateField, t.EnDescribe)
	}
	if req.Enabled != 0 { //整数
		updateField = append(updateField, t.Enabled)
	}
	if req.Country != "" { //字符串
		updateField = append(updateField, t.Country)
	}
	if req.Province != "" { //字符串
		updateField = append(updateField, t.Province)
	}
	if req.City != "" { //字符串
		updateField = append(updateField, t.City)
	}
	if req.District != "" { //字符串
		updateField = append(updateField, t.District)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.AreaPhoneNumber != "" { //字符串
		updateField = append(updateField, t.AreaPhoneNumber)
	}
	if req.WebsocketServer != "" { //字符串
		updateField = append(updateField, t.WebsocketServer)
	}
	if req.MqttPort != 0 { //字符串
		updateField = append(updateField, t.MqttPort)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateSysRegionServer error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.SysRegionServer_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateSysRegionServer error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段SysRegionServer
func (s *SysRegionServerSvc) UpdateAllSysRegionServer(req *proto.SysRegionServer) (*proto.SysRegionServer, error) {
	t := orm.Use(iotmodel.GetDB()).TSysRegionServer
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Sid)
	updateField = append(updateField, t.LimitedCount)
	updateField = append(updateField, t.BindedCount)
	updateField = append(updateField, t.MqttServer)
	updateField = append(updateField, t.HttpServer)
	updateField = append(updateField, t.Describe)
	updateField = append(updateField, t.EnDescribe)
	updateField = append(updateField, t.Enabled)
	updateField = append(updateField, t.Lat)
	updateField = append(updateField, t.Lng)
	updateField = append(updateField, t.Country)
	updateField = append(updateField, t.Province)
	updateField = append(updateField, t.City)
	updateField = append(updateField, t.District)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.AreaPhoneNumber)
	updateField = append(updateField, t.WebsocketServer)
	updateField = append(updateField, t.MqttPort)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllSysRegionServer error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysRegionServer_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllSysRegionServer error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *SysRegionServerSvc) UpdateFieldsSysRegionServer(req *proto.SysRegionServerUpdateFieldsRequest) (*proto.SysRegionServer, error) {
	t := orm.Use(iotmodel.GetDB()).TSysRegionServer
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsSysRegionServer error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsSysRegionServer error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysRegionServer_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsSysRegionServer error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找SysRegionServer
func (s *SysRegionServerSvc) FindSysRegionServer(req *proto.SysRegionServerFilter) (*proto.SysRegionServer, error) {
	t := orm.Use(iotmodel.GetDB()).TSysRegionServer
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Sid != "" { //字符串
		do = do.Where(t.Sid.Eq(req.Sid))
	}
	if req.LimitedCount != 0 { //整数
		do = do.Where(t.LimitedCount.Eq(req.LimitedCount))
	}
	if req.BindedCount != 0 { //整数
		do = do.Where(t.BindedCount.Eq(req.BindedCount))
	}
	if req.MqttServer != "" { //字符串
		do = do.Where(t.MqttServer.Eq(req.MqttServer))
	}
	if req.HttpServer != "" { //字符串
		do = do.Where(t.HttpServer.Eq(req.HttpServer))
	}
	if req.Describe != "" { //字符串
		do = do.Where(t.Describe.Eq(req.Describe))
	}
	if req.EnDescribe != "" { //字符串
		do = do.Where(t.EnDescribe.Eq(req.EnDescribe))
	}
	if req.Enabled != 0 { //整数
		do = do.Where(t.Enabled.Eq(req.Enabled))
	}
	if req.Country != "" { //字符串
		do = do.Where(t.Country.Eq(req.Country))
	}
	if req.Province != "" { //字符串
		do = do.Where(t.Province.Eq(req.Province))
	}
	if req.City != "" { //字符串
		do = do.Where(t.City.Eq(req.City))
	}
	if req.District != "" { //字符串
		do = do.Where(t.District.Eq(req.District))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.AreaPhoneNumber != "" { //字符串
		do = do.Where(t.AreaPhoneNumber.Eq(req.AreaPhoneNumber))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindSysRegionServer error : %s", err.Error())
		return nil, err
	}
	res := convert.SysRegionServer_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找SysRegionServer
func (s *SysRegionServerSvc) FindByIdSysRegionServer(req *proto.SysRegionServerFilter) (*proto.SysRegionServer, error) {
	t := orm.Use(iotmodel.GetDB()).TSysRegionServer
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdSysRegionServer error : %s", err.Error())
		return nil, err
	}
	res := convert.SysRegionServer_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找SysRegionServer,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *SysRegionServerSvc) GetListSysRegionServer(req *proto.SysRegionServerListRequest) ([]*proto.SysRegionServer, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TSysRegionServer
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Sid != "" { //字符串
			do = do.Where(t.Sid.Like("%" + query.Sid + "%"))
		}
		if query.LimitedCount != 0 { //整数
			do = do.Where(t.LimitedCount.Eq(query.LimitedCount))
		}
		if query.BindedCount != 0 { //整数
			do = do.Where(t.BindedCount.Eq(query.BindedCount))
		}
		if query.MqttServer != "" { //字符串
			do = do.Where(t.MqttServer.Like("%" + query.MqttServer + "%"))
		}
		if query.HttpServer != "" { //字符串
			do = do.Where(t.HttpServer.Like("%" + query.HttpServer + "%"))
		}
		if query.Describe != "" { //字符串
			do = do.Where(t.Describe.Like("%" + query.Describe + "%"))
		}
		if query.EnDescribe != "" { //字符串
			do = do.Where(t.EnDescribe.Like("%" + query.EnDescribe + "%"))
		}
		if query.Enabled != 0 { //整数
			do = do.Where(t.Enabled.Eq(query.Enabled))
		}
		if query.Country != "" { //字符串
			do = do.Where(t.Country.Like("%" + query.Country + "%"))
		}
		if query.Province != "" { //字符串
			do = do.Where(t.Province.Like("%" + query.Province + "%"))
		}
		if query.City != "" { //字符串
			do = do.Where(t.City.Like("%" + query.City + "%"))
		}
		if query.District != "" { //字符串
			do = do.Where(t.District.Like("%" + query.District + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.AreaPhoneNumber != "" { //字符串
			do = do.Where(t.AreaPhoneNumber.Like("%" + query.AreaPhoneNumber + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TSysRegionServer
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListSysRegionServer error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.SysRegionServer, len(list))
	for i, v := range list {
		result[i] = convert.SysRegionServer_db2pb(v)
	}
	return result, total, nil
}
