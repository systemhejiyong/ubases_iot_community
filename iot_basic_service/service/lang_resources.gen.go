// Code generated by sgen.exe,2022-05-31 13:46:36. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_basic_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_config/model"
	"cloud_platform/iot_model/db_config/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type LangResourcesSvc struct {
	Ctx context.Context
}

// 创建LangResources
func (s *LangResourcesSvc) CreateLangResources(req *proto.LangResources) (*proto.LangResources, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TLangResources
	do := t.WithContext(context.Background())
	dbObj := convert.LangResources_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateLangResources error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除LangResources
func (s *LangResourcesSvc) DeleteLangResources(req *proto.LangResources) (*proto.LangResources, error) {
	t := orm.Use(iotmodel.GetDB()).TLangResources
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.BelongType != 0 { //整数
		do = do.Where(t.BelongType.Eq(req.BelongType))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.Code != "" { //字符串
		do = do.Where(t.Code.Eq(req.Code))
	}
	if req.Value != "" { //字符串
		do = do.Where(t.Value.Eq(req.Value))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteLangResources error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除LangResources
func (s *LangResourcesSvc) DeleteByIdLangResources(req *proto.LangResources) (*proto.LangResources, error) {
	t := orm.Use(iotmodel.GetDB()).TLangResources
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Value != "" { //字符串
		do = do.Where(t.Value.Eq(req.Value))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdLangResources error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除LangResources
func (s *LangResourcesSvc) DeleteByIdsLangResources(req *proto.LangResourcesBatchDeleteRequest) (*proto.LangResourcesBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TLangResources
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		do = do.Where(t.Value.Eq(k.Value))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsLangResources error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新LangResources
func (s *LangResourcesSvc) UpdateLangResources(req *proto.LangResources) (*proto.LangResources, error) {
	t := orm.Use(iotmodel.GetDB()).TLangResources
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.BelongType != 0 { //整数
		updateField = append(updateField, t.BelongType)
	}
	if req.Lang != "" { //字符串
		updateField = append(updateField, t.Lang)
	}
	if req.Code != "" { //字符串
		updateField = append(updateField, t.Code)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if req.Value != "" { //字符串
		do = do.Where(t.Value.Eq(req.Value))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateLangResources error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.LangResources_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateLangResources error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段LangResources
func (s *LangResourcesSvc) UpdateAllLangResources(req *proto.LangResources) (*proto.LangResources, error) {
	t := orm.Use(iotmodel.GetDB()).TLangResources
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.BelongType)
	updateField = append(updateField, t.Lang)
	updateField = append(updateField, t.Code)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if req.Value != "" { //字符串
		do = do.Where(t.Value.Eq(req.Value))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllLangResources error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.LangResources_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllLangResources error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *LangResourcesSvc) UpdateFieldsLangResources(req *proto.LangResourcesUpdateFieldsRequest) (*proto.LangResources, error) {
	t := orm.Use(iotmodel.GetDB()).TLangResources
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsLangResources error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if req.Data.Value != "" { //字符串
		do = do.Where(t.Value.Eq(req.Data.Value))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsLangResources error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.LangResources_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsLangResources error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找LangResources
func (s *LangResourcesSvc) FindLangResources(req *proto.LangResourcesFilter) (*proto.LangResources, error) {
	t := orm.Use(iotmodel.GetDB()).TLangResources
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.BelongType != 0 { //整数
		do = do.Where(t.BelongType.Eq(req.BelongType))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.Code != "" { //字符串
		do = do.Where(t.Code.Eq(req.Code))
	}
	if req.Value != "" { //字符串
		do = do.Where(t.Value.Eq(req.Value))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindLangResources error : %s", err.Error())
		return nil, err
	}
	res := convert.LangResources_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找LangResources
func (s *LangResourcesSvc) FindByIdLangResources(req *proto.LangResourcesFilter) (*proto.LangResources, error) {
	t := orm.Use(iotmodel.GetDB()).TLangResources
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Value != "" { //字符串
		do = do.Where(t.Value.Eq(req.Value))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdLangResources error : %s", err.Error())
		return nil, err
	}
	res := convert.LangResources_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找LangResources,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *LangResourcesSvc) GetListLangResources(req *proto.LangResourcesListRequest) ([]*proto.LangResources, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	q := orm.Use(iotmodel.GetDB())
	t := q.TLangResources
	tPackage := q.TLangResourcePackage
	do := t.WithContext(context.Background()).LeftJoin(tPackage, t.PackageId.EqCol(tPackage.Id))
	query := req.Query
	if query != nil {
		if query.AppTemplateId != 0 {
			do = do.Where(tPackage.AppTemplateId.Eq(query.AppTemplateId))
		}
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.BelongType != 0 {
			do = do.Where(t.BelongType.Eq(query.BelongType))
		}
		//TODO 临时处理
		if query.BelongType == 4 {
			do = do.Where(t.BelongId.Eq(query.BelongId))
		}
		if query.Lang != "" { //字符串
			do = do.Where(t.Lang.Eq(query.Lang))
		}
		if query.Code != "" { //字符串
			do = do.Where(t.Code.Eq(query.Code))
		}
		if query.Value != "" { //字符串
			do = do.Where(t.Value.Like("%" + query.Value + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.Code)
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*model.TLangResources
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListLangResources error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.LangResources, len(list))
	for i, v := range list {
		result[i] = convert.LangResources_db2pb(v)
	}
	return result, total, nil
}
