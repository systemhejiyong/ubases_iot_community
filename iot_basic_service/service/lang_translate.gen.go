// Code generated by sgen.exe,2022-05-17 13:13:12. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"
	"fmt"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_basic_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_config/model"
	"cloud_platform/iot_model/db_config/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type LangTranslateSvc struct {
	Ctx context.Context
}

// 创建LangTranslate
func (s *LangTranslateSvc) BatchCreateLangTranslate(req *proto.BatchSaveTranslate) error {
	if req.SourceTable == "" {
		return errors.New("数据源表不能为空")
	}
	var (
		tenantId string = ""
		err      error
	)
	//如果是开放平台, 则需要验证租户编号
	if req.PlatformType == int32(iotconst.OPEN_USER) {
		tenantId, err = CheckTenantId(s.Ctx)
		if err != nil {
			logger.Errorf("BatchCreateLangTranslate tenantId error : %s", err.Error())
			return err
		}
	}

	t := orm.Use(iotmodel.GetDB()).TLangTranslate
	do := t.WithContext(context.Background())

	souceRowIds := make([]string, 0)
	for _, item := range req.List {
		sourceRowId := item.SourceRowId
		if sourceRowId == "" {
			sourceRowId = req.SourceRowId
		}
		//key := item.Lang + "_" + sourceRowId // + "_" + item.FieldName
		souceRowIds = append(souceRowIds, sourceRowId)
	}
	souceRowIds = iotutil.RemoveRepeatElement(souceRowIds)

	datas, err := do.Where(t.SourceTable.Eq(req.SourceTable), t.SourceRowId.In(souceRowIds...)).Find()
	if err != nil {
		logger.Errorf("BatchCreateLangTranslate delete error : %s", err.Error())
		return err
	}

	datasMaps := make(map[string]*model.TLangTranslate)
	for _, item := range datas {
		key := item.Lang + "_" + item.SourceRowId + "_" + item.FieldName
		datasMaps[key] = item
	}

	saveList := []*model.TLangTranslate{}
	cachedData := map[string]interface{}{}
	for _, item := range req.List {
		sourceRowId := item.SourceRowId
		if sourceRowId == "" {
			sourceRowId = req.SourceRowId
		}
		key := item.Lang + "_" + sourceRowId + "_" + item.FieldName
		if val, ok := datasMaps[key]; ok {
			saveObj := &model.TLangTranslate{
				Id:           val.Id,
				SourceTable:  req.SourceTable,
				SourceRowId:  sourceRowId,
				PlatformType: req.PlatformType,
				Lang:         item.Lang,
				FieldName:    val.FieldName,
				FieldType:    val.FieldType,
				FieldValue:   item.FieldValue,
				TenantId:     tenantId,
			}
			saveList = append(saveList, saveObj)
		} else {
			saveObj := &model.TLangTranslate{
				Id:           item.Id,
				SourceTable:  req.SourceTable,
				SourceRowId:  sourceRowId,
				PlatformType: req.PlatformType,
				Lang:         item.Lang,
				FieldName:    item.FieldName,
				FieldType:    item.FieldType,
				FieldValue:   item.FieldValue,
				TenantId:     tenantId,
			}
			if saveObj.Id == 0 {
				saveObj.Id = iotutil.GetNextSeqInt64()
			}
			saveList = append(saveList, saveObj)
		}
		cachedData[key] = item.FieldValue
	}
	err = do.Save(saveList...)
	if err != nil {
		logger.Errorf("CreateLangTranslate error : %s", err.Error())
		return err
	}
	//如果是开发平台，则增加租户前缀缓存
	cacheKey := iotconst.HKEY_LANGUAGE_DATA_PREFIX + req.SourceTable
	if req.PlatformType == int32(iotconst.OPEN_USER) {
		cacheKey = fmt.Sprintf("%s_%s", tenantId, cacheKey)
	}
	//缓存存储
	resCmd := iotredis.GetClient().HMSet(context.Background(), cacheKey, cachedData)
	if resCmd.Err() != nil {
		logger.Errorf("BatchCreateLangTranslate cached error : %s", resCmd.Err().Error())
		//return
	}
	//
	return err
}

// 创建LangTranslate
func (s *LangTranslateSvc) CreateLangTranslate(req *proto.LangTranslate) (*proto.LangTranslate, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TLangTranslate
	do := t.WithContext(context.Background())
	dbObj := convert.LangTranslate_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateLangTranslate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除LangTranslate
func (s *LangTranslateSvc) DeleteLangTranslate(req *proto.LangTranslate) (*proto.LangTranslate, error) {
	t := orm.Use(iotmodel.GetDB()).TLangTranslate
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.SourceTable != "" { //字符串
		do = do.Where(t.SourceTable.Eq(req.SourceTable))
	}
	if req.SourceRowId != "" { //整数
		do = do.Where(t.SourceRowId.Eq(req.SourceRowId))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.FieldName != "" { //字符串
		do = do.Where(t.FieldName.Eq(req.FieldName))
	}
	if req.FieldType != 0 { //整数
		do = do.Where(t.FieldType.Eq(req.FieldType))
	}
	if req.FieldValue != "" { //字符串
		do = do.Where(t.FieldValue.Eq(req.FieldValue))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.PlatformType != 0 { //整数
		do = do.Where(t.PlatformType.Eq(req.PlatformType))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteLangTranslate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除LangTranslate
func (s *LangTranslateSvc) DeleteByIdLangTranslate(req *proto.LangTranslate) (*proto.LangTranslate, error) {
	t := orm.Use(iotmodel.GetDB()).TLangTranslate
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdLangTranslate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除LangTranslate
func (s *LangTranslateSvc) DeleteByIdsLangTranslate(req *proto.LangTranslateBatchDeleteRequest) (*proto.LangTranslateBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TLangTranslate
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsLangTranslate error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新LangTranslate
func (s *LangTranslateSvc) UpdateLangTranslate(req *proto.LangTranslate) (*proto.LangTranslate, error) {
	t := orm.Use(iotmodel.GetDB()).TLangTranslate
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.SourceTable != "" { //字符串
		updateField = append(updateField, t.SourceTable)
	}
	if req.SourceRowId != "" { //整数
		updateField = append(updateField, t.SourceRowId)
	}
	if req.Lang != "" { //字符串
		updateField = append(updateField, t.Lang)
	}
	if req.FieldName != "" { //字符串
		updateField = append(updateField, t.FieldName)
	}
	if req.FieldType != 0 { //整数
		updateField = append(updateField, t.FieldType)
	}
	if req.FieldValue != "" { //字符串
		updateField = append(updateField, t.FieldValue)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if req.PlatformType != 0 { //整数
		updateField = append(updateField, t.PlatformType)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateLangTranslate error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.LangTranslate_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateLangTranslate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段LangTranslate
func (s *LangTranslateSvc) UpdateAllLangTranslate(req *proto.LangTranslate) (*proto.LangTranslate, error) {
	t := orm.Use(iotmodel.GetDB()).TLangTranslate
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.SourceTable)
	updateField = append(updateField, t.SourceRowId)
	updateField = append(updateField, t.Lang)
	updateField = append(updateField, t.FieldName)
	updateField = append(updateField, t.FieldType)
	updateField = append(updateField, t.FieldValue)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	updateField = append(updateField, t.PlatformType)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllLangTranslate error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.LangTranslate_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllLangTranslate error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *LangTranslateSvc) UpdateFieldsLangTranslate(req *proto.LangTranslateUpdateFieldsRequest) (*proto.LangTranslate, error) {
	t := orm.Use(iotmodel.GetDB()).TLangTranslate
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsLangTranslate error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsLangTranslate error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.LangTranslate_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsLangTranslate error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找LangTranslate
func (s *LangTranslateSvc) FindLangTranslate(req *proto.LangTranslateFilter) (*proto.LangTranslate, error) {
	t := orm.Use(iotmodel.GetDB()).TLangTranslate
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.SourceTable != "" { //字符串
		do = do.Where(t.SourceTable.Eq(req.SourceTable))
	}
	if req.SourceRowId != "" { //整数
		do = do.Where(t.SourceRowId.Eq(req.SourceRowId))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.FieldName != "" { //字符串
		do = do.Where(t.FieldName.Eq(req.FieldName))
	}
	if req.FieldType != 0 { //整数
		do = do.Where(t.FieldType.Eq(req.FieldType))
	}
	if req.FieldValue != "" { //字符串
		do = do.Where(t.FieldValue.Eq(req.FieldValue))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	if req.PlatformType != 0 { //整数
		do = do.Where(t.PlatformType.Eq(req.PlatformType))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindLangTranslate error : %s", err.Error())
		return nil, err
	}
	res := convert.LangTranslate_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找LangTranslate
func (s *LangTranslateSvc) FindByIdLangTranslate(req *proto.LangTranslateFilter) (*proto.LangTranslate, error) {
	t := orm.Use(iotmodel.GetDB()).TLangTranslate
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdLangTranslate error : %s", err.Error())
		return nil, err
	}
	res := convert.LangTranslate_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找LangTranslate,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *LangTranslateSvc) GetListLangTranslate(req *proto.LangTranslateListRequest) ([]*proto.LangTranslate, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TLangTranslate
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.SourceTable != "" { //字符串
			do = do.Where(t.SourceTable.Eq(query.SourceTable))
		}
		if query.SourceRowId != "" { //整数
			do = do.Where(t.SourceRowId.Eq(query.SourceRowId))
		}
		if query.Lang != "" { //字符串
			do = do.Where(t.Lang.Eq(query.Lang))
		}
		if query.FieldName != "" { //字符串
			do = do.Where(t.FieldName.Like("%" + query.FieldName + "%"))
		}
		if query.FieldType != 0 { //整数
			do = do.Where(t.FieldType.Eq(query.FieldType))
		}
		if query.FieldValue != "" { //字符串
			do = do.Where(t.FieldValue.Like("%" + query.FieldValue + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}

		if query.SourceRowIdList != nil || len(query.SourceRowIdList) > 0 {
			do = do.Where(t.SourceRowId.In(query.SourceRowIdList...))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.SourceRowId)
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*model.TLangTranslate
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListLangTranslate error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.LangTranslate, len(list))
	for i, v := range list {
		result[i] = convert.LangTranslate_db2pb(v)
	}
	return result, total, nil
}

// 根据分页条件查找LangTranslate,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *LangTranslateSvc) GetGroupListLangTranslate(req *proto.LangTranslateListRequest) ([]*proto.LangTranslateGroupItem, int64, error) {
	var err error
	do := iotmodel.GetDB().Model(model.TLangTranslate{}).WithContext(context.Background())
	do = do.Select("source_row_id, source_table, field_name, max(if(lang='zh', field_value, '')) as 'zh', max(if(lang='en', field_value, '')) as 'en'")
	query := req.Query
	if query != nil {
		if query.SourceTable != "" { //字符串
			//do = do.Where(t.SourceTable.Eq(query.SourceTable))
			do = do.Where("source_table = ?", query.SourceTable)
		}
		if query.SourceRowId != "" { //整数
			//do = do.Where(t.SourceRowId.Eq(query.SourceRowId))
			do = do.Where("source_row_id like ?", "%"+query.SourceRowId+"%")
		}
		if query.Lang != "" { //字符串
			//do = do.Where(t.Lang.Eq(query.Lang))
			do = do.Where("lang = ?", query.Lang)
		}
		if query.FieldName != "" { //字符串
			do = do.Where("field_name like ?", "%"+query.FieldName+"%")
			//do = do.Where(t.FieldName.Like("%" + query.FieldName + "%"))
		}
	}

	do = do.Group("source_row_id, source_table, field_name")

	var total int64
	tx := do.Count(&total)
	if tx.Error != nil {
		logger.Errorf("GetListLangTranslate get count error : %s", err.Error())
		return nil, 0, err
	}

	var list []*struct {
		SourceTable string `gorm:"column:source_table" json:"sourceTable"`  // 来源的表
		SourceRowId string `gorm:"column:source_row_id" json:"sourceRowId"` // 来源的行id
		Lang        string `gorm:"column:lang" json:"lang"`                 // 语言分类
		FieldName   string `gorm:"column:field_name" json:"fieldName"`      // 字段名
		Zh          string `gorm:"column:zh" json:"zh"`                     // 字段名
		En          string `gorm:"column:en" json:"en"`                     // 字段名
	}
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		tx := do.Offset(int(offset)).Limit(int(limit)).Scan(&list)
		err = tx.Error
	} else {
		tx := do.Find(&list)
		err = tx.Error
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListLangTranslate error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.LangTranslateGroupItem, len(list))
	for i, v := range list {
		result[i] = &proto.LangTranslateGroupItem{
			SourceTable:  v.SourceTable,
			SourceRowId:  v.SourceRowId,
			FieldName:    v.FieldName,
			PlatformType: 1,
			Zh:           v.Zh,
			En:           v.En,
		}
	}
	return result, total, nil
}
