// Code generated by sgen.exe,2022-05-16 10:53:27. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_basic_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_config/model"
	"cloud_platform/iot_model/db_config/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type ConfigDictDataSvc struct {
	Ctx context.Context
}

// 创建ConfigDictData
func (s *ConfigDictDataSvc) CreateConfigDictData(req *proto.ConfigDictData) (*proto.ConfigDictData, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TConfigDictData
	do := t.WithContext(context.Background())
	dbObj := convert.ConfigDictData_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateConfigDictData error : %s", err.Error())
		return nil, err
	}

	return req, err
}

// 根据条件删除ConfigDictData
func (s *ConfigDictDataSvc) DeleteConfigDictData(req *proto.ConfigDictData) (*proto.ConfigDictData, error) {
	t := orm.Use(iotmodel.GetDB()).TConfigDictData
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.DictCode != 0 { //整数
		do = do.Where(t.DictCode.Eq(req.DictCode))
	}
	if req.DictSort != 0 { //整数
		do = do.Where(t.DictSort.Eq(req.DictSort))
	}
	if req.DictLabel != "" { //字符串
		do = do.Where(t.DictLabel.Eq(req.DictLabel))
	}
	if req.DictValue != "" { //字符串
		do = do.Where(t.DictValue.Eq(req.DictValue))
	}
	if req.DictType != "" { //字符串
		do = do.Where(t.DictType.Eq(req.DictType))
	}
	if req.CssClass != "" { //字符串
		do = do.Where(t.CssClass.Eq(req.CssClass))
	}
	if req.ListClass != "" { //字符串
		do = do.Where(t.ListClass.Eq(req.ListClass))
	}
	if req.IsDefault != 0 { //整数
		do = do.Where(t.IsDefault.Eq(req.IsDefault))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.Pinyin != "" { //字符串
		do = do.Where(t.Pinyin.Eq(req.Pinyin))
	}
	if req.Firstletter != "" { //字符串
		do = do.Where(t.Firstletter.Eq(req.Firstletter))
	}
	if req.Listimg != "" { //字符串
		do = do.Where(t.Listimg.Eq(req.Listimg))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteConfigDictData error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除ConfigDictData
func (s *ConfigDictDataSvc) DeleteByIdConfigDictData(req *proto.ConfigDictData) (*proto.ConfigDictData, error) {
	t := orm.Use(iotmodel.GetDB()).TConfigDictData
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.DictCode != 0 { //整数
		do = do.Where(t.DictCode.Eq(req.DictCode))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdConfigDictData error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除ConfigDictData
func (s *ConfigDictDataSvc) DeleteByIdsConfigDictData(req *proto.ConfigDictDataBatchDeleteRequest) (*proto.ConfigDictDataBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TConfigDictData
		do := t.WithContext(context.Background())

		do = do.Where(t.DictCode.Eq(k.DictCode))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsConfigDictData error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新ConfigDictData
func (s *ConfigDictDataSvc) UpdateConfigDictData(req *proto.ConfigDictData) (*proto.ConfigDictData, error) {
	t := orm.Use(iotmodel.GetDB()).TConfigDictData
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.DictSort != 0 { //整数
		updateField = append(updateField, t.DictSort)
	}
	if req.DictLabel != "" { //字符串
		updateField = append(updateField, t.DictLabel)
	}
	if req.DictValue != "" { //字符串
		updateField = append(updateField, t.DictValue)
	}
	if req.DictType != "" { //字符串
		updateField = append(updateField, t.DictType)
	}
	if req.CssClass != "" { //字符串
		updateField = append(updateField, t.CssClass)
	}
	if req.ListClass != "" { //字符串
		updateField = append(updateField, t.ListClass)
	}
	if req.IsDefault != 0 { //整数
		updateField = append(updateField, t.IsDefault)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.Remark != "" { //字符串
		updateField = append(updateField, t.Remark)
	}
	if req.Pinyin != "" { //字符串
		updateField = append(updateField, t.Pinyin)
	}
	if req.Firstletter != "" { //字符串
		updateField = append(updateField, t.Firstletter)
	}
	if req.Listimg != "" { //字符串
		updateField = append(updateField, t.Listimg)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.DictCode != 0 { //整数
		do = do.Where(t.DictCode.Eq(req.DictCode))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateConfigDictData error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.ConfigDictData_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateConfigDictData error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段ConfigDictData
func (s *ConfigDictDataSvc) UpdateAllConfigDictData(req *proto.ConfigDictData) (*proto.ConfigDictData, error) {
	t := orm.Use(iotmodel.GetDB()).TConfigDictData
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.DictSort)
	updateField = append(updateField, t.DictLabel)
	updateField = append(updateField, t.DictValue)
	updateField = append(updateField, t.DictType)
	updateField = append(updateField, t.CssClass)
	updateField = append(updateField, t.ListClass)
	updateField = append(updateField, t.IsDefault)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.Remark)
	updateField = append(updateField, t.Pinyin)
	updateField = append(updateField, t.Firstletter)
	updateField = append(updateField, t.Listimg)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.DictCode != 0 { //整数
		do = do.Where(t.DictCode.Eq(req.DictCode))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllConfigDictData error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.ConfigDictData_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllConfigDictData error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *ConfigDictDataSvc) UpdateFieldsConfigDictData(req *proto.ConfigDictDataUpdateFieldsRequest) (*proto.ConfigDictData, error) {
	t := orm.Use(iotmodel.GetDB()).TConfigDictData
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsConfigDictData error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.DictCode != 0 { //整数
		do = do.Where(t.DictCode.Eq(req.Data.DictCode))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsConfigDictData error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.ConfigDictData_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsConfigDictData error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找ConfigDictData
func (s *ConfigDictDataSvc) FindConfigDictData(req *proto.ConfigDictDataFilter) (*proto.ConfigDictData, error) {
	t := orm.Use(iotmodel.GetDB()).TConfigDictData
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.DictCode != 0 { //整数
		do = do.Where(t.DictCode.Eq(req.DictCode))
	}
	if req.DictSort != 0 { //整数
		do = do.Where(t.DictSort.Eq(req.DictSort))
	}
	if req.DictLabel != "" { //字符串
		do = do.Where(t.DictLabel.Eq(req.DictLabel))
	}
	if req.DictValue != "" { //字符串
		do = do.Where(t.DictValue.Eq(req.DictValue))
	}
	if req.DictType != "" { //字符串
		do = do.Where(t.DictType.Eq(req.DictType))
	}
	if req.CssClass != "" { //字符串
		do = do.Where(t.CssClass.Eq(req.CssClass))
	}
	if req.ListClass != "" { //字符串
		do = do.Where(t.ListClass.Eq(req.ListClass))
	}
	if req.IsDefault != 0 { //整数
		do = do.Where(t.IsDefault.Eq(req.IsDefault))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.Pinyin != "" { //字符串
		do = do.Where(t.Pinyin.Eq(req.Pinyin))
	}
	if req.Firstletter != "" { //字符串
		do = do.Where(t.Firstletter.Eq(req.Firstletter))
	}
	if req.Listimg != "" { //字符串
		do = do.Where(t.Listimg.Eq(req.Listimg))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindConfigDictData error : %s", err.Error())
		return nil, err
	}
	res := convert.ConfigDictData_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找ConfigDictData
func (s *ConfigDictDataSvc) FindByIdConfigDictData(req *proto.ConfigDictDataFilter) (*proto.ConfigDictData, error) {
	t := orm.Use(iotmodel.GetDB()).TConfigDictData
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.DictCode != 0 { //整数
		do = do.Where(t.DictCode.Eq(req.DictCode))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdConfigDictData error : %s", err.Error())
		return nil, err
	}
	res := convert.ConfigDictData_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找ConfigDictData,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *ConfigDictDataSvc) GetListConfigDictData(req *proto.ConfigDictDataListRequest) ([]*proto.ConfigDictData, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	var q = orm.Use(iotmodel.GetDB())
	t := q.TConfigDictData
	tType := q.TConfigDictType
	do := t.WithContext(context.Background()).LeftJoin(tType, tType.DictType.EqCol(t.DictType))
	query := req.Query
	if query != nil {

		if query.DictCode != 0 { //整数
			do = do.Where(t.DictCode.Eq(query.DictCode))
		}
		if query.DictSort != 0 { //整数
			do = do.Where(t.DictSort.Eq(query.DictSort))
		}
		if query.DictLabel != "" { //字符串
			do = do.Where(t.DictLabel.Like("%" + query.DictLabel + "%"))
		}
		if query.DictValue != "" { //字符串
			do = do.Where(t.DictValue.Like(query.DictValue))
		}
		if query.DictType != "" { //字符串
			do = do.Where(t.DictType.Eq(query.DictType))
		}
		if query.ValueType != 0 { //整数
			do = do.Where(tType.ValueType.Eq(query.ValueType))
		}
		if query.CssClass != "" { //字符串
			do = do.Where(t.CssClass.Like("%" + query.CssClass + "%"))
		}
		if query.ListClass != "" { //字符串
			do = do.Where(t.ListClass.Like("%" + query.ListClass + "%"))
		}
		if query.IsDefault != 0 { //整数
			do = do.Where(t.IsDefault.Eq(query.IsDefault))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
		if query.Pinyin != "" { //字符串
			do = do.Where(t.Pinyin.Like("%" + query.Pinyin + "%"))
		}
		if query.Firstletter != "" { //字符串
			do = do.Where(t.Firstletter.Like("%" + query.Firstletter + "%"))
		}
		if query.Listimg != "" { //字符串
			do = do.Where(t.Listimg.Like("%" + query.Listimg + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
		if len(query.DictTypeList) != 0 { //字符串数组
			do = do.Where(t.DictType.In(query.DictTypeList...))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.DictSort)
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}
	var list []*struct {
		*model.TConfigDictData
		ValueType int32 `gorm:"column:value_type" json:"valueType"` // 1-整形，2-浮点,  3-字符串
	}
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		total, err = do.Select(t.ALL, tType.ValueType).ScanByPage(&list, int(offset), int(limit))
	} else {
		err = do.Select(t.ALL, tType.ValueType).Scan(&list)
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListConfigDictData error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.ConfigDictData, len(list))
	for i, v := range list {
		result[i] = convert.ConfigDictData_db2pb(v.TConfigDictData)
		result[i].ValueType = v.ValueType
	}
	return result, total, nil
}
