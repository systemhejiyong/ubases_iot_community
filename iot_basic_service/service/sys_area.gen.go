// Code generated by sgen.exe,2022-05-21 11:08:04. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"
	"strings"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_basic_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_config/model"
	"cloud_platform/iot_model/db_config/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type SysAreaSvc struct {
	Ctx context.Context
}

// 创建SysArea
func (s *SysAreaSvc) CreateSysArea(req *proto.SysArea) (*proto.SysArea, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TSysArea
	do := t.WithContext(context.Background())
	dbObj := convert.SysArea_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateSysArea error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除SysArea
func (s *SysAreaSvc) DeleteSysArea(req *proto.SysArea) (*proto.SysArea, error) {
	t := orm.Use(iotmodel.GetDB()).TSysArea
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Pid != 0 { //整数
		do = do.Where(t.Pid.Eq(req.Pid))
	}
	if req.Level != 0 { //整数
		do = do.Where(t.Level.Eq(req.Level))
	}
	if req.Path != "" { //字符串
		do = do.Where(t.Path.Eq(req.Path))
	}
	if req.Code != "" { //字符串
		do = do.Where(t.Code.Eq(req.Code))
	}
	if req.AreaNumber != "" { //字符串
		do = do.Where(t.AreaNumber.Eq(req.AreaNumber))
	}
	if req.AreaPhoneNumber != "" { //字符串
		do = do.Where(t.AreaPhoneNumber.Eq(req.AreaPhoneNumber))
	}
	if req.Abbreviation != "" { //字符串
		do = do.Where(t.Abbreviation.Eq(req.Abbreviation))
	}
	if req.Iso != "" { //字符串
		do = do.Where(t.Iso.Eq(req.Iso))
	}
	if req.ChineseName != "" { //字符串
		do = do.Where(t.ChineseName.Eq(req.ChineseName))
	}
	if req.EnglishName != "" { //字符串
		do = do.Where(t.EnglishName.Eq(req.EnglishName))
	}
	if req.Pinyin != "" { //字符串
		do = do.Where(t.Pinyin.Eq(req.Pinyin))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteSysArea error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除SysArea
func (s *SysAreaSvc) DeleteByIdSysArea(req *proto.SysArea) (*proto.SysArea, error) {
	t := orm.Use(iotmodel.GetDB()).TSysArea
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdSysArea error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除SysArea
func (s *SysAreaSvc) DeleteByIdsSysArea(req *proto.SysAreaBatchDeleteRequest) (*proto.SysAreaBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TSysArea
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsSysArea error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新SysArea
func (s *SysAreaSvc) UpdateSysArea(req *proto.SysArea) (*proto.SysArea, error) {
	t := orm.Use(iotmodel.GetDB()).TSysArea
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Pid != 0 { //整数
		updateField = append(updateField, t.Pid)
	}
	if req.Level != 0 { //整数
		updateField = append(updateField, t.Level)
	}
	if req.Path != "" { //字符串
		updateField = append(updateField, t.Path)
	}
	if req.Code != "" { //字符串
		updateField = append(updateField, t.Code)
	}
	if req.AreaNumber != "" { //字符串
		updateField = append(updateField, t.AreaNumber)
	}
	if req.AreaPhoneNumber != "" { //字符串
		updateField = append(updateField, t.AreaPhoneNumber)
	}
	if req.Abbreviation != "" { //字符串
		updateField = append(updateField, t.Abbreviation)
	}
	if req.Iso != "" { //字符串
		updateField = append(updateField, t.Iso)
	}
	if req.ChineseName != "" { //字符串
		updateField = append(updateField, t.ChineseName)
	}
	if req.EnglishName != "" { //字符串
		updateField = append(updateField, t.EnglishName)
	}
	if req.Pinyin != "" { //字符串
		updateField = append(updateField, t.Pinyin)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateSysArea error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.SysArea_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateSysArea error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段SysArea
func (s *SysAreaSvc) UpdateAllSysArea(req *proto.SysArea) (*proto.SysArea, error) {
	t := orm.Use(iotmodel.GetDB()).TSysArea
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Pid)
	updateField = append(updateField, t.Level)
	updateField = append(updateField, t.Path)
	updateField = append(updateField, t.Code)
	updateField = append(updateField, t.AreaNumber)
	updateField = append(updateField, t.AreaPhoneNumber)
	updateField = append(updateField, t.Abbreviation)
	updateField = append(updateField, t.Iso)
	updateField = append(updateField, t.ChineseName)
	updateField = append(updateField, t.EnglishName)
	updateField = append(updateField, t.Pinyin)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllSysArea error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysArea_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllSysArea error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *SysAreaSvc) UpdateFieldsSysArea(req *proto.SysAreaUpdateFieldsRequest) (*proto.SysArea, error) {
	t := orm.Use(iotmodel.GetDB()).TSysArea
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsSysArea error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsSysArea error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysArea_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsSysArea error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找SysArea
func (s *SysAreaSvc) FindSysArea(req *proto.SysAreaFilter) (*proto.SysArea, error) {
	t := orm.Use(iotmodel.GetDB()).TSysArea
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Pid != 0 { //整数
		do = do.Where(t.Pid.Eq(req.Pid))
	}
	if req.Level != 0 { //整数
		do = do.Where(t.Level.Eq(req.Level))
	}
	if req.Path != "" { //字符串
		do = do.Where(t.Path.Eq(req.Path))
	}
	if req.Code != "" { //字符串
		do = do.Where(t.Code.Eq(req.Code))
	}
	if req.AreaNumber != "" { //字符串
		do = do.Where(t.AreaNumber.Eq(req.AreaNumber))
	}
	if req.AreaPhoneNumber != "" { //字符串
		do = do.Where(t.AreaPhoneNumber.Eq(req.AreaPhoneNumber))
	}
	if req.Abbreviation != "" { //字符串
		do = do.Where(t.Abbreviation.Eq(req.Abbreviation))
	}
	if req.Iso != "" { //字符串
		do = do.Where(t.Iso.Eq(req.Iso))
	}
	if req.ChineseName != "" { //字符串
		do = do.Where(t.ChineseName.Eq(req.ChineseName))
	}
	if req.EnglishName != "" { //字符串
		do = do.Where(t.EnglishName.Eq(req.EnglishName))
	}
	if req.Pinyin != "" { //字符串
		do = do.Where(t.Pinyin.Eq(req.Pinyin))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindSysArea error : %s", err.Error())
		return nil, err
	}
	res := convert.SysArea_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找SysArea
func (s *SysAreaSvc) FindByIdSysArea(req *proto.SysAreaFilter) (*proto.SysArea, error) {
	t := orm.Use(iotmodel.GetDB()).TSysArea
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdSysArea error : %s", err.Error())
		return nil, err
	}
	res := convert.SysArea_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找SysArea,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *SysAreaSvc) GetListSysArea(req *proto.SysAreaListRequest) ([]*proto.SysArea, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TSysArea
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.AreaIds != nil && len(query.AreaIds) > 0 {
			do = do.Where(t.Id.In(query.AreaIds...))
		}
		if query.Pid > 0 {
			if query.ShowChild {
				pidStr := iotutil.ToString(query.Pid)
				do = do.Where(do.Where(t.Path.Like("%," + pidStr + ",%")))
			} else {
				do = do.Where(t.Pid.Eq(query.Pid))
			}
		} else {
			if query.Pid != -1 {
				if !query.ShowChild {
					do = do.Where(t.Pid.Eq(query.Pid))
				}
			}
		}
		if query.Level != 0 { //整数
			do = do.Where(t.Level.Eq(query.Level))
		}
		if query.Path != "" { //字符串
			do = do.Where(t.Path.Like("%" + query.Path + "%"))
		}
		if query.Code != "" { //字符串
			do = do.Where(t.Code.Like("%" + query.Code + "%"))
		}
		if query.AreaNumber != "" { //字符串
			do = do.Where(t.AreaNumber.Like("%" + query.AreaNumber + "%"))
		}
		if query.AreaPhoneNumber != "" { //字符串
			do = do.Where(t.AreaPhoneNumber.Like("%" + query.AreaPhoneNumber + "%"))
		}
		if query.Abbreviation != "" { //字符串
			do = do.Where(t.Abbreviation.Like("%" + query.Abbreviation + "%"))
		}
		if query.Iso != "" { //字符串
			do = do.Where(t.Iso.Like("%" + query.Iso + "%"))
		}
		if query.ChineseName != "" { //字符串
			do = do.Where(t.ChineseName.Like("%" + query.ChineseName + "%"))
		}
		if query.EnglishName != "" { //字符串
			do = do.Where(t.EnglishName.Like("%" + query.EnglishName + "%"))
		}
		if query.Pinyin != "" { //字符串
			do = do.Where(t.Pinyin.Like("%" + query.Pinyin + "%"))
		}
		if query.EnableGetCode {
			if query.Country == "" && query.City == "" {
				return nil, 0, errors.New("参数异常，Country，City")
			}

			//去除尾部 省、市
			if strings.HasSuffix(query.Province, "省") {
				query.Province = strings.TrimSuffix(query.Province, "省")
			}
			if strings.HasSuffix(query.City, "市") {
				query.City = strings.TrimSuffix(query.City, "市")
			}
			w1 := t.WithContext(context.Background()).Where(t.ChineseName.Like("%" + query.City + "%")).Or(t.EnglishName.Like("%" + query.City + "%"))
			w2 := t.WithContext(context.Background()).Where(t.ChineseName.Like("%" + query.Country + "%")).Or(t.EnglishName.Like("%" + query.Country + "%"))
			if query.Province != "" {
				w3 := t.WithContext(context.Background()).Where(t.ChineseName.Like("%" + query.Province + "%")).Or(t.EnglishName.Like("%" + query.Province + "%"))
				do = do.Where(w1.Or(w2).Or(w3)) //.Where(w2)
			} else {
				do = do.Where(w1.Or(w2)) //.Where(w2)
			}
		}

	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TSysArea
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListSysArea error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.SysArea, len(list))
	for i, v := range list {
		result[i] = convert.SysArea_db2pb(v)
	}
	return result, total, nil
}
