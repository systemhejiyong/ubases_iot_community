// Code generated by sgen.exe,2022-04-19 09:58:34. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_basic_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_config/model"
	"cloud_platform/iot_model/db_config/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type ConfigOssSvc struct {
	Ctx context.Context
}

// 创建ConfigOss
func (s *ConfigOssSvc) CreateConfigOss(req *proto.ConfigOss) (*proto.ConfigOss, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TConfigOss
	do := t.WithContext(context.Background())
	dbObj := convert.ConfigOss_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateConfigOss error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除ConfigOss
func (s *ConfigOssSvc) DeleteConfigOss(req *proto.ConfigOss) (*proto.ConfigOss, error) {
	t := orm.Use(iotmodel.GetDB()).TConfigOss
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.RegionId != 0 { //整数
		do = do.Where(t.RegionId.Eq(req.RegionId))
	}
	if req.AccessKeyId != "" { //字符串
		do = do.Where(t.AccessKeyId.Eq(req.AccessKeyId))
	}
	if req.AccessKeySecret != "" { //字符串
		do = do.Where(t.AccessKeySecret.Eq(req.AccessKeySecret))
	}
	if req.RoleArn != "" { //字符串
		do = do.Where(t.RoleArn.Eq(req.RoleArn))
	}
	if req.RoleSessionName != "" { //字符串
		do = do.Where(t.RoleSessionName.Eq(req.RoleSessionName))
	}
	if req.Bucket != "" { //字符串
		do = do.Where(t.Bucket.Eq(req.Bucket))
	}
	if req.Endpoint != "" { //字符串
		do = do.Where(t.Endpoint.Eq(req.Endpoint))
	}
	if req.OssName != "" { //字符串
		do = do.Where(t.OssName.Eq(req.OssName))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteConfigOss error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除ConfigOss
func (s *ConfigOssSvc) DeleteByIdConfigOss(req *proto.ConfigOss) (*proto.ConfigOss, error) {
	t := orm.Use(iotmodel.GetDB()).TConfigOss
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdConfigOss error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除ConfigOss
func (s *ConfigOssSvc) DeleteByIdsConfigOss(req *proto.ConfigOssBatchDeleteRequest) (*proto.ConfigOssBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TConfigOss
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsConfigOss error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新ConfigOss
func (s *ConfigOssSvc) UpdateConfigOss(req *proto.ConfigOss) (*proto.ConfigOss, error) {
	t := orm.Use(iotmodel.GetDB()).TConfigOss
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.RegionId != 0 { //整数
		updateField = append(updateField, t.RegionId)
	}
	if req.AccessKeyId != "" { //字符串
		updateField = append(updateField, t.AccessKeyId)
	}
	if req.AccessKeySecret != "" { //字符串
		updateField = append(updateField, t.AccessKeySecret)
	}
	if req.RoleArn != "" { //字符串
		updateField = append(updateField, t.RoleArn)
	}
	if req.RoleSessionName != "" { //字符串
		updateField = append(updateField, t.RoleSessionName)
	}
	if req.Bucket != "" { //字符串
		updateField = append(updateField, t.Bucket)
	}
	if req.Endpoint != "" { //字符串
		updateField = append(updateField, t.Endpoint)
	}
	if req.OssName != "" { //字符串
		updateField = append(updateField, t.OssName)
	}
	if req.Remark != "" { //字符串
		updateField = append(updateField, t.Remark)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateConfigOss error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.ConfigOss_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateConfigOss error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段ConfigOss
func (s *ConfigOssSvc) UpdateAllConfigOss(req *proto.ConfigOss) (*proto.ConfigOss, error) {
	t := orm.Use(iotmodel.GetDB()).TConfigOss
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.RegionId)
	updateField = append(updateField, t.AccessKeyId)
	updateField = append(updateField, t.AccessKeySecret)
	updateField = append(updateField, t.RoleArn)
	updateField = append(updateField, t.RoleSessionName)
	updateField = append(updateField, t.Bucket)
	updateField = append(updateField, t.Endpoint)
	updateField = append(updateField, t.OssName)
	updateField = append(updateField, t.Remark)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllConfigOss error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.ConfigOss_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllConfigOss error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *ConfigOssSvc) UpdateFieldsConfigOss(req *proto.ConfigOssUpdateFieldsRequest) (*proto.ConfigOss, error) {
	t := orm.Use(iotmodel.GetDB()).TConfigOss
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsConfigOss error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.ConfigOss_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsConfigOss error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找ConfigOss
func (s *ConfigOssSvc) FindConfigOss(req *proto.ConfigOssFilter) (*proto.ConfigOss, error) {
	t := orm.Use(iotmodel.GetDB()).TConfigOss
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.RegionId != 0 { //整数
		do = do.Where(t.RegionId.Eq(req.RegionId))
	}
	if req.AccessKeyId != "" { //字符串
		do = do.Where(t.AccessKeyId.Like("%" + req.AccessKeyId + "%"))
	}
	if req.AccessKeySecret != "" { //字符串
		do = do.Where(t.AccessKeySecret.Like("%" + req.AccessKeySecret + "%"))
	}
	if req.RoleArn != "" { //字符串
		do = do.Where(t.RoleArn.Like("%" + req.RoleArn + "%"))
	}
	if req.RoleSessionName != "" { //字符串
		do = do.Where(t.RoleSessionName.Like("%" + req.RoleSessionName + "%"))
	}
	if req.Bucket != "" { //字符串
		do = do.Where(t.Bucket.Like("%" + req.Bucket + "%"))
	}
	if req.Endpoint != "" { //字符串
		do = do.Where(t.Endpoint.Like("%" + req.Endpoint + "%"))
	}
	if req.OssName != "" { //字符串
		do = do.Where(t.OssName.Like("%" + req.OssName + "%"))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Like("%" + req.Remark + "%"))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindConfigOss error : %s", err.Error())
		return nil, err
	}
	res := convert.ConfigOss_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找ConfigOss
func (s *ConfigOssSvc) FindByIdConfigOss(req *proto.ConfigOssFilter) (*proto.ConfigOss, error) {
	t := orm.Use(iotmodel.GetDB()).TConfigOss
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdConfigOss error : %s", err.Error())
		return nil, err
	}
	res := convert.ConfigOss_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找ConfigOss,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *ConfigOssSvc) GetListConfigOss(req *proto.ConfigOssListRequest) ([]*proto.ConfigOss, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TConfigOss
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.RegionId != 0 { //整数
			do = do.Where(t.RegionId.Eq(query.RegionId))
		}
		if query.AccessKeyId != "" { //字符串
			do = do.Where(t.AccessKeyId.Like("%" + query.AccessKeyId + "%"))
		}
		if query.AccessKeySecret != "" { //字符串
			do = do.Where(t.AccessKeySecret.Like("%" + query.AccessKeySecret + "%"))
		}
		if query.RoleArn != "" { //字符串
			do = do.Where(t.RoleArn.Like("%" + query.RoleArn + "%"))
		}
		if query.RoleSessionName != "" { //字符串
			do = do.Where(t.RoleSessionName.Like("%" + query.RoleSessionName + "%"))
		}
		if query.Bucket != "" { //字符串
			do = do.Where(t.Bucket.Like("%" + query.Bucket + "%"))
		}
		if query.Endpoint != "" { //字符串
			do = do.Where(t.Endpoint.Like("%" + query.Endpoint + "%"))
		}
		if query.OssName != "" { //字符串
			do = do.Where(t.OssName.Like("%" + query.OssName + "%"))
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TConfigOss
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListConfigOss error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.ConfigOss, len(list))
	for i, v := range list {
		result[i] = convert.ConfigOss_db2pb(v)
	}
	return result, total, nil
}
