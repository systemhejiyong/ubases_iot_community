// Code generated by sgen.exe,2022-05-31 13:46:36. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_basic_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_config/model"
	"cloud_platform/iot_model/db_config/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type LangCustomResourcesSvc struct {
	Ctx context.Context
}

// 创建LangCustomResources
func (s *LangCustomResourcesSvc) SetResourceUseRecord(req *proto.ResourceOperationRecordRequest) (int64, int64, error) {
	tenantId, err := CheckTenantId(s.Ctx)
	if err != nil {
		return 0, 0, err
	}
	if req.AppKey == "" {
		return 0, 0, errors.New("AppKey不能为空")
	}
	//通过LimitDays获取开始时间和结束时间
	startTime := iotutil.BeginningOfPointDay(int64(req.LimitDays))
	endTime := iotutil.EndOfPointDay(0)
	t := orm.Use(iotmodel.GetDB()).TLangCustomResourceRecord
	list, err := t.WithContext(context.Background()).Where(t.TenantId.Eq(tenantId),
		t.AppKey.Eq(req.AppKey),
		t.OperTime.Between(startTime, endTime)).Find()
	if err != nil {
		logger.Errorf("CreateLangCustomResources error : %s", err.Error())
		return 0, 0, err
	}
	var (
		importCount int64 = 0
		exportCount int64 = 0
	)
	for _, record := range list {
		switch record.OperType {
		case 1:
			importCount++
		case 2:
			exportCount++
		}
	}
	return importCount, exportCount, err
}

// 创建LangCustomResources
func (s *LangCustomResourcesSvc) ResourceUseRecord(req *proto.ResourceOperationRecordRequest) (int64, int64, error) {
	tenantId, err := CheckTenantId(s.Ctx)
	if err != nil {
		return 0, 0, err
	}
	if req.AppKey == "" {
		return 0, 0, errors.New("AppKey不能为空")
	}
	//通过LimitDays获取开始时间和结束时间
	startTime := iotutil.BeginningOfPointDay(int64(req.LimitDays))
	endTime := iotutil.EndOfPointDay(0)
	t := orm.Use(iotmodel.GetDB()).TLangCustomResourceRecord
	//TODO 修改为GroupBy写法
	list, err := t.WithContext(context.Background()).Where(t.TenantId.Eq(tenantId),
		t.AppKey.Eq(req.AppKey),
		t.OperTime.Between(startTime, endTime)).Find()
	if err != nil {
		logger.Errorf("CreateLangCustomResources error : %s", err.Error())
		return 0, 0, err
	}
	var (
		importCount int64 = 0
		exportCount int64 = 0
	)
	for _, record := range list {
		switch record.OperType {
		case 1:
			importCount++
		case 2:
			exportCount++
		}
	}
	return importCount, exportCount, err
}

// 创建LangCustomResources
func (s *LangCustomResourcesSvc) CreateRecord(req *proto.CustomerResourceRecord) error {
	if req.TenantId == "" {
		return errors.New("TenantId不能为空")
	}
	if req.AppKey == "" {
		return errors.New("AppKey不能为空")
	}
	t := orm.Use(iotmodel.GetDB()).TLangCustomResourceRecord
	err := t.WithContext(context.Background()).Create(&model.TLangCustomResourceRecord{
		Id:        req.Id,
		TenantId:  req.TenantId,
		UserId:    req.UserId,
		AppKey:    req.AppKey,
		OperTime:  time.Now(),
		OperType:  req.OpType,
		CreatedBy: req.UserId,
	})
	if err != nil {
		logger.Errorf("CreateLangCustomResources error : %s", err.Error())
		return err
	}
	return nil
}

// 创建LangResourcePackage
func (s *LangCustomResourcesSvc) ImportLangCustomResources(req *proto.ImportLangCustomResource) error {
	if req.AppKey == "" {
		return errors.New("AppKey不能为空")
	}
	if req.LangResource == nil || len(req.LangResource) == 0 {
		return errors.New("翻译内容不能为空")
	}
	var err error
	tenantId, err := CheckTenantId(s.Ctx)
	if err != nil {
		return err
	}
	//userId, err := GetUserId(s.Ctx)
	if err != nil {
		return err
	}
	//userIdInt := iotutil.ToInt64(userId)
	q := orm.Use(iotmodel.GetDB())
	err = q.Transaction(func(tx *orm.Query) error {
		//上传记录 (外部保存）
		//err = tx.TLangCustomResourceRecord.WithContext(context.Background()).Create(&model.TLangCustomResourceRecord{
		//	Id:        iotutil.GetNextSeqInt64(),
		//	TenantId:  tenantId,
		//	UserId:    userIdInt,
		//	AppKey:    req.AppKey,
		//	OperTime:  time.Time{},
		//	OperType:  1,
		//	CreatedBy: userIdInt,
		//})
		//if err != nil {
		//	return err
		//}
		tResources := tx.TLangCustomResources
		doResources := tResources.WithContext(context.Background())
		//先删后增，目前判断较为麻烦
		_, err = doResources.Where(tResources.AppKey.Eq(req.AppKey)).Delete()
		if err != nil {
			return err
		}

		//批量插入明细
		saveObjs := make([]*model.TLangCustomResources, 0)
		for _, lang := range req.LangResource {
			var totalCount int = 0
			for _, item := range lang.List {
				item.Id = iotutil.GetNextSeqInt64()
				item.TenantId = tenantId
				item.AppKey = req.AppKey
				totalCount++
				saveObjs = append(saveObjs, convert.LangCustomResources_pb2db(item))
				if len(saveObjs) == 100 || totalCount == len(lang.List) {
					err = doResources.Create(saveObjs...)
					if err != nil {
						break
					}
					saveObjs = make([]*model.TLangCustomResources, 0)
					continue
				}
			}
		}
		return err
	})

	if err != nil {
		logger.Errorf("CreateLangResourcePackage error : %s", err.Error())
		return err
	}
	return err
}

// 批量新增资源 BatchSaveCustomResources，通过BelongId和BelongType
func (s *LangCustomResourcesSvc) BatchSaveCustomResources(req *proto.BatchCustomResourcesRequest) error {
	if req.BelongId == 0 && req.BelongType == 0 {
		return errors.New("BelongId,BelongType不能同时为空")
	}
	if req.ResourcesList == nil || len(req.ResourcesList) == 0 {
		return errors.New("翻译资源不能为空")
	}
	var err error
	tenantId, err := CheckTenantId(s.Ctx)
	if err != nil {
		return err
	}
	if err != nil {
		return err
	}
	q := orm.Use(iotmodel.GetDB())
	err = q.Transaction(func(tx *orm.Query) error {
		tResources := tx.TLangCustomResources
		doResources := tResources.WithContext(context.Background())
		//TODO 复制面板翻译功能取消，改为合并更新的方式
		//count, err := doResources.Where(tResources.BelongId.Eq(req.BelongId),
		//	tResources.BelongType.Eq(req.BelongType),
		//	tResources.ProductKey.Eq(req.ProductKey)).Count()
		//if count == 0 {
		//	//保存默认数据
		//	tDefaultRes := tx.TLangResources
		//	defaultList, err := tx.TLangResources.WithContext(context.Background()).Where(
		//		tDefaultRes.BelongId.Eq(req.BelongId),
		//		tDefaultRes.BelongType.Eq(req.BelongType)).Find()
		//	if err != nil {
		//		return err
		//	}
		//	if len(defaultList) > 0 {
		//		saveDefaultList := []*model.TLangCustomResources{}
		//		for _, resources := range defaultList {
		//			saveDefaultList = append(saveDefaultList, &model.TLangCustomResources{
		//				Id:         iotutil.GetNextSeqInt64(),
		//				TenantId:   tenantId,
		//				Lang:       resources.Lang,
		//				Code:       resources.Code,
		//				Value:      resources.Value,
		//				BelongType: req.BelongType,
		//				BelongId:   req.BelongId,
		//				ProductKey: req.ProductKey,
		//			})
		//		}
		//		err = doResources.Create(saveDefaultList...)
		//		if err != nil {
		//			return err
		//		}
		//	}
		//}
		//先删后增，目前判断较为麻烦
		_, err = doResources.Where(tResources.BelongId.Eq(req.BelongId),
			tResources.ProductKey.Eq(req.ProductKey),
			tResources.BelongType.Eq(req.BelongType), tResources.Code.Eq(req.LangKey)).Delete()
		if err != nil {
			return err
		}
		//批量插入明细
		saveObjs := make([]*model.TLangCustomResources, 0)
		var totalCount int = 0
		for _, item := range req.ResourcesList {
			item.Id = iotutil.GetNextSeqInt64()
			totalCount++
			saveObjs = append(saveObjs, &model.TLangCustomResources{
				Id:         iotutil.GetNextSeqInt64(),
				TenantId:   tenantId,
				AppId:      0,
				Lang:       item.Lang,
				Code:       item.LangKey,
				Value:      item.Value,
				BelongType: req.BelongType,
				BelongId:   req.BelongId,
				ProductKey: req.ProductKey,
			})
			if len(saveObjs) == 100 || totalCount == len(req.ResourcesList) {
				err = doResources.Create(saveObjs...)
				if err != nil {
					break
				}
				saveObjs = make([]*model.TLangCustomResources, 0)
				continue
			}
		}
		return err
	})

	if err != nil {
		logger.Errorf("BatchLangCustomResources error : %s", err.Error())
		return err
	}
	return err
}

// 创建LangCustomResources
func (s *LangCustomResourcesSvc) CreateLangCustomResources(req *proto.LangCustomResources) (*proto.LangCustomResources, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TLangCustomResources
	do := t.WithContext(context.Background())
	dbObj := convert.LangCustomResources_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateLangCustomResources error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除LangCustomResources
func (s *LangCustomResourcesSvc) DeleteLangCustomResources(req *proto.LangCustomResources) (*proto.LangCustomResources, error) {
	t := orm.Use(iotmodel.GetDB()).TLangCustomResources
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.Code != "" { //字符串
		do = do.Where(t.Code.Eq(req.Code))
	}
	if req.Value != "" { //字符串
		do = do.Where(t.Value.Eq(req.Value))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteLangCustomResources error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除LangCustomResources
func (s *LangCustomResourcesSvc) DeleteByIdLangCustomResources(req *proto.LangCustomResources) (*proto.LangCustomResources, error) {
	t := orm.Use(iotmodel.GetDB()).TLangCustomResources
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdLangCustomResources error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除LangCustomResources
func (s *LangCustomResourcesSvc) DeleteByIdsLangCustomResources(req *proto.LangCustomResourcesBatchDeleteRequest) (*proto.LangCustomResourcesBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TLangCustomResources
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsLangCustomResources error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新LangCustomResources
func (s *LangCustomResourcesSvc) UpdateLangCustomResources(req *proto.LangCustomResources) (*proto.LangCustomResources, error) {
	t := orm.Use(iotmodel.GetDB()).TLangCustomResources
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.TenantId)
	}
	if req.AppKey != "" { //字符串
		updateField = append(updateField, t.AppKey)
	}
	if req.Lang != "" { //字符串
		updateField = append(updateField, t.Lang)
	}
	if req.Code != "" { //字符串
		updateField = append(updateField, t.Code)
	}
	if req.Value != "" { //字符串
		updateField = append(updateField, t.Value)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateLangCustomResources error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.LangCustomResources_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateLangCustomResources error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段LangCustomResources
func (s *LangCustomResourcesSvc) UpdateAllLangCustomResources(req *proto.LangCustomResources) (*proto.LangCustomResources, error) {
	t := orm.Use(iotmodel.GetDB()).TLangCustomResources
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.TenantId)
	updateField = append(updateField, t.AppKey)
	updateField = append(updateField, t.Lang)
	updateField = append(updateField, t.Code)
	updateField = append(updateField, t.Value)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllLangCustomResources error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.LangCustomResources_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllLangCustomResources error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *LangCustomResourcesSvc) UpdateFieldsLangCustomResources(req *proto.LangCustomResourcesUpdateFieldsRequest) (*proto.LangCustomResources, error) {
	t := orm.Use(iotmodel.GetDB()).TLangCustomResources
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsLangCustomResources error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsLangCustomResources error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.LangCustomResources_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsLangCustomResources error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找LangCustomResources
func (s *LangCustomResourcesSvc) FindLangCustomResources(req *proto.LangCustomResourcesFilter) (*proto.LangCustomResources, error) {
	t := orm.Use(iotmodel.GetDB()).TLangCustomResources
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.AppKey != "" { //字符串
		do = do.Where(t.AppKey.Eq(req.AppKey))
	}
	if req.Lang != "" { //字符串
		do = do.Where(t.Lang.Eq(req.Lang))
	}
	if req.Code != "" { //字符串
		do = do.Where(t.Code.Eq(req.Code))
	}
	if req.Value != "" { //字符串
		do = do.Where(t.Value.Eq(req.Value))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindLangCustomResources error : %s", err.Error())
		return nil, err
	}
	res := convert.LangCustomResources_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找LangCustomResources
func (s *LangCustomResourcesSvc) FindByIdLangCustomResources(req *proto.LangCustomResourcesFilter) (*proto.LangCustomResources, error) {
	t := orm.Use(iotmodel.GetDB()).TLangCustomResources
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdLangCustomResources error : %s", err.Error())
		return nil, err
	}
	res := convert.LangCustomResources_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找LangCustomResources,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *LangCustomResourcesSvc) GetListLangCustomResources(req *proto.LangCustomResourcesListRequest) ([]*proto.LangCustomResources, int64, error) {
	//if req.Query == nil || (req.Query.AppKey == "" && req.Query.AppId == 0) {
	//	return nil, 0, errors.New("AppKey不能为空")
	//}
	var err error
	tenantId, _ := CheckTenantId(s.Ctx)
	t := orm.Use(iotmodel.GetDB()).TLangCustomResources
	do := t.WithContext(context.Background())
	if tenantId != "" {
		do = do.Where(t.TenantId.Eq(tenantId))
	}
	query := req.Query
	if query != nil {
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Eq(query.TenantId))
		}
		if query.AppKey != "" { //字符串
			do = do.Where(t.AppKey.Eq(query.AppKey))
		}
		if query.BelongType != 0 {
			do = do.Where(t.BelongType.Eq(query.BelongType))
		}
		//TODO 临时处理
		if query.BelongType == 4 {
			do = do.Where(t.BelongId.Eq(query.BelongId))
		}
		if query.ProductKey != "" {
			do = do.Where(t.ProductKey.Eq(query.ProductKey))
		}
		if query.Lang != "" { //字符串
			do = do.Where(t.Lang.Eq(query.Lang))
		}
		if query.Code != "" { //字符串
			do = do.Where(t.Code.Eq(query.Code))
		}
		if query.Value != "" { //字符串
			do = do.Where(t.Value.Like("%" + query.Value + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.Code)
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*model.TLangCustomResources
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListLangCustomResources error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.LangCustomResources, len(list))
	for i, v := range list {
		result[i] = convert.LangCustomResources_db2pb(v)
	}
	return result, total, nil
}
