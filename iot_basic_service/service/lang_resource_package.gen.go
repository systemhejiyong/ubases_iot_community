// Code generated by sgen.exe,2022-05-31 13:46:36. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_basic_service/convert"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_config/model"
	"cloud_platform/iot_model/db_config/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type LangResourcePackageSvc struct {
	Ctx context.Context
}

// 创建LangResourcePackage 通过包Id进行保存
func (s *LangResourcePackageSvc) CreateLangResourcePackageV2(req *proto.LangResourcePackage) (*proto.LangResourcePackage, error) {
	var err error
	userId, err := GetUserId(s.Ctx)
	if err != nil {
		return nil, err
	}
	userIdInt := iotutil.ToInt64(userId)
	// fixme 请在这里校验参数
	q := orm.Use(iotmodel.GetDB())
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TLangResourcePackage
		do := t.WithContext(context.Background())

		saveObj := new(model.TLangResourcePackage)
		//异常数据包，记录数量大于1
		if req.Id == 0 {
			saveObj.Id = iotutil.GetNextSeqInt64()
			saveObj.CreatedBy = req.CreatedBy
			//去重
			existsCount, err := tx.TLangResourcePackage.WithContext(context.Background()).Where(t.AppTemplateId.Eq(req.AppTemplateId)).Count()
			if err != nil {
				return err
			}
			if existsCount > 0 {
				return errors.New("APP模板翻译已存在，不可重复创建！")
			}
		} else {
			packageInfo, err := do.Where(t.Id.Eq(req.Id)).First()
			if err != nil {
				return err
			}
			saveObj = packageInfo
			saveObj.UpdatedBy = req.UpdatedBy
			//去重
			existsCount, err := tx.TLangResourcePackage.WithContext(context.Background()).Where(t.AppTemplateId.Eq(req.AppTemplateId), t.Id.Neq(saveObj.Id)).Count()
			if err != nil {
				return err
			}
			if existsCount > 0 {
				return errors.New("APP模板翻译已存在，不可重复创建！")
			}
		}
		saveObj.PackageName = req.PackageName
		saveObj.BelongType = req.BelongType
		saveObj.BelongId = req.BelongId
		saveObj.AppTemplateId = req.AppTemplateId
		saveObj.AppTemplateType = req.AppTemplateType
		saveObj.FileSize = req.FileSize
		saveObj.FileName = req.FileName
		err = do.Save(saveObj)
		if err != nil {
			return err
		}

		if req.LangResource != nil {
			tResources := tx.TLangResources
			doResources := tResources.WithContext(context.Background())
			//先删后增，目前判断较为麻烦
			_, err = doResources.Where(tResources.BelongType.Eq(req.BelongType), tResources.BelongId.Eq(req.BelongId)).Delete()
			if err != nil {
				return err
			}

			//批量插入明细
			saveObjs := make([]*model.TLangResources, 0)
			for _, lang := range req.LangResource {
				var finishCount int = 0
				for _, item := range lang.List {
					item.Id = iotutil.GetNextSeqInt64()
					item.CreatedBy = userIdInt
					item.UpdatedBy = userIdInt
					langItem := convert.LangResources_pb2db(item)
					langItem.PackageId = saveObj.Id
					saveObjs = append(saveObjs, langItem)
					if len(saveObjs) == 300 || len(saveObjs)+finishCount == len(lang.List) {
						err = doResources.Create(saveObjs...)
						if err != nil {
							break
						}
						finishCount += len(saveObjs)
						saveObjs = make([]*model.TLangResources, 0)
						continue
					}
				}
			}
		}
		return err
	})

	if err != nil {
		logger.Errorf("CreateLangResourcePackage error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 创建LangResourcePackage
func (s *LangResourcePackageSvc) CreateLangResourcePackage(req *proto.LangResourcePackage) (*proto.LangResourcePackage, error) {
	var err error
	userId, err := GetUserId(s.Ctx)
	if err != nil {
		return nil, err
	}
	userIdInt := iotutil.ToInt64(userId)
	// fixme 请在这里校验参数
	q := orm.Use(iotmodel.GetDB())
	err = q.Transaction(func(tx *orm.Query) error {
		t := tx.TLangResourcePackage
		do := t.WithContext(context.Background())

		packages, err := do.Where(t.BelongType.Eq(req.BelongType), t.BelongId.Eq(req.BelongId)).Find()
		if err != nil {
			return err
		}
		//异常数据包，记录数量大于1
		var packageId int64 = 0
		if len(packages) >= 1 {
			packageId = packages[0].Id
			if len(packages) > 1 {
				do.Where(t.BelongType.Eq(req.BelongType), t.Id.Neq(packageId)).Delete()
			}
		} else {
			packageId = iotutil.GetNextSeqInt64()
		}
		req.Id = packageId
		dbObj := convert.LangResourcePackage_pb2db(req)
		dbObj.CreatedBy = userIdInt
		dbObj.UpdatedBy = userIdInt
		err = do.Save(dbObj)
		if err != nil {
			return err
		}

		tResources := tx.TLangResources
		doResources := tResources.WithContext(context.Background())
		//先删后增，目前判断较为麻烦
		_, err = doResources.Where(tResources.BelongType.Eq(req.BelongType), tResources.BelongId.Eq(req.BelongId)).Delete()
		if err != nil {
			return err
		}

		//批量插入明细
		saveObjs := make([]*model.TLangResources, 0)
		for _, lang := range req.LangResource {
			var finishCount int = 0
			for _, item := range lang.List {
				item.Id = iotutil.GetNextSeqInt64()
				item.CreatedBy = userIdInt
				item.UpdatedBy = userIdInt
				langItem := convert.LangResources_pb2db(item)
				langItem.PackageId = packageId
				saveObjs = append(saveObjs, langItem)
				if len(saveObjs) == 400 || len(saveObjs)+finishCount == len(lang.List) {
					err = doResources.Create(saveObjs...)
					if err != nil {
						break
					}
					finishCount += len(saveObjs)
					saveObjs = make([]*model.TLangResources, 0)
					continue
				}
			}
		}
		return err
	})

	if err != nil {
		logger.Errorf("CreateLangResourcePackage error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除LangResourcePackage
func (s *LangResourcePackageSvc) DeleteLangResourcePackage(req *proto.LangResourcePackage) (*proto.LangResourcePackage, error) {
	t := orm.Use(iotmodel.GetDB()).TLangResourcePackage
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.BelongType != 0 { //整数
		do = do.Where(t.BelongType.Eq(req.BelongType))
	}
	if req.PackageName != "" { //字符串
		do = do.Where(t.PackageName.Eq(req.PackageName))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteLangResourcePackage error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除LangResourcePackage
func (s *LangResourcePackageSvc) DeleteByIdLangResourcePackage(req *proto.LangResourcePackage) (*proto.LangResourcePackage, error) {
	t := orm.Use(iotmodel.GetDB()).TLangResourcePackage
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdLangResourcePackage error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除LangResourcePackage
func (s *LangResourcePackageSvc) DeleteByIdsLangResourcePackage(req *proto.LangResourcePackageBatchDeleteRequest) (*proto.LangResourcePackageBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TLangResourcePackage
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsLangResourcePackage error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新LangResourcePackage
func (s *LangResourcePackageSvc) UpdateLangResourcePackage(req *proto.LangResourcePackage) (*proto.LangResourcePackage, error) {
	t := orm.Use(iotmodel.GetDB()).TLangResourcePackage
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.BelongType != 0 { //整数
		updateField = append(updateField, t.BelongType)
	}
	if req.BelongId != 0 { //整数
		updateField = append(updateField, t.BelongId)
	}
	if req.PackageName != "" { //字符串
		updateField = append(updateField, t.PackageName)
	}
	if req.AppTemplateType != 0 {
		updateField = append(updateField, t.AppTemplateType)
	}
	if req.AppTemplateId != 0 {
		updateField = append(updateField, t.AppTemplateId)
	}
	if req.FileName != "" {
		updateField = append(updateField, t.FileName)
	}
	if req.FileSize != 0 {
		updateField = append(updateField, t.FileSize)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateLangResourcePackage error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.LangResourcePackage_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateLangResourcePackage error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段LangResourcePackage
func (s *LangResourcePackageSvc) UpdateAllLangResourcePackage(req *proto.LangResourcePackage) (*proto.LangResourcePackage, error) {
	t := orm.Use(iotmodel.GetDB()).TLangResourcePackage
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.BelongType)
	updateField = append(updateField, t.BelongId)
	updateField = append(updateField, t.AppTemplateType)
	updateField = append(updateField, t.AppTemplateId)
	updateField = append(updateField, t.PackageName)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllLangResourcePackage error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.LangResourcePackage_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllLangResourcePackage error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *LangResourcePackageSvc) UpdateFieldsLangResourcePackage(req *proto.LangResourcePackageUpdateFieldsRequest) (*proto.LangResourcePackage, error) {
	t := orm.Use(iotmodel.GetDB()).TLangResourcePackage
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsLangResourcePackage error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsLangResourcePackage error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.LangResourcePackage_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsLangResourcePackage error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找LangResourcePackage
func (s *LangResourcePackageSvc) FindLangResourcePackage(req *proto.LangResourcePackageFilter) (*proto.LangResourcePackage, error) {
	t := orm.Use(iotmodel.GetDB()).TLangResourcePackage
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.BelongType != 0 { //整数
		do = do.Where(t.BelongType.Eq(req.BelongType))
	}
	if req.PackageName != "" { //字符串
		do = do.Where(t.PackageName.Eq(req.PackageName))
	}
	if req.AppTemplateId != 0 {
		do = do.Where(t.AppTemplateId.Eq(req.AppTemplateId))
	}
	if req.AppTemplateType != 0 {
		do = do.Where(t.AppTemplateType.Eq(req.AppTemplateType))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindLangResourcePackage error : %s", err.Error())
		return nil, err
	}
	res := convert.LangResourcePackage_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找LangResourcePackage
func (s *LangResourcePackageSvc) FindByIdLangResourcePackage(req *proto.LangResourcePackageFilter) (*proto.LangResourcePackage, error) {
	t := orm.Use(iotmodel.GetDB()).TLangResourcePackage
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdLangResourcePackage error : %s", err.Error())
		return nil, err
	}
	res := convert.LangResourcePackage_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找LangResourcePackage,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *LangResourcePackageSvc) GetListLangResourcePackage(req *proto.LangResourcePackageListRequest) ([]*proto.LangResourcePackage, int64, error) {
	var err error
	q := orm.Use(iotmodel.GetDB())
	t := q.TLangResourcePackage
	do := t.WithContext(context.Background())

	query := req.Query
	if query != nil {
		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.BelongType != 0 { //整数
			do = do.Where(t.BelongType.Eq(query.BelongType))
		}
		if query.BelongId != 0 {
			do = do.Where(t.BelongId.Eq(query.BelongId))
		}
		if query.AppTemplateId != 0 {
			do = do.Where(t.AppTemplateId.Eq(query.AppTemplateId))
		}
		if query.AppTemplateType != 0 {
			do = do.Where(t.AppTemplateType.Eq(query.AppTemplateType))
		}
		if query.BelongId != 0 {
			do = do.Where(t.BelongId.Eq(query.BelongId))
		}
		if query.PackageName != "" { //字符串
			do = do.Where(t.PackageName.Like("%" + query.PackageName + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.CreatedAt.Desc())
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}
	//do = do.LeftJoin(doResources.Select(tResources.Id, tResources.b).
	//	Group(tResources.BelongType).As("t_lang_resources"), tResources.Id.EqCol(t.Id))
	//do = do.Select(t.ALL, tVersion.FirmwareId, tVersion.Version.As("lastVersion"))

	var list []*model.TLangResourcePackage
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListLangResourcePackage error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.LangResourcePackage, len(list))

	tResources := q.TLangResources
	doResources := tResources.WithContext(context.Background())
	if query != nil {
		if query.BelongType != 0 { //整数
			doResources = doResources.Where(tResources.BelongType.Eq(query.BelongType))
		}
		if query.BelongId != 0 {
			doResources = doResources.Where(tResources.BelongId.Eq(query.BelongId))
		}
	}
	langs, err := doResources.Distinct(tResources.Lang, tResources.BelongType).Find()
	if err != nil {
		return nil, 0, err
	}
	langMap := map[int32][]string{}
	for _, lang := range langs {
		langMap[lang.BelongType] = append(langMap[lang.BelongType], lang.Lang)
	}
	for i, v := range list {
		result[i] = convert.LangResourcePackage_db2pb(v)
		if _, ok := langMap[v.BelongType]; ok {
			result[i].Langs = langMap[v.BelongType]
		}
	}
	return result, total, nil
}
