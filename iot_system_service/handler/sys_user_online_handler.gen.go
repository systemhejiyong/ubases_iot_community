// Code generated by sgen.exe,2022-04-18 19:12:10. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"cloud_platform/iot_common/iotredis"
	"context"

	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/service"
)

type SysUserOnlineHandler struct{}

// 创建
func (h *SysUserOnlineHandler) Create(ctx context.Context, req *proto.SysUserOnline, resp *proto.Response) error {
	s := service.SysUserOnlineSvc{Ctx: ctx}
	_, err := s.CreateSysUserOnline(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *SysUserOnlineHandler) Delete(ctx context.Context, req *proto.SysUserOnline, resp *proto.Response) error {
	s := service.SysUserOnlineSvc{Ctx: ctx}
	//删除在线记录，将所有在用户强制退出登录
	svc := service.SysUserOnlineSvc{context.Background()}
	userOnline, oerr := svc.FindSysUserOnline(&proto.SysUserOnlineFilter{Token: req.Token})
	if oerr == nil && userOnline != nil {
		keys := []string{userOnline.Token}
		iotredis.GetClient().Del(context.Background(), keys...)
	}
	_, err := s.DeleteSysUserOnline(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *SysUserOnlineHandler) DeleteById(ctx context.Context, req *proto.SysUserOnline, resp *proto.Response) error {
	s := service.SysUserOnlineSvc{Ctx: ctx}
	_, err := s.DeleteByIdSysUserOnline(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *SysUserOnlineHandler) DeleteByIds(ctx context.Context, req *proto.SysUserOnlineBatchDeleteRequest, resp *proto.Response) error {
	s := service.SysUserOnlineSvc{Ctx: ctx}
	_, err := s.DeleteByIdsSysUserOnline(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *SysUserOnlineHandler) Update(ctx context.Context, req *proto.SysUserOnline, resp *proto.Response) error {
	s := service.SysUserOnlineSvc{Ctx: ctx}
	_, err := s.UpdateSysUserOnline(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *SysUserOnlineHandler) UpdateAll(ctx context.Context, req *proto.SysUserOnline, resp *proto.Response) error {
	s := service.SysUserOnlineSvc{Ctx: ctx}
	_, err := s.UpdateAllSysUserOnline(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *SysUserOnlineHandler) UpdateFields(ctx context.Context, req *proto.SysUserOnlineUpdateFieldsRequest, resp *proto.Response) error {
	s := service.SysUserOnlineSvc{Ctx: ctx}
	_, err := s.UpdateFieldsSysUserOnline(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *SysUserOnlineHandler) Find(ctx context.Context, req *proto.SysUserOnlineFilter, resp *proto.SysUserOnlineResponse) error {
	s := service.SysUserOnlineSvc{Ctx: ctx}
	data, err := s.FindSysUserOnline(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *SysUserOnlineHandler) FindById(ctx context.Context, req *proto.SysUserOnlineFilter, resp *proto.SysUserOnlineResponse) error {
	s := service.SysUserOnlineSvc{Ctx: ctx}
	data, err := s.FindByIdSysUserOnline(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *SysUserOnlineHandler) Lists(ctx context.Context, req *proto.SysUserOnlineListRequest, resp *proto.SysUserOnlineResponse) error {
	s := service.SysUserOnlineSvc{Ctx: ctx}
	data, total, err := s.GetListSysUserOnline(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *SysUserOnlineHandler) SetResponse(resp *proto.SysUserOnlineResponse, data *proto.SysUserOnline, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *SysUserOnlineHandler) SetPageResponse(resp *proto.SysUserOnlineResponse, list []*proto.SysUserOnline, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
