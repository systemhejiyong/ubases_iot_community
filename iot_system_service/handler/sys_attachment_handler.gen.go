// Code generated by sgen,2024-06-07 15:19:18. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
    "context"


    proto "cloud_platform/iot_proto/protos/protosService"
    "cloud_platform/iot_system_service/service"
)

type SysAttachmentHandler struct{}

//创建
func (h *SysAttachmentHandler) Create(ctx context.Context, req *proto.SysAttachment,resp *proto.Response)  error {
    s := service.SysAttachmentSvc{Ctx: ctx}
	_, err := s.CreateSysAttachment(req)
    SetResponse(resp, err)
	return nil
}

//匹配多条件删除
func (h *SysAttachmentHandler) Delete(ctx context.Context, req *proto.SysAttachment,resp *proto.Response) error {
    s := service.SysAttachmentSvc{Ctx: ctx}
	_, err := s.DeleteSysAttachment(req)
    SetResponse(resp, err)
	return nil
}

//匹配ID删除
func (h *SysAttachmentHandler) DeleteById(ctx context.Context, req *proto.SysAttachment,resp *proto.Response) error {
    s := service.SysAttachmentSvc{Ctx: ctx}
	_, err := s.DeleteByIdSysAttachment(req)
    SetResponse(resp, err)
	return nil
}

//根据主键批量删除
func (h *SysAttachmentHandler) DeleteByIds(ctx context.Context, req *proto.SysAttachmentBatchDeleteRequest,resp *proto.Response) error {
    s := service.SysAttachmentSvc{Ctx: ctx}
	_, err := s.DeleteByIdsSysAttachment(req)
    SetResponse(resp, err)
	return nil
}

//更新
func (h *SysAttachmentHandler) Update(ctx context.Context, req *proto.SysAttachment,resp *proto.Response) error {
    s := service.SysAttachmentSvc{Ctx: ctx}
	_, err := s.UpdateSysAttachment(req)
    SetResponse(resp, err)
	return nil
}

//根据主键更新所有字段
func (h *SysAttachmentHandler) UpdateAll(ctx context.Context, req *proto.SysAttachment,resp *proto.Response) error {
    s := service.SysAttachmentSvc{Ctx: ctx}
	_, err := s.UpdateAllSysAttachment(req)
    SetResponse(resp, err)
	return nil
}

//根据主键更新指定列
func (h *SysAttachmentHandler) UpdateFields(ctx context.Context, req *proto.SysAttachmentUpdateFieldsRequest,resp *proto.Response) error {
    s := service.SysAttachmentSvc{Ctx: ctx}
	_, err := s.UpdateFieldsSysAttachment(req)
    SetResponse(resp, err)
	return nil
}

//多条件查找，返回单条数据
func (h *SysAttachmentHandler) Find(ctx context.Context, req *proto.SysAttachmentFilter,resp *proto.SysAttachmentResponse)  error {
    s := service.SysAttachmentSvc{Ctx: ctx}
	data, err := s.FindSysAttachment(req)
    h.SetResponse(resp, data, err)
	return nil
}

//根据ID查找，返回单条数据
func (h *SysAttachmentHandler) FindById(ctx context.Context, req *proto.SysAttachmentFilter,resp *proto.SysAttachmentResponse) error {
    s := service.SysAttachmentSvc{Ctx: ctx}
	data, err := s.FindByIdSysAttachment(req)
	h.SetResponse(resp, data, err)
	return nil
}

//查找，支持分页，可返回多条数据
func (h *SysAttachmentHandler) Lists(ctx context.Context, req *proto.SysAttachmentListRequest,resp *proto.SysAttachmentResponse) error {
    s := service.SysAttachmentSvc{Ctx: ctx}
    data, total, err := s.GetListSysAttachment(req)
    h.SetPageResponse(resp, data, total, err)
	return nil
}


func (h *SysAttachmentHandler) SetResponse(resp *proto.SysAttachmentResponse, data *proto.SysAttachment, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *SysAttachmentHandler) SetPageResponse(resp *proto.SysAttachmentResponse, list []*proto.SysAttachment, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
