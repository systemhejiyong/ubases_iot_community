// Code generated by sgen.exe,2022-04-18 19:12:06. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/service"
)

type DemoGenHandler struct{}

// 创建
func (h *DemoGenHandler) Create(ctx context.Context, req *proto.DemoGen, resp *proto.Response) error {
	s := service.DemoGenSvc{Ctx: ctx}
	_, err := s.CreateDemoGen(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *DemoGenHandler) Delete(ctx context.Context, req *proto.DemoGen, resp *proto.Response) error {
	s := service.DemoGenSvc{Ctx: ctx}
	_, err := s.DeleteDemoGen(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *DemoGenHandler) DeleteById(ctx context.Context, req *proto.DemoGen, resp *proto.Response) error {
	s := service.DemoGenSvc{Ctx: ctx}
	_, err := s.DeleteByIdDemoGen(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *DemoGenHandler) DeleteByIds(ctx context.Context, req *proto.DemoGenBatchDeleteRequest, resp *proto.Response) error {
	s := service.DemoGenSvc{Ctx: ctx}
	_, err := s.DeleteByIdsDemoGen(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *DemoGenHandler) Update(ctx context.Context, req *proto.DemoGen, resp *proto.Response) error {
	s := service.DemoGenSvc{Ctx: ctx}
	_, err := s.UpdateDemoGen(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *DemoGenHandler) UpdateAll(ctx context.Context, req *proto.DemoGen, resp *proto.Response) error {
	s := service.DemoGenSvc{Ctx: ctx}
	_, err := s.UpdateAllDemoGen(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *DemoGenHandler) UpdateFields(ctx context.Context, req *proto.DemoGenUpdateFieldsRequest, resp *proto.Response) error {
	s := service.DemoGenSvc{Ctx: ctx}
	_, err := s.UpdateFieldsDemoGen(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *DemoGenHandler) Find(ctx context.Context, req *proto.DemoGenFilter, resp *proto.DemoGenResponse) error {
	s := service.DemoGenSvc{Ctx: ctx}
	data, err := s.FindDemoGen(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *DemoGenHandler) FindById(ctx context.Context, req *proto.DemoGenFilter, resp *proto.DemoGenResponse) error {
	s := service.DemoGenSvc{Ctx: ctx}
	data, err := s.FindByIdDemoGen(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *DemoGenHandler) Lists(ctx context.Context, req *proto.DemoGenListRequest, resp *proto.DemoGenResponse) error {
	s := service.DemoGenSvc{Ctx: ctx}
	data, total, err := s.GetListDemoGen(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *DemoGenHandler) SetResponse(resp *proto.DemoGenResponse, data *proto.DemoGen, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *DemoGenHandler) SetPageResponse(resp *proto.DemoGenResponse, list []*proto.DemoGen, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
