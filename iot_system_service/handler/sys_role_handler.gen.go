// Code generated by sgen.exe,2022-04-18 19:12:10. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"cloud_platform/iot_common/iotutil"
	"context"

	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/service"
)

type SysRoleHandler struct{}

// 创建
func (h *SysRoleHandler) Create(ctx context.Context, req *proto.SysRole, resp *proto.Response) error {
	s := service.SysRoleSvc{Ctx: ctx}
	_, err := s.CreateSysRole(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *SysRoleHandler) Delete(ctx context.Context, req *proto.SysRole, resp *proto.Response) error {
	s := service.SysRoleSvc{Ctx: ctx}

	//检查角色是否绑定了用户
	casbinHandler := CasbinRuleExtHandler{}
	userIds := casbinHandler.GetRoleUsers(req.Id)
	if len(userIds) > 0 {
		resp.Code = ERROR
		resp.Message = "当前角色已绑定用户，无法删除！"
		return nil
	}
	_, err := s.DeleteSysRole(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *SysRoleHandler) DeleteById(ctx context.Context, req *proto.SysRole, resp *proto.Response) error {
	s := service.SysRoleSvc{Ctx: ctx}

	//检查角色是否绑定了用户
	casbinHandler := CasbinRuleExtHandler{}
	userIds := casbinHandler.GetRoleUsers(req.Id)
	if len(userIds) > 0 {
		resp.Code = ERROR
		resp.Message = "当前角色已绑定用户，无法删除！"
		return nil
	}
	_, err := s.DeleteByIdSysRole(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *SysRoleHandler) DeleteByIds(ctx context.Context, req *proto.SysRoleBatchDeleteRequest, resp *proto.Response) error {
	s := service.SysRoleSvc{Ctx: ctx}
	for _, key := range req.Keys {
		//检查角色是否绑定了用户
		casbinHandler := CasbinRuleExtHandler{}
		roleId, err := iotutil.ToInt64AndErr(key)
		if err != nil {
			resp.Code = ERROR
			resp.Message = "当前角色已绑定用户，无法删除！"
			break
		}
		userIds := casbinHandler.GetRoleUsers(roleId)
		if len(userIds) > 0 {
			resp.Code = ERROR
			resp.Message = "当前角色已绑定用户，无法删除！"
			break
		}
	}
	if resp.Code != ERROR {
		_, err := s.DeleteByIdsSysRole(req)
		SetResponse(resp, err)
	}
	return nil
}

// 更新
func (h *SysRoleHandler) Update(ctx context.Context, req *proto.SysRole, resp *proto.Response) error {
	s := service.SysRoleSvc{Ctx: ctx}
	_, err := s.UpdateSysRole(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *SysRoleHandler) UpdateAll(ctx context.Context, req *proto.SysRole, resp *proto.Response) error {
	s := service.SysRoleSvc{Ctx: ctx}
	_, err := s.UpdateAllSysRole(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *SysRoleHandler) UpdateFields(ctx context.Context, req *proto.SysRoleUpdateFieldsRequest, resp *proto.Response) error {
	s := service.SysRoleSvc{Ctx: ctx}
	_, err := s.UpdateFieldsSysRole(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *SysRoleHandler) Find(ctx context.Context, req *proto.SysRoleFilter, resp *proto.SysRoleResponse) error {
	s := service.SysRoleSvc{Ctx: ctx}
	data, err := s.FindSysRole(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *SysRoleHandler) FindById(ctx context.Context, req *proto.SysRoleFilter, resp *proto.SysRoleResponse) error {
	s := service.SysRoleSvc{Ctx: ctx}
	data, err := s.FindByIdSysRole(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *SysRoleHandler) Lists(ctx context.Context, req *proto.SysRoleListRequest, resp *proto.SysRoleResponse) error {
	s := service.SysRoleSvc{Ctx: ctx}
	data, total, err := s.GetListSysRole(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *SysRoleHandler) SetResponse(resp *proto.SysRoleResponse, data *proto.SysRole, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *SysRoleHandler) SetPageResponse(resp *proto.SysRoleResponse, list []*proto.SysRole, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
