// Code generated by sgen.exe,2022-04-18 19:12:11. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/service"
)

type ToolsGenTableColumnHandler struct{}

// 创建
func (h *ToolsGenTableColumnHandler) Create(ctx context.Context, req *proto.ToolsGenTableColumn, resp *proto.Response) error {
	s := service.ToolsGenTableColumnSvc{Ctx: ctx}
	_, err := s.CreateToolsGenTableColumn(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *ToolsGenTableColumnHandler) Delete(ctx context.Context, req *proto.ToolsGenTableColumn, resp *proto.Response) error {
	s := service.ToolsGenTableColumnSvc{Ctx: ctx}
	_, err := s.DeleteToolsGenTableColumn(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *ToolsGenTableColumnHandler) DeleteById(ctx context.Context, req *proto.ToolsGenTableColumn, resp *proto.Response) error {
	s := service.ToolsGenTableColumnSvc{Ctx: ctx}
	_, err := s.DeleteByIdToolsGenTableColumn(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *ToolsGenTableColumnHandler) DeleteByIds(ctx context.Context, req *proto.ToolsGenTableColumnBatchDeleteRequest, resp *proto.Response) error {
	s := service.ToolsGenTableColumnSvc{Ctx: ctx}
	_, err := s.DeleteByIdsToolsGenTableColumn(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *ToolsGenTableColumnHandler) Update(ctx context.Context, req *proto.ToolsGenTableColumn, resp *proto.Response) error {
	s := service.ToolsGenTableColumnSvc{Ctx: ctx}
	_, err := s.UpdateToolsGenTableColumn(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *ToolsGenTableColumnHandler) UpdateAll(ctx context.Context, req *proto.ToolsGenTableColumn, resp *proto.Response) error {
	s := service.ToolsGenTableColumnSvc{Ctx: ctx}
	_, err := s.UpdateAllToolsGenTableColumn(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *ToolsGenTableColumnHandler) UpdateFields(ctx context.Context, req *proto.ToolsGenTableColumnUpdateFieldsRequest, resp *proto.Response) error {
	s := service.ToolsGenTableColumnSvc{Ctx: ctx}
	_, err := s.UpdateFieldsToolsGenTableColumn(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *ToolsGenTableColumnHandler) Find(ctx context.Context, req *proto.ToolsGenTableColumnFilter, resp *proto.ToolsGenTableColumnResponse) error {
	s := service.ToolsGenTableColumnSvc{Ctx: ctx}
	data, err := s.FindToolsGenTableColumn(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *ToolsGenTableColumnHandler) FindById(ctx context.Context, req *proto.ToolsGenTableColumnFilter, resp *proto.ToolsGenTableColumnResponse) error {
	s := service.ToolsGenTableColumnSvc{Ctx: ctx}
	data, err := s.FindByIdToolsGenTableColumn(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *ToolsGenTableColumnHandler) Lists(ctx context.Context, req *proto.ToolsGenTableColumnListRequest, resp *proto.ToolsGenTableColumnResponse) error {
	s := service.ToolsGenTableColumnSvc{Ctx: ctx}
	data, total, err := s.GetListToolsGenTableColumn(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *ToolsGenTableColumnHandler) SetResponse(resp *proto.ToolsGenTableColumnResponse, data *proto.ToolsGenTableColumn, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *ToolsGenTableColumnHandler) SetPageResponse(resp *proto.ToolsGenTableColumnResponse, list []*proto.ToolsGenTableColumn, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
