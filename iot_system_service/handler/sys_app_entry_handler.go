// Code generated by sgen.exe,2022-07-25 09:29:22. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/service"
)

type SysAppEntryHandler struct{}

// 创建
func (h *SysAppEntryHandler) Create(ctx context.Context, req *proto.SysAppEntry, resp *proto.Response) error {
	s := service.SysAppEntrySvc{Ctx: ctx}
	_, err := s.CreateSysAppEntry(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *SysAppEntryHandler) Delete(ctx context.Context, req *proto.SysAppEntry, resp *proto.Response) error {
	s := service.SysAppEntrySvc{Ctx: ctx}
	_, err := s.DeleteSysAppEntry(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *SysAppEntryHandler) DeleteById(ctx context.Context, req *proto.SysAppEntry, resp *proto.Response) error {
	s := service.SysAppEntrySvc{Ctx: ctx}
	_, err := s.DeleteByIdSysAppEntry(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *SysAppEntryHandler) DeleteByIds(ctx context.Context, req *proto.SysAppEntryBatchDeleteRequest, resp *proto.Response) error {
	s := service.SysAppEntrySvc{Ctx: ctx}
	_, err := s.DeleteByIdsSysAppEntry(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *SysAppEntryHandler) Update(ctx context.Context, req *proto.SysAppEntry, resp *proto.Response) error {
	s := service.SysAppEntrySvc{Ctx: ctx}
	_, err := s.UpdateSysAppEntry(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *SysAppEntryHandler) UpdateAll(ctx context.Context, req *proto.SysAppEntry, resp *proto.Response) error {
	s := service.SysAppEntrySvc{Ctx: ctx}
	_, err := s.UpdateAllSysAppEntry(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *SysAppEntryHandler) UpdateFields(ctx context.Context, req *proto.SysAppEntryUpdateFieldsRequest, resp *proto.Response) error {
	s := service.SysAppEntrySvc{Ctx: ctx}
	_, err := s.UpdateFieldsSysAppEntry(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *SysAppEntryHandler) Find(ctx context.Context, req *proto.SysAppEntryFilter, resp *proto.SysAppEntryResponse) error {
	s := service.SysAppEntrySvc{Ctx: ctx}
	data, err := s.FindSysAppEntry(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *SysAppEntryHandler) FindById(ctx context.Context, req *proto.SysAppEntryFilter, resp *proto.SysAppEntryResponse) error {
	s := service.SysAppEntrySvc{Ctx: ctx}
	data, err := s.FindByIdSysAppEntry(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *SysAppEntryHandler) Lists(ctx context.Context, req *proto.SysAppEntryListRequest, resp *proto.SysAppEntryResponse) error {
	s := service.SysAppEntrySvc{Ctx: ctx}
	data, total, err := s.GetListSysAppEntry(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *SysAppEntryHandler) ListDiy(ctx context.Context, req *proto.SysAppEntryListDiyRequqest, resp *proto.SysAppEntryListDiyResponse) error {
	s := service.SysAppEntrySvc{Ctx: ctx}
	data, total, err := s.GetListSysAppEntryListDiy(req)
	//h.SetPageResponse(resp, data, total, err)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = data
	}
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *SysAppEntryHandler) EntryLangsDiy(ctx context.Context, req *proto.SysAppEntryFilter, resp *proto.SysAppEntryLangsDiyResponse) error {
	s := service.SysAppEntrySvc{Ctx: ctx}
	data, err := s.GetSupportedLangListDiy()
	//h.SetPageResponse(resp, data, total, err)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Data = data
	}
	return nil
}

func (h *SysAppEntryHandler) SetResponse(resp *proto.SysAppEntryResponse, data *proto.SysAppEntry, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *SysAppEntryHandler) SetPageResponse(resp *proto.SysAppEntryResponse, list []*proto.SysAppEntry, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}

// 创建
func (h *SysAppEntryHandler) CreateBatch(ctx context.Context, req *proto.SysAppEntryBatchRequest, resp *proto.Response) error {
	s := service.SysAppEntrySvc{Ctx: ctx}
	_, err := s.CreateSysAppEntryBatch(req)
	SetResponse(resp, err)
	return nil
}
