// Code generated by sgen.exe,2022-04-18 19:12:10. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_common/iotutil"
	"context"

	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/service"
)

type SysUserHandler struct{}

// 创建
func (h *SysUserHandler) Create(ctx context.Context, req *proto.SysUser, resp *proto.Response) error {
	s := service.SysUserSvc{Ctx: ctx}
	_, err := s.CreateSysUser(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *SysUserHandler) Delete(ctx context.Context, req *proto.SysUser, resp *proto.Response) error {
	s := service.SysUserSvc{Ctx: ctx}
	_, err := s.DeleteSysUser(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *SysUserHandler) DeleteById(ctx context.Context, req *proto.SysUser, resp *proto.Response) error {
	s := service.SysUserSvc{Ctx: ctx}
	_, err := s.DeleteByIdSysUser(req)
	//删除在线记录，将所有在用户强制退出登录
	svc := service.SysUserOnlineSvc{context.Background()}
	list, err := svc.GetSysUserOnlines(iotutil.ToString(req.Id))
	if err == nil && list != nil && len(list) > 0 {
		keys := make([]string, 0)
		for _, l := range list {
			keys = append(keys, l.Token)
		}
		iotredis.GetClient().Del(context.Background(), keys...)
	}
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *SysUserHandler) DeleteByIds(ctx context.Context, req *proto.SysUserBatchDeleteRequest, resp *proto.Response) error {
	s := service.SysUserSvc{Ctx: ctx}
	_, err := s.DeleteByIdsSysUser(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *SysUserHandler) Update(ctx context.Context, req *proto.SysUser, resp *proto.Response) error {
	s := service.SysUserSvc{Ctx: ctx}
	_, err := s.UpdateSysUser(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *SysUserHandler) UpdateAll(ctx context.Context, req *proto.SysUser, resp *proto.Response) error {
	s := service.SysUserSvc{Ctx: ctx}
	_, err := s.UpdateAllSysUser(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *SysUserHandler) UpdateFields(ctx context.Context, req *proto.SysUserUpdateFieldsRequest, resp *proto.Response) error {
	s := service.SysUserSvc{Ctx: ctx}
	_, err := s.UpdateFieldsSysUser(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *SysUserHandler) Find(ctx context.Context, req *proto.SysUserFilter, resp *proto.SysUserResponse) error {
	s := service.SysUserSvc{Ctx: ctx}
	data, err := s.FindSysUser(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *SysUserHandler) FindById(ctx context.Context, req *proto.SysUserFilter, resp *proto.SysUserResponse) error {
	s := service.SysUserSvc{Ctx: ctx}
	data, err := s.FindByIdSysUser(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *SysUserHandler) Lists(ctx context.Context, req *proto.SysUserListRequest, resp *proto.SysUserResponse) error {
	s := service.SysUserSvc{Ctx: ctx}
	data, total, err := s.GetListSysUser(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *SysUserHandler) SetResponse(resp *proto.SysUserResponse, data *proto.SysUser, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *SysUserHandler) SetPageResponse(resp *proto.SysUserResponse, list []*proto.SysUser, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
