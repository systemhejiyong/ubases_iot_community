// Code generated by sgen.exe,2022-04-18 19:12:09. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/service"
)

type SysOperLogHandler struct{}

// 创建
func (h *SysOperLogHandler) Create(ctx context.Context, req *proto.SysOperLog, resp *proto.Response) error {
	s := service.SysOperLogSvc{Ctx: ctx}
	_, err := s.CreateSysOperLog(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *SysOperLogHandler) Delete(ctx context.Context, req *proto.SysOperLog, resp *proto.Response) error {
	s := service.SysOperLogSvc{Ctx: ctx}
	_, err := s.DeleteSysOperLog(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *SysOperLogHandler) DeleteById(ctx context.Context, req *proto.SysOperLog, resp *proto.Response) error {
	s := service.SysOperLogSvc{Ctx: ctx}
	_, err := s.DeleteByIdSysOperLog(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *SysOperLogHandler) DeleteByIds(ctx context.Context, req *proto.SysOperLogBatchDeleteRequest, resp *proto.Response) error {
	s := service.SysOperLogSvc{Ctx: ctx}
	_, err := s.DeleteByIdsSysOperLog(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *SysOperLogHandler) Update(ctx context.Context, req *proto.SysOperLog, resp *proto.Response) error {
	s := service.SysOperLogSvc{Ctx: ctx}
	_, err := s.UpdateSysOperLog(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *SysOperLogHandler) UpdateAll(ctx context.Context, req *proto.SysOperLog, resp *proto.Response) error {
	s := service.SysOperLogSvc{Ctx: ctx}
	_, err := s.UpdateAllSysOperLog(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *SysOperLogHandler) UpdateFields(ctx context.Context, req *proto.SysOperLogUpdateFieldsRequest, resp *proto.Response) error {
	s := service.SysOperLogSvc{Ctx: ctx}
	_, err := s.UpdateFieldsSysOperLog(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *SysOperLogHandler) Find(ctx context.Context, req *proto.SysOperLogFilter, resp *proto.SysOperLogResponse) error {
	s := service.SysOperLogSvc{Ctx: ctx}
	data, err := s.FindSysOperLog(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *SysOperLogHandler) FindById(ctx context.Context, req *proto.SysOperLogFilter, resp *proto.SysOperLogResponse) error {
	s := service.SysOperLogSvc{Ctx: ctx}
	data, err := s.FindByIdSysOperLog(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *SysOperLogHandler) Lists(ctx context.Context, req *proto.SysOperLogListRequest, resp *proto.SysOperLogResponse) error {
	s := service.SysOperLogSvc{Ctx: ctx}
	data, total, err := s.GetListSysOperLog(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *SysOperLogHandler) SetResponse(resp *proto.SysOperLogResponse, data *proto.SysOperLog, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *SysOperLogHandler) SetPageResponse(resp *proto.SysOperLogResponse, list []*proto.SysOperLog, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
