// Code generated by sgen.exe,2022-04-18 19:12:11. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_system/model"
	"cloud_platform/iot_model/db_system/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/convert"
)

type ToolsGenTableColumnSvc struct {
	Ctx context.Context
}

// 创建ToolsGenTableColumn
func (s *ToolsGenTableColumnSvc) CreateToolsGenTableColumn(req *proto.ToolsGenTableColumn) (*proto.ToolsGenTableColumn, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TToolsGenTableColumn
	do := t.WithContext(context.Background())
	dbObj := convert.ToolsGenTableColumn_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateToolsGenTableColumn error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除ToolsGenTableColumn
func (s *ToolsGenTableColumnSvc) DeleteToolsGenTableColumn(req *proto.ToolsGenTableColumn) (*proto.ToolsGenTableColumn, error) {
	t := orm.Use(iotmodel.GetDB()).TToolsGenTableColumn
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.ColumnId != 0 { //整数
		do = do.Where(t.ColumnId.Eq(req.ColumnId))
	}
	if req.TableId != 0 { //整数
		do = do.Where(t.TableId.Eq(req.TableId))
	}
	if req.ColumnName != "" { //字符串
		do = do.Where(t.ColumnName.Eq(req.ColumnName))
	}
	if req.ColumnComment != "" { //字符串
		do = do.Where(t.ColumnComment.Eq(req.ColumnComment))
	}
	if req.ColumnType != "" { //字符串
		do = do.Where(t.ColumnType.Eq(req.ColumnType))
	}
	if req.GoType != "" { //字符串
		do = do.Where(t.GoType.Eq(req.GoType))
	}
	if req.GoField != "" { //字符串
		do = do.Where(t.GoField.Eq(req.GoField))
	}
	if req.HtmlField != "" { //字符串
		do = do.Where(t.HtmlField.Eq(req.HtmlField))
	}
	if req.IsPk != "" { //字符串
		do = do.Where(t.IsPk.Eq(req.IsPk))
	}
	if req.IsIncrement != "" { //字符串
		do = do.Where(t.IsIncrement.Eq(req.IsIncrement))
	}
	if req.IsRequired != "" { //字符串
		do = do.Where(t.IsRequired.Eq(req.IsRequired))
	}
	if req.IsInsert != "" { //字符串
		do = do.Where(t.IsInsert.Eq(req.IsInsert))
	}
	if req.IsEdit != "" { //字符串
		do = do.Where(t.IsEdit.Eq(req.IsEdit))
	}
	if req.IsList != "" { //字符串
		do = do.Where(t.IsList.Eq(req.IsList))
	}
	if req.IsQuery != "" { //字符串
		do = do.Where(t.IsQuery.Eq(req.IsQuery))
	}
	if req.QueryType != "" { //字符串
		do = do.Where(t.QueryType.Eq(req.QueryType))
	}
	if req.HtmlType != "" { //字符串
		do = do.Where(t.HtmlType.Eq(req.HtmlType))
	}
	if req.DictType != "" { //字符串
		do = do.Where(t.DictType.Eq(req.DictType))
	}
	if req.Sort != 0 { //整数
		do = do.Where(t.Sort.Eq(req.Sort))
	}
	if req.LinkTableName != "" { //字符串
		do = do.Where(t.LinkTableName.Eq(req.LinkTableName))
	}
	if req.LinkTableClass != "" { //字符串
		do = do.Where(t.LinkTableClass.Eq(req.LinkTableClass))
	}
	if req.LinkTablePackage != "" { //字符串
		do = do.Where(t.LinkTablePackage.Eq(req.LinkTablePackage))
	}
	if req.LinkLabelId != "" { //字符串
		do = do.Where(t.LinkLabelId.Eq(req.LinkLabelId))
	}
	if req.LinkLabelName != "" { //字符串
		do = do.Where(t.LinkLabelName.Eq(req.LinkLabelName))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteToolsGenTableColumn error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除ToolsGenTableColumn
func (s *ToolsGenTableColumnSvc) DeleteByIdToolsGenTableColumn(req *proto.ToolsGenTableColumn) (*proto.ToolsGenTableColumn, error) {
	t := orm.Use(iotmodel.GetDB()).TToolsGenTableColumn
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.ColumnId != 0 { //整数
		do = do.Where(t.ColumnId.Eq(req.ColumnId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdToolsGenTableColumn error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除ToolsGenTableColumn
func (s *ToolsGenTableColumnSvc) DeleteByIdsToolsGenTableColumn(req *proto.ToolsGenTableColumnBatchDeleteRequest) (*proto.ToolsGenTableColumnBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TToolsGenTableColumn
		do := t.WithContext(context.Background())

		do = do.Where(t.ColumnId.Eq(k.ColumnId))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsToolsGenTableColumn error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新ToolsGenTableColumn
func (s *ToolsGenTableColumnSvc) UpdateToolsGenTableColumn(req *proto.ToolsGenTableColumn) (*proto.ToolsGenTableColumn, error) {
	t := orm.Use(iotmodel.GetDB()).TToolsGenTableColumn
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.TableId != 0 { //整数
		updateField = append(updateField, t.TableId)
	}
	if req.ColumnName != "" { //字符串
		updateField = append(updateField, t.ColumnName)
	}
	if req.ColumnComment != "" { //字符串
		updateField = append(updateField, t.ColumnComment)
	}
	if req.ColumnType != "" { //字符串
		updateField = append(updateField, t.ColumnType)
	}
	if req.GoType != "" { //字符串
		updateField = append(updateField, t.GoType)
	}
	if req.GoField != "" { //字符串
		updateField = append(updateField, t.GoField)
	}
	if req.HtmlField != "" { //字符串
		updateField = append(updateField, t.HtmlField)
	}
	if req.IsPk != "" { //字符串
		updateField = append(updateField, t.IsPk)
	}
	if req.IsIncrement != "" { //字符串
		updateField = append(updateField, t.IsIncrement)
	}
	if req.IsRequired != "" { //字符串
		updateField = append(updateField, t.IsRequired)
	}
	if req.IsInsert != "" { //字符串
		updateField = append(updateField, t.IsInsert)
	}
	if req.IsEdit != "" { //字符串
		updateField = append(updateField, t.IsEdit)
	}
	if req.IsList != "" { //字符串
		updateField = append(updateField, t.IsList)
	}
	if req.IsQuery != "" { //字符串
		updateField = append(updateField, t.IsQuery)
	}
	if req.QueryType != "" { //字符串
		updateField = append(updateField, t.QueryType)
	}
	if req.HtmlType != "" { //字符串
		updateField = append(updateField, t.HtmlType)
	}
	if req.DictType != "" { //字符串
		updateField = append(updateField, t.DictType)
	}
	if req.Sort != 0 { //整数
		updateField = append(updateField, t.Sort)
	}
	if req.LinkTableName != "" { //字符串
		updateField = append(updateField, t.LinkTableName)
	}
	if req.LinkTableClass != "" { //字符串
		updateField = append(updateField, t.LinkTableClass)
	}
	if req.LinkTablePackage != "" { //字符串
		updateField = append(updateField, t.LinkTablePackage)
	}
	if req.LinkLabelId != "" { //字符串
		updateField = append(updateField, t.LinkLabelId)
	}
	if req.LinkLabelName != "" { //字符串
		updateField = append(updateField, t.LinkLabelName)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.ColumnId != 0 { //整数
		do = do.Where(t.ColumnId.Eq(req.ColumnId))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateToolsGenTableColumn error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.ToolsGenTableColumn_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateToolsGenTableColumn error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段ToolsGenTableColumn
func (s *ToolsGenTableColumnSvc) UpdateAllToolsGenTableColumn(req *proto.ToolsGenTableColumn) (*proto.ToolsGenTableColumn, error) {
	t := orm.Use(iotmodel.GetDB()).TToolsGenTableColumn
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.TableId)
	updateField = append(updateField, t.ColumnName)
	updateField = append(updateField, t.ColumnComment)
	updateField = append(updateField, t.ColumnType)
	updateField = append(updateField, t.GoType)
	updateField = append(updateField, t.GoField)
	updateField = append(updateField, t.HtmlField)
	updateField = append(updateField, t.IsPk)
	updateField = append(updateField, t.IsIncrement)
	updateField = append(updateField, t.IsRequired)
	updateField = append(updateField, t.IsInsert)
	updateField = append(updateField, t.IsEdit)
	updateField = append(updateField, t.IsList)
	updateField = append(updateField, t.IsQuery)
	updateField = append(updateField, t.QueryType)
	updateField = append(updateField, t.HtmlType)
	updateField = append(updateField, t.DictType)
	updateField = append(updateField, t.Sort)
	updateField = append(updateField, t.LinkTableName)
	updateField = append(updateField, t.LinkTableClass)
	updateField = append(updateField, t.LinkTablePackage)
	updateField = append(updateField, t.LinkLabelId)
	updateField = append(updateField, t.LinkLabelName)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.ColumnId != 0 { //整数
		do = do.Where(t.ColumnId.Eq(req.ColumnId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllToolsGenTableColumn error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.ToolsGenTableColumn_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllToolsGenTableColumn error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *ToolsGenTableColumnSvc) UpdateFieldsToolsGenTableColumn(req *proto.ToolsGenTableColumnUpdateFieldsRequest) (*proto.ToolsGenTableColumn, error) {
	t := orm.Use(iotmodel.GetDB()).TToolsGenTableColumn
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFields error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.ColumnId != 0 { //整数
		do = do.Where(t.ColumnId.Eq(req.Data.ColumnId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsToolsGenTableColumn error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.ToolsGenTableColumn_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsToolsGenTableColumn error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找ToolsGenTableColumn
func (s *ToolsGenTableColumnSvc) FindToolsGenTableColumn(req *proto.ToolsGenTableColumnFilter) (*proto.ToolsGenTableColumn, error) {
	t := orm.Use(iotmodel.GetDB()).TToolsGenTableColumn
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.ColumnId != 0 { //整数
		do = do.Where(t.ColumnId.Eq(req.ColumnId))
	}
	if req.TableId != 0 { //整数
		do = do.Where(t.TableId.Eq(req.TableId))
	}
	if req.ColumnName != "" { //字符串
		do = do.Where(t.ColumnName.Like("%" + req.ColumnName + "%"))
	}
	if req.ColumnComment != "" { //字符串
		do = do.Where(t.ColumnComment.Like("%" + req.ColumnComment + "%"))
	}
	if req.ColumnType != "" { //字符串
		do = do.Where(t.ColumnType.Like("%" + req.ColumnType + "%"))
	}
	if req.GoType != "" { //字符串
		do = do.Where(t.GoType.Like("%" + req.GoType + "%"))
	}
	if req.GoField != "" { //字符串
		do = do.Where(t.GoField.Like("%" + req.GoField + "%"))
	}
	if req.HtmlField != "" { //字符串
		do = do.Where(t.HtmlField.Like("%" + req.HtmlField + "%"))
	}
	if req.IsPk != "" { //字符串
		do = do.Where(t.IsPk.Like("%" + req.IsPk + "%"))
	}
	if req.IsIncrement != "" { //字符串
		do = do.Where(t.IsIncrement.Like("%" + req.IsIncrement + "%"))
	}
	if req.IsRequired != "" { //字符串
		do = do.Where(t.IsRequired.Like("%" + req.IsRequired + "%"))
	}
	if req.IsInsert != "" { //字符串
		do = do.Where(t.IsInsert.Like("%" + req.IsInsert + "%"))
	}
	if req.IsEdit != "" { //字符串
		do = do.Where(t.IsEdit.Like("%" + req.IsEdit + "%"))
	}
	if req.IsList != "" { //字符串
		do = do.Where(t.IsList.Like("%" + req.IsList + "%"))
	}
	if req.IsQuery != "" { //字符串
		do = do.Where(t.IsQuery.Like("%" + req.IsQuery + "%"))
	}
	if req.QueryType != "" { //字符串
		do = do.Where(t.QueryType.Like("%" + req.QueryType + "%"))
	}
	if req.HtmlType != "" { //字符串
		do = do.Where(t.HtmlType.Like("%" + req.HtmlType + "%"))
	}
	if req.DictType != "" { //字符串
		do = do.Where(t.DictType.Like("%" + req.DictType + "%"))
	}
	if req.Sort != 0 { //整数
		do = do.Where(t.Sort.Eq(req.Sort))
	}
	if req.LinkTableName != "" { //字符串
		do = do.Where(t.LinkTableName.Like("%" + req.LinkTableName + "%"))
	}
	if req.LinkTableClass != "" { //字符串
		do = do.Where(t.LinkTableClass.Like("%" + req.LinkTableClass + "%"))
	}
	if req.LinkTablePackage != "" { //字符串
		do = do.Where(t.LinkTablePackage.Like("%" + req.LinkTablePackage + "%"))
	}
	if req.LinkLabelId != "" { //字符串
		do = do.Where(t.LinkLabelId.Like("%" + req.LinkLabelId + "%"))
	}
	if req.LinkLabelName != "" { //字符串
		do = do.Where(t.LinkLabelName.Like("%" + req.LinkLabelName + "%"))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindToolsGenTableColumn error : %s", err.Error())
		return nil, err
	}
	res := convert.ToolsGenTableColumn_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找ToolsGenTableColumn
func (s *ToolsGenTableColumnSvc) FindByIdToolsGenTableColumn(req *proto.ToolsGenTableColumnFilter) (*proto.ToolsGenTableColumn, error) {
	t := orm.Use(iotmodel.GetDB()).TToolsGenTableColumn
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.ColumnId != 0 { //整数
		do = do.Where(t.ColumnId.Eq(req.ColumnId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdToolsGenTableColumn error : %s", err.Error())
		return nil, err
	}
	res := convert.ToolsGenTableColumn_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找ToolsGenTableColumn,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *ToolsGenTableColumnSvc) GetListToolsGenTableColumn(req *proto.ToolsGenTableColumnListRequest) ([]*proto.ToolsGenTableColumn, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TToolsGenTableColumn
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.ColumnId != 0 { //整数
			do = do.Where(t.ColumnId.Eq(query.ColumnId))
		}
		if query.TableId != 0 { //整数
			do = do.Where(t.TableId.Eq(query.TableId))
		}
		if query.ColumnName != "" { //字符串
			do = do.Where(t.ColumnName.Like("%" + query.ColumnName + "%"))
		}
		if query.ColumnComment != "" { //字符串
			do = do.Where(t.ColumnComment.Like("%" + query.ColumnComment + "%"))
		}
		if query.ColumnType != "" { //字符串
			do = do.Where(t.ColumnType.Like("%" + query.ColumnType + "%"))
		}
		if query.GoType != "" { //字符串
			do = do.Where(t.GoType.Like("%" + query.GoType + "%"))
		}
		if query.GoField != "" { //字符串
			do = do.Where(t.GoField.Like("%" + query.GoField + "%"))
		}
		if query.HtmlField != "" { //字符串
			do = do.Where(t.HtmlField.Like("%" + query.HtmlField + "%"))
		}
		if query.IsPk != "" { //字符串
			do = do.Where(t.IsPk.Like("%" + query.IsPk + "%"))
		}
		if query.IsIncrement != "" { //字符串
			do = do.Where(t.IsIncrement.Like("%" + query.IsIncrement + "%"))
		}
		if query.IsRequired != "" { //字符串
			do = do.Where(t.IsRequired.Like("%" + query.IsRequired + "%"))
		}
		if query.IsInsert != "" { //字符串
			do = do.Where(t.IsInsert.Like("%" + query.IsInsert + "%"))
		}
		if query.IsEdit != "" { //字符串
			do = do.Where(t.IsEdit.Like("%" + query.IsEdit + "%"))
		}
		if query.IsList != "" { //字符串
			do = do.Where(t.IsList.Like("%" + query.IsList + "%"))
		}
		if query.IsQuery != "" { //字符串
			do = do.Where(t.IsQuery.Like("%" + query.IsQuery + "%"))
		}
		if query.QueryType != "" { //字符串
			do = do.Where(t.QueryType.Like("%" + query.QueryType + "%"))
		}
		if query.HtmlType != "" { //字符串
			do = do.Where(t.HtmlType.Like("%" + query.HtmlType + "%"))
		}
		if query.DictType != "" { //字符串
			do = do.Where(t.DictType.Like("%" + query.DictType + "%"))
		}
		if query.Sort != 0 { //整数
			do = do.Where(t.Sort.Eq(query.Sort))
		}
		if query.LinkTableName != "" { //字符串
			do = do.Where(t.LinkTableName.Like("%" + query.LinkTableName + "%"))
		}
		if query.LinkTableClass != "" { //字符串
			do = do.Where(t.LinkTableClass.Like("%" + query.LinkTableClass + "%"))
		}
		if query.LinkTablePackage != "" { //字符串
			do = do.Where(t.LinkTablePackage.Like("%" + query.LinkTablePackage + "%"))
		}
		if query.LinkLabelId != "" { //字符串
			do = do.Where(t.LinkLabelId.Like("%" + query.LinkLabelId + "%"))
		}
		if query.LinkLabelName != "" { //字符串
			do = do.Where(t.LinkLabelName.Like("%" + query.LinkLabelName + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.ColumnId
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TToolsGenTableColumn
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListToolsGenTableColumn error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.ToolsGenTableColumn, len(list))
	for i, v := range list {
		result[i] = convert.ToolsGenTableColumn_db2pb(v)
	}
	return result, total, nil
}
