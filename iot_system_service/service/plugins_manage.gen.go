// Code generated by sgen.exe,2022-04-18 19:12:07. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_system/model"
	"cloud_platform/iot_model/db_system/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/convert"
)

type PluginsManageSvc struct {
	Ctx context.Context
}

// 创建PluginsManage
func (s *PluginsManageSvc) CreatePluginsManage(req *proto.PluginsManage) (*proto.PluginsManage, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TPluginsManage
	do := t.WithContext(context.Background())
	dbObj := convert.PluginsManage_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreatePluginsManage error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除PluginsManage
func (s *PluginsManageSvc) DeletePluginsManage(req *proto.PluginsManage) (*proto.PluginsManage, error) {
	t := orm.Use(iotmodel.GetDB()).TPluginsManage
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.StoreId != 0 { //整数
		do = do.Where(t.StoreId.Eq(req.StoreId))
	}
	if req.PName != "" { //字符串
		do = do.Where(t.PName.Eq(req.PName))
	}
	if req.PTitle != "" { //字符串
		do = do.Where(t.PTitle.Eq(req.PTitle))
	}
	if req.PDescription != "" { //字符串
		do = do.Where(t.PDescription.Eq(req.PDescription))
	}
	if req.PAuth != "" { //字符串
		do = do.Where(t.PAuth.Eq(req.PAuth))
	}
	if req.IsInstall != 0 { //整数
		do = do.Where(t.IsInstall.Eq(req.IsInstall))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Eq(req.Version))
	}
	if req.Price != 0 { //整数
		do = do.Where(t.Price.Eq(req.Price))
	}
	if req.DownloadTimes != 0 { //整数
		do = do.Where(t.DownloadTimes.Eq(req.DownloadTimes))
	}
	if req.InstallPath != "" { //字符串
		do = do.Where(t.InstallPath.Eq(req.InstallPath))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeletePluginsManage error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除PluginsManage
func (s *PluginsManageSvc) DeleteByIdPluginsManage(req *proto.PluginsManage) (*proto.PluginsManage, error) {
	t := orm.Use(iotmodel.GetDB()).TPluginsManage
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdPluginsManage error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除PluginsManage
func (s *PluginsManageSvc) DeleteByIdsPluginsManage(req *proto.PluginsManageBatchDeleteRequest) (*proto.PluginsManageBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TPluginsManage
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsPluginsManage error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新PluginsManage
func (s *PluginsManageSvc) UpdatePluginsManage(req *proto.PluginsManage) (*proto.PluginsManage, error) {
	t := orm.Use(iotmodel.GetDB()).TPluginsManage
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.StoreId != 0 { //整数
		updateField = append(updateField, t.StoreId)
	}
	if req.PName != "" { //字符串
		updateField = append(updateField, t.PName)
	}
	if req.PTitle != "" { //字符串
		updateField = append(updateField, t.PTitle)
	}
	if req.PDescription != "" { //字符串
		updateField = append(updateField, t.PDescription)
	}
	if req.PAuth != "" { //字符串
		updateField = append(updateField, t.PAuth)
	}
	if req.IsInstall != 0 { //整数
		updateField = append(updateField, t.IsInstall)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.Version != "" { //字符串
		updateField = append(updateField, t.Version)
	}
	if req.Price != 0 { //整数
		updateField = append(updateField, t.Price)
	}
	if req.DownloadTimes != 0 { //整数
		updateField = append(updateField, t.DownloadTimes)
	}
	if req.InstallPath != "" { //字符串
		updateField = append(updateField, t.InstallPath)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdatePluginsManage error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.PluginsManage_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdatePluginsManage error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段PluginsManage
func (s *PluginsManageSvc) UpdateAllPluginsManage(req *proto.PluginsManage) (*proto.PluginsManage, error) {
	t := orm.Use(iotmodel.GetDB()).TPluginsManage
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.StoreId)
	updateField = append(updateField, t.PName)
	updateField = append(updateField, t.PTitle)
	updateField = append(updateField, t.PDescription)
	updateField = append(updateField, t.PAuth)
	updateField = append(updateField, t.IsInstall)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.Version)
	updateField = append(updateField, t.Price)
	updateField = append(updateField, t.DownloadTimes)
	updateField = append(updateField, t.InstallPath)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllPluginsManage error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.PluginsManage_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllPluginsManage error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *PluginsManageSvc) UpdateFieldsPluginsManage(req *proto.PluginsManageUpdateFieldsRequest) (*proto.PluginsManage, error) {
	t := orm.Use(iotmodel.GetDB()).TPluginsManage
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFields error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsPluginsManage error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.PluginsManage_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsPluginsManage error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找PluginsManage
func (s *PluginsManageSvc) FindPluginsManage(req *proto.PluginsManageFilter) (*proto.PluginsManage, error) {
	t := orm.Use(iotmodel.GetDB()).TPluginsManage
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.StoreId != 0 { //整数
		do = do.Where(t.StoreId.Eq(req.StoreId))
	}
	if req.PName != "" { //字符串
		do = do.Where(t.PName.Like("%" + req.PName + "%"))
	}
	if req.PTitle != "" { //字符串
		do = do.Where(t.PTitle.Like("%" + req.PTitle + "%"))
	}
	if req.PDescription != "" { //字符串
		do = do.Where(t.PDescription.Like("%" + req.PDescription + "%"))
	}
	if req.PAuth != "" { //字符串
		do = do.Where(t.PAuth.Like("%" + req.PAuth + "%"))
	}
	if req.IsInstall != 0 { //整数
		do = do.Where(t.IsInstall.Eq(req.IsInstall))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.Version != "" { //字符串
		do = do.Where(t.Version.Like("%" + req.Version + "%"))
	}
	if req.Price != 0 { //整数
		do = do.Where(t.Price.Eq(req.Price))
	}
	if req.DownloadTimes != 0 { //整数
		do = do.Where(t.DownloadTimes.Eq(req.DownloadTimes))
	}
	if req.InstallPath != "" { //字符串
		do = do.Where(t.InstallPath.Like("%" + req.InstallPath + "%"))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindPluginsManage error : %s", err.Error())
		return nil, err
	}
	res := convert.PluginsManage_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找PluginsManage
func (s *PluginsManageSvc) FindByIdPluginsManage(req *proto.PluginsManageFilter) (*proto.PluginsManage, error) {
	t := orm.Use(iotmodel.GetDB()).TPluginsManage
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdPluginsManage error : %s", err.Error())
		return nil, err
	}
	res := convert.PluginsManage_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找PluginsManage,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *PluginsManageSvc) GetListPluginsManage(req *proto.PluginsManageListRequest) ([]*proto.PluginsManage, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TPluginsManage
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.StoreId != 0 { //整数
			do = do.Where(t.StoreId.Eq(query.StoreId))
		}
		if query.PName != "" { //字符串
			do = do.Where(t.PName.Like("%" + query.PName + "%"))
		}
		if query.PTitle != "" { //字符串
			do = do.Where(t.PTitle.Like("%" + query.PTitle + "%"))
		}
		if query.PDescription != "" { //字符串
			do = do.Where(t.PDescription.Like("%" + query.PDescription + "%"))
		}
		if query.PAuth != "" { //字符串
			do = do.Where(t.PAuth.Like("%" + query.PAuth + "%"))
		}
		if query.IsInstall != 0 { //整数
			do = do.Where(t.IsInstall.Eq(query.IsInstall))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.Version != "" { //字符串
			do = do.Where(t.Version.Like("%" + query.Version + "%"))
		}
		if query.Price != 0 { //整数
			do = do.Where(t.Price.Eq(query.Price))
		}
		if query.DownloadTimes != 0 { //整数
			do = do.Where(t.DownloadTimes.Eq(query.DownloadTimes))
		}
		if query.InstallPath != "" { //字符串
			do = do.Where(t.InstallPath.Like("%" + query.InstallPath + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TPluginsManage
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListPluginsManage error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.PluginsManage, len(list))
	for i, v := range list {
		result[i] = convert.PluginsManage_db2pb(v)
	}
	return result, total, nil
}
