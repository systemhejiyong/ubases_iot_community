// Code generated by sgen.exe,2022-04-18 19:12:09. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_common/iotutil"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_system/model"
	"cloud_platform/iot_model/db_system/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/convert"
)

type SysPostSvc struct {
	Ctx context.Context
}

// 创建SysPost
func (s *SysPostSvc) CreateSysPost(req *proto.SysPost) (*proto.SysPost, error) {
	// fixme 请在这里校验参数
	errVer := s.VerifyRequestParam(req)
	if errVer != nil {
		return nil, errVer
	}

	//fixme 重复验证
	isExists, err := s.ExistsSysPostByName(req.PostName, req.PostCode, 0)
	if err != nil {
		return nil, err
	}
	if isExists {
		return nil, errors.New("岗位名或岗位编码已存在")
	}

	t := orm.Use(iotmodel.GetDB()).TSysPost
	do := t.WithContext(context.Background())
	dbObj := convert.SysPost_pb2db(req)
	dbObj.CreatedAt = time.Now()
	dbObj.UpdatedAt = time.Now()
	err = do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateSysPost error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 新增和修改的时候判断岗位名称是否重复. 新增时候 dept传入0 即可
func (s *SysPostSvc) ExistsSysPostByName(postName string, postCode string, postId int64) (bool, error) {
	t := orm.Use(iotmodel.GetDB()).TSysPost
	do := t.WithContext(context.Background())

	// fixme 请检查条件和校验参数
	if postName != "" || postCode != "" {
		//do =do.Where(t.WithContext(context.Background()).Where(t.PostName.Eq(postName)).Or(t.PostCode.Eq(postCode)))
		do = do.Where(do.Where(t.PostName.Eq(postName)).Or(t.PostCode.Eq(postCode)))
	}

	//编辑的时候验证名称是否重复.
	if postId != 0 {
		//do = do.Where(t.WithContext(context.Background()).Where(t.PostId.Neq(postId)))
		do = do.Where(t.PostId.Neq(postId))
	}

	count, err := do.Count()
	if err != nil {
		logger.Errorf("exists postname,postcode error : %s", err.Error())
		return true, err
	}

	return count > 0, err
}

// 验证请求参数是否为空
func (s *SysPostSvc) VerifyRequestParam(req *proto.SysPost) error {

	if req.PostName == "" { //字符串
		return errors.New("deptname is null")
	}
	if req.PostCode == "" { //字符串
		return errors.New("postcode is null")
	}

	return nil

}

// 根据条件删除SysPost[需要加入业务逻辑(岗位是否已经有关联用户数据)]
func (s *SysPostSvc) DeleteSysPost(req *proto.SysPost) (*proto.SysPost, error) {
	t := orm.Use(iotmodel.GetDB()).TSysPost
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	var userPost = SysUserPostSvc{}

	user, errUserPost := userPost.FindSysUserPost(&proto.SysUserPostFilter{
		PostId: req.PostId,
	})

	if errUserPost != nil && errUserPost.Error() != "record not found" {
		logger.Errorf("DeleteSysPost error : %s", errUserPost.Error())
		return nil, errUserPost
	}
	if user != nil && user.UserId > 0 {
		logger.Errorf("DeleteSysPost error : %s", "post related user data")
		return nil, errors.New("该岗位有关联的账户不能删除")
	}

	if req.PostId != 0 { //整数
		do = do.Where(t.PostId.Eq(req.PostId))
	}
	if req.PostCode != "" { //字符串
		do = do.Where(t.PostCode.Eq(req.PostCode))
	}
	if req.PostName != "" { //字符串
		do = do.Where(t.PostName.Eq(req.PostName))
	}
	if req.PostSort != 0 { //整数
		do = do.Where(t.PostSort.Eq(req.PostSort))
	}
	if req.Status != "" { //字符串
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteSysPost error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除SysPost[需要加入业务逻辑(岗位是否已经有关联用户数据)]
func (s *SysPostSvc) DeleteByIdSysPost(req *proto.SysPost) (*proto.SysPost, error) {
	t := orm.Use(iotmodel.GetDB()).TSysPost
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.PostId != 0 { //整数
		do = do.Where(t.PostId.Eq(req.PostId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdSysPost error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除SysPost
func (s *SysPostSvc) DeleteByIdsSysPost(req *proto.SysPostBatchDeleteRequest) (*proto.SysPostBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TSysPost
		do := t.WithContext(context.Background())

		do = do.Where(t.PostId.Eq(k.PostId))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsSysPost error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新SysPost
func (s *SysPostSvc) UpdateSysPost(req *proto.SysPost) (*proto.SysPost, error) {

	// fixme 请在这里校验参数
	errVer := s.VerifyRequestParam(req)
	if errVer != nil {
		return nil, errVer
	}

	//fixme 重复验证
	isExists, err := s.ExistsSysPostByName(req.PostName, req.PostCode, req.PostId)
	if err != nil {
		return nil, err
	}
	if isExists {
		return nil, errors.New("postname or postcode exists")
	}

	t := orm.Use(iotmodel.GetDB()).TSysPost
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.PostCode != "" { //字符串
		updateField = append(updateField, t.PostCode)
	}
	if req.PostName != "" { //字符串
		updateField = append(updateField, t.PostName)
	}
	if req.PostSort != 0 { //整数
		updateField = append(updateField, t.PostSort)
	}
	if req.Status != "" { //字符串
		updateField = append(updateField, t.Status)
	}
	if req.Remark != "" { //字符串
		updateField = append(updateField, t.Remark)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.PostId != 0 { //整数
		do = do.Where(t.PostId.Eq(req.PostId))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateSysPost error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.SysPost_pb2db(req)
	_, err = do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateSysPost error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段SysPost
func (s *SysPostSvc) UpdateAllSysPost(req *proto.SysPost) (*proto.SysPost, error) {
	t := orm.Use(iotmodel.GetDB()).TSysPost
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.PostCode)
	updateField = append(updateField, t.PostName)
	updateField = append(updateField, t.PostSort)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.Remark)
	//updateField = append(updateField, t.CreatedBy)
	//updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.PostId != 0 { //整数
		do = do.Where(t.PostId.Eq(req.PostId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllSysPost error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysPost_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllSysPost error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *SysPostSvc) UpdateFieldsSysPost(req *proto.SysPostUpdateFieldsRequest) (*proto.SysPost, error) {
	t := orm.Use(iotmodel.GetDB()).TSysPost
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFields error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.PostId != 0 { //整数
		do = do.Where(t.PostId.Eq(req.Data.PostId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsSysPost error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysPost_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsSysPost error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找SysPost
func (s *SysPostSvc) FindSysPost(req *proto.SysPostFilter) (*proto.SysPost, error) {
	t := orm.Use(iotmodel.GetDB()).TSysPost
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.PostId != 0 { //整数
		do = do.Where(t.PostId.Eq(req.PostId))
	}
	if req.PostCode != "" { //字符串
		do = do.Where(t.PostCode.Like("%" + req.PostCode + "%"))
	}
	if req.PostName != "" { //字符串
		do = do.Where(t.PostName.Like("%" + req.PostName + "%"))
	}
	if req.PostSort != 0 { //整数
		do = do.Where(t.PostSort.Eq(req.PostSort))
	}
	if req.Status != "" { //字符串
		do = do.Where(t.Status.Like("%" + req.Status + "%"))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Like("%" + req.Remark + "%"))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindSysPost error : %s", err.Error())
		return nil, err
	}
	res := convert.SysPost_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找SysPost
func (s *SysPostSvc) FindByIdSysPost(req *proto.SysPostFilter) (*proto.SysPost, error) {
	t := orm.Use(iotmodel.GetDB()).TSysPost
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.PostId != 0 { //整数
		do = do.Where(t.PostId.Eq(req.PostId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdSysPost error : %s", err.Error())
		return nil, err
	}
	res := convert.SysPost_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找SysPost,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *SysPostSvc) GetListSysPost(req *proto.SysPostListRequest) ([]*proto.SysPost, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TSysPost
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.PostId != 0 { //整数
			do = do.Where(t.PostId.Eq(query.PostId))
		}
		if query.PostCode != "" { //字符串
			do = do.Where(t.PostCode.Like("%" + query.PostCode + "%"))
		}
		if query.PostName != "" { //字符串
			do = do.Where(t.PostName.Like("%" + query.PostName + "%"))
		}
		if query.PostSort != 0 { //整数
			do = do.Where(t.PostSort.Eq(query.PostSort))
		}
		if query.Status != "" { //字符串
			do = do.Where(t.Status.Like("%" + query.Status + "%"))
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}

	//组合模糊查询
	if req.SearchKey != "" {
		do = do.Where(t.PostName.Like("%" + req.SearchKey + "%")).Or(t.PostCode.Like("%" + req.SearchKey + "%"))
	}

	if req.BeginTime != "" {
		st := iotutil.GetTimeByUnit(iotutil.ToInt64(req.BeginTime))
		do = do.Where(t.CreatedAt.Gte(st))
	}
	if req.EndTime != "" {
		et := iotutil.GetTimeByUnit(iotutil.ToInt64(req.EndTime))
		do = do.Where(t.CreatedAt.Lte(et))
	}

	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.PostSort
	}
	if req.OrderDesc == "1" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol, t.PostName)
	}

	var list []*model.TSysPost
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListSysPost error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.SysPost, len(list))
	for i, v := range list {
		result[i] = convert.SysPost_db2pb(v)
	}
	return result, total, nil
}
