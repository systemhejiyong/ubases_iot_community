// Code generated by sgen.exe,2022-04-18 19:12:10. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"google.golang.org/protobuf/types/known/timestamppb"
	"gorm.io/gen/field"

	"cloud_platform/iot_common/iotutil"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_system/model"
	"cloud_platform/iot_model/db_system/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/convert"
)

type SysUserSvc struct {
	Ctx context.Context
}

// 创建SysUser
func (s *SysUserSvc) CreateSysUser(req *proto.SysUser) (*proto.SysUser, error) {
	// fixme 请在这里校验参数

	sel, errSel := s.FindSysUser(&proto.SysUserFilter{
		UserName: req.UserName,
	})
	if errSel != nil && errSel.Error() != "record not found" {
		logger.Errorf("CreateSysUser error : %s", errSel.Error())
		return nil, errSel
	}
	if sel != nil && sel.Id > 0 {

		return nil, errors.New("账号已经存在.")

	}

	t := orm.Use(iotmodel.GetDB()).TSysUser
	do := t.WithContext(context.Background())
	dbObj := convert.SysUser_pb2db(req)

	dbObj.CreatedAt = timestamppb.Now().AsTime()
	dbObj.LastLoginTime = timestamppb.Now().AsTime()
	dbObj.UpdatedAt = timestamppb.Now().AsTime()
	if dbObj.Mobile == "" {
		dbObj.Mobile = req.PhoneNum
	}

	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateSysUser error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除SysUser
func (s *SysUserSvc) DeleteSysUser(req *proto.SysUser) (*proto.SysUser, error) {
	t := orm.Use(iotmodel.GetDB()).TSysUser
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.UserName != "" { //字符串
		do = do.Where(t.UserName.Eq(req.UserName))
	}
	if req.Mobile != "" { //字符串
		do = do.Where(t.Mobile.Eq(req.Mobile))
	}
	if req.UserNickname != "" { //字符串
		do = do.Where(t.UserNickname.Eq(req.UserNickname))
	}
	if req.Birthday != 0 { //整数
		do = do.Where(t.Birthday.Eq(req.Birthday))
	}
	if req.UserPassword != "" { //字符串
		do = do.Where(t.UserPassword.Eq(req.UserPassword))
	}
	if req.UserSalt != "" { //字符串
		do = do.Where(t.UserSalt.Eq(req.UserSalt))
	}
	if req.UserStatus != 0 { //整数
		do = do.Where(t.UserStatus.Eq(req.UserStatus))
	}
	if req.UserEmail != "" { //字符串
		do = do.Where(t.UserEmail.Eq(req.UserEmail))
	}
	if req.Sex != 0 { //整数
		do = do.Where(t.Sex.Eq(req.Sex))
	}
	if req.Avatar != "" { //字符串
		do = do.Where(t.Avatar.Eq(req.Avatar))
	}
	if req.DeptId != 0 { //整数
		do = do.Where(t.DeptId.Eq(req.DeptId))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.IsAdmin != 0 { //整数
		do = do.Where(t.IsAdmin.Eq(req.IsAdmin))
	}
	if req.Address != "" { //字符串
		do = do.Where(t.Address.Eq(req.Address))
	}
	if req.Describe != "" { //字符串
		do = do.Where(t.Describe.Eq(req.Describe))
	}
	if req.PhoneNum != "" { //字符串
		do = do.Where(t.PhoneNum.Eq(req.PhoneNum))
	}
	if req.LastLoginIp != "" { //字符串
		do = do.Where(t.LastLoginIp.Eq(req.LastLoginIp))
	}
	if req.AccountType != 0 { //整数
		do = do.Where(t.AccountType.Eq(req.AccountType))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteSysUser error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除SysUser
func (s *SysUserSvc) DeleteByIdSysUser(req *proto.SysUser) (*proto.SysUser, error) {
	t := orm.Use(iotmodel.GetDB()).TSysUser
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数

		user, errUser := s.FindByIdSysUser(&proto.SysUserFilter{Id: req.Id})
		if errUser != nil {
			return nil, errors.New("没有该用户")
		}
		if user.UserName == "admin" {
			return nil, errors.New("该用户不可删除")
		}

		do = do.Where(t.Id.Eq(req.Id))

	} else {
		return nil, errors.New("参数错误.")
	}

	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdSysUser error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除SysUser
func (s *SysUserSvc) DeleteByIdsSysUser(req *proto.SysUserBatchDeleteRequest) (*proto.SysUserBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TSysUser
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsSysUser error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新SysUser
func (s *SysUserSvc) UpdateSysUser(req *proto.SysUser) (*proto.SysUser, error) {
	t := orm.Use(iotmodel.GetDB()).TSysUser
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	sel, errSel := s.FindSysUser(&proto.SysUserFilter{
		UserName: req.UserName,
	})
	if errSel != nil && errSel.Error() != "record not found" {
		logger.Errorf("UpdateSysUser error : %s", errSel.Error())
		return nil, errSel
	}
	if sel != nil && sel.Id > 0 {
		if sel.Id != req.Id {
			return nil, errors.New("账号已经存在")
		}
	}

	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.UserName != "" { //字符串
		updateField = append(updateField, t.UserName)
	}
	if req.Mobile != "" { //字符串
		updateField = append(updateField, t.Mobile)
	}
	if req.UserNickname != "" { //字符串
		updateField = append(updateField, t.UserNickname)
	}
	if req.Birthday != 0 { //整数
		updateField = append(updateField, t.Birthday)
	}
	if req.UserPassword != "" { //字符串
		updateField = append(updateField, t.UserPassword)
	}
	if req.UserSalt != "" { //字符串
		updateField = append(updateField, t.UserSalt)
	}
	if req.UserStatus != 0 { //整数
		updateField = append(updateField, t.UserStatus)
	}
	if req.UserEmail != "" { //字符串
		updateField = append(updateField, t.UserEmail)
	}
	if req.Sex != 0 { //整数
		updateField = append(updateField, t.Sex)
	}
	if req.Avatar != "" { //字符串
		updateField = append(updateField, t.Avatar)
	}
	if req.DeptId != 0 { //整数
		updateField = append(updateField, t.DeptId)
	}
	if req.Remark != "" { //字符串
		updateField = append(updateField, t.Remark)
	}
	if req.IsAdmin != 0 { //整数
		updateField = append(updateField, t.IsAdmin)
	}
	if req.Address != "" { //字符串
		updateField = append(updateField, t.Address)
	}
	if req.Describe != "" { //字符串
		updateField = append(updateField, t.Describe)
	}
	if req.PhoneNum != "" { //字符串
		updateField = append(updateField, t.PhoneNum)
	}
	if req.LastLoginIp != "" { //字符串
		updateField = append(updateField, t.LastLoginIp)
	}
	if req.AccountType != 0 { //整数
		updateField = append(updateField, t.AccountType)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateSysUser error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.SysUser_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateSysUser error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段SysUser
func (s *SysUserSvc) UpdateAllSysUser(req *proto.SysUser) (*proto.SysUser, error) {
	t := orm.Use(iotmodel.GetDB()).TSysUser
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.UserName)
	updateField = append(updateField, t.Mobile)
	updateField = append(updateField, t.UserNickname)
	updateField = append(updateField, t.Birthday)
	updateField = append(updateField, t.UserPassword)
	updateField = append(updateField, t.UserSalt)
	updateField = append(updateField, t.UserStatus)
	updateField = append(updateField, t.UserEmail)
	updateField = append(updateField, t.Sex)
	updateField = append(updateField, t.Avatar)
	updateField = append(updateField, t.DeptId)
	updateField = append(updateField, t.Remark)
	updateField = append(updateField, t.IsAdmin)
	updateField = append(updateField, t.Address)
	updateField = append(updateField, t.Describe)
	updateField = append(updateField, t.PhoneNum)
	updateField = append(updateField, t.LastLoginIp)
	updateField = append(updateField, t.LastLoginTime)
	updateField = append(updateField, t.AccountType)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllSysUser error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysUser_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllSysUser error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *SysUserSvc) UpdateFieldsSysUser(req *proto.SysUserUpdateFieldsRequest) (*proto.SysUser, error) {
	t := orm.Use(iotmodel.GetDB()).TSysUser
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFields error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsSysUser error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysUser_pb2db(req.Data)
	_, err := do.Select(updateField...).Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsSysUser error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找SysUser
func (s *SysUserSvc) FindSysUser(req *proto.SysUserFilter) (*proto.SysUser, error) {
	t := orm.Use(iotmodel.GetDB()).TSysUser
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.UserName != "" { //字符串
		do = do.Where(t.UserName.Eq(req.UserName))
	}
	if req.Mobile != "" { //字符串
		do = do.Where(t.Mobile.Like("%" + req.Mobile + "%"))
	}
	if req.UserNickname != "" { //字符串
		do = do.Where(t.UserNickname.Like("%" + req.UserNickname + "%"))
	}
	if req.Birthday != 0 { //整数
		do = do.Where(t.Birthday.Eq(req.Birthday))
	}
	if req.UserPassword != "" { //字符串
		do = do.Where(t.UserPassword.Like("%" + req.UserPassword + "%"))
	}
	if req.UserSalt != "" { //字符串
		do = do.Where(t.UserSalt.Like("%" + req.UserSalt + "%"))
	}
	if req.UserStatus != 0 { //整数
		do = do.Where(t.UserStatus.Eq(req.UserStatus))
	}
	if req.UserEmail != "" { //字符串
		do = do.Where(t.UserEmail.Like("%" + req.UserEmail + "%"))
	}
	if req.Sex != 0 { //整数
		do = do.Where(t.Sex.Eq(req.Sex))
	}
	if req.Avatar != "" { //字符串
		do = do.Where(t.Avatar.Like("%" + req.Avatar + "%"))
	}
	if req.DeptId != 0 { //整数
		do = do.Where(t.DeptId.Eq(req.DeptId))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Like("%" + req.Remark + "%"))
	}
	if req.IsAdmin != 0 { //整数
		do = do.Where(t.IsAdmin.Eq(req.IsAdmin))
	}
	if req.Address != "" { //字符串
		do = do.Where(t.Address.Like("%" + req.Address + "%"))
	}
	if req.Describe != "" { //字符串
		do = do.Where(t.Describe.Like("%" + req.Describe + "%"))
	}
	if req.PhoneNum != "" { //字符串
		do = do.Where(t.PhoneNum.Like("%" + req.PhoneNum + "%"))
	}
	if req.LastLoginIp != "" { //字符串
		do = do.Where(t.LastLoginIp.Like("%" + req.LastLoginIp + "%"))
	}
	if req.AccountType != 0 { //整数
		do = do.Where(t.AccountType.Eq(req.AccountType))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindSysUser error : %s", err.Error())
		return nil, err
	}
	res := convert.SysUser_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找SysUser
func (s *SysUserSvc) FindByIdSysUser(req *proto.SysUserFilter) (*proto.SysUser, error) {
	t := orm.Use(iotmodel.GetDB()).TSysUser
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdSysUser error : %s", err.Error())
		return nil, err
	}
	res := convert.SysUser_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找SysUser,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *SysUserSvc) GetListSysUser(req *proto.SysUserListRequest) ([]*proto.SysUser, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	q := orm.Use(iotmodel.GetDB())
	t := q.TSysUser
	do := t.WithContext(context.Background())
	query := req.Query

	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.UserName != "" { //字符串
			do = do.Where(t.UserName.Like("%" + query.UserName + "%"))
		}
		if query.Mobile != "" { //字符串
			do = do.Where(t.Mobile.Like("%" + query.Mobile + "%"))
		}
		if query.UserNickname != "" { //字符串
			do = do.Where(t.UserNickname.Like("%" + query.UserNickname + "%"))
		}
		if query.Birthday != 0 { //整数
			do = do.Where(t.Birthday.Eq(query.Birthday))
		}
		if query.UserPassword != "" { //字符串
			do = do.Where(t.UserPassword.Like("%" + query.UserPassword + "%"))
		}
		if query.UserSalt != "" { //字符串
			do = do.Where(t.UserSalt.Like("%" + query.UserSalt + "%"))
		}
		if query.UserStatus != 0 { //整数
			do = do.Where(t.UserStatus.Eq(query.UserStatus))
		}
		if query.UserEmail != "" { //字符串
			do = do.Where(t.UserEmail.Like("%" + query.UserEmail + "%"))
		}
		if query.Sex != 0 { //整数
			do = do.Where(t.Sex.Eq(query.Sex))
		}
		if query.Avatar != "" { //字符串
			do = do.Where(t.Avatar.Like("%" + query.Avatar + "%"))
		}
		if query.DeptId != 0 { //整数
			do = do.Where(t.DeptId.Eq(query.DeptId))
		}
		if query.PostId != 0 { //整数
			tUserPost := q.TSysUserPost
			userPost := tUserPost.WithContext(context.Background()).Select(tUserPost.PostId).Where(tUserPost.UserId.EqCol(t.Id), tUserPost.PostId.Eq(req.Query.PostId))
			do = do.Exists(userPost)
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
		if query.IsAdmin != 0 { //整数
			do = do.Where(t.IsAdmin.Eq(query.IsAdmin))
		}
		if query.Address != "" { //字符串
			do = do.Where(t.Address.Like("%" + query.Address + "%"))
		}
		if query.Describe != "" { //字符串
			do = do.Where(t.Describe.Like("%" + query.Describe + "%"))
		}
		if query.PhoneNum != "" { //字符串
			do = do.Where(t.PhoneNum.Like("%" + query.PhoneNum + "%"))
		}
		if query.LastLoginIp != "" { //字符串
			do = do.Where(t.LastLoginIp.Like("%" + query.LastLoginIp + "%"))
		}
		if query.AccountType != 0 { //整数
			do = do.Where(t.AccountType.Eq(query.AccountType))
		}
	}
	//TODO 排除admin
	do = do.Where(t.UserName.Neq("admin"))
	//组合模糊查询
	if req.SearchKey != "" {
		do = do.Where(t.WithContext(context.Background()).Where(t.UserName.Like("%" + req.SearchKey + "%")).Or(t.UserNickname.Like("%" + req.SearchKey + "%")))
	}

	if req.BeginTime != "" {
		st := iotutil.GetTimeByUnit(iotutil.ToInt64(req.BeginTime))
		st = iotutil.GetTodaySartTime(st)
		do = do.Where(t.CreatedAt.Gte(st))
	}
	if req.EndTime != "" {
		et := iotutil.GetTimeByUnit(iotutil.ToInt64(req.EndTime))
		et = iotutil.GetTodayLastTime(et)
		do = do.Where(t.CreatedAt.Lte(et))
	}

	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.CreatedAt
	}
	if req.OrderDesc == "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TSysUser
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListSysUser error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.SysUser, len(list))
	for i, v := range list {
		result[i] = convert.SysUser_db2pb(v)
	}
	return result, total, nil
}
