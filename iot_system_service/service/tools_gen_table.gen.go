// Code generated by sgen.exe,2022-04-18 19:12:11. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_system/model"
	"cloud_platform/iot_model/db_system/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/convert"
)

type ToolsGenTableSvc struct {
	Ctx context.Context
}

// 创建ToolsGenTable
func (s *ToolsGenTableSvc) CreateToolsGenTable(req *proto.ToolsGenTable) (*proto.ToolsGenTable, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TToolsGenTable
	do := t.WithContext(context.Background())
	dbObj := convert.ToolsGenTable_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateToolsGenTable error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除ToolsGenTable
func (s *ToolsGenTableSvc) DeleteToolsGenTable(req *proto.ToolsGenTable) (*proto.ToolsGenTable, error) {
	t := orm.Use(iotmodel.GetDB()).TToolsGenTable
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.TableId != 0 { //整数
		do = do.Where(t.TableId.Eq(req.TableId))
	}
	if req.TableNameE != "" { //字符串
		do = do.Where(t.TableNameE.Eq(req.TableNameE))
	}
	if req.TableComment != "" { //字符串
		do = do.Where(t.TableComment.Eq(req.TableComment))
	}
	if req.ClassName != "" { //字符串
		do = do.Where(t.ClassName.Eq(req.ClassName))
	}
	if req.TplCategory != "" { //字符串
		do = do.Where(t.TplCategory.Eq(req.TplCategory))
	}
	if req.PackageName != "" { //字符串
		do = do.Where(t.PackageName.Eq(req.PackageName))
	}
	if req.ModuleName != "" { //字符串
		do = do.Where(t.ModuleName.Eq(req.ModuleName))
	}
	if req.BusinessName != "" { //字符串
		do = do.Where(t.BusinessName.Eq(req.BusinessName))
	}
	if req.FunctionName != "" { //字符串
		do = do.Where(t.FunctionName.Eq(req.FunctionName))
	}
	if req.FunctionAuthor != "" { //字符串
		do = do.Where(t.FunctionAuthor.Eq(req.FunctionAuthor))
	}
	if req.Options != "" { //字符串
		do = do.Where(t.Options.Eq(req.Options))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteToolsGenTable error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除ToolsGenTable
func (s *ToolsGenTableSvc) DeleteByIdToolsGenTable(req *proto.ToolsGenTable) (*proto.ToolsGenTable, error) {
	t := orm.Use(iotmodel.GetDB()).TToolsGenTable
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.TableId != 0 { //整数
		do = do.Where(t.TableId.Eq(req.TableId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdToolsGenTable error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除ToolsGenTable
func (s *ToolsGenTableSvc) DeleteByIdsToolsGenTable(req *proto.ToolsGenTableBatchDeleteRequest) (*proto.ToolsGenTableBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TToolsGenTable
		do := t.WithContext(context.Background())

		do = do.Where(t.TableId.Eq(k.TableId))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsToolsGenTable error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新ToolsGenTable
func (s *ToolsGenTableSvc) UpdateToolsGenTable(req *proto.ToolsGenTable) (*proto.ToolsGenTable, error) {
	t := orm.Use(iotmodel.GetDB()).TToolsGenTable
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.TableNameE != "" { //字符串
		updateField = append(updateField, t.TableNameE)
	}
	if req.TableComment != "" { //字符串
		updateField = append(updateField, t.TableComment)
	}
	if req.ClassName != "" { //字符串
		updateField = append(updateField, t.ClassName)
	}
	if req.TplCategory != "" { //字符串
		updateField = append(updateField, t.TplCategory)
	}
	if req.PackageName != "" { //字符串
		updateField = append(updateField, t.PackageName)
	}
	if req.ModuleName != "" { //字符串
		updateField = append(updateField, t.ModuleName)
	}
	if req.BusinessName != "" { //字符串
		updateField = append(updateField, t.BusinessName)
	}
	if req.FunctionName != "" { //字符串
		updateField = append(updateField, t.FunctionName)
	}
	if req.FunctionAuthor != "" { //字符串
		updateField = append(updateField, t.FunctionAuthor)
	}
	if req.Options != "" { //字符串
		updateField = append(updateField, t.Options)
	}
	if req.Remark != "" { //字符串
		updateField = append(updateField, t.Remark)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.TableId != 0 { //整数
		do = do.Where(t.TableId.Eq(req.TableId))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateToolsGenTable error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.ToolsGenTable_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateToolsGenTable error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段ToolsGenTable
func (s *ToolsGenTableSvc) UpdateAllToolsGenTable(req *proto.ToolsGenTable) (*proto.ToolsGenTable, error) {
	t := orm.Use(iotmodel.GetDB()).TToolsGenTable
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.TableNameE)
	updateField = append(updateField, t.TableComment)
	updateField = append(updateField, t.ClassName)
	updateField = append(updateField, t.TplCategory)
	updateField = append(updateField, t.PackageName)
	updateField = append(updateField, t.ModuleName)
	updateField = append(updateField, t.BusinessName)
	updateField = append(updateField, t.FunctionName)
	updateField = append(updateField, t.FunctionAuthor)
	updateField = append(updateField, t.Options)
	updateField = append(updateField, t.CreateTime)
	updateField = append(updateField, t.UpdateTime)
	updateField = append(updateField, t.Remark)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.TableId != 0 { //整数
		do = do.Where(t.TableId.Eq(req.TableId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllToolsGenTable error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.ToolsGenTable_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllToolsGenTable error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *ToolsGenTableSvc) UpdateFieldsToolsGenTable(req *proto.ToolsGenTableUpdateFieldsRequest) (*proto.ToolsGenTable, error) {
	t := orm.Use(iotmodel.GetDB()).TToolsGenTable
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFields error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.TableId != 0 { //整数
		do = do.Where(t.TableId.Eq(req.Data.TableId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsToolsGenTable error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.ToolsGenTable_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsToolsGenTable error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找ToolsGenTable
func (s *ToolsGenTableSvc) FindToolsGenTable(req *proto.ToolsGenTableFilter) (*proto.ToolsGenTable, error) {
	t := orm.Use(iotmodel.GetDB()).TToolsGenTable
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.TableId != 0 { //整数
		do = do.Where(t.TableId.Eq(req.TableId))
	}
	if req.TableNameE != "" { //字符串
		do = do.Where(t.TableNameE.Like("%" + req.TableNameE + "%"))
	}
	if req.TableComment != "" { //字符串
		do = do.Where(t.TableComment.Like("%" + req.TableComment + "%"))
	}
	if req.ClassName != "" { //字符串
		do = do.Where(t.ClassName.Like("%" + req.ClassName + "%"))
	}
	if req.TplCategory != "" { //字符串
		do = do.Where(t.TplCategory.Like("%" + req.TplCategory + "%"))
	}
	if req.PackageName != "" { //字符串
		do = do.Where(t.PackageName.Like("%" + req.PackageName + "%"))
	}
	if req.ModuleName != "" { //字符串
		do = do.Where(t.ModuleName.Like("%" + req.ModuleName + "%"))
	}
	if req.BusinessName != "" { //字符串
		do = do.Where(t.BusinessName.Like("%" + req.BusinessName + "%"))
	}
	if req.FunctionName != "" { //字符串
		do = do.Where(t.FunctionName.Like("%" + req.FunctionName + "%"))
	}
	if req.FunctionAuthor != "" { //字符串
		do = do.Where(t.FunctionAuthor.Like("%" + req.FunctionAuthor + "%"))
	}
	if req.Options != "" { //字符串
		do = do.Where(t.Options.Like("%" + req.Options + "%"))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Like("%" + req.Remark + "%"))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindToolsGenTable error : %s", err.Error())
		return nil, err
	}
	res := convert.ToolsGenTable_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找ToolsGenTable
func (s *ToolsGenTableSvc) FindByIdToolsGenTable(req *proto.ToolsGenTableFilter) (*proto.ToolsGenTable, error) {
	t := orm.Use(iotmodel.GetDB()).TToolsGenTable
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.TableId != 0 { //整数
		do = do.Where(t.TableId.Eq(req.TableId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdToolsGenTable error : %s", err.Error())
		return nil, err
	}
	res := convert.ToolsGenTable_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找ToolsGenTable,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *ToolsGenTableSvc) GetListToolsGenTable(req *proto.ToolsGenTableListRequest) ([]*proto.ToolsGenTable, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TToolsGenTable
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.TableId != 0 { //整数
			do = do.Where(t.TableId.Eq(query.TableId))
		}
		if query.TableNameE != "" { //字符串
			do = do.Where(t.TableNameE.Like("%" + query.TableNameE + "%"))
		}
		if query.TableComment != "" { //字符串
			do = do.Where(t.TableComment.Like("%" + query.TableComment + "%"))
		}
		if query.ClassName != "" { //字符串
			do = do.Where(t.ClassName.Like("%" + query.ClassName + "%"))
		}
		if query.TplCategory != "" { //字符串
			do = do.Where(t.TplCategory.Like("%" + query.TplCategory + "%"))
		}
		if query.PackageName != "" { //字符串
			do = do.Where(t.PackageName.Like("%" + query.PackageName + "%"))
		}
		if query.ModuleName != "" { //字符串
			do = do.Where(t.ModuleName.Like("%" + query.ModuleName + "%"))
		}
		if query.BusinessName != "" { //字符串
			do = do.Where(t.BusinessName.Like("%" + query.BusinessName + "%"))
		}
		if query.FunctionName != "" { //字符串
			do = do.Where(t.FunctionName.Like("%" + query.FunctionName + "%"))
		}
		if query.FunctionAuthor != "" { //字符串
			do = do.Where(t.FunctionAuthor.Like("%" + query.FunctionAuthor + "%"))
		}
		if query.Options != "" { //字符串
			do = do.Where(t.Options.Like("%" + query.Options + "%"))
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.TableId
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TToolsGenTable
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListToolsGenTable error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.ToolsGenTable, len(list))
	for i, v := range list {
		result[i] = convert.ToolsGenTable_db2pb(v)
	}
	return result, total, nil
}
