// Code generated by sgen.exe,2022-04-18 19:12:08. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_system/model"
	"cloud_platform/iot_model/db_system/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/convert"
)

type SysDictTypeSvc struct {
	Ctx context.Context
}

// 创建SysDictType
func (s *SysDictTypeSvc) CreateSysDictType(req *proto.SysDictType) (*proto.SysDictType, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TSysDictType
	do := t.WithContext(context.Background())
	dbObj := convert.SysDictType_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateSysDictType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除SysDictType
func (s *SysDictTypeSvc) DeleteSysDictType(req *proto.SysDictType) (*proto.SysDictType, error) {
	t := orm.Use(iotmodel.GetDB()).TSysDictType
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.DictId != 0 { //整数
		do = do.Where(t.DictId.Eq(req.DictId))
	}
	if req.DictName != "" { //字符串
		do = do.Where(t.DictName.Eq(req.DictName))
	}
	if req.DictType != "" { //字符串
		do = do.Where(t.DictType.Eq(req.DictType))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CreateBy != 0 { //整数
		do = do.Where(t.CreateBy.Eq(req.CreateBy))
	}
	if req.UpdateBy != 0 { //整数
		do = do.Where(t.UpdateBy.Eq(req.UpdateBy))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteSysDictType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除SysDictType
func (s *SysDictTypeSvc) DeleteByIdSysDictType(req *proto.SysDictType) (*proto.SysDictType, error) {
	t := orm.Use(iotmodel.GetDB()).TSysDictType
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.DictId != 0 { //整数
		do = do.Where(t.DictId.Eq(req.DictId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdSysDictType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除SysDictType
func (s *SysDictTypeSvc) DeleteByIdsSysDictType(req *proto.SysDictTypeBatchDeleteRequest) (*proto.SysDictTypeBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TSysDictType
		do := t.WithContext(context.Background())

		do = do.Where(t.DictId.Eq(k.DictId))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsSysDictType error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新SysDictType
func (s *SysDictTypeSvc) UpdateSysDictType(req *proto.SysDictType) (*proto.SysDictType, error) {
	t := orm.Use(iotmodel.GetDB()).TSysDictType
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.DictName != "" { //字符串
		updateField = append(updateField, t.DictName)
	}
	if req.DictType != "" { //字符串
		updateField = append(updateField, t.DictType)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.CreateBy != 0 { //整数
		updateField = append(updateField, t.CreateBy)
	}
	if req.UpdateBy != 0 { //整数
		updateField = append(updateField, t.UpdateBy)
	}
	if req.Remark != "" { //字符串
		updateField = append(updateField, t.Remark)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.DictId != 0 { //整数
		do = do.Where(t.DictId.Eq(req.DictId))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateSysDictType error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.SysDictType_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateSysDictType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段SysDictType
func (s *SysDictTypeSvc) UpdateAllSysDictType(req *proto.SysDictType) (*proto.SysDictType, error) {
	t := orm.Use(iotmodel.GetDB()).TSysDictType
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.DictName)
	updateField = append(updateField, t.DictType)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.CreateBy)
	updateField = append(updateField, t.UpdateBy)
	updateField = append(updateField, t.Remark)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.DictId != 0 { //整数
		do = do.Where(t.DictId.Eq(req.DictId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllSysDictType error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysDictType_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllSysDictType error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *SysDictTypeSvc) UpdateFieldsSysDictType(req *proto.SysDictTypeUpdateFieldsRequest) (*proto.SysDictType, error) {
	t := orm.Use(iotmodel.GetDB()).TSysDictType
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFields error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.DictId != 0 { //整数
		do = do.Where(t.DictId.Eq(req.Data.DictId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsSysDictType error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysDictType_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsSysDictType error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找SysDictType
func (s *SysDictTypeSvc) FindSysDictType(req *proto.SysDictTypeFilter) (*proto.SysDictType, error) {
	t := orm.Use(iotmodel.GetDB()).TSysDictType
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.DictId != 0 { //整数
		do = do.Where(t.DictId.Eq(req.DictId))
	}
	if req.DictName != "" { //字符串
		do = do.Where(t.DictName.Like("%" + req.DictName + "%"))
	}
	if req.DictType != "" { //字符串
		do = do.Where(t.DictType.Like("%" + req.DictType + "%"))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CreateBy != 0 { //整数
		do = do.Where(t.CreateBy.Eq(req.CreateBy))
	}
	if req.UpdateBy != 0 { //整数
		do = do.Where(t.UpdateBy.Eq(req.UpdateBy))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Like("%" + req.Remark + "%"))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindSysDictType error : %s", err.Error())
		return nil, err
	}
	res := convert.SysDictType_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找SysDictType
func (s *SysDictTypeSvc) FindByIdSysDictType(req *proto.SysDictTypeFilter) (*proto.SysDictType, error) {
	t := orm.Use(iotmodel.GetDB()).TSysDictType
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.DictId != 0 { //整数
		do = do.Where(t.DictId.Eq(req.DictId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdSysDictType error : %s", err.Error())
		return nil, err
	}
	res := convert.SysDictType_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找SysDictType,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *SysDictTypeSvc) GetListSysDictType(req *proto.SysDictTypeListRequest) ([]*proto.SysDictType, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TSysDictType
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.DictId != 0 { //整数
			do = do.Where(t.DictId.Eq(query.DictId))
		}
		if query.DictName != "" { //字符串
			do = do.Where(t.DictName.Like("%" + query.DictName + "%"))
		}
		if query.DictType != "" { //字符串
			do = do.Where(t.DictType.Like("%" + query.DictType + "%"))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.CreateBy != 0 { //整数
			do = do.Where(t.CreateBy.Eq(query.CreateBy))
		}
		if query.UpdateBy != 0 { //整数
			do = do.Where(t.UpdateBy.Eq(query.UpdateBy))
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.DictId
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TSysDictType
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListSysDictType error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.SysDictType, len(list))
	for i, v := range list {
		result[i] = convert.SysDictType_db2pb(v)
	}
	return result, total, nil
}
