// Code generated by sgen.exe,2022-04-18 19:12:09. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_system/model"
	"cloud_platform/iot_model/db_system/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/convert"
)

type SysOperLogSvc struct {
	Ctx context.Context
}

// 创建SysOperLog
func (s *SysOperLogSvc) CreateSysOperLog(req *proto.SysOperLog) (*proto.SysOperLog, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TSysOperLog
	do := t.WithContext(context.Background())
	dbObj := convert.SysOperLog_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateSysOperLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除SysOperLog
func (s *SysOperLogSvc) DeleteSysOperLog(req *proto.SysOperLog) (*proto.SysOperLog, error) {
	t := orm.Use(iotmodel.GetDB()).TSysOperLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.OperId != 0 { //整数
		do = do.Where(t.OperId.Eq(req.OperId))
	}
	if req.Title != "" { //字符串
		do = do.Where(t.Title.Eq(req.Title))
	}
	if req.BusinessType != 0 { //整数
		do = do.Where(t.BusinessType.Eq(req.BusinessType))
	}
	if req.Method != "" { //字符串
		do = do.Where(t.Method.Eq(req.Method))
	}
	if req.RequestMethod != "" { //字符串
		do = do.Where(t.RequestMethod.Eq(req.RequestMethod))
	}
	if req.OperatorType != 0 { //整数
		do = do.Where(t.OperatorType.Eq(req.OperatorType))
	}
	if req.OperName != "" { //字符串
		do = do.Where(t.OperName.Eq(req.OperName))
	}
	if req.DeptName != "" { //字符串
		do = do.Where(t.DeptName.Eq(req.DeptName))
	}
	if req.OperUrl != "" { //字符串
		do = do.Where(t.OperUrl.Eq(req.OperUrl))
	}
	if req.OperIp != "" { //字符串
		do = do.Where(t.OperIp.Eq(req.OperIp))
	}
	if req.OperLocation != "" { //字符串
		do = do.Where(t.OperLocation.Eq(req.OperLocation))
	}
	if req.OperParam != "" { //字符串
		do = do.Where(t.OperParam.Eq(req.OperParam))
	}
	if req.JsonResult != "" { //字符串
		do = do.Where(t.JsonResult.Eq(req.JsonResult))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.ErrorMsg != "" { //字符串
		do = do.Where(t.ErrorMsg.Eq(req.ErrorMsg))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteSysOperLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除SysOperLog
func (s *SysOperLogSvc) DeleteByIdSysOperLog(req *proto.SysOperLog) (*proto.SysOperLog, error) {
	t := orm.Use(iotmodel.GetDB()).TSysOperLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.OperId != 0 { //整数
		do = do.Where(t.OperId.Eq(req.OperId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdSysOperLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除SysOperLog
func (s *SysOperLogSvc) DeleteByIdsSysOperLog(req *proto.SysOperLogBatchDeleteRequest) (*proto.SysOperLogBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TSysOperLog
		do := t.WithContext(context.Background())

		do = do.Where(t.OperId.Eq(k.OperId))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsSysOperLog error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新SysOperLog
func (s *SysOperLogSvc) UpdateSysOperLog(req *proto.SysOperLog) (*proto.SysOperLog, error) {
	t := orm.Use(iotmodel.GetDB()).TSysOperLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Title != "" { //字符串
		updateField = append(updateField, t.Title)
	}
	if req.BusinessType != 0 { //整数
		updateField = append(updateField, t.BusinessType)
	}
	if req.Method != "" { //字符串
		updateField = append(updateField, t.Method)
	}
	if req.RequestMethod != "" { //字符串
		updateField = append(updateField, t.RequestMethod)
	}
	if req.OperatorType != 0 { //整数
		updateField = append(updateField, t.OperatorType)
	}
	if req.OperName != "" { //字符串
		updateField = append(updateField, t.OperName)
	}
	if req.DeptName != "" { //字符串
		updateField = append(updateField, t.DeptName)
	}
	if req.OperUrl != "" { //字符串
		updateField = append(updateField, t.OperUrl)
	}
	if req.OperIp != "" { //字符串
		updateField = append(updateField, t.OperIp)
	}
	if req.OperLocation != "" { //字符串
		updateField = append(updateField, t.OperLocation)
	}
	if req.OperParam != "" { //字符串
		updateField = append(updateField, t.OperParam)
	}
	if req.JsonResult != "" { //字符串
		updateField = append(updateField, t.JsonResult)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.ErrorMsg != "" { //字符串
		updateField = append(updateField, t.ErrorMsg)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.OperId != 0 { //整数
		do = do.Where(t.OperId.Eq(req.OperId))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateSysOperLog error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.SysOperLog_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateSysOperLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段SysOperLog
func (s *SysOperLogSvc) UpdateAllSysOperLog(req *proto.SysOperLog) (*proto.SysOperLog, error) {
	t := orm.Use(iotmodel.GetDB()).TSysOperLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Title)
	updateField = append(updateField, t.BusinessType)
	updateField = append(updateField, t.Method)
	updateField = append(updateField, t.RequestMethod)
	updateField = append(updateField, t.OperatorType)
	updateField = append(updateField, t.OperName)
	updateField = append(updateField, t.DeptName)
	updateField = append(updateField, t.OperUrl)
	updateField = append(updateField, t.OperIp)
	updateField = append(updateField, t.OperLocation)
	updateField = append(updateField, t.OperParam)
	updateField = append(updateField, t.JsonResult)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.ErrorMsg)
	updateField = append(updateField, t.OperTime)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.OperId != 0 { //整数
		do = do.Where(t.OperId.Eq(req.OperId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllSysOperLog error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysOperLog_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllSysOperLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *SysOperLogSvc) UpdateFieldsSysOperLog(req *proto.SysOperLogUpdateFieldsRequest) (*proto.SysOperLog, error) {
	t := orm.Use(iotmodel.GetDB()).TSysOperLog
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFields error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.OperId != 0 { //整数
		do = do.Where(t.OperId.Eq(req.Data.OperId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsSysOperLog error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysOperLog_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsSysOperLog error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找SysOperLog
func (s *SysOperLogSvc) FindSysOperLog(req *proto.SysOperLogFilter) (*proto.SysOperLog, error) {
	t := orm.Use(iotmodel.GetDB()).TSysOperLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.OperId != 0 { //整数
		do = do.Where(t.OperId.Eq(req.OperId))
	}
	if req.Title != "" { //字符串
		do = do.Where(t.Title.Like("%" + req.Title + "%"))
	}
	if req.BusinessType != 0 { //整数
		do = do.Where(t.BusinessType.Eq(req.BusinessType))
	}
	if req.Method != "" { //字符串
		do = do.Where(t.Method.Like("%" + req.Method + "%"))
	}
	if req.RequestMethod != "" { //字符串
		do = do.Where(t.RequestMethod.Like("%" + req.RequestMethod + "%"))
	}
	if req.OperatorType != 0 { //整数
		do = do.Where(t.OperatorType.Eq(req.OperatorType))
	}
	if req.OperName != "" { //字符串
		do = do.Where(t.OperName.Like("%" + req.OperName + "%"))
	}
	if req.DeptName != "" { //字符串
		do = do.Where(t.DeptName.Like("%" + req.DeptName + "%"))
	}
	if req.OperUrl != "" { //字符串
		do = do.Where(t.OperUrl.Like("%" + req.OperUrl + "%"))
	}
	if req.OperIp != "" { //字符串
		do = do.Where(t.OperIp.Like("%" + req.OperIp + "%"))
	}
	if req.OperLocation != "" { //字符串
		do = do.Where(t.OperLocation.Like("%" + req.OperLocation + "%"))
	}
	if req.OperParam != "" { //字符串
		do = do.Where(t.OperParam.Like("%" + req.OperParam + "%"))
	}
	if req.JsonResult != "" { //字符串
		do = do.Where(t.JsonResult.Like("%" + req.JsonResult + "%"))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.ErrorMsg != "" { //字符串
		do = do.Where(t.ErrorMsg.Like("%" + req.ErrorMsg + "%"))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindSysOperLog error : %s", err.Error())
		return nil, err
	}
	res := convert.SysOperLog_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找SysOperLog
func (s *SysOperLogSvc) FindByIdSysOperLog(req *proto.SysOperLogFilter) (*proto.SysOperLog, error) {
	t := orm.Use(iotmodel.GetDB()).TSysOperLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.OperId != 0 { //整数
		do = do.Where(t.OperId.Eq(req.OperId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdSysOperLog error : %s", err.Error())
		return nil, err
	}
	res := convert.SysOperLog_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找SysOperLog,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *SysOperLogSvc) GetListSysOperLog(req *proto.SysOperLogListRequest) ([]*proto.SysOperLog, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TSysOperLog
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.OperId != 0 { //整数
			do = do.Where(t.OperId.Eq(query.OperId))
		}
		if query.Title != "" { //字符串
			do = do.Where(t.Title.Like("%" + query.Title + "%"))
		}
		if query.BusinessType != 0 { //整数
			do = do.Where(t.BusinessType.Eq(query.BusinessType))
		}
		if query.Method != "" { //字符串
			do = do.Where(t.Method.Like("%" + query.Method + "%"))
		}
		if query.RequestMethod != "" { //字符串
			do = do.Where(t.RequestMethod.Like("%" + query.RequestMethod + "%"))
		}
		if query.OperatorType != 0 { //整数
			do = do.Where(t.OperatorType.Eq(query.OperatorType))
		}
		if query.OperName != "" { //字符串
			do = do.Where(t.OperName.Like("%" + query.OperName + "%"))
		}
		if query.DeptName != "" { //字符串
			do = do.Where(t.DeptName.Like("%" + query.DeptName + "%"))
		}
		if query.OperUrl != "" { //字符串
			do = do.Where(t.OperUrl.Like("%" + query.OperUrl + "%"))
		}
		if query.OperIp != "" { //字符串
			do = do.Where(t.OperIp.Like("%" + query.OperIp + "%"))
		}
		if query.OperLocation != "" { //字符串
			do = do.Where(t.OperLocation.Like("%" + query.OperLocation + "%"))
		}
		if query.OperParam != "" { //字符串
			do = do.Where(t.OperParam.Like("%" + query.OperParam + "%"))
		}
		if query.JsonResult != "" { //字符串
			do = do.Where(t.JsonResult.Like("%" + query.JsonResult + "%"))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.ErrorMsg != "" { //字符串
			do = do.Where(t.ErrorMsg.Like("%" + query.ErrorMsg + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.OperId
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TSysOperLog
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListSysOperLog error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.SysOperLog, len(list))
	for i, v := range list {
		result[i] = convert.SysOperLog_db2pb(v)
	}
	return result, total, nil
}
