// Code generated by sgen,2024-06-07 15:19:18. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_system/model"
	"cloud_platform/iot_model/db_system/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/convert"
)

type SysAttachmentSvc struct {
	Ctx context.Context
}

//创建SysAttachment
func (s *SysAttachmentSvc) CreateSysAttachment(req *proto.SysAttachment) (*proto.SysAttachment, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TSysAttachment
	do := t.WithContext(context.Background())
	dbObj := convert.SysAttachment_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateSysAttachment error : %s", err.Error())
		return nil,err
	}
	return req, err
}

//根据条件删除SysAttachment
func (s *SysAttachmentSvc) DeleteSysAttachment(req *proto.SysAttachment) (*proto.SysAttachment, error) {
    t := orm.Use(iotmodel.GetDB()).TSysAttachment
    do := t.WithContext(context.Background())
    // fixme 请检查条件
    
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
    }
    if req.FileName != "" {//字符串
        do = do.Where(t.FileName.Eq(req.FileName))
    }
    if req.FileSize != 0 {//整数
        do = do.Where(t.FileSize.Eq(req.FileSize))
    }
    if req.FileType != "" {//字符串
        do = do.Where(t.FileType.Eq(req.FileType))
    }
    if req.FileUrl != "" {//字符串
        do = do.Where(t.FileUrl.Eq(req.FileUrl))
    }
    if req.FileMd5 != "" {//字符串
        do = do.Where(t.FileMd5.Eq(req.FileMd5))
    }
    if req.OssPlatform != "" {
        do = do.Where(t.OssPlatform.Eq(req.OssPlatform))
    }
    if req.SourceTable != "" {//字符串
        do = do.Where(t.SourceTable.Eq(req.SourceTable))
    }
    if req.SourceRowId != "" {//字符串
        do = do.Where(t.SourceRowId.Eq(req.SourceRowId))
    }
    if req.Status != 0 {//整数
        do = do.Where(t.Status.Eq(req.Status))
    }
    if req.AllowClear != 0 {//整数
        do = do.Where(t.AllowClear.Eq(req.AllowClear))
    }
    if req.CreatedBy != 0 {//整数
        do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
    }
    _,err := do.Delete()
    if err != nil {
        logger.Errorf("DeleteSysAttachment error : %s", err.Error())
		return nil,err
    }
    return req, err
}

//根据数据库表主键删除SysAttachment
func (s *SysAttachmentSvc) DeleteByIdSysAttachment(req *proto.SysAttachment) (*proto.SysAttachment, error) {
    t := orm.Use(iotmodel.GetDB()).TSysAttachment
    do := t.WithContext(context.Background())
    // fixme 请检查条件
    
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
    }
   _,err := do.Delete()
    if err != nil {
        logger.Errorf("DeleteByIdSysAttachment error : %s", err.Error())
		return nil,err
    }
    return req, err
}

//根据数据库表主键批量删除SysAttachment
func (s *SysAttachmentSvc) DeleteByIdsSysAttachment(req *proto.SysAttachmentBatchDeleteRequest) (*proto.SysAttachmentBatchDeleteRequest, error) {
    var err error
    for _,k := range req.Keys {
        t := orm.Use(iotmodel.GetDB()).TSysAttachment
        do := t.WithContext(context.Background())
         
        do = do.Where(t.Id.Eq(k.Id))
                     
         _,err = do.Delete()
         if err != nil {
             logger.Errorf("DeleteByIdsSysAttachment error : %s", err.Error())
             break
         }
    }
    return req, err
}

//根据主键更新SysAttachment
func (s *SysAttachmentSvc) UpdateSysAttachment(req *proto.SysAttachment) (*proto.SysAttachment, error) {
	t := orm.Use(iotmodel.GetDB()).TSysAttachment
	do := t.WithContext(context.Background())

	//附件存在不需要保存
	if c, _ := do.Where(t.FileUrl.Eq(req.FileUrl)).Count(); c > 0 {
		return nil, nil
	}

	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField  []field.Expr
    
    if req.FileName != "" {//字符串
        updateField = append(updateField,t.FileName)
    }
    if req.FileSize != 0 {//整数
        updateField = append(updateField,t.FileSize)
    }
    if req.FileType != "" {//字符串
        updateField = append(updateField,t.FileType)
    }
    if req.FileUrl != "" {//字符串
        updateField = append(updateField,t.FileUrl)
    }
    if req.FileMd5 != "" {//字符串
        updateField = append(updateField,t.FileMd5)
    }
    if req.OssPlatform != "" {
        updateField = append(updateField,t.OssPlatform)
    }
    if req.SourceTable != "" {//字符串
        updateField = append(updateField,t.SourceTable)
    }
    if req.SourceRowId != "" {//字符串
        updateField = append(updateField,t.SourceRowId)
    }
    if req.Status != 0 {//整数
        updateField = append(updateField,t.Status)
    }
    if req.AllowClear != 0 {//整数
        updateField = append(updateField,t.AllowClear)
    }
    if req.CreatedBy != 0 {//整数
        updateField = append(updateField,t.CreatedBy)
    }
    if len(updateField) > 0 {
        do = do.Select(updateField...)
    }
    //主键条件
    HasPrimaryKey := false
      
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
        HasPrimaryKey = true
    } else if req.FileUrl!= "" {
		do = do.Where(t.FileUrl.Eq(req.FileUrl))
		HasPrimaryKey = true
	}

    if !HasPrimaryKey {
        logger.Error("UpdateSysAttachment error : Missing condition")
        return nil,errors.New("Missing condition")
    }

	dbObj := convert.SysAttachment_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateSysAttachment error : %s", err.Error())
		return nil,err
	}
	return req, err
}

////根据主键更新所有字段SysAttachment
func (s *SysAttachmentSvc) UpdateAllSysAttachment(req *proto.SysAttachment) (*proto.SysAttachment, error) {
	t := orm.Use(iotmodel.GetDB()).TSysAttachment
	do := t.WithContext(context.Background())
	if c, _ := do.Where(t.FileUrl.Eq(req.FileUrl)).Count(); c > 0 {
		return nil, nil
	}
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField  []field.Expr
      
        updateField = append(updateField,t.FileName) 
        updateField = append(updateField,t.FileSize) 
        updateField = append(updateField,t.FileType) 
        updateField = append(updateField,t.FileUrl) 
        updateField = append(updateField,t.FileMd5) 
        updateField = append(updateField,t.OssPlatform) 
        updateField = append(updateField,t.SourceTable) 
        updateField = append(updateField,t.SourceRowId) 
        updateField = append(updateField,t.Status) 
        updateField = append(updateField,t.AllowClear) 
        updateField = append(updateField,t.CreatedBy)  
    if len(updateField) > 0 {
        do = do.Select(updateField...)
    }
    //主键条件
    HasPrimaryKey := false   
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
        HasPrimaryKey = true
    } else if req.FileUrl!= "" {
		do = do.Where(t.FileUrl.Eq(req.FileUrl))
		HasPrimaryKey = true
	}
    if !HasPrimaryKey {
        logger.Error("UpdateAllSysAttachment error : Missing condition")
        return nil,errors.New("Missing condition")
    }
	dbObj := convert.SysAttachment_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllSysAttachment error : %s", err.Error())
		return nil,err
	}
	return req, err
}

func (s *SysAttachmentSvc) UpdateFieldsSysAttachment(req *proto.SysAttachmentUpdateFieldsRequest) (*proto.SysAttachment, error) {
    t := orm.Use(iotmodel.GetDB()).TSysAttachment
	do := t.WithContext(context.Background())

	var updateField  []field.Expr
	for _,v:=range req.Fields {
	    col, ok := t.GetFieldByName(v)
        if ok {
          updateField = append(updateField,col)
        }
    }
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsSysAttachment error : missing updateField")
		logger.Error(err)
		return nil,err
	}
	do = do.Select(updateField...)

    //主键条件
    HasPrimaryKey := false   
    if req.Data.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Data.Id))
        HasPrimaryKey = true
    }             
    if !HasPrimaryKey {
        logger.Error("UpdateFieldsSysAttachment error : Missing condition")
        return nil,errors.New("Missing condition")
    }
	dbObj := convert.SysAttachment_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsSysAttachment error : %s", err.Error())
		return nil,err
	}
	return req.Data, nil
}

//根据非空条件查找SysAttachment
func (s *SysAttachmentSvc) FindSysAttachment(req *proto.SysAttachmentFilter) (*proto.SysAttachment, error) {
	t := orm.Use(iotmodel.GetDB()).TSysAttachment
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
    
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
    }
    if req.FileName != "" {//字符串
        do = do.Where(t.FileName.Eq(req.FileName))
    }
    if req.FileSize != 0 {//整数
        do = do.Where(t.FileSize.Eq(req.FileSize))
    }
    if req.FileType != "" {//字符串
        do = do.Where(t.FileType.Eq(req.FileType))
    }
    if req.FileUrl != "" {//字符串
        do = do.Where(t.FileUrl.Eq(req.FileUrl))
    }
    if req.FileMd5 != "" {//字符串
        do = do.Where(t.FileMd5.Eq(req.FileMd5))
    }
    if req.OssPlatform != "" {
        do = do.Where(t.OssPlatform.Eq(req.OssPlatform))
    }
    if req.SourceTable != "" {//字符串
        do = do.Where(t.SourceTable.Eq(req.SourceTable))
    }
    if req.SourceRowId != "" {//字符串
        do = do.Where(t.SourceRowId.Eq(req.SourceRowId))
    }
    if req.Status != 0 {//整数
        do = do.Where(t.Status.Eq(req.Status))
    }
    if req.AllowClear != 0 {//整数
        do = do.Where(t.AllowClear.Eq(req.AllowClear))
    }
    if req.CreatedBy != 0 {//整数
        do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
    }
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindSysAttachment error : %s", err.Error())
		return nil,err
	}
	res := convert.SysAttachment_db2pb(dbObj)
	return res, err
}

//根据数据库表主键查找SysAttachment
func (s *SysAttachmentSvc) FindByIdSysAttachment(req *proto.SysAttachmentFilter) (*proto.SysAttachment, error) {
	t := orm.Use(iotmodel.GetDB()).TSysAttachment
	do := t.WithContext(context.Background())
    // fixme 请检查条件和校验参数
    
    if req.Id != 0 {//整数
        do = do.Where(t.Id.Eq(req.Id))
    }
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdSysAttachment error : %s", err.Error())
		return nil,err
	}
	res := convert.SysAttachment_db2pb(dbObj)
	return res, err
}

//根据分页条件查找SysAttachment,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *SysAttachmentSvc) GetListSysAttachment(req *proto.SysAttachmentListRequest) ([]*proto.SysAttachment, int64, error) {
    // fixme 请检查条件和校验参数
    var err error
    t := orm.Use(iotmodel.GetDB()).TSysAttachment
    do := t.WithContext(context.Background())
    query := req.Query
    if query != nil {
        
        if query.Id != 0 {//整数
            do = do.Where(t.Id.Eq(query.Id))
        }
        if query.FileName != "" {//字符串
            do = do.Where(t.FileName.Like("%" + query.FileName + "%"))
        }
        if query.FileSize != 0 {//整数
            do = do.Where(t.FileSize.Eq(query.FileSize))
        }
        if query.FileType != "" {//字符串
            do = do.Where(t.FileType.Like("%" + query.FileType + "%"))
        }
        if query.FileUrl != "" {//字符串
            do = do.Where(t.FileUrl.Like("%" + query.FileUrl + "%"))
        }
        if query.FileMd5 != "" {//字符串
            do = do.Where(t.FileMd5.Like("%" + query.FileMd5 + "%"))
        }
        if query.OssPlatform != "" {
            do = do.Where(t.OssPlatform.Eq(query.OssPlatform))
        }
        if query.SourceTable != "" {//字符串
            do = do.Where(t.SourceTable.Like("%" + query.SourceTable + "%"))
        }
        if query.SourceRowId != "" {//字符串
            do = do.Where(t.SourceRowId.Like("%" + query.SourceRowId + "%"))
        }
        if query.Status != 0 {//整数
            do = do.Where(t.Status.Eq(query.Status))
        }
        if query.AllowClear != 0 {//整数
            do = do.Where(t.AllowClear.Eq(query.AllowClear))
        }
        if query.CreatedBy != 0 {//整数
            do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
        }
    }
    orderCol, ok := t.GetFieldByName(req.OrderKey)
    if !ok { 
        orderCol = t.Id
    }
    if req.OrderDesc != "" {
        do = do.Order(orderCol.Desc())
    } else {
        do = do.Order(orderCol)
    }

	var list []*model.TSysAttachment
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
	    logger.Errorf("GetListSysAttachment error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
	     return nil, total, nil
	}
	result := make([]*proto.SysAttachment,len(list))
    for i, v := range list {
        result[i] = convert.SysAttachment_db2pb(v)
    }
    return result, total, nil
}


