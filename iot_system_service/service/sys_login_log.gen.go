// Code generated by sgen.exe,2022-04-18 19:12:09. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_system/model"
	"cloud_platform/iot_model/db_system/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/convert"
)

type SysLoginLogSvc struct {
	Ctx context.Context
}

// 创建SysLoginLog
func (s *SysLoginLogSvc) CreateSysLoginLog(req *proto.SysLoginLog) (*proto.SysLoginLog, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TSysLoginLog
	do := t.WithContext(context.Background())
	dbObj := convert.SysLoginLog_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateSysLoginLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除SysLoginLog
func (s *SysLoginLogSvc) DeleteSysLoginLog(req *proto.SysLoginLog) (*proto.SysLoginLog, error) {
	t := orm.Use(iotmodel.GetDB()).TSysLoginLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.InfoId != 0 { //整数
		do = do.Where(t.InfoId.Eq(req.InfoId))
	}
	if req.LoginName != "" { //字符串
		do = do.Where(t.LoginName.Eq(req.LoginName))
	}
	if req.Ipaddr != "" { //字符串
		do = do.Where(t.Ipaddr.Eq(req.Ipaddr))
	}
	if req.LoginLocation != "" { //字符串
		do = do.Where(t.LoginLocation.Eq(req.LoginLocation))
	}
	if req.Browser != "" { //字符串
		do = do.Where(t.Browser.Eq(req.Browser))
	}
	if req.Os != "" { //字符串
		do = do.Where(t.Os.Eq(req.Os))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.Msg != "" { //字符串
		do = do.Where(t.Msg.Eq(req.Msg))
	}
	if req.Module != "" { //字符串
		do = do.Where(t.Module.Eq(req.Module))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteSysLoginLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除SysLoginLog
func (s *SysLoginLogSvc) DeleteByIdSysLoginLog(req *proto.SysLoginLog) (*proto.SysLoginLog, error) {
	t := orm.Use(iotmodel.GetDB()).TSysLoginLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.InfoId != 0 { //整数
		do = do.Where(t.InfoId.Eq(req.InfoId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdSysLoginLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除SysLoginLog
func (s *SysLoginLogSvc) DeleteByIdsSysLoginLog(req *proto.SysLoginLogBatchDeleteRequest) (*proto.SysLoginLogBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TSysLoginLog
		do := t.WithContext(context.Background())

		do = do.Where(t.InfoId.Eq(k.InfoId))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsSysLoginLog error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新SysLoginLog
func (s *SysLoginLogSvc) UpdateSysLoginLog(req *proto.SysLoginLog) (*proto.SysLoginLog, error) {
	t := orm.Use(iotmodel.GetDB()).TSysLoginLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.LoginName != "" { //字符串
		updateField = append(updateField, t.LoginName)
	}
	if req.Ipaddr != "" { //字符串
		updateField = append(updateField, t.Ipaddr)
	}
	if req.LoginLocation != "" { //字符串
		updateField = append(updateField, t.LoginLocation)
	}
	if req.Browser != "" { //字符串
		updateField = append(updateField, t.Browser)
	}
	if req.Os != "" { //字符串
		updateField = append(updateField, t.Os)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.Msg != "" { //字符串
		updateField = append(updateField, t.Msg)
	}
	if req.Module != "" { //字符串
		updateField = append(updateField, t.Module)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.InfoId != 0 { //整数
		do = do.Where(t.InfoId.Eq(req.InfoId))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateSysLoginLog error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.SysLoginLog_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateSysLoginLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段SysLoginLog
func (s *SysLoginLogSvc) UpdateAllSysLoginLog(req *proto.SysLoginLog) (*proto.SysLoginLog, error) {
	t := orm.Use(iotmodel.GetDB()).TSysLoginLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.LoginName)
	updateField = append(updateField, t.Ipaddr)
	updateField = append(updateField, t.LoginLocation)
	updateField = append(updateField, t.Browser)
	updateField = append(updateField, t.Os)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.Msg)
	updateField = append(updateField, t.LoginTime)
	updateField = append(updateField, t.Module)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.InfoId != 0 { //整数
		do = do.Where(t.InfoId.Eq(req.InfoId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllSysLoginLog error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysLoginLog_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllSysLoginLog error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *SysLoginLogSvc) UpdateFieldsSysLoginLog(req *proto.SysLoginLogUpdateFieldsRequest) (*proto.SysLoginLog, error) {
	t := orm.Use(iotmodel.GetDB()).TSysLoginLog
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFields error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.InfoId != 0 { //整数
		do = do.Where(t.InfoId.Eq(req.Data.InfoId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsSysLoginLog error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysLoginLog_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsSysLoginLog error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找SysLoginLog
func (s *SysLoginLogSvc) FindSysLoginLog(req *proto.SysLoginLogFilter) (*proto.SysLoginLog, error) {
	t := orm.Use(iotmodel.GetDB()).TSysLoginLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.InfoId != 0 { //整数
		do = do.Where(t.InfoId.Eq(req.InfoId))
	}
	if req.LoginName != "" { //字符串
		do = do.Where(t.LoginName.Like("%" + req.LoginName + "%"))
	}
	if req.Ipaddr != "" { //字符串
		do = do.Where(t.Ipaddr.Like("%" + req.Ipaddr + "%"))
	}
	if req.LoginLocation != "" { //字符串
		do = do.Where(t.LoginLocation.Like("%" + req.LoginLocation + "%"))
	}
	if req.Browser != "" { //字符串
		do = do.Where(t.Browser.Like("%" + req.Browser + "%"))
	}
	if req.Os != "" { //字符串
		do = do.Where(t.Os.Like("%" + req.Os + "%"))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.Msg != "" { //字符串
		do = do.Where(t.Msg.Like("%" + req.Msg + "%"))
	}
	if req.Module != "" { //字符串
		do = do.Where(t.Module.Like("%" + req.Module + "%"))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindSysLoginLog error : %s", err.Error())
		return nil, err
	}
	res := convert.SysLoginLog_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找SysLoginLog
func (s *SysLoginLogSvc) FindByIdSysLoginLog(req *proto.SysLoginLogFilter) (*proto.SysLoginLog, error) {
	t := orm.Use(iotmodel.GetDB()).TSysLoginLog
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.InfoId != 0 { //整数
		do = do.Where(t.InfoId.Eq(req.InfoId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdSysLoginLog error : %s", err.Error())
		return nil, err
	}
	res := convert.SysLoginLog_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找SysLoginLog,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *SysLoginLogSvc) GetListSysLoginLog(req *proto.SysLoginLogListRequest) ([]*proto.SysLoginLog, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TSysLoginLog
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.InfoId != 0 { //整数
			do = do.Where(t.InfoId.Eq(query.InfoId))
		}
		if query.LoginName != "" { //字符串
			do = do.Where(t.LoginName.Like("%" + query.LoginName + "%"))
		}
		if query.Ipaddr != "" { //字符串
			do = do.Where(t.Ipaddr.Like("%" + query.Ipaddr + "%"))
		}
		if query.LoginLocation != "" { //字符串
			do = do.Where(t.LoginLocation.Like("%" + query.LoginLocation + "%"))
		}
		if query.Browser != "" { //字符串
			do = do.Where(t.Browser.Like("%" + query.Browser + "%"))
		}
		if query.Os != "" { //字符串
			do = do.Where(t.Os.Like("%" + query.Os + "%"))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.Msg != "" { //字符串
			do = do.Where(t.Msg.Like("%" + query.Msg + "%"))
		}
		if query.Module != "" { //字符串
			do = do.Where(t.Module.Like("%" + query.Module + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.LoginTime.Desc())
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*model.TSysLoginLog
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListSysLoginLog error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.SysLoginLog, len(list))
	for i, v := range list {
		result[i] = convert.SysLoginLog_db2pb(v)
	}
	return result, total, nil
}
