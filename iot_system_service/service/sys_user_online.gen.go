// Code generated by sgen.exe,2022-04-18 19:12:10. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_system/model"
	"cloud_platform/iot_model/db_system/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/convert"
)

type SysUserOnlineSvc struct {
	Ctx context.Context
}

// 创建SysUserOnline
func (s *SysUserOnlineSvc) CreateSysUserOnline(req *proto.SysUserOnline) (*proto.SysUserOnline, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TSysUserOnline
	do := t.WithContext(context.Background())
	dbObj := convert.SysUserOnline_pb2db(req)
	dbObj.Id = iotutil.GetNextSeqInt64()
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateSysUserOnline error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除SysUserOnline
func (s *SysUserOnlineSvc) DeleteSysUserOnline(req *proto.SysUserOnline) (*proto.SysUserOnline, error) {
	t := orm.Use(iotmodel.GetDB()).TSysUserOnline
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Uuid != "" { //字符串
		do = do.Where(t.Uuid.Eq(req.Uuid))
	}
	if req.Token != "" { //字符串
		do = do.Where(t.Token.Eq(req.Token))
	}
	if req.UserName != "" { //字符串
		do = do.Where(t.UserName.Eq(req.UserName))
	}
	if req.Ip != "" { //字符串
		do = do.Where(t.Ip.Eq(req.Ip))
	}
	if req.Explorer != "" { //字符串
		do = do.Where(t.Explorer.Eq(req.Explorer))
	}
	if req.Os != "" { //字符串
		do = do.Where(t.Os.Eq(req.Os))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteSysUserOnline error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除SysUserOnline
func (s *SysUserOnlineSvc) DeleteByIdSysUserOnline(req *proto.SysUserOnline) (*proto.SysUserOnline, error) {
	t := orm.Use(iotmodel.GetDB()).TSysUserOnline
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdSysUserOnline error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除SysUserOnline
func (s *SysUserOnlineSvc) DeleteByIdsSysUserOnline(req *proto.SysUserOnlineBatchDeleteRequest) (*proto.SysUserOnlineBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TSysUserOnline
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsSysUserOnline error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新SysUserOnline
func (s *SysUserOnlineSvc) UpdateSysUserOnline(req *proto.SysUserOnline) (*proto.SysUserOnline, error) {
	t := orm.Use(iotmodel.GetDB()).TSysUserOnline
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Uuid != "" { //字符串
		updateField = append(updateField, t.Uuid)
	}
	if req.Token != "" { //字符串
		updateField = append(updateField, t.Token)
	}
	if req.UserName != "" { //字符串
		updateField = append(updateField, t.UserName)
	}
	if req.Ip != "" { //字符串
		updateField = append(updateField, t.Ip)
	}
	if req.Explorer != "" { //字符串
		updateField = append(updateField, t.Explorer)
	}
	if req.Os != "" { //字符串
		updateField = append(updateField, t.Os)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateSysUserOnline error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.SysUserOnline_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateSysUserOnline error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段SysUserOnline
func (s *SysUserOnlineSvc) UpdateAllSysUserOnline(req *proto.SysUserOnline) (*proto.SysUserOnline, error) {
	t := orm.Use(iotmodel.GetDB()).TSysUserOnline
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Uuid)
	updateField = append(updateField, t.Token)
	updateField = append(updateField, t.CreateTime)
	updateField = append(updateField, t.UserName)
	updateField = append(updateField, t.Ip)
	updateField = append(updateField, t.Explorer)
	updateField = append(updateField, t.Os)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllSysUserOnline error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysUserOnline_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllSysUserOnline error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *SysUserOnlineSvc) UpdateFieldsSysUserOnline(req *proto.SysUserOnlineUpdateFieldsRequest) (*proto.SysUserOnline, error) {
	t := orm.Use(iotmodel.GetDB()).TSysUserOnline
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFields error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsSysUserOnline error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysUserOnline_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsSysUserOnline error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找SysUserOnline
func (s *SysUserOnlineSvc) FindSysUserOnline(req *proto.SysUserOnlineFilter) (*proto.SysUserOnline, error) {
	t := orm.Use(iotmodel.GetDB()).TSysUserOnline
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Uuid != "" { //字符串
		do = do.Where(t.Uuid.Like("%" + req.Uuid + "%"))
	}
	if req.Token != "" { //字符串
		do = do.Where(t.Token.Like("%" + req.Token + "%"))
	}
	if req.UserName != "" { //字符串
		do = do.Where(t.UserName.Like("%" + req.UserName + "%"))
	}
	if req.Ip != "" { //字符串
		do = do.Where(t.Ip.Like("%" + req.Ip + "%"))
	}
	if req.Explorer != "" { //字符串
		do = do.Where(t.Explorer.Like("%" + req.Explorer + "%"))
	}
	if req.Os != "" { //字符串
		do = do.Where(t.Os.Like("%" + req.Os + "%"))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindSysUserOnline error : %s", err.Error())
		return nil, err
	}
	res := convert.SysUserOnline_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找SysUserOnline
func (s *SysUserOnlineSvc) FindByIdSysUserOnline(req *proto.SysUserOnlineFilter) (*proto.SysUserOnline, error) {
	t := orm.Use(iotmodel.GetDB()).TSysUserOnline
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdSysUserOnline error : %s", err.Error())
		return nil, err
	}
	res := convert.SysUserOnline_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找SysUserOnline,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *SysUserOnlineSvc) GetListSysUserOnline(req *proto.SysUserOnlineListRequest) ([]*proto.SysUserOnline, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TSysUserOnline
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Uuid != "" { //字符串
			do = do.Where(t.Uuid.Like("%" + query.Uuid + "%"))
		}
		if query.Token != "" { //字符串
			do = do.Where(t.Token.Like("%" + query.Token + "%"))
		}
		if query.UserName != "" { //字符串
			do = do.Where(t.UserName.Like("%" + query.UserName + "%"))
		}
		if query.Ip != "" { //字符串
			do = do.Where(t.Ip.Like("%" + query.Ip + "%"))
		}
		if query.Explorer != "" { //字符串
			do = do.Where(t.Explorer.Like("%" + query.Explorer + "%"))
		}
		if query.Os != "" { //字符串
			do = do.Where(t.Os.Like("%" + query.Os + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TSysUserOnline
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListSysUserOnline error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.SysUserOnline, len(list))
	for i, v := range list {
		result[i] = convert.SysUserOnline_db2pb(v)
	}
	return result, total, nil
}

func (s *SysUserOnlineSvc) GetSysUserOnlines(userId string) ([]*model.TSysUserOnline, error) {
	if userId == "" {
		return nil, errors.New("userId is empty")
	}
	var err error
	t := orm.Use(iotmodel.GetDB()).TSysUserOnline
	do := t.WithContext(context.Background()).Where(t.Uuid.Eq(userId))

	list, err := do.Find()
	if err != nil {
		logger.Errorf("GetSysUserOnlines error : %s", err.Error())
		return nil, err
	}
	return list, nil
}
