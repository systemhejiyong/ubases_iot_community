// Code generated by sgen.exe,2022-04-18 19:12:07. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"cloud_platform/iot_common/iotutil"
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_system/model"
	"cloud_platform/iot_model/db_system/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/convert"
)

type SysAuthRuleSvc struct {
	Ctx context.Context
}

// 新增和修改的时候判断名称是否重复. 新增时候 id传入0 即可
func (s *SysAuthRuleSvc) ExistsByName(name string, id int64) (bool, error) {
	t := orm.Use(iotmodel.GetDB()).TSysAuthRule
	do := t.WithContext(context.Background())
	do = do.Where(t.Title.Eq(name))

	//编辑的时候验证名称是否重复.
	if id != 0 {
		do = do.Where(t.Id.Neq(id))
	}
	count, err := do.Count()
	if err != nil {
		logger.Errorf("already exists menuName error : %s", err.Error())
		return true, err
	}
	if count > 0 {
		return true, errors.New("already exists menuName")
	} else {
		return false, nil
	}
}

// 创建SysAuthRule
func (s *SysAuthRuleSvc) CreateSysAuthRule(req *proto.SysAuthRule) (*proto.SysAuthRule, error) {
	// fixme 请在这里校验参数
	isExists, errName := s.ExistsByName(req.Title, 0)
	if isExists {
		return nil, errName
	}
	t := orm.Use(iotmodel.GetDB()).TSysAuthRule
	do := t.WithContext(context.Background())
	dbObj := convert.SysAuthRule_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateSysAuthRule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除SysAuthRule
func (s *SysAuthRuleSvc) DeleteSysAuthRule(req *proto.SysAuthRule) (*proto.SysAuthRule, error) {
	t := orm.Use(iotmodel.GetDB()).TSysAuthRule
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Pid != 0 { //整数
		do = do.Where(t.Pid.Eq(req.Pid))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.Title != "" { //字符串
		do = do.Where(t.Title.Eq(req.Title))
	}
	if req.Icon != "" { //字符串
		do = do.Where(t.Icon.Eq(req.Icon))
	}
	if req.Condition != "" { //字符串
		do = do.Where(t.Condition.Eq(req.Condition))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.MenuType != 0 { //整数
		do = do.Where(t.MenuType.Eq(req.MenuType))
	}
	if req.Weigh != 0 { //整数
		do = do.Where(t.Weigh.Eq(req.Weigh))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.AlwaysShow != 0 { //整数
		do = do.Where(t.AlwaysShow.Eq(req.AlwaysShow))
	}
	if req.Path != "" { //字符串
		do = do.Where(t.Path.Eq(req.Path))
	}
	if req.JumpPath != "" { //字符串
		do = do.Where(t.JumpPath.Eq(req.JumpPath))
	}
	if req.Component != "" { //字符串
		do = do.Where(t.Component.Eq(req.Component))
	}
	if req.IsFrame != 0 { //整数
		do = do.Where(t.IsFrame.Eq(req.IsFrame))
	}
	if req.ModuleType != "" { //字符串
		do = do.Where(t.ModuleType.Eq(req.ModuleType))
	}
	if req.ModelId != 0 { //整数
		do = do.Where(t.ModelId.Eq(req.ModelId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteSysAuthRule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除SysAuthRule
func (s *SysAuthRuleSvc) DeleteByIdSysAuthRule(req *proto.SysAuthRule) (*proto.SysAuthRule, error) {
	t := orm.Use(iotmodel.GetDB()).TSysAuthRule
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdSysAuthRule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除SysAuthRule
func (s *SysAuthRuleSvc) DeleteByIdsSysAuthRule(req *proto.SysAuthRuleBatchDeleteRequest) (*proto.SysAuthRuleBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TSysAuthRule
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsSysAuthRule error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新SysAuthRule
func (s *SysAuthRuleSvc) UpdateSysAuthRule(req *proto.SysAuthRule) (*proto.SysAuthRule, error) {

	isExists, errName := s.ExistsByName(req.Title, req.Id)
	if isExists {
		return nil, errName
	}

	t := orm.Use(iotmodel.GetDB()).TSysAuthRule
	do := t.WithContext(context.Background())

	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Pid != 0 { //整数
		updateField = append(updateField, t.Pid)
	}
	if req.Name != "" { //字符串
		updateField = append(updateField, t.Name)
	}
	if req.Title != "" { //字符串
		updateField = append(updateField, t.Title)
	}
	if req.Icon != "" { //字符串
		updateField = append(updateField, t.Icon)
	}
	if req.Condition != "" { //字符串
		updateField = append(updateField, t.Condition)
	}
	if req.Remark != "" { //字符串
		updateField = append(updateField, t.Remark)
	}
	if req.MenuType != 0 { //整数
		updateField = append(updateField, t.MenuType)
	}
	if req.Weigh != 0 { //整数
		updateField = append(updateField, t.Weigh)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.AlwaysShow != 0 { //整数
		updateField = append(updateField, t.AlwaysShow)
	}
	if req.Path != "" { //字符串
		updateField = append(updateField, t.Path)
	}
	if req.JumpPath != "" { //字符串
		updateField = append(updateField, t.JumpPath)
	}
	if req.Component != "" { //字符串
		updateField = append(updateField, t.Component)
	}
	if req.IsFrame != 0 { //整数
		updateField = append(updateField, t.IsFrame)
	}
	if req.ModuleType != "" { //字符串
		updateField = append(updateField, t.ModuleType)
	}
	if req.ModelId != 0 { //整数
		updateField = append(updateField, t.ModelId)
	}
	if req.IsCache > 0 {
		updateField = append(updateField, t.IsCache)
	}
	if req.IsHideChildMenu > 0 {
		updateField = append(updateField, t.IsHideChildMenu)
	}

	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateSysAuthRule error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.SysAuthRule_pb2db(req)
	dbObj.UpdatedAt = time.Now()

	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateSysAuthRule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段SysAuthRule
func (s *SysAuthRuleSvc) UpdateAllSysAuthRule(req *proto.SysAuthRule) (*proto.SysAuthRule, error) {

	isExists, errName := s.ExistsByName(req.Title, req.Id)
	if isExists {
		return nil, errName
	}

	t := orm.Use(iotmodel.GetDB()).TSysAuthRule
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Pid)
	updateField = append(updateField, t.Name)
	updateField = append(updateField, t.Title)
	updateField = append(updateField, t.Icon)
	updateField = append(updateField, t.Condition)
	updateField = append(updateField, t.Remark)
	updateField = append(updateField, t.MenuType)
	updateField = append(updateField, t.Weigh)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.AlwaysShow)
	updateField = append(updateField, t.IsCache)
	updateField = append(updateField, t.IsHideChildMenu)
	updateField = append(updateField, t.Path)
	updateField = append(updateField, t.JumpPath)
	updateField = append(updateField, t.Component)
	updateField = append(updateField, t.IsFrame)
	updateField = append(updateField, t.ModuleType)
	updateField = append(updateField, t.ModelId)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllSysAuthRule error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysAuthRule_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllSysAuthRule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *SysAuthRuleSvc) UpdateFieldsSysAuthRule(req *proto.SysAuthRuleUpdateFieldsRequest) (*proto.SysAuthRule, error) {
	t := orm.Use(iotmodel.GetDB()).TSysAuthRule
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFields error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsSysAuthRule error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysAuthRule_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsSysAuthRule error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找SysAuthRule
func (s *SysAuthRuleSvc) FindSysAuthRule(req *proto.SysAuthRuleFilter) (*proto.SysAuthRule, error) {
	t := orm.Use(iotmodel.GetDB()).TSysAuthRule
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Pid != 0 { //整数
		do = do.Where(t.Pid.Eq(req.Pid))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Like("%" + req.Name + "%"))
	}
	if req.Title != "" { //字符串
		do = do.Where(t.Title.Like("%" + req.Title + "%"))
	}
	if req.Icon != "" { //字符串
		do = do.Where(t.Icon.Like("%" + req.Icon + "%"))
	}
	if req.Condition != "" { //字符串
		do = do.Where(t.Condition.Like("%" + req.Condition + "%"))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Like("%" + req.Remark + "%"))
	}
	if req.MenuType != 0 { //整数
		do = do.Where(t.MenuType.Eq(req.MenuType))
	}
	if req.Weigh != 0 { //整数
		do = do.Where(t.Weigh.Eq(req.Weigh))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.AlwaysShow != 0 { //整数
		do = do.Where(t.AlwaysShow.Eq(req.AlwaysShow))
	}
	if req.Path != "" { //字符串
		do = do.Where(t.Path.Like("%" + req.Path + "%"))
	}
	if req.JumpPath != "" { //字符串
		do = do.Where(t.JumpPath.Like("%" + req.JumpPath + "%"))
	}
	if req.Component != "" { //字符串
		do = do.Where(t.Component.Like("%" + req.Component + "%"))
	}
	if req.IsFrame != 0 { //整数
		do = do.Where(t.IsFrame.Eq(req.IsFrame))
	}
	if req.ModuleType != "" { //字符串
		do = do.Where(t.ModuleType.Like("%" + req.ModuleType + "%"))
	}
	if req.ModelId != 0 { //整数
		do = do.Where(t.ModelId.Eq(req.ModelId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindSysAuthRule error : %s", err.Error())
		return nil, err
	}
	res := convert.SysAuthRule_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找SysAuthRule
func (s *SysAuthRuleSvc) FindByIdSysAuthRule(req *proto.SysAuthRuleFilter) (*proto.SysAuthRule, error) {
	t := orm.Use(iotmodel.GetDB()).TSysAuthRule
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdSysAuthRule error : %s", err.Error())
		return nil, err
	}
	res := convert.SysAuthRule_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找SysAuthRule,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *SysAuthRuleSvc) GetListSysAuthRule(req *proto.SysAuthRuleListRequest) ([]*proto.SysAuthRule, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TSysAuthRule
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Pid != 0 { //整数
			do = do.Where(t.Pid.Eq(query.Pid))
		}
		if query.Name != "" { //字符串
			do = do.Where(t.Name.Like("%" + query.Name + "%"))
		}
		if query.Title != "" { //字符串
			do = do.Where(t.Title.Like("%" + query.Title + "%"))
		}
		if query.Icon != "" { //字符串
			do = do.Where(t.Icon.Like("%" + query.Icon + "%"))
		}
		if query.Condition != "" { //字符串
			do = do.Where(t.Condition.Like("%" + query.Condition + "%"))
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
		if query.MenuType != 0 { //整数
			do = do.Where(t.MenuType.Eq(query.MenuType))
		}
		if query.Weigh != 0 { //整数
			do = do.Where(t.Weigh.Eq(query.Weigh))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.AlwaysShow != 0 { //整数
			do = do.Where(t.AlwaysShow.Eq(query.AlwaysShow))
		}
		if query.Path != "" { //字符串
			do = do.Where(t.Path.Like("%" + query.Path + "%"))
		}
		if query.JumpPath != "" { //字符串
			do = do.Where(t.JumpPath.Like("%" + query.JumpPath + "%"))
		}
		if query.Component != "" { //字符串
			do = do.Where(t.Component.Like("%" + query.Component + "%"))
		}
		if query.IsFrame != 0 { //整数
			do = do.Where(t.IsFrame.Eq(query.IsFrame))
		}
		if query.ModuleType != "" { //字符串
			do = do.Where(t.ModuleType.Like("%" + query.ModuleType + "%"))
		}
		if query.ModelId != 0 { //整数
			do = do.Where(t.ModelId.Eq(query.ModelId))
		}

	}

	//组合模糊查询
	if req.SearchKey != "" {
		do = do.Where(t.Title.Like("%" + req.SearchKey + "%")).Or(t.Name.Like("%" + req.SearchKey + "%"))
	}

	if req.BeginTime != "" {
		st := iotutil.GetTimeByUnit(iotutil.ToInt64(req.BeginTime))
		do = do.Where(t.CreatedAt.Gte(st))
	}
	if req.EndTime != "" {
		et := iotutil.GetTimeByUnit(iotutil.ToInt64(req.EndTime))
		do = do.Where(t.CreatedAt.Lte(et))
	}

	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Weigh
	}
	if req.OrderDesc == "1" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TSysAuthRule
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListSysAuthRule error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.SysAuthRule, len(list))
	for i, v := range list {
		result[i] = convert.SysAuthRule_db2pb(v)
	}
	return result, total, nil
}
