// Code generated by sgen.exe,2022-04-18 19:12:10. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_common/iotutil"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_system/model"
	"cloud_platform/iot_model/db_system/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/convert"
)

type SysRoleSvc struct {
	Ctx context.Context
}

// 新增和修改的时候判断名称是否重复. 新增时候 id传入0 即可
func (s *SysRoleSvc) ExistsByName(name string, id int64) (bool, error) {
	t := orm.Use(iotmodel.GetDB()).TSysRole
	do := t.WithContext(context.Background())
	do = do.Where(t.Name.Eq(name))

	//编辑的时候验证名称是否重复.
	if id != 0 {
		do = do.Where(t.Id.Neq(id))
	}

	count, err := do.Count()
	if err != nil {
		logger.Errorf("already exists roleName error : %s", err.Error())
		return true, err
	}
	if count > 0 {
		return true, errors.New("角色名称已存在.")
	} else {
		return false, nil
	}
}

// 创建SysRole
func (s *SysRoleSvc) CreateSysRole(req *proto.SysRole) (*proto.SysRole, error) {
	// fixme 请在这里校验参数

	isExists, errName := s.ExistsByName(req.Name, 0)
	if isExists {
		return nil, errName
	}

	t := orm.Use(iotmodel.GetDB()).TSysRole
	do := t.WithContext(context.Background())
	dbObj := convert.SysRole_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateSysRole error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除SysRole
func (s *SysRoleSvc) DeleteSysRole(req *proto.SysRole) (*proto.SysRole, error) {
	t := orm.Use(iotmodel.GetDB()).TSysRole
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.DataScope != 0 { //整数
		do = do.Where(t.DataScope.Eq(req.DataScope))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteSysRole error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除SysRole
func (s *SysRoleSvc) DeleteByIdSysRole(req *proto.SysRole) (*proto.SysRole, error) {
	t := orm.Use(iotmodel.GetDB()).TSysRole
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	//1.删除角色用户
	Casbin_Enforcer.RemoveFilteredPolicy(0, iotutil.ToString(req.Id))

	//删除角色部门数据
	var dp = SysRoleDeptSvc{}
	dp.DeleteSysRoleDept(&proto.SysRoleDept{
		RoleId: req.Id,
	})

	//删除角色关联用户数据

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdSysRole error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除SysRole
func (s *SysRoleSvc) DeleteByIdsSysRole(req *proto.SysRoleBatchDeleteRequest) (*proto.SysRoleBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TSysRole
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsSysRole error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新SysRole
func (s *SysRoleSvc) UpdateSysRole(req *proto.SysRole) (*proto.SysRole, error) {
	t := orm.Use(iotmodel.GetDB()).TSysRole
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	isExists, errName := s.ExistsByName(req.Name, req.Id)
	if isExists {
		return nil, errName
	}

	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.Name != "" { //字符串
		updateField = append(updateField, t.Name)
	}
	if req.Remark != "" { //字符串
		updateField = append(updateField, t.Remark)
	}
	if req.DataScope != 0 { //整数
		updateField = append(updateField, t.DataScope)
	}
	if req.ListOrder > 0 {
		updateField = append(updateField, t.ListOrder)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateSysRole error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.SysRole_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateSysRole error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段SysRole
func (s *SysRoleSvc) UpdateAllSysRole(req *proto.SysRole) (*proto.SysRole, error) {

	isExists, errName := s.ExistsByName(req.Name, req.Id)
	if isExists {
		return nil, errName
	}

	t := orm.Use(iotmodel.GetDB()).TSysRole
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.ListOrder)
	updateField = append(updateField, t.Name)
	updateField = append(updateField, t.Remark)
	//updateField = append(updateField,t.DataScope)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllSysRole error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysRole_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllSysRole error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *SysRoleSvc) UpdateFieldsSysRole(req *proto.SysRoleUpdateFieldsRequest) (*proto.SysRole, error) {
	t := orm.Use(iotmodel.GetDB()).TSysRole
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		return nil, errors.New("missing fields")
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsSysRole error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysRole_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsSysRole error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找SysRole
func (s *SysRoleSvc) FindSysRole(req *proto.SysRoleFilter) (*proto.SysRole, error) {
	t := orm.Use(iotmodel.GetDB()).TSysRole
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Like("%" + req.Name + "%"))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Like("%" + req.Remark + "%"))
	}
	if req.DataScope != 0 { //整数
		do = do.Where(t.DataScope.Eq(req.DataScope))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindSysRole error : %s", err.Error())
		return nil, err
	}
	res := convert.SysRole_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找SysRole
func (s *SysRoleSvc) FindByIdSysRole(req *proto.SysRoleFilter) (*proto.SysRole, error) {
	t := orm.Use(iotmodel.GetDB()).TSysRole
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdSysRole error : %s", err.Error())
		return nil, err
	}
	res := convert.SysRole_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找SysRole,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *SysRoleSvc) GetListSysRole(req *proto.SysRoleListRequest) ([]*proto.SysRole, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TSysRole
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.Name != "" { //字符串
			do = do.Where(t.Name.Like("%" + query.Name + "%"))
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
		if query.DataScope != 0 { //整数
			do = do.Where(t.DataScope.Eq(query.DataScope))
		}
	}

	//组合模糊查询
	if req.SearchKey != "" {
		do = do.Where(t.Name.Like("%" + req.SearchKey + "%")).Or(t.Remark.Like("%" + req.SearchKey + "%"))
	}

	// if req.BeginTime != ""{
	// 	st := iotutil.GetTimeByUnit( iotutil.ToInt64(req.BeginTime))
	// 	do =do.Where(t.CreatedAt.Gte(st))
	// }
	// if req.EndTime != ""{
	// 	et := iotutil.GetTimeByUnit(iotutil.ToInt64(req.EndTime))
	// 	do =do.Where(t.CreatedAt.Lte(et))
	// }

	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		do = do.Order(t.ListOrder, t.Name)
	} else {
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*model.TSysRole
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListSysRole error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.SysRole, len(list))
	for i, v := range list {
		result[i] = convert.SysRole_db2pb(v)
	}
	return result, total, nil
}
