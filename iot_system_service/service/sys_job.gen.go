// Code generated by sgen.exe,2022-04-18 19:12:09. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_system/model"
	"cloud_platform/iot_model/db_system/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/convert"
)

type SysJobSvc struct {
	Ctx context.Context
}

// 创建SysJob
func (s *SysJobSvc) CreateSysJob(req *proto.SysJob) (*proto.SysJob, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TSysJob
	do := t.WithContext(context.Background())
	dbObj := convert.SysJob_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateSysJob error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除SysJob
func (s *SysJobSvc) DeleteSysJob(req *proto.SysJob) (*proto.SysJob, error) {
	t := orm.Use(iotmodel.GetDB()).TSysJob
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.JobId != 0 { //整数
		do = do.Where(t.JobId.Eq(req.JobId))
	}
	if req.JobName != "" { //字符串
		do = do.Where(t.JobName.Eq(req.JobName))
	}
	if req.JobParams != "" { //字符串
		do = do.Where(t.JobParams.Eq(req.JobParams))
	}
	if req.JobGroup != "" { //字符串
		do = do.Where(t.JobGroup.Eq(req.JobGroup))
	}
	if req.InvokeTarget != "" { //字符串
		do = do.Where(t.InvokeTarget.Eq(req.InvokeTarget))
	}
	if req.CronExpression != "" { //字符串
		do = do.Where(t.CronExpression.Eq(req.CronExpression))
	}
	if req.MisfirePolicy != 0 { //整数
		do = do.Where(t.MisfirePolicy.Eq(req.MisfirePolicy))
	}
	if req.Concurrent != 0 { //整数
		do = do.Where(t.Concurrent.Eq(req.Concurrent))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CreateBy != 0 { //整数
		do = do.Where(t.CreateBy.Eq(req.CreateBy))
	}
	if req.UpdateBy != 0 { //整数
		do = do.Where(t.UpdateBy.Eq(req.UpdateBy))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteSysJob error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除SysJob
func (s *SysJobSvc) DeleteByIdSysJob(req *proto.SysJob) (*proto.SysJob, error) {
	t := orm.Use(iotmodel.GetDB()).TSysJob
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.JobId != 0 { //整数
		do = do.Where(t.JobId.Eq(req.JobId))
	}
	if req.JobName != "" { //字符串
		do = do.Where(t.JobName.Eq(req.JobName))
	}
	if req.JobGroup != "" { //字符串
		do = do.Where(t.JobGroup.Eq(req.JobGroup))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdSysJob error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除SysJob
func (s *SysJobSvc) DeleteByIdsSysJob(req *proto.SysJobBatchDeleteRequest) (*proto.SysJobBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TSysJob
		do := t.WithContext(context.Background())

		do = do.Where(t.JobId.Eq(k.JobId))

		do = do.Where(t.JobName.Eq(k.JobName))

		do = do.Where(t.JobGroup.Eq(k.JobGroup))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsSysJob error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新SysJob
func (s *SysJobSvc) UpdateSysJob(req *proto.SysJob) (*proto.SysJob, error) {
	t := orm.Use(iotmodel.GetDB()).TSysJob
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.JobParams != "" { //字符串
		updateField = append(updateField, t.JobParams)
	}
	if req.InvokeTarget != "" { //字符串
		updateField = append(updateField, t.InvokeTarget)
	}
	if req.CronExpression != "" { //字符串
		updateField = append(updateField, t.CronExpression)
	}
	if req.MisfirePolicy != 0 { //整数
		updateField = append(updateField, t.MisfirePolicy)
	}
	if req.Concurrent != 0 { //整数
		updateField = append(updateField, t.Concurrent)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.CreateBy != 0 { //整数
		updateField = append(updateField, t.CreateBy)
	}
	if req.UpdateBy != 0 { //整数
		updateField = append(updateField, t.UpdateBy)
	}
	if req.Remark != "" { //字符串
		updateField = append(updateField, t.Remark)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.JobId != 0 { //整数
		do = do.Where(t.JobId.Eq(req.JobId))
		HasPrimaryKey = true
	}
	if req.JobName != "" { //字符串
		do = do.Where(t.JobName.Eq(req.JobName))
		HasPrimaryKey = true
	}
	if req.JobGroup != "" { //字符串
		do = do.Where(t.JobGroup.Eq(req.JobGroup))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateSysJob error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.SysJob_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateSysJob error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段SysJob
func (s *SysJobSvc) UpdateAllSysJob(req *proto.SysJob) (*proto.SysJob, error) {
	t := orm.Use(iotmodel.GetDB()).TSysJob
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.JobParams)
	updateField = append(updateField, t.InvokeTarget)
	updateField = append(updateField, t.CronExpression)
	updateField = append(updateField, t.MisfirePolicy)
	updateField = append(updateField, t.Concurrent)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.CreateBy)
	updateField = append(updateField, t.UpdateBy)
	updateField = append(updateField, t.Remark)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.JobId != 0 { //整数
		do = do.Where(t.JobId.Eq(req.JobId))
		HasPrimaryKey = true
	}
	if req.JobName != "" { //字符串
		do = do.Where(t.JobName.Eq(req.JobName))
		HasPrimaryKey = true
	}
	if req.JobGroup != "" { //字符串
		do = do.Where(t.JobGroup.Eq(req.JobGroup))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllSysJob error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysJob_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllSysJob error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *SysJobSvc) UpdateFieldsSysJob(req *proto.SysJobUpdateFieldsRequest) (*proto.SysJob, error) {
	t := orm.Use(iotmodel.GetDB()).TSysJob
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFields error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.JobId != 0 { //整数
		do = do.Where(t.JobId.Eq(req.Data.JobId))
		HasPrimaryKey = true
	}
	if req.Data.JobName != "" { //字符串
		do = do.Where(t.JobName.Eq(req.Data.JobName))
		HasPrimaryKey = true
	}
	if req.Data.JobGroup != "" { //字符串
		do = do.Where(t.JobGroup.Eq(req.Data.JobGroup))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsSysJob error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysJob_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsSysJob error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找SysJob
func (s *SysJobSvc) FindSysJob(req *proto.SysJobFilter) (*proto.SysJob, error) {
	t := orm.Use(iotmodel.GetDB()).TSysJob
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.JobId != 0 { //整数
		do = do.Where(t.JobId.Eq(req.JobId))
	}
	if req.JobName != "" { //字符串
		do = do.Where(t.JobName.Like("%" + req.JobName + "%"))
	}
	if req.JobParams != "" { //字符串
		do = do.Where(t.JobParams.Like("%" + req.JobParams + "%"))
	}
	if req.JobGroup != "" { //字符串
		do = do.Where(t.JobGroup.Like("%" + req.JobGroup + "%"))
	}
	if req.InvokeTarget != "" { //字符串
		do = do.Where(t.InvokeTarget.Like("%" + req.InvokeTarget + "%"))
	}
	if req.CronExpression != "" { //字符串
		do = do.Where(t.CronExpression.Like("%" + req.CronExpression + "%"))
	}
	if req.MisfirePolicy != 0 { //整数
		do = do.Where(t.MisfirePolicy.Eq(req.MisfirePolicy))
	}
	if req.Concurrent != 0 { //整数
		do = do.Where(t.Concurrent.Eq(req.Concurrent))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CreateBy != 0 { //整数
		do = do.Where(t.CreateBy.Eq(req.CreateBy))
	}
	if req.UpdateBy != 0 { //整数
		do = do.Where(t.UpdateBy.Eq(req.UpdateBy))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Like("%" + req.Remark + "%"))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindSysJob error : %s", err.Error())
		return nil, err
	}
	res := convert.SysJob_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找SysJob
func (s *SysJobSvc) FindByIdSysJob(req *proto.SysJobFilter) (*proto.SysJob, error) {
	t := orm.Use(iotmodel.GetDB()).TSysJob
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.JobId != 0 { //整数
		do = do.Where(t.JobId.Eq(req.JobId))
	}
	if req.JobName != "" { //字符串
		do = do.Where(t.JobName.Eq(req.JobName))
	}
	if req.JobGroup != "" { //字符串
		do = do.Where(t.JobGroup.Eq(req.JobGroup))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdSysJob error : %s", err.Error())
		return nil, err
	}
	res := convert.SysJob_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找SysJob,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *SysJobSvc) GetListSysJob(req *proto.SysJobListRequest) ([]*proto.SysJob, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TSysJob
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.JobId != 0 { //整数
			do = do.Where(t.JobId.Eq(query.JobId))
		}
		if query.JobName != "" { //字符串
			do = do.Where(t.JobName.Like("%" + query.JobName + "%"))
		}
		if query.JobParams != "" { //字符串
			do = do.Where(t.JobParams.Like("%" + query.JobParams + "%"))
		}
		if query.JobGroup != "" { //字符串
			do = do.Where(t.JobGroup.Like("%" + query.JobGroup + "%"))
		}
		if query.InvokeTarget != "" { //字符串
			do = do.Where(t.InvokeTarget.Like("%" + query.InvokeTarget + "%"))
		}
		if query.CronExpression != "" { //字符串
			do = do.Where(t.CronExpression.Like("%" + query.CronExpression + "%"))
		}
		if query.MisfirePolicy != 0 { //整数
			do = do.Where(t.MisfirePolicy.Eq(query.MisfirePolicy))
		}
		if query.Concurrent != 0 { //整数
			do = do.Where(t.Concurrent.Eq(query.Concurrent))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.CreateBy != 0 { //整数
			do = do.Where(t.CreateBy.Eq(query.CreateBy))
		}
		if query.UpdateBy != 0 { //整数
			do = do.Where(t.UpdateBy.Eq(query.UpdateBy))
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.JobId
		orderCol = t.JobName
		orderCol = t.JobGroup
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TSysJob
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListSysJob error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.SysJob, len(list))
	for i, v := range list {
		result[i] = convert.SysJob_db2pb(v)
	}
	return result, total, nil
}
