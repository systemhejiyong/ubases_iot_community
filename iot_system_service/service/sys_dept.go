// Code generated by sgen.exe,2022-04-18 19:12:08. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_common/iotutil"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_system/model"
	"cloud_platform/iot_model/db_system/orm"
	proto "cloud_platform/iot_proto/protos/protosService"
	"cloud_platform/iot_system_service/convert"
)

type SysDeptSvc struct {
	Ctx context.Context
}

// 创建SysDept
func (s *SysDeptSvc) CreateSysDept(req *proto.SysDept) (*proto.SysDept, error) {
	// fixme 请在这里校验参数
	errVer := s.VerifyRequestParam(req)
	if errVer != nil {
		return nil, errVer
	}

	//fixme 重复验证
	isExists, err := s.ExistsSysDeptByName(req.DeptName, 0)
	if err != nil {
		return nil, err
	}
	if isExists {
		return nil, errors.New("部门名称已经存在")
	}

	t := orm.Use(iotmodel.GetDB()).TSysDept
	do := t.WithContext(context.Background())
	dbObj := convert.SysDept_pb2db(req)
	err = do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateSysDept error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 新增和修改的时候判断部门名称是否重复. 新增时候 dept传入0 即可
func (s *SysDeptSvc) ExistsSysDeptByName(detpName string, deptId int64) (bool, error) {
	t := orm.Use(iotmodel.GetDB()).TSysDept
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	do = do.Where(t.DeptName.Eq(detpName))

	//编辑的时候验证名称是否重复.
	if deptId != 0 {
		do = do.Where(t.DeptId.Neq(deptId))
	}
	count, err := do.Count()
	if err != nil {
		logger.Errorf("exists error : %s", err.Error())
		return true, err
	}

	return count > 0, err
}

// 验证请求参数是否为空
func (s *SysDeptSvc) VerifyRequestParam(req *proto.SysDept) error {

	if req.DeptName == "" { //字符串
		return errors.New("deptname is null")
	}
	return nil

}

// 根据条件删除SysDept[需要加入业务逻辑(部门是否已经有关联用户数据)]
func (s *SysDeptSvc) DeleteSysDept(req *proto.SysDept) (*proto.SysDept, error) {
	t := orm.Use(iotmodel.GetDB()).TSysDept
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.DeptId != 0 { //整数
		do = do.Where(t.DeptId.Eq(req.DeptId))
	}
	if req.ParentId != 0 { //整数
		do = do.Where(t.ParentId.Eq(req.ParentId))
	}
	if req.Ancestors != "" { //字符串
		do = do.Where(t.Ancestors.Eq(req.Ancestors))
	}
	if req.DeptName != "" { //字符串
		do = do.Where(t.DeptName.Eq(req.DeptName))
	}
	if req.OrderNum != 0 { //整数
		do = do.Where(t.OrderNum.Eq(req.OrderNum))
	}
	if req.Leader != "" { //字符串
		do = do.Where(t.Leader.Eq(req.Leader))
	}
	if req.Phone != "" { //字符串
		do = do.Where(t.Phone.Eq(req.Phone))
	}
	if req.Email != "" { //字符串
		do = do.Where(t.Email.Eq(req.Email))
	}
	if req.Status != "" { //字符串
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteSysDept error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除SysDept[需要加入业务逻辑(部门是否已经有关联用户数据)]
func (s *SysDeptSvc) DeleteByIdSysDept(req *proto.SysDept) (*proto.SysDept, error) {
	t := orm.Use(iotmodel.GetDB()).TSysDept
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.DeptId != 0 { //整数
		do = do.Where(t.DeptId.Eq(req.DeptId))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdSysDept error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除SysDept
func (s *SysDeptSvc) DeleteByIdsSysDept(req *proto.SysDeptBatchDeleteRequest) (*proto.SysDeptBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TSysDept
		do := t.WithContext(context.Background())

		do = do.Where(t.DeptId.Eq(k.DeptId))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsSysDept error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新SysDept
func (s *SysDeptSvc) UpdateSysDept(req *proto.SysDept) (*proto.SysDept, error) {

	// fixme 请在这里校验参数
	errVer := s.VerifyRequestParam(req)
	if errVer != nil {
		return nil, errVer
	}

	//fixme 重复验证
	isExists, err := s.ExistsSysDeptByName(req.DeptName, req.DeptId)
	if err != nil {
		return nil, err
	}
	if isExists {
		return nil, errors.New("部门名称已存在")
	}

	t := orm.Use(iotmodel.GetDB()).TSysDept
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.ParentId != 0 { //整数
		updateField = append(updateField, t.ParentId)
	}
	if req.Ancestors != "" { //字符串
		updateField = append(updateField, t.Ancestors)
	}
	if req.DeptName != "" { //字符串
		updateField = append(updateField, t.DeptName)
	}
	if req.OrderNum != 0 { //整数
		updateField = append(updateField, t.OrderNum)
	}
	if req.Leader != "" { //字符串
		updateField = append(updateField, t.Leader)
	}
	if req.Phone != "" { //字符串
		updateField = append(updateField, t.Phone)
	}
	if req.Email != "" { //字符串
		updateField = append(updateField, t.Email)
	}
	if req.Status != "" { //字符串
		updateField = append(updateField, t.Status)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.DeptId != 0 { //整数
		do = do.Where(t.DeptId.Eq(req.DeptId))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateSysDept error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.SysDept_pb2db(req)
	_, err = do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateSysDept error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段SysDept
func (s *SysDeptSvc) UpdateAllSysDept(req *proto.SysDept) (*proto.SysDept, error) {

	errVer := s.VerifyRequestParam(req)
	if errVer != nil {
		return nil, errVer
	}

	//fixme 重复验证
	isExists, errExists := s.ExistsSysDeptByName(req.DeptName, req.DeptId)
	if errExists != nil {
		return nil, errExists
	}
	if isExists {
		return nil, errors.New("部门名称已存在")
	}

	t := orm.Use(iotmodel.GetDB()).TSysDept
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.ParentId)
	updateField = append(updateField, t.Ancestors)
	updateField = append(updateField, t.DeptName)
	updateField = append(updateField, t.OrderNum)
	updateField = append(updateField, t.Leader)
	updateField = append(updateField, t.Phone)
	updateField = append(updateField, t.Email)
	updateField = append(updateField, t.Status)
	//updateField = append(updateField, t.CreatedBy)
	//updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.DeptId != 0 { //整数
		do = do.Where(t.DeptId.Eq(req.DeptId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllSysDept error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysDept_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllSysDept error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *SysDeptSvc) UpdateFieldsSysDept(req *proto.SysDeptUpdateFieldsRequest) (*proto.SysDept, error) {
	t := orm.Use(iotmodel.GetDB()).TSysDept
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFields error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)
	//主键条件
	HasPrimaryKey := false
	if req.Data.DeptId != 0 { //整数
		do = do.Where(t.DeptId.Eq(req.Data.DeptId))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsSysDept error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.SysDept_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsSysDept error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找SysDept
func (s *SysDeptSvc) FindSysDept(req *proto.SysDeptFilter) (*proto.SysDept, error) {
	t := orm.Use(iotmodel.GetDB()).TSysDept
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.DeptId != 0 { //整数
		do = do.Where(t.DeptId.Eq(req.DeptId))
	}
	if req.ParentId != 0 { //整数
		do = do.Where(t.ParentId.Eq(req.ParentId))
	}
	if req.Ancestors != "" { //字符串
		do = do.Where(t.Ancestors.Like("%" + req.Ancestors + "%"))
	}
	if req.DeptName != "" { //字符串
		do = do.Where(t.DeptName.Like("%" + req.DeptName + "%"))
	}
	if req.OrderNum != 0 { //整数
		do = do.Where(t.OrderNum.Eq(req.OrderNum))
	}
	if req.Leader != "" { //字符串
		do = do.Where(t.Leader.Like("%" + req.Leader + "%"))
	}
	if req.Phone != "" { //字符串
		do = do.Where(t.Phone.Like("%" + req.Phone + "%"))
	}
	if req.Email != "" { //字符串
		do = do.Where(t.Email.Like("%" + req.Email + "%"))
	}
	if req.Status != "" { //字符串
		do = do.Where(t.Status.Like("%" + req.Status + "%"))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindSysDept error : %s", err.Error())
		return nil, err
	}
	res := convert.SysDept_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找SysDept
func (s *SysDeptSvc) FindByIdSysDept(req *proto.SysDeptFilter) (*proto.SysDept, error) {
	t := orm.Use(iotmodel.GetDB()).TSysDept
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.DeptId != 0 { //整数
		do = do.Where(t.DeptId.Eq(req.DeptId))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdSysDept error : %s", err.Error())
		return nil, err
	}
	res := convert.SysDept_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找SysDept,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *SysDeptSvc) GetListSysDept(req *proto.SysDeptListRequest) ([]*proto.SysDept, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TSysDept
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.DeptId != 0 { //整数
			do = do.Where(t.DeptId.Eq(query.DeptId))
		}
		if query.ParentId != 0 { //整数
			do = do.Where(t.ParentId.Eq(query.ParentId))
		}
		if query.Ancestors != "" { //字符串
			do = do.Where(t.Ancestors.Like("%" + query.Ancestors + "%"))
		}
		if query.DeptName != "" { //字符串
			do = do.Where(t.DeptName.Like("%" + query.DeptName + "%"))
		}
		if query.OrderNum != 0 { //整数
			do = do.Where(t.OrderNum.Eq(query.OrderNum))
		}
		if query.Leader != "" { //字符串
			do = do.Where(t.Leader.Like("%" + query.Leader + "%"))
		}
		if query.Phone != "" { //字符串
			do = do.Where(t.Phone.Like("%" + query.Phone + "%"))
		}
		if query.Email != "" { //字符串
			do = do.Where(t.Email.Like("%" + query.Email + "%"))
		}
		if query.Status != "" { //字符串
			do = do.Where(t.Status.Like("%" + query.Status + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}

	//组合模糊查询
	if req.SearchKey != "" {
		do = do.Where(t.DeptName.Like("%" + req.SearchKey + "%")).Or(t.Email.Like("%" + req.SearchKey + "%"))
	}

	if req.BeginTime != "" {
		st := iotutil.GetTimeByUnit(iotutil.ToInt64(req.BeginTime))
		do = do.Where(t.CreatedAt.Gte(st))
	}
	if req.EndTime != "" {
		et := iotutil.GetTimeByUnit(iotutil.ToInt64(req.EndTime))
		do = do.Where(t.CreatedAt.Lte(et))
	}

	orderCol, ok := t.GetFieldByName(req.OrderKey)
	orderCol2, _ := t.GetFieldByName("updated_at")
	if !ok {
		orderCol = t.OrderNum
	}
	if req.OrderDesc == "1" {
		do = do.Order(orderCol.Desc(), orderCol2.Desc())
	} else {
		do = do.Order(orderCol, orderCol2)
	}

	var list []*model.TSysDept = make([]*model.TSysDept, 0)
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListSysDept error : %s", err.Error())
		return nil, 0, err
	}
	result := make([]*proto.SysDept, len(list))
	for i, v := range list {
		result[i] = convert.SysDept_db2pb(v)
	}
	return result, total, nil
}
