// Code generated by sgen.exe,2022-04-27 10:55:24. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"go-micro.dev/v4/logger"
	"gorm.io/gen/field"

	"cloud_platform/iot_common/iotutil"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_open_system/model"
	"cloud_platform/iot_model/db_open_system/orm"
	"cloud_platform/iot_open_system_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpenAuthRuleSvc struct {
	Ctx context.Context
}

// 创建OpenAuthRule
func (s *OpenAuthRuleSvc) CreateOpenAuthRule(req *proto.OpenAuthRule) (*proto.OpenAuthRule, error) {
	// fixme 请在这里校验参数
	t := orm.Use(iotmodel.GetDB()).TOpenAuthRule
	do := t.WithContext(context.Background())
	dbObj := convert.OpenAuthRule_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpenAuthRule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OpenAuthRule
func (s *OpenAuthRuleSvc) DeleteOpenAuthRule(req *proto.OpenAuthRule) (*proto.OpenAuthRule, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenAuthRule
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Pid != 0 { //整数
		do = do.Where(t.Pid.Eq(req.Pid))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.Title != "" { //字符串
		do = do.Where(t.Title.Eq(req.Title))
	}
	if req.Icon != "" { //字符串
		do = do.Where(t.Icon.Eq(req.Icon))
	}
	if req.Condition != "" { //字符串
		do = do.Where(t.Condition.Eq(req.Condition))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.MenuType != 0 { //整数
		do = do.Where(t.MenuType.Eq(req.MenuType))
	}
	if req.Weigh != 0 { //整数
		do = do.Where(t.Weigh.Eq(req.Weigh))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.AlwaysShow != 0 { //整数
		do = do.Where(t.AlwaysShow.Eq(req.AlwaysShow))
	}
	if req.Path != "" { //字符串
		do = do.Where(t.Path.Eq(req.Path))
	}
	if req.JumpPath != "" { //字符串
		do = do.Where(t.JumpPath.Eq(req.JumpPath))
	}
	if req.Component != "" { //字符串
		do = do.Where(t.Component.Eq(req.Component))
	}
	if req.IsFrame != 0 { //整数
		do = do.Where(t.IsFrame.Eq(req.IsFrame))
	}
	if req.ModuleType != "" { //字符串
		do = do.Where(t.ModuleType.Eq(req.ModuleType))
	}
	if req.ModelId != 0 { //整数
		do = do.Where(t.ModelId.Eq(req.ModelId))
	}
	if req.IsCache != 0 { //整数
		do = do.Where(t.IsCache.Eq(req.IsCache))
	}
	if req.IsHideChildMenu != 0 { //整数
		do = do.Where(t.IsHideChildMenu.Eq(req.IsHideChildMenu))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpenAuthRule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpenAuthRule
func (s *OpenAuthRuleSvc) DeleteByIdOpenAuthRule(req *proto.OpenAuthRule) (*proto.OpenAuthRule, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenAuthRule
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpenAuthRule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpenAuthRule
func (s *OpenAuthRuleSvc) DeleteByIdsOpenAuthRule(req *proto.OpenAuthRuleBatchDeleteRequest) (*proto.OpenAuthRuleBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpenAuthRule
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpenAuthRule error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpenAuthRule
func (s *OpenAuthRuleSvc) UpdateOpenAuthRule(req *proto.OpenAuthRule) (*proto.OpenAuthRule, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenAuthRule
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.Pid != 0 { //整数
		updateField = append(updateField, t.Pid)
	}
	if req.Name != "" { //字符串
		updateField = append(updateField, t.Name)
	}
	if req.Title != "" { //字符串
		updateField = append(updateField, t.Title)
	}
	if req.Icon != "" { //字符串
		updateField = append(updateField, t.Icon)
	}
	if req.Condition != "" { //字符串
		updateField = append(updateField, t.Condition)
	}
	if req.Remark != "" { //字符串
		updateField = append(updateField, t.Remark)
	}
	if req.MenuType != 0 { //整数
		updateField = append(updateField, t.MenuType)
	}
	if req.Weigh != 0 { //整数
		updateField = append(updateField, t.Weigh)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.AlwaysShow != 0 { //整数
		updateField = append(updateField, t.AlwaysShow)
	}
	if req.Path != "" { //字符串
		updateField = append(updateField, t.Path)
	}
	if req.JumpPath != "" { //字符串
		updateField = append(updateField, t.JumpPath)
	}
	if req.Component != "" { //字符串
		updateField = append(updateField, t.Component)
	}
	if req.IsFrame != 0 { //整数
		updateField = append(updateField, t.IsFrame)
	}
	if req.ModuleType != "" { //字符串
		updateField = append(updateField, t.ModuleType)
	}
	if req.ModelId != 0 { //整数
		updateField = append(updateField, t.ModelId)
	}
	if req.IsCache != 0 { //整数
		updateField = append(updateField, t.IsCache)
	}
	if req.IsHideChildMenu != 0 { //整数
		updateField = append(updateField, t.IsHideChildMenu)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpenAuthRule error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpenAuthRule_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpenAuthRule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpenAuthRule
func (s *OpenAuthRuleSvc) UpdateAllOpenAuthRule(req *proto.OpenAuthRule) (*proto.OpenAuthRule, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenAuthRule
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.Pid)
	updateField = append(updateField, t.Name)
	updateField = append(updateField, t.Title)
	updateField = append(updateField, t.Icon)
	updateField = append(updateField, t.Condition)
	updateField = append(updateField, t.Remark)
	updateField = append(updateField, t.MenuType)
	updateField = append(updateField, t.Weigh)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.AlwaysShow)
	updateField = append(updateField, t.Path)
	updateField = append(updateField, t.JumpPath)
	updateField = append(updateField, t.Component)
	updateField = append(updateField, t.IsFrame)
	updateField = append(updateField, t.ModuleType)
	updateField = append(updateField, t.ModelId)
	updateField = append(updateField, t.IsCache)
	updateField = append(updateField, t.IsHideChildMenu)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpenAuthRule error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpenAuthRule_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpenAuthRule error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpenAuthRuleSvc) UpdateFieldsOpenAuthRule(req *proto.OpenAuthRuleUpdateFieldsRequest) (*proto.OpenAuthRule, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenAuthRule
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpenAuthRule error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpenAuthRule error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpenAuthRule_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpenAuthRule error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpenAuthRule
func (s *OpenAuthRuleSvc) FindOpenAuthRule(req *proto.OpenAuthRuleFilter) (*proto.OpenAuthRule, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenAuthRule
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.Pid != 0 { //整数
		do = do.Where(t.Pid.Eq(req.Pid))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.Title != "" { //字符串
		do = do.Where(t.Title.Eq(req.Title))
	}
	if req.Icon != "" { //字符串
		do = do.Where(t.Icon.Eq(req.Icon))
	}
	if req.Condition != "" { //字符串
		do = do.Where(t.Condition.Eq(req.Condition))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.MenuType != 0 { //整数
		do = do.Where(t.MenuType.Eq(req.MenuType))
	}
	if req.Weigh != 0 { //整数
		do = do.Where(t.Weigh.Eq(req.Weigh))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.AlwaysShow != 0 { //整数
		do = do.Where(t.AlwaysShow.Eq(req.AlwaysShow))
	}
	if req.Path != "" { //字符串
		do = do.Where(t.Path.Eq(req.Path))
	}
	if req.JumpPath != "" { //字符串
		do = do.Where(t.JumpPath.Eq(req.JumpPath))
	}
	if req.Component != "" { //字符串
		do = do.Where(t.Component.Eq(req.Component))
	}
	if req.IsFrame != 0 { //整数
		do = do.Where(t.IsFrame.Eq(req.IsFrame))
	}
	if req.ModuleType != "" { //字符串
		do = do.Where(t.ModuleType.Eq(req.ModuleType))
	}
	if req.ModelId != 0 { //整数
		do = do.Where(t.ModelId.Eq(req.ModelId))
	}
	if req.IsCache != 0 { //整数
		do = do.Where(t.IsCache.Eq(req.IsCache))
	}
	if req.IsHideChildMenu != 0 { //整数
		do = do.Where(t.IsHideChildMenu.Eq(req.IsHideChildMenu))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpenAuthRule error : %s", err.Error())
		return nil, err
	}
	res := convert.OpenAuthRule_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpenAuthRule
func (s *OpenAuthRuleSvc) FindByIdOpenAuthRule(req *proto.OpenAuthRuleFilter) (*proto.OpenAuthRule, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenAuthRule
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpenAuthRule error : %s", err.Error())
		return nil, err
	}
	res := convert.OpenAuthRule_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OpenAuthRule,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpenAuthRuleSvc) GetListOpenAuthRule(req *proto.OpenAuthRuleListRequest) ([]*proto.OpenAuthRule, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpenAuthRule
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.Pid != 0 { //整数
			do = do.Where(t.Pid.Eq(query.Pid))
		}
		if query.Name != "" { //字符串
			do = do.Where(t.Name.Like("%" + query.Name + "%"))
		}
		if query.Title != "" { //字符串
			do = do.Where(t.Title.Like("%" + query.Title + "%"))
		}
		if query.Icon != "" { //字符串
			do = do.Where(t.Icon.Like("%" + query.Icon + "%"))
		}
		if query.Condition != "" { //字符串
			do = do.Where(t.Condition.Like("%" + query.Condition + "%"))
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
		if query.MenuType != 0 { //整数
			do = do.Where(t.MenuType.Eq(query.MenuType))
		}
		if query.Weigh != 0 { //整数
			do = do.Where(t.Weigh.Eq(query.Weigh))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.AlwaysShow != 0 { //整数
			do = do.Where(t.AlwaysShow.Eq(query.AlwaysShow))
		}
		if query.Path != "" { //字符串
			do = do.Where(t.Path.Like("%" + query.Path + "%"))
		}
		if query.JumpPath != "" { //字符串
			do = do.Where(t.JumpPath.Like("%" + query.JumpPath + "%"))
		}
		if query.Component != "" { //字符串
			do = do.Where(t.Component.Like("%" + query.Component + "%"))
		}
		if query.IsFrame != 0 { //整数
			do = do.Where(t.IsFrame.Eq(query.IsFrame))
		}
		if query.ModuleType != "" { //字符串
			do = do.Where(t.ModuleType.Like("%" + query.ModuleType + "%"))
		}
		if query.ModelId != 0 { //整数
			do = do.Where(t.ModelId.Eq(query.ModelId))
		}
		if query.IsCache != 0 { //整数
			do = do.Where(t.IsCache.Eq(query.IsCache))
		}
		if query.IsHideChildMenu != 0 { //整数
			do = do.Where(t.IsHideChildMenu.Eq(query.IsHideChildMenu))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	if req.OrderKey != "" {
		do = do.Order(t.Weigh.Desc())
	} else {
		orderCol, ok := t.GetFieldByName(req.OrderKey)
		if !ok {
			orderCol = t.Weigh
		}
		if req.OrderDesc != "" {
			do = do.Order(orderCol.Desc())
		} else {
			do = do.Order(orderCol)
		}
	}

	var list []*model.TOpenAuthRule
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpenAuthRule error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpenAuthRule, len(list))
	for i, v := range list {
		result[i] = convert.OpenAuthRule_db2pb(v)
	}
	return result, total, nil
}

// 把菜单下隐藏的子菜单加入到集合.解决前端因为菜单匹配不到导致404的问题.
func (s *OpenAuthRuleSvc) AddMeunIdChildByHide(Menuids []string) []string {
	//查询出所有的菜单.
	menuAll, _, err := s.GetListOpenAuthRule(&proto.OpenAuthRuleListRequest{
		Page:     1,
		PageSize: 1000000,
		Query: &proto.OpenAuthRule{
			Status: 1,
		},
	})
	if err != nil {
		logger.Error("AddMeunIdChildByHide error = " + err.Error())
		return Menuids
	}
	if len(menuAll) == 0 {
		return Menuids
	}
	var tmp []string
	for _, v := range menuAll {
		if !iotutil.ArraysExistsString(Menuids, iotutil.ToString(v.Id)) {
			for _, vv := range Menuids {
				if iotutil.ToString(v.Pid) == vv && v.AlwaysShow == 2 {
					tmp = append(tmp, iotutil.ToString(v.Id))
				}
			}
		}
	}
	Menuids = append(Menuids, tmp...)
	return Menuids
}

// 获取菜单树.
func (s *OpenAuthRuleSvc) GetUserMenuTree(userMenuids []string) ([]*proto.OpenMenuTree, error) {

	//查询出所有的菜单.
	//TODO  后续改为管理员的所有菜单权限.
	menuAll, _, err := s.GetListOpenAuthRule(&proto.OpenAuthRuleListRequest{
		Page:     1,
		PageSize: 1000000,
		Query: &proto.OpenAuthRule{
			Status: 1,
		},
	})
	if err != nil {
		return nil, err
	}
	if len(menuAll) == 0 {
		return nil, errors.New("没有发现任何菜单权限,请联系管理员添加.")
	}

	//logger.Info(menuAll)
	//过滤 userMenuids
	var userMenuList []*proto.OpenMenuTree

	//获取用户有的权限. 赋值到  userMenuList
	for _, v := range menuAll {
		if iotutil.ArraysExistsString(userMenuids, iotutil.ToString(v.Id)) {
			userMenuList = append(userMenuList, &proto.OpenMenuTree{
				Id:         v.Id,
				Pid:        v.Pid,
				Name:       v.Name,
				Title:      v.Title,
				Icon:       v.Icon,
				Condition:  v.Condition,
				Remark:     v.Remark,
				MenuType:   v.MenuType,
				Weigh:      v.Weigh,
				Status:     v.Status,
				AlwaysShow: v.AlwaysShow,
				Path:       v.Path,
				JumpPath:   v.JumpPath,
				Component:  v.Component,
				IsFrame:    v.IsFrame,
				ModuleType: v.ModuleType,
				ModelId:    v.ModelId,
				IsCache:    v.IsCache,
				Children:   nil,
			})
		}
	}
	//logger.Info(userMenuList)
	//递归生成菜单树
	menuTree := s.SetUserMenuTree(0, userMenuList)

	return menuTree, nil
}

// 递归形成菜单树
func (s *OpenAuthRuleSvc) SetUserMenuTree(pid int64, menuList []*proto.OpenMenuTree) []*proto.OpenMenuTree {
	tree := make([]*proto.OpenMenuTree, 0, len(menuList))
	for _, v := range menuList {
		if v.Pid == pid {
			child := s.SetUserMenuTree(v.Id, menuList)
			if child != nil {
				v.Children = child
			}
			tree = append(tree, v)
		}
	}
	return tree
}

// 获取所有菜单的ids
func (s *OpenAuthRuleSvc) GetAllMenuIds() ([]string, error) {
	res, _, err := s.GetListOpenAuthRule(&proto.OpenAuthRuleListRequest{
		Page:     1,
		PageSize: 1000000,
		Query:    &proto.OpenAuthRule{},
	})
	if err != nil {
		return nil, err
	}

	var menuIds []string

	for _, v := range res {
		menuIds = append(menuIds, iotutil.ToString(v.Id))
	}
	return menuIds, err
}
