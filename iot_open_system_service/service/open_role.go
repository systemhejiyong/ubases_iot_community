// Code generated by sgen.exe,2022-05-06 17:36:03. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"google.golang.org/protobuf/types/known/timestamppb"
	"gorm.io/gen/field"

	"cloud_platform/iot_common/iotutil"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_open_system/model"
	"cloud_platform/iot_model/db_open_system/orm"
	"cloud_platform/iot_open_system_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"

	"go-micro.dev/v4/metadata"
)

type OpenRoleSvc struct {
	Ctx context.Context
}

// 创建OpenRole
func (s *OpenRoleSvc) CreateOpenRole(req *proto.OpenRole) (*proto.OpenRole, error) {
	// fixme 请在这里校验参数

	roleExists, errExists := s.FindOpenRole(&proto.OpenRoleFilter{
		Name:     req.Name,
		TenantId: req.TenantId,
	})
	if errExists != nil && errExists.Error() != "record not found" {
		return nil, errExists
	}
	if roleExists != nil {
		return nil, errors.New("角色名称已存在")
	}

	t := orm.Use(iotmodel.GetDB()).TOpenRole
	do := t.WithContext(context.Background())
	dbObj := convert.OpenRole_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpenRole error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OpenRole
func (s *OpenRoleSvc) DeleteOpenRole(req *proto.OpenRole) (*proto.OpenRole, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenRole
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.ListOrder != 0 { //整数
		do = do.Where(t.ListOrder.Eq(req.ListOrder))
	}
	if req.IsDefault != 0 { //整数
		do = do.Where(t.IsDefault.Eq(req.IsDefault))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.DataScope != 0 { //整数
		do = do.Where(t.DataScope.Eq(req.DataScope))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpenRole error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpenRoleSvc) ExistsName(id int64, name string, tenantId string) error {
	m, err := s.FindOpenRole(&proto.OpenRoleFilter{
		Name:     name,
		TenantId: tenantId,
	})
	if err != nil && err.Error() != "record not found" {
		return err
	}
	if m != nil && m.Id != id {
		return errors.New("角色名称已存在.")
	}
	return nil
}

func (s *OpenRoleSvc) SetUserRole(req *proto.OpenRoleSetUserRequest) error {
	var userSvc = OpenUserSvc{}
	user, errUser := userSvc.FindOpenUser(&proto.OpenUserFilter{
		UserName:   req.UserName,
		UserStatus: 1,
	})
	if errUser != nil {
		return errUser
	}

	userId := iotutil.ToString(user.Id)
	tenantId, _ := metadata.Get(s.Ctx, "tenantid")
	if tenantId == "" {
		return errors.New("用户空间信息错误.")
	}
	roleId := req.RoleId

	return s.SetUserRoleService(roleId, userId, tenantId)

	// //清除原来的角色
	// _,err := Casbin_Enforcer.DeleteRolesForUserInDomain(userId,tenantId)
	// if err != nil{
	//     return err
	// }

	// //设置新的角色
	// _,errAdd := Casbin_Enforcer.AddRoleForUserInDomain(userId,roleId,tenantId)
	// if errAdd != nil{
	//     return errAdd
	// }

	//return nil
}

// 内部服务调用.给用户分配角色
func (s *OpenRoleSvc) SetUserRoleService(roleId string, userId string, tenantId string) error {

	if tenantId == "" {
		return errors.New("用户空间信息错误.")
	}

	//清除原来的角色
	_, err := Casbin_Enforcer.DeleteRolesForUserInDomain(userId, tenantId)
	if err != nil {
		return err
	}

	//设置新的角色
	_, errAdd := Casbin_Enforcer.AddRoleForUserInDomain(userId, roleId, tenantId)
	if errAdd != nil {
		return errAdd
	}
	return nil
}

// 内部服务使用
func (s *OpenRoleSvc) RoleAddByService(req *proto.OpenRoleAddRequest, tenantId string, userid string, isDefault int32) (*proto.Response, int64, error) {

	if req.MenuIds == nil || len(req.MenuIds) == 0 {
		return nil, 0, errors.New("角色菜单不可为空.")
	}

	if tenantId == "" {
		return nil, 0, errors.New("租户ID获取失败.")
	}

	uid := iotutil.ToInt64(userid)

	newtime := timestamppb.New(time.Now())

	id := iotutil.GetNextSeqInt64()

	_, errAdd := s.CreateOpenRole(&proto.OpenRole{
		Id:        id,
		Name:      req.RoleName,
		TenantId:  tenantId,
		Status:    1,
		ListOrder: 1,
		IsDefault: isDefault, //1 默认, 2 非默认
		Remark:    "",
		DataScope: 1, //暂时未用到
		CreatedBy: uid,
		CreatedAt: newtime,
		UpdatedBy: uid,
		UpdatedAt: newtime,
	})
	if errAdd != nil {
		return nil, 0, errAdd
	}
	var errMenu error
	//角色菜单权限
	//修改权限为批量新增方式
	var rules [][]string = make([][]string, 0)
	var idStr string = iotutil.ToString(id)
	for _, mid := range req.MenuIds {
		var tmp []string = []string{idStr, mid, "ALL"}
		rules = append(rules, tmp)
	}
	_, errCas := Casbin_Enforcer.AddPolicies(rules)
	if errCas != nil {
		errMenu = errCas
	}
	return nil, id, errMenu
}

// 根据数据库表主键删除OpenRole
func (s *OpenRoleSvc) RoleAdd(req *proto.OpenRoleAddRequest) (*proto.Response, error) {

	tenantId, _ := metadata.Get(s.Ctx, "tenantid")
	userid, _ := metadata.Get(s.Ctx, "userid")

	res, _, err := s.RoleAddByService(req, tenantId, userid, 2)
	return res, err
}

func (s *OpenRoleSvc) RoleDetail(req *proto.OpenRolePrimarykey) (*proto.OpenRoleDetailResponse, error) {
	role, err := s.FindByIdOpenRole(&proto.OpenRoleFilter{
		Id: req.Id,
	})
	if err != nil {
		return nil, err
	}

	res := proto.OpenRoleDetailResponse{
		Role: role,
	}
	res.Menuids = s.GetRoleMenuIds(iotutil.ToString(req.Id))

	return &res, nil
}

// 根据角色id 获取角色关联的菜单id
func (s *OpenRoleSvc) GetRoleMenuIds(roleId string) []string {
	menuids := Casbin_Enforcer.GetFilteredNamedPolicy("p", 0, roleId)
	var Menuids []string
	for _, v := range menuids {
		Menuids = append(Menuids, v[1])
	}
	return Menuids
}

// 修改角色
func (s *OpenRoleSvc) RoleEdit(req *proto.OpenRoleEditRequest) (*proto.Response, error) {
	if req.MenuIds == nil || len(req.MenuIds) == 0 {
		return nil, errors.New("角色菜单不可为空.")
	}

	//"go-micro.dev/v4/metadata"
	//角色入库,
	tenantId, _ := metadata.Get(s.Ctx, "tenantid")
	if tenantId == "" {
		return nil, errors.New("租户ID获取失败.")
	}
	id := iotutil.ToInt64(req.Id)
	errExists := s.ExistsName(id, req.RoleName, tenantId)
	if errExists != nil {
		return nil, errExists
	}
	newtime := timestamppb.New(time.Now())
	userid, _ := metadata.Get(s.Ctx, "userid")

	_, errUpdate := s.UpdateFieldsOpenRole(&proto.OpenRoleUpdateFieldsRequest{
		Fields: []string{"name", "updated_at", "updated_by"},
		Data: &proto.OpenRole{
			Name:      req.RoleName,
			Id:        id,
			UpdatedAt: newtime,
			UpdatedBy: iotutil.ToInt64(userid),
		},
	})
	if errUpdate != nil {
		return nil, errUpdate
	}

	//移除原来的菜单权限
	isDel, errDel := Casbin_Enforcer.RemoveFilteredPolicy(0, req.Id)
	if errDel != nil {
		return nil, errDel
	}
	if !isDel {
		return nil, errors.New("角色菜单权限设置错误,请重试.")
	}

	var errMenu error
	//角色菜单权限
	//for _, mid := range req.MenuIds {
	//	//给当前角色添加菜单权限.
	//	_, errCas := Casbin_Enforcer.AddPolicy(iotutil.ToString(id), mid, "ALL")
	//	if errCas != nil {
	//		errMenu = errCas
	//		break
	//	}
	//}
	//修改权限为批量新增方式
	var rules [][]string = make([][]string, 0)
	var idStr string = iotutil.ToString(id)
	for _, mid := range req.MenuIds {
		var tmp []string = []string{idStr, mid, "ALL"}
		rules = append(rules, tmp)
	}
	_, errCas := Casbin_Enforcer.AddPolicies(rules)
	if errCas != nil {
		errMenu = errCas
	}

	return nil, errMenu
}

// 根据用户id和空间id 获取用户在这个空间下的角色名和角色id
func (s *OpenRoleSvc) GetUserCompanyRoleId(userId int64, tenantId string) []string {
	roleIds := Casbin_Enforcer.GetRolesForUserInDomain(iotutil.ToString(userId), tenantId)
	return roleIds
}

// 根据userid,tenantid 获取roleName and roleid
func (s *OpenRoleSvc) GetRoleNameByUt(userId int64, tenantId string) (string, int64) {

	roleids := s.GetUserCompanyRoleId(userId, tenantId)
	if roleids == nil || len(roleids) == 0 {
		return "", 0
	}

	role, err := s.FindByIdOpenRole(&proto.OpenRoleFilter{
		Id: iotutil.ToInt64(roleids[0]),
	})
	if err != nil {
		return "", 0
	}
	return role.Name, role.Id
}

// 根据数据库表主键删除OpenRole
func (s *OpenRoleSvc) DeleteByIdOpenRole(req *proto.OpenRole) (*proto.OpenRole, error) {

	resDef, errDef := s.FindByIdOpenRole(&proto.OpenRoleFilter{
		Id: req.Id,
	})
	if errDef != nil {
		return nil, errDef
	}
	if resDef.IsDefault == 1 {
		return nil, errors.New("系统默认角色不可删除.")
	}

	//移除原来的菜单权限
	isDel, errDel := Casbin_Enforcer.RemoveFilteredPolicy(0, iotutil.ToString(req.Id))
	if errDel != nil {
		return nil, errDel
	}
	if !isDel {
		return nil, errors.New("角色菜单权限删除失败,请重试.")
	}
	t := orm.Use(iotmodel.GetDB()).TOpenRole
	do := t.WithContext(context.Background())
	// fixme 请检查条件
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpenRole error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpenRole
func (s *OpenRoleSvc) DeleteByIdsOpenRole(req *proto.OpenRoleBatchDeleteRequest) (*proto.OpenRoleBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpenRole
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpenRole error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpenRole
func (s *OpenRoleSvc) UpdateOpenRole(req *proto.OpenRole) (*proto.OpenRole, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenRole
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.TenantId != "" { //字符串
		updateField = append(updateField, t.TenantId)
	}
	if req.Status != 0 { //整数
		updateField = append(updateField, t.Status)
	}
	if req.ListOrder != 0 { //整数
		updateField = append(updateField, t.ListOrder)
	}
	if req.IsDefault != 0 { //整数
		updateField = append(updateField, t.IsDefault)
	}
	if req.Name != "" { //字符串
		updateField = append(updateField, t.Name)
	}
	if req.Remark != "" { //字符串
		updateField = append(updateField, t.Remark)
	}
	if req.DataScope != 0 { //整数
		updateField = append(updateField, t.DataScope)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpenRole error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpenRole_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpenRole error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpenRole
func (s *OpenRoleSvc) UpdateAllOpenRole(req *proto.OpenRole) (*proto.OpenRole, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenRole
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.TenantId)
	updateField = append(updateField, t.Status)
	updateField = append(updateField, t.ListOrder)
	updateField = append(updateField, t.IsDefault)
	updateField = append(updateField, t.Name)
	updateField = append(updateField, t.Remark)
	updateField = append(updateField, t.DataScope)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpenRole error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpenRole_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpenRole error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpenRoleSvc) UpdateFieldsOpenRole(req *proto.OpenRoleUpdateFieldsRequest) (*proto.OpenRole, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenRole
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpenRole error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpenRole error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpenRole_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpenRole error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpenRole
func (s *OpenRoleSvc) FindOpenRole(req *proto.OpenRoleFilter) (*proto.OpenRole, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenRole
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TenantId != "" { //字符串
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.Status != 0 { //整数
		do = do.Where(t.Status.Eq(req.Status))
	}
	if req.ListOrder != 0 { //整数
		do = do.Where(t.ListOrder.Eq(req.ListOrder))
	}
	if req.IsDefault != 0 { //整数
		do = do.Where(t.IsDefault.Eq(req.IsDefault))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.Remark != "" { //字符串
		do = do.Where(t.Remark.Eq(req.Remark))
	}
	if req.DataScope != 0 { //整数
		do = do.Where(t.DataScope.Eq(req.DataScope))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpenRole error : %s", err.Error())
		return nil, err
	}
	res := convert.OpenRole_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpenRole
func (s *OpenRoleSvc) FindByIdOpenRole(req *proto.OpenRoleFilter) (*proto.OpenRole, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenRole
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpenRole error : %s", err.Error())
		return nil, err
	}
	res := convert.OpenRole_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OpenRole,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpenRoleSvc) GetListOpenRole(req *proto.OpenRoleListRequest) ([]*proto.OpenRole, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpenRole
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.TenantId != "" { //字符串
			do = do.Where(t.TenantId.Eq(query.TenantId))
		}
		if query.Status != 0 { //整数
			do = do.Where(t.Status.Eq(query.Status))
		}
		if query.ListOrder != 0 { //整数
			do = do.Where(t.ListOrder.Eq(query.ListOrder))
		}
		if query.IsDefault != 0 { //整数
			do = do.Where(t.IsDefault.Eq(query.IsDefault))
		}
		if query.Name != "" { //字符串
			do = do.Where(t.Name.Like("%" + query.Name + "%"))
		}
		if query.Remark != "" { //字符串
			do = do.Where(t.Remark.Like("%" + query.Remark + "%"))
		}
		if query.DataScope != 0 { //整数
			do = do.Where(t.DataScope.Eq(query.DataScope))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOpenRole
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpenRole error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpenRole, len(list))
	for i, v := range list {
		result[i] = convert.OpenRole_db2pb(v)
	}
	return result, total, nil
}
