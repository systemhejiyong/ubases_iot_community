// Code generated by sgen.exe,2022-04-27 10:55:26. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"

	"time"

	"go-micro.dev/v4/logger"
	"google.golang.org/protobuf/types/known/timestamppb"
	"gorm.io/gen/field"

	"cloud_platform/iot_common/iotconst"
	"cloud_platform/iot_common/iotutil"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_open_system/model"
	"cloud_platform/iot_model/db_open_system/orm"
	"cloud_platform/iot_open_system_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"

	"go-micro.dev/v4/metadata"
)

type OpenUserCompanySvc struct {
	Ctx context.Context
}

// 设置公共属性[创建时间,创建人,修改时间,修改人]新增 optertype =1 修改 =2
func (s *OpenUserCompanySvc) SetCommonFiled(req *proto.OpenUserCompany, userId int64, opterType int) {
	if opterType == 1 {
		req.CreatedBy = userId
		req.CreatedAt = timestamppb.New(time.Now())
	}
	req.UpdatedBy = userId
	req.UpdatedAt = timestamppb.New(time.Now())
}

// 创建OpenUserCompany
func (s *OpenUserCompanySvc) CreateOpenUserCompany(req *proto.OpenUserCompany) (*proto.OpenUserCompany, error) {
	// fixme 请在这里校验参数

	s.SetCommonFiled(req, req.CreatedBy, 1)

	t := orm.Use(iotmodel.GetDB()).TOpenUserCompany
	do := t.WithContext(context.Background())
	dbObj := convert.OpenUserCompany_pb2db(req)
	err := do.Create(dbObj)
	if err != nil {
		logger.Errorf("CreateOpenUserCompany error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OpenUserCompany
func (s *OpenUserCompanySvc) DeleteOpenUserCompany(req *proto.OpenUserCompany) (*proto.OpenUserCompany, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenUserCompany
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.CompanyId != 0 { //整数
		do = do.Where(t.CompanyId.Eq(req.CompanyId))
	}
	if req.UserType != 0 { //整数
		do = do.Where(t.UserType.Eq(req.UserType))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpenUserCompany error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpenUserCompany
func (s *OpenUserCompanySvc) DeleteByIdOpenUserCompany(req *proto.OpenUserCompany) (*proto.OpenUserCompany, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenUserCompany
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpenUserCompany error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpenUserCompany
func (s *OpenUserCompanySvc) DeleteByIdsOpenUserCompany(req *proto.OpenUserCompanyBatchDeleteRequest) (*proto.OpenUserCompanyBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpenUserCompany
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpenUserCompany error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpenUserCompany
func (s *OpenUserCompanySvc) UpdateOpenUserCompany(req *proto.OpenUserCompany) (*proto.OpenUserCompany, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenUserCompany
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.UserId != 0 { //整数
		updateField = append(updateField, t.UserId)
	}
	if req.CompanyId != 0 { //整数
		updateField = append(updateField, t.CompanyId)
	}
	if req.UserType != 0 { //整数
		updateField = append(updateField, t.UserType)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpenUserCompany error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpenUserCompany_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpenUserCompany error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpenUserCompany
func (s *OpenUserCompanySvc) UpdateAllOpenUserCompany(req *proto.OpenUserCompany) (*proto.OpenUserCompany, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenUserCompany
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.UserId)
	updateField = append(updateField, t.CompanyId)
	updateField = append(updateField, t.UserType)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpenUserCompany error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpenUserCompany_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpenUserCompany error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpenUserCompanySvc) UpdateFieldsOpenUserCompany(req *proto.OpenUserCompanyUpdateFieldsRequest) (*proto.OpenUserCompany, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenUserCompany
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpenUserCompany error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpenUserCompany error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpenUserCompany_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpenUserCompany error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpenUserCompany
func (s *OpenUserCompanySvc) FindOpenUserCompany(req *proto.OpenUserCompanyFilter) (*proto.OpenUserCompany, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenUserCompany
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.UserId != 0 { //整数
		do = do.Where(t.UserId.Eq(req.UserId))
	}
	if req.TenantId != "" { //整数
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.CompanyId != 0 { //整数
		do = do.Where(t.CompanyId.Eq(req.CompanyId))
	}
	if req.UserType != 0 { //整数
		do = do.Where(t.UserType.Eq(req.UserType))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpenUserCompany error : %s", err.Error())
		return nil, err
	}
	res := convert.OpenUserCompany_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpenUserCompany
func (s *OpenUserCompanySvc) FindByIdOpenUserCompany(req *proto.OpenUserCompanyFilter) (*proto.OpenUserCompany, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenUserCompany
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpenUserCompany error : %s", err.Error())
		return nil, err
	}
	res := convert.OpenUserCompany_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OpenUserCompany,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpenUserCompanySvc) GetListOpenUserCompany(req *proto.OpenUserCompanyListRequest) ([]*proto.OpenUserCompany, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpenUserCompany
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.UserId != 0 { //整数
			do = do.Where(t.UserId.Eq(query.UserId))
		}
		if query.CompanyId != 0 { //整数
			do = do.Where(t.CompanyId.Eq(query.CompanyId))
		}
		if query.TenantId != "" { //整数
			do = do.Where(t.TenantId.Eq(query.TenantId))
		}
		if query.UserType != 0 { //整数
			do = do.Where(t.UserType.Eq(query.UserType))
		}
		if query.UserName != "" {
			do = do.Where(t.UserName.Eq(query.UserName))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOpenUserCompany
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpenUserCompany error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpenUserCompany, len(list))
	for i, v := range list {
		result[i] = convert.OpenUserCompany_db2pb(v)
	}
	return result, total, nil
}

func (s *OpenUserCompanySvc) UserCompanyAuth(req *proto.OpenUserCompanyAuthRequest) error {

	//授权者
	userid, _ := metadata.Get(s.Ctx, "userid")
	if userid == "" {
		return errors.New("登录失效，请重新登录.")
	}

	tenantid, _ := metadata.Get(s.Ctx, "tenantid")
	if tenantid == "" {
		return errors.New("空间获取失败, 请重新选择空间.")
	}

	//获取到用户id（不能授权自己）
	var openuser = OpenUserSvc{}
	//被授权者
	user, errUser := openuser.FindOpenUser(&proto.OpenUserFilter{
		UserName:   req.UserName,
		UserStatus: 1,
	})

	if errUser != nil {
		if errUser.Error() == "record not found" {
			return errors.New("授权账号未注册或者状态非正常.")
		}
		return errUser
	}

	if user.Id == iotutil.ToInt64(userid) {
		return errors.New("不能给自己授权")
	}

	//获取到用户对应的公司id和tenantid
	//根据自己的空间找到空间信息
	var opencompany = OpenCompanySvc{}
	opencompany.Ctx = s.Ctx
	company, errCompany := opencompany.FindOpenCompany(&proto.OpenCompanyFilter{
		TenantId: tenantid,
	})
	if errCompany != nil {
		return errCompany
	}
	if company == nil {
		return errors.New("主账号公司信息获取失败.")
	}

	//是否已经授权过
	usercompanyExists, errExists := s.FindOpenUserCompany(&proto.OpenUserCompanyFilter{
		UserId:   user.Id,
		TenantId: company.TenantId,
	})
	if errExists != nil && errExists.Error() != "record not found" {
		return errExists
	}
	if usercompanyExists != nil && usercompanyExists.Id != 0 {
		return errors.New("该账号授权已经存在, 不可重复授权.")
	}

	_, errUserCompany := s.CreateOpenUserCompany(&proto.OpenUserCompany{
		UserId:    user.Id,
		CompanyId: company.Id,
		TenantId:  company.TenantId,
		Remark:    req.Remark,
		UserName:  user.UserName,
		UserType:  iotconst.OPEN_USER_SUB_ACCOUNT,
		CreatedBy: iotutil.ToInt64(userid),
		CreatedAt: timestamppb.New(time.Now()),
	})
	if errUserCompany != nil {
		return errUserCompany
	}
	return nil
}

// 授权列表查询
func (s *OpenUserCompanySvc) UserCompanyAuthList(req *proto.OpenUserCompanyAuthListRequest) ([]*proto.OpenUserCompanyAuthResponse, error) {

	//获取登录者的空间
	tenantId, _ := metadata.Get(s.Ctx, "tenantid")
	if tenantId == "" {
		return nil, errors.New("登录身份失效,请重新登录")
	}

	userCompanyList, _, errUserCompanyList := s.GetListOpenUserCompany(&proto.OpenUserCompanyListRequest{
		Page:     1,
		PageSize: 1000000,
		Query: &proto.OpenUserCompany{
			TenantId: tenantId,
			UserName: req.Account,
		},
	})
	if errUserCompanyList != nil {
		return nil, errUserCompanyList
	}
	if len(userCompanyList) == 0 {
		return nil, nil
	}

	//组合列表对象
	var resList []*proto.OpenUserCompanyAuthResponse
	var roleSvc OpenRoleSvc
	roleSvc.Ctx = s.Ctx

	var companySvc OpenCompanySvc
	companySvc.Ctx = s.Ctx

	for _, v := range userCompanyList {

		//自己的主账号需要直接过滤
		if v.UserType == iotconst.OPEN_USER_MAIN_ACCOUNT {
			continue
		}

		roleName, roleId := roleSvc.GetRoleNameByUt(v.UserId, tenantId)
		//如果查询角色有的话. 则过滤角色
		if req.RoleId != "" && iotutil.ToString(roleId) != req.RoleId {
			continue
		}

		company, errCompany := companySvc.FindOpenCompanyNoCtx(&proto.OpenCompanyFilter{
			UserId: v.UserId,
		})
		if errCompany != nil {
			return nil, errCompany
		}
		//如果查询条件有账号类型的话. 则过滤
		if req.AccountType != "" && iotutil.ToInt32(req.AccountType) != company.AccountType {
			continue
		}

		m := proto.OpenUserCompanyAuthResponse{
			Id:          iotutil.ToString(v.Id),
			UserName:    v.UserName,
			AccountType: company.AccountType,
			CreatedAt:   v.CreatedAt.AsTime().Unix(),
			CompanyName: company.Name,
			Remark:      v.Remark,
			RoleName:    roleName,
			RoleId:      roleId,
		}
		resList = append(resList, &m)
	}
	return resList, nil
}
