// Code generated by sgen.exe,2022-04-27 10:55:25. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package service

import (
	"context"
	"errors"
	"time"

	"go-micro.dev/v4/logger"
	"go-micro.dev/v4/metadata"
	"gorm.io/gen/field"

	"cloud_platform/iot_common/iotutil"
	iotmodel "cloud_platform/iot_model"
	"cloud_platform/iot_model/db_open_system/model"
	"cloud_platform/iot_model/db_open_system/orm"
	"cloud_platform/iot_open_system_service/convert"
	proto "cloud_platform/iot_proto/protos/protosService"
	"google.golang.org/protobuf/types/known/timestamppb"
)

type OpenCompanyConnectSvc struct {
	Ctx context.Context
}

func (s *OpenCompanyConnectSvc) ExistsCompanyConnect(tenantId string, name string, account string, phone string) error {
	if name != "" {
		res, errName := s.FindOpenCompanyConnect(&proto.OpenCompanyConnectFilter{
			TenantId: tenantId,
			Name:     name,
		})
		if errName != nil && errName.Error() != "record not found" {
			return errName
		}
		if res != nil {
			return errors.New(name + ",已经存在.")
		}
	}

	if account != "" {
		res, errAccount := s.FindOpenCompanyConnect(&proto.OpenCompanyConnectFilter{
			TenantId: tenantId,
			Account:  account,
		})
		if errAccount != nil && errAccount.Error() != "record not found" {
			return errAccount
		}
		if res != nil {
			return errors.New(account + ",已经存在.")
		}
	}

	if phone != "" {
		res, errPhone := s.FindOpenCompanyConnect(&proto.OpenCompanyConnectFilter{
			TenantId: tenantId,
			Phone:    phone,
		})
		if errPhone != nil && errPhone.Error() != "record not found" {
			return errPhone
		}
		if res != nil {
			return errors.New(phone + ",已经存在.")
		}
	}
	return nil
}

// 创建OpenCompanyConnect
func (s *OpenCompanyConnectSvc) CreateOpenCompanyConnect(req *proto.OpenCompanyConnect) (*proto.OpenCompanyConnect, error) {
	// fixme 请在这里校验参数
	tenantId, _ := metadata.Get(s.Ctx, "tenantid")
	req.TenantId = tenantId
	userId, _ := metadata.Get(s.Ctx, "userid")
	req.UserId = iotutil.ToInt64(userId)

	errName := s.ExistsCompanyConnect(tenantId, req.Name, "", "")
	if errName != nil {
		return nil, errName
	}

	errAccount := s.ExistsCompanyConnect(tenantId, "", req.Account, "")
	if errAccount != nil {
		return nil, errAccount
	}

	errPhone := s.ExistsCompanyConnect(tenantId, "", "", req.Phone)
	if errPhone != nil {
		return nil, errPhone
	}

	req.CreatedBy = req.UserId
	req.UpdatedBy = req.CreatedBy
	req.CreatedAt = timestamppb.New(time.Now())
	req.UpdatedAt = req.CreatedAt
	req.Id = iotutil.GetNextSeqInt64()

	t := orm.Use(iotmodel.GetDB()).TOpenCompanyConnect
	do := t.WithContext(context.Background())
	dbObj := convert.OpenCompanyConnect_pb2db(req)
	err := do.Create(dbObj)

	if err != nil {
		logger.Errorf("CreateOpenCompanyConnect error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据条件删除OpenCompanyConnect
func (s *OpenCompanyConnectSvc) DeleteOpenCompanyConnect(req *proto.OpenCompanyConnect) (*proto.OpenCompanyConnect, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenCompanyConnect
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TenantId != "" { //整数
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.Account != "" { //字符串
		do = do.Where(t.Account.Eq(req.Account))
	}
	if req.Phone != "" { //字符串
		do = do.Where(t.Phone.Eq(req.Phone))
	}
	if req.Address != "" { //字符串
		do = do.Where(t.Address.Eq(req.Address))
	}
	if req.Job != "" { //字符串
		do = do.Where(t.Job.Eq(req.Job))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteOpenCompanyConnect error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键删除OpenCompanyConnect
func (s *OpenCompanyConnectSvc) DeleteByIdOpenCompanyConnect(req *proto.OpenCompanyConnect) (*proto.OpenCompanyConnect, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenCompanyConnect
	do := t.WithContext(context.Background())
	// fixme 请检查条件

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	_, err := do.Delete()
	if err != nil {
		logger.Errorf("DeleteByIdOpenCompanyConnect error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// 根据数据库表主键批量删除OpenCompanyConnect
func (s *OpenCompanyConnectSvc) DeleteByIdsOpenCompanyConnect(req *proto.OpenCompanyConnectBatchDeleteRequest) (*proto.OpenCompanyConnectBatchDeleteRequest, error) {
	var err error
	for _, k := range req.Keys {
		t := orm.Use(iotmodel.GetDB()).TOpenCompanyConnect
		do := t.WithContext(context.Background())

		do = do.Where(t.Id.Eq(k.Id))

		_, err = do.Delete()
		if err != nil {
			logger.Errorf("DeleteByIdsOpenCompanyConnect error : %s", err.Error())
			break
		}
	}
	return req, err
}

// 根据主键更新OpenCompanyConnect
func (s *OpenCompanyConnectSvc) UpdateOpenCompanyConnect(req *proto.OpenCompanyConnect) (*proto.OpenCompanyConnect, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenCompanyConnect
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	if req.TenantId != "" { //整数
		updateField = append(updateField, t.TenantId)
	}
	if req.Name != "" { //字符串
		updateField = append(updateField, t.Name)
	}
	if req.Account != "" { //字符串
		updateField = append(updateField, t.Account)
	}
	if req.Phone != "" { //字符串
		updateField = append(updateField, t.Phone)
	}
	if req.Address != "" { //字符串
		updateField = append(updateField, t.Address)
	}
	if req.Job != "" { //字符串
		updateField = append(updateField, t.Job)
	}
	if req.CreatedBy != 0 { //整数
		updateField = append(updateField, t.CreatedBy)
	}
	if req.UpdatedBy != 0 { //整数
		updateField = append(updateField, t.UpdatedBy)
	}
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}

	if !HasPrimaryKey {
		logger.Error("UpdateOpenCompanyConnect error : Missing condition")
		return nil, errors.New("Missing condition")
	}

	dbObj := convert.OpenCompanyConnect_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateOpenCompanyConnect error : %s", err.Error())
		return nil, err
	}
	return req, err
}

// //根据主键更新所有字段OpenCompanyConnect
func (s *OpenCompanyConnectSvc) UpdateAllOpenCompanyConnect(req *proto.OpenCompanyConnect) (*proto.OpenCompanyConnect, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenCompanyConnect
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数
	//要更新的字段,不包括主键
	var updateField []field.Expr

	updateField = append(updateField, t.TenantId)
	updateField = append(updateField, t.Name)
	updateField = append(updateField, t.Account)
	updateField = append(updateField, t.Phone)
	updateField = append(updateField, t.Address)
	updateField = append(updateField, t.Job)
	updateField = append(updateField, t.CreatedBy)
	updateField = append(updateField, t.UpdatedBy)
	if len(updateField) > 0 {
		do = do.Select(updateField...)
	}
	//主键条件
	HasPrimaryKey := false
	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateAllOpenCompanyConnect error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpenCompanyConnect_pb2db(req)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateAllOpenCompanyConnect error : %s", err.Error())
		return nil, err
	}
	return req, err
}

func (s *OpenCompanyConnectSvc) UpdateFieldsOpenCompanyConnect(req *proto.OpenCompanyConnectUpdateFieldsRequest) (*proto.OpenCompanyConnect, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenCompanyConnect
	do := t.WithContext(context.Background())

	var updateField []field.Expr
	for _, v := range req.Fields {
		col, ok := t.GetFieldByName(v)
		if ok {
			updateField = append(updateField, col)
		}
	}
	if len(updateField) == 0 {
		err := errors.New("UpdateFieldsOpenCompanyConnect error : missing updateField")
		logger.Error(err)
		return nil, err
	}
	do = do.Select(updateField...)

	//主键条件
	HasPrimaryKey := false
	if req.Data.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Data.Id))
		HasPrimaryKey = true
	}
	if !HasPrimaryKey {
		logger.Error("UpdateFieldsOpenCompanyConnect error : Missing condition")
		return nil, errors.New("Missing condition")
	}
	dbObj := convert.OpenCompanyConnect_pb2db(req.Data)
	_, err := do.Updates(dbObj)
	if err != nil {
		logger.Errorf("UpdateFieldsOpenCompanyConnect error : %s", err.Error())
		return nil, err
	}
	return req.Data, nil
}

// 根据非空条件查找OpenCompanyConnect
func (s *OpenCompanyConnectSvc) FindOpenCompanyConnect(req *proto.OpenCompanyConnectFilter) (*proto.OpenCompanyConnect, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenCompanyConnect
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	if req.TenantId != "" { //整数
		do = do.Where(t.TenantId.Eq(req.TenantId))
	}
	if req.Name != "" { //字符串
		do = do.Where(t.Name.Eq(req.Name))
	}
	if req.Account != "" { //字符串
		do = do.Where(t.Account.Eq(req.Account))
	}
	if req.Phone != "" { //字符串
		do = do.Where(t.Phone.Eq(req.Phone))
	}
	if req.Address != "" { //字符串
		do = do.Where(t.Address.Eq(req.Address))
	}
	if req.Job != "" { //字符串
		do = do.Where(t.Job.Eq(req.Job))
	}
	if req.CreatedBy != 0 { //整数
		do = do.Where(t.CreatedBy.Eq(req.CreatedBy))
	}
	if req.UpdatedBy != 0 { //整数
		do = do.Where(t.UpdatedBy.Eq(req.UpdatedBy))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindOpenCompanyConnect error : %s", err.Error())
		return nil, err
	}
	res := convert.OpenCompanyConnect_db2pb(dbObj)
	return res, err
}

// 根据数据库表主键查找OpenCompanyConnect
func (s *OpenCompanyConnectSvc) FindByIdOpenCompanyConnect(req *proto.OpenCompanyConnectFilter) (*proto.OpenCompanyConnect, error) {
	t := orm.Use(iotmodel.GetDB()).TOpenCompanyConnect
	do := t.WithContext(context.Background())
	// fixme 请检查条件和校验参数

	if req.Id != 0 { //整数
		do = do.Where(t.Id.Eq(req.Id))
	}
	dbObj, err := do.First()
	if err != nil {
		logger.Errorf("FindByIdOpenCompanyConnect error : %s", err.Error())
		return nil, err
	}
	res := convert.OpenCompanyConnect_db2pb(dbObj)
	return res, err
}

// 根据分页条件查找OpenCompanyConnect,请确保req.Query的结构字段与数据表model结构体字段保持一致，否则会有编译问题
func (s *OpenCompanyConnectSvc) GetListOpenCompanyConnect(req *proto.OpenCompanyConnectListRequest) ([]*proto.OpenCompanyConnect, int64, error) {
	// fixme 请检查条件和校验参数
	var err error
	t := orm.Use(iotmodel.GetDB()).TOpenCompanyConnect
	do := t.WithContext(context.Background())
	query := req.Query
	if query != nil {

		if query.Id != 0 { //整数
			do = do.Where(t.Id.Eq(query.Id))
		}
		if query.TenantId != "" { //整数
			do = do.Where(t.TenantId.Eq(query.TenantId))
		}
		if query.Name != "" { //字符串
			do = do.Where(t.Name.Like("%" + query.Name + "%"))
		}
		if query.Account != "" { //字符串
			do = do.Where(t.Account.Like("%" + query.Account + "%"))
		}
		if query.Phone != "" { //字符串
			do = do.Where(t.Phone.Like("%" + query.Phone + "%"))
		}
		if query.Address != "" { //字符串
			do = do.Where(t.Address.Like("%" + query.Address + "%"))
		}
		if query.Job != "" { //字符串
			do = do.Where(t.Job.Like("%" + query.Job + "%"))
		}
		if query.CreatedBy != 0 { //整数
			do = do.Where(t.CreatedBy.Eq(query.CreatedBy))
		}
		if query.UpdatedBy != 0 { //整数
			do = do.Where(t.UpdatedBy.Eq(query.UpdatedBy))
		}
	}
	orderCol, ok := t.GetFieldByName(req.OrderKey)
	if !ok {
		orderCol = t.Id
	}
	if req.OrderDesc != "" {
		do = do.Order(orderCol.Desc())
	} else {
		do = do.Order(orderCol)
	}

	var list []*model.TOpenCompanyConnect
	var total int64
	if req.PageSize > 0 {
		limit := req.PageSize
		if req.Page == 0 {
			req.Page = 1
		}
		offset := req.PageSize * (req.Page - 1)
		list, total, err = do.FindByPage(int(offset), int(limit))
	} else {
		list, err = do.Find()
		total = int64(len(list))
	}
	if err != nil {
		logger.Errorf("GetListOpenCompanyConnect error : %s", err.Error())
		return nil, 0, err
	}
	if len(list) == 0 {
		return nil, total, nil
	}
	result := make([]*proto.OpenCompanyConnect, len(list))
	for i, v := range list {
		result[i] = convert.OpenCompanyConnect_db2pb(v)
	}
	return result, total, nil
}
