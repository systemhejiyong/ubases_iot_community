// Code generated by sgen.exe,2022-04-27 10:55:26. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"cloud_platform/iot_common/iotredis"
	"cloud_platform/iot_common/iotutil"
	"context"

	"cloud_platform/iot_open_system_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpenUserHandler struct{}

func (h *OpenUserHandler) Register(ctx context.Context, request *proto.OpenUserRegisterRequest, response *proto.OpenUserRegisterResponse) error {
	s := service.OpenUserSvc{Ctx: ctx}
	id, err := s.RegisterUser(request)
	if err != nil {
		response.Code = ERROR
		response.Message = err.Error()
	} else {
		response.Code = SUCCESS
		response.Message = "success"
		response.Data = id
	}
	return nil
}

func (h *OpenUserHandler) UpdatePassword(ctx context.Context, request *proto.OpenUserUpdatePasswordRequest, response *proto.Response) error {
	//TODO implement me
	panic("implement me")
}

func (h *OpenUserHandler) ForgetPassword(ctx context.Context, request *proto.OpenUserForgetPasswordRequest, response *proto.Response) error {
	//TODO implement me
	panic("implement me")
}

func (h *OpenUserHandler) SetLoginSafe(ctx context.Context, request *proto.OpenUserSetLoginSafeRequest, response *proto.Response) error {
	//TODO implement me
	panic("implement me")
}

func (h *OpenUserHandler) UpdateUserBasicInfo(ctx context.Context, request *proto.OpenUserUpdateBasicInfoRequest, response *proto.Response) error {
	//TODO implement me
	panic("implement me")
}

// 创建
func (h *OpenUserHandler) Create(ctx context.Context, req *proto.OpenUser, resp *proto.Response) error {
	s := service.OpenUserSvc{Ctx: ctx}
	_, err := s.CreateOpenUser(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *OpenUserHandler) Delete(ctx context.Context, req *proto.OpenUser, resp *proto.Response) error {
	s := service.OpenUserSvc{Ctx: ctx}
	_, err := s.DeleteOpenUser(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *OpenUserHandler) DeleteById(ctx context.Context, req *proto.OpenUser, resp *proto.Response) error {
	s := service.OpenUserSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpenUser(req)
	//删除在线记录，将所有在用户强制退出登录
	svc := service.OpenUserOnlineSvc{context.Background()}
	list, err := svc.GetOpenUserOnlines(iotutil.ToString(req.Id))
	if err == nil && list != nil && len(list) > 0 {
		keys := make([]string, 0)
		for _, l := range list {
			keys = append(keys, l.Token)
		}
		iotredis.GetClient().Del(context.Background(), keys...)
	}
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *OpenUserHandler) DeleteByIds(ctx context.Context, req *proto.OpenUserBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpenUserSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpenUser(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *OpenUserHandler) Update(ctx context.Context, req *proto.OpenUser, resp *proto.Response) error {
	s := service.OpenUserSvc{Ctx: ctx}
	_, err := s.UpdateOpenUser(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *OpenUserHandler) UpdateAll(ctx context.Context, req *proto.OpenUser, resp *proto.Response) error {
	s := service.OpenUserSvc{Ctx: ctx}
	_, err := s.UpdateAllOpenUser(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *OpenUserHandler) UpdateFields(ctx context.Context, req *proto.OpenUserUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpenUserSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpenUser(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *OpenUserHandler) Find(ctx context.Context, req *proto.OpenUserFilter, resp *proto.OpenUserResponse) error {
	s := service.OpenUserSvc{Ctx: ctx}
	data, err := s.FindOpenUser(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OpenUserHandler) FindById(ctx context.Context, req *proto.OpenUserFilter, resp *proto.OpenUserResponse) error {
	s := service.OpenUserSvc{Ctx: ctx}
	data, err := s.FindByIdOpenUser(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OpenUserHandler) Lists(ctx context.Context, req *proto.OpenUserListRequest, resp *proto.OpenUserResponse) error {
	s := service.OpenUserSvc{Ctx: ctx}
	data, total, err := s.GetListOpenUser(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *OpenUserHandler) SetResponse(resp *proto.OpenUserResponse, data *proto.OpenUser, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *OpenUserHandler) SetPageResponse(resp *proto.OpenUserResponse, list []*proto.OpenUser, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}

func (h *OpenUserHandler) GetRouters(ctx context.Context, req *proto.OpenUserPrimarykey, resp *proto.OpenUserMenuListRes) error {
	s := service.OpenUserSvc{Ctx: ctx}
	menulist, err := s.GetOpenUserRouters()
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.MenuTree = menulist
	}
	return nil
}
