// Code generated by sgen.exe,2022-04-27 10:55:26. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"cloud_platform/iot_common/iotredis"
	"context"

	"cloud_platform/iot_open_system_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpenUserOnlineHandler struct{}

// 创建
func (h *OpenUserOnlineHandler) Create(ctx context.Context, req *proto.OpenUserOnline, resp *proto.Response) error {
	s := service.OpenUserOnlineSvc{Ctx: ctx}
	_, err := s.CreateOpenUserOnline(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *OpenUserOnlineHandler) Delete(ctx context.Context, req *proto.OpenUserOnline, resp *proto.Response) error {
	s := service.OpenUserOnlineSvc{Ctx: ctx}
	//删除在线记录，将所有在用户强制退出登录
	svc := service.OpenUserOnlineSvc{context.Background()}
	userOnline, oerr := svc.FindOpenUserOnline(&proto.OpenUserOnlineFilter{Token: req.Token})
	if oerr == nil && userOnline != nil {
		keys := []string{userOnline.Token}
		iotredis.GetClient().Del(context.Background(), keys...)
	}
	_, err := s.DeleteOpenUserOnline(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *OpenUserOnlineHandler) DeleteById(ctx context.Context, req *proto.OpenUserOnline, resp *proto.Response) error {
	s := service.OpenUserOnlineSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpenUserOnline(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *OpenUserOnlineHandler) DeleteByIds(ctx context.Context, req *proto.OpenUserOnlineBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpenUserOnlineSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpenUserOnline(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *OpenUserOnlineHandler) Update(ctx context.Context, req *proto.OpenUserOnline, resp *proto.Response) error {
	s := service.OpenUserOnlineSvc{Ctx: ctx}
	_, err := s.UpdateOpenUserOnline(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *OpenUserOnlineHandler) UpdateAll(ctx context.Context, req *proto.OpenUserOnline, resp *proto.Response) error {
	s := service.OpenUserOnlineSvc{Ctx: ctx}
	_, err := s.UpdateAllOpenUserOnline(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *OpenUserOnlineHandler) UpdateFields(ctx context.Context, req *proto.OpenUserOnlineUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpenUserOnlineSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpenUserOnline(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *OpenUserOnlineHandler) Find(ctx context.Context, req *proto.OpenUserOnlineFilter, resp *proto.OpenUserOnlineResponse) error {
	s := service.OpenUserOnlineSvc{Ctx: ctx}
	data, err := s.FindOpenUserOnline(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OpenUserOnlineHandler) FindById(ctx context.Context, req *proto.OpenUserOnlineFilter, resp *proto.OpenUserOnlineResponse) error {
	s := service.OpenUserOnlineSvc{Ctx: ctx}
	data, err := s.FindByIdOpenUserOnline(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OpenUserOnlineHandler) Lists(ctx context.Context, req *proto.OpenUserOnlineListRequest, resp *proto.OpenUserOnlineResponse) error {
	s := service.OpenUserOnlineSvc{Ctx: ctx}
	data, total, err := s.GetListOpenUserOnline(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *OpenUserOnlineHandler) SetResponse(resp *proto.OpenUserOnlineResponse, data *proto.OpenUserOnline, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *OpenUserOnlineHandler) SetPageResponse(resp *proto.OpenUserOnlineResponse, list []*proto.OpenUserOnline, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}
