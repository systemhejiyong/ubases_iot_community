// Code generated by sgen.exe,2022-05-06 17:36:03. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

package handler

import (
	"context"

	"cloud_platform/iot_open_system_service/service"
	proto "cloud_platform/iot_proto/protos/protosService"
)

type OpenRoleHandler struct{}

// 创建
func (h *OpenRoleHandler) Create(ctx context.Context, req *proto.OpenRole, resp *proto.Response) error {
	s := service.OpenRoleSvc{Ctx: ctx}
	_, err := s.CreateOpenRole(req)
	SetResponse(resp, err)
	return nil
}

// 匹配多条件删除
func (h *OpenRoleHandler) Delete(ctx context.Context, req *proto.OpenRole, resp *proto.Response) error {
	s := service.OpenRoleSvc{Ctx: ctx}
	_, err := s.DeleteOpenRole(req)
	SetResponse(resp, err)
	return nil
}

// 匹配ID删除
func (h *OpenRoleHandler) DeleteById(ctx context.Context, req *proto.OpenRole, resp *proto.Response) error {
	s := service.OpenRoleSvc{Ctx: ctx}
	_, err := s.DeleteByIdOpenRole(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键批量删除
func (h *OpenRoleHandler) DeleteByIds(ctx context.Context, req *proto.OpenRoleBatchDeleteRequest, resp *proto.Response) error {
	s := service.OpenRoleSvc{Ctx: ctx}
	_, err := s.DeleteByIdsOpenRole(req)
	SetResponse(resp, err)
	return nil
}

// 更新
func (h *OpenRoleHandler) Update(ctx context.Context, req *proto.OpenRole, resp *proto.Response) error {
	s := service.OpenRoleSvc{Ctx: ctx}
	_, err := s.UpdateOpenRole(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新所有字段
func (h *OpenRoleHandler) UpdateAll(ctx context.Context, req *proto.OpenRole, resp *proto.Response) error {
	s := service.OpenRoleSvc{Ctx: ctx}
	_, err := s.UpdateAllOpenRole(req)
	SetResponse(resp, err)
	return nil
}

// 根据主键更新指定列
func (h *OpenRoleHandler) UpdateFields(ctx context.Context, req *proto.OpenRoleUpdateFieldsRequest, resp *proto.Response) error {
	s := service.OpenRoleSvc{Ctx: ctx}
	_, err := s.UpdateFieldsOpenRole(req)
	SetResponse(resp, err)
	return nil
}

// 多条件查找，返回单条数据
func (h *OpenRoleHandler) Find(ctx context.Context, req *proto.OpenRoleFilter, resp *proto.OpenRoleResponse) error {
	s := service.OpenRoleSvc{Ctx: ctx}
	data, err := s.FindOpenRole(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 根据ID查找，返回单条数据
func (h *OpenRoleHandler) FindById(ctx context.Context, req *proto.OpenRoleFilter, resp *proto.OpenRoleResponse) error {
	s := service.OpenRoleSvc{Ctx: ctx}
	data, err := s.FindByIdOpenRole(req)
	h.SetResponse(resp, data, err)
	return nil
}

// 查找，支持分页，可返回多条数据
func (h *OpenRoleHandler) Lists(ctx context.Context, req *proto.OpenRoleListRequest, resp *proto.OpenRoleResponse) error {
	s := service.OpenRoleSvc{Ctx: ctx}
	data, total, err := s.GetListOpenRole(req)
	h.SetPageResponse(resp, data, total, err)
	return nil
}

func (h *OpenRoleHandler) SetResponse(resp *proto.OpenRoleResponse, data *proto.OpenRole, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
		resp.Total = 0
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		if data != nil {
			resp.Total = 1
			resp.Data = append(resp.Data, data)
		}
	}
}

func (h *OpenRoleHandler) SetPageResponse(resp *proto.OpenRoleResponse, list []*proto.OpenRole, total int64, err error) {
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Total = total
		resp.Data = list
	}
}

// 角色新增
func (h *OpenRoleHandler) RoleAdd(ctx context.Context, req *proto.OpenRoleAddRequest, resp *proto.Response) error {
	s := service.OpenRoleSvc{Ctx: ctx}
	_, err := s.RoleAdd(req)
	SetResponse(resp, err)
	return nil
}

// 角色修改
func (h *OpenRoleHandler) RoleEdit(ctx context.Context, req *proto.OpenRoleEditRequest, resp *proto.Response) error {
	s := service.OpenRoleSvc{Ctx: ctx}
	_, err := s.RoleEdit(req)
	SetResponse(resp, err)
	return nil
}

// 角色详细
func (h *OpenRoleHandler) RoleDetail(ctx context.Context, req *proto.OpenRolePrimarykey, resp *proto.OpenRoleDetailResponse) error {
	s := service.OpenRoleSvc{Ctx: ctx}
	res, err := s.RoleDetail(req)
	if err != nil {
		resp.Code = ERROR
		resp.Message = err.Error()
	} else {
		resp.Code = SUCCESS
		resp.Message = "success"
		resp.Menuids = res.Menuids
		resp.Role = res.Role
	}
	return nil
}

// 给用户分配角色
func (h *OpenRoleHandler) RoleSetUser(ctx context.Context, req *proto.OpenRoleSetUserRequest, resp *proto.Response) error {
	s := service.OpenRoleSvc{Ctx: ctx}
	err := s.SetUserRole(req)
	SetResponse(resp, err)
	return nil
}
