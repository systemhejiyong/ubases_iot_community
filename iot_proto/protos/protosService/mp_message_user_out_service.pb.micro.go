// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: mp_message_user_out_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MpMessageUserOutService service

func NewMpMessageUserOutServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "MpMessageUserOutService.Create",
			Path:    []string{"/v1/mpMessageUserOut/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserOutService.Delete",
			Path:    []string{"/v1/mpMessageUserOut/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserOutService.DeleteById",
			Path:    []string{"/v1/mpMessageUserOut/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserOutService.DeleteByIds",
			Path:    []string{"/v1/mpMessageUserOut/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserOutService.Update",
			Path:    []string{"/v1/mpMessageUserOut/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserOutService.UpdateAll",
			Path:    []string{"/v1/mpMessageUserOut/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserOutService.UpdateFields",
			Path:    []string{"/v1/mpMessageUserOut/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserOutService.FindById",
			Path:    []string{"/v1/mpMessageUserOut/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserOutService.Find",
			Path:    []string{"/v1/mpMessageUserOut/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserOutService.Lists",
			Path:    []string{"/v1/mpMessageUserOut/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserOutService.GroupLists",
			Path:    []string{"/v1/mpMessageUserOut/groupLists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for MpMessageUserOutService service

type MpMessageUserOutService interface {
	//创建
	Create(ctx context.Context, in *MpMessageUserOut, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *MpMessageUserOut, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *MpMessageUserOut, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *MpMessageUserOutBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *MpMessageUserOut, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *MpMessageUserOut, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *MpMessageUserOutUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *MpMessageUserOutFilter, opts ...client.CallOption) (*MpMessageUserOutResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *MpMessageUserOutFilter, opts ...client.CallOption) (*MpMessageUserOutResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *MpMessageUserOutListRequest, opts ...client.CallOption) (*MpMessageUserOutResponse, error)
	//查找，支持分页，可返回多条数据
	GroupLists(ctx context.Context, in *MpMessageUserOutListRequest, opts ...client.CallOption) (*MpMessageUserOutGroupResponse, error)
}

type mpMessageUserOutService struct {
	c    client.Client
	name string
}

func NewMpMessageUserOutService(name string, c client.Client) MpMessageUserOutService {
	return &mpMessageUserOutService{
		c:    c,
		name: name,
	}
}

func (c *mpMessageUserOutService) Create(ctx context.Context, in *MpMessageUserOut, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserOutService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserOutService) Delete(ctx context.Context, in *MpMessageUserOut, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserOutService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserOutService) DeleteById(ctx context.Context, in *MpMessageUserOut, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserOutService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserOutService) DeleteByIds(ctx context.Context, in *MpMessageUserOutBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserOutService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserOutService) Update(ctx context.Context, in *MpMessageUserOut, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserOutService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserOutService) UpdateAll(ctx context.Context, in *MpMessageUserOut, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserOutService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserOutService) UpdateFields(ctx context.Context, in *MpMessageUserOutUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserOutService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserOutService) FindById(ctx context.Context, in *MpMessageUserOutFilter, opts ...client.CallOption) (*MpMessageUserOutResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserOutService.FindById", in)
	out := new(MpMessageUserOutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserOutService) Find(ctx context.Context, in *MpMessageUserOutFilter, opts ...client.CallOption) (*MpMessageUserOutResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserOutService.Find", in)
	out := new(MpMessageUserOutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserOutService) Lists(ctx context.Context, in *MpMessageUserOutListRequest, opts ...client.CallOption) (*MpMessageUserOutResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserOutService.Lists", in)
	out := new(MpMessageUserOutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserOutService) GroupLists(ctx context.Context, in *MpMessageUserOutListRequest, opts ...client.CallOption) (*MpMessageUserOutGroupResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserOutService.GroupLists", in)
	out := new(MpMessageUserOutGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MpMessageUserOutService service

type MpMessageUserOutServiceHandler interface {
	//创建
	Create(context.Context, *MpMessageUserOut, *Response) error
	//匹配多条件删除
	Delete(context.Context, *MpMessageUserOut, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *MpMessageUserOut, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *MpMessageUserOutBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *MpMessageUserOut, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *MpMessageUserOut, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *MpMessageUserOutUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *MpMessageUserOutFilter, *MpMessageUserOutResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *MpMessageUserOutFilter, *MpMessageUserOutResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *MpMessageUserOutListRequest, *MpMessageUserOutResponse) error
	//查找，支持分页，可返回多条数据
	GroupLists(context.Context, *MpMessageUserOutListRequest, *MpMessageUserOutGroupResponse) error
}

func RegisterMpMessageUserOutServiceHandler(s server.Server, hdlr MpMessageUserOutServiceHandler, opts ...server.HandlerOption) error {
	type mpMessageUserOutService interface {
		Create(ctx context.Context, in *MpMessageUserOut, out *Response) error
		Delete(ctx context.Context, in *MpMessageUserOut, out *Response) error
		DeleteById(ctx context.Context, in *MpMessageUserOut, out *Response) error
		DeleteByIds(ctx context.Context, in *MpMessageUserOutBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *MpMessageUserOut, out *Response) error
		UpdateAll(ctx context.Context, in *MpMessageUserOut, out *Response) error
		UpdateFields(ctx context.Context, in *MpMessageUserOutUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *MpMessageUserOutFilter, out *MpMessageUserOutResponse) error
		Find(ctx context.Context, in *MpMessageUserOutFilter, out *MpMessageUserOutResponse) error
		Lists(ctx context.Context, in *MpMessageUserOutListRequest, out *MpMessageUserOutResponse) error
		GroupLists(ctx context.Context, in *MpMessageUserOutListRequest, out *MpMessageUserOutGroupResponse) error
	}
	type MpMessageUserOutService struct {
		mpMessageUserOutService
	}
	h := &mpMessageUserOutServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserOutService.Create",
		Path:    []string{"/v1/mpMessageUserOut/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserOutService.Delete",
		Path:    []string{"/v1/mpMessageUserOut/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserOutService.DeleteById",
		Path:    []string{"/v1/mpMessageUserOut/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserOutService.DeleteByIds",
		Path:    []string{"/v1/mpMessageUserOut/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserOutService.Update",
		Path:    []string{"/v1/mpMessageUserOut/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserOutService.UpdateAll",
		Path:    []string{"/v1/mpMessageUserOut/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserOutService.UpdateFields",
		Path:    []string{"/v1/mpMessageUserOut/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserOutService.FindById",
		Path:    []string{"/v1/mpMessageUserOut/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserOutService.Find",
		Path:    []string{"/v1/mpMessageUserOut/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserOutService.Lists",
		Path:    []string{"/v1/mpMessageUserOut/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserOutService.GroupLists",
		Path:    []string{"/v1/mpMessageUserOut/groupLists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&MpMessageUserOutService{h}, opts...))
}

type mpMessageUserOutServiceHandler struct {
	MpMessageUserOutServiceHandler
}

func (h *mpMessageUserOutServiceHandler) Create(ctx context.Context, in *MpMessageUserOut, out *Response) error {
	return h.MpMessageUserOutServiceHandler.Create(ctx, in, out)
}

func (h *mpMessageUserOutServiceHandler) Delete(ctx context.Context, in *MpMessageUserOut, out *Response) error {
	return h.MpMessageUserOutServiceHandler.Delete(ctx, in, out)
}

func (h *mpMessageUserOutServiceHandler) DeleteById(ctx context.Context, in *MpMessageUserOut, out *Response) error {
	return h.MpMessageUserOutServiceHandler.DeleteById(ctx, in, out)
}

func (h *mpMessageUserOutServiceHandler) DeleteByIds(ctx context.Context, in *MpMessageUserOutBatchDeleteRequest, out *Response) error {
	return h.MpMessageUserOutServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *mpMessageUserOutServiceHandler) Update(ctx context.Context, in *MpMessageUserOut, out *Response) error {
	return h.MpMessageUserOutServiceHandler.Update(ctx, in, out)
}

func (h *mpMessageUserOutServiceHandler) UpdateAll(ctx context.Context, in *MpMessageUserOut, out *Response) error {
	return h.MpMessageUserOutServiceHandler.UpdateAll(ctx, in, out)
}

func (h *mpMessageUserOutServiceHandler) UpdateFields(ctx context.Context, in *MpMessageUserOutUpdateFieldsRequest, out *Response) error {
	return h.MpMessageUserOutServiceHandler.UpdateFields(ctx, in, out)
}

func (h *mpMessageUserOutServiceHandler) FindById(ctx context.Context, in *MpMessageUserOutFilter, out *MpMessageUserOutResponse) error {
	return h.MpMessageUserOutServiceHandler.FindById(ctx, in, out)
}

func (h *mpMessageUserOutServiceHandler) Find(ctx context.Context, in *MpMessageUserOutFilter, out *MpMessageUserOutResponse) error {
	return h.MpMessageUserOutServiceHandler.Find(ctx, in, out)
}

func (h *mpMessageUserOutServiceHandler) Lists(ctx context.Context, in *MpMessageUserOutListRequest, out *MpMessageUserOutResponse) error {
	return h.MpMessageUserOutServiceHandler.Lists(ctx, in, out)
}

func (h *mpMessageUserOutServiceHandler) GroupLists(ctx context.Context, in *MpMessageUserOutListRequest, out *MpMessageUserOutGroupResponse) error {
	return h.MpMessageUserOutServiceHandler.GroupLists(ctx, in, out)
}
