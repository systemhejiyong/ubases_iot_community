// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: opm_product_module_relation_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpmProductModuleRelationService service

func NewOpmProductModuleRelationServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpmProductModuleRelationService.Create",
			Path:    []string{"/v1/opmProductModuleRelation/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductModuleRelationService.BatchCreate",
			Path:    []string{"/v1/opmProductModuleRelation/batchCreate"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductModuleRelationService.Delete",
			Path:    []string{"/v1/opmProductModuleRelation/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductModuleRelationService.DeleteById",
			Path:    []string{"/v1/opmProductModuleRelation/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductModuleRelationService.DeleteByIds",
			Path:    []string{"/v1/opmProductModuleRelation/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductModuleRelationService.Update",
			Path:    []string{"/v1/opmProductModuleRelation/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductModuleRelationService.UpdateAll",
			Path:    []string{"/v1/opmProductModuleRelation/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductModuleRelationService.UpdateFields",
			Path:    []string{"/v1/opmProductModuleRelation/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductModuleRelationService.FindById",
			Path:    []string{"/v1/opmProductModuleRelation/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductModuleRelationService.Find",
			Path:    []string{"/v1/opmProductModuleRelation/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductModuleRelationService.Lists",
			Path:    []string{"/v1/opmProductModuleRelation/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductModuleRelationService.QueryProductFirmwareList",
			Path:    []string{"/v1/opmProductModuleRelation/queryProductFirmwareList"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductModuleRelationService.QueryProductFirmwareVersionList",
			Path:    []string{"/v1/opmProductModuleRelation/queryProductFirmwareVersionList"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductModuleRelationService.ChangeOpmProductModuleRelation",
			Path:    []string{"/v1/opmProductModuleRelation/changeVersion"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpmProductModuleRelationService service

type OpmProductModuleRelationService interface {
	//创建
	Create(ctx context.Context, in *OpmProductModuleRelation, opts ...client.CallOption) (*Response, error)
	//批量创建
	BatchCreate(ctx context.Context, in *OpmProductModuleRelationList, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpmProductModuleRelation, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpmProductModuleRelation, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpmProductModuleRelationBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpmProductModuleRelation, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpmProductModuleRelation, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpmProductModuleRelationUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpmProductModuleRelationFilter, opts ...client.CallOption) (*OpmProductModuleRelationResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpmProductModuleRelationFilter, opts ...client.CallOption) (*OpmProductModuleRelationResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpmProductModuleRelationListRequest, opts ...client.CallOption) (*OpmProductModuleRelationResponse, error)
	//查询固件列表
	QueryProductFirmwareList(ctx context.Context, in *ProductFirmwareFilter, opts ...client.CallOption) (*ProductFirmwareResponse, error)
	//查询固件版本列表
	QueryProductFirmwareVersionList(ctx context.Context, in *ProductFirmwareVersionFilter, opts ...client.CallOption) (*ProductFirmwareResponse, error)
	//切换版本
	ChangeOpmProductModuleRelation(ctx context.Context, in *OpmProductModuleRelationChangeVersion, opts ...client.CallOption) (*Response, error)
}

type opmProductModuleRelationService struct {
	c    client.Client
	name string
}

func NewOpmProductModuleRelationService(name string, c client.Client) OpmProductModuleRelationService {
	return &opmProductModuleRelationService{
		c:    c,
		name: name,
	}
}

func (c *opmProductModuleRelationService) Create(ctx context.Context, in *OpmProductModuleRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductModuleRelationService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductModuleRelationService) BatchCreate(ctx context.Context, in *OpmProductModuleRelationList, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductModuleRelationService.BatchCreate", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductModuleRelationService) Delete(ctx context.Context, in *OpmProductModuleRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductModuleRelationService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductModuleRelationService) DeleteById(ctx context.Context, in *OpmProductModuleRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductModuleRelationService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductModuleRelationService) DeleteByIds(ctx context.Context, in *OpmProductModuleRelationBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductModuleRelationService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductModuleRelationService) Update(ctx context.Context, in *OpmProductModuleRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductModuleRelationService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductModuleRelationService) UpdateAll(ctx context.Context, in *OpmProductModuleRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductModuleRelationService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductModuleRelationService) UpdateFields(ctx context.Context, in *OpmProductModuleRelationUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductModuleRelationService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductModuleRelationService) FindById(ctx context.Context, in *OpmProductModuleRelationFilter, opts ...client.CallOption) (*OpmProductModuleRelationResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductModuleRelationService.FindById", in)
	out := new(OpmProductModuleRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductModuleRelationService) Find(ctx context.Context, in *OpmProductModuleRelationFilter, opts ...client.CallOption) (*OpmProductModuleRelationResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductModuleRelationService.Find", in)
	out := new(OpmProductModuleRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductModuleRelationService) Lists(ctx context.Context, in *OpmProductModuleRelationListRequest, opts ...client.CallOption) (*OpmProductModuleRelationResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductModuleRelationService.Lists", in)
	out := new(OpmProductModuleRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductModuleRelationService) QueryProductFirmwareList(ctx context.Context, in *ProductFirmwareFilter, opts ...client.CallOption) (*ProductFirmwareResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductModuleRelationService.QueryProductFirmwareList", in)
	out := new(ProductFirmwareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductModuleRelationService) QueryProductFirmwareVersionList(ctx context.Context, in *ProductFirmwareVersionFilter, opts ...client.CallOption) (*ProductFirmwareResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductModuleRelationService.QueryProductFirmwareVersionList", in)
	out := new(ProductFirmwareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductModuleRelationService) ChangeOpmProductModuleRelation(ctx context.Context, in *OpmProductModuleRelationChangeVersion, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductModuleRelationService.ChangeOpmProductModuleRelation", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpmProductModuleRelationService service

type OpmProductModuleRelationServiceHandler interface {
	//创建
	Create(context.Context, *OpmProductModuleRelation, *Response) error
	//批量创建
	BatchCreate(context.Context, *OpmProductModuleRelationList, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpmProductModuleRelation, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpmProductModuleRelation, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpmProductModuleRelationBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpmProductModuleRelation, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpmProductModuleRelation, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpmProductModuleRelationUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpmProductModuleRelationFilter, *OpmProductModuleRelationResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpmProductModuleRelationFilter, *OpmProductModuleRelationResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpmProductModuleRelationListRequest, *OpmProductModuleRelationResponse) error
	//查询固件列表
	QueryProductFirmwareList(context.Context, *ProductFirmwareFilter, *ProductFirmwareResponse) error
	//查询固件版本列表
	QueryProductFirmwareVersionList(context.Context, *ProductFirmwareVersionFilter, *ProductFirmwareResponse) error
	//切换版本
	ChangeOpmProductModuleRelation(context.Context, *OpmProductModuleRelationChangeVersion, *Response) error
}

func RegisterOpmProductModuleRelationServiceHandler(s server.Server, hdlr OpmProductModuleRelationServiceHandler, opts ...server.HandlerOption) error {
	type opmProductModuleRelationService interface {
		Create(ctx context.Context, in *OpmProductModuleRelation, out *Response) error
		BatchCreate(ctx context.Context, in *OpmProductModuleRelationList, out *Response) error
		Delete(ctx context.Context, in *OpmProductModuleRelation, out *Response) error
		DeleteById(ctx context.Context, in *OpmProductModuleRelation, out *Response) error
		DeleteByIds(ctx context.Context, in *OpmProductModuleRelationBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpmProductModuleRelation, out *Response) error
		UpdateAll(ctx context.Context, in *OpmProductModuleRelation, out *Response) error
		UpdateFields(ctx context.Context, in *OpmProductModuleRelationUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpmProductModuleRelationFilter, out *OpmProductModuleRelationResponse) error
		Find(ctx context.Context, in *OpmProductModuleRelationFilter, out *OpmProductModuleRelationResponse) error
		Lists(ctx context.Context, in *OpmProductModuleRelationListRequest, out *OpmProductModuleRelationResponse) error
		QueryProductFirmwareList(ctx context.Context, in *ProductFirmwareFilter, out *ProductFirmwareResponse) error
		QueryProductFirmwareVersionList(ctx context.Context, in *ProductFirmwareVersionFilter, out *ProductFirmwareResponse) error
		ChangeOpmProductModuleRelation(ctx context.Context, in *OpmProductModuleRelationChangeVersion, out *Response) error
	}
	type OpmProductModuleRelationService struct {
		opmProductModuleRelationService
	}
	h := &opmProductModuleRelationServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductModuleRelationService.Create",
		Path:    []string{"/v1/opmProductModuleRelation/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductModuleRelationService.BatchCreate",
		Path:    []string{"/v1/opmProductModuleRelation/batchCreate"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductModuleRelationService.Delete",
		Path:    []string{"/v1/opmProductModuleRelation/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductModuleRelationService.DeleteById",
		Path:    []string{"/v1/opmProductModuleRelation/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductModuleRelationService.DeleteByIds",
		Path:    []string{"/v1/opmProductModuleRelation/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductModuleRelationService.Update",
		Path:    []string{"/v1/opmProductModuleRelation/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductModuleRelationService.UpdateAll",
		Path:    []string{"/v1/opmProductModuleRelation/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductModuleRelationService.UpdateFields",
		Path:    []string{"/v1/opmProductModuleRelation/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductModuleRelationService.FindById",
		Path:    []string{"/v1/opmProductModuleRelation/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductModuleRelationService.Find",
		Path:    []string{"/v1/opmProductModuleRelation/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductModuleRelationService.Lists",
		Path:    []string{"/v1/opmProductModuleRelation/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductModuleRelationService.QueryProductFirmwareList",
		Path:    []string{"/v1/opmProductModuleRelation/queryProductFirmwareList"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductModuleRelationService.QueryProductFirmwareVersionList",
		Path:    []string{"/v1/opmProductModuleRelation/queryProductFirmwareVersionList"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductModuleRelationService.ChangeOpmProductModuleRelation",
		Path:    []string{"/v1/opmProductModuleRelation/changeVersion"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpmProductModuleRelationService{h}, opts...))
}

type opmProductModuleRelationServiceHandler struct {
	OpmProductModuleRelationServiceHandler
}

func (h *opmProductModuleRelationServiceHandler) Create(ctx context.Context, in *OpmProductModuleRelation, out *Response) error {
	return h.OpmProductModuleRelationServiceHandler.Create(ctx, in, out)
}

func (h *opmProductModuleRelationServiceHandler) BatchCreate(ctx context.Context, in *OpmProductModuleRelationList, out *Response) error {
	return h.OpmProductModuleRelationServiceHandler.BatchCreate(ctx, in, out)
}

func (h *opmProductModuleRelationServiceHandler) Delete(ctx context.Context, in *OpmProductModuleRelation, out *Response) error {
	return h.OpmProductModuleRelationServiceHandler.Delete(ctx, in, out)
}

func (h *opmProductModuleRelationServiceHandler) DeleteById(ctx context.Context, in *OpmProductModuleRelation, out *Response) error {
	return h.OpmProductModuleRelationServiceHandler.DeleteById(ctx, in, out)
}

func (h *opmProductModuleRelationServiceHandler) DeleteByIds(ctx context.Context, in *OpmProductModuleRelationBatchDeleteRequest, out *Response) error {
	return h.OpmProductModuleRelationServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *opmProductModuleRelationServiceHandler) Update(ctx context.Context, in *OpmProductModuleRelation, out *Response) error {
	return h.OpmProductModuleRelationServiceHandler.Update(ctx, in, out)
}

func (h *opmProductModuleRelationServiceHandler) UpdateAll(ctx context.Context, in *OpmProductModuleRelation, out *Response) error {
	return h.OpmProductModuleRelationServiceHandler.UpdateAll(ctx, in, out)
}

func (h *opmProductModuleRelationServiceHandler) UpdateFields(ctx context.Context, in *OpmProductModuleRelationUpdateFieldsRequest, out *Response) error {
	return h.OpmProductModuleRelationServiceHandler.UpdateFields(ctx, in, out)
}

func (h *opmProductModuleRelationServiceHandler) FindById(ctx context.Context, in *OpmProductModuleRelationFilter, out *OpmProductModuleRelationResponse) error {
	return h.OpmProductModuleRelationServiceHandler.FindById(ctx, in, out)
}

func (h *opmProductModuleRelationServiceHandler) Find(ctx context.Context, in *OpmProductModuleRelationFilter, out *OpmProductModuleRelationResponse) error {
	return h.OpmProductModuleRelationServiceHandler.Find(ctx, in, out)
}

func (h *opmProductModuleRelationServiceHandler) Lists(ctx context.Context, in *OpmProductModuleRelationListRequest, out *OpmProductModuleRelationResponse) error {
	return h.OpmProductModuleRelationServiceHandler.Lists(ctx, in, out)
}

func (h *opmProductModuleRelationServiceHandler) QueryProductFirmwareList(ctx context.Context, in *ProductFirmwareFilter, out *ProductFirmwareResponse) error {
	return h.OpmProductModuleRelationServiceHandler.QueryProductFirmwareList(ctx, in, out)
}

func (h *opmProductModuleRelationServiceHandler) QueryProductFirmwareVersionList(ctx context.Context, in *ProductFirmwareVersionFilter, out *ProductFirmwareResponse) error {
	return h.OpmProductModuleRelationServiceHandler.QueryProductFirmwareVersionList(ctx, in, out)
}

func (h *opmProductModuleRelationServiceHandler) ChangeOpmProductModuleRelation(ctx context.Context, in *OpmProductModuleRelationChangeVersion, out *Response) error {
	return h.OpmProductModuleRelationServiceHandler.ChangeOpmProductModuleRelation(ctx, in, out)
}
