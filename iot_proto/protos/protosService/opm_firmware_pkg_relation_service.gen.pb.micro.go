// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: opm_firmware_pkg_relation_service.gen.proto

package protosService

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpmFirmwarePkgRelationService service

func NewOpmFirmwarePkgRelationServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "OpmFirmwarePkgRelationService.Create",
			Path:    []string{"/v1/opmFirmwarePkgRelation/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "OpmFirmwarePkgRelationService.Delete",
			Path:    []string{"/v1/opmFirmwarePkgRelation/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "OpmFirmwarePkgRelationService.DeleteById",
			Path:    []string{"/v1/opmFirmwarePkgRelation/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "OpmFirmwarePkgRelationService.DeleteByIds",
			Path:    []string{"/v1/opmFirmwarePkgRelation/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "OpmFirmwarePkgRelationService.Update",
			Path:    []string{"/v1/opmFirmwarePkgRelation/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "OpmFirmwarePkgRelationService.UpdateAll",
			Path:    []string{"/v1/opmFirmwarePkgRelation/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "OpmFirmwarePkgRelationService.UpdateFields",
			Path:    []string{"/v1/opmFirmwarePkgRelation/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "OpmFirmwarePkgRelationService.FindById",
			Path:    []string{"/v1/opmFirmwarePkgRelation/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "OpmFirmwarePkgRelationService.Find",
			Path:    []string{"/v1/opmFirmwarePkgRelation/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "OpmFirmwarePkgRelationService.Lists",
			Path:    []string{"/v1/opmFirmwarePkgRelation/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpmFirmwarePkgRelationService service

type OpmFirmwarePkgRelationService interface {
	//创建
	Create(ctx context.Context, in *OpmFirmwarePkgRelation, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpmFirmwarePkgRelation, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpmFirmwarePkgRelation, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpmFirmwarePkgRelationBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpmFirmwarePkgRelation, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpmFirmwarePkgRelation, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpmFirmwarePkgRelationUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpmFirmwarePkgRelationFilter, opts ...client.CallOption) (*OpmFirmwarePkgRelationResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpmFirmwarePkgRelationFilter, opts ...client.CallOption) (*OpmFirmwarePkgRelationResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpmFirmwarePkgRelationListRequest, opts ...client.CallOption) (*OpmFirmwarePkgRelationResponse, error)
}

type opmFirmwarePkgRelationService struct {
	c    client.Client
	name string
}

func NewOpmFirmwarePkgRelationService(name string, c client.Client) OpmFirmwarePkgRelationService {
	return &opmFirmwarePkgRelationService{
		c:    c,
		name: name,
	}
}

func (c *opmFirmwarePkgRelationService) Create(ctx context.Context, in *OpmFirmwarePkgRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwarePkgRelationService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwarePkgRelationService) Delete(ctx context.Context, in *OpmFirmwarePkgRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwarePkgRelationService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwarePkgRelationService) DeleteById(ctx context.Context, in *OpmFirmwarePkgRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwarePkgRelationService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwarePkgRelationService) DeleteByIds(ctx context.Context, in *OpmFirmwarePkgRelationBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwarePkgRelationService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwarePkgRelationService) Update(ctx context.Context, in *OpmFirmwarePkgRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwarePkgRelationService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwarePkgRelationService) UpdateAll(ctx context.Context, in *OpmFirmwarePkgRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwarePkgRelationService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwarePkgRelationService) UpdateFields(ctx context.Context, in *OpmFirmwarePkgRelationUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwarePkgRelationService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwarePkgRelationService) FindById(ctx context.Context, in *OpmFirmwarePkgRelationFilter, opts ...client.CallOption) (*OpmFirmwarePkgRelationResponse, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwarePkgRelationService.FindById", in)
	out := new(OpmFirmwarePkgRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwarePkgRelationService) Find(ctx context.Context, in *OpmFirmwarePkgRelationFilter, opts ...client.CallOption) (*OpmFirmwarePkgRelationResponse, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwarePkgRelationService.Find", in)
	out := new(OpmFirmwarePkgRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwarePkgRelationService) Lists(ctx context.Context, in *OpmFirmwarePkgRelationListRequest, opts ...client.CallOption) (*OpmFirmwarePkgRelationResponse, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwarePkgRelationService.Lists", in)
	out := new(OpmFirmwarePkgRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpmFirmwarePkgRelationService service

type OpmFirmwarePkgRelationServiceHandler interface {
	//创建
	Create(context.Context, *OpmFirmwarePkgRelation, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpmFirmwarePkgRelation, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpmFirmwarePkgRelation, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpmFirmwarePkgRelationBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpmFirmwarePkgRelation, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpmFirmwarePkgRelation, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpmFirmwarePkgRelationUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpmFirmwarePkgRelationFilter, *OpmFirmwarePkgRelationResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpmFirmwarePkgRelationFilter, *OpmFirmwarePkgRelationResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpmFirmwarePkgRelationListRequest, *OpmFirmwarePkgRelationResponse) error
}

func RegisterOpmFirmwarePkgRelationServiceHandler(s server.Server, hdlr OpmFirmwarePkgRelationServiceHandler, opts ...server.HandlerOption) error {
	type opmFirmwarePkgRelationService interface {
		Create(ctx context.Context, in *OpmFirmwarePkgRelation, out *Response) error
		Delete(ctx context.Context, in *OpmFirmwarePkgRelation, out *Response) error
		DeleteById(ctx context.Context, in *OpmFirmwarePkgRelation, out *Response) error
		DeleteByIds(ctx context.Context, in *OpmFirmwarePkgRelationBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpmFirmwarePkgRelation, out *Response) error
		UpdateAll(ctx context.Context, in *OpmFirmwarePkgRelation, out *Response) error
		UpdateFields(ctx context.Context, in *OpmFirmwarePkgRelationUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpmFirmwarePkgRelationFilter, out *OpmFirmwarePkgRelationResponse) error
		Find(ctx context.Context, in *OpmFirmwarePkgRelationFilter, out *OpmFirmwarePkgRelationResponse) error
		Lists(ctx context.Context, in *OpmFirmwarePkgRelationListRequest, out *OpmFirmwarePkgRelationResponse) error
	}
	type OpmFirmwarePkgRelationService struct {
		opmFirmwarePkgRelationService
	}
	h := &opmFirmwarePkgRelationServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwarePkgRelationService.Create",
		Path:    []string{"/v1/opmFirmwarePkgRelation/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwarePkgRelationService.Delete",
		Path:    []string{"/v1/opmFirmwarePkgRelation/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwarePkgRelationService.DeleteById",
		Path:    []string{"/v1/opmFirmwarePkgRelation/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwarePkgRelationService.DeleteByIds",
		Path:    []string{"/v1/opmFirmwarePkgRelation/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwarePkgRelationService.Update",
		Path:    []string{"/v1/opmFirmwarePkgRelation/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwarePkgRelationService.UpdateAll",
		Path:    []string{"/v1/opmFirmwarePkgRelation/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwarePkgRelationService.UpdateFields",
		Path:    []string{"/v1/opmFirmwarePkgRelation/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwarePkgRelationService.FindById",
		Path:    []string{"/v1/opmFirmwarePkgRelation/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwarePkgRelationService.Find",
		Path:    []string{"/v1/opmFirmwarePkgRelation/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwarePkgRelationService.Lists",
		Path:    []string{"/v1/opmFirmwarePkgRelation/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpmFirmwarePkgRelationService{h}, opts...))
}

type opmFirmwarePkgRelationServiceHandler struct {
	OpmFirmwarePkgRelationServiceHandler
}

func (h *opmFirmwarePkgRelationServiceHandler) Create(ctx context.Context, in *OpmFirmwarePkgRelation, out *Response) error {
	return h.OpmFirmwarePkgRelationServiceHandler.Create(ctx, in, out)
}

func (h *opmFirmwarePkgRelationServiceHandler) Delete(ctx context.Context, in *OpmFirmwarePkgRelation, out *Response) error {
	return h.OpmFirmwarePkgRelationServiceHandler.Delete(ctx, in, out)
}

func (h *opmFirmwarePkgRelationServiceHandler) DeleteById(ctx context.Context, in *OpmFirmwarePkgRelation, out *Response) error {
	return h.OpmFirmwarePkgRelationServiceHandler.DeleteById(ctx, in, out)
}

func (h *opmFirmwarePkgRelationServiceHandler) DeleteByIds(ctx context.Context, in *OpmFirmwarePkgRelationBatchDeleteRequest, out *Response) error {
	return h.OpmFirmwarePkgRelationServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *opmFirmwarePkgRelationServiceHandler) Update(ctx context.Context, in *OpmFirmwarePkgRelation, out *Response) error {
	return h.OpmFirmwarePkgRelationServiceHandler.Update(ctx, in, out)
}

func (h *opmFirmwarePkgRelationServiceHandler) UpdateAll(ctx context.Context, in *OpmFirmwarePkgRelation, out *Response) error {
	return h.OpmFirmwarePkgRelationServiceHandler.UpdateAll(ctx, in, out)
}

func (h *opmFirmwarePkgRelationServiceHandler) UpdateFields(ctx context.Context, in *OpmFirmwarePkgRelationUpdateFieldsRequest, out *Response) error {
	return h.OpmFirmwarePkgRelationServiceHandler.UpdateFields(ctx, in, out)
}

func (h *opmFirmwarePkgRelationServiceHandler) FindById(ctx context.Context, in *OpmFirmwarePkgRelationFilter, out *OpmFirmwarePkgRelationResponse) error {
	return h.OpmFirmwarePkgRelationServiceHandler.FindById(ctx, in, out)
}

func (h *opmFirmwarePkgRelationServiceHandler) Find(ctx context.Context, in *OpmFirmwarePkgRelationFilter, out *OpmFirmwarePkgRelationResponse) error {
	return h.OpmFirmwarePkgRelationServiceHandler.Find(ctx, in, out)
}

func (h *opmFirmwarePkgRelationServiceHandler) Lists(ctx context.Context, in *OpmFirmwarePkgRelationListRequest, out *OpmFirmwarePkgRelationResponse) error {
	return h.OpmFirmwarePkgRelationServiceHandler.Lists(ctx, in, out)
}
