// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pm_module_firmware_version_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PmModuleFirmwareVersionService service

func NewPmModuleFirmwareVersionServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "PmModuleFirmwareVersionService.Create",
			Path:    []string{"/v1/pmModuleFirmwareVersion/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmModuleFirmwareVersionService.Delete",
			Path:    []string{"/v1/pmModuleFirmwareVersion/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmModuleFirmwareVersionService.DeleteById",
			Path:    []string{"/v1/pmModuleFirmwareVersion/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmModuleFirmwareVersionService.DeleteByIds",
			Path:    []string{"/v1/pmModuleFirmwareVersion/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmModuleFirmwareVersionService.Update",
			Path:    []string{"/v1/pmModuleFirmwareVersion/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmModuleFirmwareVersionService.UpdateAll",
			Path:    []string{"/v1/pmModuleFirmwareVersion/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmModuleFirmwareVersionService.UpdateFields",
			Path:    []string{"/v1/pmModuleFirmwareVersion/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmModuleFirmwareVersionService.FindById",
			Path:    []string{"/v1/pmModuleFirmwareVersion/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmModuleFirmwareVersionService.Find",
			Path:    []string{"/v1/pmModuleFirmwareVersion/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmModuleFirmwareVersionService.Lists",
			Path:    []string{"/v1/pmModuleFirmwareVersion/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for PmModuleFirmwareVersionService service

type PmModuleFirmwareVersionService interface {
	//创建
	Create(ctx context.Context, in *PmModuleFirmwareVersion, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *PmModuleFirmwareVersion, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *PmModuleFirmwareVersion, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *PmModuleFirmwareVersionBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *PmModuleFirmwareVersion, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *PmModuleFirmwareVersion, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *PmModuleFirmwareVersionUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *PmModuleFirmwareVersionFilter, opts ...client.CallOption) (*PmModuleFirmwareVersionResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *PmModuleFirmwareVersionFilter, opts ...client.CallOption) (*PmModuleFirmwareVersionResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *PmModuleFirmwareVersionListRequest, opts ...client.CallOption) (*PmModuleFirmwareVersionResponse, error)
}

type pmModuleFirmwareVersionService struct {
	c    client.Client
	name string
}

func NewPmModuleFirmwareVersionService(name string, c client.Client) PmModuleFirmwareVersionService {
	return &pmModuleFirmwareVersionService{
		c:    c,
		name: name,
	}
}

func (c *pmModuleFirmwareVersionService) Create(ctx context.Context, in *PmModuleFirmwareVersion, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmModuleFirmwareVersionService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmModuleFirmwareVersionService) Delete(ctx context.Context, in *PmModuleFirmwareVersion, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmModuleFirmwareVersionService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmModuleFirmwareVersionService) DeleteById(ctx context.Context, in *PmModuleFirmwareVersion, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmModuleFirmwareVersionService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmModuleFirmwareVersionService) DeleteByIds(ctx context.Context, in *PmModuleFirmwareVersionBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmModuleFirmwareVersionService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmModuleFirmwareVersionService) Update(ctx context.Context, in *PmModuleFirmwareVersion, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmModuleFirmwareVersionService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmModuleFirmwareVersionService) UpdateAll(ctx context.Context, in *PmModuleFirmwareVersion, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmModuleFirmwareVersionService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmModuleFirmwareVersionService) UpdateFields(ctx context.Context, in *PmModuleFirmwareVersionUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmModuleFirmwareVersionService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmModuleFirmwareVersionService) FindById(ctx context.Context, in *PmModuleFirmwareVersionFilter, opts ...client.CallOption) (*PmModuleFirmwareVersionResponse, error) {
	req := c.c.NewRequest(c.name, "PmModuleFirmwareVersionService.FindById", in)
	out := new(PmModuleFirmwareVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmModuleFirmwareVersionService) Find(ctx context.Context, in *PmModuleFirmwareVersionFilter, opts ...client.CallOption) (*PmModuleFirmwareVersionResponse, error) {
	req := c.c.NewRequest(c.name, "PmModuleFirmwareVersionService.Find", in)
	out := new(PmModuleFirmwareVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmModuleFirmwareVersionService) Lists(ctx context.Context, in *PmModuleFirmwareVersionListRequest, opts ...client.CallOption) (*PmModuleFirmwareVersionResponse, error) {
	req := c.c.NewRequest(c.name, "PmModuleFirmwareVersionService.Lists", in)
	out := new(PmModuleFirmwareVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PmModuleFirmwareVersionService service

type PmModuleFirmwareVersionServiceHandler interface {
	//创建
	Create(context.Context, *PmModuleFirmwareVersion, *Response) error
	//匹配多条件删除
	Delete(context.Context, *PmModuleFirmwareVersion, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *PmModuleFirmwareVersion, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *PmModuleFirmwareVersionBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *PmModuleFirmwareVersion, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *PmModuleFirmwareVersion, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *PmModuleFirmwareVersionUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *PmModuleFirmwareVersionFilter, *PmModuleFirmwareVersionResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *PmModuleFirmwareVersionFilter, *PmModuleFirmwareVersionResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *PmModuleFirmwareVersionListRequest, *PmModuleFirmwareVersionResponse) error
}

func RegisterPmModuleFirmwareVersionServiceHandler(s server.Server, hdlr PmModuleFirmwareVersionServiceHandler, opts ...server.HandlerOption) error {
	type pmModuleFirmwareVersionService interface {
		Create(ctx context.Context, in *PmModuleFirmwareVersion, out *Response) error
		Delete(ctx context.Context, in *PmModuleFirmwareVersion, out *Response) error
		DeleteById(ctx context.Context, in *PmModuleFirmwareVersion, out *Response) error
		DeleteByIds(ctx context.Context, in *PmModuleFirmwareVersionBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *PmModuleFirmwareVersion, out *Response) error
		UpdateAll(ctx context.Context, in *PmModuleFirmwareVersion, out *Response) error
		UpdateFields(ctx context.Context, in *PmModuleFirmwareVersionUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *PmModuleFirmwareVersionFilter, out *PmModuleFirmwareVersionResponse) error
		Find(ctx context.Context, in *PmModuleFirmwareVersionFilter, out *PmModuleFirmwareVersionResponse) error
		Lists(ctx context.Context, in *PmModuleFirmwareVersionListRequest, out *PmModuleFirmwareVersionResponse) error
	}
	type PmModuleFirmwareVersionService struct {
		pmModuleFirmwareVersionService
	}
	h := &pmModuleFirmwareVersionServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmModuleFirmwareVersionService.Create",
		Path:    []string{"/v1/pmModuleFirmwareVersion/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmModuleFirmwareVersionService.Delete",
		Path:    []string{"/v1/pmModuleFirmwareVersion/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmModuleFirmwareVersionService.DeleteById",
		Path:    []string{"/v1/pmModuleFirmwareVersion/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmModuleFirmwareVersionService.DeleteByIds",
		Path:    []string{"/v1/pmModuleFirmwareVersion/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmModuleFirmwareVersionService.Update",
		Path:    []string{"/v1/pmModuleFirmwareVersion/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmModuleFirmwareVersionService.UpdateAll",
		Path:    []string{"/v1/pmModuleFirmwareVersion/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmModuleFirmwareVersionService.UpdateFields",
		Path:    []string{"/v1/pmModuleFirmwareVersion/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmModuleFirmwareVersionService.FindById",
		Path:    []string{"/v1/pmModuleFirmwareVersion/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmModuleFirmwareVersionService.Find",
		Path:    []string{"/v1/pmModuleFirmwareVersion/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmModuleFirmwareVersionService.Lists",
		Path:    []string{"/v1/pmModuleFirmwareVersion/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&PmModuleFirmwareVersionService{h}, opts...))
}

type pmModuleFirmwareVersionServiceHandler struct {
	PmModuleFirmwareVersionServiceHandler
}

func (h *pmModuleFirmwareVersionServiceHandler) Create(ctx context.Context, in *PmModuleFirmwareVersion, out *Response) error {
	return h.PmModuleFirmwareVersionServiceHandler.Create(ctx, in, out)
}

func (h *pmModuleFirmwareVersionServiceHandler) Delete(ctx context.Context, in *PmModuleFirmwareVersion, out *Response) error {
	return h.PmModuleFirmwareVersionServiceHandler.Delete(ctx, in, out)
}

func (h *pmModuleFirmwareVersionServiceHandler) DeleteById(ctx context.Context, in *PmModuleFirmwareVersion, out *Response) error {
	return h.PmModuleFirmwareVersionServiceHandler.DeleteById(ctx, in, out)
}

func (h *pmModuleFirmwareVersionServiceHandler) DeleteByIds(ctx context.Context, in *PmModuleFirmwareVersionBatchDeleteRequest, out *Response) error {
	return h.PmModuleFirmwareVersionServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *pmModuleFirmwareVersionServiceHandler) Update(ctx context.Context, in *PmModuleFirmwareVersion, out *Response) error {
	return h.PmModuleFirmwareVersionServiceHandler.Update(ctx, in, out)
}

func (h *pmModuleFirmwareVersionServiceHandler) UpdateAll(ctx context.Context, in *PmModuleFirmwareVersion, out *Response) error {
	return h.PmModuleFirmwareVersionServiceHandler.UpdateAll(ctx, in, out)
}

func (h *pmModuleFirmwareVersionServiceHandler) UpdateFields(ctx context.Context, in *PmModuleFirmwareVersionUpdateFieldsRequest, out *Response) error {
	return h.PmModuleFirmwareVersionServiceHandler.UpdateFields(ctx, in, out)
}

func (h *pmModuleFirmwareVersionServiceHandler) FindById(ctx context.Context, in *PmModuleFirmwareVersionFilter, out *PmModuleFirmwareVersionResponse) error {
	return h.PmModuleFirmwareVersionServiceHandler.FindById(ctx, in, out)
}

func (h *pmModuleFirmwareVersionServiceHandler) Find(ctx context.Context, in *PmModuleFirmwareVersionFilter, out *PmModuleFirmwareVersionResponse) error {
	return h.PmModuleFirmwareVersionServiceHandler.Find(ctx, in, out)
}

func (h *pmModuleFirmwareVersionServiceHandler) Lists(ctx context.Context, in *PmModuleFirmwareVersionListRequest, out *PmModuleFirmwareVersionResponse) error {
	return h.PmModuleFirmwareVersionServiceHandler.Lists(ctx, in, out)
}
