// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sys_app_doc_dir_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SysAppDocDirService service

func NewSysAppDocDirServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "SysAppDocDirService.Create",
			Path:    []string{"/v1/sysAppDocDir/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppDocDirService.Delete",
			Path:    []string{"/v1/sysAppDocDir/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppDocDirService.DeleteById",
			Path:    []string{"/v1/sysAppDocDir/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppDocDirService.DeleteByIds",
			Path:    []string{"/v1/sysAppDocDir/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppDocDirService.Update",
			Path:    []string{"/v1/sysAppDocDir/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppDocDirService.UpdateAll",
			Path:    []string{"/v1/sysAppDocDir/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppDocDirService.UpdateFields",
			Path:    []string{"/v1/sysAppDocDir/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppDocDirService.FindById",
			Path:    []string{"/v1/sysAppDocDir/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppDocDirService.Find",
			Path:    []string{"/v1/sysAppDocDir/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppDocDirService.Lists",
			Path:    []string{"/v1/sysAppDocDir/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppDocDirService.CreateBatch",
			Path:    []string{"/v1/sysAppDocDir/createBatch"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for SysAppDocDirService service

type SysAppDocDirService interface {
	//创建
	Create(ctx context.Context, in *SysAppDocDir, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *SysAppDocDir, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *SysAppDocDir, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *SysAppDocDirBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *SysAppDocDir, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *SysAppDocDir, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *SysAppDocDirUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *SysAppDocDirFilter, opts ...client.CallOption) (*SysAppDocDirResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *SysAppDocDirFilter, opts ...client.CallOption) (*SysAppDocDirResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *SysAppDocDirListRequest, opts ...client.CallOption) (*SysAppDocDirResponse, error)
	//批量创建
	CreateBatch(ctx context.Context, in *SysAppDocDirBatchRequest, opts ...client.CallOption) (*Response, error)
}

type sysAppDocDirService struct {
	c    client.Client
	name string
}

func NewSysAppDocDirService(name string, c client.Client) SysAppDocDirService {
	return &sysAppDocDirService{
		c:    c,
		name: name,
	}
}

func (c *sysAppDocDirService) Create(ctx context.Context, in *SysAppDocDir, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysAppDocDirService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppDocDirService) Delete(ctx context.Context, in *SysAppDocDir, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysAppDocDirService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppDocDirService) DeleteById(ctx context.Context, in *SysAppDocDir, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysAppDocDirService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppDocDirService) DeleteByIds(ctx context.Context, in *SysAppDocDirBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysAppDocDirService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppDocDirService) Update(ctx context.Context, in *SysAppDocDir, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysAppDocDirService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppDocDirService) UpdateAll(ctx context.Context, in *SysAppDocDir, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysAppDocDirService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppDocDirService) UpdateFields(ctx context.Context, in *SysAppDocDirUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysAppDocDirService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppDocDirService) FindById(ctx context.Context, in *SysAppDocDirFilter, opts ...client.CallOption) (*SysAppDocDirResponse, error) {
	req := c.c.NewRequest(c.name, "SysAppDocDirService.FindById", in)
	out := new(SysAppDocDirResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppDocDirService) Find(ctx context.Context, in *SysAppDocDirFilter, opts ...client.CallOption) (*SysAppDocDirResponse, error) {
	req := c.c.NewRequest(c.name, "SysAppDocDirService.Find", in)
	out := new(SysAppDocDirResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppDocDirService) Lists(ctx context.Context, in *SysAppDocDirListRequest, opts ...client.CallOption) (*SysAppDocDirResponse, error) {
	req := c.c.NewRequest(c.name, "SysAppDocDirService.Lists", in)
	out := new(SysAppDocDirResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppDocDirService) CreateBatch(ctx context.Context, in *SysAppDocDirBatchRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysAppDocDirService.CreateBatch", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SysAppDocDirService service

type SysAppDocDirServiceHandler interface {
	//创建
	Create(context.Context, *SysAppDocDir, *Response) error
	//匹配多条件删除
	Delete(context.Context, *SysAppDocDir, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *SysAppDocDir, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *SysAppDocDirBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *SysAppDocDir, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *SysAppDocDir, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *SysAppDocDirUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *SysAppDocDirFilter, *SysAppDocDirResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *SysAppDocDirFilter, *SysAppDocDirResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *SysAppDocDirListRequest, *SysAppDocDirResponse) error
	//批量创建
	CreateBatch(context.Context, *SysAppDocDirBatchRequest, *Response) error
}

func RegisterSysAppDocDirServiceHandler(s server.Server, hdlr SysAppDocDirServiceHandler, opts ...server.HandlerOption) error {
	type sysAppDocDirService interface {
		Create(ctx context.Context, in *SysAppDocDir, out *Response) error
		Delete(ctx context.Context, in *SysAppDocDir, out *Response) error
		DeleteById(ctx context.Context, in *SysAppDocDir, out *Response) error
		DeleteByIds(ctx context.Context, in *SysAppDocDirBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *SysAppDocDir, out *Response) error
		UpdateAll(ctx context.Context, in *SysAppDocDir, out *Response) error
		UpdateFields(ctx context.Context, in *SysAppDocDirUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *SysAppDocDirFilter, out *SysAppDocDirResponse) error
		Find(ctx context.Context, in *SysAppDocDirFilter, out *SysAppDocDirResponse) error
		Lists(ctx context.Context, in *SysAppDocDirListRequest, out *SysAppDocDirResponse) error
		CreateBatch(ctx context.Context, in *SysAppDocDirBatchRequest, out *Response) error
	}
	type SysAppDocDirService struct {
		sysAppDocDirService
	}
	h := &sysAppDocDirServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppDocDirService.Create",
		Path:    []string{"/v1/sysAppDocDir/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppDocDirService.Delete",
		Path:    []string{"/v1/sysAppDocDir/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppDocDirService.DeleteById",
		Path:    []string{"/v1/sysAppDocDir/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppDocDirService.DeleteByIds",
		Path:    []string{"/v1/sysAppDocDir/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppDocDirService.Update",
		Path:    []string{"/v1/sysAppDocDir/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppDocDirService.UpdateAll",
		Path:    []string{"/v1/sysAppDocDir/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppDocDirService.UpdateFields",
		Path:    []string{"/v1/sysAppDocDir/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppDocDirService.FindById",
		Path:    []string{"/v1/sysAppDocDir/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppDocDirService.Find",
		Path:    []string{"/v1/sysAppDocDir/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppDocDirService.Lists",
		Path:    []string{"/v1/sysAppDocDir/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppDocDirService.CreateBatch",
		Path:    []string{"/v1/sysAppDocDir/createBatch"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&SysAppDocDirService{h}, opts...))
}

type sysAppDocDirServiceHandler struct {
	SysAppDocDirServiceHandler
}

func (h *sysAppDocDirServiceHandler) Create(ctx context.Context, in *SysAppDocDir, out *Response) error {
	return h.SysAppDocDirServiceHandler.Create(ctx, in, out)
}

func (h *sysAppDocDirServiceHandler) Delete(ctx context.Context, in *SysAppDocDir, out *Response) error {
	return h.SysAppDocDirServiceHandler.Delete(ctx, in, out)
}

func (h *sysAppDocDirServiceHandler) DeleteById(ctx context.Context, in *SysAppDocDir, out *Response) error {
	return h.SysAppDocDirServiceHandler.DeleteById(ctx, in, out)
}

func (h *sysAppDocDirServiceHandler) DeleteByIds(ctx context.Context, in *SysAppDocDirBatchDeleteRequest, out *Response) error {
	return h.SysAppDocDirServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *sysAppDocDirServiceHandler) Update(ctx context.Context, in *SysAppDocDir, out *Response) error {
	return h.SysAppDocDirServiceHandler.Update(ctx, in, out)
}

func (h *sysAppDocDirServiceHandler) UpdateAll(ctx context.Context, in *SysAppDocDir, out *Response) error {
	return h.SysAppDocDirServiceHandler.UpdateAll(ctx, in, out)
}

func (h *sysAppDocDirServiceHandler) UpdateFields(ctx context.Context, in *SysAppDocDirUpdateFieldsRequest, out *Response) error {
	return h.SysAppDocDirServiceHandler.UpdateFields(ctx, in, out)
}

func (h *sysAppDocDirServiceHandler) FindById(ctx context.Context, in *SysAppDocDirFilter, out *SysAppDocDirResponse) error {
	return h.SysAppDocDirServiceHandler.FindById(ctx, in, out)
}

func (h *sysAppDocDirServiceHandler) Find(ctx context.Context, in *SysAppDocDirFilter, out *SysAppDocDirResponse) error {
	return h.SysAppDocDirServiceHandler.Find(ctx, in, out)
}

func (h *sysAppDocDirServiceHandler) Lists(ctx context.Context, in *SysAppDocDirListRequest, out *SysAppDocDirResponse) error {
	return h.SysAppDocDirServiceHandler.Lists(ctx, in, out)
}

func (h *sysAppDocDirServiceHandler) CreateBatch(ctx context.Context, in *SysAppDocDirBatchRequest, out *Response) error {
	return h.SysAppDocDirServiceHandler.CreateBatch(ctx, in, out)
}
