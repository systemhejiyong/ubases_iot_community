// Code generated by protoc,2022-05-20 13:36:03. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: scene_intelligence_model.proto

package protosService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//来源于数据表
type SceneIntelligence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:唯一主键;comment:唯一主键;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"type" gorm:"default:=1 一键执行任务 =2 自动化场景任务;comment:=1 一键执行任务 =2 自动化场景任务;size:10;"
	Type int32 `protobuf:"varint,101,opt,name=type,proto3" json:"type,omitempty"`
	// @inject_tag: json:"title" gorm:"default:标题;comment:标题;size:50;"
	Title string `protobuf:"bytes,102,opt,name=title,proto3" json:"title,omitempty"`
	// @inject_tag: json:"sortNo" gorm:"default:序号;comment:序号;"
	SortNo int32 `protobuf:"varint,103,opt,name=sortNo,proto3" json:"sortNo,omitempty"`
	// @inject_tag: json:"enableDisplay" gorm:"default:启用首页显示;comment:启用首页显示;"
	EnableDisplay int32 `protobuf:"varint,104,opt,name=enableDisplay,proto3" json:"enableDisplay,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态（=1 启用 =2 禁用）;comment:状态（=1 启用 =2 禁用）;"
	Status int32 `protobuf:"varint,105,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"runStatus" gorm:"default:运行状态 （ 1 待运行 2 运行中 2运行结束）;comment:运行状态 （ 1 待运行 2 运行中 2运行结束）;"
	RunStatus int32 `protobuf:"varint,106,opt,name=runStatus,proto3" json:"runStatus,omitempty"`
	// @inject_tag: json:"userId" gorm:"default:;comment:;size:19;"
	UserId int64 `protobuf:"varint,107,opt,name=userId,proto3" json:"userId,omitempty"`
	// @inject_tag: json:"homeId" gorm:"default:家庭编号;comment:家庭编号;size:19;"
	HomeId int64 `protobuf:"varint,108,opt,name=homeId,proto3" json:"homeId,omitempty"`
	// @inject_tag: json:"conditionMode" gorm:"default:条件模式 =1 所有条件满足 =2 任意条件满足;comment:条件模式 =1 所有条件满足 =2 任意条件满足;"
	ConditionMode int32 `protobuf:"varint,109,opt,name=conditionMode,proto3" json:"conditionMode,omitempty"`
	// @inject_tag: json:"styleIcon" gorm:"default:;comment:;size:50;"
	StyleIcon string `protobuf:"bytes,110,opt,name=styleIcon,proto3" json:"styleIcon,omitempty"`
	// @inject_tag: json:"styleColor" gorm:"default:;comment:;size:20;"
	StyleColor string `protobuf:"bytes,111,opt,name=styleColor,proto3" json:"styleColor,omitempty"`
	// @inject_tag: json:"styleImg" gorm:"default:背景图片;comment:背景图片;size:255;"
	StyleImg string `protobuf:"bytes,112,opt,name=styleImg,proto3" json:"styleImg,omitempty"`
	// @inject_tag: json:"effectTimeSwitch" gorm:"default:有效时间段开关;comment:有效时间段开关;"
	EffectTimeSwitch int32 `protobuf:"varint,113,opt,name=effectTimeSwitch,proto3" json:"effectTimeSwitch,omitempty"`
	// @inject_tag: json:"effectTimeDesc" gorm:"default:时间描述;comment:时间描述;size:50;"
	EffectTimeDesc string `protobuf:"bytes,114,opt,name=effectTimeDesc,proto3" json:"effectTimeDesc,omitempty"`
	// @inject_tag: json:"effectTimeWeeks" gorm:"default:周设置;comment:周设置;size:50;"
	EffectTimeWeeks string `protobuf:"bytes,115,opt,name=effectTimeWeeks,proto3" json:"effectTimeWeeks,omitempty"`
	// @inject_tag: json:"effectTimeStart" gorm:"default:有效开始时间（例如：01:12）;comment:有效开始时间（例如：01:12）;size:5;"
	EffectTimeStart string `protobuf:"bytes,116,opt,name=effectTimeStart,proto3" json:"effectTimeStart,omitempty"`
	// @inject_tag: json:"effectTimeEnd" gorm:"default:有效结束时间（例如：01:12）;comment:有效结束时间（例如：01:12）;size:5;"
	EffectTimeEnd string `protobuf:"bytes,117,opt,name=effectTimeEnd,proto3" json:"effectTimeEnd,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:20;"
	CreatedBy int64 `protobuf:"varint,118,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:20;"
	UpdatedBy int64 `protobuf:"varint,119,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,120,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,121,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除时间;comment:删除时间;"
	DeletedAt                  *timestamppb.Timestamp        `protobuf:"bytes,122,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	SceneIntelligenceTask      []*SceneIntelligenceTask      `protobuf:"bytes,123,rep,name=sceneIntelligenceTask,proto3" json:"sceneIntelligenceTask,omitempty"`
	SceneIntelligenceCondition []*SceneIntelligenceCondition `protobuf:"bytes,124,rep,name=sceneIntelligenceCondition,proto3" json:"sceneIntelligenceCondition,omitempty"`
	//排除智能Id
	IntelligenceId int64  `protobuf:"varint,125,opt,name=IntelligenceId,proto3" json:"IntelligenceId,omitempty"`
	TenantId       string `protobuf:"bytes,126,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	AppKey         string `protobuf:"bytes,127,opt,name=appKey,proto3" json:"appKey,omitempty"`
	//产品Key
	ProductKey string `protobuf:"bytes,128,opt,name=productKey,proto3" json:"productKey,omitempty"`
	//设备Id
	DeviceId string `protobuf:"bytes,129,opt,name=deviceId,proto3" json:"deviceId,omitempty"`
	//时区
	Timezone string `protobuf:"bytes,130,opt,name=timezone,proto3" json:"timezone,omitempty"`
	//区域服务器Id
	RegionServerId int64 `protobuf:"varint,131,opt,name=regionServerId,proto3" json:"regionServerId,omitempty"`
}

func (x *SceneIntelligence) Reset() {
	*x = SceneIntelligence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scene_intelligence_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneIntelligence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneIntelligence) ProtoMessage() {}

func (x *SceneIntelligence) ProtoReflect() protoreflect.Message {
	mi := &file_scene_intelligence_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneIntelligence.ProtoReflect.Descriptor instead.
func (*SceneIntelligence) Descriptor() ([]byte, []int) {
	return file_scene_intelligence_model_proto_rawDescGZIP(), []int{0}
}

func (x *SceneIntelligence) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SceneIntelligence) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SceneIntelligence) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SceneIntelligence) GetSortNo() int32 {
	if x != nil {
		return x.SortNo
	}
	return 0
}

func (x *SceneIntelligence) GetEnableDisplay() int32 {
	if x != nil {
		return x.EnableDisplay
	}
	return 0
}

func (x *SceneIntelligence) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SceneIntelligence) GetRunStatus() int32 {
	if x != nil {
		return x.RunStatus
	}
	return 0
}

func (x *SceneIntelligence) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SceneIntelligence) GetHomeId() int64 {
	if x != nil {
		return x.HomeId
	}
	return 0
}

func (x *SceneIntelligence) GetConditionMode() int32 {
	if x != nil {
		return x.ConditionMode
	}
	return 0
}

func (x *SceneIntelligence) GetStyleIcon() string {
	if x != nil {
		return x.StyleIcon
	}
	return ""
}

func (x *SceneIntelligence) GetStyleColor() string {
	if x != nil {
		return x.StyleColor
	}
	return ""
}

func (x *SceneIntelligence) GetStyleImg() string {
	if x != nil {
		return x.StyleImg
	}
	return ""
}

func (x *SceneIntelligence) GetEffectTimeSwitch() int32 {
	if x != nil {
		return x.EffectTimeSwitch
	}
	return 0
}

func (x *SceneIntelligence) GetEffectTimeDesc() string {
	if x != nil {
		return x.EffectTimeDesc
	}
	return ""
}

func (x *SceneIntelligence) GetEffectTimeWeeks() string {
	if x != nil {
		return x.EffectTimeWeeks
	}
	return ""
}

func (x *SceneIntelligence) GetEffectTimeStart() string {
	if x != nil {
		return x.EffectTimeStart
	}
	return ""
}

func (x *SceneIntelligence) GetEffectTimeEnd() string {
	if x != nil {
		return x.EffectTimeEnd
	}
	return ""
}

func (x *SceneIntelligence) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *SceneIntelligence) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *SceneIntelligence) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SceneIntelligence) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SceneIntelligence) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *SceneIntelligence) GetSceneIntelligenceTask() []*SceneIntelligenceTask {
	if x != nil {
		return x.SceneIntelligenceTask
	}
	return nil
}

func (x *SceneIntelligence) GetSceneIntelligenceCondition() []*SceneIntelligenceCondition {
	if x != nil {
		return x.SceneIntelligenceCondition
	}
	return nil
}

func (x *SceneIntelligence) GetIntelligenceId() int64 {
	if x != nil {
		return x.IntelligenceId
	}
	return 0
}

func (x *SceneIntelligence) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *SceneIntelligence) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *SceneIntelligence) GetProductKey() string {
	if x != nil {
		return x.ProductKey
	}
	return ""
}

func (x *SceneIntelligence) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *SceneIntelligence) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *SceneIntelligence) GetRegionServerId() int64 {
	if x != nil {
		return x.RegionServerId
	}
	return 0
}

type SceneIntelligenceFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:唯一主键;comment:唯一主键;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"type" gorm:"default:=1 一键执行任务 =2 自动化场景任务;comment:=1 一键执行任务 =2 自动化场景任务;size:10;"
	Type int32 `protobuf:"varint,101,opt,name=type,proto3" json:"type,omitempty"`
	// @inject_tag: json:"title" gorm:"default:标题;comment:标题;size:50;"
	Title string `protobuf:"bytes,102,opt,name=title,proto3" json:"title,omitempty"`
	// @inject_tag: json:"sortNo" gorm:"default:序号;comment:序号;"
	SortNo int32 `protobuf:"varint,103,opt,name=sortNo,proto3" json:"sortNo,omitempty"`
	// @inject_tag: json:"enableDisplay" gorm:"default:启用首页显示;comment:启用首页显示;"
	EnableDisplay int32 `protobuf:"varint,104,opt,name=enableDisplay,proto3" json:"enableDisplay,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态（=1 启用 =2 禁用）;comment:状态（=1 启用 =2 禁用）;"
	Status int32 `protobuf:"varint,105,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"runStatus" gorm:"default:运行状态 （ 1 待运行 2 运行中 2运行结束）;comment:运行状态 （ 1 待运行 2 运行中 2运行结束）;"
	RunStatus int32 `protobuf:"varint,106,opt,name=runStatus,proto3" json:"runStatus,omitempty"`
	// @inject_tag: json:"userId" gorm:"default:;comment:;size:19;"
	UserId int64 `protobuf:"varint,107,opt,name=userId,proto3" json:"userId,omitempty"`
	// @inject_tag: json:"homeId" gorm:"default:家庭编号;comment:家庭编号;size:19;"
	HomeId int64 `protobuf:"varint,108,opt,name=homeId,proto3" json:"homeId,omitempty"`
	// @inject_tag: json:"conditionMode" gorm:"default:条件模式 =1 所有条件满足 =2 任意条件满足;comment:条件模式 =1 所有条件满足 =2 任意条件满足;"
	ConditionMode int32 `protobuf:"varint,109,opt,name=conditionMode,proto3" json:"conditionMode,omitempty"`
	// @inject_tag: json:"styleIcon" gorm:"default:;comment:;size:50;"
	StyleIcon string `protobuf:"bytes,110,opt,name=styleIcon,proto3" json:"styleIcon,omitempty"`
	// @inject_tag: json:"styleColor" gorm:"default:;comment:;size:20;"
	StyleColor string `protobuf:"bytes,111,opt,name=styleColor,proto3" json:"styleColor,omitempty"`
	// @inject_tag: json:"styleImg" gorm:"default:背景图片;comment:背景图片;size:255;"
	StyleImg string `protobuf:"bytes,112,opt,name=styleImg,proto3" json:"styleImg,omitempty"`
	// @inject_tag: json:"effectTimeSwitch" gorm:"default:有效时间段开关;comment:有效时间段开关;"
	EffectTimeSwitch int32 `protobuf:"varint,113,opt,name=effectTimeSwitch,proto3" json:"effectTimeSwitch,omitempty"`
	// @inject_tag: json:"effectTimeDesc" gorm:"default:时间描述;comment:时间描述;size:50;"
	EffectTimeDesc string `protobuf:"bytes,114,opt,name=effectTimeDesc,proto3" json:"effectTimeDesc,omitempty"`
	// @inject_tag: json:"effectTimeWeeks" gorm:"default:周设置;comment:周设置;size:50;"
	EffectTimeWeeks string `protobuf:"bytes,115,opt,name=effectTimeWeeks,proto3" json:"effectTimeWeeks,omitempty"`
	// @inject_tag: json:"effectTimeStart" gorm:"default:有效开始时间（例如：01:12）;comment:有效开始时间（例如：01:12）;size:5;"
	EffectTimeStart string `protobuf:"bytes,116,opt,name=effectTimeStart,proto3" json:"effectTimeStart,omitempty"`
	// @inject_tag: json:"effectTimeEnd" gorm:"default:有效结束时间（例如：01:12）;comment:有效结束时间（例如：01:12）;size:5;"
	EffectTimeEnd string `protobuf:"bytes,117,opt,name=effectTimeEnd,proto3" json:"effectTimeEnd,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:20;"
	CreatedBy int64 `protobuf:"varint,118,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:20;"
	UpdatedBy int64 `protobuf:"varint,119,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,120,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,121,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除时间;comment:删除时间;"
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,122,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	TenantId  string                 `protobuf:"bytes,126,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	AppKey    string                 `protobuf:"bytes,127,opt,name=appKey,proto3" json:"appKey,omitempty"`
}

func (x *SceneIntelligenceFilter) Reset() {
	*x = SceneIntelligenceFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scene_intelligence_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneIntelligenceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneIntelligenceFilter) ProtoMessage() {}

func (x *SceneIntelligenceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_scene_intelligence_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneIntelligenceFilter.ProtoReflect.Descriptor instead.
func (*SceneIntelligenceFilter) Descriptor() ([]byte, []int) {
	return file_scene_intelligence_model_proto_rawDescGZIP(), []int{1}
}

func (x *SceneIntelligenceFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SceneIntelligenceFilter) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SceneIntelligenceFilter) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SceneIntelligenceFilter) GetSortNo() int32 {
	if x != nil {
		return x.SortNo
	}
	return 0
}

func (x *SceneIntelligenceFilter) GetEnableDisplay() int32 {
	if x != nil {
		return x.EnableDisplay
	}
	return 0
}

func (x *SceneIntelligenceFilter) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *SceneIntelligenceFilter) GetRunStatus() int32 {
	if x != nil {
		return x.RunStatus
	}
	return 0
}

func (x *SceneIntelligenceFilter) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SceneIntelligenceFilter) GetHomeId() int64 {
	if x != nil {
		return x.HomeId
	}
	return 0
}

func (x *SceneIntelligenceFilter) GetConditionMode() int32 {
	if x != nil {
		return x.ConditionMode
	}
	return 0
}

func (x *SceneIntelligenceFilter) GetStyleIcon() string {
	if x != nil {
		return x.StyleIcon
	}
	return ""
}

func (x *SceneIntelligenceFilter) GetStyleColor() string {
	if x != nil {
		return x.StyleColor
	}
	return ""
}

func (x *SceneIntelligenceFilter) GetStyleImg() string {
	if x != nil {
		return x.StyleImg
	}
	return ""
}

func (x *SceneIntelligenceFilter) GetEffectTimeSwitch() int32 {
	if x != nil {
		return x.EffectTimeSwitch
	}
	return 0
}

func (x *SceneIntelligenceFilter) GetEffectTimeDesc() string {
	if x != nil {
		return x.EffectTimeDesc
	}
	return ""
}

func (x *SceneIntelligenceFilter) GetEffectTimeWeeks() string {
	if x != nil {
		return x.EffectTimeWeeks
	}
	return ""
}

func (x *SceneIntelligenceFilter) GetEffectTimeStart() string {
	if x != nil {
		return x.EffectTimeStart
	}
	return ""
}

func (x *SceneIntelligenceFilter) GetEffectTimeEnd() string {
	if x != nil {
		return x.EffectTimeEnd
	}
	return ""
}

func (x *SceneIntelligenceFilter) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *SceneIntelligenceFilter) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *SceneIntelligenceFilter) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SceneIntelligenceFilter) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *SceneIntelligenceFilter) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *SceneIntelligenceFilter) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *SceneIntelligenceFilter) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

type SceneIntelligenceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *SceneIntelligence `protobuf:"bytes,101,opt,name=query,proto3" json:"query,omitempty"`
	Page      int64              `protobuf:"varint,102,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64              `protobuf:"varint,103,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderKey  string             `protobuf:"bytes,104,opt,name=orderKey,proto3" json:"orderKey,omitempty"`
	OrderDesc string             `protobuf:"bytes,105,opt,name=orderDesc,proto3" json:"orderDesc,omitempty"`
	SearchKey string             `protobuf:"bytes,106,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
}

func (x *SceneIntelligenceListRequest) Reset() {
	*x = SceneIntelligenceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scene_intelligence_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneIntelligenceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneIntelligenceListRequest) ProtoMessage() {}

func (x *SceneIntelligenceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scene_intelligence_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneIntelligenceListRequest.ProtoReflect.Descriptor instead.
func (*SceneIntelligenceListRequest) Descriptor() ([]byte, []int) {
	return file_scene_intelligence_model_proto_rawDescGZIP(), []int{2}
}

func (x *SceneIntelligenceListRequest) GetQuery() *SceneIntelligence {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SceneIntelligenceListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SceneIntelligenceListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SceneIntelligenceListRequest) GetOrderKey() string {
	if x != nil {
		return x.OrderKey
	}
	return ""
}

func (x *SceneIntelligenceListRequest) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *SceneIntelligenceListRequest) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

type SceneIntelligenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string               `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64                `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*SceneIntelligence `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SceneIntelligenceResponse) Reset() {
	*x = SceneIntelligenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scene_intelligence_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneIntelligenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneIntelligenceResponse) ProtoMessage() {}

func (x *SceneIntelligenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scene_intelligence_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneIntelligenceResponse.ProtoReflect.Descriptor instead.
func (*SceneIntelligenceResponse) Descriptor() ([]byte, []int) {
	return file_scene_intelligence_model_proto_rawDescGZIP(), []int{3}
}

func (x *SceneIntelligenceResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SceneIntelligenceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SceneIntelligenceResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SceneIntelligenceResponse) GetData() []*SceneIntelligence {
	if x != nil {
		return x.Data
	}
	return nil
}

type SceneIntelligenceUpdateFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string           `protobuf:"bytes,101,rep,name=fields,proto3" json:"fields,omitempty"`
	Data   *SceneIntelligence `protobuf:"bytes,102,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SceneIntelligenceUpdateFieldsRequest) Reset() {
	*x = SceneIntelligenceUpdateFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scene_intelligence_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneIntelligenceUpdateFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneIntelligenceUpdateFieldsRequest) ProtoMessage() {}

func (x *SceneIntelligenceUpdateFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scene_intelligence_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneIntelligenceUpdateFieldsRequest.ProtoReflect.Descriptor instead.
func (*SceneIntelligenceUpdateFieldsRequest) Descriptor() ([]byte, []int) {
	return file_scene_intelligence_model_proto_rawDescGZIP(), []int{4}
}

func (x *SceneIntelligenceUpdateFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SceneIntelligenceUpdateFieldsRequest) GetData() *SceneIntelligence {
	if x != nil {
		return x.Data
	}
	return nil
}

// 表模型主键，只能是整数或字符串，若生成错误，请检查数据库表主键是否正确。支持组合主键
type SceneIntelligencePrimarykey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SceneIntelligencePrimarykey) Reset() {
	*x = SceneIntelligencePrimarykey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scene_intelligence_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneIntelligencePrimarykey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneIntelligencePrimarykey) ProtoMessage() {}

func (x *SceneIntelligencePrimarykey) ProtoReflect() protoreflect.Message {
	mi := &file_scene_intelligence_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneIntelligencePrimarykey.ProtoReflect.Descriptor instead.
func (*SceneIntelligencePrimarykey) Descriptor() ([]byte, []int) {
	return file_scene_intelligence_model_proto_rawDescGZIP(), []int{5}
}

func (x *SceneIntelligencePrimarykey) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SceneIntelligenceBatchDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*SceneIntelligencePrimarykey `protobuf:"bytes,101,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *SceneIntelligenceBatchDeleteRequest) Reset() {
	*x = SceneIntelligenceBatchDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scene_intelligence_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneIntelligenceBatchDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneIntelligenceBatchDeleteRequest) ProtoMessage() {}

func (x *SceneIntelligenceBatchDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scene_intelligence_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneIntelligenceBatchDeleteRequest.ProtoReflect.Descriptor instead.
func (*SceneIntelligenceBatchDeleteRequest) Descriptor() ([]byte, []int) {
	return file_scene_intelligence_model_proto_rawDescGZIP(), []int{6}
}

func (x *SceneIntelligenceBatchDeleteRequest) GetKeys() []*SceneIntelligencePrimarykey {
	if x != nil {
		return x.Keys
	}
	return nil
}

var File_scene_intelligence_model_proto protoreflect.FileDescriptor

var file_scene_intelligence_model_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x73, 0x63, 0x65, 0x6e,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x09, 0x0a, 0x11, 0x53, 0x63,
	0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72,
	0x74, 0x4e, 0x6f, 0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x4e,
	0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x12, 0x2a, 0x0a,
	0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x18, 0x71, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x72, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x57,
	0x65, 0x65, 0x6b, 0x73, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x65,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x74,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x76, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x77, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x79,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x54, 0x0a, 0x15, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x7b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x15, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x63, 0x0a, 0x1a, 0x73,
	0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x7c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x7f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1b, 0x0a,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xe3, 0x06, 0x0a, 0x17, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x4e, 0x6f,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x4e, 0x6f, 0x12, 0x24,
	0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x6c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x68, 0x6f, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x6f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6d, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x71,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x28,
	0x0a, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x57, 0x65, 0x65, 0x6b,
	0x73, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x74, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x76, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x77, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x79, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x7e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x22, 0xd8, 0x01, 0x0a, 0x1c, 0x53, 0x63, 0x65, 0x6e, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65,
	0x79, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x68, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a, 0x24, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x2d, 0x0a, 0x1b, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b,
	0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x5f, 0x0a, 0x23, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scene_intelligence_model_proto_rawDescOnce sync.Once
	file_scene_intelligence_model_proto_rawDescData = file_scene_intelligence_model_proto_rawDesc
)

func file_scene_intelligence_model_proto_rawDescGZIP() []byte {
	file_scene_intelligence_model_proto_rawDescOnce.Do(func() {
		file_scene_intelligence_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_scene_intelligence_model_proto_rawDescData)
	})
	return file_scene_intelligence_model_proto_rawDescData
}

var file_scene_intelligence_model_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_scene_intelligence_model_proto_goTypes = []interface{}{
	(*SceneIntelligence)(nil),                    // 0: service.SceneIntelligence
	(*SceneIntelligenceFilter)(nil),              // 1: service.SceneIntelligenceFilter
	(*SceneIntelligenceListRequest)(nil),         // 2: service.SceneIntelligenceListRequest
	(*SceneIntelligenceResponse)(nil),            // 3: service.SceneIntelligenceResponse
	(*SceneIntelligenceUpdateFieldsRequest)(nil), // 4: service.SceneIntelligenceUpdateFieldsRequest
	(*SceneIntelligencePrimarykey)(nil),          // 5: service.SceneIntelligencePrimarykey
	(*SceneIntelligenceBatchDeleteRequest)(nil),  // 6: service.SceneIntelligenceBatchDeleteRequest
	(*timestamppb.Timestamp)(nil),                // 7: google.protobuf.Timestamp
	(*SceneIntelligenceTask)(nil),                // 8: service.SceneIntelligenceTask
	(*SceneIntelligenceCondition)(nil),           // 9: service.SceneIntelligenceCondition
}
var file_scene_intelligence_model_proto_depIdxs = []int32{
	7,  // 0: service.SceneIntelligence.createdAt:type_name -> google.protobuf.Timestamp
	7,  // 1: service.SceneIntelligence.updatedAt:type_name -> google.protobuf.Timestamp
	7,  // 2: service.SceneIntelligence.deletedAt:type_name -> google.protobuf.Timestamp
	8,  // 3: service.SceneIntelligence.sceneIntelligenceTask:type_name -> service.SceneIntelligenceTask
	9,  // 4: service.SceneIntelligence.sceneIntelligenceCondition:type_name -> service.SceneIntelligenceCondition
	7,  // 5: service.SceneIntelligenceFilter.createdAt:type_name -> google.protobuf.Timestamp
	7,  // 6: service.SceneIntelligenceFilter.updatedAt:type_name -> google.protobuf.Timestamp
	7,  // 7: service.SceneIntelligenceFilter.deletedAt:type_name -> google.protobuf.Timestamp
	0,  // 8: service.SceneIntelligenceListRequest.query:type_name -> service.SceneIntelligence
	0,  // 9: service.SceneIntelligenceResponse.data:type_name -> service.SceneIntelligence
	0,  // 10: service.SceneIntelligenceUpdateFieldsRequest.data:type_name -> service.SceneIntelligence
	5,  // 11: service.SceneIntelligenceBatchDeleteRequest.keys:type_name -> service.SceneIntelligencePrimarykey
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_scene_intelligence_model_proto_init() }
func file_scene_intelligence_model_proto_init() {
	if File_scene_intelligence_model_proto != nil {
		return
	}
	file_scene_intelligence_condition_model_proto_init()
	file_scene_intelligence_task_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_scene_intelligence_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneIntelligence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scene_intelligence_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneIntelligenceFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scene_intelligence_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneIntelligenceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scene_intelligence_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneIntelligenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scene_intelligence_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneIntelligenceUpdateFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scene_intelligence_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneIntelligencePrimarykey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scene_intelligence_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneIntelligenceBatchDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scene_intelligence_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scene_intelligence_model_proto_goTypes,
		DependencyIndexes: file_scene_intelligence_model_proto_depIdxs,
		MessageInfos:      file_scene_intelligence_model_proto_msgTypes,
	}.Build()
	File_scene_intelligence_model_proto = out.File
	file_scene_intelligence_model_proto_rawDesc = nil
	file_scene_intelligence_model_proto_goTypes = nil
	file_scene_intelligence_model_proto_depIdxs = nil
}
