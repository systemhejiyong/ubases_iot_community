// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: opm_documents_service.gen.proto

package protosService

import (
	fmt "fmt"
	math "math"

	proto "google.golang.org/protobuf/proto"

	context "context"

	api "go-micro.dev/v4/api"

	client "go-micro.dev/v4/client"

	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpmDocumentsService service

func NewOpmDocumentsServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpmDocumentsService.Create",
			Path:    []string{"/v1/opmDocuments/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmDocumentsService.Delete",
			Path:    []string{"/v1/opmDocuments/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmDocumentsService.DeleteById",
			Path:    []string{"/v1/opmDocuments/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmDocumentsService.DeleteByIds",
			Path:    []string{"/v1/opmDocuments/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmDocumentsService.Update",
			Path:    []string{"/v1/opmDocuments/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmDocumentsService.UpdateAll",
			Path:    []string{"/v1/opmDocuments/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmDocumentsService.UpdateFields",
			Path:    []string{"/v1/opmDocuments/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmDocumentsService.FindById",
			Path:    []string{"/v1/opmDocuments/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmDocumentsService.Find",
			Path:    []string{"/v1/opmDocuments/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmDocumentsService.Lists",
			Path:    []string{"/v1/opmDocuments/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpmDocumentsService service

type OpmDocumentsService interface {
	//创建
	Create(ctx context.Context, in *OpmDocuments, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpmDocuments, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpmDocuments, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpmDocumentsBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpmDocuments, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpmDocuments, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpmDocumentsUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpmDocumentsFilter, opts ...client.CallOption) (*OpmDocumentsResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpmDocumentsFilter, opts ...client.CallOption) (*OpmDocumentsResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpmDocumentsListRequest, opts ...client.CallOption) (*OpmDocumentsResponse, error)
}

type opmDocumentsService struct {
	c    client.Client
	name string
}

func NewOpmDocumentsService(name string, c client.Client) OpmDocumentsService {
	return &opmDocumentsService{
		c:    c,
		name: name,
	}
}

func (c *opmDocumentsService) Create(ctx context.Context, in *OpmDocuments, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmDocumentsService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmDocumentsService) Delete(ctx context.Context, in *OpmDocuments, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmDocumentsService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmDocumentsService) DeleteById(ctx context.Context, in *OpmDocuments, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmDocumentsService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmDocumentsService) DeleteByIds(ctx context.Context, in *OpmDocumentsBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmDocumentsService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmDocumentsService) Update(ctx context.Context, in *OpmDocuments, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmDocumentsService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmDocumentsService) UpdateAll(ctx context.Context, in *OpmDocuments, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmDocumentsService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmDocumentsService) UpdateFields(ctx context.Context, in *OpmDocumentsUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmDocumentsService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmDocumentsService) FindById(ctx context.Context, in *OpmDocumentsFilter, opts ...client.CallOption) (*OpmDocumentsResponse, error) {
	req := c.c.NewRequest(c.name, "OpmDocumentsService.FindById", in)
	out := new(OpmDocumentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmDocumentsService) Find(ctx context.Context, in *OpmDocumentsFilter, opts ...client.CallOption) (*OpmDocumentsResponse, error) {
	req := c.c.NewRequest(c.name, "OpmDocumentsService.Find", in)
	out := new(OpmDocumentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmDocumentsService) Lists(ctx context.Context, in *OpmDocumentsListRequest, opts ...client.CallOption) (*OpmDocumentsResponse, error) {
	req := c.c.NewRequest(c.name, "OpmDocumentsService.Lists", in)
	out := new(OpmDocumentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpmDocumentsService service

type OpmDocumentsServiceHandler interface {
	//创建
	Create(context.Context, *OpmDocuments, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpmDocuments, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpmDocuments, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpmDocumentsBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpmDocuments, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpmDocuments, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpmDocumentsUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpmDocumentsFilter, *OpmDocumentsResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpmDocumentsFilter, *OpmDocumentsResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpmDocumentsListRequest, *OpmDocumentsResponse) error
}

func RegisterOpmDocumentsServiceHandler(s server.Server, hdlr OpmDocumentsServiceHandler, opts ...server.HandlerOption) error {
	type opmDocumentsService interface {
		Create(ctx context.Context, in *OpmDocuments, out *Response) error
		Delete(ctx context.Context, in *OpmDocuments, out *Response) error
		DeleteById(ctx context.Context, in *OpmDocuments, out *Response) error
		DeleteByIds(ctx context.Context, in *OpmDocumentsBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpmDocuments, out *Response) error
		UpdateAll(ctx context.Context, in *OpmDocuments, out *Response) error
		UpdateFields(ctx context.Context, in *OpmDocumentsUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpmDocumentsFilter, out *OpmDocumentsResponse) error
		Find(ctx context.Context, in *OpmDocumentsFilter, out *OpmDocumentsResponse) error
		Lists(ctx context.Context, in *OpmDocumentsListRequest, out *OpmDocumentsResponse) error
	}
	type OpmDocumentsService struct {
		opmDocumentsService
	}
	h := &opmDocumentsServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmDocumentsService.Create",
		Path:    []string{"/v1/opmDocuments/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmDocumentsService.Delete",
		Path:    []string{"/v1/opmDocuments/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmDocumentsService.DeleteById",
		Path:    []string{"/v1/opmDocuments/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmDocumentsService.DeleteByIds",
		Path:    []string{"/v1/opmDocuments/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmDocumentsService.Update",
		Path:    []string{"/v1/opmDocuments/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmDocumentsService.UpdateAll",
		Path:    []string{"/v1/opmDocuments/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmDocumentsService.UpdateFields",
		Path:    []string{"/v1/opmDocuments/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmDocumentsService.FindById",
		Path:    []string{"/v1/opmDocuments/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmDocumentsService.Find",
		Path:    []string{"/v1/opmDocuments/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmDocumentsService.Lists",
		Path:    []string{"/v1/opmDocuments/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpmDocumentsService{h}, opts...))
}

type opmDocumentsServiceHandler struct {
	OpmDocumentsServiceHandler
}

func (h *opmDocumentsServiceHandler) Create(ctx context.Context, in *OpmDocuments, out *Response) error {
	return h.OpmDocumentsServiceHandler.Create(ctx, in, out)
}

func (h *opmDocumentsServiceHandler) Delete(ctx context.Context, in *OpmDocuments, out *Response) error {
	return h.OpmDocumentsServiceHandler.Delete(ctx, in, out)
}

func (h *opmDocumentsServiceHandler) DeleteById(ctx context.Context, in *OpmDocuments, out *Response) error {
	return h.OpmDocumentsServiceHandler.DeleteById(ctx, in, out)
}

func (h *opmDocumentsServiceHandler) DeleteByIds(ctx context.Context, in *OpmDocumentsBatchDeleteRequest, out *Response) error {
	return h.OpmDocumentsServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *opmDocumentsServiceHandler) Update(ctx context.Context, in *OpmDocuments, out *Response) error {
	return h.OpmDocumentsServiceHandler.Update(ctx, in, out)
}

func (h *opmDocumentsServiceHandler) UpdateAll(ctx context.Context, in *OpmDocuments, out *Response) error {
	return h.OpmDocumentsServiceHandler.UpdateAll(ctx, in, out)
}

func (h *opmDocumentsServiceHandler) UpdateFields(ctx context.Context, in *OpmDocumentsUpdateFieldsRequest, out *Response) error {
	return h.OpmDocumentsServiceHandler.UpdateFields(ctx, in, out)
}

func (h *opmDocumentsServiceHandler) FindById(ctx context.Context, in *OpmDocumentsFilter, out *OpmDocumentsResponse) error {
	return h.OpmDocumentsServiceHandler.FindById(ctx, in, out)
}

func (h *opmDocumentsServiceHandler) Find(ctx context.Context, in *OpmDocumentsFilter, out *OpmDocumentsResponse) error {
	return h.OpmDocumentsServiceHandler.Find(ctx, in, out)
}

func (h *opmDocumentsServiceHandler) Lists(ctx context.Context, in *OpmDocumentsListRequest, out *OpmDocumentsResponse) error {
	return h.OpmDocumentsServiceHandler.Lists(ctx, in, out)
}
