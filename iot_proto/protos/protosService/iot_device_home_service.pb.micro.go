// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: iot_device_home_service.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for IotDeviceHomeService service

func NewIotDeviceHomeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "IotDeviceHomeService.Create",
			Path:    []string{"/v1/iotDeviceHome/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.Delete",
			Path:    []string{"/v1/iotDeviceHome/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.DeleteById",
			Path:    []string{"/v1/iotDeviceHome/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.DeleteByIds",
			Path:    []string{"/v1/iotDeviceHome/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.Update",
			Path:    []string{"/v1/iotDeviceHome/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.UpdateAll",
			Path:    []string{"/v1/iotDeviceHome/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.UpdateFields",
			Path:    []string{"/v1/iotDeviceHome/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.FindById",
			Path:    []string{"/v1/iotDeviceHome/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.Find",
			Path:    []string{"/v1/iotDeviceHome/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.Lists",
			Path:    []string{"/v1/iotDeviceHome/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.DevCount",
			Path:    []string{"/v1/iotDeviceHome/devCount"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.UserDev",
			Path:    []string{"/v1/iotDeviceHome/userDev"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.UserDevList",
			Path:    []string{"/v1/iotDeviceHome/UserDevList"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.HomeDevCount",
			Path:    []string{"/v1/iotDeviceHome/HomeDevCount"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.HomeDevList",
			Path:    []string{"/v1/iotDeviceHome/HomeDevList"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.RemoveDev",
			Path:    []string{"/v1/iotDeviceHome/RemoveDev"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.UpdateDeviceInfo",
			Path:    []string{"/v1/iotDeviceHome/UpdateDeviceInfo"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.SetDevSort",
			Path:    []string{"/v1/iotDeviceHome/SetDevSort"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.QueryDeviceAreas",
			Path:    []string{"/v1/ucUser/queryDeviceAreas"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceHomeService.HomeDevListExcludeVirtualDevices",
			Path:    []string{"/v1/iotDeviceHome/HomeDevListExcludeVirtualDevices"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for IotDeviceHomeService service

type IotDeviceHomeService interface {
	//创建
	Create(ctx context.Context, in *IotDeviceHome, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *IotDeviceHome, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *IotDeviceHome, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *IotDeviceHomeBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *IotDeviceHome, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *IotDeviceHome, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *IotDeviceHomeUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *IotDeviceHomeFilter, opts ...client.CallOption) (*IotDeviceHomeResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *IotDeviceHomeFilter, opts ...client.CallOption) (*IotDeviceHomeResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *IotDeviceHomeListRequest, opts ...client.CallOption) (*IotDeviceHomeResponse, error)
	//家庭房间设备数量
	DevCount(ctx context.Context, in *IotDeviceHomeDevCount, opts ...client.CallOption) (*DevCountResponse, error)
	//用户家庭设备
	UserDev(ctx context.Context, in *IotUserHomeDev, opts ...client.CallOption) (*IotDeviceHomeResponse, error)
	//用户家庭设备列表
	UserDevList(ctx context.Context, in *IotDeviceHomeHomeId, opts ...client.CallOption) (*DevListResponse, error)
	//用户家庭设备数量
	HomeDevCount(ctx context.Context, in *IotDeviceHomeHomeId, opts ...client.CallOption) (*IotHomeDevCountResponse, error)
	//家庭详情-设备列表
	HomeDevList(ctx context.Context, in *IotDeviceHomeHomeId, opts ...client.CallOption) (*DevListResponse, error)
	//移除设备
	RemoveDev(ctx context.Context, in *RemoveDevRequest, opts ...client.CallOption) (*RemoveDevResponse, error)
	//根据设备id更新非空字段
	UpdateDeviceInfo(ctx context.Context, in *IotDeviceHome, opts ...client.CallOption) (*Response, error)
	//设置家庭设备排序
	SetDevSort(ctx context.Context, in *SetDevSortRequest, opts ...client.CallOption) (*Response, error)
	//查询设备所在区域数据
	QueryDeviceAreas(ctx context.Context, in *DeviceAreaRequest, opts ...client.CallOption) (*DeviceAreaResponse, error)
	//家庭设备列表排除虚拟设备
	HomeDevListExcludeVirtualDevices(ctx context.Context, in *IotDeviceHomeHomeId, opts ...client.CallOption) (*DevListResponse, error)
}

type iotDeviceHomeService struct {
	c    client.Client
	name string
}

func NewIotDeviceHomeService(name string, c client.Client) IotDeviceHomeService {
	return &iotDeviceHomeService{
		c:    c,
		name: name,
	}
}

func (c *iotDeviceHomeService) Create(ctx context.Context, in *IotDeviceHome, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) Delete(ctx context.Context, in *IotDeviceHome, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) DeleteById(ctx context.Context, in *IotDeviceHome, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) DeleteByIds(ctx context.Context, in *IotDeviceHomeBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) Update(ctx context.Context, in *IotDeviceHome, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) UpdateAll(ctx context.Context, in *IotDeviceHome, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) UpdateFields(ctx context.Context, in *IotDeviceHomeUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) FindById(ctx context.Context, in *IotDeviceHomeFilter, opts ...client.CallOption) (*IotDeviceHomeResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.FindById", in)
	out := new(IotDeviceHomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) Find(ctx context.Context, in *IotDeviceHomeFilter, opts ...client.CallOption) (*IotDeviceHomeResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.Find", in)
	out := new(IotDeviceHomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) Lists(ctx context.Context, in *IotDeviceHomeListRequest, opts ...client.CallOption) (*IotDeviceHomeResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.Lists", in)
	out := new(IotDeviceHomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) DevCount(ctx context.Context, in *IotDeviceHomeDevCount, opts ...client.CallOption) (*DevCountResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.DevCount", in)
	out := new(DevCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) UserDev(ctx context.Context, in *IotUserHomeDev, opts ...client.CallOption) (*IotDeviceHomeResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.UserDev", in)
	out := new(IotDeviceHomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) UserDevList(ctx context.Context, in *IotDeviceHomeHomeId, opts ...client.CallOption) (*DevListResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.UserDevList", in)
	out := new(DevListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) HomeDevCount(ctx context.Context, in *IotDeviceHomeHomeId, opts ...client.CallOption) (*IotHomeDevCountResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.HomeDevCount", in)
	out := new(IotHomeDevCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) HomeDevList(ctx context.Context, in *IotDeviceHomeHomeId, opts ...client.CallOption) (*DevListResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.HomeDevList", in)
	out := new(DevListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) RemoveDev(ctx context.Context, in *RemoveDevRequest, opts ...client.CallOption) (*RemoveDevResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.RemoveDev", in)
	out := new(RemoveDevResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) UpdateDeviceInfo(ctx context.Context, in *IotDeviceHome, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.UpdateDeviceInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) SetDevSort(ctx context.Context, in *SetDevSortRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.SetDevSort", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) QueryDeviceAreas(ctx context.Context, in *DeviceAreaRequest, opts ...client.CallOption) (*DeviceAreaResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.QueryDeviceAreas", in)
	out := new(DeviceAreaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceHomeService) HomeDevListExcludeVirtualDevices(ctx context.Context, in *IotDeviceHomeHomeId, opts ...client.CallOption) (*DevListResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceHomeService.HomeDevListExcludeVirtualDevices", in)
	out := new(DevListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IotDeviceHomeService service

type IotDeviceHomeServiceHandler interface {
	//创建
	Create(context.Context, *IotDeviceHome, *Response) error
	//匹配多条件删除
	Delete(context.Context, *IotDeviceHome, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *IotDeviceHome, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *IotDeviceHomeBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *IotDeviceHome, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *IotDeviceHome, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *IotDeviceHomeUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *IotDeviceHomeFilter, *IotDeviceHomeResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *IotDeviceHomeFilter, *IotDeviceHomeResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *IotDeviceHomeListRequest, *IotDeviceHomeResponse) error
	//家庭房间设备数量
	DevCount(context.Context, *IotDeviceHomeDevCount, *DevCountResponse) error
	//用户家庭设备
	UserDev(context.Context, *IotUserHomeDev, *IotDeviceHomeResponse) error
	//用户家庭设备列表
	UserDevList(context.Context, *IotDeviceHomeHomeId, *DevListResponse) error
	//用户家庭设备数量
	HomeDevCount(context.Context, *IotDeviceHomeHomeId, *IotHomeDevCountResponse) error
	//家庭详情-设备列表
	HomeDevList(context.Context, *IotDeviceHomeHomeId, *DevListResponse) error
	//移除设备
	RemoveDev(context.Context, *RemoveDevRequest, *RemoveDevResponse) error
	//根据设备id更新非空字段
	UpdateDeviceInfo(context.Context, *IotDeviceHome, *Response) error
	//设置家庭设备排序
	SetDevSort(context.Context, *SetDevSortRequest, *Response) error
	//查询设备所在区域数据
	QueryDeviceAreas(context.Context, *DeviceAreaRequest, *DeviceAreaResponse) error
	//家庭设备列表排除虚拟设备
	HomeDevListExcludeVirtualDevices(context.Context, *IotDeviceHomeHomeId, *DevListResponse) error
}

func RegisterIotDeviceHomeServiceHandler(s server.Server, hdlr IotDeviceHomeServiceHandler, opts ...server.HandlerOption) error {
	type iotDeviceHomeService interface {
		Create(ctx context.Context, in *IotDeviceHome, out *Response) error
		Delete(ctx context.Context, in *IotDeviceHome, out *Response) error
		DeleteById(ctx context.Context, in *IotDeviceHome, out *Response) error
		DeleteByIds(ctx context.Context, in *IotDeviceHomeBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *IotDeviceHome, out *Response) error
		UpdateAll(ctx context.Context, in *IotDeviceHome, out *Response) error
		UpdateFields(ctx context.Context, in *IotDeviceHomeUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *IotDeviceHomeFilter, out *IotDeviceHomeResponse) error
		Find(ctx context.Context, in *IotDeviceHomeFilter, out *IotDeviceHomeResponse) error
		Lists(ctx context.Context, in *IotDeviceHomeListRequest, out *IotDeviceHomeResponse) error
		DevCount(ctx context.Context, in *IotDeviceHomeDevCount, out *DevCountResponse) error
		UserDev(ctx context.Context, in *IotUserHomeDev, out *IotDeviceHomeResponse) error
		UserDevList(ctx context.Context, in *IotDeviceHomeHomeId, out *DevListResponse) error
		HomeDevCount(ctx context.Context, in *IotDeviceHomeHomeId, out *IotHomeDevCountResponse) error
		HomeDevList(ctx context.Context, in *IotDeviceHomeHomeId, out *DevListResponse) error
		RemoveDev(ctx context.Context, in *RemoveDevRequest, out *RemoveDevResponse) error
		UpdateDeviceInfo(ctx context.Context, in *IotDeviceHome, out *Response) error
		SetDevSort(ctx context.Context, in *SetDevSortRequest, out *Response) error
		QueryDeviceAreas(ctx context.Context, in *DeviceAreaRequest, out *DeviceAreaResponse) error
		HomeDevListExcludeVirtualDevices(ctx context.Context, in *IotDeviceHomeHomeId, out *DevListResponse) error
	}
	type IotDeviceHomeService struct {
		iotDeviceHomeService
	}
	h := &iotDeviceHomeServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.Create",
		Path:    []string{"/v1/iotDeviceHome/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.Delete",
		Path:    []string{"/v1/iotDeviceHome/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.DeleteById",
		Path:    []string{"/v1/iotDeviceHome/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.DeleteByIds",
		Path:    []string{"/v1/iotDeviceHome/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.Update",
		Path:    []string{"/v1/iotDeviceHome/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.UpdateAll",
		Path:    []string{"/v1/iotDeviceHome/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.UpdateFields",
		Path:    []string{"/v1/iotDeviceHome/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.FindById",
		Path:    []string{"/v1/iotDeviceHome/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.Find",
		Path:    []string{"/v1/iotDeviceHome/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.Lists",
		Path:    []string{"/v1/iotDeviceHome/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.DevCount",
		Path:    []string{"/v1/iotDeviceHome/devCount"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.UserDev",
		Path:    []string{"/v1/iotDeviceHome/userDev"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.UserDevList",
		Path:    []string{"/v1/iotDeviceHome/UserDevList"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.HomeDevCount",
		Path:    []string{"/v1/iotDeviceHome/HomeDevCount"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.HomeDevList",
		Path:    []string{"/v1/iotDeviceHome/HomeDevList"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.RemoveDev",
		Path:    []string{"/v1/iotDeviceHome/RemoveDev"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.UpdateDeviceInfo",
		Path:    []string{"/v1/iotDeviceHome/UpdateDeviceInfo"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.SetDevSort",
		Path:    []string{"/v1/iotDeviceHome/SetDevSort"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.QueryDeviceAreas",
		Path:    []string{"/v1/ucUser/queryDeviceAreas"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceHomeService.HomeDevListExcludeVirtualDevices",
		Path:    []string{"/v1/iotDeviceHome/HomeDevListExcludeVirtualDevices"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&IotDeviceHomeService{h}, opts...))
}

type iotDeviceHomeServiceHandler struct {
	IotDeviceHomeServiceHandler
}

func (h *iotDeviceHomeServiceHandler) Create(ctx context.Context, in *IotDeviceHome, out *Response) error {
	return h.IotDeviceHomeServiceHandler.Create(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) Delete(ctx context.Context, in *IotDeviceHome, out *Response) error {
	return h.IotDeviceHomeServiceHandler.Delete(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) DeleteById(ctx context.Context, in *IotDeviceHome, out *Response) error {
	return h.IotDeviceHomeServiceHandler.DeleteById(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) DeleteByIds(ctx context.Context, in *IotDeviceHomeBatchDeleteRequest, out *Response) error {
	return h.IotDeviceHomeServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) Update(ctx context.Context, in *IotDeviceHome, out *Response) error {
	return h.IotDeviceHomeServiceHandler.Update(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) UpdateAll(ctx context.Context, in *IotDeviceHome, out *Response) error {
	return h.IotDeviceHomeServiceHandler.UpdateAll(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) UpdateFields(ctx context.Context, in *IotDeviceHomeUpdateFieldsRequest, out *Response) error {
	return h.IotDeviceHomeServiceHandler.UpdateFields(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) FindById(ctx context.Context, in *IotDeviceHomeFilter, out *IotDeviceHomeResponse) error {
	return h.IotDeviceHomeServiceHandler.FindById(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) Find(ctx context.Context, in *IotDeviceHomeFilter, out *IotDeviceHomeResponse) error {
	return h.IotDeviceHomeServiceHandler.Find(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) Lists(ctx context.Context, in *IotDeviceHomeListRequest, out *IotDeviceHomeResponse) error {
	return h.IotDeviceHomeServiceHandler.Lists(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) DevCount(ctx context.Context, in *IotDeviceHomeDevCount, out *DevCountResponse) error {
	return h.IotDeviceHomeServiceHandler.DevCount(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) UserDev(ctx context.Context, in *IotUserHomeDev, out *IotDeviceHomeResponse) error {
	return h.IotDeviceHomeServiceHandler.UserDev(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) UserDevList(ctx context.Context, in *IotDeviceHomeHomeId, out *DevListResponse) error {
	return h.IotDeviceHomeServiceHandler.UserDevList(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) HomeDevCount(ctx context.Context, in *IotDeviceHomeHomeId, out *IotHomeDevCountResponse) error {
	return h.IotDeviceHomeServiceHandler.HomeDevCount(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) HomeDevList(ctx context.Context, in *IotDeviceHomeHomeId, out *DevListResponse) error {
	return h.IotDeviceHomeServiceHandler.HomeDevList(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) RemoveDev(ctx context.Context, in *RemoveDevRequest, out *RemoveDevResponse) error {
	return h.IotDeviceHomeServiceHandler.RemoveDev(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) UpdateDeviceInfo(ctx context.Context, in *IotDeviceHome, out *Response) error {
	return h.IotDeviceHomeServiceHandler.UpdateDeviceInfo(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) SetDevSort(ctx context.Context, in *SetDevSortRequest, out *Response) error {
	return h.IotDeviceHomeServiceHandler.SetDevSort(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) QueryDeviceAreas(ctx context.Context, in *DeviceAreaRequest, out *DeviceAreaResponse) error {
	return h.IotDeviceHomeServiceHandler.QueryDeviceAreas(ctx, in, out)
}

func (h *iotDeviceHomeServiceHandler) HomeDevListExcludeVirtualDevices(ctx context.Context, in *IotDeviceHomeHomeId, out *DevListResponse) error {
	return h.IotDeviceHomeServiceHandler.HomeDevListExcludeVirtualDevices(ctx, in, out)
}
