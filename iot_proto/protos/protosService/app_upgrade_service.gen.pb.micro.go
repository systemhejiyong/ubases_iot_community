// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: app_upgrade_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AppUpgradeService service

func NewAppUpgradeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "AppUpgradeService.Create",
			Path:    []string{"/v1/appUpgrade/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "AppUpgradeService.Delete",
			Path:    []string{"/v1/appUpgrade/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "AppUpgradeService.DeleteById",
			Path:    []string{"/v1/appUpgrade/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "AppUpgradeService.DeleteByIds",
			Path:    []string{"/v1/appUpgrade/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "AppUpgradeService.Update",
			Path:    []string{"/v1/appUpgrade/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "AppUpgradeService.UpdateAll",
			Path:    []string{"/v1/appUpgrade/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "AppUpgradeService.UpdateFields",
			Path:    []string{"/v1/appUpgrade/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "AppUpgradeService.FindById",
			Path:    []string{"/v1/appUpgrade/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "AppUpgradeService.Find",
			Path:    []string{"/v1/appUpgrade/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "AppUpgradeService.Lists",
			Path:    []string{"/v1/appUpgrade/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "AppUpgradeService.FindLatest",
			Path:    []string{"/v1/appUpgrade/findLatest"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for AppUpgradeService service

type AppUpgradeService interface {
	//创建
	Create(ctx context.Context, in *AppUpgrade, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *AppUpgrade, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *AppUpgrade, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *AppUpgradeBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *AppUpgrade, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *AppUpgrade, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *AppUpgradeUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *AppUpgradeFilter, opts ...client.CallOption) (*AppUpgradeResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *AppUpgradeFilter, opts ...client.CallOption) (*AppUpgradeResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *AppUpgradeListRequest, opts ...client.CallOption) (*AppUpgradeResponse, error)
	//查询最新的app版本数据
	FindLatest(ctx context.Context, in *LatestAppUpgradeFilter, opts ...client.CallOption) (*AppUpgradeResponse, error)
}

type appUpgradeService struct {
	c    client.Client
	name string
}

func NewAppUpgradeService(name string, c client.Client) AppUpgradeService {
	return &appUpgradeService{
		c:    c,
		name: name,
	}
}

func (c *appUpgradeService) Create(ctx context.Context, in *AppUpgrade, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppUpgradeService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUpgradeService) Delete(ctx context.Context, in *AppUpgrade, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppUpgradeService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUpgradeService) DeleteById(ctx context.Context, in *AppUpgrade, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppUpgradeService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUpgradeService) DeleteByIds(ctx context.Context, in *AppUpgradeBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppUpgradeService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUpgradeService) Update(ctx context.Context, in *AppUpgrade, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppUpgradeService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUpgradeService) UpdateAll(ctx context.Context, in *AppUpgrade, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppUpgradeService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUpgradeService) UpdateFields(ctx context.Context, in *AppUpgradeUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppUpgradeService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUpgradeService) FindById(ctx context.Context, in *AppUpgradeFilter, opts ...client.CallOption) (*AppUpgradeResponse, error) {
	req := c.c.NewRequest(c.name, "AppUpgradeService.FindById", in)
	out := new(AppUpgradeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUpgradeService) Find(ctx context.Context, in *AppUpgradeFilter, opts ...client.CallOption) (*AppUpgradeResponse, error) {
	req := c.c.NewRequest(c.name, "AppUpgradeService.Find", in)
	out := new(AppUpgradeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUpgradeService) Lists(ctx context.Context, in *AppUpgradeListRequest, opts ...client.CallOption) (*AppUpgradeResponse, error) {
	req := c.c.NewRequest(c.name, "AppUpgradeService.Lists", in)
	out := new(AppUpgradeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUpgradeService) FindLatest(ctx context.Context, in *LatestAppUpgradeFilter, opts ...client.CallOption) (*AppUpgradeResponse, error) {
	req := c.c.NewRequest(c.name, "AppUpgradeService.FindLatest", in)
	out := new(AppUpgradeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppUpgradeService service

type AppUpgradeServiceHandler interface {
	//创建
	Create(context.Context, *AppUpgrade, *Response) error
	//匹配多条件删除
	Delete(context.Context, *AppUpgrade, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *AppUpgrade, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *AppUpgradeBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *AppUpgrade, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *AppUpgrade, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *AppUpgradeUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *AppUpgradeFilter, *AppUpgradeResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *AppUpgradeFilter, *AppUpgradeResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *AppUpgradeListRequest, *AppUpgradeResponse) error
	//查询最新的app版本数据
	FindLatest(context.Context, *LatestAppUpgradeFilter, *AppUpgradeResponse) error
}

func RegisterAppUpgradeServiceHandler(s server.Server, hdlr AppUpgradeServiceHandler, opts ...server.HandlerOption) error {
	type appUpgradeService interface {
		Create(ctx context.Context, in *AppUpgrade, out *Response) error
		Delete(ctx context.Context, in *AppUpgrade, out *Response) error
		DeleteById(ctx context.Context, in *AppUpgrade, out *Response) error
		DeleteByIds(ctx context.Context, in *AppUpgradeBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *AppUpgrade, out *Response) error
		UpdateAll(ctx context.Context, in *AppUpgrade, out *Response) error
		UpdateFields(ctx context.Context, in *AppUpgradeUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *AppUpgradeFilter, out *AppUpgradeResponse) error
		Find(ctx context.Context, in *AppUpgradeFilter, out *AppUpgradeResponse) error
		Lists(ctx context.Context, in *AppUpgradeListRequest, out *AppUpgradeResponse) error
		FindLatest(ctx context.Context, in *LatestAppUpgradeFilter, out *AppUpgradeResponse) error
	}
	type AppUpgradeService struct {
		appUpgradeService
	}
	h := &appUpgradeServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AppUpgradeService.Create",
		Path:    []string{"/v1/appUpgrade/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AppUpgradeService.Delete",
		Path:    []string{"/v1/appUpgrade/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AppUpgradeService.DeleteById",
		Path:    []string{"/v1/appUpgrade/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AppUpgradeService.DeleteByIds",
		Path:    []string{"/v1/appUpgrade/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AppUpgradeService.Update",
		Path:    []string{"/v1/appUpgrade/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AppUpgradeService.UpdateAll",
		Path:    []string{"/v1/appUpgrade/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AppUpgradeService.UpdateFields",
		Path:    []string{"/v1/appUpgrade/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AppUpgradeService.FindById",
		Path:    []string{"/v1/appUpgrade/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AppUpgradeService.Find",
		Path:    []string{"/v1/appUpgrade/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AppUpgradeService.Lists",
		Path:    []string{"/v1/appUpgrade/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AppUpgradeService.FindLatest",
		Path:    []string{"/v1/appUpgrade/findLatest"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&AppUpgradeService{h}, opts...))
}

type appUpgradeServiceHandler struct {
	AppUpgradeServiceHandler
}

func (h *appUpgradeServiceHandler) Create(ctx context.Context, in *AppUpgrade, out *Response) error {
	return h.AppUpgradeServiceHandler.Create(ctx, in, out)
}

func (h *appUpgradeServiceHandler) Delete(ctx context.Context, in *AppUpgrade, out *Response) error {
	return h.AppUpgradeServiceHandler.Delete(ctx, in, out)
}

func (h *appUpgradeServiceHandler) DeleteById(ctx context.Context, in *AppUpgrade, out *Response) error {
	return h.AppUpgradeServiceHandler.DeleteById(ctx, in, out)
}

func (h *appUpgradeServiceHandler) DeleteByIds(ctx context.Context, in *AppUpgradeBatchDeleteRequest, out *Response) error {
	return h.AppUpgradeServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *appUpgradeServiceHandler) Update(ctx context.Context, in *AppUpgrade, out *Response) error {
	return h.AppUpgradeServiceHandler.Update(ctx, in, out)
}

func (h *appUpgradeServiceHandler) UpdateAll(ctx context.Context, in *AppUpgrade, out *Response) error {
	return h.AppUpgradeServiceHandler.UpdateAll(ctx, in, out)
}

func (h *appUpgradeServiceHandler) UpdateFields(ctx context.Context, in *AppUpgradeUpdateFieldsRequest, out *Response) error {
	return h.AppUpgradeServiceHandler.UpdateFields(ctx, in, out)
}

func (h *appUpgradeServiceHandler) FindById(ctx context.Context, in *AppUpgradeFilter, out *AppUpgradeResponse) error {
	return h.AppUpgradeServiceHandler.FindById(ctx, in, out)
}

func (h *appUpgradeServiceHandler) Find(ctx context.Context, in *AppUpgradeFilter, out *AppUpgradeResponse) error {
	return h.AppUpgradeServiceHandler.Find(ctx, in, out)
}

func (h *appUpgradeServiceHandler) Lists(ctx context.Context, in *AppUpgradeListRequest, out *AppUpgradeResponse) error {
	return h.AppUpgradeServiceHandler.Lists(ctx, in, out)
}

func (h *appUpgradeServiceHandler) FindLatest(ctx context.Context, in *LatestAppUpgradeFilter, out *AppUpgradeResponse) error {
	return h.AppUpgradeServiceHandler.FindLatest(ctx, in, out)
}
