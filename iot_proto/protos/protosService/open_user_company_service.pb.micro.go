// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: open_user_company_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpenUserCompanyService service

func NewOpenUserCompanyServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpenUserCompanyService.Create",
			Path:    []string{"/v1/openUserCompany/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserCompanyService.Delete",
			Path:    []string{"/v1/openUserCompany/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserCompanyService.DeleteById",
			Path:    []string{"/v1/openUserCompany/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserCompanyService.DeleteByIds",
			Path:    []string{"/v1/openUserCompany/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserCompanyService.Update",
			Path:    []string{"/v1/openUserCompany/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserCompanyService.UpdateAll",
			Path:    []string{"/v1/openUserCompany/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserCompanyService.UpdateFields",
			Path:    []string{"/v1/openUserCompany/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserCompanyService.FindById",
			Path:    []string{"/v1/openUserCompany/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserCompanyService.Find",
			Path:    []string{"/v1/openUserCompany/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserCompanyService.Lists",
			Path:    []string{"/v1/openUserCompany/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserCompanyService.UserCompanyAuth",
			Path:    []string{"/v1/openUserCompany/usercompanyauth"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserCompanyService.UserCompanyAuthList",
			Path:    []string{"/v1/openUserCompany/usercompanyauthlist"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpenUserCompanyService service

type OpenUserCompanyService interface {
	//创建
	Create(ctx context.Context, in *OpenUserCompany, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpenUserCompany, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpenUserCompany, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpenUserCompanyBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpenUserCompany, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpenUserCompany, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpenUserCompanyUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpenUserCompanyFilter, opts ...client.CallOption) (*OpenUserCompanyResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpenUserCompanyFilter, opts ...client.CallOption) (*OpenUserCompanyResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpenUserCompanyListRequest, opts ...client.CallOption) (*OpenUserCompanyResponse, error)
	//授权用户
	UserCompanyAuth(ctx context.Context, in *OpenUserCompanyAuthRequest, opts ...client.CallOption) (*Response, error)
	//授权用户
	UserCompanyAuthList(ctx context.Context, in *OpenUserCompanyAuthListRequest, opts ...client.CallOption) (*OpenUserCompanyAuthListResponse, error)
}

type openUserCompanyService struct {
	c    client.Client
	name string
}

func NewOpenUserCompanyService(name string, c client.Client) OpenUserCompanyService {
	return &openUserCompanyService{
		c:    c,
		name: name,
	}
}

func (c *openUserCompanyService) Create(ctx context.Context, in *OpenUserCompany, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserCompanyService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserCompanyService) Delete(ctx context.Context, in *OpenUserCompany, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserCompanyService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserCompanyService) DeleteById(ctx context.Context, in *OpenUserCompany, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserCompanyService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserCompanyService) DeleteByIds(ctx context.Context, in *OpenUserCompanyBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserCompanyService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserCompanyService) Update(ctx context.Context, in *OpenUserCompany, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserCompanyService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserCompanyService) UpdateAll(ctx context.Context, in *OpenUserCompany, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserCompanyService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserCompanyService) UpdateFields(ctx context.Context, in *OpenUserCompanyUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserCompanyService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserCompanyService) FindById(ctx context.Context, in *OpenUserCompanyFilter, opts ...client.CallOption) (*OpenUserCompanyResponse, error) {
	req := c.c.NewRequest(c.name, "OpenUserCompanyService.FindById", in)
	out := new(OpenUserCompanyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserCompanyService) Find(ctx context.Context, in *OpenUserCompanyFilter, opts ...client.CallOption) (*OpenUserCompanyResponse, error) {
	req := c.c.NewRequest(c.name, "OpenUserCompanyService.Find", in)
	out := new(OpenUserCompanyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserCompanyService) Lists(ctx context.Context, in *OpenUserCompanyListRequest, opts ...client.CallOption) (*OpenUserCompanyResponse, error) {
	req := c.c.NewRequest(c.name, "OpenUserCompanyService.Lists", in)
	out := new(OpenUserCompanyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserCompanyService) UserCompanyAuth(ctx context.Context, in *OpenUserCompanyAuthRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserCompanyService.UserCompanyAuth", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserCompanyService) UserCompanyAuthList(ctx context.Context, in *OpenUserCompanyAuthListRequest, opts ...client.CallOption) (*OpenUserCompanyAuthListResponse, error) {
	req := c.c.NewRequest(c.name, "OpenUserCompanyService.UserCompanyAuthList", in)
	out := new(OpenUserCompanyAuthListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpenUserCompanyService service

type OpenUserCompanyServiceHandler interface {
	//创建
	Create(context.Context, *OpenUserCompany, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpenUserCompany, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpenUserCompany, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpenUserCompanyBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpenUserCompany, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpenUserCompany, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpenUserCompanyUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpenUserCompanyFilter, *OpenUserCompanyResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpenUserCompanyFilter, *OpenUserCompanyResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpenUserCompanyListRequest, *OpenUserCompanyResponse) error
	//授权用户
	UserCompanyAuth(context.Context, *OpenUserCompanyAuthRequest, *Response) error
	//授权用户
	UserCompanyAuthList(context.Context, *OpenUserCompanyAuthListRequest, *OpenUserCompanyAuthListResponse) error
}

func RegisterOpenUserCompanyServiceHandler(s server.Server, hdlr OpenUserCompanyServiceHandler, opts ...server.HandlerOption) error {
	type openUserCompanyService interface {
		Create(ctx context.Context, in *OpenUserCompany, out *Response) error
		Delete(ctx context.Context, in *OpenUserCompany, out *Response) error
		DeleteById(ctx context.Context, in *OpenUserCompany, out *Response) error
		DeleteByIds(ctx context.Context, in *OpenUserCompanyBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpenUserCompany, out *Response) error
		UpdateAll(ctx context.Context, in *OpenUserCompany, out *Response) error
		UpdateFields(ctx context.Context, in *OpenUserCompanyUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpenUserCompanyFilter, out *OpenUserCompanyResponse) error
		Find(ctx context.Context, in *OpenUserCompanyFilter, out *OpenUserCompanyResponse) error
		Lists(ctx context.Context, in *OpenUserCompanyListRequest, out *OpenUserCompanyResponse) error
		UserCompanyAuth(ctx context.Context, in *OpenUserCompanyAuthRequest, out *Response) error
		UserCompanyAuthList(ctx context.Context, in *OpenUserCompanyAuthListRequest, out *OpenUserCompanyAuthListResponse) error
	}
	type OpenUserCompanyService struct {
		openUserCompanyService
	}
	h := &openUserCompanyServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserCompanyService.Create",
		Path:    []string{"/v1/openUserCompany/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserCompanyService.Delete",
		Path:    []string{"/v1/openUserCompany/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserCompanyService.DeleteById",
		Path:    []string{"/v1/openUserCompany/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserCompanyService.DeleteByIds",
		Path:    []string{"/v1/openUserCompany/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserCompanyService.Update",
		Path:    []string{"/v1/openUserCompany/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserCompanyService.UpdateAll",
		Path:    []string{"/v1/openUserCompany/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserCompanyService.UpdateFields",
		Path:    []string{"/v1/openUserCompany/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserCompanyService.FindById",
		Path:    []string{"/v1/openUserCompany/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserCompanyService.Find",
		Path:    []string{"/v1/openUserCompany/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserCompanyService.Lists",
		Path:    []string{"/v1/openUserCompany/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserCompanyService.UserCompanyAuth",
		Path:    []string{"/v1/openUserCompany/usercompanyauth"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserCompanyService.UserCompanyAuthList",
		Path:    []string{"/v1/openUserCompany/usercompanyauthlist"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpenUserCompanyService{h}, opts...))
}

type openUserCompanyServiceHandler struct {
	OpenUserCompanyServiceHandler
}

func (h *openUserCompanyServiceHandler) Create(ctx context.Context, in *OpenUserCompany, out *Response) error {
	return h.OpenUserCompanyServiceHandler.Create(ctx, in, out)
}

func (h *openUserCompanyServiceHandler) Delete(ctx context.Context, in *OpenUserCompany, out *Response) error {
	return h.OpenUserCompanyServiceHandler.Delete(ctx, in, out)
}

func (h *openUserCompanyServiceHandler) DeleteById(ctx context.Context, in *OpenUserCompany, out *Response) error {
	return h.OpenUserCompanyServiceHandler.DeleteById(ctx, in, out)
}

func (h *openUserCompanyServiceHandler) DeleteByIds(ctx context.Context, in *OpenUserCompanyBatchDeleteRequest, out *Response) error {
	return h.OpenUserCompanyServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *openUserCompanyServiceHandler) Update(ctx context.Context, in *OpenUserCompany, out *Response) error {
	return h.OpenUserCompanyServiceHandler.Update(ctx, in, out)
}

func (h *openUserCompanyServiceHandler) UpdateAll(ctx context.Context, in *OpenUserCompany, out *Response) error {
	return h.OpenUserCompanyServiceHandler.UpdateAll(ctx, in, out)
}

func (h *openUserCompanyServiceHandler) UpdateFields(ctx context.Context, in *OpenUserCompanyUpdateFieldsRequest, out *Response) error {
	return h.OpenUserCompanyServiceHandler.UpdateFields(ctx, in, out)
}

func (h *openUserCompanyServiceHandler) FindById(ctx context.Context, in *OpenUserCompanyFilter, out *OpenUserCompanyResponse) error {
	return h.OpenUserCompanyServiceHandler.FindById(ctx, in, out)
}

func (h *openUserCompanyServiceHandler) Find(ctx context.Context, in *OpenUserCompanyFilter, out *OpenUserCompanyResponse) error {
	return h.OpenUserCompanyServiceHandler.Find(ctx, in, out)
}

func (h *openUserCompanyServiceHandler) Lists(ctx context.Context, in *OpenUserCompanyListRequest, out *OpenUserCompanyResponse) error {
	return h.OpenUserCompanyServiceHandler.Lists(ctx, in, out)
}

func (h *openUserCompanyServiceHandler) UserCompanyAuth(ctx context.Context, in *OpenUserCompanyAuthRequest, out *Response) error {
	return h.OpenUserCompanyServiceHandler.UserCompanyAuth(ctx, in, out)
}

func (h *openUserCompanyServiceHandler) UserCompanyAuthList(ctx context.Context, in *OpenUserCompanyAuthListRequest, out *OpenUserCompanyAuthListResponse) error {
	return h.OpenUserCompanyServiceHandler.UserCompanyAuthList(ctx, in, out)
}
