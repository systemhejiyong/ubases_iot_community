// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: oem_app_introduce_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OemAppIntroduceService service

func NewOemAppIntroduceServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OemAppIntroduceService.Create",
			Path:    []string{"/v1/oemAppIntroduce/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppIntroduceService.Delete",
			Path:    []string{"/v1/oemAppIntroduce/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppIntroduceService.DeleteById",
			Path:    []string{"/v1/oemAppIntroduce/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppIntroduceService.DeleteByIds",
			Path:    []string{"/v1/oemAppIntroduce/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppIntroduceService.Update",
			Path:    []string{"/v1/oemAppIntroduce/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppIntroduceService.UpdateAll",
			Path:    []string{"/v1/oemAppIntroduce/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppIntroduceService.UpdateFields",
			Path:    []string{"/v1/oemAppIntroduce/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppIntroduceService.FindById",
			Path:    []string{"/v1/oemAppIntroduce/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppIntroduceService.Find",
			Path:    []string{"/v1/oemAppIntroduce/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppIntroduceService.Lists",
			Path:    []string{"/v1/oemAppIntroduce/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppIntroduceService.IntroduceList",
			Path:    []string{"/v1/oemAppIntroduce/introduceList"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppIntroduceService.Enable",
			Path:    []string{"/v1/oemAppIntroduce/enable"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OemAppIntroduceService service

type OemAppIntroduceService interface {
	//创建
	Create(ctx context.Context, in *OemAppIntroduce, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OemAppIntroduce, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OemAppIntroduce, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OemAppIntroduceBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OemAppIntroduce, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OemAppIntroduce, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OemAppIntroduceUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OemAppIntroduceFilter, opts ...client.CallOption) (*OemAppIntroduceResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OemAppIntroduceFilter, opts ...client.CallOption) (*OemAppIntroduceResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OemAppIntroduceListRequest, opts ...client.CallOption) (*OemAppIntroduceResponse, error)
	//查找，支持分页，可返回多条数据
	IntroduceList(ctx context.Context, in *OemAppIntroduceListRequest, opts ...client.CallOption) (*OemAppIntroduceListResponse, error)
	//启用
	Enable(ctx context.Context, in *OemAppIntroduce, opts ...client.CallOption) (*Response, error)
}

type oemAppIntroduceService struct {
	c    client.Client
	name string
}

func NewOemAppIntroduceService(name string, c client.Client) OemAppIntroduceService {
	return &oemAppIntroduceService{
		c:    c,
		name: name,
	}
}

func (c *oemAppIntroduceService) Create(ctx context.Context, in *OemAppIntroduce, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppIntroduceService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppIntroduceService) Delete(ctx context.Context, in *OemAppIntroduce, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppIntroduceService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppIntroduceService) DeleteById(ctx context.Context, in *OemAppIntroduce, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppIntroduceService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppIntroduceService) DeleteByIds(ctx context.Context, in *OemAppIntroduceBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppIntroduceService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppIntroduceService) Update(ctx context.Context, in *OemAppIntroduce, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppIntroduceService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppIntroduceService) UpdateAll(ctx context.Context, in *OemAppIntroduce, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppIntroduceService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppIntroduceService) UpdateFields(ctx context.Context, in *OemAppIntroduceUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppIntroduceService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppIntroduceService) FindById(ctx context.Context, in *OemAppIntroduceFilter, opts ...client.CallOption) (*OemAppIntroduceResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppIntroduceService.FindById", in)
	out := new(OemAppIntroduceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppIntroduceService) Find(ctx context.Context, in *OemAppIntroduceFilter, opts ...client.CallOption) (*OemAppIntroduceResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppIntroduceService.Find", in)
	out := new(OemAppIntroduceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppIntroduceService) Lists(ctx context.Context, in *OemAppIntroduceListRequest, opts ...client.CallOption) (*OemAppIntroduceResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppIntroduceService.Lists", in)
	out := new(OemAppIntroduceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppIntroduceService) IntroduceList(ctx context.Context, in *OemAppIntroduceListRequest, opts ...client.CallOption) (*OemAppIntroduceListResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppIntroduceService.IntroduceList", in)
	out := new(OemAppIntroduceListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppIntroduceService) Enable(ctx context.Context, in *OemAppIntroduce, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppIntroduceService.Enable", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OemAppIntroduceService service

type OemAppIntroduceServiceHandler interface {
	//创建
	Create(context.Context, *OemAppIntroduce, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OemAppIntroduce, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OemAppIntroduce, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OemAppIntroduceBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OemAppIntroduce, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OemAppIntroduce, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OemAppIntroduceUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OemAppIntroduceFilter, *OemAppIntroduceResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OemAppIntroduceFilter, *OemAppIntroduceResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OemAppIntroduceListRequest, *OemAppIntroduceResponse) error
	//查找，支持分页，可返回多条数据
	IntroduceList(context.Context, *OemAppIntroduceListRequest, *OemAppIntroduceListResponse) error
	//启用
	Enable(context.Context, *OemAppIntroduce, *Response) error
}

func RegisterOemAppIntroduceServiceHandler(s server.Server, hdlr OemAppIntroduceServiceHandler, opts ...server.HandlerOption) error {
	type oemAppIntroduceService interface {
		Create(ctx context.Context, in *OemAppIntroduce, out *Response) error
		Delete(ctx context.Context, in *OemAppIntroduce, out *Response) error
		DeleteById(ctx context.Context, in *OemAppIntroduce, out *Response) error
		DeleteByIds(ctx context.Context, in *OemAppIntroduceBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OemAppIntroduce, out *Response) error
		UpdateAll(ctx context.Context, in *OemAppIntroduce, out *Response) error
		UpdateFields(ctx context.Context, in *OemAppIntroduceUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OemAppIntroduceFilter, out *OemAppIntroduceResponse) error
		Find(ctx context.Context, in *OemAppIntroduceFilter, out *OemAppIntroduceResponse) error
		Lists(ctx context.Context, in *OemAppIntroduceListRequest, out *OemAppIntroduceResponse) error
		IntroduceList(ctx context.Context, in *OemAppIntroduceListRequest, out *OemAppIntroduceListResponse) error
		Enable(ctx context.Context, in *OemAppIntroduce, out *Response) error
	}
	type OemAppIntroduceService struct {
		oemAppIntroduceService
	}
	h := &oemAppIntroduceServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppIntroduceService.Create",
		Path:    []string{"/v1/oemAppIntroduce/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppIntroduceService.Delete",
		Path:    []string{"/v1/oemAppIntroduce/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppIntroduceService.DeleteById",
		Path:    []string{"/v1/oemAppIntroduce/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppIntroduceService.DeleteByIds",
		Path:    []string{"/v1/oemAppIntroduce/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppIntroduceService.Update",
		Path:    []string{"/v1/oemAppIntroduce/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppIntroduceService.UpdateAll",
		Path:    []string{"/v1/oemAppIntroduce/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppIntroduceService.UpdateFields",
		Path:    []string{"/v1/oemAppIntroduce/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppIntroduceService.FindById",
		Path:    []string{"/v1/oemAppIntroduce/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppIntroduceService.Find",
		Path:    []string{"/v1/oemAppIntroduce/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppIntroduceService.Lists",
		Path:    []string{"/v1/oemAppIntroduce/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppIntroduceService.IntroduceList",
		Path:    []string{"/v1/oemAppIntroduce/introduceList"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppIntroduceService.Enable",
		Path:    []string{"/v1/oemAppIntroduce/enable"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OemAppIntroduceService{h}, opts...))
}

type oemAppIntroduceServiceHandler struct {
	OemAppIntroduceServiceHandler
}

func (h *oemAppIntroduceServiceHandler) Create(ctx context.Context, in *OemAppIntroduce, out *Response) error {
	return h.OemAppIntroduceServiceHandler.Create(ctx, in, out)
}

func (h *oemAppIntroduceServiceHandler) Delete(ctx context.Context, in *OemAppIntroduce, out *Response) error {
	return h.OemAppIntroduceServiceHandler.Delete(ctx, in, out)
}

func (h *oemAppIntroduceServiceHandler) DeleteById(ctx context.Context, in *OemAppIntroduce, out *Response) error {
	return h.OemAppIntroduceServiceHandler.DeleteById(ctx, in, out)
}

func (h *oemAppIntroduceServiceHandler) DeleteByIds(ctx context.Context, in *OemAppIntroduceBatchDeleteRequest, out *Response) error {
	return h.OemAppIntroduceServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *oemAppIntroduceServiceHandler) Update(ctx context.Context, in *OemAppIntroduce, out *Response) error {
	return h.OemAppIntroduceServiceHandler.Update(ctx, in, out)
}

func (h *oemAppIntroduceServiceHandler) UpdateAll(ctx context.Context, in *OemAppIntroduce, out *Response) error {
	return h.OemAppIntroduceServiceHandler.UpdateAll(ctx, in, out)
}

func (h *oemAppIntroduceServiceHandler) UpdateFields(ctx context.Context, in *OemAppIntroduceUpdateFieldsRequest, out *Response) error {
	return h.OemAppIntroduceServiceHandler.UpdateFields(ctx, in, out)
}

func (h *oemAppIntroduceServiceHandler) FindById(ctx context.Context, in *OemAppIntroduceFilter, out *OemAppIntroduceResponse) error {
	return h.OemAppIntroduceServiceHandler.FindById(ctx, in, out)
}

func (h *oemAppIntroduceServiceHandler) Find(ctx context.Context, in *OemAppIntroduceFilter, out *OemAppIntroduceResponse) error {
	return h.OemAppIntroduceServiceHandler.Find(ctx, in, out)
}

func (h *oemAppIntroduceServiceHandler) Lists(ctx context.Context, in *OemAppIntroduceListRequest, out *OemAppIntroduceResponse) error {
	return h.OemAppIntroduceServiceHandler.Lists(ctx, in, out)
}

func (h *oemAppIntroduceServiceHandler) IntroduceList(ctx context.Context, in *OemAppIntroduceListRequest, out *OemAppIntroduceListResponse) error {
	return h.OemAppIntroduceServiceHandler.IntroduceList(ctx, in, out)
}

func (h *oemAppIntroduceServiceHandler) Enable(ctx context.Context, in *OemAppIntroduce, out *Response) error {
	return h.OemAppIntroduceServiceHandler.Enable(ctx, in, out)
}
