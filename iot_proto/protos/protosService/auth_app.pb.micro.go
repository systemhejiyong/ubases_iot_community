// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: auth_app.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AppAuth service

func NewAppAuthEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AppAuth service

type AppAuthService interface {
	// 小程序登录
	MiniProgramLogin(ctx context.Context, in *MiniProgramLoginRequest, opts ...client.CallOption) (*AppLoginResponse, error)
	// 手机验证码登录
	PhoneCodeLogin(ctx context.Context, in *PhoneCodeLoginRequest, opts ...client.CallOption) (*AppLoginResponse, error)
	// 邮箱验证码登录
	EmailCodeLogin(ctx context.Context, in *EmailCodeLoginRequest, opts ...client.CallOption) (*AppLoginResponse, error)
	// 密码登录 (手机密码.用户名密码.邮箱密码)
	PasswordLogin(ctx context.Context, in *PasswordLoginRequest, opts ...client.CallOption) (*AppLoginResponse, error)
	//退出
	Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error)
	// 验证token是否有效
	VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...client.CallOption) (*APPVerifyTokenResponse, error)
	// 刷新token
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*AppRefreshTokenResponse, error)
	// 微信登录
	WechatLogin(ctx context.Context, in *AppThirdRequest, opts ...client.CallOption) (*AppLoginResponse, error)
	// Apple登录
	AppleidLogin(ctx context.Context, in *AppThirdRequest, opts ...client.CallOption) (*AppLoginResponse, error)
	// 获取token
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...client.CallOption) (*AppLoginResponse, error)
	// 根据account获取token
	GetTokenByAccount(ctx context.Context, in *GetTokenByAccountRequest, opts ...client.CallOption) (*AppLoginResponse, error)
}

type appAuthService struct {
	c    client.Client
	name string
}

func NewAppAuthService(name string, c client.Client) AppAuthService {
	return &appAuthService{
		c:    c,
		name: name,
	}
}

func (c *appAuthService) MiniProgramLogin(ctx context.Context, in *MiniProgramLoginRequest, opts ...client.CallOption) (*AppLoginResponse, error) {
	req := c.c.NewRequest(c.name, "AppAuth.MiniProgramLogin", in)
	out := new(AppLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAuthService) PhoneCodeLogin(ctx context.Context, in *PhoneCodeLoginRequest, opts ...client.CallOption) (*AppLoginResponse, error) {
	req := c.c.NewRequest(c.name, "AppAuth.PhoneCodeLogin", in)
	out := new(AppLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAuthService) EmailCodeLogin(ctx context.Context, in *EmailCodeLoginRequest, opts ...client.CallOption) (*AppLoginResponse, error) {
	req := c.c.NewRequest(c.name, "AppAuth.EmailCodeLogin", in)
	out := new(AppLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAuthService) PasswordLogin(ctx context.Context, in *PasswordLoginRequest, opts ...client.CallOption) (*AppLoginResponse, error) {
	req := c.c.NewRequest(c.name, "AppAuth.PasswordLogin", in)
	out := new(AppLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAuthService) Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error) {
	req := c.c.NewRequest(c.name, "AppAuth.Logout", in)
	out := new(LogoutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAuthService) VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...client.CallOption) (*APPVerifyTokenResponse, error) {
	req := c.c.NewRequest(c.name, "AppAuth.VerifyToken", in)
	out := new(APPVerifyTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAuthService) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*AppRefreshTokenResponse, error) {
	req := c.c.NewRequest(c.name, "AppAuth.RefreshToken", in)
	out := new(AppRefreshTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAuthService) WechatLogin(ctx context.Context, in *AppThirdRequest, opts ...client.CallOption) (*AppLoginResponse, error) {
	req := c.c.NewRequest(c.name, "AppAuth.WechatLogin", in)
	out := new(AppLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAuthService) AppleidLogin(ctx context.Context, in *AppThirdRequest, opts ...client.CallOption) (*AppLoginResponse, error) {
	req := c.c.NewRequest(c.name, "AppAuth.AppleidLogin", in)
	out := new(AppLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAuthService) GetToken(ctx context.Context, in *GetTokenRequest, opts ...client.CallOption) (*AppLoginResponse, error) {
	req := c.c.NewRequest(c.name, "AppAuth.GetToken", in)
	out := new(AppLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAuthService) GetTokenByAccount(ctx context.Context, in *GetTokenByAccountRequest, opts ...client.CallOption) (*AppLoginResponse, error) {
	req := c.c.NewRequest(c.name, "AppAuth.GetTokenByAccount", in)
	out := new(AppLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppAuth service

type AppAuthHandler interface {
	// 小程序登录
	MiniProgramLogin(context.Context, *MiniProgramLoginRequest, *AppLoginResponse) error
	// 手机验证码登录
	PhoneCodeLogin(context.Context, *PhoneCodeLoginRequest, *AppLoginResponse) error
	// 邮箱验证码登录
	EmailCodeLogin(context.Context, *EmailCodeLoginRequest, *AppLoginResponse) error
	// 密码登录 (手机密码.用户名密码.邮箱密码)
	PasswordLogin(context.Context, *PasswordLoginRequest, *AppLoginResponse) error
	//退出
	Logout(context.Context, *LogoutRequest, *LogoutResponse) error
	// 验证token是否有效
	VerifyToken(context.Context, *VerifyTokenRequest, *APPVerifyTokenResponse) error
	// 刷新token
	RefreshToken(context.Context, *RefreshTokenRequest, *AppRefreshTokenResponse) error
	// 微信登录
	WechatLogin(context.Context, *AppThirdRequest, *AppLoginResponse) error
	// Apple登录
	AppleidLogin(context.Context, *AppThirdRequest, *AppLoginResponse) error
	// 获取token
	GetToken(context.Context, *GetTokenRequest, *AppLoginResponse) error
	// 根据account获取token
	GetTokenByAccount(context.Context, *GetTokenByAccountRequest, *AppLoginResponse) error
}

func RegisterAppAuthHandler(s server.Server, hdlr AppAuthHandler, opts ...server.HandlerOption) error {
	type appAuth interface {
		MiniProgramLogin(ctx context.Context, in *MiniProgramLoginRequest, out *AppLoginResponse) error
		PhoneCodeLogin(ctx context.Context, in *PhoneCodeLoginRequest, out *AppLoginResponse) error
		EmailCodeLogin(ctx context.Context, in *EmailCodeLoginRequest, out *AppLoginResponse) error
		PasswordLogin(ctx context.Context, in *PasswordLoginRequest, out *AppLoginResponse) error
		Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error
		VerifyToken(ctx context.Context, in *VerifyTokenRequest, out *APPVerifyTokenResponse) error
		RefreshToken(ctx context.Context, in *RefreshTokenRequest, out *AppRefreshTokenResponse) error
		WechatLogin(ctx context.Context, in *AppThirdRequest, out *AppLoginResponse) error
		AppleidLogin(ctx context.Context, in *AppThirdRequest, out *AppLoginResponse) error
		GetToken(ctx context.Context, in *GetTokenRequest, out *AppLoginResponse) error
		GetTokenByAccount(ctx context.Context, in *GetTokenByAccountRequest, out *AppLoginResponse) error
	}
	type AppAuth struct {
		appAuth
	}
	h := &appAuthHandler{hdlr}
	return s.Handle(s.NewHandler(&AppAuth{h}, opts...))
}

type appAuthHandler struct {
	AppAuthHandler
}

func (h *appAuthHandler) MiniProgramLogin(ctx context.Context, in *MiniProgramLoginRequest, out *AppLoginResponse) error {
	return h.AppAuthHandler.MiniProgramLogin(ctx, in, out)
}

func (h *appAuthHandler) PhoneCodeLogin(ctx context.Context, in *PhoneCodeLoginRequest, out *AppLoginResponse) error {
	return h.AppAuthHandler.PhoneCodeLogin(ctx, in, out)
}

func (h *appAuthHandler) EmailCodeLogin(ctx context.Context, in *EmailCodeLoginRequest, out *AppLoginResponse) error {
	return h.AppAuthHandler.EmailCodeLogin(ctx, in, out)
}

func (h *appAuthHandler) PasswordLogin(ctx context.Context, in *PasswordLoginRequest, out *AppLoginResponse) error {
	return h.AppAuthHandler.PasswordLogin(ctx, in, out)
}

func (h *appAuthHandler) Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error {
	return h.AppAuthHandler.Logout(ctx, in, out)
}

func (h *appAuthHandler) VerifyToken(ctx context.Context, in *VerifyTokenRequest, out *APPVerifyTokenResponse) error {
	return h.AppAuthHandler.VerifyToken(ctx, in, out)
}

func (h *appAuthHandler) RefreshToken(ctx context.Context, in *RefreshTokenRequest, out *AppRefreshTokenResponse) error {
	return h.AppAuthHandler.RefreshToken(ctx, in, out)
}

func (h *appAuthHandler) WechatLogin(ctx context.Context, in *AppThirdRequest, out *AppLoginResponse) error {
	return h.AppAuthHandler.WechatLogin(ctx, in, out)
}

func (h *appAuthHandler) AppleidLogin(ctx context.Context, in *AppThirdRequest, out *AppLoginResponse) error {
	return h.AppAuthHandler.AppleidLogin(ctx, in, out)
}

func (h *appAuthHandler) GetToken(ctx context.Context, in *GetTokenRequest, out *AppLoginResponse) error {
	return h.AppAuthHandler.GetToken(ctx, in, out)
}

func (h *appAuthHandler) GetTokenByAccount(ctx context.Context, in *GetTokenByAccountRequest, out *AppLoginResponse) error {
	return h.AppAuthHandler.GetTokenByAccount(ctx, in, out)
}
