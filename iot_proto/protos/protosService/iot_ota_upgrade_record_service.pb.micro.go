// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: iot_ota_upgrade_record_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for IotOtaUpgradeRecordService service

func NewIotOtaUpgradeRecordServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "IotOtaUpgradeRecordService.GenerateUpgradeDevice",
			Path:    []string{"/v1/iotOtaUpgradeRecord/generateUpgradeDevice"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotOtaUpgradeRecordService.StopUpgradeDevice",
			Path:    []string{"/v1/iotOtaUpgradeRecord/stopUpgradeDevice"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotOtaUpgradeRecordService.Create",
			Path:    []string{"/v1/iotOtaUpgradeRecord/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotOtaUpgradeRecordService.Delete",
			Path:    []string{"/v1/iotOtaUpgradeRecord/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotOtaUpgradeRecordService.DeleteById",
			Path:    []string{"/v1/iotOtaUpgradeRecord/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotOtaUpgradeRecordService.DeleteByIds",
			Path:    []string{"/v1/iotOtaUpgradeRecord/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotOtaUpgradeRecordService.Update",
			Path:    []string{"/v1/iotOtaUpgradeRecord/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotOtaUpgradeRecordService.UpdateAll",
			Path:    []string{"/v1/iotOtaUpgradeRecord/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotOtaUpgradeRecordService.UpdateFields",
			Path:    []string{"/v1/iotOtaUpgradeRecord/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotOtaUpgradeRecordService.FindById",
			Path:    []string{"/v1/iotOtaUpgradeRecord/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotOtaUpgradeRecordService.Find",
			Path:    []string{"/v1/iotOtaUpgradeRecord/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotOtaUpgradeRecordService.Lists",
			Path:    []string{"/v1/iotOtaUpgradeRecord/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for IotOtaUpgradeRecordService service

type IotOtaUpgradeRecordService interface {
	//生成升级设备列表请求
	GenerateUpgradeDevice(ctx context.Context, in *GenerateUpgradeDeviceRequest, opts ...client.CallOption) (*GenerateUpgradeDeviceResponse, error)
	//停止升级
	StopUpgradeDevice(ctx context.Context, in *GenerateUpgradeDeviceRequest, opts ...client.CallOption) (*GenerateUpgradeDeviceResponse, error)
	//创建
	Create(ctx context.Context, in *IotOtaUpgradeRecord, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *IotOtaUpgradeRecord, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *IotOtaUpgradeRecord, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *IotOtaUpgradeRecordBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *IotOtaUpgradeRecord, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *IotOtaUpgradeRecord, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *IotOtaUpgradeRecordUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *IotOtaUpgradeRecordFilter, opts ...client.CallOption) (*IotOtaUpgradeRecordResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *IotOtaUpgradeRecordFilter, opts ...client.CallOption) (*IotOtaUpgradeRecordResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *IotOtaUpgradeRecordListRequest, opts ...client.CallOption) (*IotOtaUpgradeRecordResponse, error)
}

type iotOtaUpgradeRecordService struct {
	c    client.Client
	name string
}

func NewIotOtaUpgradeRecordService(name string, c client.Client) IotOtaUpgradeRecordService {
	return &iotOtaUpgradeRecordService{
		c:    c,
		name: name,
	}
}

func (c *iotOtaUpgradeRecordService) GenerateUpgradeDevice(ctx context.Context, in *GenerateUpgradeDeviceRequest, opts ...client.CallOption) (*GenerateUpgradeDeviceResponse, error) {
	req := c.c.NewRequest(c.name, "IotOtaUpgradeRecordService.GenerateUpgradeDevice", in)
	out := new(GenerateUpgradeDeviceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotOtaUpgradeRecordService) StopUpgradeDevice(ctx context.Context, in *GenerateUpgradeDeviceRequest, opts ...client.CallOption) (*GenerateUpgradeDeviceResponse, error) {
	req := c.c.NewRequest(c.name, "IotOtaUpgradeRecordService.StopUpgradeDevice", in)
	out := new(GenerateUpgradeDeviceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotOtaUpgradeRecordService) Create(ctx context.Context, in *IotOtaUpgradeRecord, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotOtaUpgradeRecordService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotOtaUpgradeRecordService) Delete(ctx context.Context, in *IotOtaUpgradeRecord, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotOtaUpgradeRecordService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotOtaUpgradeRecordService) DeleteById(ctx context.Context, in *IotOtaUpgradeRecord, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotOtaUpgradeRecordService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotOtaUpgradeRecordService) DeleteByIds(ctx context.Context, in *IotOtaUpgradeRecordBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotOtaUpgradeRecordService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotOtaUpgradeRecordService) Update(ctx context.Context, in *IotOtaUpgradeRecord, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotOtaUpgradeRecordService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotOtaUpgradeRecordService) UpdateAll(ctx context.Context, in *IotOtaUpgradeRecord, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotOtaUpgradeRecordService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotOtaUpgradeRecordService) UpdateFields(ctx context.Context, in *IotOtaUpgradeRecordUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotOtaUpgradeRecordService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotOtaUpgradeRecordService) FindById(ctx context.Context, in *IotOtaUpgradeRecordFilter, opts ...client.CallOption) (*IotOtaUpgradeRecordResponse, error) {
	req := c.c.NewRequest(c.name, "IotOtaUpgradeRecordService.FindById", in)
	out := new(IotOtaUpgradeRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotOtaUpgradeRecordService) Find(ctx context.Context, in *IotOtaUpgradeRecordFilter, opts ...client.CallOption) (*IotOtaUpgradeRecordResponse, error) {
	req := c.c.NewRequest(c.name, "IotOtaUpgradeRecordService.Find", in)
	out := new(IotOtaUpgradeRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotOtaUpgradeRecordService) Lists(ctx context.Context, in *IotOtaUpgradeRecordListRequest, opts ...client.CallOption) (*IotOtaUpgradeRecordResponse, error) {
	req := c.c.NewRequest(c.name, "IotOtaUpgradeRecordService.Lists", in)
	out := new(IotOtaUpgradeRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IotOtaUpgradeRecordService service

type IotOtaUpgradeRecordServiceHandler interface {
	//生成升级设备列表请求
	GenerateUpgradeDevice(context.Context, *GenerateUpgradeDeviceRequest, *GenerateUpgradeDeviceResponse) error
	//停止升级
	StopUpgradeDevice(context.Context, *GenerateUpgradeDeviceRequest, *GenerateUpgradeDeviceResponse) error
	//创建
	Create(context.Context, *IotOtaUpgradeRecord, *Response) error
	//匹配多条件删除
	Delete(context.Context, *IotOtaUpgradeRecord, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *IotOtaUpgradeRecord, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *IotOtaUpgradeRecordBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *IotOtaUpgradeRecord, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *IotOtaUpgradeRecord, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *IotOtaUpgradeRecordUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *IotOtaUpgradeRecordFilter, *IotOtaUpgradeRecordResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *IotOtaUpgradeRecordFilter, *IotOtaUpgradeRecordResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *IotOtaUpgradeRecordListRequest, *IotOtaUpgradeRecordResponse) error
}

func RegisterIotOtaUpgradeRecordServiceHandler(s server.Server, hdlr IotOtaUpgradeRecordServiceHandler, opts ...server.HandlerOption) error {
	type iotOtaUpgradeRecordService interface {
		GenerateUpgradeDevice(ctx context.Context, in *GenerateUpgradeDeviceRequest, out *GenerateUpgradeDeviceResponse) error
		StopUpgradeDevice(ctx context.Context, in *GenerateUpgradeDeviceRequest, out *GenerateUpgradeDeviceResponse) error
		Create(ctx context.Context, in *IotOtaUpgradeRecord, out *Response) error
		Delete(ctx context.Context, in *IotOtaUpgradeRecord, out *Response) error
		DeleteById(ctx context.Context, in *IotOtaUpgradeRecord, out *Response) error
		DeleteByIds(ctx context.Context, in *IotOtaUpgradeRecordBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *IotOtaUpgradeRecord, out *Response) error
		UpdateAll(ctx context.Context, in *IotOtaUpgradeRecord, out *Response) error
		UpdateFields(ctx context.Context, in *IotOtaUpgradeRecordUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *IotOtaUpgradeRecordFilter, out *IotOtaUpgradeRecordResponse) error
		Find(ctx context.Context, in *IotOtaUpgradeRecordFilter, out *IotOtaUpgradeRecordResponse) error
		Lists(ctx context.Context, in *IotOtaUpgradeRecordListRequest, out *IotOtaUpgradeRecordResponse) error
	}
	type IotOtaUpgradeRecordService struct {
		iotOtaUpgradeRecordService
	}
	h := &iotOtaUpgradeRecordServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotOtaUpgradeRecordService.GenerateUpgradeDevice",
		Path:    []string{"/v1/iotOtaUpgradeRecord/generateUpgradeDevice"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotOtaUpgradeRecordService.StopUpgradeDevice",
		Path:    []string{"/v1/iotOtaUpgradeRecord/stopUpgradeDevice"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotOtaUpgradeRecordService.Create",
		Path:    []string{"/v1/iotOtaUpgradeRecord/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotOtaUpgradeRecordService.Delete",
		Path:    []string{"/v1/iotOtaUpgradeRecord/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotOtaUpgradeRecordService.DeleteById",
		Path:    []string{"/v1/iotOtaUpgradeRecord/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotOtaUpgradeRecordService.DeleteByIds",
		Path:    []string{"/v1/iotOtaUpgradeRecord/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotOtaUpgradeRecordService.Update",
		Path:    []string{"/v1/iotOtaUpgradeRecord/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotOtaUpgradeRecordService.UpdateAll",
		Path:    []string{"/v1/iotOtaUpgradeRecord/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotOtaUpgradeRecordService.UpdateFields",
		Path:    []string{"/v1/iotOtaUpgradeRecord/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotOtaUpgradeRecordService.FindById",
		Path:    []string{"/v1/iotOtaUpgradeRecord/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotOtaUpgradeRecordService.Find",
		Path:    []string{"/v1/iotOtaUpgradeRecord/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotOtaUpgradeRecordService.Lists",
		Path:    []string{"/v1/iotOtaUpgradeRecord/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&IotOtaUpgradeRecordService{h}, opts...))
}

type iotOtaUpgradeRecordServiceHandler struct {
	IotOtaUpgradeRecordServiceHandler
}

func (h *iotOtaUpgradeRecordServiceHandler) GenerateUpgradeDevice(ctx context.Context, in *GenerateUpgradeDeviceRequest, out *GenerateUpgradeDeviceResponse) error {
	return h.IotOtaUpgradeRecordServiceHandler.GenerateUpgradeDevice(ctx, in, out)
}

func (h *iotOtaUpgradeRecordServiceHandler) StopUpgradeDevice(ctx context.Context, in *GenerateUpgradeDeviceRequest, out *GenerateUpgradeDeviceResponse) error {
	return h.IotOtaUpgradeRecordServiceHandler.StopUpgradeDevice(ctx, in, out)
}

func (h *iotOtaUpgradeRecordServiceHandler) Create(ctx context.Context, in *IotOtaUpgradeRecord, out *Response) error {
	return h.IotOtaUpgradeRecordServiceHandler.Create(ctx, in, out)
}

func (h *iotOtaUpgradeRecordServiceHandler) Delete(ctx context.Context, in *IotOtaUpgradeRecord, out *Response) error {
	return h.IotOtaUpgradeRecordServiceHandler.Delete(ctx, in, out)
}

func (h *iotOtaUpgradeRecordServiceHandler) DeleteById(ctx context.Context, in *IotOtaUpgradeRecord, out *Response) error {
	return h.IotOtaUpgradeRecordServiceHandler.DeleteById(ctx, in, out)
}

func (h *iotOtaUpgradeRecordServiceHandler) DeleteByIds(ctx context.Context, in *IotOtaUpgradeRecordBatchDeleteRequest, out *Response) error {
	return h.IotOtaUpgradeRecordServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *iotOtaUpgradeRecordServiceHandler) Update(ctx context.Context, in *IotOtaUpgradeRecord, out *Response) error {
	return h.IotOtaUpgradeRecordServiceHandler.Update(ctx, in, out)
}

func (h *iotOtaUpgradeRecordServiceHandler) UpdateAll(ctx context.Context, in *IotOtaUpgradeRecord, out *Response) error {
	return h.IotOtaUpgradeRecordServiceHandler.UpdateAll(ctx, in, out)
}

func (h *iotOtaUpgradeRecordServiceHandler) UpdateFields(ctx context.Context, in *IotOtaUpgradeRecordUpdateFieldsRequest, out *Response) error {
	return h.IotOtaUpgradeRecordServiceHandler.UpdateFields(ctx, in, out)
}

func (h *iotOtaUpgradeRecordServiceHandler) FindById(ctx context.Context, in *IotOtaUpgradeRecordFilter, out *IotOtaUpgradeRecordResponse) error {
	return h.IotOtaUpgradeRecordServiceHandler.FindById(ctx, in, out)
}

func (h *iotOtaUpgradeRecordServiceHandler) Find(ctx context.Context, in *IotOtaUpgradeRecordFilter, out *IotOtaUpgradeRecordResponse) error {
	return h.IotOtaUpgradeRecordServiceHandler.Find(ctx, in, out)
}

func (h *iotOtaUpgradeRecordServiceHandler) Lists(ctx context.Context, in *IotOtaUpgradeRecordListRequest, out *IotOtaUpgradeRecordResponse) error {
	return h.IotOtaUpgradeRecordServiceHandler.Lists(ctx, in, out)
}
