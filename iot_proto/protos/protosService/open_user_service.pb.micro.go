// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: open_user_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpenUserService service

func NewOpenUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpenUserService.Create",
			Path:    []string{"/v1/openUser/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserService.Delete",
			Path:    []string{"/v1/openUser/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserService.DeleteById",
			Path:    []string{"/v1/openUser/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserService.DeleteByIds",
			Path:    []string{"/v1/openUser/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserService.Update",
			Path:    []string{"/v1/openUser/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserService.UpdateAll",
			Path:    []string{"/v1/openUser/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserService.UpdateFields",
			Path:    []string{"/v1/openUser/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserService.FindById",
			Path:    []string{"/v1/openUser/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserService.Find",
			Path:    []string{"/v1/openUser/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserService.Lists",
			Path:    []string{"/v1/openUser/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserService.Register",
			Path:    []string{"/v1/openUser/register"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserService.UpdatePassword",
			Path:    []string{"/v1/openUser/updatePassword"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserService.ForgetPassword",
			Path:    []string{"/v1/openUser/forgetPassword"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserService.SetLoginSafe",
			Path:    []string{"/v1/openUser/setLoginSafe"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserService.UpdateUserBasicInfo",
			Path:    []string{"/v1/openUser/updateBasicInfo"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenUserService.GetRouters",
			Path:    []string{"/v1/openUser/getrouters"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpenUserService service

type OpenUserService interface {
	//创建
	Create(ctx context.Context, in *OpenUser, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpenUser, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpenUser, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpenUserBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpenUser, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpenUser, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpenUserUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpenUserFilter, opts ...client.CallOption) (*OpenUserResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpenUserFilter, opts ...client.CallOption) (*OpenUserResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpenUserListRequest, opts ...client.CallOption) (*OpenUserResponse, error)
	//注册用户信息
	Register(ctx context.Context, in *OpenUserRegisterRequest, opts ...client.CallOption) (*OpenUserRegisterResponse, error)
	//修改密码
	UpdatePassword(ctx context.Context, in *OpenUserUpdatePasswordRequest, opts ...client.CallOption) (*Response, error)
	//忘记密码
	ForgetPassword(ctx context.Context, in *OpenUserForgetPasswordRequest, opts ...client.CallOption) (*Response, error)
	//登录安全，24小时免登录
	SetLoginSafe(ctx context.Context, in *OpenUserSetLoginSafeRequest, opts ...client.CallOption) (*Response, error)
	//修改用户基础信息
	UpdateUserBasicInfo(ctx context.Context, in *OpenUserUpdateBasicInfoRequest, opts ...client.CallOption) (*Response, error)
	//获取用户权限
	GetRouters(ctx context.Context, in *OpenUserPrimarykey, opts ...client.CallOption) (*OpenUserMenuListRes, error)
}

type openUserService struct {
	c    client.Client
	name string
}

func NewOpenUserService(name string, c client.Client) OpenUserService {
	return &openUserService{
		c:    c,
		name: name,
	}
}

func (c *openUserService) Create(ctx context.Context, in *OpenUser, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserService) Delete(ctx context.Context, in *OpenUser, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserService) DeleteById(ctx context.Context, in *OpenUser, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserService) DeleteByIds(ctx context.Context, in *OpenUserBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserService) Update(ctx context.Context, in *OpenUser, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserService) UpdateAll(ctx context.Context, in *OpenUser, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserService) UpdateFields(ctx context.Context, in *OpenUserUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserService) FindById(ctx context.Context, in *OpenUserFilter, opts ...client.CallOption) (*OpenUserResponse, error) {
	req := c.c.NewRequest(c.name, "OpenUserService.FindById", in)
	out := new(OpenUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserService) Find(ctx context.Context, in *OpenUserFilter, opts ...client.CallOption) (*OpenUserResponse, error) {
	req := c.c.NewRequest(c.name, "OpenUserService.Find", in)
	out := new(OpenUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserService) Lists(ctx context.Context, in *OpenUserListRequest, opts ...client.CallOption) (*OpenUserResponse, error) {
	req := c.c.NewRequest(c.name, "OpenUserService.Lists", in)
	out := new(OpenUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserService) Register(ctx context.Context, in *OpenUserRegisterRequest, opts ...client.CallOption) (*OpenUserRegisterResponse, error) {
	req := c.c.NewRequest(c.name, "OpenUserService.Register", in)
	out := new(OpenUserRegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserService) UpdatePassword(ctx context.Context, in *OpenUserUpdatePasswordRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserService.UpdatePassword", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserService) ForgetPassword(ctx context.Context, in *OpenUserForgetPasswordRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserService.ForgetPassword", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserService) SetLoginSafe(ctx context.Context, in *OpenUserSetLoginSafeRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserService.SetLoginSafe", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserService) UpdateUserBasicInfo(ctx context.Context, in *OpenUserUpdateBasicInfoRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenUserService.UpdateUserBasicInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openUserService) GetRouters(ctx context.Context, in *OpenUserPrimarykey, opts ...client.CallOption) (*OpenUserMenuListRes, error) {
	req := c.c.NewRequest(c.name, "OpenUserService.GetRouters", in)
	out := new(OpenUserMenuListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpenUserService service

type OpenUserServiceHandler interface {
	//创建
	Create(context.Context, *OpenUser, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpenUser, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpenUser, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpenUserBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpenUser, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpenUser, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpenUserUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpenUserFilter, *OpenUserResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpenUserFilter, *OpenUserResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpenUserListRequest, *OpenUserResponse) error
	//注册用户信息
	Register(context.Context, *OpenUserRegisterRequest, *OpenUserRegisterResponse) error
	//修改密码
	UpdatePassword(context.Context, *OpenUserUpdatePasswordRequest, *Response) error
	//忘记密码
	ForgetPassword(context.Context, *OpenUserForgetPasswordRequest, *Response) error
	//登录安全，24小时免登录
	SetLoginSafe(context.Context, *OpenUserSetLoginSafeRequest, *Response) error
	//修改用户基础信息
	UpdateUserBasicInfo(context.Context, *OpenUserUpdateBasicInfoRequest, *Response) error
	//获取用户权限
	GetRouters(context.Context, *OpenUserPrimarykey, *OpenUserMenuListRes) error
}

func RegisterOpenUserServiceHandler(s server.Server, hdlr OpenUserServiceHandler, opts ...server.HandlerOption) error {
	type openUserService interface {
		Create(ctx context.Context, in *OpenUser, out *Response) error
		Delete(ctx context.Context, in *OpenUser, out *Response) error
		DeleteById(ctx context.Context, in *OpenUser, out *Response) error
		DeleteByIds(ctx context.Context, in *OpenUserBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpenUser, out *Response) error
		UpdateAll(ctx context.Context, in *OpenUser, out *Response) error
		UpdateFields(ctx context.Context, in *OpenUserUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpenUserFilter, out *OpenUserResponse) error
		Find(ctx context.Context, in *OpenUserFilter, out *OpenUserResponse) error
		Lists(ctx context.Context, in *OpenUserListRequest, out *OpenUserResponse) error
		Register(ctx context.Context, in *OpenUserRegisterRequest, out *OpenUserRegisterResponse) error
		UpdatePassword(ctx context.Context, in *OpenUserUpdatePasswordRequest, out *Response) error
		ForgetPassword(ctx context.Context, in *OpenUserForgetPasswordRequest, out *Response) error
		SetLoginSafe(ctx context.Context, in *OpenUserSetLoginSafeRequest, out *Response) error
		UpdateUserBasicInfo(ctx context.Context, in *OpenUserUpdateBasicInfoRequest, out *Response) error
		GetRouters(ctx context.Context, in *OpenUserPrimarykey, out *OpenUserMenuListRes) error
	}
	type OpenUserService struct {
		openUserService
	}
	h := &openUserServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserService.Create",
		Path:    []string{"/v1/openUser/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserService.Delete",
		Path:    []string{"/v1/openUser/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserService.DeleteById",
		Path:    []string{"/v1/openUser/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserService.DeleteByIds",
		Path:    []string{"/v1/openUser/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserService.Update",
		Path:    []string{"/v1/openUser/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserService.UpdateAll",
		Path:    []string{"/v1/openUser/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserService.UpdateFields",
		Path:    []string{"/v1/openUser/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserService.FindById",
		Path:    []string{"/v1/openUser/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserService.Find",
		Path:    []string{"/v1/openUser/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserService.Lists",
		Path:    []string{"/v1/openUser/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserService.Register",
		Path:    []string{"/v1/openUser/register"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserService.UpdatePassword",
		Path:    []string{"/v1/openUser/updatePassword"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserService.ForgetPassword",
		Path:    []string{"/v1/openUser/forgetPassword"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserService.SetLoginSafe",
		Path:    []string{"/v1/openUser/setLoginSafe"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserService.UpdateUserBasicInfo",
		Path:    []string{"/v1/openUser/updateBasicInfo"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenUserService.GetRouters",
		Path:    []string{"/v1/openUser/getrouters"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpenUserService{h}, opts...))
}

type openUserServiceHandler struct {
	OpenUserServiceHandler
}

func (h *openUserServiceHandler) Create(ctx context.Context, in *OpenUser, out *Response) error {
	return h.OpenUserServiceHandler.Create(ctx, in, out)
}

func (h *openUserServiceHandler) Delete(ctx context.Context, in *OpenUser, out *Response) error {
	return h.OpenUserServiceHandler.Delete(ctx, in, out)
}

func (h *openUserServiceHandler) DeleteById(ctx context.Context, in *OpenUser, out *Response) error {
	return h.OpenUserServiceHandler.DeleteById(ctx, in, out)
}

func (h *openUserServiceHandler) DeleteByIds(ctx context.Context, in *OpenUserBatchDeleteRequest, out *Response) error {
	return h.OpenUserServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *openUserServiceHandler) Update(ctx context.Context, in *OpenUser, out *Response) error {
	return h.OpenUserServiceHandler.Update(ctx, in, out)
}

func (h *openUserServiceHandler) UpdateAll(ctx context.Context, in *OpenUser, out *Response) error {
	return h.OpenUserServiceHandler.UpdateAll(ctx, in, out)
}

func (h *openUserServiceHandler) UpdateFields(ctx context.Context, in *OpenUserUpdateFieldsRequest, out *Response) error {
	return h.OpenUserServiceHandler.UpdateFields(ctx, in, out)
}

func (h *openUserServiceHandler) FindById(ctx context.Context, in *OpenUserFilter, out *OpenUserResponse) error {
	return h.OpenUserServiceHandler.FindById(ctx, in, out)
}

func (h *openUserServiceHandler) Find(ctx context.Context, in *OpenUserFilter, out *OpenUserResponse) error {
	return h.OpenUserServiceHandler.Find(ctx, in, out)
}

func (h *openUserServiceHandler) Lists(ctx context.Context, in *OpenUserListRequest, out *OpenUserResponse) error {
	return h.OpenUserServiceHandler.Lists(ctx, in, out)
}

func (h *openUserServiceHandler) Register(ctx context.Context, in *OpenUserRegisterRequest, out *OpenUserRegisterResponse) error {
	return h.OpenUserServiceHandler.Register(ctx, in, out)
}

func (h *openUserServiceHandler) UpdatePassword(ctx context.Context, in *OpenUserUpdatePasswordRequest, out *Response) error {
	return h.OpenUserServiceHandler.UpdatePassword(ctx, in, out)
}

func (h *openUserServiceHandler) ForgetPassword(ctx context.Context, in *OpenUserForgetPasswordRequest, out *Response) error {
	return h.OpenUserServiceHandler.ForgetPassword(ctx, in, out)
}

func (h *openUserServiceHandler) SetLoginSafe(ctx context.Context, in *OpenUserSetLoginSafeRequest, out *Response) error {
	return h.OpenUserServiceHandler.SetLoginSafe(ctx, in, out)
}

func (h *openUserServiceHandler) UpdateUserBasicInfo(ctx context.Context, in *OpenUserUpdateBasicInfoRequest, out *Response) error {
	return h.OpenUserServiceHandler.UpdateUserBasicInfo(ctx, in, out)
}

func (h *openUserServiceHandler) GetRouters(ctx context.Context, in *OpenUserPrimarykey, out *OpenUserMenuListRes) error {
	return h.OpenUserServiceHandler.GetRouters(ctx, in, out)
}
