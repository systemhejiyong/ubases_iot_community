// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sms.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SmsService service

func NewSmsServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SmsService service

type SmsService interface {
	//发送验证码
	SendCode(ctx context.Context, in *SendSMSCodeRequest, opts ...client.CallOption) (*SendSMSResponse, error)
	//发送短信验证码(扩展)
	SendSMSVerifyCode(ctx context.Context, in *SendSMSVerifyCodeRequest, opts ...client.CallOption) (*SendSMSResponse, error)
	//异地登录提醒
	SendLoggedIn(ctx context.Context, in *SendSMSLoggedInRequest, opts ...client.CallOption) (*SendSMSResponse, error)
	//注册提醒
	SendRegister(ctx context.Context, in *SendSMSRegisterRequest, opts ...client.CallOption) (*SendSMSResponse, error)
}

type smsService struct {
	c    client.Client
	name string
}

func NewSmsService(name string, c client.Client) SmsService {
	return &smsService{
		c:    c,
		name: name,
	}
}

func (c *smsService) SendCode(ctx context.Context, in *SendSMSCodeRequest, opts ...client.CallOption) (*SendSMSResponse, error) {
	req := c.c.NewRequest(c.name, "SmsService.SendCode", in)
	out := new(SendSMSResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsService) SendSMSVerifyCode(ctx context.Context, in *SendSMSVerifyCodeRequest, opts ...client.CallOption) (*SendSMSResponse, error) {
	req := c.c.NewRequest(c.name, "SmsService.SendSMSVerifyCode", in)
	out := new(SendSMSResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsService) SendLoggedIn(ctx context.Context, in *SendSMSLoggedInRequest, opts ...client.CallOption) (*SendSMSResponse, error) {
	req := c.c.NewRequest(c.name, "SmsService.SendLoggedIn", in)
	out := new(SendSMSResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsService) SendRegister(ctx context.Context, in *SendSMSRegisterRequest, opts ...client.CallOption) (*SendSMSResponse, error) {
	req := c.c.NewRequest(c.name, "SmsService.SendRegister", in)
	out := new(SendSMSResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SmsService service

type SmsServiceHandler interface {
	//发送验证码
	SendCode(context.Context, *SendSMSCodeRequest, *SendSMSResponse) error
	//发送短信验证码(扩展)
	SendSMSVerifyCode(context.Context, *SendSMSVerifyCodeRequest, *SendSMSResponse) error
	//异地登录提醒
	SendLoggedIn(context.Context, *SendSMSLoggedInRequest, *SendSMSResponse) error
	//注册提醒
	SendRegister(context.Context, *SendSMSRegisterRequest, *SendSMSResponse) error
}

func RegisterSmsServiceHandler(s server.Server, hdlr SmsServiceHandler, opts ...server.HandlerOption) error {
	type smsService interface {
		SendCode(ctx context.Context, in *SendSMSCodeRequest, out *SendSMSResponse) error
		SendSMSVerifyCode(ctx context.Context, in *SendSMSVerifyCodeRequest, out *SendSMSResponse) error
		SendLoggedIn(ctx context.Context, in *SendSMSLoggedInRequest, out *SendSMSResponse) error
		SendRegister(ctx context.Context, in *SendSMSRegisterRequest, out *SendSMSResponse) error
	}
	type SmsService struct {
		smsService
	}
	h := &smsServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&SmsService{h}, opts...))
}

type smsServiceHandler struct {
	SmsServiceHandler
}

func (h *smsServiceHandler) SendCode(ctx context.Context, in *SendSMSCodeRequest, out *SendSMSResponse) error {
	return h.SmsServiceHandler.SendCode(ctx, in, out)
}

func (h *smsServiceHandler) SendSMSVerifyCode(ctx context.Context, in *SendSMSVerifyCodeRequest, out *SendSMSResponse) error {
	return h.SmsServiceHandler.SendSMSVerifyCode(ctx, in, out)
}

func (h *smsServiceHandler) SendLoggedIn(ctx context.Context, in *SendSMSLoggedInRequest, out *SendSMSResponse) error {
	return h.SmsServiceHandler.SendLoggedIn(ctx, in, out)
}

func (h *smsServiceHandler) SendRegister(ctx context.Context, in *SendSMSRegisterRequest, out *SendSMSResponse) error {
	return h.SmsServiceHandler.SendRegister(ctx, in, out)
}
