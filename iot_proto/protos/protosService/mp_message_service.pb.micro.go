// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: mp_message_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MpMessageService service

func NewMpMessageServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "MpMessageService.Create",
			Path:    []string{"/v1/mpMessage/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageService.Delete",
			Path:    []string{"/v1/mpMessage/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageService.DeleteById",
			Path:    []string{"/v1/mpMessage/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageService.DeleteByIds",
			Path:    []string{"/v1/mpMessage/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageService.Update",
			Path:    []string{"/v1/mpMessage/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageService.UpdateAll",
			Path:    []string{"/v1/mpMessage/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageService.UpdateFields",
			Path:    []string{"/v1/mpMessage/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageService.FindById",
			Path:    []string{"/v1/mpMessage/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageService.Find",
			Path:    []string{"/v1/mpMessage/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageService.Lists",
			Path:    []string{"/v1/mpMessage/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageService.SendMessage",
			Path:    []string{"/v1/mpMessage/sendMessage"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageService.ClearAlias",
			Path:    []string{"/v1/mpMessage/clearAlias"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageService.SendLaserMessage",
			Path:    []string{"/v1/mpMessage/sendLaserMessage"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for MpMessageService service

type MpMessageService interface {
	//创建
	Create(ctx context.Context, in *MpMessage, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *MpMessage, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *MpMessage, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *MpMessageBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *MpMessage, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *MpMessage, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *MpMessageUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *MpMessageFilter, opts ...client.CallOption) (*MpMessageResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *MpMessageFilter, opts ...client.CallOption) (*MpMessageResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *MpMessageListRequest, opts ...client.CallOption) (*MpMessageResponse, error)
	//发送消息
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*Response, error)
	//清理别名
	ClearAlias(ctx context.Context, in *ClearAliasRequest, opts ...client.CallOption) (*Response, error)
	//只推送激光消息到手机通知栏
	SendLaserMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*Response, error)
}

type mpMessageService struct {
	c    client.Client
	name string
}

func NewMpMessageService(name string, c client.Client) MpMessageService {
	return &mpMessageService{
		c:    c,
		name: name,
	}
}

func (c *mpMessageService) Create(ctx context.Context, in *MpMessage, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageService) Delete(ctx context.Context, in *MpMessage, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageService) DeleteById(ctx context.Context, in *MpMessage, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageService) DeleteByIds(ctx context.Context, in *MpMessageBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageService) Update(ctx context.Context, in *MpMessage, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageService) UpdateAll(ctx context.Context, in *MpMessage, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageService) UpdateFields(ctx context.Context, in *MpMessageUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageService) FindById(ctx context.Context, in *MpMessageFilter, opts ...client.CallOption) (*MpMessageResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessageService.FindById", in)
	out := new(MpMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageService) Find(ctx context.Context, in *MpMessageFilter, opts ...client.CallOption) (*MpMessageResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessageService.Find", in)
	out := new(MpMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageService) Lists(ctx context.Context, in *MpMessageListRequest, opts ...client.CallOption) (*MpMessageResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessageService.Lists", in)
	out := new(MpMessageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageService) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageService.SendMessage", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageService) ClearAlias(ctx context.Context, in *ClearAliasRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageService.ClearAlias", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageService) SendLaserMessage(ctx context.Context, in *SendMessageRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageService.SendLaserMessage", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MpMessageService service

type MpMessageServiceHandler interface {
	//创建
	Create(context.Context, *MpMessage, *Response) error
	//匹配多条件删除
	Delete(context.Context, *MpMessage, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *MpMessage, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *MpMessageBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *MpMessage, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *MpMessage, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *MpMessageUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *MpMessageFilter, *MpMessageResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *MpMessageFilter, *MpMessageResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *MpMessageListRequest, *MpMessageResponse) error
	//发送消息
	SendMessage(context.Context, *SendMessageRequest, *Response) error
	//清理别名
	ClearAlias(context.Context, *ClearAliasRequest, *Response) error
	//只推送激光消息到手机通知栏
	SendLaserMessage(context.Context, *SendMessageRequest, *Response) error
}

func RegisterMpMessageServiceHandler(s server.Server, hdlr MpMessageServiceHandler, opts ...server.HandlerOption) error {
	type mpMessageService interface {
		Create(ctx context.Context, in *MpMessage, out *Response) error
		Delete(ctx context.Context, in *MpMessage, out *Response) error
		DeleteById(ctx context.Context, in *MpMessage, out *Response) error
		DeleteByIds(ctx context.Context, in *MpMessageBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *MpMessage, out *Response) error
		UpdateAll(ctx context.Context, in *MpMessage, out *Response) error
		UpdateFields(ctx context.Context, in *MpMessageUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *MpMessageFilter, out *MpMessageResponse) error
		Find(ctx context.Context, in *MpMessageFilter, out *MpMessageResponse) error
		Lists(ctx context.Context, in *MpMessageListRequest, out *MpMessageResponse) error
		SendMessage(ctx context.Context, in *SendMessageRequest, out *Response) error
		ClearAlias(ctx context.Context, in *ClearAliasRequest, out *Response) error
		SendLaserMessage(ctx context.Context, in *SendMessageRequest, out *Response) error
	}
	type MpMessageService struct {
		mpMessageService
	}
	h := &mpMessageServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageService.Create",
		Path:    []string{"/v1/mpMessage/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageService.Delete",
		Path:    []string{"/v1/mpMessage/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageService.DeleteById",
		Path:    []string{"/v1/mpMessage/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageService.DeleteByIds",
		Path:    []string{"/v1/mpMessage/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageService.Update",
		Path:    []string{"/v1/mpMessage/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageService.UpdateAll",
		Path:    []string{"/v1/mpMessage/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageService.UpdateFields",
		Path:    []string{"/v1/mpMessage/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageService.FindById",
		Path:    []string{"/v1/mpMessage/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageService.Find",
		Path:    []string{"/v1/mpMessage/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageService.Lists",
		Path:    []string{"/v1/mpMessage/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageService.SendMessage",
		Path:    []string{"/v1/mpMessage/sendMessage"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageService.ClearAlias",
		Path:    []string{"/v1/mpMessage/clearAlias"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageService.SendLaserMessage",
		Path:    []string{"/v1/mpMessage/sendLaserMessage"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&MpMessageService{h}, opts...))
}

type mpMessageServiceHandler struct {
	MpMessageServiceHandler
}

func (h *mpMessageServiceHandler) Create(ctx context.Context, in *MpMessage, out *Response) error {
	return h.MpMessageServiceHandler.Create(ctx, in, out)
}

func (h *mpMessageServiceHandler) Delete(ctx context.Context, in *MpMessage, out *Response) error {
	return h.MpMessageServiceHandler.Delete(ctx, in, out)
}

func (h *mpMessageServiceHandler) DeleteById(ctx context.Context, in *MpMessage, out *Response) error {
	return h.MpMessageServiceHandler.DeleteById(ctx, in, out)
}

func (h *mpMessageServiceHandler) DeleteByIds(ctx context.Context, in *MpMessageBatchDeleteRequest, out *Response) error {
	return h.MpMessageServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *mpMessageServiceHandler) Update(ctx context.Context, in *MpMessage, out *Response) error {
	return h.MpMessageServiceHandler.Update(ctx, in, out)
}

func (h *mpMessageServiceHandler) UpdateAll(ctx context.Context, in *MpMessage, out *Response) error {
	return h.MpMessageServiceHandler.UpdateAll(ctx, in, out)
}

func (h *mpMessageServiceHandler) UpdateFields(ctx context.Context, in *MpMessageUpdateFieldsRequest, out *Response) error {
	return h.MpMessageServiceHandler.UpdateFields(ctx, in, out)
}

func (h *mpMessageServiceHandler) FindById(ctx context.Context, in *MpMessageFilter, out *MpMessageResponse) error {
	return h.MpMessageServiceHandler.FindById(ctx, in, out)
}

func (h *mpMessageServiceHandler) Find(ctx context.Context, in *MpMessageFilter, out *MpMessageResponse) error {
	return h.MpMessageServiceHandler.Find(ctx, in, out)
}

func (h *mpMessageServiceHandler) Lists(ctx context.Context, in *MpMessageListRequest, out *MpMessageResponse) error {
	return h.MpMessageServiceHandler.Lists(ctx, in, out)
}

func (h *mpMessageServiceHandler) SendMessage(ctx context.Context, in *SendMessageRequest, out *Response) error {
	return h.MpMessageServiceHandler.SendMessage(ctx, in, out)
}

func (h *mpMessageServiceHandler) ClearAlias(ctx context.Context, in *ClearAliasRequest, out *Response) error {
	return h.MpMessageServiceHandler.ClearAlias(ctx, in, out)
}

func (h *mpMessageServiceHandler) SendLaserMessage(ctx context.Context, in *SendMessageRequest, out *Response) error {
	return h.MpMessageServiceHandler.SendLaserMessage(ctx, in, out)
}
