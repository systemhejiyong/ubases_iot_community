// Code generated by sgen.exe,2022-05-07 16:41:11. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: opm_product_model.proto

package protosService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//来源于数据表
//来源于数据表
type OpmProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:主键ID;comment:主键ID;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"productTypeId" gorm:"default:产品分类ID;comment:产品分类ID;size:19;"
	ProductTypeId int64 `protobuf:"varint,101,opt,name=productTypeId,proto3" json:"productTypeId,omitempty"`
	// @inject_tag: json:"productKey" gorm:"default:产品唯一标识;comment:产品唯一标识;size:16;"
	ProductKey string `protobuf:"bytes,102,opt,name=productKey,proto3" json:"productKey,omitempty"`
	// @inject_tag: json:"name" gorm:"default:产品品类名称;comment:产品品类名称;size:128;"
	Name string `protobuf:"bytes,103,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: json:"nameEn" gorm:"default:产品品类名称（英文）;comment:产品品类名称（英文）;size:128;"
	NameEn string `protobuf:"bytes,104,opt,name=nameEn,proto3" json:"nameEn,omitempty"`
	// @inject_tag: json:"identifier" gorm:"default:属性的标识符。可包含大小写英文字母、数字、下划线（_），长度不超过50个字符。;comment:属性的标识符。可包含大小写英文字母、数字、下划线（_），长度不超过50个字符。;size:50;"
	Identifier string `protobuf:"bytes,105,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// @inject_tag: json:"model" gorm:"default:产品品类型号;comment:产品品类型号;size:50;"
	Model string `protobuf:"bytes,106,opt,name=model,proto3" json:"model,omitempty"`
	// @inject_tag: json:"imageUrl" gorm:"default:产品品类图片;comment:产品品类图片;size:256;"
	ImageUrl string `protobuf:"bytes,107,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	// @inject_tag: json:"wifiFlag" gorm:"default:WIFI标识;comment:WIFI标识;size:50;"
	WifiFlag string `protobuf:"bytes,108,opt,name=wifiFlag,proto3" json:"wifiFlag,omitempty"`
	// @inject_tag: json:"networkType" gorm:"default:通信协议（WIFI, BLE, WIFI+BLE）;comment:通信协议（WIFI, BLE, WIFI+BLE）;size:10;"
	NetworkType int32 `protobuf:"varint,109,opt,name=networkType,proto3" json:"networkType,omitempty"`
	// @inject_tag: json:"attributeType" gorm:"default:设备性质（0:直连设备，1：网关，2：网关子设备）;comment:设备性质（0:直连设备，1：网关，2：网关子设备）;"
	AttributeType int32 `protobuf:"varint,110,opt,name=attributeType,proto3" json:"attributeType,omitempty"`
	// @inject_tag: json:"powerConsumeType" gorm:"default:功耗类型[0:标准功耗, 1:低功耗];comment:功耗类型[0:标准功耗, 1:低功耗];"
	PowerConsumeType int32 `protobuf:"varint,111,opt,name=powerConsumeType,proto3" json:"powerConsumeType,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态（0:未开发, 1:已开发）;comment:状态（0:未开发, 1:已开发）;"
	Status int32 `protobuf:"varint,112,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"isVirtualTest" gorm:"default:是否支持虚拟测试（0：否，1：是）;comment:是否支持虚拟测试（0：否，1：是）;"
	IsVirtualTest int32 `protobuf:"varint,113,opt,name=isVirtualTest,proto3" json:"isVirtualTest,omitempty"`
	// @inject_tag: json:"isScheme" gorm:"default:是否开发方案[0:否 1:是];comment:是否开发方案[0:否 1:是];"
	IsScheme int32 `protobuf:"varint,114,opt,name=isScheme,proto3" json:"isScheme,omitempty"`
	// @inject_tag: json:"desc" gorm:"default:描述;comment:描述;size:500;"
	Desc string `protobuf:"bytes,115,opt,name=desc,proto3" json:"desc,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:20;"
	CreatedBy int64 `protobuf:"varint,116,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,117,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:20;"
	UpdatedBy int64 `protobuf:"varint,118,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,119,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除时间;comment:删除时间;"
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,120,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	// @inject_tag: json:"productTypeName" gorm:"default:产品分类名称;comment:产品分类名称;size:100;"
	ProductTypeName string `protobuf:"bytes,121,opt,name=productTypeName,proto3" json:"productTypeName,omitempty"`
	// @inject_tag: json:"tenantId" gorm:"default:租户id（t_open_company.tenant_id）;comment:租户id（t_open_company.tenant_id）;size:6;"
	TenantId string `protobuf:"bytes,122,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// @inject_tag: json:"productId" gorm:"default:产品品类ID;comment:产品品类ID;size:19;"
	ProductId int64 `protobuf:"varint,123,opt,name=productId,proto3" json:"productId,omitempty"`
	// @inject_tag: json:"controlPanelId" gorm:"default:面板编号;comment:面板编号;size:19;"
	ControlPanelId int64 `protobuf:"varint,124,opt,name=controlPanelId,proto3" json:"controlPanelId,omitempty"`
	// @inject_tag: json:"moduleId" gorm:"default:模组编号;comment:模组编号;size:19;"
	ModuleId int64 `protobuf:"varint,125,opt,name=moduleId,proto3" json:"moduleId,omitempty"`
	//设备性质
	DeviceNatureKey int32 `protobuf:"varint,126,opt,name=deviceNatureKey,proto3" json:"deviceNatureKey,omitempty"`
	//测试报告
	TestReport string `protobuf:"bytes,127,opt,name=testReport,proto3" json:"testReport,omitempty"`
	//配网类型
	DistributionType  int32  `protobuf:"varint,128,opt,name=distributionType,proto3" json:"distributionType,omitempty"`
	FirmwareId        int64  `protobuf:"varint,129,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`
	FirmwareVersionId int64  `protobuf:"varint,130,opt,name=firmwareVersionId,proto3" json:"firmwareVersionId,omitempty"`
	FirmwareVersion   string `protobuf:"bytes,132,opt,name=firmwareVersion,proto3" json:"firmwareVersion,omitempty"`
	//面板地址
	PanelUrl string `protobuf:"bytes,133,opt,name=panelUrl,proto3" json:"panelUrl,omitempty"`
	PanelKey string `protobuf:"bytes,134,opt,name=PanelKey,proto3" json:"PanelKey,omitempty"`
	//APP面板类型（=1 公版面板 =2 Studio面板 =3 自定义面板）
	AppPanelType int32 `protobuf:"varint,135,opt,name=appPanelType,proto3" json:"appPanelType,omitempty"`
	// @inject_tag: json:"tslUpdatedAt" gorm:"default:物模型修改时间;comment:物模型修改时间;"
	TslUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,136,opt,name=tslUpdatedAt,proto3" json:"tslUpdatedAt,omitempty"`
	IsUpgradeTsl int32                  `protobuf:"varint,137,opt,name=isUpgradeTsl,proto3" json:"isUpgradeTsl,omitempty"` //是否更新过tsl（用于面板更新）
	//面板信息（特定项目使用）
	PanelProImg   string `protobuf:"bytes,138,opt,name=panelProImg,proto3" json:"panelProImg,omitempty"`
	IsShowImg     int32  `protobuf:"varint,139,opt,name=isShowImg,proto3" json:"isShowImg,omitempty"`
	StyleLinkage  string `protobuf:"bytes,140,opt,name=styleLinkage,proto3" json:"styleLinkage,omitempty"`
	IsDemoProduct int32  `protobuf:"varint,141,opt,name=IsDemoProduct,proto3" json:"IsDemoProduct,omitempty"`
	//是否APP查詢
	IsAppQuery bool `protobuf:"varint,142,opt,name=isAppQuery,proto3" json:"isAppQuery,omitempty"`
}

func (x *OpmProduct) Reset() {
	*x = OpmProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmProduct) ProtoMessage() {}

func (x *OpmProduct) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmProduct.ProtoReflect.Descriptor instead.
func (*OpmProduct) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{0}
}

func (x *OpmProduct) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpmProduct) GetProductTypeId() int64 {
	if x != nil {
		return x.ProductTypeId
	}
	return 0
}

func (x *OpmProduct) GetProductKey() string {
	if x != nil {
		return x.ProductKey
	}
	return ""
}

func (x *OpmProduct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpmProduct) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *OpmProduct) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *OpmProduct) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *OpmProduct) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *OpmProduct) GetWifiFlag() string {
	if x != nil {
		return x.WifiFlag
	}
	return ""
}

func (x *OpmProduct) GetNetworkType() int32 {
	if x != nil {
		return x.NetworkType
	}
	return 0
}

func (x *OpmProduct) GetAttributeType() int32 {
	if x != nil {
		return x.AttributeType
	}
	return 0
}

func (x *OpmProduct) GetPowerConsumeType() int32 {
	if x != nil {
		return x.PowerConsumeType
	}
	return 0
}

func (x *OpmProduct) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OpmProduct) GetIsVirtualTest() int32 {
	if x != nil {
		return x.IsVirtualTest
	}
	return 0
}

func (x *OpmProduct) GetIsScheme() int32 {
	if x != nil {
		return x.IsScheme
	}
	return 0
}

func (x *OpmProduct) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *OpmProduct) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *OpmProduct) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OpmProduct) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *OpmProduct) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OpmProduct) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *OpmProduct) GetProductTypeName() string {
	if x != nil {
		return x.ProductTypeName
	}
	return ""
}

func (x *OpmProduct) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OpmProduct) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *OpmProduct) GetControlPanelId() int64 {
	if x != nil {
		return x.ControlPanelId
	}
	return 0
}

func (x *OpmProduct) GetModuleId() int64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *OpmProduct) GetDeviceNatureKey() int32 {
	if x != nil {
		return x.DeviceNatureKey
	}
	return 0
}

func (x *OpmProduct) GetTestReport() string {
	if x != nil {
		return x.TestReport
	}
	return ""
}

func (x *OpmProduct) GetDistributionType() int32 {
	if x != nil {
		return x.DistributionType
	}
	return 0
}

func (x *OpmProduct) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

func (x *OpmProduct) GetFirmwareVersionId() int64 {
	if x != nil {
		return x.FirmwareVersionId
	}
	return 0
}

func (x *OpmProduct) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *OpmProduct) GetPanelUrl() string {
	if x != nil {
		return x.PanelUrl
	}
	return ""
}

func (x *OpmProduct) GetPanelKey() string {
	if x != nil {
		return x.PanelKey
	}
	return ""
}

func (x *OpmProduct) GetAppPanelType() int32 {
	if x != nil {
		return x.AppPanelType
	}
	return 0
}

func (x *OpmProduct) GetTslUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TslUpdatedAt
	}
	return nil
}

func (x *OpmProduct) GetIsUpgradeTsl() int32 {
	if x != nil {
		return x.IsUpgradeTsl
	}
	return 0
}

func (x *OpmProduct) GetPanelProImg() string {
	if x != nil {
		return x.PanelProImg
	}
	return ""
}

func (x *OpmProduct) GetIsShowImg() int32 {
	if x != nil {
		return x.IsShowImg
	}
	return 0
}

func (x *OpmProduct) GetStyleLinkage() string {
	if x != nil {
		return x.StyleLinkage
	}
	return ""
}

func (x *OpmProduct) GetIsDemoProduct() int32 {
	if x != nil {
		return x.IsDemoProduct
	}
	return 0
}

func (x *OpmProduct) GetIsAppQuery() bool {
	if x != nil {
		return x.IsAppQuery
	}
	return false
}

type OpmProductFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:主键ID;comment:主键ID;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"productTypeId" gorm:"default:产品分类ID;comment:产品分类ID;size:19;"
	ProductTypeId int64 `protobuf:"varint,101,opt,name=productTypeId,proto3" json:"productTypeId,omitempty"`
	// @inject_tag: json:"productKey" gorm:"default:产品唯一标识;comment:产品唯一标识;size:16;"
	ProductKey string `protobuf:"bytes,102,opt,name=productKey,proto3" json:"productKey,omitempty"`
	// @inject_tag: json:"name" gorm:"default:产品品类名称;comment:产品品类名称;size:128;"
	Name string `protobuf:"bytes,103,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: json:"nameEn" gorm:"default:产品品类名称（英文）;comment:产品品类名称（英文）;size:128;"
	NameEn string `protobuf:"bytes,104,opt,name=nameEn,proto3" json:"nameEn,omitempty"`
	// @inject_tag: json:"identifier" gorm:"default:属性的标识符。可包含大小写英文字母、数字、下划线（_），长度不超过50个字符。;comment:属性的标识符。可包含大小写英文字母、数字、下划线（_），长度不超过50个字符。;size:50;"
	Identifier string `protobuf:"bytes,105,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// @inject_tag: json:"model" gorm:"default:产品品类型号;comment:产品品类型号;size:50;"
	Model string `protobuf:"bytes,106,opt,name=model,proto3" json:"model,omitempty"`
	// @inject_tag: json:"imageUrl" gorm:"default:产品品类图片;comment:产品品类图片;size:256;"
	ImageUrl string `protobuf:"bytes,107,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	// @inject_tag: json:"wifiFlag" gorm:"default:WIFI标识;comment:WIFI标识;size:50;"
	WifiFlag string `protobuf:"bytes,108,opt,name=wifiFlag,proto3" json:"wifiFlag,omitempty"`
	// @inject_tag: json:"networkType" gorm:"default:通信协议（WIFI, BLE, WIFI+BLE）;comment:通信协议（WIFI, BLE, WIFI+BLE）;size:10;"
	NetworkType int32 `protobuf:"varint,109,opt,name=networkType,proto3" json:"networkType,omitempty"`
	// @inject_tag: json:"attributeType" gorm:"default:设备性质（0:直连设备，1：网关，2：网关子设备）;comment:设备性质（0:直连设备，1：网关，2：网关子设备）;"
	AttributeType int32 `protobuf:"varint,110,opt,name=attributeType,proto3" json:"attributeType,omitempty"`
	// @inject_tag: json:"powerConsumeType" gorm:"default:功耗类型[0:标准功耗, 1:低功耗];comment:功耗类型[0:标准功耗, 1:低功耗];"
	PowerConsumeType int32 `protobuf:"varint,111,opt,name=powerConsumeType,proto3" json:"powerConsumeType,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态（0:未开发, 1:已开发）;comment:状态（0:未开发, 1:已开发）;"
	Status int32 `protobuf:"varint,112,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"isVirtualTest" gorm:"default:是否支持虚拟测试（0：否，1：是）;comment:是否支持虚拟测试（0：否，1：是）;"
	IsVirtualTest int32 `protobuf:"varint,113,opt,name=isVirtualTest,proto3" json:"isVirtualTest,omitempty"`
	// @inject_tag: json:"isScheme" gorm:"default:是否开发方案[0:否 1:是];comment:是否开发方案[0:否 1:是];"
	IsScheme int32 `protobuf:"varint,114,opt,name=isScheme,proto3" json:"isScheme,omitempty"`
	// @inject_tag: json:"desc" gorm:"default:描述;comment:描述;size:500;"
	Desc string `protobuf:"bytes,115,opt,name=desc,proto3" json:"desc,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:20;"
	CreatedBy int64 `protobuf:"varint,116,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,117,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:20;"
	UpdatedBy int64 `protobuf:"varint,118,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,119,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除时间;comment:删除时间;"
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,120,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	// @inject_tag: json:"productTypeName" gorm:"default:产品分类名称;comment:产品分类名称;size:100;"
	ProductTypeName string `protobuf:"bytes,121,opt,name=productTypeName,proto3" json:"productTypeName,omitempty"`
	// @inject_tag: json:"tenantId" gorm:"default:租户id（t_open_company.tenant_id）;comment:租户id（t_open_company.tenant_id）;size:6;"
	TenantId string `protobuf:"bytes,122,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// @inject_tag: json:"productId" gorm:"default:产品品类ID;comment:产品品类ID;size:19;"
	ProductId int64 `protobuf:"varint,123,opt,name=productId,proto3" json:"productId,omitempty"`
	// @inject_tag: json:"controlPanelId" gorm:"default:面板编号;comment:面板编号;size:19;"
	ControlPanelId int64 `protobuf:"varint,124,opt,name=controlPanelId,proto3" json:"controlPanelId,omitempty"`
	// @inject_tag: json:"moduleId" gorm:"default:模组编号;comment:模组编号;size:19;"
	ModuleId int64 `protobuf:"varint,125,opt,name=moduleId,proto3" json:"moduleId,omitempty"`
	//APP面板类型（=1 公版面板 =2 Studio面板 =3 自定义面板）
	AppPanelType  int32 `protobuf:"varint,126,opt,name=appPanelType,proto3" json:"appPanelType,omitempty"`
	IsDemoProduct int32 `protobuf:"varint,127,opt,name=IsDemoProduct,proto3" json:"IsDemoProduct,omitempty"`
}

func (x *OpmProductFilter) Reset() {
	*x = OpmProductFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmProductFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmProductFilter) ProtoMessage() {}

func (x *OpmProductFilter) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmProductFilter.ProtoReflect.Descriptor instead.
func (*OpmProductFilter) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{1}
}

func (x *OpmProductFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpmProductFilter) GetProductTypeId() int64 {
	if x != nil {
		return x.ProductTypeId
	}
	return 0
}

func (x *OpmProductFilter) GetProductKey() string {
	if x != nil {
		return x.ProductKey
	}
	return ""
}

func (x *OpmProductFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpmProductFilter) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *OpmProductFilter) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *OpmProductFilter) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *OpmProductFilter) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *OpmProductFilter) GetWifiFlag() string {
	if x != nil {
		return x.WifiFlag
	}
	return ""
}

func (x *OpmProductFilter) GetNetworkType() int32 {
	if x != nil {
		return x.NetworkType
	}
	return 0
}

func (x *OpmProductFilter) GetAttributeType() int32 {
	if x != nil {
		return x.AttributeType
	}
	return 0
}

func (x *OpmProductFilter) GetPowerConsumeType() int32 {
	if x != nil {
		return x.PowerConsumeType
	}
	return 0
}

func (x *OpmProductFilter) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OpmProductFilter) GetIsVirtualTest() int32 {
	if x != nil {
		return x.IsVirtualTest
	}
	return 0
}

func (x *OpmProductFilter) GetIsScheme() int32 {
	if x != nil {
		return x.IsScheme
	}
	return 0
}

func (x *OpmProductFilter) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *OpmProductFilter) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *OpmProductFilter) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OpmProductFilter) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *OpmProductFilter) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OpmProductFilter) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *OpmProductFilter) GetProductTypeName() string {
	if x != nil {
		return x.ProductTypeName
	}
	return ""
}

func (x *OpmProductFilter) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OpmProductFilter) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *OpmProductFilter) GetControlPanelId() int64 {
	if x != nil {
		return x.ControlPanelId
	}
	return 0
}

func (x *OpmProductFilter) GetModuleId() int64 {
	if x != nil {
		return x.ModuleId
	}
	return 0
}

func (x *OpmProductFilter) GetAppPanelType() int32 {
	if x != nil {
		return x.AppPanelType
	}
	return 0
}

func (x *OpmProductFilter) GetIsDemoProduct() int32 {
	if x != nil {
		return x.IsDemoProduct
	}
	return 0
}

type OpmProductListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query      *OpmProduct `protobuf:"bytes,101,opt,name=query,proto3" json:"query,omitempty"`
	Page       int64       `protobuf:"varint,102,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int64       `protobuf:"varint,103,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderKey   string      `protobuf:"bytes,104,opt,name=orderKey,proto3" json:"orderKey,omitempty"`
	OrderDesc  string      `protobuf:"bytes,105,opt,name=orderDesc,proto3" json:"orderDesc,omitempty"`
	SearchKey  string      `protobuf:"bytes,106,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
	IsPlatform bool        `protobuf:"varint,107,opt,name=isPlatform,proto3" json:"isPlatform,omitempty"` //是否平台查询
}

func (x *OpmProductListRequest) Reset() {
	*x = OpmProductListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmProductListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmProductListRequest) ProtoMessage() {}

func (x *OpmProductListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmProductListRequest.ProtoReflect.Descriptor instead.
func (*OpmProductListRequest) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{2}
}

func (x *OpmProductListRequest) GetQuery() *OpmProduct {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *OpmProductListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *OpmProductListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *OpmProductListRequest) GetOrderKey() string {
	if x != nil {
		return x.OrderKey
	}
	return ""
}

func (x *OpmProductListRequest) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *OpmProductListRequest) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

func (x *OpmProductListRequest) GetIsPlatform() bool {
	if x != nil {
		return x.IsPlatform
	}
	return false
}

type OpmProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32         `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64         `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*OpmProduct `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *OpmProductResponse) Reset() {
	*x = OpmProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmProductResponse) ProtoMessage() {}

func (x *OpmProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmProductResponse.ProtoReflect.Descriptor instead.
func (*OpmProductResponse) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{3}
}

func (x *OpmProductResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OpmProductResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OpmProductResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OpmProductResponse) GetData() []*OpmProduct {
	if x != nil {
		return x.Data
	}
	return nil
}

type OpmProductUpdateFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string    `protobuf:"bytes,101,rep,name=fields,proto3" json:"fields,omitempty"`
	Data   *OpmProduct `protobuf:"bytes,102,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OpmProductUpdateFieldsRequest) Reset() {
	*x = OpmProductUpdateFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmProductUpdateFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmProductUpdateFieldsRequest) ProtoMessage() {}

func (x *OpmProductUpdateFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmProductUpdateFieldsRequest.ProtoReflect.Descriptor instead.
func (*OpmProductUpdateFieldsRequest) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{4}
}

func (x *OpmProductUpdateFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *OpmProductUpdateFieldsRequest) GetData() *OpmProduct {
	if x != nil {
		return x.Data
	}
	return nil
}

// 表模型主键，只能是整数或字符串，若生成错误，请检查数据库表主键是否正确。支持组合主键
type OpmProductPrimarykey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OpmProductPrimarykey) Reset() {
	*x = OpmProductPrimarykey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmProductPrimarykey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmProductPrimarykey) ProtoMessage() {}

func (x *OpmProductPrimarykey) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmProductPrimarykey.ProtoReflect.Descriptor instead.
func (*OpmProductPrimarykey) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{5}
}

func (x *OpmProductPrimarykey) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type OpmProductBatchDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*OpmProductPrimarykey `protobuf:"bytes,101,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *OpmProductBatchDeleteRequest) Reset() {
	*x = OpmProductBatchDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmProductBatchDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmProductBatchDeleteRequest) ProtoMessage() {}

func (x *OpmProductBatchDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmProductBatchDeleteRequest.ProtoReflect.Descriptor instead.
func (*OpmProductBatchDeleteRequest) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{6}
}

func (x *OpmProductBatchDeleteRequest) GetKeys() []*OpmProductPrimarykey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type PmModuleVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:唯一主键;comment:唯一主键;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"moduleName" gorm:"default:模组芯片名称;comment:模组芯片名称;size:50;"
	ModuleName string `protobuf:"bytes,101,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	// @inject_tag: json:"firmwareType" gorm:"default:固件类型;comment:固件类型;"
	FirmwareType string `protobuf:"bytes,102,opt,name=firmwareType,proto3" json:"firmwareType,omitempty"`
	// @inject_tag: json:"firmwareFlag" gorm:"default:固件标识;comment:固件标识;size:50;"
	FirmwareFlag string `protobuf:"bytes,103,opt,name=firmwareFlag,proto3" json:"firmwareFlag,omitempty"`
	// @inject_tag: json:"firmwareId" gorm:"default:固件编号;comment:固件编号;size:19;"
	FirmwareId int64 `protobuf:"varint,104,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态（=1启用 =2 禁用）;comment:状态（=1启用 =2 禁用）;size:10;"
	Status int32 `protobuf:"varint,105,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"imgUrl" gorm:"default:操作类型;comment:操作类型;size:255;"
	ImgUrl string `protobuf:"bytes,106,opt,name=imgUrl,proto3" json:"imgUrl,omitempty"`
	// @inject_tag: json:"fileUrl" gorm:"default:操作说明;comment:操作说明;size:255;"
	FileUrl string `protobuf:"bytes,107,opt,name=fileUrl,proto3" json:"fileUrl,omitempty"`
	// @inject_tag: json:"remark" gorm:"default:备注;comment:备注;size:255;"
	Remark string `protobuf:"bytes,108,opt,name=remark,proto3" json:"remark,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,109,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:19;"
	UpdatedBy int64 `protobuf:"varint,110,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,111,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除标识（0-正常 1-删除）;comment:删除标识（0-正常 1-删除）;"
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,112,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	// @inject_tag: json:"moduleNameEn" gorm:"default:英文名称;comment:英文名称;size:50;"
	ModuleNameEn string `protobuf:"bytes,113,opt,name=moduleNameEn,proto3" json:"moduleNameEn,omitempty"`
	// @inject_tag: json:"firmwareName" gorm:"default:固件名称;comment:固件名称;size:50;"
	FirmwareName   string `protobuf:"bytes,114,opt,name=firmwareName,proto3" json:"firmwareName,omitempty"`
	Version        string `protobuf:"bytes,115,opt,name=version,proto3" json:"version,omitempty"`     //版本号
	VersionId      string `protobuf:"bytes,116,opt,name=versionId,proto3" json:"versionId,omitempty"` //版本号编号
	FirmwareKey    string `protobuf:"bytes,117,opt,name=firmwareKey,proto3" json:"firmwareKey,omitempty"`
	FirmwareNameEn string `protobuf:"bytes,118,opt,name=firmwareNameEn,proto3" json:"firmwareNameEn,omitempty"`
}

func (x *PmModuleVo) Reset() {
	*x = PmModuleVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmModuleVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmModuleVo) ProtoMessage() {}

func (x *PmModuleVo) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmModuleVo.ProtoReflect.Descriptor instead.
func (*PmModuleVo) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{7}
}

func (x *PmModuleVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PmModuleVo) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *PmModuleVo) GetFirmwareType() string {
	if x != nil {
		return x.FirmwareType
	}
	return ""
}

func (x *PmModuleVo) GetFirmwareFlag() string {
	if x != nil {
		return x.FirmwareFlag
	}
	return ""
}

func (x *PmModuleVo) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

func (x *PmModuleVo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PmModuleVo) GetImgUrl() string {
	if x != nil {
		return x.ImgUrl
	}
	return ""
}

func (x *PmModuleVo) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *PmModuleVo) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *PmModuleVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PmModuleVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *PmModuleVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PmModuleVo) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *PmModuleVo) GetModuleNameEn() string {
	if x != nil {
		return x.ModuleNameEn
	}
	return ""
}

func (x *PmModuleVo) GetFirmwareName() string {
	if x != nil {
		return x.FirmwareName
	}
	return ""
}

func (x *PmModuleVo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PmModuleVo) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *PmModuleVo) GetFirmwareKey() string {
	if x != nil {
		return x.FirmwareKey
	}
	return ""
}

func (x *PmModuleVo) GetFirmwareNameEn() string {
	if x != nil {
		return x.FirmwareNameEn
	}
	return ""
}

type PmModuleVoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32         `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64         `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*PmModuleVo `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PmModuleVoResponse) Reset() {
	*x = PmModuleVoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmModuleVoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmModuleVoResponse) ProtoMessage() {}

func (x *PmModuleVoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmModuleVoResponse.ProtoReflect.Descriptor instead.
func (*PmModuleVoResponse) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{8}
}

func (x *PmModuleVoResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PmModuleVoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PmModuleVoResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PmModuleVoResponse) GetData() []*PmModuleVo {
	if x != nil {
		return x.Data
	}
	return nil
}

type PmControlPanelsVoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string               `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64                `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*PmControlPanelsVo `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PmControlPanelsVoResponse) Reset() {
	*x = PmControlPanelsVoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmControlPanelsVoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmControlPanelsVoResponse) ProtoMessage() {}

func (x *PmControlPanelsVoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmControlPanelsVoResponse.ProtoReflect.Descriptor instead.
func (*PmControlPanelsVoResponse) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{9}
}

func (x *PmControlPanelsVoResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PmControlPanelsVoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PmControlPanelsVoResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PmControlPanelsVoResponse) GetData() []*PmControlPanelsVo {
	if x != nil {
		return x.Data
	}
	return nil
}

//来源于数据表
type PmControlPanelsVo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:面板模板 - 唯一主键 ;comment:面板模板 - 唯一主键 ;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"name" gorm:"default:面板名称;comment:面板名称;size:50;"
	Name string `protobuf:"bytes,101,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: json:"nameEn" gorm:"default:面板英文名称;comment:面板英文名称;size:50;"
	NameEn string `protobuf:"bytes,102,opt,name=nameEn,proto3" json:"nameEn,omitempty"`
	// @inject_tag: json:"lang" gorm:"default:面板语言,预留;comment:面板语言,预留;size:36;"
	Lang string `protobuf:"bytes,103,opt,name=lang,proto3" json:"lang,omitempty"`
	// @inject_tag: json:"desc" gorm:"default:面板描述;comment:面板描述;size:255;"
	Desc string `protobuf:"bytes,104,opt,name=desc,proto3" json:"desc,omitempty"`
	// @inject_tag: json:"url" gorm:"default:面板地址;comment:面板地址;size:255;"
	Url string `protobuf:"bytes,105,opt,name=url,proto3" json:"url,omitempty"`
	// @inject_tag: json:"urlName" gorm:"default:面板文件名称;comment:面板文件名称;size:64;"
	UrlName string `protobuf:"bytes,106,opt,name=urlName,proto3" json:"urlName,omitempty"`
	// @inject_tag: json:"panelSize" gorm:"default:面板大小;comment:面板大小;size:10;"
	PanelSize int32 `protobuf:"varint,107,opt,name=panelSize,proto3" json:"panelSize,omitempty"`
	// @inject_tag: json:"previewName" gorm:"default:预览图名称;comment:预览图名称;size:64;"
	PreviewName string `protobuf:"bytes,108,opt,name=previewName,proto3" json:"previewName,omitempty"`
	// @inject_tag: json:"previewUrl" gorm:"default:面板地址;comment:面板地址;size:255;"
	PreviewUrl string `protobuf:"bytes,109,opt,name=previewUrl,proto3" json:"previewUrl,omitempty"`
	// @inject_tag: json:"previewSize" gorm:"default:预览图大小;comment:预览图大小;size:10;"
	PreviewSize int32 `protobuf:"varint,110,opt,name=previewSize,proto3" json:"previewSize,omitempty"`
	// @inject_tag: json:"productTypeId" gorm:"default:产品分类编号;comment:产品分类编号;size:19;"
	ProductTypeId int64 `protobuf:"varint,111,opt,name=productTypeId,proto3" json:"productTypeId,omitempty"`
	// @inject_tag: json:"productId" gorm:"default:产品品类编号;comment:产品品类编号;size:19;"
	ProductId int64 `protobuf:"varint,112,opt,name=productId,proto3" json:"productId,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态（1=启用 2=禁用）;comment:状态（1=启用 2=禁用）;size:10;"
	Status int32 `protobuf:"varint,113,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:20;"
	CreatedBy int64 `protobuf:"varint,114,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:20;"
	UpdatedBy int64 `protobuf:"varint,115,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,116,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,117,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除时间;comment:删除时间;"
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,118,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
}

func (x *PmControlPanelsVo) Reset() {
	*x = PmControlPanelsVo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmControlPanelsVo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmControlPanelsVo) ProtoMessage() {}

func (x *PmControlPanelsVo) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmControlPanelsVo.ProtoReflect.Descriptor instead.
func (*PmControlPanelsVo) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{10}
}

func (x *PmControlPanelsVo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PmControlPanelsVo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PmControlPanelsVo) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *PmControlPanelsVo) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *PmControlPanelsVo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PmControlPanelsVo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PmControlPanelsVo) GetUrlName() string {
	if x != nil {
		return x.UrlName
	}
	return ""
}

func (x *PmControlPanelsVo) GetPanelSize() int32 {
	if x != nil {
		return x.PanelSize
	}
	return 0
}

func (x *PmControlPanelsVo) GetPreviewName() string {
	if x != nil {
		return x.PreviewName
	}
	return ""
}

func (x *PmControlPanelsVo) GetPreviewUrl() string {
	if x != nil {
		return x.PreviewUrl
	}
	return ""
}

func (x *PmControlPanelsVo) GetPreviewSize() int32 {
	if x != nil {
		return x.PreviewSize
	}
	return 0
}

func (x *PmControlPanelsVo) GetProductTypeId() int64 {
	if x != nil {
		return x.ProductTypeId
	}
	return 0
}

func (x *PmControlPanelsVo) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *PmControlPanelsVo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PmControlPanelsVo) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *PmControlPanelsVo) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *PmControlPanelsVo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PmControlPanelsVo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PmControlPanelsVo) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

//控制面板编号集合
type ControlPanelIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPanelIds []int64 `protobuf:"varint,101,rep,packed,name=controlPanelIds,proto3" json:"controlPanelIds,omitempty"`
	ProductTypeId   int64   `protobuf:"varint,102,opt,name=ProductTypeId,proto3" json:"ProductTypeId,omitempty"`
	ProductId       int64   `protobuf:"varint,103,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
}

func (x *ControlPanelIdsRequest) Reset() {
	*x = ControlPanelIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPanelIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPanelIdsRequest) ProtoMessage() {}

func (x *ControlPanelIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPanelIdsRequest.ProtoReflect.Descriptor instead.
func (*ControlPanelIdsRequest) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{11}
}

func (x *ControlPanelIdsRequest) GetControlPanelIds() []int64 {
	if x != nil {
		return x.ControlPanelIds
	}
	return nil
}

func (x *ControlPanelIdsRequest) GetProductTypeId() int64 {
	if x != nil {
		return x.ProductTypeId
	}
	return 0
}

func (x *ControlPanelIdsRequest) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

//模组固件编号集合集合
type ModuleIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleIds     []int64 `protobuf:"varint,101,rep,packed,name=moduleIds,proto3" json:"moduleIds,omitempty"`
	ProductTypeId int64   `protobuf:"varint,102,opt,name=ProductTypeId,proto3" json:"ProductTypeId,omitempty"`
	ProductId     int64   `protobuf:"varint,103,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
}

func (x *ModuleIdsRequest) Reset() {
	*x = ModuleIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleIdsRequest) ProtoMessage() {}

func (x *ModuleIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleIdsRequest.ProtoReflect.Descriptor instead.
func (*ModuleIdsRequest) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{12}
}

func (x *ModuleIdsRequest) GetModuleIds() []int64 {
	if x != nil {
		return x.ModuleIds
	}
	return nil
}

func (x *ModuleIdsRequest) GetProductTypeId() int64 {
	if x != nil {
		return x.ProductTypeId
	}
	return 0
}

func (x *ModuleIdsRequest) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type AppOpmProductListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *AppOpmProduct `protobuf:"bytes,101,opt,name=query,proto3" json:"query,omitempty"`
	Page      int64          `protobuf:"varint,102,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64          `protobuf:"varint,103,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderKey  string         `protobuf:"bytes,104,opt,name=orderKey,proto3" json:"orderKey,omitempty"`
	OrderDesc string         `protobuf:"bytes,105,opt,name=orderDesc,proto3" json:"orderDesc,omitempty"`
}

func (x *AppOpmProductListRequest) Reset() {
	*x = AppOpmProductListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppOpmProductListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppOpmProductListRequest) ProtoMessage() {}

func (x *AppOpmProductListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppOpmProductListRequest.ProtoReflect.Descriptor instead.
func (*AppOpmProductListRequest) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{13}
}

func (x *AppOpmProductListRequest) GetQuery() *AppOpmProduct {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *AppOpmProductListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AppOpmProductListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *AppOpmProductListRequest) GetOrderKey() string {
	if x != nil {
		return x.OrderKey
	}
	return ""
}

func (x *AppOpmProductListRequest) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

//来源于数据表
type AppOpmProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:主键ID;comment:主键ID;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"productTypeId" gorm:"default:产品品类ID;comment:产品品类ID;size:19;"
	ProductTypeId int64 `protobuf:"varint,101,opt,name=productTypeId,proto3" json:"productTypeId,omitempty"`
	// @inject_tag: json:"wifiFlag" gorm:"default:WIFI标识;comment:WIFI标识;size:50;"
	WifiFlag string `protobuf:"bytes,102,opt,name=wifiFlag,proto3" json:"wifiFlag,omitempty"`
	// @inject_tag: json:"productTypeName" gorm:"default:产品分类名称;comment:产品分类名称;size:100;"
	ProductTypeName string   `protobuf:"bytes,103,opt,name=productTypeName,proto3" json:"productTypeName,omitempty"`
	WifiFlags       []string `protobuf:"bytes,104,rep,name=wifiFlags,proto3" json:"wifiFlags,omitempty"`
	// @inject_tag: json:"baseProductId" gorm:"default:产品类型ID;comment:产品类型ID;size:19;"
	BaseProductId      int64 `protobuf:"varint,105,opt,name=baseProductId,proto3" json:"baseProductId,omitempty"`
	IsCheckTestAccount bool  `protobuf:"varint,106,opt,name=IsCheckTestAccount,proto3" json:"IsCheckTestAccount,omitempty"`
	//是否APP查詢
	IsAppQuery bool `protobuf:"varint,107,opt,name=isAppQuery,proto3" json:"isAppQuery,omitempty"`
	//APP KEy
	AppKey string `protobuf:"bytes,108,opt,name=appKey,proto3" json:"appKey,omitempty"`
	//租户Id
	TenantId string `protobuf:"bytes,109,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *AppOpmProduct) Reset() {
	*x = AppOpmProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppOpmProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppOpmProduct) ProtoMessage() {}

func (x *AppOpmProduct) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppOpmProduct.ProtoReflect.Descriptor instead.
func (*AppOpmProduct) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{14}
}

func (x *AppOpmProduct) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AppOpmProduct) GetProductTypeId() int64 {
	if x != nil {
		return x.ProductTypeId
	}
	return 0
}

func (x *AppOpmProduct) GetWifiFlag() string {
	if x != nil {
		return x.WifiFlag
	}
	return ""
}

func (x *AppOpmProduct) GetProductTypeName() string {
	if x != nil {
		return x.ProductTypeName
	}
	return ""
}

func (x *AppOpmProduct) GetWifiFlags() []string {
	if x != nil {
		return x.WifiFlags
	}
	return nil
}

func (x *AppOpmProduct) GetBaseProductId() int64 {
	if x != nil {
		return x.BaseProductId
	}
	return 0
}

func (x *AppOpmProduct) GetIsCheckTestAccount() bool {
	if x != nil {
		return x.IsCheckTestAccount
	}
	return false
}

func (x *AppOpmProduct) GetIsAppQuery() bool {
	if x != nil {
		return x.IsAppQuery
	}
	return false
}

func (x *AppOpmProduct) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *AppOpmProduct) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type OpmProductAllDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code            int32                    `protobuf:"varint,100,opt,name=code,proto3" json:"code,omitempty"`
	Message         string                   `protobuf:"bytes,101,opt,name=message,proto3" json:"message,omitempty"`
	Product         *OpmProduct              `protobuf:"bytes,102,opt,name=product,proto3" json:"product,omitempty"`
	ThingModes      *OpmThingModelAllList    `protobuf:"bytes,103,opt,name=thingModes,proto3" json:"thingModes,omitempty"`
	Module          *PmModule                `protobuf:"bytes,104,opt,name=module,proto3" json:"module,omitempty"`
	ControlPanel    *PmControlPanels         `protobuf:"bytes,105,opt,name=controlPanel,proto3" json:"controlPanel,omitempty"`
	BaseProduct     *BaseProductDetail       `protobuf:"bytes,106,opt,name=BaseProduct,proto3" json:"BaseProduct,omitempty"`
	CustomFirmwares []*OpmFirmwareSelectInfo `protobuf:"bytes,107,rep,name=customFirmwares,proto3" json:"customFirmwares,omitempty"`
}

func (x *OpmProductAllDetails) Reset() {
	*x = OpmProductAllDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmProductAllDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmProductAllDetails) ProtoMessage() {}

func (x *OpmProductAllDetails) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmProductAllDetails.ProtoReflect.Descriptor instead.
func (*OpmProductAllDetails) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{15}
}

func (x *OpmProductAllDetails) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OpmProductAllDetails) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OpmProductAllDetails) GetProduct() *OpmProduct {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *OpmProductAllDetails) GetThingModes() *OpmThingModelAllList {
	if x != nil {
		return x.ThingModes
	}
	return nil
}

func (x *OpmProductAllDetails) GetModule() *PmModule {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *OpmProductAllDetails) GetControlPanel() *PmControlPanels {
	if x != nil {
		return x.ControlPanel
	}
	return nil
}

func (x *OpmProductAllDetails) GetBaseProduct() *BaseProductDetail {
	if x != nil {
		return x.BaseProduct
	}
	return nil
}

func (x *OpmProductAllDetails) GetCustomFirmwares() []*OpmFirmwareSelectInfo {
	if x != nil {
		return x.CustomFirmwares
	}
	return nil
}

type BaseProductDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               //主键（雪花算法19位）
	ProductTypeId int64  `protobuf:"varint,2,opt,name=product_type_id,json=productTypeId,proto3" json:"product_type_id,omitempty"`  //产品类型ID
	ProductKey    string `protobuf:"bytes,3,opt,name=product_key,json=productKey,proto3" json:"product_key,omitempty"`              //产品唯一标识
	Name          string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                            //产品名称
	NameEn        string `protobuf:"bytes,5,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`                          //产品名称（英文）
	Identifier    string `protobuf:"bytes,6,opt,name=identifier,proto3" json:"identifier,omitempty"`                                //属性的标识符。可包含大小写英文字母、数字、下划线（_），长度不超过50个字符。
	Model         string `protobuf:"bytes,7,opt,name=model,proto3" json:"model,omitempty"`                                          //产品型号
	ImageUrl      string `protobuf:"bytes,8,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`                    //产品图片
	WifiFlag      string `protobuf:"bytes,9,opt,name=wifi_flag,json=wifiFlag,proto3" json:"wifi_flag,omitempty"`                    //WIFI标识
	NetworkType   int32  `protobuf:"varint,10,opt,name=network_type,json=networkType,proto3" json:"network_type,omitempty"`         //通信协议（WIFI, BLE, WIFI&#43;BLE）
	AttributeType int32  `protobuf:"varint,11,opt,name=attribute_type,json=attributeType,proto3" json:"attribute_type,omitempty"`   //设备性质（0:普通设备，1：网关设备）
	Status        int32  `protobuf:"varint,12,opt,name=status,proto3" json:"status,omitempty"`                                      //状态（0：未发布，1：已发布，2：停用）
	IsVirtualTest int32  `protobuf:"varint,13,opt,name=is_virtual_test,json=isVirtualTest,proto3" json:"is_virtual_test,omitempty"` //是否支持虚拟测试（0：否，1：是）
}

func (x *BaseProductDetail) Reset() {
	*x = BaseProductDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseProductDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseProductDetail) ProtoMessage() {}

func (x *BaseProductDetail) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseProductDetail.ProtoReflect.Descriptor instead.
func (*BaseProductDetail) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{16}
}

func (x *BaseProductDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BaseProductDetail) GetProductTypeId() int64 {
	if x != nil {
		return x.ProductTypeId
	}
	return 0
}

func (x *BaseProductDetail) GetProductKey() string {
	if x != nil {
		return x.ProductKey
	}
	return ""
}

func (x *BaseProductDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BaseProductDetail) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *BaseProductDetail) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *BaseProductDetail) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *BaseProductDetail) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *BaseProductDetail) GetWifiFlag() string {
	if x != nil {
		return x.WifiFlag
	}
	return ""
}

func (x *BaseProductDetail) GetNetworkType() int32 {
	if x != nil {
		return x.NetworkType
	}
	return 0
}

func (x *BaseProductDetail) GetAttributeType() int32 {
	if x != nil {
		return x.AttributeType
	}
	return 0
}

func (x *BaseProductDetail) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *BaseProductDetail) GetIsVirtualTest() int32 {
	if x != nil {
		return x.IsVirtualTest
	}
	return 0
}

type ControlPanelsUrlAndMd5Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId int64 `protobuf:"varint,101,opt,name=ProductId,proto3" json:"ProductId,omitempty"`
	//APP面板
	PanelId int64 `protobuf:"varint,102,opt,name=panelId,proto3" json:"panelId,omitempty"`
	//APP面板类型
	AppPanelType int32 `protobuf:"varint,103,opt,name=appPanelType,proto3" json:"appPanelType,omitempty"`
}

func (x *ControlPanelsUrlAndMd5Request) Reset() {
	*x = ControlPanelsUrlAndMd5Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPanelsUrlAndMd5Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPanelsUrlAndMd5Request) ProtoMessage() {}

func (x *ControlPanelsUrlAndMd5Request) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPanelsUrlAndMd5Request.ProtoReflect.Descriptor instead.
func (*ControlPanelsUrlAndMd5Request) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{17}
}

func (x *ControlPanelsUrlAndMd5Request) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ControlPanelsUrlAndMd5Request) GetPanelId() int64 {
	if x != nil {
		return x.PanelId
	}
	return 0
}

func (x *ControlPanelsUrlAndMd5Request) GetAppPanelType() int32 {
	if x != nil {
		return x.AppPanelType
	}
	return 0
}

type ControlPanelsUrlAndMd5Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           int32  `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message        string `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Url            string `protobuf:"bytes,103,opt,name=url,proto3" json:"url,omitempty"`                       //产品名称
	ControlpageMd5 string `protobuf:"bytes,104,opt,name=controlpageMd5,proto3" json:"controlpageMd5,omitempty"` //产品名称（英文）
}

func (x *ControlPanelsUrlAndMd5Response) Reset() {
	*x = ControlPanelsUrlAndMd5Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPanelsUrlAndMd5Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPanelsUrlAndMd5Response) ProtoMessage() {}

func (x *ControlPanelsUrlAndMd5Response) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPanelsUrlAndMd5Response.ProtoReflect.Descriptor instead.
func (*ControlPanelsUrlAndMd5Response) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{18}
}

func (x *ControlPanelsUrlAndMd5Response) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ControlPanelsUrlAndMd5Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ControlPanelsUrlAndMd5Response) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ControlPanelsUrlAndMd5Response) GetControlpageMd5() string {
	if x != nil {
		return x.ControlpageMd5
	}
	return ""
}

type ListsByProductIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductIds  []int64  `protobuf:"varint,101,rep,packed,name=productIds,proto3" json:"productIds,omitempty"`
	ProductKeys []string `protobuf:"bytes,102,rep,name=productKeys,proto3" json:"productKeys,omitempty"`
}

func (x *ListsByProductIdsRequest) Reset() {
	*x = ListsByProductIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListsByProductIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListsByProductIdsRequest) ProtoMessage() {}

func (x *ListsByProductIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListsByProductIdsRequest.ProtoReflect.Descriptor instead.
func (*ListsByProductIdsRequest) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{19}
}

func (x *ListsByProductIdsRequest) GetProductIds() []int64 {
	if x != nil {
		return x.ProductIds
	}
	return nil
}

func (x *ListsByProductIdsRequest) GetProductKeys() []string {
	if x != nil {
		return x.ProductKeys
	}
	return nil
}

type CreateDemoProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseProductId  int64  `protobuf:"varint,101,opt,name=BaseProductId,proto3" json:"BaseProductId,omitempty"` //产品类型
	UserId         int64  `protobuf:"varint,102,opt,name=userId,proto3" json:"userId,omitempty"`               //用户Id
	ControlPanelId int64  `protobuf:"varint,103,opt,name=controlPanelId,proto3" json:"controlPanelId,omitempty"`
	TenantId       string `protobuf:"bytes,104,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *CreateDemoProductRequest) Reset() {
	*x = CreateDemoProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDemoProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDemoProductRequest) ProtoMessage() {}

func (x *CreateDemoProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDemoProductRequest.ProtoReflect.Descriptor instead.
func (*CreateDemoProductRequest) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{20}
}

func (x *CreateDemoProductRequest) GetBaseProductId() int64 {
	if x != nil {
		return x.BaseProductId
	}
	return 0
}

func (x *CreateDemoProductRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateDemoProductRequest) GetControlPanelId() int64 {
	if x != nil {
		return x.ControlPanelId
	}
	return 0
}

func (x *CreateDemoProductRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type CreateDemoProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32       `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string      `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64       `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    *OpmProduct `protobuf:"bytes,104,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateDemoProductResponse) Reset() {
	*x = CreateDemoProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDemoProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDemoProductResponse) ProtoMessage() {}

func (x *CreateDemoProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDemoProductResponse.ProtoReflect.Descriptor instead.
func (*CreateDemoProductResponse) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{21}
}

func (x *CreateDemoProductResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateDemoProductResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateDemoProductResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *CreateDemoProductResponse) GetData() *OpmProduct {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProductPanelInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                   `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string                  `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64                   `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*ProductPanelInfoItem `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ProductPanelInfoResponse) Reset() {
	*x = ProductPanelInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductPanelInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductPanelInfoResponse) ProtoMessage() {}

func (x *ProductPanelInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductPanelInfoResponse.ProtoReflect.Descriptor instead.
func (*ProductPanelInfoResponse) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{22}
}

func (x *ProductPanelInfoResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ProductPanelInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProductPanelInfoResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProductPanelInfoResponse) GetData() []*ProductPanelInfoItem {
	if x != nil {
		return x.Data
	}
	return nil
}

type ProductPanelInfoItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId  int64  `protobuf:"varint,101,opt,name=productId,proto3" json:"productId,omitempty"`
	ProductKey string `protobuf:"bytes,102,opt,name=productKey,proto3" json:"productKey,omitempty"`
	PanelId    string `protobuf:"bytes,103,opt,name=panelId,proto3" json:"panelId,omitempty"`
	PanelType  int32  `protobuf:"varint,104,opt,name=panelType,proto3" json:"panelType,omitempty"`
	PanelCode  string `protobuf:"bytes,105,opt,name=panelCode,proto3" json:"panelCode,omitempty"`
	PanelKey   string `protobuf:"bytes,106,opt,name=panelKey,proto3" json:"panelKey,omitempty"`
}

func (x *ProductPanelInfoItem) Reset() {
	*x = ProductPanelInfoItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_model_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductPanelInfoItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductPanelInfoItem) ProtoMessage() {}

func (x *ProductPanelInfoItem) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_model_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductPanelInfoItem.ProtoReflect.Descriptor instead.
func (*ProductPanelInfoItem) Descriptor() ([]byte, []int) {
	return file_opm_product_model_proto_rawDescGZIP(), []int{23}
}

func (x *ProductPanelInfoItem) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ProductPanelInfoItem) GetProductKey() string {
	if x != nil {
		return x.ProductKey
	}
	return ""
}

func (x *ProductPanelInfoItem) GetPanelId() string {
	if x != nil {
		return x.PanelId
	}
	return ""
}

func (x *ProductPanelInfoItem) GetPanelType() int32 {
	if x != nil {
		return x.PanelType
	}
	return 0
}

func (x *ProductPanelInfoItem) GetPanelCode() string {
	if x != nil {
		return x.PanelCode
	}
	return ""
}

func (x *ProductPanelInfoItem) GetPanelKey() string {
	if x != nil {
		return x.PanelKey
	}
	return ""
}

var File_opm_product_model_proto protoreflect.FileDescriptor

var file_opm_product_model_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6f, 0x70, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x6f, 0x70, 0x6d, 0x5f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x70, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6f, 0x70, 0x6d, 0x5f, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd6, 0x0b, 0x0a, 0x0a, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4b, 0x65, 0x79, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x66, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x66, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x12,
	0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69,
	0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x18, 0x71, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x72, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x74,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x75, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x76, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x78,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x79,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x7b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x7f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a,
	0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x11, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x84, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x55, 0x72,
	0x6c, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x55,
	0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x08, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x18, 0x86,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12,
	0x23, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x87, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x73, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x74, 0x73, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x73, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x73, 0x6c, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x73,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x73, 0x6c, 0x12, 0x21, 0x0a, 0x0b, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x49, 0x6d, 0x67, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x49, 0x6d, 0x67, 0x12, 0x1d, 0x0a,
	0x09, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6d, 0x67, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x69, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x49, 0x6d, 0x67, 0x12, 0x23, 0x0a, 0x0c,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x8c, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x0d, 0x49, 0x73, 0x44, 0x65, 0x6d, 0x6f, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49, 0x73, 0x44, 0x65, 0x6d,
	0x6f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x70,
	0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x41, 0x70, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0xc0, 0x07, 0x0a, 0x10, 0x4f, 0x70,
	0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65,
	0x45, 0x6e, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x66, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x66, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x6d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x70, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x18, 0x71, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x72, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x74, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x75, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x76, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x78, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x79, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x7b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x18, 0x7c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x44, 0x65, 0x6d, 0x6f,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x49,
	0x73, 0x44, 0x65, 0x6d, 0x6f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0xea, 0x01, 0x0a,
	0x15, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x4f, 0x70,
	0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x68, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x60, 0x0a,
	0x1d, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f,
	0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x26, 0x0a, 0x14, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x1c, 0x4f, 0x70, 0x6d, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x6b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x9c, 0x05, 0x0a, 0x0a, 0x50,
	0x6d, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x61,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67,
	0x55, 0x72, 0x6c, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x72,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x6b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x18,
	0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x74,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x75,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x18, 0x76, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x50, 0x6d,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x68, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6d, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8f, 0x01,
	0x0a, 0x19, 0x50, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x73, 0x56, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x68, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x56, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xeb, 0x04, 0x0a, 0x11, 0x50, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x73, 0x56, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x55, 0x72, 0x6c, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x71, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x72, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x73,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x74, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x86, 0x01,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a,
	0x18, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73,
	0x63, 0x22, 0xd3, 0x02, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x66,
	0x69, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x66,
	0x69, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x77, 0x69, 0x66, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x68, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x77, 0x69, 0x66, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x65,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x49, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x41, 0x70, 0x70, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x70, 0x70, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x6c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa3, 0x03, 0x0a, 0x14, 0x4f, 0x70, 0x6d, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x3d, 0x0a,
	0x0a, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x54,
	0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0a, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6d, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x12, 0x3c, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x73, 0x18, 0x6b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x73, 0x22, 0x93, 0x03,
	0x0a, 0x11, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x69, 0x66, 0x69, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x77, 0x69, 0x66, 0x69, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69,
	0x73, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54,
	0x65, 0x73, 0x74, 0x22, 0x7b, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x73, 0x55, 0x72, 0x6c, 0x41, 0x6e, 0x64, 0x4d, 0x64, 0x35, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x70, 0x70, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x88, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x73, 0x55, 0x72, 0x6c, 0x41, 0x6e, 0x64, 0x4d, 0x64, 0x35, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x61,
	0x67, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x4d, 0x64, 0x35, 0x22, 0x5c, 0x0a, 0x18, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x66, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6d, 0x6f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x42,
	0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x6d, 0x6f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x91, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x68, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x79,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x79,
	0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opm_product_model_proto_rawDescOnce sync.Once
	file_opm_product_model_proto_rawDescData = file_opm_product_model_proto_rawDesc
)

func file_opm_product_model_proto_rawDescGZIP() []byte {
	file_opm_product_model_proto_rawDescOnce.Do(func() {
		file_opm_product_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_opm_product_model_proto_rawDescData)
	})
	return file_opm_product_model_proto_rawDescData
}

var file_opm_product_model_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_opm_product_model_proto_goTypes = []interface{}{
	(*OpmProduct)(nil),                     // 0: service.OpmProduct
	(*OpmProductFilter)(nil),               // 1: service.OpmProductFilter
	(*OpmProductListRequest)(nil),          // 2: service.OpmProductListRequest
	(*OpmProductResponse)(nil),             // 3: service.OpmProductResponse
	(*OpmProductUpdateFieldsRequest)(nil),  // 4: service.OpmProductUpdateFieldsRequest
	(*OpmProductPrimarykey)(nil),           // 5: service.OpmProductPrimarykey
	(*OpmProductBatchDeleteRequest)(nil),   // 6: service.OpmProductBatchDeleteRequest
	(*PmModuleVo)(nil),                     // 7: service.PmModuleVo
	(*PmModuleVoResponse)(nil),             // 8: service.PmModuleVoResponse
	(*PmControlPanelsVoResponse)(nil),      // 9: service.PmControlPanelsVoResponse
	(*PmControlPanelsVo)(nil),              // 10: service.PmControlPanelsVo
	(*ControlPanelIdsRequest)(nil),         // 11: service.ControlPanelIdsRequest
	(*ModuleIdsRequest)(nil),               // 12: service.ModuleIdsRequest
	(*AppOpmProductListRequest)(nil),       // 13: service.AppOpmProductListRequest
	(*AppOpmProduct)(nil),                  // 14: service.AppOpmProduct
	(*OpmProductAllDetails)(nil),           // 15: service.OpmProductAllDetails
	(*BaseProductDetail)(nil),              // 16: service.BaseProductDetail
	(*ControlPanelsUrlAndMd5Request)(nil),  // 17: service.ControlPanelsUrlAndMd5Request
	(*ControlPanelsUrlAndMd5Response)(nil), // 18: service.ControlPanelsUrlAndMd5Response
	(*ListsByProductIdsRequest)(nil),       // 19: service.ListsByProductIdsRequest
	(*CreateDemoProductRequest)(nil),       // 20: service.CreateDemoProductRequest
	(*CreateDemoProductResponse)(nil),      // 21: service.CreateDemoProductResponse
	(*ProductPanelInfoResponse)(nil),       // 22: service.ProductPanelInfoResponse
	(*ProductPanelInfoItem)(nil),           // 23: service.ProductPanelInfoItem
	(*timestamppb.Timestamp)(nil),          // 24: google.protobuf.Timestamp
	(*OpmThingModelAllList)(nil),           // 25: service.OpmThingModelAllList
	(*PmModule)(nil),                       // 26: service.PmModule
	(*PmControlPanels)(nil),                // 27: service.PmControlPanels
	(*OpmFirmwareSelectInfo)(nil),          // 28: service.OpmFirmwareSelectInfo
}
var file_opm_product_model_proto_depIdxs = []int32{
	24, // 0: service.OpmProduct.createdAt:type_name -> google.protobuf.Timestamp
	24, // 1: service.OpmProduct.updatedAt:type_name -> google.protobuf.Timestamp
	24, // 2: service.OpmProduct.deletedAt:type_name -> google.protobuf.Timestamp
	24, // 3: service.OpmProduct.tslUpdatedAt:type_name -> google.protobuf.Timestamp
	24, // 4: service.OpmProductFilter.createdAt:type_name -> google.protobuf.Timestamp
	24, // 5: service.OpmProductFilter.updatedAt:type_name -> google.protobuf.Timestamp
	24, // 6: service.OpmProductFilter.deletedAt:type_name -> google.protobuf.Timestamp
	0,  // 7: service.OpmProductListRequest.query:type_name -> service.OpmProduct
	0,  // 8: service.OpmProductResponse.data:type_name -> service.OpmProduct
	0,  // 9: service.OpmProductUpdateFieldsRequest.data:type_name -> service.OpmProduct
	5,  // 10: service.OpmProductBatchDeleteRequest.keys:type_name -> service.OpmProductPrimarykey
	24, // 11: service.PmModuleVo.createdAt:type_name -> google.protobuf.Timestamp
	24, // 12: service.PmModuleVo.updatedAt:type_name -> google.protobuf.Timestamp
	24, // 13: service.PmModuleVo.deletedAt:type_name -> google.protobuf.Timestamp
	7,  // 14: service.PmModuleVoResponse.data:type_name -> service.PmModuleVo
	10, // 15: service.PmControlPanelsVoResponse.data:type_name -> service.PmControlPanelsVo
	24, // 16: service.PmControlPanelsVo.createdAt:type_name -> google.protobuf.Timestamp
	24, // 17: service.PmControlPanelsVo.updatedAt:type_name -> google.protobuf.Timestamp
	24, // 18: service.PmControlPanelsVo.deletedAt:type_name -> google.protobuf.Timestamp
	14, // 19: service.AppOpmProductListRequest.query:type_name -> service.AppOpmProduct
	0,  // 20: service.OpmProductAllDetails.product:type_name -> service.OpmProduct
	25, // 21: service.OpmProductAllDetails.thingModes:type_name -> service.OpmThingModelAllList
	26, // 22: service.OpmProductAllDetails.module:type_name -> service.PmModule
	27, // 23: service.OpmProductAllDetails.controlPanel:type_name -> service.PmControlPanels
	16, // 24: service.OpmProductAllDetails.BaseProduct:type_name -> service.BaseProductDetail
	28, // 25: service.OpmProductAllDetails.customFirmwares:type_name -> service.OpmFirmwareSelectInfo
	0,  // 26: service.CreateDemoProductResponse.data:type_name -> service.OpmProduct
	23, // 27: service.ProductPanelInfoResponse.data:type_name -> service.ProductPanelInfoItem
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_opm_product_model_proto_init() }
func file_opm_product_model_proto_init() {
	if File_opm_product_model_proto != nil {
		return
	}
	file_opm_thing_model_model_proto_init()
	file_pm_module_model_proto_init()
	file_pm_control_panels_model_proto_init()
	file_opm_firmware_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_opm_product_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmProductFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmProductListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmProductUpdateFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmProductPrimarykey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmProductBatchDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmModuleVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmModuleVoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmControlPanelsVoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmControlPanelsVo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPanelIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppOpmProductListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppOpmProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmProductAllDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseProductDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPanelsUrlAndMd5Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPanelsUrlAndMd5Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListsByProductIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDemoProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDemoProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductPanelInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_model_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductPanelInfoItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opm_product_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opm_product_model_proto_goTypes,
		DependencyIndexes: file_opm_product_model_proto_depIdxs,
		MessageInfos:      file_opm_product_model_proto_msgTypes,
	}.Build()
	File_opm_product_model_proto = out.File
	file_opm_product_model_proto_rawDesc = nil
	file_opm_product_model_proto_goTypes = nil
	file_opm_product_model_proto_depIdxs = nil
}
