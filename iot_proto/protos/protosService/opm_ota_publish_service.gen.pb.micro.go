// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: opm_ota_publish_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpmOtaPublishService service

func NewOpmOtaPublishServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpmOtaPublishService.Create",
			Path:    []string{"/v1/opmOtaPublish/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPublishService.Delete",
			Path:    []string{"/v1/opmOtaPublish/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPublishService.DeleteById",
			Path:    []string{"/v1/opmOtaPublish/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPublishService.DeleteByIds",
			Path:    []string{"/v1/opmOtaPublish/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPublishService.Update",
			Path:    []string{"/v1/opmOtaPublish/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPublishService.UpdateAll",
			Path:    []string{"/v1/opmOtaPublish/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPublishService.UpdateFields",
			Path:    []string{"/v1/opmOtaPublish/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPublishService.FindById",
			Path:    []string{"/v1/opmOtaPublish/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPublishService.Find",
			Path:    []string{"/v1/opmOtaPublish/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPublishService.Lists",
			Path:    []string{"/v1/opmOtaPublish/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPublishService.CheckOtaVersion",
			Path:    []string{"/v1/opmOtaPublish/checkOtaVersion"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPublishService.CheckOtaUpgradeList",
			Path:    []string{"/v1/opmOtaPublish/checkOtaUpgradeList"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpmOtaPublishService service

type OpmOtaPublishService interface {
	//创建
	Create(ctx context.Context, in *OpmOtaPublish, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpmOtaPublish, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpmOtaPublish, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpmOtaPublishBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpmOtaPublish, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpmOtaPublish, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpmOtaPublishUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpmOtaPublishFilter, opts ...client.CallOption) (*OpmOtaPublishResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpmOtaPublishFilter, opts ...client.CallOption) (*OpmOtaPublishResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpmOtaPublishListRequest, opts ...client.CallOption) (*OpmOtaPublishResponse, error)
	//检查OTA升级信息
	CheckOtaVersion(ctx context.Context, in *CheckOtaVersionRequest, opts ...client.CallOption) (*CheckOtaVersionResponse, error)
	//检查OTA升级列表，根据固件类型全部返回
	CheckOtaUpgradeList(ctx context.Context, in *CheckOtaVersionRequest, opts ...client.CallOption) (*CheckOtaListResponse, error)
}

type opmOtaPublishService struct {
	c    client.Client
	name string
}

func NewOpmOtaPublishService(name string, c client.Client) OpmOtaPublishService {
	return &opmOtaPublishService{
		c:    c,
		name: name,
	}
}

func (c *opmOtaPublishService) Create(ctx context.Context, in *OpmOtaPublish, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPublishService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPublishService) Delete(ctx context.Context, in *OpmOtaPublish, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPublishService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPublishService) DeleteById(ctx context.Context, in *OpmOtaPublish, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPublishService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPublishService) DeleteByIds(ctx context.Context, in *OpmOtaPublishBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPublishService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPublishService) Update(ctx context.Context, in *OpmOtaPublish, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPublishService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPublishService) UpdateAll(ctx context.Context, in *OpmOtaPublish, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPublishService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPublishService) UpdateFields(ctx context.Context, in *OpmOtaPublishUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPublishService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPublishService) FindById(ctx context.Context, in *OpmOtaPublishFilter, opts ...client.CallOption) (*OpmOtaPublishResponse, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPublishService.FindById", in)
	out := new(OpmOtaPublishResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPublishService) Find(ctx context.Context, in *OpmOtaPublishFilter, opts ...client.CallOption) (*OpmOtaPublishResponse, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPublishService.Find", in)
	out := new(OpmOtaPublishResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPublishService) Lists(ctx context.Context, in *OpmOtaPublishListRequest, opts ...client.CallOption) (*OpmOtaPublishResponse, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPublishService.Lists", in)
	out := new(OpmOtaPublishResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPublishService) CheckOtaVersion(ctx context.Context, in *CheckOtaVersionRequest, opts ...client.CallOption) (*CheckOtaVersionResponse, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPublishService.CheckOtaVersion", in)
	out := new(CheckOtaVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPublishService) CheckOtaUpgradeList(ctx context.Context, in *CheckOtaVersionRequest, opts ...client.CallOption) (*CheckOtaListResponse, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPublishService.CheckOtaUpgradeList", in)
	out := new(CheckOtaListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpmOtaPublishService service

type OpmOtaPublishServiceHandler interface {
	//创建
	Create(context.Context, *OpmOtaPublish, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpmOtaPublish, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpmOtaPublish, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpmOtaPublishBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpmOtaPublish, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpmOtaPublish, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpmOtaPublishUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpmOtaPublishFilter, *OpmOtaPublishResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpmOtaPublishFilter, *OpmOtaPublishResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpmOtaPublishListRequest, *OpmOtaPublishResponse) error
	//检查OTA升级信息
	CheckOtaVersion(context.Context, *CheckOtaVersionRequest, *CheckOtaVersionResponse) error
	//检查OTA升级列表，根据固件类型全部返回
	CheckOtaUpgradeList(context.Context, *CheckOtaVersionRequest, *CheckOtaListResponse) error
}

func RegisterOpmOtaPublishServiceHandler(s server.Server, hdlr OpmOtaPublishServiceHandler, opts ...server.HandlerOption) error {
	type opmOtaPublishService interface {
		Create(ctx context.Context, in *OpmOtaPublish, out *Response) error
		Delete(ctx context.Context, in *OpmOtaPublish, out *Response) error
		DeleteById(ctx context.Context, in *OpmOtaPublish, out *Response) error
		DeleteByIds(ctx context.Context, in *OpmOtaPublishBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpmOtaPublish, out *Response) error
		UpdateAll(ctx context.Context, in *OpmOtaPublish, out *Response) error
		UpdateFields(ctx context.Context, in *OpmOtaPublishUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpmOtaPublishFilter, out *OpmOtaPublishResponse) error
		Find(ctx context.Context, in *OpmOtaPublishFilter, out *OpmOtaPublishResponse) error
		Lists(ctx context.Context, in *OpmOtaPublishListRequest, out *OpmOtaPublishResponse) error
		CheckOtaVersion(ctx context.Context, in *CheckOtaVersionRequest, out *CheckOtaVersionResponse) error
		CheckOtaUpgradeList(ctx context.Context, in *CheckOtaVersionRequest, out *CheckOtaListResponse) error
	}
	type OpmOtaPublishService struct {
		opmOtaPublishService
	}
	h := &opmOtaPublishServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPublishService.Create",
		Path:    []string{"/v1/opmOtaPublish/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPublishService.Delete",
		Path:    []string{"/v1/opmOtaPublish/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPublishService.DeleteById",
		Path:    []string{"/v1/opmOtaPublish/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPublishService.DeleteByIds",
		Path:    []string{"/v1/opmOtaPublish/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPublishService.Update",
		Path:    []string{"/v1/opmOtaPublish/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPublishService.UpdateAll",
		Path:    []string{"/v1/opmOtaPublish/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPublishService.UpdateFields",
		Path:    []string{"/v1/opmOtaPublish/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPublishService.FindById",
		Path:    []string{"/v1/opmOtaPublish/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPublishService.Find",
		Path:    []string{"/v1/opmOtaPublish/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPublishService.Lists",
		Path:    []string{"/v1/opmOtaPublish/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPublishService.CheckOtaVersion",
		Path:    []string{"/v1/opmOtaPublish/checkOtaVersion"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPublishService.CheckOtaUpgradeList",
		Path:    []string{"/v1/opmOtaPublish/checkOtaUpgradeList"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpmOtaPublishService{h}, opts...))
}

type opmOtaPublishServiceHandler struct {
	OpmOtaPublishServiceHandler
}

func (h *opmOtaPublishServiceHandler) Create(ctx context.Context, in *OpmOtaPublish, out *Response) error {
	return h.OpmOtaPublishServiceHandler.Create(ctx, in, out)
}

func (h *opmOtaPublishServiceHandler) Delete(ctx context.Context, in *OpmOtaPublish, out *Response) error {
	return h.OpmOtaPublishServiceHandler.Delete(ctx, in, out)
}

func (h *opmOtaPublishServiceHandler) DeleteById(ctx context.Context, in *OpmOtaPublish, out *Response) error {
	return h.OpmOtaPublishServiceHandler.DeleteById(ctx, in, out)
}

func (h *opmOtaPublishServiceHandler) DeleteByIds(ctx context.Context, in *OpmOtaPublishBatchDeleteRequest, out *Response) error {
	return h.OpmOtaPublishServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *opmOtaPublishServiceHandler) Update(ctx context.Context, in *OpmOtaPublish, out *Response) error {
	return h.OpmOtaPublishServiceHandler.Update(ctx, in, out)
}

func (h *opmOtaPublishServiceHandler) UpdateAll(ctx context.Context, in *OpmOtaPublish, out *Response) error {
	return h.OpmOtaPublishServiceHandler.UpdateAll(ctx, in, out)
}

func (h *opmOtaPublishServiceHandler) UpdateFields(ctx context.Context, in *OpmOtaPublishUpdateFieldsRequest, out *Response) error {
	return h.OpmOtaPublishServiceHandler.UpdateFields(ctx, in, out)
}

func (h *opmOtaPublishServiceHandler) FindById(ctx context.Context, in *OpmOtaPublishFilter, out *OpmOtaPublishResponse) error {
	return h.OpmOtaPublishServiceHandler.FindById(ctx, in, out)
}

func (h *opmOtaPublishServiceHandler) Find(ctx context.Context, in *OpmOtaPublishFilter, out *OpmOtaPublishResponse) error {
	return h.OpmOtaPublishServiceHandler.Find(ctx, in, out)
}

func (h *opmOtaPublishServiceHandler) Lists(ctx context.Context, in *OpmOtaPublishListRequest, out *OpmOtaPublishResponse) error {
	return h.OpmOtaPublishServiceHandler.Lists(ctx, in, out)
}

func (h *opmOtaPublishServiceHandler) CheckOtaVersion(ctx context.Context, in *CheckOtaVersionRequest, out *CheckOtaVersionResponse) error {
	return h.OpmOtaPublishServiceHandler.CheckOtaVersion(ctx, in, out)
}

func (h *opmOtaPublishServiceHandler) CheckOtaUpgradeList(ctx context.Context, in *CheckOtaVersionRequest, out *CheckOtaListResponse) error {
	return h.OpmOtaPublishServiceHandler.CheckOtaUpgradeList(ctx, in, out)
}