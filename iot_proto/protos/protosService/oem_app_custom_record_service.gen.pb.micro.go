// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: oem_app_custom_record_service.gen.proto

package protosService

import (
	// _ "/api"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OemAppCustomRecordService service

func NewOemAppCustomRecordServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OemAppCustomRecordService.Create",
			Path:    []string{"/v1/oemAppCustomRecord/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppCustomRecordService.Delete",
			Path:    []string{"/v1/oemAppCustomRecord/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppCustomRecordService.DeleteById",
			Path:    []string{"/v1/oemAppCustomRecord/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppCustomRecordService.DeleteByIds",
			Path:    []string{"/v1/oemAppCustomRecord/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppCustomRecordService.Update",
			Path:    []string{"/v1/oemAppCustomRecord/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppCustomRecordService.UpdateAll",
			Path:    []string{"/v1/oemAppCustomRecord/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppCustomRecordService.UpdateFields",
			Path:    []string{"/v1/oemAppCustomRecord/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppCustomRecordService.FindById",
			Path:    []string{"/v1/oemAppCustomRecord/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppCustomRecordService.Find",
			Path:    []string{"/v1/oemAppCustomRecord/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppCustomRecordService.Lists",
			Path:    []string{"/v1/oemAppCustomRecord/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppCustomRecordService.GetLastVersion",
			Path:    []string{"/v1/oemAppCustomRecord/getLastVersion"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OemAppCustomRecordService service

type OemAppCustomRecordService interface {
	//创建
	Create(ctx context.Context, in *OemAppCustomRecord, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OemAppCustomRecord, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OemAppCustomRecord, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OemAppCustomRecordBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OemAppCustomRecord, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OemAppCustomRecord, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OemAppCustomRecordUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OemAppCustomRecordFilter, opts ...client.CallOption) (*OemAppCustomRecordResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OemAppCustomRecordFilter, opts ...client.CallOption) (*OemAppCustomRecordResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OemAppCustomRecordListRequest, opts ...client.CallOption) (*OemAppCustomRecordResponse, error)
	//获取app最新得版本信息
	GetLastVersion(ctx context.Context, in *OemAppCustomRecordFilter, opts ...client.CallOption) (*OemAppCustomRecordResponse, error)
}

type oemAppCustomRecordService struct {
	c    client.Client
	name string
}

func NewOemAppCustomRecordService(name string, c client.Client) OemAppCustomRecordService {
	return &oemAppCustomRecordService{
		c:    c,
		name: name,
	}
}

func (c *oemAppCustomRecordService) Create(ctx context.Context, in *OemAppCustomRecord, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppCustomRecordService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppCustomRecordService) Delete(ctx context.Context, in *OemAppCustomRecord, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppCustomRecordService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppCustomRecordService) DeleteById(ctx context.Context, in *OemAppCustomRecord, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppCustomRecordService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppCustomRecordService) DeleteByIds(ctx context.Context, in *OemAppCustomRecordBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppCustomRecordService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppCustomRecordService) Update(ctx context.Context, in *OemAppCustomRecord, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppCustomRecordService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppCustomRecordService) UpdateAll(ctx context.Context, in *OemAppCustomRecord, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppCustomRecordService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppCustomRecordService) UpdateFields(ctx context.Context, in *OemAppCustomRecordUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppCustomRecordService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppCustomRecordService) FindById(ctx context.Context, in *OemAppCustomRecordFilter, opts ...client.CallOption) (*OemAppCustomRecordResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppCustomRecordService.FindById", in)
	out := new(OemAppCustomRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppCustomRecordService) Find(ctx context.Context, in *OemAppCustomRecordFilter, opts ...client.CallOption) (*OemAppCustomRecordResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppCustomRecordService.Find", in)
	out := new(OemAppCustomRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppCustomRecordService) Lists(ctx context.Context, in *OemAppCustomRecordListRequest, opts ...client.CallOption) (*OemAppCustomRecordResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppCustomRecordService.Lists", in)
	out := new(OemAppCustomRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppCustomRecordService) GetLastVersion(ctx context.Context, in *OemAppCustomRecordFilter, opts ...client.CallOption) (*OemAppCustomRecordResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppCustomRecordService.GetLastVersion", in)
	out := new(OemAppCustomRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OemAppCustomRecordService service

type OemAppCustomRecordServiceHandler interface {
	//创建
	Create(context.Context, *OemAppCustomRecord, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OemAppCustomRecord, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OemAppCustomRecord, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OemAppCustomRecordBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OemAppCustomRecord, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OemAppCustomRecord, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OemAppCustomRecordUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OemAppCustomRecordFilter, *OemAppCustomRecordResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OemAppCustomRecordFilter, *OemAppCustomRecordResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OemAppCustomRecordListRequest, *OemAppCustomRecordResponse) error
	//获取app最新得版本信息
	GetLastVersion(context.Context, *OemAppCustomRecordFilter, *OemAppCustomRecordResponse) error
}

func RegisterOemAppCustomRecordServiceHandler(s server.Server, hdlr OemAppCustomRecordServiceHandler, opts ...server.HandlerOption) error {
	type oemAppCustomRecordService interface {
		Create(ctx context.Context, in *OemAppCustomRecord, out *Response) error
		Delete(ctx context.Context, in *OemAppCustomRecord, out *Response) error
		DeleteById(ctx context.Context, in *OemAppCustomRecord, out *Response) error
		DeleteByIds(ctx context.Context, in *OemAppCustomRecordBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OemAppCustomRecord, out *Response) error
		UpdateAll(ctx context.Context, in *OemAppCustomRecord, out *Response) error
		UpdateFields(ctx context.Context, in *OemAppCustomRecordUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OemAppCustomRecordFilter, out *OemAppCustomRecordResponse) error
		Find(ctx context.Context, in *OemAppCustomRecordFilter, out *OemAppCustomRecordResponse) error
		Lists(ctx context.Context, in *OemAppCustomRecordListRequest, out *OemAppCustomRecordResponse) error
		GetLastVersion(ctx context.Context, in *OemAppCustomRecordFilter, out *OemAppCustomRecordResponse) error
	}
	type OemAppCustomRecordService struct {
		oemAppCustomRecordService
	}
	h := &oemAppCustomRecordServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppCustomRecordService.Create",
		Path:    []string{"/v1/oemAppCustomRecord/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppCustomRecordService.Delete",
		Path:    []string{"/v1/oemAppCustomRecord/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppCustomRecordService.DeleteById",
		Path:    []string{"/v1/oemAppCustomRecord/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppCustomRecordService.DeleteByIds",
		Path:    []string{"/v1/oemAppCustomRecord/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppCustomRecordService.Update",
		Path:    []string{"/v1/oemAppCustomRecord/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppCustomRecordService.UpdateAll",
		Path:    []string{"/v1/oemAppCustomRecord/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppCustomRecordService.UpdateFields",
		Path:    []string{"/v1/oemAppCustomRecord/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppCustomRecordService.FindById",
		Path:    []string{"/v1/oemAppCustomRecord/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppCustomRecordService.Find",
		Path:    []string{"/v1/oemAppCustomRecord/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppCustomRecordService.Lists",
		Path:    []string{"/v1/oemAppCustomRecord/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppCustomRecordService.GetLastVersion",
		Path:    []string{"/v1/oemAppCustomRecord/getLastVersion"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OemAppCustomRecordService{h}, opts...))
}

type oemAppCustomRecordServiceHandler struct {
	OemAppCustomRecordServiceHandler
}

func (h *oemAppCustomRecordServiceHandler) Create(ctx context.Context, in *OemAppCustomRecord, out *Response) error {
	return h.OemAppCustomRecordServiceHandler.Create(ctx, in, out)
}

func (h *oemAppCustomRecordServiceHandler) Delete(ctx context.Context, in *OemAppCustomRecord, out *Response) error {
	return h.OemAppCustomRecordServiceHandler.Delete(ctx, in, out)
}

func (h *oemAppCustomRecordServiceHandler) DeleteById(ctx context.Context, in *OemAppCustomRecord, out *Response) error {
	return h.OemAppCustomRecordServiceHandler.DeleteById(ctx, in, out)
}

func (h *oemAppCustomRecordServiceHandler) DeleteByIds(ctx context.Context, in *OemAppCustomRecordBatchDeleteRequest, out *Response) error {
	return h.OemAppCustomRecordServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *oemAppCustomRecordServiceHandler) Update(ctx context.Context, in *OemAppCustomRecord, out *Response) error {
	return h.OemAppCustomRecordServiceHandler.Update(ctx, in, out)
}

func (h *oemAppCustomRecordServiceHandler) UpdateAll(ctx context.Context, in *OemAppCustomRecord, out *Response) error {
	return h.OemAppCustomRecordServiceHandler.UpdateAll(ctx, in, out)
}

func (h *oemAppCustomRecordServiceHandler) UpdateFields(ctx context.Context, in *OemAppCustomRecordUpdateFieldsRequest, out *Response) error {
	return h.OemAppCustomRecordServiceHandler.UpdateFields(ctx, in, out)
}

func (h *oemAppCustomRecordServiceHandler) FindById(ctx context.Context, in *OemAppCustomRecordFilter, out *OemAppCustomRecordResponse) error {
	return h.OemAppCustomRecordServiceHandler.FindById(ctx, in, out)
}

func (h *oemAppCustomRecordServiceHandler) Find(ctx context.Context, in *OemAppCustomRecordFilter, out *OemAppCustomRecordResponse) error {
	return h.OemAppCustomRecordServiceHandler.Find(ctx, in, out)
}

func (h *oemAppCustomRecordServiceHandler) Lists(ctx context.Context, in *OemAppCustomRecordListRequest, out *OemAppCustomRecordResponse) error {
	return h.OemAppCustomRecordServiceHandler.Lists(ctx, in, out)
}

func (h *oemAppCustomRecordServiceHandler) GetLastVersion(ctx context.Context, in *OemAppCustomRecordFilter, out *OemAppCustomRecordResponse) error {
	return h.OemAppCustomRecordServiceHandler.GetLastVersion(ctx, in, out)
}
