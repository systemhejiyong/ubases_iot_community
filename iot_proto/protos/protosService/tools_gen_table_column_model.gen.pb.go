// Code generated by protoc,2022-04-18 19:12:11. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: tools_gen_table_column_model.gen.proto

package protosService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//来源于数据表
type ToolsGenTableColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"columnId" gorm:"primary_key;AUTO_INCREMENT;default:编号;comment:编号;size:19;"
	ColumnId int64 `protobuf:"varint,100,opt,name=columnId,proto3" json:"columnId,omitempty"`
	// @inject_tag: json:"tableId" gorm:"default:归属表编号;comment:归属表编号;size:19;"
	TableId int64 `protobuf:"varint,101,opt,name=tableId,proto3" json:"tableId,omitempty"`
	// @inject_tag: json:"columnName" gorm:"default:列名称;comment:列名称;size:200;"
	ColumnName string `protobuf:"bytes,102,opt,name=columnName,proto3" json:"columnName,omitempty"`
	// @inject_tag: json:"columnComment" gorm:"default:列描述;comment:列描述;size:500;"
	ColumnComment string `protobuf:"bytes,103,opt,name=columnComment,proto3" json:"columnComment,omitempty"`
	// @inject_tag: json:"columnType" gorm:"default:列类型;comment:列类型;size:100;"
	ColumnType string `protobuf:"bytes,104,opt,name=columnType,proto3" json:"columnType,omitempty"`
	// @inject_tag: json:"goType" gorm:"default:Go类型;comment:Go类型;size:500;"
	GoType string `protobuf:"bytes,105,opt,name=goType,proto3" json:"goType,omitempty"`
	// @inject_tag: json:"goField" gorm:"default:Go字段名;comment:Go字段名;size:200;"
	GoField string `protobuf:"bytes,106,opt,name=goField,proto3" json:"goField,omitempty"`
	// @inject_tag: json:"htmlField" gorm:"default:html字段名;comment:html字段名;size:200;"
	HtmlField string `protobuf:"bytes,107,opt,name=htmlField,proto3" json:"htmlField,omitempty"`
	// @inject_tag: json:"isPk" gorm:"default:是否主键（1是）;comment:是否主键（1是）;"
	IsPk string `protobuf:"bytes,108,opt,name=isPk,proto3" json:"isPk,omitempty"`
	// @inject_tag: json:"isIncrement" gorm:"default:是否自增（1是）;comment:是否自增（1是）;"
	IsIncrement string `protobuf:"bytes,109,opt,name=isIncrement,proto3" json:"isIncrement,omitempty"`
	// @inject_tag: json:"isRequired" gorm:"default:是否必填（1是）;comment:是否必填（1是）;"
	IsRequired string `protobuf:"bytes,110,opt,name=isRequired,proto3" json:"isRequired,omitempty"`
	// @inject_tag: json:"isInsert" gorm:"default:是否为插入字段（1是）;comment:是否为插入字段（1是）;"
	IsInsert string `protobuf:"bytes,111,opt,name=isInsert,proto3" json:"isInsert,omitempty"`
	// @inject_tag: json:"isEdit" gorm:"default:是否编辑字段（1是）;comment:是否编辑字段（1是）;"
	IsEdit string `protobuf:"bytes,112,opt,name=isEdit,proto3" json:"isEdit,omitempty"`
	// @inject_tag: json:"isList" gorm:"default:是否列表字段（1是）;comment:是否列表字段（1是）;"
	IsList string `protobuf:"bytes,113,opt,name=isList,proto3" json:"isList,omitempty"`
	// @inject_tag: json:"isQuery" gorm:"default:是否查询字段（1是）;comment:是否查询字段（1是）;"
	IsQuery string `protobuf:"bytes,114,opt,name=isQuery,proto3" json:"isQuery,omitempty"`
	// @inject_tag: json:"queryType" gorm:"default:查询方式（等于、不等于、大于、小于、范围）;comment:查询方式（等于、不等于、大于、小于、范围）;size:200;"
	QueryType string `protobuf:"bytes,115,opt,name=queryType,proto3" json:"queryType,omitempty"`
	// @inject_tag: json:"htmlType" gorm:"default:显示类型（文本框、文本域、下拉框、复选框、单选框、日期控件）;comment:显示类型（文本框、文本域、下拉框、复选框、单选框、日期控件）;size:200;"
	HtmlType string `protobuf:"bytes,116,opt,name=htmlType,proto3" json:"htmlType,omitempty"`
	// @inject_tag: json:"dictType" gorm:"default:字典类型;comment:字典类型;size:200;"
	DictType string `protobuf:"bytes,117,opt,name=dictType,proto3" json:"dictType,omitempty"`
	// @inject_tag: json:"sort" gorm:"default:排序;comment:排序;size:10;"
	Sort int32 `protobuf:"varint,118,opt,name=sort,proto3" json:"sort,omitempty"`
	// @inject_tag: json:"linkTableName" gorm:"default:关联表名;comment:关联表名;size:50;"
	LinkTableName string `protobuf:"bytes,119,opt,name=linkTableName,proto3" json:"linkTableName,omitempty"`
	// @inject_tag: json:"linkTableClass" gorm:"default:关联表类名;comment:关联表类名;size:50;"
	LinkTableClass string `protobuf:"bytes,120,opt,name=linkTableClass,proto3" json:"linkTableClass,omitempty"`
	// @inject_tag: json:"linkTablePackage" gorm:"default:关联表包名;comment:关联表包名;size:150;"
	LinkTablePackage string `protobuf:"bytes,121,opt,name=linkTablePackage,proto3" json:"linkTablePackage,omitempty"`
	// @inject_tag: json:"linkLabelId" gorm:"default:关联表键名;comment:关联表键名;size:50;"
	LinkLabelId string `protobuf:"bytes,122,opt,name=linkLabelId,proto3" json:"linkLabelId,omitempty"`
	// @inject_tag: json:"linkLabelName" gorm:"default:关联表字段值;comment:关联表字段值;size:50;"
	LinkLabelName string `protobuf:"bytes,123,opt,name=linkLabelName,proto3" json:"linkLabelName,omitempty"`
}

func (x *ToolsGenTableColumn) Reset() {
	*x = ToolsGenTableColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_gen_table_column_model_gen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolsGenTableColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolsGenTableColumn) ProtoMessage() {}

func (x *ToolsGenTableColumn) ProtoReflect() protoreflect.Message {
	mi := &file_tools_gen_table_column_model_gen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolsGenTableColumn.ProtoReflect.Descriptor instead.
func (*ToolsGenTableColumn) Descriptor() ([]byte, []int) {
	return file_tools_gen_table_column_model_gen_proto_rawDescGZIP(), []int{0}
}

func (x *ToolsGenTableColumn) GetColumnId() int64 {
	if x != nil {
		return x.ColumnId
	}
	return 0
}

func (x *ToolsGenTableColumn) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *ToolsGenTableColumn) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *ToolsGenTableColumn) GetColumnComment() string {
	if x != nil {
		return x.ColumnComment
	}
	return ""
}

func (x *ToolsGenTableColumn) GetColumnType() string {
	if x != nil {
		return x.ColumnType
	}
	return ""
}

func (x *ToolsGenTableColumn) GetGoType() string {
	if x != nil {
		return x.GoType
	}
	return ""
}

func (x *ToolsGenTableColumn) GetGoField() string {
	if x != nil {
		return x.GoField
	}
	return ""
}

func (x *ToolsGenTableColumn) GetHtmlField() string {
	if x != nil {
		return x.HtmlField
	}
	return ""
}

func (x *ToolsGenTableColumn) GetIsPk() string {
	if x != nil {
		return x.IsPk
	}
	return ""
}

func (x *ToolsGenTableColumn) GetIsIncrement() string {
	if x != nil {
		return x.IsIncrement
	}
	return ""
}

func (x *ToolsGenTableColumn) GetIsRequired() string {
	if x != nil {
		return x.IsRequired
	}
	return ""
}

func (x *ToolsGenTableColumn) GetIsInsert() string {
	if x != nil {
		return x.IsInsert
	}
	return ""
}

func (x *ToolsGenTableColumn) GetIsEdit() string {
	if x != nil {
		return x.IsEdit
	}
	return ""
}

func (x *ToolsGenTableColumn) GetIsList() string {
	if x != nil {
		return x.IsList
	}
	return ""
}

func (x *ToolsGenTableColumn) GetIsQuery() string {
	if x != nil {
		return x.IsQuery
	}
	return ""
}

func (x *ToolsGenTableColumn) GetQueryType() string {
	if x != nil {
		return x.QueryType
	}
	return ""
}

func (x *ToolsGenTableColumn) GetHtmlType() string {
	if x != nil {
		return x.HtmlType
	}
	return ""
}

func (x *ToolsGenTableColumn) GetDictType() string {
	if x != nil {
		return x.DictType
	}
	return ""
}

func (x *ToolsGenTableColumn) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ToolsGenTableColumn) GetLinkTableName() string {
	if x != nil {
		return x.LinkTableName
	}
	return ""
}

func (x *ToolsGenTableColumn) GetLinkTableClass() string {
	if x != nil {
		return x.LinkTableClass
	}
	return ""
}

func (x *ToolsGenTableColumn) GetLinkTablePackage() string {
	if x != nil {
		return x.LinkTablePackage
	}
	return ""
}

func (x *ToolsGenTableColumn) GetLinkLabelId() string {
	if x != nil {
		return x.LinkLabelId
	}
	return ""
}

func (x *ToolsGenTableColumn) GetLinkLabelName() string {
	if x != nil {
		return x.LinkLabelName
	}
	return ""
}

type ToolsGenTableColumnFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"columnId" gorm:"primary_key;AUTO_INCREMENT;default:编号;comment:编号;size:19;"
	ColumnId int64 `protobuf:"varint,100,opt,name=columnId,proto3" json:"columnId,omitempty"`
	// @inject_tag: json:"tableId" gorm:"default:归属表编号;comment:归属表编号;size:19;"
	TableId int64 `protobuf:"varint,101,opt,name=tableId,proto3" json:"tableId,omitempty"`
	// @inject_tag: json:"columnName" gorm:"default:列名称;comment:列名称;size:200;"
	ColumnName string `protobuf:"bytes,102,opt,name=columnName,proto3" json:"columnName,omitempty"`
	// @inject_tag: json:"columnComment" gorm:"default:列描述;comment:列描述;size:500;"
	ColumnComment string `protobuf:"bytes,103,opt,name=columnComment,proto3" json:"columnComment,omitempty"`
	// @inject_tag: json:"columnType" gorm:"default:列类型;comment:列类型;size:100;"
	ColumnType string `protobuf:"bytes,104,opt,name=columnType,proto3" json:"columnType,omitempty"`
	// @inject_tag: json:"goType" gorm:"default:Go类型;comment:Go类型;size:500;"
	GoType string `protobuf:"bytes,105,opt,name=goType,proto3" json:"goType,omitempty"`
	// @inject_tag: json:"goField" gorm:"default:Go字段名;comment:Go字段名;size:200;"
	GoField string `protobuf:"bytes,106,opt,name=goField,proto3" json:"goField,omitempty"`
	// @inject_tag: json:"htmlField" gorm:"default:html字段名;comment:html字段名;size:200;"
	HtmlField string `protobuf:"bytes,107,opt,name=htmlField,proto3" json:"htmlField,omitempty"`
	// @inject_tag: json:"isPk" gorm:"default:是否主键（1是）;comment:是否主键（1是）;"
	IsPk string `protobuf:"bytes,108,opt,name=isPk,proto3" json:"isPk,omitempty"`
	// @inject_tag: json:"isIncrement" gorm:"default:是否自增（1是）;comment:是否自增（1是）;"
	IsIncrement string `protobuf:"bytes,109,opt,name=isIncrement,proto3" json:"isIncrement,omitempty"`
	// @inject_tag: json:"isRequired" gorm:"default:是否必填（1是）;comment:是否必填（1是）;"
	IsRequired string `protobuf:"bytes,110,opt,name=isRequired,proto3" json:"isRequired,omitempty"`
	// @inject_tag: json:"isInsert" gorm:"default:是否为插入字段（1是）;comment:是否为插入字段（1是）;"
	IsInsert string `protobuf:"bytes,111,opt,name=isInsert,proto3" json:"isInsert,omitempty"`
	// @inject_tag: json:"isEdit" gorm:"default:是否编辑字段（1是）;comment:是否编辑字段（1是）;"
	IsEdit string `protobuf:"bytes,112,opt,name=isEdit,proto3" json:"isEdit,omitempty"`
	// @inject_tag: json:"isList" gorm:"default:是否列表字段（1是）;comment:是否列表字段（1是）;"
	IsList string `protobuf:"bytes,113,opt,name=isList,proto3" json:"isList,omitempty"`
	// @inject_tag: json:"isQuery" gorm:"default:是否查询字段（1是）;comment:是否查询字段（1是）;"
	IsQuery string `protobuf:"bytes,114,opt,name=isQuery,proto3" json:"isQuery,omitempty"`
	// @inject_tag: json:"queryType" gorm:"default:查询方式（等于、不等于、大于、小于、范围）;comment:查询方式（等于、不等于、大于、小于、范围）;size:200;"
	QueryType string `protobuf:"bytes,115,opt,name=queryType,proto3" json:"queryType,omitempty"`
	// @inject_tag: json:"htmlType" gorm:"default:显示类型（文本框、文本域、下拉框、复选框、单选框、日期控件）;comment:显示类型（文本框、文本域、下拉框、复选框、单选框、日期控件）;size:200;"
	HtmlType string `protobuf:"bytes,116,opt,name=htmlType,proto3" json:"htmlType,omitempty"`
	// @inject_tag: json:"dictType" gorm:"default:字典类型;comment:字典类型;size:200;"
	DictType string `protobuf:"bytes,117,opt,name=dictType,proto3" json:"dictType,omitempty"`
	// @inject_tag: json:"sort" gorm:"default:排序;comment:排序;size:10;"
	Sort int32 `protobuf:"varint,118,opt,name=sort,proto3" json:"sort,omitempty"`
	// @inject_tag: json:"linkTableName" gorm:"default:关联表名;comment:关联表名;size:50;"
	LinkTableName string `protobuf:"bytes,119,opt,name=linkTableName,proto3" json:"linkTableName,omitempty"`
	// @inject_tag: json:"linkTableClass" gorm:"default:关联表类名;comment:关联表类名;size:50;"
	LinkTableClass string `protobuf:"bytes,120,opt,name=linkTableClass,proto3" json:"linkTableClass,omitempty"`
	// @inject_tag: json:"linkTablePackage" gorm:"default:关联表包名;comment:关联表包名;size:150;"
	LinkTablePackage string `protobuf:"bytes,121,opt,name=linkTablePackage,proto3" json:"linkTablePackage,omitempty"`
	// @inject_tag: json:"linkLabelId" gorm:"default:关联表键名;comment:关联表键名;size:50;"
	LinkLabelId string `protobuf:"bytes,122,opt,name=linkLabelId,proto3" json:"linkLabelId,omitempty"`
	// @inject_tag: json:"linkLabelName" gorm:"default:关联表字段值;comment:关联表字段值;size:50;"
	LinkLabelName string `protobuf:"bytes,123,opt,name=linkLabelName,proto3" json:"linkLabelName,omitempty"`
}

func (x *ToolsGenTableColumnFilter) Reset() {
	*x = ToolsGenTableColumnFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_gen_table_column_model_gen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolsGenTableColumnFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolsGenTableColumnFilter) ProtoMessage() {}

func (x *ToolsGenTableColumnFilter) ProtoReflect() protoreflect.Message {
	mi := &file_tools_gen_table_column_model_gen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolsGenTableColumnFilter.ProtoReflect.Descriptor instead.
func (*ToolsGenTableColumnFilter) Descriptor() ([]byte, []int) {
	return file_tools_gen_table_column_model_gen_proto_rawDescGZIP(), []int{1}
}

func (x *ToolsGenTableColumnFilter) GetColumnId() int64 {
	if x != nil {
		return x.ColumnId
	}
	return 0
}

func (x *ToolsGenTableColumnFilter) GetTableId() int64 {
	if x != nil {
		return x.TableId
	}
	return 0
}

func (x *ToolsGenTableColumnFilter) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetColumnComment() string {
	if x != nil {
		return x.ColumnComment
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetColumnType() string {
	if x != nil {
		return x.ColumnType
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetGoType() string {
	if x != nil {
		return x.GoType
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetGoField() string {
	if x != nil {
		return x.GoField
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetHtmlField() string {
	if x != nil {
		return x.HtmlField
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetIsPk() string {
	if x != nil {
		return x.IsPk
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetIsIncrement() string {
	if x != nil {
		return x.IsIncrement
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetIsRequired() string {
	if x != nil {
		return x.IsRequired
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetIsInsert() string {
	if x != nil {
		return x.IsInsert
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetIsEdit() string {
	if x != nil {
		return x.IsEdit
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetIsList() string {
	if x != nil {
		return x.IsList
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetIsQuery() string {
	if x != nil {
		return x.IsQuery
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetQueryType() string {
	if x != nil {
		return x.QueryType
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetHtmlType() string {
	if x != nil {
		return x.HtmlType
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetDictType() string {
	if x != nil {
		return x.DictType
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ToolsGenTableColumnFilter) GetLinkTableName() string {
	if x != nil {
		return x.LinkTableName
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetLinkTableClass() string {
	if x != nil {
		return x.LinkTableClass
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetLinkTablePackage() string {
	if x != nil {
		return x.LinkTablePackage
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetLinkLabelId() string {
	if x != nil {
		return x.LinkLabelId
	}
	return ""
}

func (x *ToolsGenTableColumnFilter) GetLinkLabelName() string {
	if x != nil {
		return x.LinkLabelName
	}
	return ""
}

type ToolsGenTableColumnListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *ToolsGenTableColumn `protobuf:"bytes,101,opt,name=query,proto3" json:"query,omitempty"`
	Page      int64                `protobuf:"varint,102,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64                `protobuf:"varint,103,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderKey  string               `protobuf:"bytes,104,opt,name=orderKey,proto3" json:"orderKey,omitempty"`
	OrderDesc string               `protobuf:"bytes,105,opt,name=orderDesc,proto3" json:"orderDesc,omitempty"`
}

func (x *ToolsGenTableColumnListRequest) Reset() {
	*x = ToolsGenTableColumnListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_gen_table_column_model_gen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolsGenTableColumnListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolsGenTableColumnListRequest) ProtoMessage() {}

func (x *ToolsGenTableColumnListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tools_gen_table_column_model_gen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolsGenTableColumnListRequest.ProtoReflect.Descriptor instead.
func (*ToolsGenTableColumnListRequest) Descriptor() ([]byte, []int) {
	return file_tools_gen_table_column_model_gen_proto_rawDescGZIP(), []int{2}
}

func (x *ToolsGenTableColumnListRequest) GetQuery() *ToolsGenTableColumn {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ToolsGenTableColumnListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ToolsGenTableColumnListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ToolsGenTableColumnListRequest) GetOrderKey() string {
	if x != nil {
		return x.OrderKey
	}
	return ""
}

func (x *ToolsGenTableColumnListRequest) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

type ToolsGenTableColumnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                  `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string                 `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64                  `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*ToolsGenTableColumn `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ToolsGenTableColumnResponse) Reset() {
	*x = ToolsGenTableColumnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_gen_table_column_model_gen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolsGenTableColumnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolsGenTableColumnResponse) ProtoMessage() {}

func (x *ToolsGenTableColumnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tools_gen_table_column_model_gen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolsGenTableColumnResponse.ProtoReflect.Descriptor instead.
func (*ToolsGenTableColumnResponse) Descriptor() ([]byte, []int) {
	return file_tools_gen_table_column_model_gen_proto_rawDescGZIP(), []int{3}
}

func (x *ToolsGenTableColumnResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ToolsGenTableColumnResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ToolsGenTableColumnResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ToolsGenTableColumnResponse) GetData() []*ToolsGenTableColumn {
	if x != nil {
		return x.Data
	}
	return nil
}

type ToolsGenTableColumnUpdateFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string             `protobuf:"bytes,101,rep,name=fields,proto3" json:"fields,omitempty"`
	Data   *ToolsGenTableColumn `protobuf:"bytes,102,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ToolsGenTableColumnUpdateFieldsRequest) Reset() {
	*x = ToolsGenTableColumnUpdateFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_gen_table_column_model_gen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolsGenTableColumnUpdateFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolsGenTableColumnUpdateFieldsRequest) ProtoMessage() {}

func (x *ToolsGenTableColumnUpdateFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tools_gen_table_column_model_gen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolsGenTableColumnUpdateFieldsRequest.ProtoReflect.Descriptor instead.
func (*ToolsGenTableColumnUpdateFieldsRequest) Descriptor() ([]byte, []int) {
	return file_tools_gen_table_column_model_gen_proto_rawDescGZIP(), []int{4}
}

func (x *ToolsGenTableColumnUpdateFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ToolsGenTableColumnUpdateFieldsRequest) GetData() *ToolsGenTableColumn {
	if x != nil {
		return x.Data
	}
	return nil
}

// 表模型主键，只能是整数或字符串，若生成错误，请检查数据库表主键是否正确。支持组合主键
type ToolsGenTableColumnPrimarykey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnId int64 `protobuf:"varint,100,opt,name=columnId,proto3" json:"columnId,omitempty"`
}

func (x *ToolsGenTableColumnPrimarykey) Reset() {
	*x = ToolsGenTableColumnPrimarykey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_gen_table_column_model_gen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolsGenTableColumnPrimarykey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolsGenTableColumnPrimarykey) ProtoMessage() {}

func (x *ToolsGenTableColumnPrimarykey) ProtoReflect() protoreflect.Message {
	mi := &file_tools_gen_table_column_model_gen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolsGenTableColumnPrimarykey.ProtoReflect.Descriptor instead.
func (*ToolsGenTableColumnPrimarykey) Descriptor() ([]byte, []int) {
	return file_tools_gen_table_column_model_gen_proto_rawDescGZIP(), []int{5}
}

func (x *ToolsGenTableColumnPrimarykey) GetColumnId() int64 {
	if x != nil {
		return x.ColumnId
	}
	return 0
}

type ToolsGenTableColumnBatchDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*ToolsGenTableColumnPrimarykey `protobuf:"bytes,101,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *ToolsGenTableColumnBatchDeleteRequest) Reset() {
	*x = ToolsGenTableColumnBatchDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tools_gen_table_column_model_gen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolsGenTableColumnBatchDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolsGenTableColumnBatchDeleteRequest) ProtoMessage() {}

func (x *ToolsGenTableColumnBatchDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tools_gen_table_column_model_gen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolsGenTableColumnBatchDeleteRequest.ProtoReflect.Descriptor instead.
func (*ToolsGenTableColumnBatchDeleteRequest) Descriptor() ([]byte, []int) {
	return file_tools_gen_table_column_model_gen_proto_rawDescGZIP(), []int{6}
}

func (x *ToolsGenTableColumnBatchDeleteRequest) GetKeys() []*ToolsGenTableColumnPrimarykey {
	if x != nil {
		return x.Keys
	}
	return nil
}

var File_tools_gen_table_column_model_gen_proto protoreflect.FileDescriptor

var file_tools_gen_table_column_model_gen_proto_rawDesc = []byte{
	0x0a, 0x26, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x67,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x22, 0xe9, 0x05, 0x0a, 0x13, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x47, 0x65, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x67, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x67, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x6d, 0x6c, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x74, 0x6d, 0x6c,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x50, 0x6b, 0x18, 0x6c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x50, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x73, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x45, 0x64, 0x69,
	0x74, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x45, 0x64, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x73,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x74, 0x6d, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x74, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x74, 0x6d, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x76, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6c,
	0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x77, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x69, 0x6e,
	0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x79, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x6e, 0x6b,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xef, 0x05,
	0x0a, 0x19, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x47, 0x65, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x6f, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x74, 0x6d,
	0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x74,
	0x6d, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x50, 0x6b, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x50, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x73, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x45,
	0x64, 0x69, 0x74, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x45, 0x64, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x71, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x74, 0x6d, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x74, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x74, 0x6d, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x18, 0x76, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x77,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x69, 0x6e,
	0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6c,
	0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18,
	0x79, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69,
	0x6e, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x6e,
	0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6c, 0x69, 0x6e, 0x6b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xbe, 0x01, 0x0a, 0x1e, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x47, 0x65, 0x6e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x6f, 0x6c,
	0x73, 0x47, 0x65, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x22, 0x93, 0x01, 0x0a, 0x1b, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x47, 0x65, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x68, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x6f,
	0x6c, 0x73, 0x47, 0x65, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x72, 0x0a, 0x26, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x47,
	0x65, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x47, 0x65, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3b, 0x0a, 0x1d, 0x54, 0x6f,
	0x6f, 0x6c, 0x73, 0x47, 0x65, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x25, 0x54, 0x6f, 0x6f, 0x6c, 0x73,
	0x47, 0x65, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x73, 0x47, 0x65,
	0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x42, 0x11, 0x5a, 0x0f,
	0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tools_gen_table_column_model_gen_proto_rawDescOnce sync.Once
	file_tools_gen_table_column_model_gen_proto_rawDescData = file_tools_gen_table_column_model_gen_proto_rawDesc
)

func file_tools_gen_table_column_model_gen_proto_rawDescGZIP() []byte {
	file_tools_gen_table_column_model_gen_proto_rawDescOnce.Do(func() {
		file_tools_gen_table_column_model_gen_proto_rawDescData = protoimpl.X.CompressGZIP(file_tools_gen_table_column_model_gen_proto_rawDescData)
	})
	return file_tools_gen_table_column_model_gen_proto_rawDescData
}

var file_tools_gen_table_column_model_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_tools_gen_table_column_model_gen_proto_goTypes = []interface{}{
	(*ToolsGenTableColumn)(nil),                    // 0: service.ToolsGenTableColumn
	(*ToolsGenTableColumnFilter)(nil),              // 1: service.ToolsGenTableColumnFilter
	(*ToolsGenTableColumnListRequest)(nil),         // 2: service.ToolsGenTableColumnListRequest
	(*ToolsGenTableColumnResponse)(nil),            // 3: service.ToolsGenTableColumnResponse
	(*ToolsGenTableColumnUpdateFieldsRequest)(nil), // 4: service.ToolsGenTableColumnUpdateFieldsRequest
	(*ToolsGenTableColumnPrimarykey)(nil),          // 5: service.ToolsGenTableColumnPrimarykey
	(*ToolsGenTableColumnBatchDeleteRequest)(nil),  // 6: service.ToolsGenTableColumnBatchDeleteRequest
}
var file_tools_gen_table_column_model_gen_proto_depIdxs = []int32{
	0, // 0: service.ToolsGenTableColumnListRequest.query:type_name -> service.ToolsGenTableColumn
	0, // 1: service.ToolsGenTableColumnResponse.data:type_name -> service.ToolsGenTableColumn
	0, // 2: service.ToolsGenTableColumnUpdateFieldsRequest.data:type_name -> service.ToolsGenTableColumn
	5, // 3: service.ToolsGenTableColumnBatchDeleteRequest.keys:type_name -> service.ToolsGenTableColumnPrimarykey
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_tools_gen_table_column_model_gen_proto_init() }
func file_tools_gen_table_column_model_gen_proto_init() {
	if File_tools_gen_table_column_model_gen_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tools_gen_table_column_model_gen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolsGenTableColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_gen_table_column_model_gen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolsGenTableColumnFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_gen_table_column_model_gen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolsGenTableColumnListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_gen_table_column_model_gen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolsGenTableColumnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_gen_table_column_model_gen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolsGenTableColumnUpdateFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_gen_table_column_model_gen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolsGenTableColumnPrimarykey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tools_gen_table_column_model_gen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolsGenTableColumnBatchDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tools_gen_table_column_model_gen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tools_gen_table_column_model_gen_proto_goTypes,
		DependencyIndexes: file_tools_gen_table_column_model_gen_proto_depIdxs,
		MessageInfos:      file_tools_gen_table_column_model_gen_proto_msgTypes,
	}.Build()
	File_tools_gen_table_column_model_gen_proto = out.File
	file_tools_gen_table_column_model_gen_proto_rawDesc = nil
	file_tools_gen_table_column_model_gen_proto_goTypes = nil
	file_tools_gen_table_column_model_gen_proto_depIdxs = nil
}
