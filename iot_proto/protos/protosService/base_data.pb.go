// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: base_data.proto

package protosService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TConfigDictDataResponseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Code  int32                     `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string                    `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	List  []*TConfigDictDataRequest `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TConfigDictDataResponseList) Reset() {
	*x = TConfigDictDataResponseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TConfigDictDataResponseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TConfigDictDataResponseList) ProtoMessage() {}

func (x *TConfigDictDataResponseList) ProtoReflect() protoreflect.Message {
	mi := &file_base_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TConfigDictDataResponseList.ProtoReflect.Descriptor instead.
func (*TConfigDictDataResponseList) Descriptor() ([]byte, []int) {
	return file_base_data_proto_rawDescGZIP(), []int{0}
}

func (x *TConfigDictDataResponseList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TConfigDictDataResponseList) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TConfigDictDataResponseList) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TConfigDictDataResponseList) GetList() []*TConfigDictDataRequest {
	if x != nil {
		return x.List
	}
	return nil
}

type TConfigDictTypeResponseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                     `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Code  int32                     `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string                    `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	List  []*TConfigDictTypeRequest `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TConfigDictTypeResponseList) Reset() {
	*x = TConfigDictTypeResponseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TConfigDictTypeResponseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TConfigDictTypeResponseList) ProtoMessage() {}

func (x *TConfigDictTypeResponseList) ProtoReflect() protoreflect.Message {
	mi := &file_base_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TConfigDictTypeResponseList.ProtoReflect.Descriptor instead.
func (*TConfigDictTypeResponseList) Descriptor() ([]byte, []int) {
	return file_base_data_proto_rawDescGZIP(), []int{1}
}

func (x *TConfigDictTypeResponseList) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TConfigDictTypeResponseList) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TConfigDictTypeResponseList) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TConfigDictTypeResponseList) GetList() []*TConfigDictTypeRequest {
	if x != nil {
		return x.List
	}
	return nil
}

type TConfigDictDataFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                         //名称
	DictType string `protobuf:"bytes,3,opt,name=dict_type,json=dictType,proto3" json:"dict_type,omitempty"` //字典类型
}

func (x *TConfigDictDataFilter) Reset() {
	*x = TConfigDictDataFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TConfigDictDataFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TConfigDictDataFilter) ProtoMessage() {}

func (x *TConfigDictDataFilter) ProtoReflect() protoreflect.Message {
	mi := &file_base_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TConfigDictDataFilter.ProtoReflect.Descriptor instead.
func (*TConfigDictDataFilter) Descriptor() ([]byte, []int) {
	return file_base_data_proto_rawDescGZIP(), []int{2}
}

func (x *TConfigDictDataFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TConfigDictDataFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TConfigDictDataFilter) GetDictType() string {
	if x != nil {
		return x.DictType
	}
	return ""
}

type TConfigDictDataFilterPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit     int64                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Sort      int64                  `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`
	SortField int64                  `protobuf:"varint,4,opt,name=sortField,proto3" json:"sortField,omitempty"`
	SearchKey string                 `protobuf:"bytes,5,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
	QueryObj  *TConfigDictDataFilter `protobuf:"bytes,6,opt,name=queryObj,proto3" json:"queryObj,omitempty"`
	QueryStr  string                 `protobuf:"bytes,7,opt,name=queryStr,proto3" json:"queryStr,omitempty"`
}

func (x *TConfigDictDataFilterPage) Reset() {
	*x = TConfigDictDataFilterPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TConfigDictDataFilterPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TConfigDictDataFilterPage) ProtoMessage() {}

func (x *TConfigDictDataFilterPage) ProtoReflect() protoreflect.Message {
	mi := &file_base_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TConfigDictDataFilterPage.ProtoReflect.Descriptor instead.
func (*TConfigDictDataFilterPage) Descriptor() ([]byte, []int) {
	return file_base_data_proto_rawDescGZIP(), []int{3}
}

func (x *TConfigDictDataFilterPage) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TConfigDictDataFilterPage) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TConfigDictDataFilterPage) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *TConfigDictDataFilterPage) GetSortField() int64 {
	if x != nil {
		return x.SortField
	}
	return 0
}

func (x *TConfigDictDataFilterPage) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

func (x *TConfigDictDataFilterPage) GetQueryObj() *TConfigDictDataFilter {
	if x != nil {
		return x.QueryObj
	}
	return nil
}

func (x *TConfigDictDataFilterPage) GetQueryStr() string {
	if x != nil {
		return x.QueryStr
	}
	return ""
}

type TConfigDictDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *TConfigDictDataResponse) Reset() {
	*x = TConfigDictDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TConfigDictDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TConfigDictDataResponse) ProtoMessage() {}

func (x *TConfigDictDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TConfigDictDataResponse.ProtoReflect.Descriptor instead.
func (*TConfigDictDataResponse) Descriptor() ([]byte, []int) {
	return file_base_data_proto_rawDescGZIP(), []int{4}
}

func (x *TConfigDictDataResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TConfigDictDataResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TConfigDictDataResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type TConfigDictDataFilterALL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictCode  int64  `protobuf:"zigzag64,1,opt,name=dict_code,json=dictCode,proto3" json:"dict_code,omitempty"`
	DictSort  int32  `protobuf:"varint,2,opt,name=dict_sort,json=dictSort,proto3" json:"dict_sort,omitempty"`
	DictLabel string `protobuf:"bytes,3,opt,name=dict_label,json=dictLabel,proto3" json:"dict_label,omitempty"`
	DictValue string `protobuf:"bytes,4,opt,name=dict_value,json=dictValue,proto3" json:"dict_value,omitempty"`
	DictType  string `protobuf:"bytes,5,opt,name=dict_type,json=dictType,proto3" json:"dict_type,omitempty"`
	CssClass  string `protobuf:"bytes,6,opt,name=css_class,json=cssClass,proto3" json:"css_class,omitempty"`
	ListClass string `protobuf:"bytes,7,opt,name=list_class,json=listClass,proto3" json:"list_class,omitempty"`
	IsDefault int32  `protobuf:"varint,8,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	Status    int32  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	CreateBy  string `protobuf:"bytes,10,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	UpdateBy  string `protobuf:"bytes,11,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`
	Remark    string `protobuf:"bytes,12,opt,name=remark,proto3" json:"remark,omitempty"`
	CreatedAt string `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt string `protobuf:"bytes,15,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *TConfigDictDataFilterALL) Reset() {
	*x = TConfigDictDataFilterALL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TConfigDictDataFilterALL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TConfigDictDataFilterALL) ProtoMessage() {}

func (x *TConfigDictDataFilterALL) ProtoReflect() protoreflect.Message {
	mi := &file_base_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TConfigDictDataFilterALL.ProtoReflect.Descriptor instead.
func (*TConfigDictDataFilterALL) Descriptor() ([]byte, []int) {
	return file_base_data_proto_rawDescGZIP(), []int{5}
}

func (x *TConfigDictDataFilterALL) GetDictCode() int64 {
	if x != nil {
		return x.DictCode
	}
	return 0
}

func (x *TConfigDictDataFilterALL) GetDictSort() int32 {
	if x != nil {
		return x.DictSort
	}
	return 0
}

func (x *TConfigDictDataFilterALL) GetDictLabel() string {
	if x != nil {
		return x.DictLabel
	}
	return ""
}

func (x *TConfigDictDataFilterALL) GetDictValue() string {
	if x != nil {
		return x.DictValue
	}
	return ""
}

func (x *TConfigDictDataFilterALL) GetDictType() string {
	if x != nil {
		return x.DictType
	}
	return ""
}

func (x *TConfigDictDataFilterALL) GetCssClass() string {
	if x != nil {
		return x.CssClass
	}
	return ""
}

func (x *TConfigDictDataFilterALL) GetListClass() string {
	if x != nil {
		return x.ListClass
	}
	return ""
}

func (x *TConfigDictDataFilterALL) GetIsDefault() int32 {
	if x != nil {
		return x.IsDefault
	}
	return 0
}

func (x *TConfigDictDataFilterALL) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TConfigDictDataFilterALL) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *TConfigDictDataFilterALL) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *TConfigDictDataFilterALL) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TConfigDictDataFilterALL) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TConfigDictDataFilterALL) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *TConfigDictDataFilterALL) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type TConfigDictDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictCode    int64  `protobuf:"zigzag64,1,opt,name=dict_code,json=dictCode,proto3" json:"dict_code,omitempty"`
	DictSort    int32  `protobuf:"varint,2,opt,name=dict_sort,json=dictSort,proto3" json:"dict_sort,omitempty"`
	DictLabel   string `protobuf:"bytes,3,opt,name=dict_label,json=dictLabel,proto3" json:"dict_label,omitempty"`
	DictValue   string `protobuf:"bytes,4,opt,name=dict_value,json=dictValue,proto3" json:"dict_value,omitempty"`
	DictType    string `protobuf:"bytes,5,opt,name=dict_type,json=dictType,proto3" json:"dict_type,omitempty"`
	CssClass    string `protobuf:"bytes,6,opt,name=css_class,json=cssClass,proto3" json:"css_class,omitempty"`
	ListClass   string `protobuf:"bytes,7,opt,name=list_class,json=listClass,proto3" json:"list_class,omitempty"`
	IsDefault   int32  `protobuf:"varint,8,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	Status      int32  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	CreateBy    string `protobuf:"bytes,10,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	UpdateBy    string `protobuf:"bytes,11,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`
	Remark      string `protobuf:"bytes,12,opt,name=remark,proto3" json:"remark,omitempty"`
	CreatedAt   string `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   string `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt   string `protobuf:"bytes,15,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	Pinyin      string `protobuf:"bytes,16,opt,name=pinyin,proto3" json:"pinyin,omitempty"`
	Firstletter string `protobuf:"bytes,17,opt,name=firstletter,proto3" json:"firstletter,omitempty"`
	Listimg     string `protobuf:"bytes,18,opt,name=listimg,proto3" json:"listimg,omitempty"`
}

func (x *TConfigDictDataRequest) Reset() {
	*x = TConfigDictDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TConfigDictDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TConfigDictDataRequest) ProtoMessage() {}

func (x *TConfigDictDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TConfigDictDataRequest.ProtoReflect.Descriptor instead.
func (*TConfigDictDataRequest) Descriptor() ([]byte, []int) {
	return file_base_data_proto_rawDescGZIP(), []int{6}
}

func (x *TConfigDictDataRequest) GetDictCode() int64 {
	if x != nil {
		return x.DictCode
	}
	return 0
}

func (x *TConfigDictDataRequest) GetDictSort() int32 {
	if x != nil {
		return x.DictSort
	}
	return 0
}

func (x *TConfigDictDataRequest) GetDictLabel() string {
	if x != nil {
		return x.DictLabel
	}
	return ""
}

func (x *TConfigDictDataRequest) GetDictValue() string {
	if x != nil {
		return x.DictValue
	}
	return ""
}

func (x *TConfigDictDataRequest) GetDictType() string {
	if x != nil {
		return x.DictType
	}
	return ""
}

func (x *TConfigDictDataRequest) GetCssClass() string {
	if x != nil {
		return x.CssClass
	}
	return ""
}

func (x *TConfigDictDataRequest) GetListClass() string {
	if x != nil {
		return x.ListClass
	}
	return ""
}

func (x *TConfigDictDataRequest) GetIsDefault() int32 {
	if x != nil {
		return x.IsDefault
	}
	return 0
}

func (x *TConfigDictDataRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TConfigDictDataRequest) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *TConfigDictDataRequest) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *TConfigDictDataRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TConfigDictDataRequest) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TConfigDictDataRequest) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *TConfigDictDataRequest) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

func (x *TConfigDictDataRequest) GetPinyin() string {
	if x != nil {
		return x.Pinyin
	}
	return ""
}

func (x *TConfigDictDataRequest) GetFirstletter() string {
	if x != nil {
		return x.Firstletter
	}
	return ""
}

func (x *TConfigDictDataRequest) GetListimg() string {
	if x != nil {
		return x.Listimg
	}
	return ""
}

type TConfigDictTypeFilterALL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictId    int64  `protobuf:"zigzag64,1,opt,name=dict_id,json=dictId,proto3" json:"dict_id,omitempty"`
	DictName  string `protobuf:"bytes,2,opt,name=dict_name,json=dictName,proto3" json:"dict_name,omitempty"`
	DictType  string `protobuf:"bytes,3,opt,name=dict_type,json=dictType,proto3" json:"dict_type,omitempty"`
	Status    int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	CreateBy  string `protobuf:"bytes,5,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	UpdateBy  string `protobuf:"bytes,6,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`
	Remark    string `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	CreatedAt string `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt string `protobuf:"bytes,10,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *TConfigDictTypeFilterALL) Reset() {
	*x = TConfigDictTypeFilterALL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TConfigDictTypeFilterALL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TConfigDictTypeFilterALL) ProtoMessage() {}

func (x *TConfigDictTypeFilterALL) ProtoReflect() protoreflect.Message {
	mi := &file_base_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TConfigDictTypeFilterALL.ProtoReflect.Descriptor instead.
func (*TConfigDictTypeFilterALL) Descriptor() ([]byte, []int) {
	return file_base_data_proto_rawDescGZIP(), []int{7}
}

func (x *TConfigDictTypeFilterALL) GetDictId() int64 {
	if x != nil {
		return x.DictId
	}
	return 0
}

func (x *TConfigDictTypeFilterALL) GetDictName() string {
	if x != nil {
		return x.DictName
	}
	return ""
}

func (x *TConfigDictTypeFilterALL) GetDictType() string {
	if x != nil {
		return x.DictType
	}
	return ""
}

func (x *TConfigDictTypeFilterALL) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TConfigDictTypeFilterALL) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *TConfigDictTypeFilterALL) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *TConfigDictTypeFilterALL) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TConfigDictTypeFilterALL) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TConfigDictTypeFilterALL) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *TConfigDictTypeFilterALL) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type TConfigDictTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DictId    int64  `protobuf:"zigzag64,1,opt,name=dict_id,json=dictId,proto3" json:"dict_id,omitempty"`
	DictName  string `protobuf:"bytes,2,opt,name=dict_name,json=dictName,proto3" json:"dict_name,omitempty"`
	DictType  string `protobuf:"bytes,3,opt,name=dict_type,json=dictType,proto3" json:"dict_type,omitempty"`
	Status    int32  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	CreateBy  string `protobuf:"bytes,5,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	UpdateBy  string `protobuf:"bytes,6,opt,name=update_by,json=updateBy,proto3" json:"update_by,omitempty"`
	Remark    string `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	CreatedAt string `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt string `protobuf:"bytes,10,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *TConfigDictTypeRequest) Reset() {
	*x = TConfigDictTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TConfigDictTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TConfigDictTypeRequest) ProtoMessage() {}

func (x *TConfigDictTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_base_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TConfigDictTypeRequest.ProtoReflect.Descriptor instead.
func (*TConfigDictTypeRequest) Descriptor() ([]byte, []int) {
	return file_base_data_proto_rawDescGZIP(), []int{8}
}

func (x *TConfigDictTypeRequest) GetDictId() int64 {
	if x != nil {
		return x.DictId
	}
	return 0
}

func (x *TConfigDictTypeRequest) GetDictName() string {
	if x != nil {
		return x.DictName
	}
	return ""
}

func (x *TConfigDictTypeRequest) GetDictType() string {
	if x != nil {
		return x.DictType
	}
	return ""
}

func (x *TConfigDictTypeRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TConfigDictTypeRequest) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *TConfigDictTypeRequest) GetUpdateBy() string {
	if x != nil {
		return x.UpdateBy
	}
	return ""
}

func (x *TConfigDictTypeRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TConfigDictTypeRequest) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TConfigDictTypeRequest) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *TConfigDictTypeRequest) GetDeletedAt() string {
	if x != nil {
		return x.DeletedAt
	}
	return ""
}

type TConfigDictTypeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DictName string `protobuf:"bytes,2,opt,name=dict_name,json=dictName,proto3" json:"dict_name,omitempty"`
	DictType string `protobuf:"bytes,3,opt,name=dict_type,json=dictType,proto3" json:"dict_type,omitempty"`
}

func (x *TConfigDictTypeFilter) Reset() {
	*x = TConfigDictTypeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TConfigDictTypeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TConfigDictTypeFilter) ProtoMessage() {}

func (x *TConfigDictTypeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_base_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TConfigDictTypeFilter.ProtoReflect.Descriptor instead.
func (*TConfigDictTypeFilter) Descriptor() ([]byte, []int) {
	return file_base_data_proto_rawDescGZIP(), []int{9}
}

func (x *TConfigDictTypeFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TConfigDictTypeFilter) GetDictName() string {
	if x != nil {
		return x.DictName
	}
	return ""
}

func (x *TConfigDictTypeFilter) GetDictType() string {
	if x != nil {
		return x.DictType
	}
	return ""
}

type TConfigDictTypeFilterPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit     int64                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Sort      int64                  `protobuf:"varint,3,opt,name=sort,proto3" json:"sort,omitempty"`
	SortField int64                  `protobuf:"varint,4,opt,name=sortField,proto3" json:"sortField,omitempty"`
	SearchKey string                 `protobuf:"bytes,5,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
	QueryObj  *TConfigDictTypeFilter `protobuf:"bytes,6,opt,name=queryObj,proto3" json:"queryObj,omitempty"`
	QueryStr  string                 `protobuf:"bytes,7,opt,name=queryStr,proto3" json:"queryStr,omitempty"`
}

func (x *TConfigDictTypeFilterPage) Reset() {
	*x = TConfigDictTypeFilterPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TConfigDictTypeFilterPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TConfigDictTypeFilterPage) ProtoMessage() {}

func (x *TConfigDictTypeFilterPage) ProtoReflect() protoreflect.Message {
	mi := &file_base_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TConfigDictTypeFilterPage.ProtoReflect.Descriptor instead.
func (*TConfigDictTypeFilterPage) Descriptor() ([]byte, []int) {
	return file_base_data_proto_rawDescGZIP(), []int{10}
}

func (x *TConfigDictTypeFilterPage) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *TConfigDictTypeFilterPage) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TConfigDictTypeFilterPage) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *TConfigDictTypeFilterPage) GetSortField() int64 {
	if x != nil {
		return x.SortField
	}
	return 0
}

func (x *TConfigDictTypeFilterPage) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

func (x *TConfigDictTypeFilterPage) GetQueryObj() *TConfigDictTypeFilter {
	if x != nil {
		return x.QueryObj
	}
	return nil
}

func (x *TConfigDictTypeFilterPage) GetQueryStr() string {
	if x != nil {
		return x.QueryStr
	}
	return ""
}

type TConfigDictTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *TConfigDictTypeResponse) Reset() {
	*x = TConfigDictTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TConfigDictTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TConfigDictTypeResponse) ProtoMessage() {}

func (x *TConfigDictTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_base_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TConfigDictTypeResponse.ProtoReflect.Descriptor instead.
func (*TConfigDictTypeResponse) Descriptor() ([]byte, []int) {
	return file_base_data_proto_rawDescGZIP(), []int{11}
}

func (x *TConfigDictTypeResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TConfigDictTypeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *TConfigDictTypeResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_base_data_proto protoreflect.FileDescriptor

var file_base_data_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x08, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8f, 0x01, 0x0a, 0x1b,
	0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8f, 0x01,
	0x0a, 0x1b, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x58, 0x0a, 0x15, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x69, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x19, 0x54, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65,
	0x79, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x12, 0x1a,
	0x0a, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x22, 0x4f, 0x0a, 0x17, 0x54, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xd1, 0x03, 0x0a, 0x18,
	0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x4c, 0x4c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x64, 0x69, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x63, 0x74, 0x53, 0x6f,
	0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xa3, 0x04, 0x0a, 0x16, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x64,
	0x69, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x63, 0x74, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x69, 0x63, 0x74,
	0x53, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x63, 0x74, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x63, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x73, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x73, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6c,
	0x69, 0x73, 0x74, 0x69, 0x6d, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69,
	0x73, 0x74, 0x69, 0x6d, 0x67, 0x22, 0xb4, 0x02, 0x0a, 0x18, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41,
	0x4c, 0x4c, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x06, 0x64, 0x69, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x69, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x63, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb2, 0x02, 0x0a,
	0x16, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x64, 0x69, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x69, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x61, 0x0a, 0x15, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x69, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x63, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x19, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x08,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x62, 0x6a, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x72, 0x22, 0x4f, 0x0a, 0x17, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x32, 0xca, 0x07, 0x0a, 0x08, 0x42, 0x61, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x5e, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x1a,
	0x25, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x69, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x20, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5e,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x1a, 0x25, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x69, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_base_data_proto_rawDescOnce sync.Once
	file_base_data_proto_rawDescData = file_base_data_proto_rawDesc
)

func file_base_data_proto_rawDescGZIP() []byte {
	file_base_data_proto_rawDescOnce.Do(func() {
		file_base_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_base_data_proto_rawDescData)
	})
	return file_base_data_proto_rawDescData
}

var file_base_data_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_base_data_proto_goTypes = []interface{}{
	(*TConfigDictDataResponseList)(nil), // 0: baseData.TConfigDictDataResponseList
	(*TConfigDictTypeResponseList)(nil), // 1: baseData.TConfigDictTypeResponseList
	(*TConfigDictDataFilter)(nil),       // 2: baseData.TConfigDictDataFilter
	(*TConfigDictDataFilterPage)(nil),   // 3: baseData.TConfigDictDataFilterPage
	(*TConfigDictDataResponse)(nil),     // 4: baseData.TConfigDictDataResponse
	(*TConfigDictDataFilterALL)(nil),    // 5: baseData.TConfigDictDataFilterALL
	(*TConfigDictDataRequest)(nil),      // 6: baseData.TConfigDictDataRequest
	(*TConfigDictTypeFilterALL)(nil),    // 7: baseData.TConfigDictTypeFilterALL
	(*TConfigDictTypeRequest)(nil),      // 8: baseData.TConfigDictTypeRequest
	(*TConfigDictTypeFilter)(nil),       // 9: baseData.TConfigDictTypeFilter
	(*TConfigDictTypeFilterPage)(nil),   // 10: baseData.TConfigDictTypeFilterPage
	(*TConfigDictTypeResponse)(nil),     // 11: baseData.TConfigDictTypeResponse
}
var file_base_data_proto_depIdxs = []int32{
	6,  // 0: baseData.TConfigDictDataResponseList.list:type_name -> baseData.TConfigDictDataRequest
	8,  // 1: baseData.TConfigDictTypeResponseList.list:type_name -> baseData.TConfigDictTypeRequest
	2,  // 2: baseData.TConfigDictDataFilterPage.queryObj:type_name -> baseData.TConfigDictDataFilter
	9,  // 3: baseData.TConfigDictTypeFilterPage.queryObj:type_name -> baseData.TConfigDictTypeFilter
	6,  // 4: baseData.BaseData.UpdateTConfigDictData:input_type -> baseData.TConfigDictDataRequest
	3,  // 5: baseData.BaseData.ListTConfigDictData:input_type -> baseData.TConfigDictDataFilterPage
	6,  // 6: baseData.BaseData.DeleteTConfigDictData:input_type -> baseData.TConfigDictDataRequest
	2,  // 7: baseData.BaseData.GetTConfigDictData:input_type -> baseData.TConfigDictDataFilter
	6,  // 8: baseData.BaseData.CreateTConfigDictData:input_type -> baseData.TConfigDictDataRequest
	9,  // 9: baseData.BaseData.GetTConfigDictType:input_type -> baseData.TConfigDictTypeFilter
	8,  // 10: baseData.BaseData.CreateTConfigDictType:input_type -> baseData.TConfigDictTypeRequest
	8,  // 11: baseData.BaseData.UpdateTConfigDictType:input_type -> baseData.TConfigDictTypeRequest
	10, // 12: baseData.BaseData.ListTConfigDictType:input_type -> baseData.TConfigDictTypeFilterPage
	8,  // 13: baseData.BaseData.DeleteTConfigDictType:input_type -> baseData.TConfigDictTypeRequest
	4,  // 14: baseData.BaseData.UpdateTConfigDictData:output_type -> baseData.TConfigDictDataResponse
	0,  // 15: baseData.BaseData.ListTConfigDictData:output_type -> baseData.TConfigDictDataResponseList
	4,  // 16: baseData.BaseData.DeleteTConfigDictData:output_type -> baseData.TConfigDictDataResponse
	6,  // 17: baseData.BaseData.GetTConfigDictData:output_type -> baseData.TConfigDictDataRequest
	4,  // 18: baseData.BaseData.CreateTConfigDictData:output_type -> baseData.TConfigDictDataResponse
	8,  // 19: baseData.BaseData.GetTConfigDictType:output_type -> baseData.TConfigDictTypeRequest
	11, // 20: baseData.BaseData.CreateTConfigDictType:output_type -> baseData.TConfigDictTypeResponse
	11, // 21: baseData.BaseData.UpdateTConfigDictType:output_type -> baseData.TConfigDictTypeResponse
	1,  // 22: baseData.BaseData.ListTConfigDictType:output_type -> baseData.TConfigDictTypeResponseList
	11, // 23: baseData.BaseData.DeleteTConfigDictType:output_type -> baseData.TConfigDictTypeResponse
	14, // [14:24] is the sub-list for method output_type
	4,  // [4:14] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_base_data_proto_init() }
func file_base_data_proto_init() {
	if File_base_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_base_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TConfigDictDataResponseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TConfigDictTypeResponseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TConfigDictDataFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TConfigDictDataFilterPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TConfigDictDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TConfigDictDataFilterALL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TConfigDictDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TConfigDictTypeFilterALL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TConfigDictTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TConfigDictTypeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TConfigDictTypeFilterPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TConfigDictTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_base_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_base_data_proto_goTypes,
		DependencyIndexes: file_base_data_proto_depIdxs,
		MessageInfos:      file_base_data_proto_msgTypes,
	}.Build()
	File_base_data_proto = out.File
	file_base_data_proto_rawDesc = nil
	file_base_data_proto_goTypes = nil
	file_base_data_proto_depIdxs = nil
}
