// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: iot_device_log_service.proto

package protosService

import (
	fmt "fmt"
	math "math"

	proto "google.golang.org/protobuf/proto"

	context "context"

	api "go-micro.dev/v4/api"

	client "go-micro.dev/v4/client"

	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for IotDeviceLogService service

func NewIotDeviceLogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "IotDeviceLogService.Create",
			Path:    []string{"/v1/iotDeviceLog/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.Delete",
			Path:    []string{"/v1/iotDeviceLog/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.DeleteById",
			Path:    []string{"/v1/iotDeviceLog/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.DeleteByIds",
			Path:    []string{"/v1/iotDeviceLog/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.Update",
			Path:    []string{"/v1/iotDeviceLog/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.UpdateAll",
			Path:    []string{"/v1/iotDeviceLog/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.UpdateFields",
			Path:    []string{"/v1/iotDeviceLog/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.FindById",
			Path:    []string{"/v1/iotDeviceLog/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.Find",
			Path:    []string{"/v1/iotDeviceLog/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.Lists",
			Path:    []string{"/v1/iotDeviceLog/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.FailLogLists",
			Path:    []string{"/v1/iotDeviceLog/failLogLists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.Count",
			Path:    []string{"/v1/iotDeviceLog/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.Export",
			Path:    []string{"/v1/iotDeviceLog/logExport"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.CreateProductLogTable",
			Path:    []string{"/v1/iotDeviceLog/createProductTable"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.ProductEventLogReport",
			Path:    []string{"/v1/iotDeviceLog/productEventLogReport"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.ProductReportLogRecord",
			Path:    []string{"/v1/iotDeviceLog/productEventLogReport"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.DeviceOperationFailLogReport",
			Path:    []string{"/v1/iotDeviceLog/deviceOperationFailLogReport"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.OperationFailLogReport",
			Path:    []string{"/v1/iotDeviceLog/operationFailLogReport"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceLogService.ClearDeviceLogs",
			Path:    []string{"/v1/iotDeviceLog/clearDeviceLogs"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for IotDeviceLogService service

type IotDeviceLogService interface {
	//创建
	Create(ctx context.Context, in *IotDeviceLog, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *IotDeviceLog, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *IotDeviceLog, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *IotDeviceLogBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *IotDeviceLog, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *IotDeviceLog, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *IotDeviceLogUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *IotDeviceLogFilter, opts ...client.CallOption) (*IotDeviceLogResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *IotDeviceLogFilter, opts ...client.CallOption) (*IotDeviceLogResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *IotDeviceLogListRequest, opts ...client.CallOption) (*IotDeviceLogResponse, error)
	//查找，支持分页，可返回多条数据
	FailLogLists(ctx context.Context, in *DeviceOperationFailLogListRequest, opts ...client.CallOption) (*DeviceOperationFailLogListResponse, error)
	//查找，支持分页，可返回多条数据
	Count(ctx context.Context, in *IotDeviceLogListRequest, opts ...client.CallOption) (*IotDeviceLogResponse, error)
	//导出
	Export(ctx context.Context, in *IotDeviceLogListRequest, opts ...client.CallOption) (*IotDeviceLogDExportResponse, error)
	//创建产品
	CreateProductLogTable(ctx context.Context, in *CreateProductLogTableResponse, opts ...client.CallOption) (*Response, error)
	//查询产品时间日志报表
	ProductEventLogReport(ctx context.Context, in *ProductLogRequest, opts ...client.CallOption) (*ProductLogResponse, error)
	//查询产品时间日志报表
	ProductReportLogRecord(ctx context.Context, in *ProductLogRequest, opts ...client.CallOption) (*ProductLogRecordResponse, error)
	//上报设备错误日志
	DeviceOperationFailLogReport(ctx context.Context, in *DeviceOperationFailLogRequest, opts ...client.CallOption) (*Response, error)
	//上报设备错误日志
	OperationFailLogReport(ctx context.Context, in *OperationFailLogRequest, opts ...client.CallOption) (*Response, error)
	//查询产品时间日志报表
	ClearDeviceLogs(ctx context.Context, in *ProductLogRequest, opts ...client.CallOption) (*Response, error)
}

type iotDeviceLogService struct {
	c    client.Client
	name string
}

func NewIotDeviceLogService(name string, c client.Client) IotDeviceLogService {
	return &iotDeviceLogService{
		c:    c,
		name: name,
	}
}

func (c *iotDeviceLogService) Create(ctx context.Context, in *IotDeviceLog, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) Delete(ctx context.Context, in *IotDeviceLog, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) DeleteById(ctx context.Context, in *IotDeviceLog, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) DeleteByIds(ctx context.Context, in *IotDeviceLogBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) Update(ctx context.Context, in *IotDeviceLog, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) UpdateAll(ctx context.Context, in *IotDeviceLog, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) UpdateFields(ctx context.Context, in *IotDeviceLogUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) FindById(ctx context.Context, in *IotDeviceLogFilter, opts ...client.CallOption) (*IotDeviceLogResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.FindById", in)
	out := new(IotDeviceLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) Find(ctx context.Context, in *IotDeviceLogFilter, opts ...client.CallOption) (*IotDeviceLogResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.Find", in)
	out := new(IotDeviceLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) Lists(ctx context.Context, in *IotDeviceLogListRequest, opts ...client.CallOption) (*IotDeviceLogResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.Lists", in)
	out := new(IotDeviceLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) FailLogLists(ctx context.Context, in *DeviceOperationFailLogListRequest, opts ...client.CallOption) (*DeviceOperationFailLogListResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.FailLogLists", in)
	out := new(DeviceOperationFailLogListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) Count(ctx context.Context, in *IotDeviceLogListRequest, opts ...client.CallOption) (*IotDeviceLogResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.Count", in)
	out := new(IotDeviceLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) Export(ctx context.Context, in *IotDeviceLogListRequest, opts ...client.CallOption) (*IotDeviceLogDExportResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.Export", in)
	out := new(IotDeviceLogDExportResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) CreateProductLogTable(ctx context.Context, in *CreateProductLogTableResponse, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.CreateProductLogTable", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) ProductEventLogReport(ctx context.Context, in *ProductLogRequest, opts ...client.CallOption) (*ProductLogResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.ProductEventLogReport", in)
	out := new(ProductLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) ProductReportLogRecord(ctx context.Context, in *ProductLogRequest, opts ...client.CallOption) (*ProductLogRecordResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.ProductReportLogRecord", in)
	out := new(ProductLogRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) DeviceOperationFailLogReport(ctx context.Context, in *DeviceOperationFailLogRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.DeviceOperationFailLogReport", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) OperationFailLogReport(ctx context.Context, in *OperationFailLogRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.OperationFailLogReport", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceLogService) ClearDeviceLogs(ctx context.Context, in *ProductLogRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceLogService.ClearDeviceLogs", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IotDeviceLogService service

type IotDeviceLogServiceHandler interface {
	//创建
	Create(context.Context, *IotDeviceLog, *Response) error
	//匹配多条件删除
	Delete(context.Context, *IotDeviceLog, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *IotDeviceLog, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *IotDeviceLogBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *IotDeviceLog, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *IotDeviceLog, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *IotDeviceLogUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *IotDeviceLogFilter, *IotDeviceLogResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *IotDeviceLogFilter, *IotDeviceLogResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *IotDeviceLogListRequest, *IotDeviceLogResponse) error
	//查找，支持分页，可返回多条数据
	FailLogLists(context.Context, *DeviceOperationFailLogListRequest, *DeviceOperationFailLogListResponse) error
	//查找，支持分页，可返回多条数据
	Count(context.Context, *IotDeviceLogListRequest, *IotDeviceLogResponse) error
	//导出
	Export(context.Context, *IotDeviceLogListRequest, *IotDeviceLogDExportResponse) error
	//创建产品
	CreateProductLogTable(context.Context, *CreateProductLogTableResponse, *Response) error
	//查询产品时间日志报表
	ProductEventLogReport(context.Context, *ProductLogRequest, *ProductLogResponse) error
	//查询产品时间日志报表
	ProductReportLogRecord(context.Context, *ProductLogRequest, *ProductLogRecordResponse) error
	//上报设备错误日志
	DeviceOperationFailLogReport(context.Context, *DeviceOperationFailLogRequest, *Response) error
	//上报设备错误日志
	OperationFailLogReport(context.Context, *OperationFailLogRequest, *Response) error
	//查询产品时间日志报表
	ClearDeviceLogs(context.Context, *ProductLogRequest, *Response) error
}

func RegisterIotDeviceLogServiceHandler(s server.Server, hdlr IotDeviceLogServiceHandler, opts ...server.HandlerOption) error {
	type iotDeviceLogService interface {
		Create(ctx context.Context, in *IotDeviceLog, out *Response) error
		Delete(ctx context.Context, in *IotDeviceLog, out *Response) error
		DeleteById(ctx context.Context, in *IotDeviceLog, out *Response) error
		DeleteByIds(ctx context.Context, in *IotDeviceLogBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *IotDeviceLog, out *Response) error
		UpdateAll(ctx context.Context, in *IotDeviceLog, out *Response) error
		UpdateFields(ctx context.Context, in *IotDeviceLogUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *IotDeviceLogFilter, out *IotDeviceLogResponse) error
		Find(ctx context.Context, in *IotDeviceLogFilter, out *IotDeviceLogResponse) error
		Lists(ctx context.Context, in *IotDeviceLogListRequest, out *IotDeviceLogResponse) error
		FailLogLists(ctx context.Context, in *DeviceOperationFailLogListRequest, out *DeviceOperationFailLogListResponse) error
		Count(ctx context.Context, in *IotDeviceLogListRequest, out *IotDeviceLogResponse) error
		Export(ctx context.Context, in *IotDeviceLogListRequest, out *IotDeviceLogDExportResponse) error
		CreateProductLogTable(ctx context.Context, in *CreateProductLogTableResponse, out *Response) error
		ProductEventLogReport(ctx context.Context, in *ProductLogRequest, out *ProductLogResponse) error
		ProductReportLogRecord(ctx context.Context, in *ProductLogRequest, out *ProductLogRecordResponse) error
		DeviceOperationFailLogReport(ctx context.Context, in *DeviceOperationFailLogRequest, out *Response) error
		OperationFailLogReport(ctx context.Context, in *OperationFailLogRequest, out *Response) error
		ClearDeviceLogs(ctx context.Context, in *ProductLogRequest, out *Response) error
	}
	type IotDeviceLogService struct {
		iotDeviceLogService
	}
	h := &iotDeviceLogServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.Create",
		Path:    []string{"/v1/iotDeviceLog/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.Delete",
		Path:    []string{"/v1/iotDeviceLog/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.DeleteById",
		Path:    []string{"/v1/iotDeviceLog/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.DeleteByIds",
		Path:    []string{"/v1/iotDeviceLog/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.Update",
		Path:    []string{"/v1/iotDeviceLog/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.UpdateAll",
		Path:    []string{"/v1/iotDeviceLog/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.UpdateFields",
		Path:    []string{"/v1/iotDeviceLog/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.FindById",
		Path:    []string{"/v1/iotDeviceLog/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.Find",
		Path:    []string{"/v1/iotDeviceLog/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.Lists",
		Path:    []string{"/v1/iotDeviceLog/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.FailLogLists",
		Path:    []string{"/v1/iotDeviceLog/failLogLists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.Count",
		Path:    []string{"/v1/iotDeviceLog/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.Export",
		Path:    []string{"/v1/iotDeviceLog/logExport"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.CreateProductLogTable",
		Path:    []string{"/v1/iotDeviceLog/createProductTable"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.ProductEventLogReport",
		Path:    []string{"/v1/iotDeviceLog/productEventLogReport"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.ProductReportLogRecord",
		Path:    []string{"/v1/iotDeviceLog/productEventLogReport"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.DeviceOperationFailLogReport",
		Path:    []string{"/v1/iotDeviceLog/deviceOperationFailLogReport"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.OperationFailLogReport",
		Path:    []string{"/v1/iotDeviceLog/operationFailLogReport"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceLogService.ClearDeviceLogs",
		Path:    []string{"/v1/iotDeviceLog/clearDeviceLogs"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&IotDeviceLogService{h}, opts...))
}

type iotDeviceLogServiceHandler struct {
	IotDeviceLogServiceHandler
}

func (h *iotDeviceLogServiceHandler) Create(ctx context.Context, in *IotDeviceLog, out *Response) error {
	return h.IotDeviceLogServiceHandler.Create(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) Delete(ctx context.Context, in *IotDeviceLog, out *Response) error {
	return h.IotDeviceLogServiceHandler.Delete(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) DeleteById(ctx context.Context, in *IotDeviceLog, out *Response) error {
	return h.IotDeviceLogServiceHandler.DeleteById(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) DeleteByIds(ctx context.Context, in *IotDeviceLogBatchDeleteRequest, out *Response) error {
	return h.IotDeviceLogServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) Update(ctx context.Context, in *IotDeviceLog, out *Response) error {
	return h.IotDeviceLogServiceHandler.Update(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) UpdateAll(ctx context.Context, in *IotDeviceLog, out *Response) error {
	return h.IotDeviceLogServiceHandler.UpdateAll(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) UpdateFields(ctx context.Context, in *IotDeviceLogUpdateFieldsRequest, out *Response) error {
	return h.IotDeviceLogServiceHandler.UpdateFields(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) FindById(ctx context.Context, in *IotDeviceLogFilter, out *IotDeviceLogResponse) error {
	return h.IotDeviceLogServiceHandler.FindById(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) Find(ctx context.Context, in *IotDeviceLogFilter, out *IotDeviceLogResponse) error {
	return h.IotDeviceLogServiceHandler.Find(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) Lists(ctx context.Context, in *IotDeviceLogListRequest, out *IotDeviceLogResponse) error {
	return h.IotDeviceLogServiceHandler.Lists(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) FailLogLists(ctx context.Context, in *DeviceOperationFailLogListRequest, out *DeviceOperationFailLogListResponse) error {
	return h.IotDeviceLogServiceHandler.FailLogLists(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) Count(ctx context.Context, in *IotDeviceLogListRequest, out *IotDeviceLogResponse) error {
	return h.IotDeviceLogServiceHandler.Count(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) Export(ctx context.Context, in *IotDeviceLogListRequest, out *IotDeviceLogDExportResponse) error {
	return h.IotDeviceLogServiceHandler.Export(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) CreateProductLogTable(ctx context.Context, in *CreateProductLogTableResponse, out *Response) error {
	return h.IotDeviceLogServiceHandler.CreateProductLogTable(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) ProductEventLogReport(ctx context.Context, in *ProductLogRequest, out *ProductLogResponse) error {
	return h.IotDeviceLogServiceHandler.ProductEventLogReport(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) ProductReportLogRecord(ctx context.Context, in *ProductLogRequest, out *ProductLogRecordResponse) error {
	return h.IotDeviceLogServiceHandler.ProductReportLogRecord(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) DeviceOperationFailLogReport(ctx context.Context, in *DeviceOperationFailLogRequest, out *Response) error {
	return h.IotDeviceLogServiceHandler.DeviceOperationFailLogReport(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) OperationFailLogReport(ctx context.Context, in *OperationFailLogRequest, out *Response) error {
	return h.IotDeviceLogServiceHandler.OperationFailLogReport(ctx, in, out)
}

func (h *iotDeviceLogServiceHandler) ClearDeviceLogs(ctx context.Context, in *ProductLogRequest, out *Response) error {
	return h.IotDeviceLogServiceHandler.ClearDeviceLogs(ctx, in, out)
}
