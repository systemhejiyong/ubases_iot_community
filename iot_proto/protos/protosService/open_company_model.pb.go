// Code generated by protoc,2022-05-06 10:24:50. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: open_company_model.proto

package protosService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//来源于数据表
type OpenCompany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:唯一主键;comment:唯一主键;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"tenantId" gorm:"default:;comment:;size:6;"
	TenantId string `protobuf:"bytes,101,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// @inject_tag: json:"userId" gorm:"default:用户主键;comment:用户主键;size:19;"
	UserId int64 `protobuf:"varint,102,opt,name=userId,proto3" json:"userId,omitempty"`
	// @inject_tag: json:"name" gorm:"default:企业名称;comment:企业名称;size:50;"
	Name string `protobuf:"bytes,103,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: json:"nature" gorm:"default:企业性质;comment:企业性质;size:50;"
	Nature string `protobuf:"bytes,104,opt,name=nature,proto3" json:"nature,omitempty"`
	// @inject_tag: json:"licenseNo" gorm:"default:营业执照号码;comment:营业执照号码;size:20;"
	LicenseNo string `protobuf:"bytes,105,opt,name=licenseNo,proto3" json:"licenseNo,omitempty"`
	// @inject_tag: json:"license" gorm:"default:营业执照;comment:营业执照;size:255;"
	License string `protobuf:"bytes,106,opt,name=license,proto3" json:"license,omitempty"`
	// @inject_tag: json:"legalPerson" gorm:"default:法人姓名;comment:法人姓名;size:20;"
	LegalPerson string `protobuf:"bytes,107,opt,name=legalPerson,proto3" json:"legalPerson,omitempty"`
	// @inject_tag: json:"applyPerson" gorm:"default:申请人姓名;comment:申请人姓名;size:20;"
	ApplyPerson string `protobuf:"bytes,108,opt,name=applyPerson,proto3" json:"applyPerson,omitempty"`
	// @inject_tag: json:"idcard" gorm:"default:身份证号;comment:身份证号;size:20;"
	Idcard string `protobuf:"bytes,109,opt,name=idcard,proto3" json:"idcard,omitempty"`
	// @inject_tag: json:"idcardFrontImg" gorm:"default:身份证照片;comment:身份证照片;size:255;"
	IdcardFrontImg string `protobuf:"bytes,110,opt,name=idcardFrontImg,proto3" json:"idcardFrontImg,omitempty"`
	// @inject_tag: json:"idcardAfterImg" gorm:"default:联系电话;comment:联系电话;size:255;"
	IdcardAfterImg string `protobuf:"bytes,111,opt,name=idcardAfterImg,proto3" json:"idcardAfterImg,omitempty"`
	// @inject_tag: json:"address" gorm:"default:联系地址;comment:联系地址;size:200;"
	Address string `protobuf:"bytes,112,opt,name=address,proto3" json:"address,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态（=1 未提交 ,=2 认证中,   =3 已认证, =4 禁用;comment:状态（=1 未提交 ,=2 认证中,   =3 已认证, =4 禁用;size:10;"
	Status int32 `protobuf:"varint,113,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"accountType" gorm:"default:账号类型 1 企业账号, 2 个人账号;comment:账号类型 1 企业账号, 2 个人账号;size:10;"
	AccountType int32 `protobuf:"varint,114,opt,name=accountType,proto3" json:"accountType,omitempty"`
	// @inject_tag: json:"caseRemak" gorm:"default:审核备注(拒绝需要填写拒绝原因);comment:审核备注(拒绝需要填写拒绝原因);size:500;"
	CaseRemak string `protobuf:"bytes,115,opt,name=caseRemak,proto3" json:"caseRemak,omitempty"`
	// @inject_tag: json:"email" gorm:"default:用户邮箱;comment:用户邮箱;size:255;"
	Email string `protobuf:"bytes,116,opt,name=email,proto3" json:"email,omitempty"`
	// @inject_tag: json:"isRealName" gorm:"default:是否实名(1 已实名, 2 未实名);comment:是否实名(1 已实名, 2 未实名);size:10;"
	IsRealName int32 `protobuf:"varint,117,opt,name=isRealName,proto3" json:"isRealName,omitempty"`
	// @inject_tag: json:"phone" gorm:"default:联系电话;comment:联系电话;size:255;"
	Phone string `protobuf:"bytes,118,opt,name=phone,proto3" json:"phone,omitempty"`
	// @inject_tag: json:"requestAuthAt" gorm:"default:申请认证时间;comment:申请认证时间;"
	RequestAuthAt *timestamppb.Timestamp `protobuf:"bytes,119,opt,name=requestAuthAt,proto3" json:"requestAuthAt,omitempty"`
	// @inject_tag: json:"region" gorm:"default:区域(中国/长沙);comment:区域(中国/长沙);size:255;"
	Region string `protobuf:"bytes,120,opt,name=region,proto3" json:"region,omitempty"`
	// @inject_tag: json:"userName" gorm:"default:登录用户名(冗余字段.);comment:登录用户名(冗余字段.);size:255;"
	UserName string `protobuf:"bytes,121,opt,name=userName,proto3" json:"userName,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:19;"
	CreatedBy int64 `protobuf:"varint,122,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,123,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:19;"
	UpdatedBy int64 `protobuf:"varint,124,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,125,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除时间标识;comment:删除时间标识;"
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,126,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	//租户Id集合
	TenantIds []string `protobuf:"bytes,127,rep,name=tenantIds,proto3" json:"tenantIds,omitempty"`
}

func (x *OpenCompany) Reset() {
	*x = OpenCompany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_company_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenCompany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenCompany) ProtoMessage() {}

func (x *OpenCompany) ProtoReflect() protoreflect.Message {
	mi := &file_open_company_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenCompany.ProtoReflect.Descriptor instead.
func (*OpenCompany) Descriptor() ([]byte, []int) {
	return file_open_company_model_proto_rawDescGZIP(), []int{0}
}

func (x *OpenCompany) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpenCompany) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OpenCompany) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OpenCompany) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpenCompany) GetNature() string {
	if x != nil {
		return x.Nature
	}
	return ""
}

func (x *OpenCompany) GetLicenseNo() string {
	if x != nil {
		return x.LicenseNo
	}
	return ""
}

func (x *OpenCompany) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *OpenCompany) GetLegalPerson() string {
	if x != nil {
		return x.LegalPerson
	}
	return ""
}

func (x *OpenCompany) GetApplyPerson() string {
	if x != nil {
		return x.ApplyPerson
	}
	return ""
}

func (x *OpenCompany) GetIdcard() string {
	if x != nil {
		return x.Idcard
	}
	return ""
}

func (x *OpenCompany) GetIdcardFrontImg() string {
	if x != nil {
		return x.IdcardFrontImg
	}
	return ""
}

func (x *OpenCompany) GetIdcardAfterImg() string {
	if x != nil {
		return x.IdcardAfterImg
	}
	return ""
}

func (x *OpenCompany) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *OpenCompany) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OpenCompany) GetAccountType() int32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *OpenCompany) GetCaseRemak() string {
	if x != nil {
		return x.CaseRemak
	}
	return ""
}

func (x *OpenCompany) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *OpenCompany) GetIsRealName() int32 {
	if x != nil {
		return x.IsRealName
	}
	return 0
}

func (x *OpenCompany) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *OpenCompany) GetRequestAuthAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestAuthAt
	}
	return nil
}

func (x *OpenCompany) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *OpenCompany) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *OpenCompany) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *OpenCompany) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OpenCompany) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *OpenCompany) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OpenCompany) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *OpenCompany) GetTenantIds() []string {
	if x != nil {
		return x.TenantIds
	}
	return nil
}

type OpenCompanyFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:唯一主键;comment:唯一主键;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"tenantId" gorm:"default:;comment:;size:6;"
	TenantId string `protobuf:"bytes,101,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// @inject_tag: json:"userId" gorm:"default:用户主键;comment:用户主键;size:19;"
	UserId int64 `protobuf:"varint,102,opt,name=userId,proto3" json:"userId,omitempty"`
	// @inject_tag: json:"name" gorm:"default:企业名称;comment:企业名称;size:50;"
	Name string `protobuf:"bytes,103,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: json:"nature" gorm:"default:企业性质;comment:企业性质;size:50;"
	Nature string `protobuf:"bytes,104,opt,name=nature,proto3" json:"nature,omitempty"`
	// @inject_tag: json:"licenseNo" gorm:"default:营业执照号码;comment:营业执照号码;size:20;"
	LicenseNo string `protobuf:"bytes,105,opt,name=licenseNo,proto3" json:"licenseNo,omitempty"`
	// @inject_tag: json:"license" gorm:"default:营业执照;comment:营业执照;size:255;"
	License string `protobuf:"bytes,106,opt,name=license,proto3" json:"license,omitempty"`
	// @inject_tag: json:"legalPerson" gorm:"default:法人姓名;comment:法人姓名;size:20;"
	LegalPerson string `protobuf:"bytes,107,opt,name=legalPerson,proto3" json:"legalPerson,omitempty"`
	// @inject_tag: json:"applyPerson" gorm:"default:申请人姓名;comment:申请人姓名;size:20;"
	ApplyPerson string `protobuf:"bytes,108,opt,name=applyPerson,proto3" json:"applyPerson,omitempty"`
	// @inject_tag: json:"idcard" gorm:"default:身份证号;comment:身份证号;size:20;"
	Idcard string `protobuf:"bytes,109,opt,name=idcard,proto3" json:"idcard,omitempty"`
	// @inject_tag: json:"idcardFrontImg" gorm:"default:身份证照片;comment:身份证照片;size:255;"
	IdcardFrontImg string `protobuf:"bytes,110,opt,name=idcardFrontImg,proto3" json:"idcardFrontImg,omitempty"`
	// @inject_tag: json:"idcardAfterImg" gorm:"default:联系电话;comment:联系电话;size:255;"
	IdcardAfterImg string `protobuf:"bytes,111,opt,name=idcardAfterImg,proto3" json:"idcardAfterImg,omitempty"`
	// @inject_tag: json:"address" gorm:"default:联系地址;comment:联系地址;size:200;"
	Address string `protobuf:"bytes,112,opt,name=address,proto3" json:"address,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态（=1 未提交 ,=2 认证中,   =3 已认证, =4 禁用;comment:状态（=1 未提交 ,=2 认证中,   =3 已认证, =4 禁用;size:10;"
	Status int32 `protobuf:"varint,113,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"accountType" gorm:"default:账号类型 1 企业账号, 2 个人账号;comment:账号类型 1 企业账号, 2 个人账号;size:10;"
	AccountType int32 `protobuf:"varint,114,opt,name=accountType,proto3" json:"accountType,omitempty"`
	// @inject_tag: json:"caseRemak" gorm:"default:审核备注(拒绝需要填写拒绝原因);comment:审核备注(拒绝需要填写拒绝原因);size:500;"
	CaseRemak string `protobuf:"bytes,115,opt,name=caseRemak,proto3" json:"caseRemak,omitempty"`
	// @inject_tag: json:"email" gorm:"default:用户邮箱;comment:用户邮箱;size:255;"
	Email string `protobuf:"bytes,116,opt,name=email,proto3" json:"email,omitempty"`
	// @inject_tag: json:"isRealName" gorm:"default:是否实名(1 已实名, 2 未实名);comment:是否实名(1 已实名, 2 未实名);size:10;"
	IsRealName int32 `protobuf:"varint,117,opt,name=isRealName,proto3" json:"isRealName,omitempty"`
	// @inject_tag: json:"phone" gorm:"default:联系电话;comment:联系电话;size:255;"
	Phone string `protobuf:"bytes,118,opt,name=phone,proto3" json:"phone,omitempty"`
	// @inject_tag: json:"requestAuthAt" gorm:"default:申请认证时间;comment:申请认证时间;"
	RequestAuthAt *timestamppb.Timestamp `protobuf:"bytes,119,opt,name=requestAuthAt,proto3" json:"requestAuthAt,omitempty"`
	// @inject_tag: json:"region" gorm:"default:区域(中国/长沙);comment:区域(中国/长沙);size:255;"
	Region string `protobuf:"bytes,120,opt,name=region,proto3" json:"region,omitempty"`
	// @inject_tag: json:"userName" gorm:"default:登录用户名(冗余字段.);comment:登录用户名(冗余字段.);size:255;"
	UserName string `protobuf:"bytes,121,opt,name=userName,proto3" json:"userName,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:19;"
	CreatedBy int64 `protobuf:"varint,122,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,123,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:19;"
	UpdatedBy int64 `protobuf:"varint,124,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,125,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除时间标识;comment:删除时间标识;"
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,126,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	//租户Id集合
	TenantIds []string `protobuf:"bytes,127,rep,name=tenantIds,proto3" json:"tenantIds,omitempty"`
}

func (x *OpenCompanyFilter) Reset() {
	*x = OpenCompanyFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_company_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenCompanyFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenCompanyFilter) ProtoMessage() {}

func (x *OpenCompanyFilter) ProtoReflect() protoreflect.Message {
	mi := &file_open_company_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenCompanyFilter.ProtoReflect.Descriptor instead.
func (*OpenCompanyFilter) Descriptor() ([]byte, []int) {
	return file_open_company_model_proto_rawDescGZIP(), []int{1}
}

func (x *OpenCompanyFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpenCompanyFilter) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OpenCompanyFilter) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OpenCompanyFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpenCompanyFilter) GetNature() string {
	if x != nil {
		return x.Nature
	}
	return ""
}

func (x *OpenCompanyFilter) GetLicenseNo() string {
	if x != nil {
		return x.LicenseNo
	}
	return ""
}

func (x *OpenCompanyFilter) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *OpenCompanyFilter) GetLegalPerson() string {
	if x != nil {
		return x.LegalPerson
	}
	return ""
}

func (x *OpenCompanyFilter) GetApplyPerson() string {
	if x != nil {
		return x.ApplyPerson
	}
	return ""
}

func (x *OpenCompanyFilter) GetIdcard() string {
	if x != nil {
		return x.Idcard
	}
	return ""
}

func (x *OpenCompanyFilter) GetIdcardFrontImg() string {
	if x != nil {
		return x.IdcardFrontImg
	}
	return ""
}

func (x *OpenCompanyFilter) GetIdcardAfterImg() string {
	if x != nil {
		return x.IdcardAfterImg
	}
	return ""
}

func (x *OpenCompanyFilter) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *OpenCompanyFilter) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OpenCompanyFilter) GetAccountType() int32 {
	if x != nil {
		return x.AccountType
	}
	return 0
}

func (x *OpenCompanyFilter) GetCaseRemak() string {
	if x != nil {
		return x.CaseRemak
	}
	return ""
}

func (x *OpenCompanyFilter) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *OpenCompanyFilter) GetIsRealName() int32 {
	if x != nil {
		return x.IsRealName
	}
	return 0
}

func (x *OpenCompanyFilter) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *OpenCompanyFilter) GetRequestAuthAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestAuthAt
	}
	return nil
}

func (x *OpenCompanyFilter) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *OpenCompanyFilter) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *OpenCompanyFilter) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *OpenCompanyFilter) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OpenCompanyFilter) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *OpenCompanyFilter) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OpenCompanyFilter) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *OpenCompanyFilter) GetTenantIds() []string {
	if x != nil {
		return x.TenantIds
	}
	return nil
}

type OpenCompanyListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *OpenCompany `protobuf:"bytes,101,opt,name=query,proto3" json:"query,omitempty"`
	Page      int64        `protobuf:"varint,102,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64        `protobuf:"varint,103,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderKey  string       `protobuf:"bytes,104,opt,name=orderKey,proto3" json:"orderKey,omitempty"`
	OrderDesc string       `protobuf:"bytes,105,opt,name=orderDesc,proto3" json:"orderDesc,omitempty"`
	SearchKey string       `protobuf:"bytes,106,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
}

func (x *OpenCompanyListRequest) Reset() {
	*x = OpenCompanyListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_company_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenCompanyListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenCompanyListRequest) ProtoMessage() {}

func (x *OpenCompanyListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_company_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenCompanyListRequest.ProtoReflect.Descriptor instead.
func (*OpenCompanyListRequest) Descriptor() ([]byte, []int) {
	return file_open_company_model_proto_rawDescGZIP(), []int{2}
}

func (x *OpenCompanyListRequest) GetQuery() *OpenCompany {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *OpenCompanyListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *OpenCompanyListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *OpenCompanyListRequest) GetOrderKey() string {
	if x != nil {
		return x.OrderKey
	}
	return ""
}

func (x *OpenCompanyListRequest) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *OpenCompanyListRequest) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

type OpenCompanyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32          `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string         `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64          `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*OpenCompany `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *OpenCompanyResponse) Reset() {
	*x = OpenCompanyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_company_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenCompanyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenCompanyResponse) ProtoMessage() {}

func (x *OpenCompanyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_open_company_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenCompanyResponse.ProtoReflect.Descriptor instead.
func (*OpenCompanyResponse) Descriptor() ([]byte, []int) {
	return file_open_company_model_proto_rawDescGZIP(), []int{3}
}

func (x *OpenCompanyResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OpenCompanyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OpenCompanyResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OpenCompanyResponse) GetData() []*OpenCompany {
	if x != nil {
		return x.Data
	}
	return nil
}

type OpenCompanyUpdateFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string     `protobuf:"bytes,101,rep,name=fields,proto3" json:"fields,omitempty"`
	Data   *OpenCompany `protobuf:"bytes,102,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OpenCompanyUpdateFieldsRequest) Reset() {
	*x = OpenCompanyUpdateFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_company_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenCompanyUpdateFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenCompanyUpdateFieldsRequest) ProtoMessage() {}

func (x *OpenCompanyUpdateFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_company_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenCompanyUpdateFieldsRequest.ProtoReflect.Descriptor instead.
func (*OpenCompanyUpdateFieldsRequest) Descriptor() ([]byte, []int) {
	return file_open_company_model_proto_rawDescGZIP(), []int{4}
}

func (x *OpenCompanyUpdateFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *OpenCompanyUpdateFieldsRequest) GetData() *OpenCompany {
	if x != nil {
		return x.Data
	}
	return nil
}

// 表模型主键，只能是整数或字符串，若生成错误，请检查数据库表主键是否正确。支持组合主键
type OpenCompanyPrimarykey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OpenCompanyPrimarykey) Reset() {
	*x = OpenCompanyPrimarykey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_company_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenCompanyPrimarykey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenCompanyPrimarykey) ProtoMessage() {}

func (x *OpenCompanyPrimarykey) ProtoReflect() protoreflect.Message {
	mi := &file_open_company_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenCompanyPrimarykey.ProtoReflect.Descriptor instead.
func (*OpenCompanyPrimarykey) Descriptor() ([]byte, []int) {
	return file_open_company_model_proto_rawDescGZIP(), []int{5}
}

func (x *OpenCompanyPrimarykey) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type OpenCompanyBatchDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*OpenCompanyPrimarykey `protobuf:"bytes,101,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *OpenCompanyBatchDeleteRequest) Reset() {
	*x = OpenCompanyBatchDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_company_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenCompanyBatchDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenCompanyBatchDeleteRequest) ProtoMessage() {}

func (x *OpenCompanyBatchDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_company_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenCompanyBatchDeleteRequest.ProtoReflect.Descriptor instead.
func (*OpenCompanyBatchDeleteRequest) Descriptor() ([]byte, []int) {
	return file_open_company_model_proto_rawDescGZIP(), []int{6}
}

func (x *OpenCompanyBatchDeleteRequest) GetKeys() []*OpenCompanyPrimarykey {
	if x != nil {
		return x.Keys
	}
	return nil
}

//审核开发者请求参数
type OpenDevCompanyAuthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthName string `protobuf:"bytes,101,opt,name=AuthName,proto3" json:"AuthName,omitempty"`
	Id       string `protobuf:"bytes,102,opt,name=Id,proto3" json:"Id,omitempty"`
	Status   int32  `protobuf:"varint,103,opt,name=Status,proto3" json:"Status,omitempty"`
	Why      string `protobuf:"bytes,104,opt,name=Why,proto3" json:"Why,omitempty"`
}

func (x *OpenDevCompanyAuthRequest) Reset() {
	*x = OpenDevCompanyAuthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_open_company_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenDevCompanyAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenDevCompanyAuthRequest) ProtoMessage() {}

func (x *OpenDevCompanyAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_open_company_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenDevCompanyAuthRequest.ProtoReflect.Descriptor instead.
func (*OpenDevCompanyAuthRequest) Descriptor() ([]byte, []int) {
	return file_open_company_model_proto_rawDescGZIP(), []int{7}
}

func (x *OpenDevCompanyAuthRequest) GetAuthName() string {
	if x != nil {
		return x.AuthName
	}
	return ""
}

func (x *OpenDevCompanyAuthRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OpenDevCompanyAuthRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OpenDevCompanyAuthRequest) GetWhy() string {
	if x != nil {
		return x.Why
	}
	return ""
}

var File_open_company_model_proto protoreflect.FileDescriptor

var file_open_company_model_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x07, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e,
	0x6f, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x6a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x6b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x18, 0x6c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x64, 0x63, 0x61,
	0x72, 0x64, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6d, 0x67, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6d, 0x67,
	0x12, 0x26, 0x0a, 0x0e, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49,
	0x6d, 0x67, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x71, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x6b, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x75,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x76, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x41, 0x74, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x79, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x18, 0x7f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x73, 0x22, 0xa3, 0x07, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x49, 0x6d, 0x67,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x46, 0x72,
	0x6f, 0x6e, 0x74, 0x49, 0x6d, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x49, 0x6d, 0x67, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x71, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x72, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x6b, 0x18,
	0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x73, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x76, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x40, 0x0a, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x41, 0x74, 0x18, 0x77, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x41, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x7a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x7b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x18, 0x7f, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x16, 0x4f,
	0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x83, 0x01, 0x0a, 0x13, 0x4f, 0x70,
	0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x68, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x62, 0x0a, 0x1e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x27, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x1d,
	0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x22, 0x71, 0x0a, 0x19, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x65, 0x76, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x41, 0x75, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x57, 0x68, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x57, 0x68, 0x79, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_open_company_model_proto_rawDescOnce sync.Once
	file_open_company_model_proto_rawDescData = file_open_company_model_proto_rawDesc
)

func file_open_company_model_proto_rawDescGZIP() []byte {
	file_open_company_model_proto_rawDescOnce.Do(func() {
		file_open_company_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_open_company_model_proto_rawDescData)
	})
	return file_open_company_model_proto_rawDescData
}

var file_open_company_model_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_open_company_model_proto_goTypes = []interface{}{
	(*OpenCompany)(nil),                    // 0: service.OpenCompany
	(*OpenCompanyFilter)(nil),              // 1: service.OpenCompanyFilter
	(*OpenCompanyListRequest)(nil),         // 2: service.OpenCompanyListRequest
	(*OpenCompanyResponse)(nil),            // 3: service.OpenCompanyResponse
	(*OpenCompanyUpdateFieldsRequest)(nil), // 4: service.OpenCompanyUpdateFieldsRequest
	(*OpenCompanyPrimarykey)(nil),          // 5: service.OpenCompanyPrimarykey
	(*OpenCompanyBatchDeleteRequest)(nil),  // 6: service.OpenCompanyBatchDeleteRequest
	(*OpenDevCompanyAuthRequest)(nil),      // 7: service.OpenDevCompanyAuthRequest
	(*timestamppb.Timestamp)(nil),          // 8: google.protobuf.Timestamp
}
var file_open_company_model_proto_depIdxs = []int32{
	8,  // 0: service.OpenCompany.requestAuthAt:type_name -> google.protobuf.Timestamp
	8,  // 1: service.OpenCompany.createdAt:type_name -> google.protobuf.Timestamp
	8,  // 2: service.OpenCompany.updatedAt:type_name -> google.protobuf.Timestamp
	8,  // 3: service.OpenCompany.deletedAt:type_name -> google.protobuf.Timestamp
	8,  // 4: service.OpenCompanyFilter.requestAuthAt:type_name -> google.protobuf.Timestamp
	8,  // 5: service.OpenCompanyFilter.createdAt:type_name -> google.protobuf.Timestamp
	8,  // 6: service.OpenCompanyFilter.updatedAt:type_name -> google.protobuf.Timestamp
	8,  // 7: service.OpenCompanyFilter.deletedAt:type_name -> google.protobuf.Timestamp
	0,  // 8: service.OpenCompanyListRequest.query:type_name -> service.OpenCompany
	0,  // 9: service.OpenCompanyResponse.data:type_name -> service.OpenCompany
	0,  // 10: service.OpenCompanyUpdateFieldsRequest.data:type_name -> service.OpenCompany
	5,  // 11: service.OpenCompanyBatchDeleteRequest.keys:type_name -> service.OpenCompanyPrimarykey
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_open_company_model_proto_init() }
func file_open_company_model_proto_init() {
	if File_open_company_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_open_company_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenCompany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_company_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenCompanyFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_company_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenCompanyListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_company_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenCompanyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_company_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenCompanyUpdateFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_company_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenCompanyPrimarykey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_company_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenCompanyBatchDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_open_company_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenDevCompanyAuthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_open_company_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_open_company_model_proto_goTypes,
		DependencyIndexes: file_open_company_model_proto_depIdxs,
		MessageInfos:      file_open_company_model_proto_msgTypes,
	}.Build()
	File_open_company_model_proto = out.File
	file_open_company_model_proto_rawDesc = nil
	file_open_company_model_proto_goTypes = nil
	file_open_company_model_proto_depIdxs = nil
}
