// Code generated by protoc,2022-05-10 17:04:19. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: opm_firmware_version_model.gen.proto

package protosService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//来源于数据表
type OpmFirmwareVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:唯一主键;comment:唯一主键;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"firmwareId" gorm:"default:固件主键编号;comment:固件主键编号;size:19;"
	FirmwareId int64 `protobuf:"varint,101,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`
	// @inject_tag: json:"tenantId" gorm:"default:;comment:;size:6;"
	TenantId string `protobuf:"bytes,102,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// @inject_tag: json:"version" gorm:"default:固件版本号;comment:固件版本号;size:20;"
	Version string `protobuf:"bytes,103,opt,name=version,proto3" json:"version,omitempty"`
	// @inject_tag: json:"desc" gorm:"default:固件版本描述;comment:固件版本描述;size:255;"
	Desc string `protobuf:"bytes,104,opt,name=desc,proto3" json:"desc,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态（1上架 2未上架）;comment:状态（1上架 2未上架）;size:10;"
	Status int32 `protobuf:"varint,105,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"isMust" gorm:"default:是否必须;comment:是否必须;size:10;"
	IsMust int32 `protobuf:"varint,106,opt,name=isMust,proto3" json:"isMust,omitempty"`
	// @inject_tag: json:"upgradeMode" gorm:"default:升级模式 =0  整包;comment:升级模式 =0  整包;size:10;"
	UpgradeMode int32 `protobuf:"varint,107,opt,name=upgradeMode,proto3" json:"upgradeMode,omitempty"`
	// @inject_tag: json:"upgradeFileName" gorm:"default:文件名称;comment:文件名称;size:100;"
	UpgradeFileName string `protobuf:"bytes,108,opt,name=upgradeFileName,proto3" json:"upgradeFileName,omitempty"`
	// @inject_tag: json:"upgradeFilePath" gorm:"default:固件版本文件;comment:固件版本文件;size:255;"
	UpgradeFilePath string `protobuf:"bytes,109,opt,name=upgradeFilePath,proto3" json:"upgradeFilePath,omitempty"`
	// @inject_tag: json:"upgradeFileKey" gorm:"default:固件版本MD5值;comment:固件版本MD5值;size:50;"
	UpgradeFileKey string `protobuf:"bytes,110,opt,name=upgradeFileKey,proto3" json:"upgradeFileKey,omitempty"`
	// @inject_tag: json:"upgradeFileSize" gorm:"default:固件版本包大小;comment:固件版本包大小;size:10;"
	UpgradeFileSize int32 `protobuf:"varint,111,opt,name=upgradeFileSize,proto3" json:"upgradeFileSize,omitempty"`
	// @inject_tag: json:"prodFileName" gorm:"default:文件名称;comment:文件名称;size:100;"
	ProdFileName string `protobuf:"bytes,112,opt,name=prodFileName,proto3" json:"prodFileName,omitempty"`
	// @inject_tag: json:"prodFilePath" gorm:"default:固件版本文件;comment:固件版本文件;size:255;"
	ProdFilePath string `protobuf:"bytes,113,opt,name=prodFilePath,proto3" json:"prodFilePath,omitempty"`
	// @inject_tag: json:"prodFileKey" gorm:"default:固件版本MD5值;comment:固件版本MD5值;size:50;"
	ProdFileKey string `protobuf:"bytes,114,opt,name=prodFileKey,proto3" json:"prodFileKey,omitempty"`
	// @inject_tag: json:"prodFileSize" gorm:"default:固件版本包大小;comment:固件版本包大小;size:10;"
	ProdFileSize int32 `protobuf:"varint,115,opt,name=prodFileSize,proto3" json:"prodFileSize,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,116,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:19;"
	UpdatedBy int64 `protobuf:"varint,117,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,118,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除标识（0-正常 1-删除）;comment:删除标识（0-正常 1-删除）;"
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,119,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
}

func (x *OpmFirmwareVersion) Reset() {
	*x = OpmFirmwareVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_firmware_version_model_gen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmFirmwareVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmFirmwareVersion) ProtoMessage() {}

func (x *OpmFirmwareVersion) ProtoReflect() protoreflect.Message {
	mi := &file_opm_firmware_version_model_gen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmFirmwareVersion.ProtoReflect.Descriptor instead.
func (*OpmFirmwareVersion) Descriptor() ([]byte, []int) {
	return file_opm_firmware_version_model_gen_proto_rawDescGZIP(), []int{0}
}

func (x *OpmFirmwareVersion) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpmFirmwareVersion) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

func (x *OpmFirmwareVersion) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OpmFirmwareVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OpmFirmwareVersion) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *OpmFirmwareVersion) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OpmFirmwareVersion) GetIsMust() int32 {
	if x != nil {
		return x.IsMust
	}
	return 0
}

func (x *OpmFirmwareVersion) GetUpgradeMode() int32 {
	if x != nil {
		return x.UpgradeMode
	}
	return 0
}

func (x *OpmFirmwareVersion) GetUpgradeFileName() string {
	if x != nil {
		return x.UpgradeFileName
	}
	return ""
}

func (x *OpmFirmwareVersion) GetUpgradeFilePath() string {
	if x != nil {
		return x.UpgradeFilePath
	}
	return ""
}

func (x *OpmFirmwareVersion) GetUpgradeFileKey() string {
	if x != nil {
		return x.UpgradeFileKey
	}
	return ""
}

func (x *OpmFirmwareVersion) GetUpgradeFileSize() int32 {
	if x != nil {
		return x.UpgradeFileSize
	}
	return 0
}

func (x *OpmFirmwareVersion) GetProdFileName() string {
	if x != nil {
		return x.ProdFileName
	}
	return ""
}

func (x *OpmFirmwareVersion) GetProdFilePath() string {
	if x != nil {
		return x.ProdFilePath
	}
	return ""
}

func (x *OpmFirmwareVersion) GetProdFileKey() string {
	if x != nil {
		return x.ProdFileKey
	}
	return ""
}

func (x *OpmFirmwareVersion) GetProdFileSize() int32 {
	if x != nil {
		return x.ProdFileSize
	}
	return 0
}

func (x *OpmFirmwareVersion) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OpmFirmwareVersion) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *OpmFirmwareVersion) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OpmFirmwareVersion) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type OpmFirmwareVersionFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:唯一主键;comment:唯一主键;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"firmwareId" gorm:"default:固件主键编号;comment:固件主键编号;size:19;"
	FirmwareId int64 `protobuf:"varint,101,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`
	// @inject_tag: json:"tenantId" gorm:"default:;comment:;size:6;"
	TenantId string `protobuf:"bytes,102,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// @inject_tag: json:"version" gorm:"default:固件版本号;comment:固件版本号;size:20;"
	Version string `protobuf:"bytes,103,opt,name=version,proto3" json:"version,omitempty"`
	// @inject_tag: json:"desc" gorm:"default:固件版本描述;comment:固件版本描述;size:255;"
	Desc string `protobuf:"bytes,104,opt,name=desc,proto3" json:"desc,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态（1上架 2未上架）;comment:状态（1上架 2未上架）;size:10;"
	Status int32 `protobuf:"varint,105,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"isMust" gorm:"default:是否必须;comment:是否必须;size:10;"
	IsMust int32 `protobuf:"varint,106,opt,name=isMust,proto3" json:"isMust,omitempty"`
	// @inject_tag: json:"upgradeMode" gorm:"default:升级模式 =0  整包;comment:升级模式 =0  整包;size:10;"
	UpgradeMode int32 `protobuf:"varint,107,opt,name=upgradeMode,proto3" json:"upgradeMode,omitempty"`
	// @inject_tag: json:"upgradeFileName" gorm:"default:文件名称;comment:文件名称;size:100;"
	UpgradeFileName string `protobuf:"bytes,108,opt,name=upgradeFileName,proto3" json:"upgradeFileName,omitempty"`
	// @inject_tag: json:"upgradeFilePath" gorm:"default:固件版本文件;comment:固件版本文件;size:255;"
	UpgradeFilePath string `protobuf:"bytes,109,opt,name=upgradeFilePath,proto3" json:"upgradeFilePath,omitempty"`
	// @inject_tag: json:"upgradeFileKey" gorm:"default:固件版本MD5值;comment:固件版本MD5值;size:50;"
	UpgradeFileKey string `protobuf:"bytes,110,opt,name=upgradeFileKey,proto3" json:"upgradeFileKey,omitempty"`
	// @inject_tag: json:"upgradeFileSize" gorm:"default:固件版本包大小;comment:固件版本包大小;size:10;"
	UpgradeFileSize int32 `protobuf:"varint,111,opt,name=upgradeFileSize,proto3" json:"upgradeFileSize,omitempty"`
	// @inject_tag: json:"prodFileName" gorm:"default:文件名称;comment:文件名称;size:100;"
	ProdFileName string `protobuf:"bytes,112,opt,name=prodFileName,proto3" json:"prodFileName,omitempty"`
	// @inject_tag: json:"prodFilePath" gorm:"default:固件版本文件;comment:固件版本文件;size:255;"
	ProdFilePath string `protobuf:"bytes,113,opt,name=prodFilePath,proto3" json:"prodFilePath,omitempty"`
	// @inject_tag: json:"prodFileKey" gorm:"default:固件版本MD5值;comment:固件版本MD5值;size:50;"
	ProdFileKey string `protobuf:"bytes,114,opt,name=prodFileKey,proto3" json:"prodFileKey,omitempty"`
	// @inject_tag: json:"prodFileSize" gorm:"default:固件版本包大小;comment:固件版本包大小;size:10;"
	ProdFileSize int32 `protobuf:"varint,115,opt,name=prodFileSize,proto3" json:"prodFileSize,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,116,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:19;"
	UpdatedBy int64 `protobuf:"varint,117,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,118,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除标识（0-正常 1-删除）;comment:删除标识（0-正常 1-删除）;"
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,119,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
}

func (x *OpmFirmwareVersionFilter) Reset() {
	*x = OpmFirmwareVersionFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_firmware_version_model_gen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmFirmwareVersionFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmFirmwareVersionFilter) ProtoMessage() {}

func (x *OpmFirmwareVersionFilter) ProtoReflect() protoreflect.Message {
	mi := &file_opm_firmware_version_model_gen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmFirmwareVersionFilter.ProtoReflect.Descriptor instead.
func (*OpmFirmwareVersionFilter) Descriptor() ([]byte, []int) {
	return file_opm_firmware_version_model_gen_proto_rawDescGZIP(), []int{1}
}

func (x *OpmFirmwareVersionFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpmFirmwareVersionFilter) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

func (x *OpmFirmwareVersionFilter) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OpmFirmwareVersionFilter) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OpmFirmwareVersionFilter) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *OpmFirmwareVersionFilter) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OpmFirmwareVersionFilter) GetIsMust() int32 {
	if x != nil {
		return x.IsMust
	}
	return 0
}

func (x *OpmFirmwareVersionFilter) GetUpgradeMode() int32 {
	if x != nil {
		return x.UpgradeMode
	}
	return 0
}

func (x *OpmFirmwareVersionFilter) GetUpgradeFileName() string {
	if x != nil {
		return x.UpgradeFileName
	}
	return ""
}

func (x *OpmFirmwareVersionFilter) GetUpgradeFilePath() string {
	if x != nil {
		return x.UpgradeFilePath
	}
	return ""
}

func (x *OpmFirmwareVersionFilter) GetUpgradeFileKey() string {
	if x != nil {
		return x.UpgradeFileKey
	}
	return ""
}

func (x *OpmFirmwareVersionFilter) GetUpgradeFileSize() int32 {
	if x != nil {
		return x.UpgradeFileSize
	}
	return 0
}

func (x *OpmFirmwareVersionFilter) GetProdFileName() string {
	if x != nil {
		return x.ProdFileName
	}
	return ""
}

func (x *OpmFirmwareVersionFilter) GetProdFilePath() string {
	if x != nil {
		return x.ProdFilePath
	}
	return ""
}

func (x *OpmFirmwareVersionFilter) GetProdFileKey() string {
	if x != nil {
		return x.ProdFileKey
	}
	return ""
}

func (x *OpmFirmwareVersionFilter) GetProdFileSize() int32 {
	if x != nil {
		return x.ProdFileSize
	}
	return 0
}

func (x *OpmFirmwareVersionFilter) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OpmFirmwareVersionFilter) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *OpmFirmwareVersionFilter) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OpmFirmwareVersionFilter) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type OpmFirmwareVersionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *OpmFirmwareVersion `protobuf:"bytes,101,opt,name=query,proto3" json:"query,omitempty"`
	Page      int64               `protobuf:"varint,102,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64               `protobuf:"varint,103,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderKey  string              `protobuf:"bytes,104,opt,name=orderKey,proto3" json:"orderKey,omitempty"`
	OrderDesc string              `protobuf:"bytes,105,opt,name=orderDesc,proto3" json:"orderDesc,omitempty"`
	SearchKey string              `protobuf:"bytes,106,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
}

func (x *OpmFirmwareVersionListRequest) Reset() {
	*x = OpmFirmwareVersionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_firmware_version_model_gen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmFirmwareVersionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmFirmwareVersionListRequest) ProtoMessage() {}

func (x *OpmFirmwareVersionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_firmware_version_model_gen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmFirmwareVersionListRequest.ProtoReflect.Descriptor instead.
func (*OpmFirmwareVersionListRequest) Descriptor() ([]byte, []int) {
	return file_opm_firmware_version_model_gen_proto_rawDescGZIP(), []int{2}
}

func (x *OpmFirmwareVersionListRequest) GetQuery() *OpmFirmwareVersion {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *OpmFirmwareVersionListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *OpmFirmwareVersionListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *OpmFirmwareVersionListRequest) GetOrderKey() string {
	if x != nil {
		return x.OrderKey
	}
	return ""
}

func (x *OpmFirmwareVersionListRequest) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *OpmFirmwareVersionListRequest) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

type OpmFirmwareVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                 `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string                `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64                 `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*OpmFirmwareVersion `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *OpmFirmwareVersionResponse) Reset() {
	*x = OpmFirmwareVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_firmware_version_model_gen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmFirmwareVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmFirmwareVersionResponse) ProtoMessage() {}

func (x *OpmFirmwareVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opm_firmware_version_model_gen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmFirmwareVersionResponse.ProtoReflect.Descriptor instead.
func (*OpmFirmwareVersionResponse) Descriptor() ([]byte, []int) {
	return file_opm_firmware_version_model_gen_proto_rawDescGZIP(), []int{3}
}

func (x *OpmFirmwareVersionResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OpmFirmwareVersionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OpmFirmwareVersionResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OpmFirmwareVersionResponse) GetData() []*OpmFirmwareVersion {
	if x != nil {
		return x.Data
	}
	return nil
}

type OpmFirmwareVersionUpdateFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string            `protobuf:"bytes,101,rep,name=fields,proto3" json:"fields,omitempty"`
	Data   *OpmFirmwareVersion `protobuf:"bytes,102,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OpmFirmwareVersionUpdateFieldsRequest) Reset() {
	*x = OpmFirmwareVersionUpdateFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_firmware_version_model_gen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmFirmwareVersionUpdateFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmFirmwareVersionUpdateFieldsRequest) ProtoMessage() {}

func (x *OpmFirmwareVersionUpdateFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_firmware_version_model_gen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmFirmwareVersionUpdateFieldsRequest.ProtoReflect.Descriptor instead.
func (*OpmFirmwareVersionUpdateFieldsRequest) Descriptor() ([]byte, []int) {
	return file_opm_firmware_version_model_gen_proto_rawDescGZIP(), []int{4}
}

func (x *OpmFirmwareVersionUpdateFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *OpmFirmwareVersionUpdateFieldsRequest) GetData() *OpmFirmwareVersion {
	if x != nil {
		return x.Data
	}
	return nil
}

// 表模型主键，只能是整数或字符串，若生成错误，请检查数据库表主键是否正确。支持组合主键
type OpmFirmwareVersionPrimarykey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OpmFirmwareVersionPrimarykey) Reset() {
	*x = OpmFirmwareVersionPrimarykey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_firmware_version_model_gen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmFirmwareVersionPrimarykey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmFirmwareVersionPrimarykey) ProtoMessage() {}

func (x *OpmFirmwareVersionPrimarykey) ProtoReflect() protoreflect.Message {
	mi := &file_opm_firmware_version_model_gen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmFirmwareVersionPrimarykey.ProtoReflect.Descriptor instead.
func (*OpmFirmwareVersionPrimarykey) Descriptor() ([]byte, []int) {
	return file_opm_firmware_version_model_gen_proto_rawDescGZIP(), []int{5}
}

func (x *OpmFirmwareVersionPrimarykey) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type OpmFirmwareVersionBatchDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*OpmFirmwareVersionPrimarykey `protobuf:"bytes,101,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *OpmFirmwareVersionBatchDeleteRequest) Reset() {
	*x = OpmFirmwareVersionBatchDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_firmware_version_model_gen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmFirmwareVersionBatchDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmFirmwareVersionBatchDeleteRequest) ProtoMessage() {}

func (x *OpmFirmwareVersionBatchDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_firmware_version_model_gen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmFirmwareVersionBatchDeleteRequest.ProtoReflect.Descriptor instead.
func (*OpmFirmwareVersionBatchDeleteRequest) Descriptor() ([]byte, []int) {
	return file_opm_firmware_version_model_gen_proto_rawDescGZIP(), []int{6}
}

func (x *OpmFirmwareVersionBatchDeleteRequest) GetKeys() []*OpmFirmwareVersionPrimarykey {
	if x != nil {
		return x.Keys
	}
	return nil
}

var File_opm_firmware_version_model_gen_proto protoreflect.FileDescriptor

var file_opm_firmware_version_model_gen_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6f, 0x70, 0x6d, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x67, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe0, 0x05, 0x0a, 0x12, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4d,
	0x75, 0x73, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x75, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x6b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x28, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x71, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x75,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x76, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xe6, 0x05, 0x0a, 0x18, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4d, 0x75, 0x73, 0x74, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x75, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x26, 0x0a, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x73, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x74, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x75, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xda, 0x01, 0x0a,
	0x1d, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x4f, 0x70,
	0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x68, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a,
	0x25, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x65, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x2e, 0x0a, 0x1c, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x61, 0x0a, 0x24, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opm_firmware_version_model_gen_proto_rawDescOnce sync.Once
	file_opm_firmware_version_model_gen_proto_rawDescData = file_opm_firmware_version_model_gen_proto_rawDesc
)

func file_opm_firmware_version_model_gen_proto_rawDescGZIP() []byte {
	file_opm_firmware_version_model_gen_proto_rawDescOnce.Do(func() {
		file_opm_firmware_version_model_gen_proto_rawDescData = protoimpl.X.CompressGZIP(file_opm_firmware_version_model_gen_proto_rawDescData)
	})
	return file_opm_firmware_version_model_gen_proto_rawDescData
}

var file_opm_firmware_version_model_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_opm_firmware_version_model_gen_proto_goTypes = []interface{}{
	(*OpmFirmwareVersion)(nil),                    // 0: service.OpmFirmwareVersion
	(*OpmFirmwareVersionFilter)(nil),              // 1: service.OpmFirmwareVersionFilter
	(*OpmFirmwareVersionListRequest)(nil),         // 2: service.OpmFirmwareVersionListRequest
	(*OpmFirmwareVersionResponse)(nil),            // 3: service.OpmFirmwareVersionResponse
	(*OpmFirmwareVersionUpdateFieldsRequest)(nil), // 4: service.OpmFirmwareVersionUpdateFieldsRequest
	(*OpmFirmwareVersionPrimarykey)(nil),          // 5: service.OpmFirmwareVersionPrimarykey
	(*OpmFirmwareVersionBatchDeleteRequest)(nil),  // 6: service.OpmFirmwareVersionBatchDeleteRequest
	(*timestamppb.Timestamp)(nil),                 // 7: google.protobuf.Timestamp
}
var file_opm_firmware_version_model_gen_proto_depIdxs = []int32{
	7,  // 0: service.OpmFirmwareVersion.createdAt:type_name -> google.protobuf.Timestamp
	7,  // 1: service.OpmFirmwareVersion.updatedAt:type_name -> google.protobuf.Timestamp
	7,  // 2: service.OpmFirmwareVersion.deletedAt:type_name -> google.protobuf.Timestamp
	7,  // 3: service.OpmFirmwareVersionFilter.createdAt:type_name -> google.protobuf.Timestamp
	7,  // 4: service.OpmFirmwareVersionFilter.updatedAt:type_name -> google.protobuf.Timestamp
	7,  // 5: service.OpmFirmwareVersionFilter.deletedAt:type_name -> google.protobuf.Timestamp
	0,  // 6: service.OpmFirmwareVersionListRequest.query:type_name -> service.OpmFirmwareVersion
	0,  // 7: service.OpmFirmwareVersionResponse.data:type_name -> service.OpmFirmwareVersion
	0,  // 8: service.OpmFirmwareVersionUpdateFieldsRequest.data:type_name -> service.OpmFirmwareVersion
	5,  // 9: service.OpmFirmwareVersionBatchDeleteRequest.keys:type_name -> service.OpmFirmwareVersionPrimarykey
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_opm_firmware_version_model_gen_proto_init() }
func file_opm_firmware_version_model_gen_proto_init() {
	if File_opm_firmware_version_model_gen_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opm_firmware_version_model_gen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmFirmwareVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_firmware_version_model_gen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmFirmwareVersionFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_firmware_version_model_gen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmFirmwareVersionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_firmware_version_model_gen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmFirmwareVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_firmware_version_model_gen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmFirmwareVersionUpdateFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_firmware_version_model_gen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmFirmwareVersionPrimarykey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_firmware_version_model_gen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmFirmwareVersionBatchDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opm_firmware_version_model_gen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opm_firmware_version_model_gen_proto_goTypes,
		DependencyIndexes: file_opm_firmware_version_model_gen_proto_depIdxs,
		MessageInfos:      file_opm_firmware_version_model_gen_proto_msgTypes,
	}.Build()
	File_opm_firmware_version_model_gen_proto = out.File
	file_opm_firmware_version_model_gen_proto_rawDesc = nil
	file_opm_firmware_version_model_gen_proto_goTypes = nil
	file_opm_firmware_version_model_gen_proto_depIdxs = nil
}
