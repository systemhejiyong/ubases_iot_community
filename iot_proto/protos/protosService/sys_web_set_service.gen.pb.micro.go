// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sys_web_set_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SysWebSetService service

func NewSysWebSetServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "SysWebSetService.Create",
			Path:    []string{"/v1/sysWebSet/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysWebSetService.Delete",
			Path:    []string{"/v1/sysWebSet/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysWebSetService.DeleteById",
			Path:    []string{"/v1/sysWebSet/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysWebSetService.DeleteByIds",
			Path:    []string{"/v1/sysWebSet/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysWebSetService.Update",
			Path:    []string{"/v1/sysWebSet/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysWebSetService.UpdateAll",
			Path:    []string{"/v1/sysWebSet/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysWebSetService.UpdateFields",
			Path:    []string{"/v1/sysWebSet/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysWebSetService.FindById",
			Path:    []string{"/v1/sysWebSet/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysWebSetService.Find",
			Path:    []string{"/v1/sysWebSet/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysWebSetService.Lists",
			Path:    []string{"/v1/sysWebSet/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for SysWebSetService service

type SysWebSetService interface {
	//创建
	Create(ctx context.Context, in *SysWebSet, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *SysWebSet, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *SysWebSet, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *SysWebSetBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *SysWebSet, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *SysWebSet, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *SysWebSetUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *SysWebSetFilter, opts ...client.CallOption) (*SysWebSetResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *SysWebSetFilter, opts ...client.CallOption) (*SysWebSetResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *SysWebSetListRequest, opts ...client.CallOption) (*SysWebSetResponse, error)
}

type sysWebSetService struct {
	c    client.Client
	name string
}

func NewSysWebSetService(name string, c client.Client) SysWebSetService {
	return &sysWebSetService{
		c:    c,
		name: name,
	}
}

func (c *sysWebSetService) Create(ctx context.Context, in *SysWebSet, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysWebSetService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysWebSetService) Delete(ctx context.Context, in *SysWebSet, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysWebSetService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysWebSetService) DeleteById(ctx context.Context, in *SysWebSet, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysWebSetService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysWebSetService) DeleteByIds(ctx context.Context, in *SysWebSetBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysWebSetService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysWebSetService) Update(ctx context.Context, in *SysWebSet, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysWebSetService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysWebSetService) UpdateAll(ctx context.Context, in *SysWebSet, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysWebSetService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysWebSetService) UpdateFields(ctx context.Context, in *SysWebSetUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysWebSetService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysWebSetService) FindById(ctx context.Context, in *SysWebSetFilter, opts ...client.CallOption) (*SysWebSetResponse, error) {
	req := c.c.NewRequest(c.name, "SysWebSetService.FindById", in)
	out := new(SysWebSetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysWebSetService) Find(ctx context.Context, in *SysWebSetFilter, opts ...client.CallOption) (*SysWebSetResponse, error) {
	req := c.c.NewRequest(c.name, "SysWebSetService.Find", in)
	out := new(SysWebSetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysWebSetService) Lists(ctx context.Context, in *SysWebSetListRequest, opts ...client.CallOption) (*SysWebSetResponse, error) {
	req := c.c.NewRequest(c.name, "SysWebSetService.Lists", in)
	out := new(SysWebSetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SysWebSetService service

type SysWebSetServiceHandler interface {
	//创建
	Create(context.Context, *SysWebSet, *Response) error
	//匹配多条件删除
	Delete(context.Context, *SysWebSet, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *SysWebSet, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *SysWebSetBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *SysWebSet, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *SysWebSet, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *SysWebSetUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *SysWebSetFilter, *SysWebSetResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *SysWebSetFilter, *SysWebSetResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *SysWebSetListRequest, *SysWebSetResponse) error
}

func RegisterSysWebSetServiceHandler(s server.Server, hdlr SysWebSetServiceHandler, opts ...server.HandlerOption) error {
	type sysWebSetService interface {
		Create(ctx context.Context, in *SysWebSet, out *Response) error
		Delete(ctx context.Context, in *SysWebSet, out *Response) error
		DeleteById(ctx context.Context, in *SysWebSet, out *Response) error
		DeleteByIds(ctx context.Context, in *SysWebSetBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *SysWebSet, out *Response) error
		UpdateAll(ctx context.Context, in *SysWebSet, out *Response) error
		UpdateFields(ctx context.Context, in *SysWebSetUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *SysWebSetFilter, out *SysWebSetResponse) error
		Find(ctx context.Context, in *SysWebSetFilter, out *SysWebSetResponse) error
		Lists(ctx context.Context, in *SysWebSetListRequest, out *SysWebSetResponse) error
	}
	type SysWebSetService struct {
		sysWebSetService
	}
	h := &sysWebSetServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysWebSetService.Create",
		Path:    []string{"/v1/sysWebSet/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysWebSetService.Delete",
		Path:    []string{"/v1/sysWebSet/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysWebSetService.DeleteById",
		Path:    []string{"/v1/sysWebSet/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysWebSetService.DeleteByIds",
		Path:    []string{"/v1/sysWebSet/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysWebSetService.Update",
		Path:    []string{"/v1/sysWebSet/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysWebSetService.UpdateAll",
		Path:    []string{"/v1/sysWebSet/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysWebSetService.UpdateFields",
		Path:    []string{"/v1/sysWebSet/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysWebSetService.FindById",
		Path:    []string{"/v1/sysWebSet/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysWebSetService.Find",
		Path:    []string{"/v1/sysWebSet/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysWebSetService.Lists",
		Path:    []string{"/v1/sysWebSet/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&SysWebSetService{h}, opts...))
}

type sysWebSetServiceHandler struct {
	SysWebSetServiceHandler
}

func (h *sysWebSetServiceHandler) Create(ctx context.Context, in *SysWebSet, out *Response) error {
	return h.SysWebSetServiceHandler.Create(ctx, in, out)
}

func (h *sysWebSetServiceHandler) Delete(ctx context.Context, in *SysWebSet, out *Response) error {
	return h.SysWebSetServiceHandler.Delete(ctx, in, out)
}

func (h *sysWebSetServiceHandler) DeleteById(ctx context.Context, in *SysWebSet, out *Response) error {
	return h.SysWebSetServiceHandler.DeleteById(ctx, in, out)
}

func (h *sysWebSetServiceHandler) DeleteByIds(ctx context.Context, in *SysWebSetBatchDeleteRequest, out *Response) error {
	return h.SysWebSetServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *sysWebSetServiceHandler) Update(ctx context.Context, in *SysWebSet, out *Response) error {
	return h.SysWebSetServiceHandler.Update(ctx, in, out)
}

func (h *sysWebSetServiceHandler) UpdateAll(ctx context.Context, in *SysWebSet, out *Response) error {
	return h.SysWebSetServiceHandler.UpdateAll(ctx, in, out)
}

func (h *sysWebSetServiceHandler) UpdateFields(ctx context.Context, in *SysWebSetUpdateFieldsRequest, out *Response) error {
	return h.SysWebSetServiceHandler.UpdateFields(ctx, in, out)
}

func (h *sysWebSetServiceHandler) FindById(ctx context.Context, in *SysWebSetFilter, out *SysWebSetResponse) error {
	return h.SysWebSetServiceHandler.FindById(ctx, in, out)
}

func (h *sysWebSetServiceHandler) Find(ctx context.Context, in *SysWebSetFilter, out *SysWebSetResponse) error {
	return h.SysWebSetServiceHandler.Find(ctx, in, out)
}

func (h *sysWebSetServiceHandler) Lists(ctx context.Context, in *SysWebSetListRequest, out *SysWebSetResponse) error {
	return h.SysWebSetServiceHandler.Lists(ctx, in, out)
}
