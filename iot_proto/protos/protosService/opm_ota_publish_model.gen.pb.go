// Code generated by protoc,2022-05-13 13:53:26. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: opm_ota_publish_model.gen.proto

package protosService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//来源于数据表
type OpmOtaPublish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:主键ID;comment:主键ID;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"pkgId" gorm:"default:包id（t_opm_ota_pkg.id）;comment:包id（t_opm_ota_pkg.id）;size:19;"
	PkgId int64 `protobuf:"varint,101,opt,name=pkgId,proto3" json:"pkgId,omitempty"`
	// @inject_tag: json:"publishAt" gorm:"default:发布时间;comment:发布时间;"
	PublishAt *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=publishAt,proto3" json:"publishAt,omitempty"`
	// @inject_tag: json:"isGray" gorm:"default:是否灰度发布 0：否，1：是;comment:是否灰度发布 0：否，1：是;"
	IsGray int32 `protobuf:"varint,103,opt,name=isGray,proto3" json:"isGray,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态[0:待发布,1:已发布,2:已暂停];comment:状态[0:待发布,1:已发布,2:已暂停];"
	Status int32 `protobuf:"varint,104,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"grayType" gorm:"default:灰度类型[0:按比例灰度, 1:按数量灰度];comment:灰度类型[0:按比例灰度, 1:按数量灰度];"
	GrayType int32 `protobuf:"varint,105,opt,name=grayType,proto3" json:"grayType,omitempty"`
	// @inject_tag: json:"grayScale" gorm:"default:灰度比例;comment:灰度比例;size:10;"
	GrayScale int32 `protobuf:"varint,106,opt,name=grayScale,proto3" json:"grayScale,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:20;"
	CreatedBy int64 `protobuf:"varint,107,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:20;"
	UpdatedBy int64 `protobuf:"varint,108,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,109,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,110,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除时间;comment:删除时间;"
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,111,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	// @inject_tag: json:"tenantId" gorm:"default:租户id（t_open_company.tenant_id）;comment:租户id（t_open_company.tenant_id）;size:6;"
	TenantId string `protobuf:"bytes,112,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// @inject_tag: json:"isAuto" gorm:"default:是否自动升级[0:否 1:是];comment:是否自动升级[0:否 1:是];"
	IsAuto int32 `protobuf:"varint,113,opt,name=isAuto,proto3" json:"isAuto,omitempty"`
	// @inject_tag: json:"upgradeDesc" gorm:"default:升级文案（中文）;comment:升级文案（中文）;size:300;"
	UpgradeDesc string `protobuf:"bytes,114,opt,name=upgradeDesc,proto3" json:"upgradeDesc,omitempty"`
	// @inject_tag: json:"upgradeDescEn" gorm:"default:升级文案（英文）;comment:升级文案（英文）;size:300;"
	UpgradeDescEn string `protobuf:"bytes,115,opt,name=upgradeDescEn,proto3" json:"upgradeDescEn,omitempty"`
	// @inject_tag: json:"autoStartAt" gorm:"default:自动升级开始时间;comment:自动升级开始时间;size:20;"
	AutoStartAt string `protobuf:"bytes,116,opt,name=autoStartAt,proto3" json:"autoStartAt,omitempty"`
	// @inject_tag: json:"autoEndAt" gorm:"default:自动升级结束时间;comment:自动升级结束时间;size:20;"
	AutoEndAt string `protobuf:"bytes,117,opt,name=autoEndAt,proto3" json:"autoEndAt,omitempty"`
	// @inject_tag: json:"specifiedVersionMode" gorm:"default:指定升级版本（模式选择 1全部版本 2指定版本）;comment:指定升级版本（模式选择 1全部版本 2指定版本）;"
	SpecifiedVersionMode int32 `protobuf:"varint,118,opt,name=specifiedVersionMode,proto3" json:"specifiedVersionMode,omitempty"`
	// @inject_tag: json:"specifiedVersion" gorm:"default:指定升级版本;comment:指定升级版本;size:20;"
	SpecifiedVersion string `protobuf:"bytes,119,opt,name=specifiedVersion,proto3" json:"specifiedVersion,omitempty"`
	// @inject_tag: json:"specifiedAreaMode" gorm:"default:指定升级区域（模式选择 1全部区域 2指定区域）;comment:指定升级区域（模式选择 1全部区域 2指定区域）;"
	SpecifiedAreaMode int32 `protobuf:"varint,120,opt,name=specifiedAreaMode,proto3" json:"specifiedAreaMode,omitempty"`
	// @inject_tag: json:"specifiedArea" gorm:"default:指定升级区域;comment:指定升级区域;size:20;"
	SpecifiedArea string `protobuf:"bytes,121,opt,name=specifiedArea,proto3" json:"specifiedArea,omitempty"`
	// @inject_tag: json:"versionId" gorm:"default:版本号编号;comment:版本号编号;size:19;"
	VersionId int64 `protobuf:"varint,122,opt,name=versionId,proto3" json:"versionId,omitempty"`
	// @inject_tag: json:"version" gorm:"default:固件版本号;comment:固件版本号;size:20;"
	Version string `protobuf:"bytes,123,opt,name=version,proto3" json:"version,omitempty"`
	// @inject_tag: json:"upgradeMode" gorm:"default:升级方式[0:静默,1:提醒,2:强制];comment:升级方式[0:静默,1:提醒,2:强制];size:10;"
	UpgradeMode  int32  `protobuf:"varint,124,opt,name=upgradeMode,proto3" json:"upgradeMode,omitempty"`
	FirmwareName string `protobuf:"bytes,125,opt,name=firmwareName,proto3" json:"firmwareName,omitempty"`
	ProductName  string `protobuf:"bytes,126,opt,name=productName,proto3" json:"productName,omitempty"`
	ProductKey   string `protobuf:"bytes,127,opt,name=productKey,proto3" json:"productKey,omitempty"`
	// 升级时间模式 =1 全天 =2 指定时间
	UpgradeTimeMode int32    `protobuf:"varint,128,opt,name=upgradeTimeMode,proto3" json:"upgradeTimeMode,omitempty"`
	TotalCount      int32    `protobuf:"varint,129,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	SuccessCount    int32    `protobuf:"varint,130,opt,name=successCount,proto3" json:"successCount,omitempty"`
	PubResult       string   `protobuf:"bytes,131,opt,name=pubResult,proto3" json:"pubResult,omitempty"`
	DeviceIds       []string `protobuf:"bytes,132,rep,name=deviceIds,proto3" json:"deviceIds,omitempty"`
}

func (x *OpmOtaPublish) Reset() {
	*x = OpmOtaPublish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_ota_publish_model_gen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmOtaPublish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmOtaPublish) ProtoMessage() {}

func (x *OpmOtaPublish) ProtoReflect() protoreflect.Message {
	mi := &file_opm_ota_publish_model_gen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmOtaPublish.ProtoReflect.Descriptor instead.
func (*OpmOtaPublish) Descriptor() ([]byte, []int) {
	return file_opm_ota_publish_model_gen_proto_rawDescGZIP(), []int{0}
}

func (x *OpmOtaPublish) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpmOtaPublish) GetPkgId() int64 {
	if x != nil {
		return x.PkgId
	}
	return 0
}

func (x *OpmOtaPublish) GetPublishAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishAt
	}
	return nil
}

func (x *OpmOtaPublish) GetIsGray() int32 {
	if x != nil {
		return x.IsGray
	}
	return 0
}

func (x *OpmOtaPublish) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OpmOtaPublish) GetGrayType() int32 {
	if x != nil {
		return x.GrayType
	}
	return 0
}

func (x *OpmOtaPublish) GetGrayScale() int32 {
	if x != nil {
		return x.GrayScale
	}
	return 0
}

func (x *OpmOtaPublish) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *OpmOtaPublish) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *OpmOtaPublish) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OpmOtaPublish) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OpmOtaPublish) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *OpmOtaPublish) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OpmOtaPublish) GetIsAuto() int32 {
	if x != nil {
		return x.IsAuto
	}
	return 0
}

func (x *OpmOtaPublish) GetUpgradeDesc() string {
	if x != nil {
		return x.UpgradeDesc
	}
	return ""
}

func (x *OpmOtaPublish) GetUpgradeDescEn() string {
	if x != nil {
		return x.UpgradeDescEn
	}
	return ""
}

func (x *OpmOtaPublish) GetAutoStartAt() string {
	if x != nil {
		return x.AutoStartAt
	}
	return ""
}

func (x *OpmOtaPublish) GetAutoEndAt() string {
	if x != nil {
		return x.AutoEndAt
	}
	return ""
}

func (x *OpmOtaPublish) GetSpecifiedVersionMode() int32 {
	if x != nil {
		return x.SpecifiedVersionMode
	}
	return 0
}

func (x *OpmOtaPublish) GetSpecifiedVersion() string {
	if x != nil {
		return x.SpecifiedVersion
	}
	return ""
}

func (x *OpmOtaPublish) GetSpecifiedAreaMode() int32 {
	if x != nil {
		return x.SpecifiedAreaMode
	}
	return 0
}

func (x *OpmOtaPublish) GetSpecifiedArea() string {
	if x != nil {
		return x.SpecifiedArea
	}
	return ""
}

func (x *OpmOtaPublish) GetVersionId() int64 {
	if x != nil {
		return x.VersionId
	}
	return 0
}

func (x *OpmOtaPublish) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OpmOtaPublish) GetUpgradeMode() int32 {
	if x != nil {
		return x.UpgradeMode
	}
	return 0
}

func (x *OpmOtaPublish) GetFirmwareName() string {
	if x != nil {
		return x.FirmwareName
	}
	return ""
}

func (x *OpmOtaPublish) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *OpmOtaPublish) GetProductKey() string {
	if x != nil {
		return x.ProductKey
	}
	return ""
}

func (x *OpmOtaPublish) GetUpgradeTimeMode() int32 {
	if x != nil {
		return x.UpgradeTimeMode
	}
	return 0
}

func (x *OpmOtaPublish) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *OpmOtaPublish) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *OpmOtaPublish) GetPubResult() string {
	if x != nil {
		return x.PubResult
	}
	return ""
}

func (x *OpmOtaPublish) GetDeviceIds() []string {
	if x != nil {
		return x.DeviceIds
	}
	return nil
}

type OpmOtaPublishFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:主键ID;comment:主键ID;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"pkgId" gorm:"default:包id（t_opm_ota_pkg.id）;comment:包id（t_opm_ota_pkg.id）;size:19;"
	PkgId int64 `protobuf:"varint,101,opt,name=pkgId,proto3" json:"pkgId,omitempty"`
	// @inject_tag: json:"publishAt" gorm:"default:发布时间;comment:发布时间;"
	PublishAt *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=publishAt,proto3" json:"publishAt,omitempty"`
	// @inject_tag: json:"isGray" gorm:"default:是否灰度发布 0：否，1：是;comment:是否灰度发布 0：否，1：是;"
	IsGray int32 `protobuf:"varint,103,opt,name=isGray,proto3" json:"isGray,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态[0:待发布,1:已发布,2:已暂停];comment:状态[0:待发布,1:已发布,2:已暂停];"
	Status int32 `protobuf:"varint,104,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"grayType" gorm:"default:灰度类型[0:按比例灰度, 1:按数量灰度];comment:灰度类型[0:按比例灰度, 1:按数量灰度];"
	GrayType int32 `protobuf:"varint,105,opt,name=grayType,proto3" json:"grayType,omitempty"`
	// @inject_tag: json:"grayScale" gorm:"default:灰度比例;comment:灰度比例;size:10;"
	GrayScale int32 `protobuf:"varint,106,opt,name=grayScale,proto3" json:"grayScale,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:20;"
	CreatedBy int64 `protobuf:"varint,107,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:20;"
	UpdatedBy int64 `protobuf:"varint,108,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,109,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,110,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除时间;comment:删除时间;"
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,111,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	// @inject_tag: json:"tenantId" gorm:"default:租户id（t_open_company.tenant_id）;comment:租户id（t_open_company.tenant_id）;size:6;"
	TenantId string `protobuf:"bytes,112,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *OpmOtaPublishFilter) Reset() {
	*x = OpmOtaPublishFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_ota_publish_model_gen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmOtaPublishFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmOtaPublishFilter) ProtoMessage() {}

func (x *OpmOtaPublishFilter) ProtoReflect() protoreflect.Message {
	mi := &file_opm_ota_publish_model_gen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmOtaPublishFilter.ProtoReflect.Descriptor instead.
func (*OpmOtaPublishFilter) Descriptor() ([]byte, []int) {
	return file_opm_ota_publish_model_gen_proto_rawDescGZIP(), []int{1}
}

func (x *OpmOtaPublishFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpmOtaPublishFilter) GetPkgId() int64 {
	if x != nil {
		return x.PkgId
	}
	return 0
}

func (x *OpmOtaPublishFilter) GetPublishAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishAt
	}
	return nil
}

func (x *OpmOtaPublishFilter) GetIsGray() int32 {
	if x != nil {
		return x.IsGray
	}
	return 0
}

func (x *OpmOtaPublishFilter) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OpmOtaPublishFilter) GetGrayType() int32 {
	if x != nil {
		return x.GrayType
	}
	return 0
}

func (x *OpmOtaPublishFilter) GetGrayScale() int32 {
	if x != nil {
		return x.GrayScale
	}
	return 0
}

func (x *OpmOtaPublishFilter) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *OpmOtaPublishFilter) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *OpmOtaPublishFilter) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OpmOtaPublishFilter) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OpmOtaPublishFilter) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *OpmOtaPublishFilter) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type OpmOtaPublishListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *OpmOtaPublish `protobuf:"bytes,101,opt,name=query,proto3" json:"query,omitempty"`
	Page      int64          `protobuf:"varint,102,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64          `protobuf:"varint,103,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderKey  string         `protobuf:"bytes,104,opt,name=orderKey,proto3" json:"orderKey,omitempty"`
	OrderDesc string         `protobuf:"bytes,105,opt,name=orderDesc,proto3" json:"orderDesc,omitempty"`
	SearchKey string         `protobuf:"bytes,106,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
}

func (x *OpmOtaPublishListRequest) Reset() {
	*x = OpmOtaPublishListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_ota_publish_model_gen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmOtaPublishListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmOtaPublishListRequest) ProtoMessage() {}

func (x *OpmOtaPublishListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_ota_publish_model_gen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmOtaPublishListRequest.ProtoReflect.Descriptor instead.
func (*OpmOtaPublishListRequest) Descriptor() ([]byte, []int) {
	return file_opm_ota_publish_model_gen_proto_rawDescGZIP(), []int{2}
}

func (x *OpmOtaPublishListRequest) GetQuery() *OpmOtaPublish {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *OpmOtaPublishListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *OpmOtaPublishListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *OpmOtaPublishListRequest) GetOrderKey() string {
	if x != nil {
		return x.OrderKey
	}
	return ""
}

func (x *OpmOtaPublishListRequest) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *OpmOtaPublishListRequest) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

type OpmOtaPublishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32            `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string           `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64            `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*OpmOtaPublish `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *OpmOtaPublishResponse) Reset() {
	*x = OpmOtaPublishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_ota_publish_model_gen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmOtaPublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmOtaPublishResponse) ProtoMessage() {}

func (x *OpmOtaPublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opm_ota_publish_model_gen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmOtaPublishResponse.ProtoReflect.Descriptor instead.
func (*OpmOtaPublishResponse) Descriptor() ([]byte, []int) {
	return file_opm_ota_publish_model_gen_proto_rawDescGZIP(), []int{3}
}

func (x *OpmOtaPublishResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OpmOtaPublishResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OpmOtaPublishResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OpmOtaPublishResponse) GetData() []*OpmOtaPublish {
	if x != nil {
		return x.Data
	}
	return nil
}

type OpmOtaPublishUpdateFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string       `protobuf:"bytes,101,rep,name=fields,proto3" json:"fields,omitempty"`
	Data   *OpmOtaPublish `protobuf:"bytes,102,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OpmOtaPublishUpdateFieldsRequest) Reset() {
	*x = OpmOtaPublishUpdateFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_ota_publish_model_gen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmOtaPublishUpdateFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmOtaPublishUpdateFieldsRequest) ProtoMessage() {}

func (x *OpmOtaPublishUpdateFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_ota_publish_model_gen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmOtaPublishUpdateFieldsRequest.ProtoReflect.Descriptor instead.
func (*OpmOtaPublishUpdateFieldsRequest) Descriptor() ([]byte, []int) {
	return file_opm_ota_publish_model_gen_proto_rawDescGZIP(), []int{4}
}

func (x *OpmOtaPublishUpdateFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *OpmOtaPublishUpdateFieldsRequest) GetData() *OpmOtaPublish {
	if x != nil {
		return x.Data
	}
	return nil
}

// 表模型主键，只能是整数或字符串，若生成错误，请检查数据库表主键是否正确。支持组合主键
type OpmOtaPublishPrimarykey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OpmOtaPublishPrimarykey) Reset() {
	*x = OpmOtaPublishPrimarykey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_ota_publish_model_gen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmOtaPublishPrimarykey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmOtaPublishPrimarykey) ProtoMessage() {}

func (x *OpmOtaPublishPrimarykey) ProtoReflect() protoreflect.Message {
	mi := &file_opm_ota_publish_model_gen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmOtaPublishPrimarykey.ProtoReflect.Descriptor instead.
func (*OpmOtaPublishPrimarykey) Descriptor() ([]byte, []int) {
	return file_opm_ota_publish_model_gen_proto_rawDescGZIP(), []int{5}
}

func (x *OpmOtaPublishPrimarykey) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type OpmOtaPublishBatchDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*OpmOtaPublishPrimarykey `protobuf:"bytes,101,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *OpmOtaPublishBatchDeleteRequest) Reset() {
	*x = OpmOtaPublishBatchDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_ota_publish_model_gen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmOtaPublishBatchDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmOtaPublishBatchDeleteRequest) ProtoMessage() {}

func (x *OpmOtaPublishBatchDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_ota_publish_model_gen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmOtaPublishBatchDeleteRequest.ProtoReflect.Descriptor instead.
func (*OpmOtaPublishBatchDeleteRequest) Descriptor() ([]byte, []int) {
	return file_opm_ota_publish_model_gen_proto_rawDescGZIP(), []int{6}
}

func (x *OpmOtaPublishBatchDeleteRequest) GetKeys() []*OpmOtaPublishPrimarykey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type CheckOtaVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductKey    string  `protobuf:"bytes,101,opt,name=productKey,proto3" json:"productKey,omitempty"`               //产品Key
	Version       string  `protobuf:"bytes,102,opt,name=version,proto3" json:"version,omitempty"`                     //版本编号
	DeviceId      string  `protobuf:"bytes,103,opt,name=deviceId,proto3" json:"deviceId,omitempty"`                   //设备编号
	FirmwareTypes []int32 `protobuf:"varint,104,rep,packed,name=firmwareTypes,proto3" json:"firmwareTypes,omitempty"` //固件类型
}

func (x *CheckOtaVersionRequest) Reset() {
	*x = CheckOtaVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_ota_publish_model_gen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckOtaVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckOtaVersionRequest) ProtoMessage() {}

func (x *CheckOtaVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_ota_publish_model_gen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckOtaVersionRequest.ProtoReflect.Descriptor instead.
func (*CheckOtaVersionRequest) Descriptor() ([]byte, []int) {
	return file_opm_ota_publish_model_gen_proto_rawDescGZIP(), []int{7}
}

func (x *CheckOtaVersionRequest) GetProductKey() string {
	if x != nil {
		return x.ProductKey
	}
	return ""
}

func (x *CheckOtaVersionRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CheckOtaVersionRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *CheckOtaVersionRequest) GetFirmwareTypes() []int32 {
	if x != nil {
		return x.FirmwareTypes
	}
	return nil
}

type CheckOtaVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code           int32               `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message        string              `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Batch          string              `protobuf:"bytes,103,opt,name=batch,proto3" json:"batch,omitempty"`
	OtaPkg         *OtaPkgInfo         `protobuf:"bytes,104,opt,name=otaPkg,proto3" json:"otaPkg,omitempty"`
	UpgradePublish *UpgradePublishInfo `protobuf:"bytes,105,opt,name=upgradePublish,proto3" json:"upgradePublish,omitempty"`
}

func (x *CheckOtaVersionResponse) Reset() {
	*x = CheckOtaVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_ota_publish_model_gen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckOtaVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckOtaVersionResponse) ProtoMessage() {}

func (x *CheckOtaVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opm_ota_publish_model_gen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckOtaVersionResponse.ProtoReflect.Descriptor instead.
func (*CheckOtaVersionResponse) Descriptor() ([]byte, []int) {
	return file_opm_ota_publish_model_gen_proto_rawDescGZIP(), []int{8}
}

func (x *CheckOtaVersionResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CheckOtaVersionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CheckOtaVersionResponse) GetBatch() string {
	if x != nil {
		return x.Batch
	}
	return ""
}

func (x *CheckOtaVersionResponse) GetOtaPkg() *OtaPkgInfo {
	if x != nil {
		return x.OtaPkg
	}
	return nil
}

func (x *CheckOtaVersionResponse) GetUpgradePublish() *UpgradePublishInfo {
	if x != nil {
		return x.UpgradePublish
	}
	return nil
}

type OtaPkgInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Custom          bool   `protobuf:"varint,104,opt,name=custom,proto3" json:"custom,omitempty"`
	IsDiff          bool   `protobuf:"varint,105,opt,name=isDiff,proto3" json:"isDiff,omitempty"`
	Md5             string `protobuf:"bytes,106,opt,name=md5,proto3" json:"md5,omitempty"`
	ProductKey      string `protobuf:"bytes,107,opt,name=productKey,proto3" json:"productKey,omitempty"`
	FirmwareName    string `protobuf:"bytes,108,opt,name=firmwareName,proto3" json:"firmwareName,omitempty"`
	Size            int32  `protobuf:"varint,109,opt,name=size,proto3" json:"size,omitempty"`
	AppUrl          string `protobuf:"bytes,110,opt,name=appUrl,proto3" json:"appUrl,omitempty"`
	McuUrl          string `protobuf:"bytes,111,opt,name=mcuUrl,proto3" json:"mcuUrl,omitempty"`
	OtaType         string `protobuf:"bytes,112,opt,name=otaType,proto3" json:"otaType,omitempty"`
	Version         string `protobuf:"bytes,116,opt,name=version,proto3" json:"version,omitempty"`
	UpgradeOvertime int32  `protobuf:"varint,117,opt,name=upgradeOvertime,proto3" json:"upgradeOvertime,omitempty"`
	FirmwareType    int32  `protobuf:"varint,118,opt,name=firmwareType,proto3" json:"firmwareType,omitempty"`
	McuVersion      string `protobuf:"bytes,119,opt,name=mcuVersion,proto3" json:"mcuVersion,omitempty"`
	OtaState        string `protobuf:"bytes,120,opt,name=otaState,proto3" json:"otaState,omitempty"`
	Progress        int32  `protobuf:"varint,121,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *OtaPkgInfo) Reset() {
	*x = OtaPkgInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_ota_publish_model_gen_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaPkgInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaPkgInfo) ProtoMessage() {}

func (x *OtaPkgInfo) ProtoReflect() protoreflect.Message {
	mi := &file_opm_ota_publish_model_gen_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaPkgInfo.ProtoReflect.Descriptor instead.
func (*OtaPkgInfo) Descriptor() ([]byte, []int) {
	return file_opm_ota_publish_model_gen_proto_rawDescGZIP(), []int{9}
}

func (x *OtaPkgInfo) GetCustom() bool {
	if x != nil {
		return x.Custom
	}
	return false
}

func (x *OtaPkgInfo) GetIsDiff() bool {
	if x != nil {
		return x.IsDiff
	}
	return false
}

func (x *OtaPkgInfo) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *OtaPkgInfo) GetProductKey() string {
	if x != nil {
		return x.ProductKey
	}
	return ""
}

func (x *OtaPkgInfo) GetFirmwareName() string {
	if x != nil {
		return x.FirmwareName
	}
	return ""
}

func (x *OtaPkgInfo) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OtaPkgInfo) GetAppUrl() string {
	if x != nil {
		return x.AppUrl
	}
	return ""
}

func (x *OtaPkgInfo) GetMcuUrl() string {
	if x != nil {
		return x.McuUrl
	}
	return ""
}

func (x *OtaPkgInfo) GetOtaType() string {
	if x != nil {
		return x.OtaType
	}
	return ""
}

func (x *OtaPkgInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OtaPkgInfo) GetUpgradeOvertime() int32 {
	if x != nil {
		return x.UpgradeOvertime
	}
	return 0
}

func (x *OtaPkgInfo) GetFirmwareType() int32 {
	if x != nil {
		return x.FirmwareType
	}
	return 0
}

func (x *OtaPkgInfo) GetMcuVersion() string {
	if x != nil {
		return x.McuVersion
	}
	return ""
}

func (x *OtaPkgInfo) GetOtaState() string {
	if x != nil {
		return x.OtaState
	}
	return ""
}

func (x *OtaPkgInfo) GetProgress() int32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type UpgradePublishInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointVer             string `protobuf:"bytes,113,opt,name=pointVer,proto3" json:"pointVer,omitempty"`
	BaseVer              string `protobuf:"bytes,114,opt,name=baseVer,proto3" json:"baseVer,omitempty"`
	McuBaseVer           string `protobuf:"bytes,115,opt,name=mcuBaseVer,proto3" json:"mcuBaseVer,omitempty"`
	UpgradeMode          int32  `protobuf:"varint,117,opt,name=upgradeMode,proto3" json:"upgradeMode,omitempty"` //升级方式[1:APP检测升级,2:APP提醒升级,3:APP强制升级]
	IsAuto               int32  `protobuf:"varint,118,opt,name=isAuto,proto3" json:"isAuto,omitempty"`
	AutoStartAt          string `protobuf:"bytes,119,opt,name=autoStartAt,proto3" json:"autoStartAt,omitempty"`
	AutoEndAt            string `protobuf:"bytes,120,opt,name=autoEndAt,proto3" json:"autoEndAt,omitempty"`
	SpecifiedVersionMode int32  `protobuf:"varint,121,opt,name=specifiedVersionMode,proto3" json:"specifiedVersionMode,omitempty"`
	SpecifiedVersion     string `protobuf:"bytes,122,opt,name=specifiedVersion,proto3" json:"specifiedVersion,omitempty"` //=pointVer
	SpecifiedAreaMode    int32  `protobuf:"varint,123,opt,name=specifiedAreaMode,proto3" json:"specifiedAreaMode,omitempty"`
	SpecifiedArea        string `protobuf:"bytes,124,opt,name=specifiedArea,proto3" json:"specifiedArea,omitempty"`
	UpgradeDesc          string `protobuf:"bytes,125,opt,name=upgradeDesc,proto3" json:"upgradeDesc,omitempty"`
	UpgradeDescEn        string `protobuf:"bytes,126,opt,name=upgradeDescEn,proto3" json:"upgradeDescEn,omitempty"`
	// 升级时间模式 =1 全天 =2 指定时间
	UpgradeTimeMode int32 `protobuf:"varint,127,opt,name=upgradeTimeMode,proto3" json:"upgradeTimeMode,omitempty"`
	PubId           int64 `protobuf:"varint,128,opt,name=pubId,proto3" json:"pubId,omitempty"`
}

func (x *UpgradePublishInfo) Reset() {
	*x = UpgradePublishInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_ota_publish_model_gen_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradePublishInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradePublishInfo) ProtoMessage() {}

func (x *UpgradePublishInfo) ProtoReflect() protoreflect.Message {
	mi := &file_opm_ota_publish_model_gen_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradePublishInfo.ProtoReflect.Descriptor instead.
func (*UpgradePublishInfo) Descriptor() ([]byte, []int) {
	return file_opm_ota_publish_model_gen_proto_rawDescGZIP(), []int{10}
}

func (x *UpgradePublishInfo) GetPointVer() string {
	if x != nil {
		return x.PointVer
	}
	return ""
}

func (x *UpgradePublishInfo) GetBaseVer() string {
	if x != nil {
		return x.BaseVer
	}
	return ""
}

func (x *UpgradePublishInfo) GetMcuBaseVer() string {
	if x != nil {
		return x.McuBaseVer
	}
	return ""
}

func (x *UpgradePublishInfo) GetUpgradeMode() int32 {
	if x != nil {
		return x.UpgradeMode
	}
	return 0
}

func (x *UpgradePublishInfo) GetIsAuto() int32 {
	if x != nil {
		return x.IsAuto
	}
	return 0
}

func (x *UpgradePublishInfo) GetAutoStartAt() string {
	if x != nil {
		return x.AutoStartAt
	}
	return ""
}

func (x *UpgradePublishInfo) GetAutoEndAt() string {
	if x != nil {
		return x.AutoEndAt
	}
	return ""
}

func (x *UpgradePublishInfo) GetSpecifiedVersionMode() int32 {
	if x != nil {
		return x.SpecifiedVersionMode
	}
	return 0
}

func (x *UpgradePublishInfo) GetSpecifiedVersion() string {
	if x != nil {
		return x.SpecifiedVersion
	}
	return ""
}

func (x *UpgradePublishInfo) GetSpecifiedAreaMode() int32 {
	if x != nil {
		return x.SpecifiedAreaMode
	}
	return 0
}

func (x *UpgradePublishInfo) GetSpecifiedArea() string {
	if x != nil {
		return x.SpecifiedArea
	}
	return ""
}

func (x *UpgradePublishInfo) GetUpgradeDesc() string {
	if x != nil {
		return x.UpgradeDesc
	}
	return ""
}

func (x *UpgradePublishInfo) GetUpgradeDescEn() string {
	if x != nil {
		return x.UpgradeDescEn
	}
	return ""
}

func (x *UpgradePublishInfo) GetUpgradeTimeMode() int32 {
	if x != nil {
		return x.UpgradeTimeMode
	}
	return 0
}

func (x *UpgradePublishInfo) GetPubId() int64 {
	if x != nil {
		return x.PubId
	}
	return 0
}

var File_opm_ota_publish_model_gen_proto protoreflect.FileDescriptor

var file_opm_ota_publish_model_gen_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6f, 0x70, 0x6d, 0x5f, 0x6f, 0x74, 0x61, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x09, 0x0a, 0x0d,
	0x4f, 0x70, 0x6d, 0x4f, 0x74, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x6b, 0x67, 0x49, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x6b,
	0x67, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x74,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x47, 0x72, 0x61, 0x79, 0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69,
	0x73, 0x47, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x67, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x67, 0x72, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x61,
	0x79, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72,
	0x61, 0x79, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x18, 0x71, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69,
	0x73, 0x41, 0x75, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x45, 0x6e, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x45, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x74, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x75, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a,
	0x14, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x76, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x18, 0x79, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x72, 0x65,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x7a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x7d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x7e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x18,
	0x7f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x29, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x82, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x83, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1d, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x18, 0x84,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x22, 0xe5, 0x03, 0x0a, 0x13, 0x4f, 0x70, 0x6d, 0x4f, 0x74, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6b, 0x67, 0x49,
	0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x6b, 0x67, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x47, 0x72,
	0x61, 0x79, 0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x47, 0x72, 0x61, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x72, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x61, 0x79, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x67, 0x72, 0x61, 0x79, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x6b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x6c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x18, 0x4f, 0x70, 0x6d,
	0x4f, 0x74, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f,
	0x70, 0x6d, 0x4f, 0x74, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x69, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x87, 0x01, 0x0a, 0x15,
	0x4f, 0x70, 0x6d, 0x4f, 0x74, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x68, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x4f, 0x74, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x66, 0x0a, 0x20, 0x4f, 0x70, 0x6d, 0x4f, 0x74, 0x61, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x4f, 0x74, 0x61,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x29, 0x0a,
	0x17, 0x4f, 0x70, 0x6d, 0x4f, 0x74, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x1f, 0x4f, 0x70, 0x6d, 0x4f,
	0x74, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x4f, 0x74, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x22, 0x94, 0x01, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x74, 0x61, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x68, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4f, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x74, 0x61, 0x50,
	0x6b, 0x67, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4f, 0x74, 0x61, 0x50, 0x6b, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6f,
	0x74, 0x61, 0x50, 0x6b, 0x67, 0x12, 0x43, 0x0a, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x22, 0xb0, 0x03, 0x0a, 0x0a, 0x4f,
	0x74, 0x61, 0x50, 0x6b, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x18, 0x68, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x69, 0x66, 0x66, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x69, 0x66, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x55, 0x72, 0x6c, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x63, 0x75, 0x55, 0x72, 0x6c, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x63, 0x75,
	0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x70,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x76, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x63, 0x75, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x63, 0x75, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x79, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa1, 0x04,
	0x0a, 0x12, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x18, 0x72, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x63,
	0x75, 0x42, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x63, 0x75, 0x42, 0x61, 0x73, 0x65, 0x56, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x75, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x18, 0x76, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73,
	0x41, 0x75, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x45, 0x6e,
	0x64, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x45,
	0x6e, 0x64, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x79, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x7a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x41, 0x72, 0x65, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41,
	0x72, 0x65, 0x61, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x72, 0x65, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x45, 0x6e, 0x18, 0x7e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x45, 0x6e,
	0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x70, 0x75,
	0x62, 0x49, 0x64, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x75, 0x62, 0x49,
	0x64, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opm_ota_publish_model_gen_proto_rawDescOnce sync.Once
	file_opm_ota_publish_model_gen_proto_rawDescData = file_opm_ota_publish_model_gen_proto_rawDesc
)

func file_opm_ota_publish_model_gen_proto_rawDescGZIP() []byte {
	file_opm_ota_publish_model_gen_proto_rawDescOnce.Do(func() {
		file_opm_ota_publish_model_gen_proto_rawDescData = protoimpl.X.CompressGZIP(file_opm_ota_publish_model_gen_proto_rawDescData)
	})
	return file_opm_ota_publish_model_gen_proto_rawDescData
}

var file_opm_ota_publish_model_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_opm_ota_publish_model_gen_proto_goTypes = []interface{}{
	(*OpmOtaPublish)(nil),                    // 0: service.OpmOtaPublish
	(*OpmOtaPublishFilter)(nil),              // 1: service.OpmOtaPublishFilter
	(*OpmOtaPublishListRequest)(nil),         // 2: service.OpmOtaPublishListRequest
	(*OpmOtaPublishResponse)(nil),            // 3: service.OpmOtaPublishResponse
	(*OpmOtaPublishUpdateFieldsRequest)(nil), // 4: service.OpmOtaPublishUpdateFieldsRequest
	(*OpmOtaPublishPrimarykey)(nil),          // 5: service.OpmOtaPublishPrimarykey
	(*OpmOtaPublishBatchDeleteRequest)(nil),  // 6: service.OpmOtaPublishBatchDeleteRequest
	(*CheckOtaVersionRequest)(nil),           // 7: service.CheckOtaVersionRequest
	(*CheckOtaVersionResponse)(nil),          // 8: service.CheckOtaVersionResponse
	(*OtaPkgInfo)(nil),                       // 9: service.OtaPkgInfo
	(*UpgradePublishInfo)(nil),               // 10: service.UpgradePublishInfo
	(*timestamppb.Timestamp)(nil),            // 11: google.protobuf.Timestamp
}
var file_opm_ota_publish_model_gen_proto_depIdxs = []int32{
	11, // 0: service.OpmOtaPublish.publishAt:type_name -> google.protobuf.Timestamp
	11, // 1: service.OpmOtaPublish.createdAt:type_name -> google.protobuf.Timestamp
	11, // 2: service.OpmOtaPublish.updatedAt:type_name -> google.protobuf.Timestamp
	11, // 3: service.OpmOtaPublish.deletedAt:type_name -> google.protobuf.Timestamp
	11, // 4: service.OpmOtaPublishFilter.publishAt:type_name -> google.protobuf.Timestamp
	11, // 5: service.OpmOtaPublishFilter.createdAt:type_name -> google.protobuf.Timestamp
	11, // 6: service.OpmOtaPublishFilter.updatedAt:type_name -> google.protobuf.Timestamp
	11, // 7: service.OpmOtaPublishFilter.deletedAt:type_name -> google.protobuf.Timestamp
	0,  // 8: service.OpmOtaPublishListRequest.query:type_name -> service.OpmOtaPublish
	0,  // 9: service.OpmOtaPublishResponse.data:type_name -> service.OpmOtaPublish
	0,  // 10: service.OpmOtaPublishUpdateFieldsRequest.data:type_name -> service.OpmOtaPublish
	5,  // 11: service.OpmOtaPublishBatchDeleteRequest.keys:type_name -> service.OpmOtaPublishPrimarykey
	9,  // 12: service.CheckOtaVersionResponse.otaPkg:type_name -> service.OtaPkgInfo
	10, // 13: service.CheckOtaVersionResponse.upgradePublish:type_name -> service.UpgradePublishInfo
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_opm_ota_publish_model_gen_proto_init() }
func file_opm_ota_publish_model_gen_proto_init() {
	if File_opm_ota_publish_model_gen_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opm_ota_publish_model_gen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmOtaPublish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_ota_publish_model_gen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmOtaPublishFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_ota_publish_model_gen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmOtaPublishListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_ota_publish_model_gen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmOtaPublishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_ota_publish_model_gen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmOtaPublishUpdateFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_ota_publish_model_gen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmOtaPublishPrimarykey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_ota_publish_model_gen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmOtaPublishBatchDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_ota_publish_model_gen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckOtaVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_ota_publish_model_gen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckOtaVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_ota_publish_model_gen_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaPkgInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_ota_publish_model_gen_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradePublishInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opm_ota_publish_model_gen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opm_ota_publish_model_gen_proto_goTypes,
		DependencyIndexes: file_opm_ota_publish_model_gen_proto_depIdxs,
		MessageInfos:      file_opm_ota_publish_model_gen_proto_msgTypes,
	}.Build()
	File_opm_ota_publish_model_gen_proto = out.File
	file_opm_ota_publish_model_gen_proto_rawDesc = nil
	file_opm_ota_publish_model_gen_proto_goTypes = nil
	file_opm_ota_publish_model_gen_proto_depIdxs = nil
}
