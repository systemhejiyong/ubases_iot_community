// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: iot_device_countdown_service.proto

package protosService

import (
	// _ "/api"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for IotDeviceCountdownService service

func NewIotDeviceCountdownServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "IotDeviceCountdownService.Create",
			Path:    []string{"/v1/iotDeviceCountdown/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceCountdownService.Delete",
			Path:    []string{"/v1/iotDeviceCountdown/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceCountdownService.DeleteById",
			Path:    []string{"/v1/iotDeviceCountdown/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceCountdownService.DeleteByIds",
			Path:    []string{"/v1/iotDeviceCountdown/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceCountdownService.Update",
			Path:    []string{"/v1/iotDeviceCountdown/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceCountdownService.UpdateAll",
			Path:    []string{"/v1/iotDeviceCountdown/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceCountdownService.UpdateFields",
			Path:    []string{"/v1/iotDeviceCountdown/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceCountdownService.FindById",
			Path:    []string{"/v1/iotDeviceCountdown/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceCountdownService.Find",
			Path:    []string{"/v1/iotDeviceCountdown/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceCountdownService.Lists",
			Path:    []string{"/v1/iotDeviceCountdown/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceCountdownService.UpdateByDevId",
			Path:    []string{"/v1/iotDeviceCountdown/updateByDevId"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceCountdownService.StartIotDeviceCountdownJob",
			Path:    []string{"/v1/iotDeviceCountdown/startIotDeviceCountdownJob"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceCountdownService.StopIotDeviceCountdownJob",
			Path:    []string{"/v1/iotDeviceCountdown/stopIotDeviceCountdownJob"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for IotDeviceCountdownService service

type IotDeviceCountdownService interface {
	//创建
	Create(ctx context.Context, in *IotDeviceCountdown, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *IotDeviceCountdown, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *IotDeviceCountdown, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *IotDeviceCountdownBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *IotDeviceCountdown, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *IotDeviceCountdown, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *IotDeviceCountdownUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *IotDeviceCountdownFilter, opts ...client.CallOption) (*IotDeviceCountdownResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *IotDeviceCountdownFilter, opts ...client.CallOption) (*IotDeviceCountdownResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *IotDeviceCountdownListRequest, opts ...client.CallOption) (*IotDeviceCountdownResponse, error)
	//根据设备id更新字段
	UpdateByDevId(ctx context.Context, in *IotDeviceCountdown, opts ...client.CallOption) (*Response, error)
	// 开始倒计时任务
	StartIotDeviceCountdownJob(ctx context.Context, in *IotDeviceCountdownJobReq, opts ...client.CallOption) (*Response, error)
	// 关闭倒计时任务
	StopIotDeviceCountdownJob(ctx context.Context, in *IotDeviceCountdownJobReq, opts ...client.CallOption) (*Response, error)
}

type iotDeviceCountdownService struct {
	c    client.Client
	name string
}

func NewIotDeviceCountdownService(name string, c client.Client) IotDeviceCountdownService {
	return &iotDeviceCountdownService{
		c:    c,
		name: name,
	}
}

func (c *iotDeviceCountdownService) Create(ctx context.Context, in *IotDeviceCountdown, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceCountdownService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceCountdownService) Delete(ctx context.Context, in *IotDeviceCountdown, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceCountdownService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceCountdownService) DeleteById(ctx context.Context, in *IotDeviceCountdown, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceCountdownService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceCountdownService) DeleteByIds(ctx context.Context, in *IotDeviceCountdownBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceCountdownService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceCountdownService) Update(ctx context.Context, in *IotDeviceCountdown, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceCountdownService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceCountdownService) UpdateAll(ctx context.Context, in *IotDeviceCountdown, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceCountdownService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceCountdownService) UpdateFields(ctx context.Context, in *IotDeviceCountdownUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceCountdownService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceCountdownService) FindById(ctx context.Context, in *IotDeviceCountdownFilter, opts ...client.CallOption) (*IotDeviceCountdownResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceCountdownService.FindById", in)
	out := new(IotDeviceCountdownResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceCountdownService) Find(ctx context.Context, in *IotDeviceCountdownFilter, opts ...client.CallOption) (*IotDeviceCountdownResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceCountdownService.Find", in)
	out := new(IotDeviceCountdownResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceCountdownService) Lists(ctx context.Context, in *IotDeviceCountdownListRequest, opts ...client.CallOption) (*IotDeviceCountdownResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceCountdownService.Lists", in)
	out := new(IotDeviceCountdownResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceCountdownService) UpdateByDevId(ctx context.Context, in *IotDeviceCountdown, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceCountdownService.UpdateByDevId", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceCountdownService) StartIotDeviceCountdownJob(ctx context.Context, in *IotDeviceCountdownJobReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceCountdownService.StartIotDeviceCountdownJob", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceCountdownService) StopIotDeviceCountdownJob(ctx context.Context, in *IotDeviceCountdownJobReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceCountdownService.StopIotDeviceCountdownJob", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IotDeviceCountdownService service

type IotDeviceCountdownServiceHandler interface {
	//创建
	Create(context.Context, *IotDeviceCountdown, *Response) error
	//匹配多条件删除
	Delete(context.Context, *IotDeviceCountdown, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *IotDeviceCountdown, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *IotDeviceCountdownBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *IotDeviceCountdown, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *IotDeviceCountdown, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *IotDeviceCountdownUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *IotDeviceCountdownFilter, *IotDeviceCountdownResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *IotDeviceCountdownFilter, *IotDeviceCountdownResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *IotDeviceCountdownListRequest, *IotDeviceCountdownResponse) error
	//根据设备id更新字段
	UpdateByDevId(context.Context, *IotDeviceCountdown, *Response) error
	// 开始倒计时任务
	StartIotDeviceCountdownJob(context.Context, *IotDeviceCountdownJobReq, *Response) error
	// 关闭倒计时任务
	StopIotDeviceCountdownJob(context.Context, *IotDeviceCountdownJobReq, *Response) error
}

func RegisterIotDeviceCountdownServiceHandler(s server.Server, hdlr IotDeviceCountdownServiceHandler, opts ...server.HandlerOption) error {
	type iotDeviceCountdownService interface {
		Create(ctx context.Context, in *IotDeviceCountdown, out *Response) error
		Delete(ctx context.Context, in *IotDeviceCountdown, out *Response) error
		DeleteById(ctx context.Context, in *IotDeviceCountdown, out *Response) error
		DeleteByIds(ctx context.Context, in *IotDeviceCountdownBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *IotDeviceCountdown, out *Response) error
		UpdateAll(ctx context.Context, in *IotDeviceCountdown, out *Response) error
		UpdateFields(ctx context.Context, in *IotDeviceCountdownUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *IotDeviceCountdownFilter, out *IotDeviceCountdownResponse) error
		Find(ctx context.Context, in *IotDeviceCountdownFilter, out *IotDeviceCountdownResponse) error
		Lists(ctx context.Context, in *IotDeviceCountdownListRequest, out *IotDeviceCountdownResponse) error
		UpdateByDevId(ctx context.Context, in *IotDeviceCountdown, out *Response) error
		StartIotDeviceCountdownJob(ctx context.Context, in *IotDeviceCountdownJobReq, out *Response) error
		StopIotDeviceCountdownJob(ctx context.Context, in *IotDeviceCountdownJobReq, out *Response) error
	}
	type IotDeviceCountdownService struct {
		iotDeviceCountdownService
	}
	h := &iotDeviceCountdownServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceCountdownService.Create",
		Path:    []string{"/v1/iotDeviceCountdown/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceCountdownService.Delete",
		Path:    []string{"/v1/iotDeviceCountdown/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceCountdownService.DeleteById",
		Path:    []string{"/v1/iotDeviceCountdown/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceCountdownService.DeleteByIds",
		Path:    []string{"/v1/iotDeviceCountdown/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceCountdownService.Update",
		Path:    []string{"/v1/iotDeviceCountdown/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceCountdownService.UpdateAll",
		Path:    []string{"/v1/iotDeviceCountdown/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceCountdownService.UpdateFields",
		Path:    []string{"/v1/iotDeviceCountdown/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceCountdownService.FindById",
		Path:    []string{"/v1/iotDeviceCountdown/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceCountdownService.Find",
		Path:    []string{"/v1/iotDeviceCountdown/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceCountdownService.Lists",
		Path:    []string{"/v1/iotDeviceCountdown/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceCountdownService.UpdateByDevId",
		Path:    []string{"/v1/iotDeviceCountdown/updateByDevId"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceCountdownService.StartIotDeviceCountdownJob",
		Path:    []string{"/v1/iotDeviceCountdown/startIotDeviceCountdownJob"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceCountdownService.StopIotDeviceCountdownJob",
		Path:    []string{"/v1/iotDeviceCountdown/stopIotDeviceCountdownJob"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&IotDeviceCountdownService{h}, opts...))
}

type iotDeviceCountdownServiceHandler struct {
	IotDeviceCountdownServiceHandler
}

func (h *iotDeviceCountdownServiceHandler) Create(ctx context.Context, in *IotDeviceCountdown, out *Response) error {
	return h.IotDeviceCountdownServiceHandler.Create(ctx, in, out)
}

func (h *iotDeviceCountdownServiceHandler) Delete(ctx context.Context, in *IotDeviceCountdown, out *Response) error {
	return h.IotDeviceCountdownServiceHandler.Delete(ctx, in, out)
}

func (h *iotDeviceCountdownServiceHandler) DeleteById(ctx context.Context, in *IotDeviceCountdown, out *Response) error {
	return h.IotDeviceCountdownServiceHandler.DeleteById(ctx, in, out)
}

func (h *iotDeviceCountdownServiceHandler) DeleteByIds(ctx context.Context, in *IotDeviceCountdownBatchDeleteRequest, out *Response) error {
	return h.IotDeviceCountdownServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *iotDeviceCountdownServiceHandler) Update(ctx context.Context, in *IotDeviceCountdown, out *Response) error {
	return h.IotDeviceCountdownServiceHandler.Update(ctx, in, out)
}

func (h *iotDeviceCountdownServiceHandler) UpdateAll(ctx context.Context, in *IotDeviceCountdown, out *Response) error {
	return h.IotDeviceCountdownServiceHandler.UpdateAll(ctx, in, out)
}

func (h *iotDeviceCountdownServiceHandler) UpdateFields(ctx context.Context, in *IotDeviceCountdownUpdateFieldsRequest, out *Response) error {
	return h.IotDeviceCountdownServiceHandler.UpdateFields(ctx, in, out)
}

func (h *iotDeviceCountdownServiceHandler) FindById(ctx context.Context, in *IotDeviceCountdownFilter, out *IotDeviceCountdownResponse) error {
	return h.IotDeviceCountdownServiceHandler.FindById(ctx, in, out)
}

func (h *iotDeviceCountdownServiceHandler) Find(ctx context.Context, in *IotDeviceCountdownFilter, out *IotDeviceCountdownResponse) error {
	return h.IotDeviceCountdownServiceHandler.Find(ctx, in, out)
}

func (h *iotDeviceCountdownServiceHandler) Lists(ctx context.Context, in *IotDeviceCountdownListRequest, out *IotDeviceCountdownResponse) error {
	return h.IotDeviceCountdownServiceHandler.Lists(ctx, in, out)
}

func (h *iotDeviceCountdownServiceHandler) UpdateByDevId(ctx context.Context, in *IotDeviceCountdown, out *Response) error {
	return h.IotDeviceCountdownServiceHandler.UpdateByDevId(ctx, in, out)
}

func (h *iotDeviceCountdownServiceHandler) StartIotDeviceCountdownJob(ctx context.Context, in *IotDeviceCountdownJobReq, out *Response) error {
	return h.IotDeviceCountdownServiceHandler.StartIotDeviceCountdownJob(ctx, in, out)
}

func (h *iotDeviceCountdownServiceHandler) StopIotDeviceCountdownJob(ctx context.Context, in *IotDeviceCountdownJobReq, out *Response) error {
	return h.IotDeviceCountdownServiceHandler.StopIotDeviceCountdownJob(ctx, in, out)
}
