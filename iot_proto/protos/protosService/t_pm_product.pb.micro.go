// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: t_pm_product.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TPmProduct service

func NewTPmProductEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TPmProduct service

type TPmProductService interface {
	CreateTPmProduct(ctx context.Context, in *TPmProductRequest, opts ...client.CallOption) (*TPmProductResponse, error)
	UpdateTPmProduct(ctx context.Context, in *TPmProductRequest, opts ...client.CallOption) (*TPmProductResponse, error)
	DeleteTPmProduct(ctx context.Context, in *TPmProductRequest, opts ...client.CallOption) (*TPmProductResponse, error)
	GetByIdTPmProduct(ctx context.Context, in *TPmProductFilterById, opts ...client.CallOption) (*TPmProductResponseObject, error)
	GetTPmProduct(ctx context.Context, in *TPmProductFilter, opts ...client.CallOption) (*TPmProductResponseObject, error)
	ListTPmProduct(ctx context.Context, in *TPmProductFilterPage, opts ...client.CallOption) (*TPmProductResponseList, error)
	UploadControlPanel(ctx context.Context, in *PmControlPanelObj, opts ...client.CallOption) (*TPmProductResponse, error)
	UpdateStatus(ctx context.Context, in *TPmProductStatusRequest, opts ...client.CallOption) (*TPmProductResponse, error)
	Exists(ctx context.Context, in *TPmProductFilter, opts ...client.CallOption) (*TPmProductResponse, error)
	ResetProductThingModels(ctx context.Context, in *TPmProductRequest, opts ...client.CallOption) (*Response, error)
}

type tPmProductService struct {
	c    client.Client
	name string
}

func NewTPmProductService(name string, c client.Client) TPmProductService {
	return &tPmProductService{
		c:    c,
		name: name,
	}
}

func (c *tPmProductService) CreateTPmProduct(ctx context.Context, in *TPmProductRequest, opts ...client.CallOption) (*TPmProductResponse, error) {
	req := c.c.NewRequest(c.name, "TPmProduct.CreateTPmProduct", in)
	out := new(TPmProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmProductService) UpdateTPmProduct(ctx context.Context, in *TPmProductRequest, opts ...client.CallOption) (*TPmProductResponse, error) {
	req := c.c.NewRequest(c.name, "TPmProduct.UpdateTPmProduct", in)
	out := new(TPmProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmProductService) DeleteTPmProduct(ctx context.Context, in *TPmProductRequest, opts ...client.CallOption) (*TPmProductResponse, error) {
	req := c.c.NewRequest(c.name, "TPmProduct.DeleteTPmProduct", in)
	out := new(TPmProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmProductService) GetByIdTPmProduct(ctx context.Context, in *TPmProductFilterById, opts ...client.CallOption) (*TPmProductResponseObject, error) {
	req := c.c.NewRequest(c.name, "TPmProduct.GetByIdTPmProduct", in)
	out := new(TPmProductResponseObject)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmProductService) GetTPmProduct(ctx context.Context, in *TPmProductFilter, opts ...client.CallOption) (*TPmProductResponseObject, error) {
	req := c.c.NewRequest(c.name, "TPmProduct.GetTPmProduct", in)
	out := new(TPmProductResponseObject)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmProductService) ListTPmProduct(ctx context.Context, in *TPmProductFilterPage, opts ...client.CallOption) (*TPmProductResponseList, error) {
	req := c.c.NewRequest(c.name, "TPmProduct.ListTPmProduct", in)
	out := new(TPmProductResponseList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmProductService) UploadControlPanel(ctx context.Context, in *PmControlPanelObj, opts ...client.CallOption) (*TPmProductResponse, error) {
	req := c.c.NewRequest(c.name, "TPmProduct.UploadControlPanel", in)
	out := new(TPmProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmProductService) UpdateStatus(ctx context.Context, in *TPmProductStatusRequest, opts ...client.CallOption) (*TPmProductResponse, error) {
	req := c.c.NewRequest(c.name, "TPmProduct.UpdateStatus", in)
	out := new(TPmProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmProductService) Exists(ctx context.Context, in *TPmProductFilter, opts ...client.CallOption) (*TPmProductResponse, error) {
	req := c.c.NewRequest(c.name, "TPmProduct.Exists", in)
	out := new(TPmProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmProductService) ResetProductThingModels(ctx context.Context, in *TPmProductRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "TPmProduct.ResetProductThingModels", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TPmProduct service

type TPmProductHandler interface {
	CreateTPmProduct(context.Context, *TPmProductRequest, *TPmProductResponse) error
	UpdateTPmProduct(context.Context, *TPmProductRequest, *TPmProductResponse) error
	DeleteTPmProduct(context.Context, *TPmProductRequest, *TPmProductResponse) error
	GetByIdTPmProduct(context.Context, *TPmProductFilterById, *TPmProductResponseObject) error
	GetTPmProduct(context.Context, *TPmProductFilter, *TPmProductResponseObject) error
	ListTPmProduct(context.Context, *TPmProductFilterPage, *TPmProductResponseList) error
	UploadControlPanel(context.Context, *PmControlPanelObj, *TPmProductResponse) error
	UpdateStatus(context.Context, *TPmProductStatusRequest, *TPmProductResponse) error
	Exists(context.Context, *TPmProductFilter, *TPmProductResponse) error
	ResetProductThingModels(context.Context, *TPmProductRequest, *Response) error
}

func RegisterTPmProductHandler(s server.Server, hdlr TPmProductHandler, opts ...server.HandlerOption) error {
	type tPmProduct interface {
		CreateTPmProduct(ctx context.Context, in *TPmProductRequest, out *TPmProductResponse) error
		UpdateTPmProduct(ctx context.Context, in *TPmProductRequest, out *TPmProductResponse) error
		DeleteTPmProduct(ctx context.Context, in *TPmProductRequest, out *TPmProductResponse) error
		GetByIdTPmProduct(ctx context.Context, in *TPmProductFilterById, out *TPmProductResponseObject) error
		GetTPmProduct(ctx context.Context, in *TPmProductFilter, out *TPmProductResponseObject) error
		ListTPmProduct(ctx context.Context, in *TPmProductFilterPage, out *TPmProductResponseList) error
		UploadControlPanel(ctx context.Context, in *PmControlPanelObj, out *TPmProductResponse) error
		UpdateStatus(ctx context.Context, in *TPmProductStatusRequest, out *TPmProductResponse) error
		Exists(ctx context.Context, in *TPmProductFilter, out *TPmProductResponse) error
		ResetProductThingModels(ctx context.Context, in *TPmProductRequest, out *Response) error
	}
	type TPmProduct struct {
		tPmProduct
	}
	h := &tPmProductHandler{hdlr}
	return s.Handle(s.NewHandler(&TPmProduct{h}, opts...))
}

type tPmProductHandler struct {
	TPmProductHandler
}

func (h *tPmProductHandler) CreateTPmProduct(ctx context.Context, in *TPmProductRequest, out *TPmProductResponse) error {
	return h.TPmProductHandler.CreateTPmProduct(ctx, in, out)
}

func (h *tPmProductHandler) UpdateTPmProduct(ctx context.Context, in *TPmProductRequest, out *TPmProductResponse) error {
	return h.TPmProductHandler.UpdateTPmProduct(ctx, in, out)
}

func (h *tPmProductHandler) DeleteTPmProduct(ctx context.Context, in *TPmProductRequest, out *TPmProductResponse) error {
	return h.TPmProductHandler.DeleteTPmProduct(ctx, in, out)
}

func (h *tPmProductHandler) GetByIdTPmProduct(ctx context.Context, in *TPmProductFilterById, out *TPmProductResponseObject) error {
	return h.TPmProductHandler.GetByIdTPmProduct(ctx, in, out)
}

func (h *tPmProductHandler) GetTPmProduct(ctx context.Context, in *TPmProductFilter, out *TPmProductResponseObject) error {
	return h.TPmProductHandler.GetTPmProduct(ctx, in, out)
}

func (h *tPmProductHandler) ListTPmProduct(ctx context.Context, in *TPmProductFilterPage, out *TPmProductResponseList) error {
	return h.TPmProductHandler.ListTPmProduct(ctx, in, out)
}

func (h *tPmProductHandler) UploadControlPanel(ctx context.Context, in *PmControlPanelObj, out *TPmProductResponse) error {
	return h.TPmProductHandler.UploadControlPanel(ctx, in, out)
}

func (h *tPmProductHandler) UpdateStatus(ctx context.Context, in *TPmProductStatusRequest, out *TPmProductResponse) error {
	return h.TPmProductHandler.UpdateStatus(ctx, in, out)
}

func (h *tPmProductHandler) Exists(ctx context.Context, in *TPmProductFilter, out *TPmProductResponse) error {
	return h.TPmProductHandler.Exists(ctx, in, out)
}

func (h *tPmProductHandler) ResetProductThingModels(ctx context.Context, in *TPmProductRequest, out *Response) error {
	return h.TPmProductHandler.ResetProductThingModels(ctx, in, out)
}
