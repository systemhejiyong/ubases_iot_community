// Code generated by sgen,2023-06-02 13:48:10. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: opm_panel_model.gen.proto

package protosService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//来源于数据表
type OpmPanel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:主键ID;comment:主键ID;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"tenantId" gorm:"default:租户Id;comment:租户Id;size:10;"
	TenantId string `protobuf:"bytes,101,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// @inject_tag: json:"panelName" gorm:"default:面板名称;comment:面板名称;size:100;"
	PanelName string `protobuf:"bytes,102,opt,name=panelName,proto3" json:"panelName,omitempty"`
	// @inject_tag: json:"panelType" gorm:"default:面板类型（=1 APP控制面板 =2嵌入式面板）;comment:面板类型（=1 APP控制面板 =2嵌入式面板）;"
	PanelType int32 `protobuf:"varint,103,opt,name=panelType,proto3" json:"panelType,omitempty"`
	// @inject_tag: json:"status" gorm:"default:面板状态 草稿、开发中、已发布;comment:面板状态 草稿、开发中、已发布;"
	Status int32 `protobuf:"varint,104,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"buildStatus" gorm:"default:打包编译状态 （studio类型使用，其它默认已打包）;comment:打包编译状态 （studio类型使用，其它默认已打包）;"
	BuildStatus int32 `protobuf:"varint,105,opt,name=buildStatus,proto3" json:"buildStatus,omitempty"`
	// @inject_tag: json:"panelUrl" gorm:"default:面板地址（生成后）;comment:面板地址（生成后）;size:255;"
	PanelUrl string `protobuf:"bytes,106,opt,name=panelUrl,proto3" json:"panelUrl,omitempty"`
	// @inject_tag: json:"panelUrlName" gorm:"default:面板文件名称;comment:面板文件名称;size:64;"
	PanelUrlName string `protobuf:"bytes,107,opt,name=panelUrlName,proto3" json:"panelUrlName,omitempty"`
	// @inject_tag: json:"panelSize" gorm:"default:面板大小（生成后）;comment:面板大小（生成后）;size:10;"
	PanelSize int32 `protobuf:"varint,108,opt,name=panelSize,proto3" json:"panelSize,omitempty"`
	// @inject_tag: json:"panelKey" gorm:"default:面板md5（生成后）;comment:面板md5（生成后）;size:50;"
	PanelKey string `protobuf:"bytes,109,opt,name=panelKey,proto3" json:"panelKey,omitempty"`
	// @inject_tag: json:"previewName" gorm:"default:预览图名称;comment:预览图名称;size:64;"
	PreviewName string `protobuf:"bytes,110,opt,name=previewName,proto3" json:"previewName,omitempty"`
	// @inject_tag: json:"previewUrl" gorm:"default:面板地址;comment:面板地址;size:255;"
	PreviewUrl string `protobuf:"bytes,111,opt,name=previewUrl,proto3" json:"previewUrl,omitempty"`
	// @inject_tag: json:"packageId" gorm:"default:套餐编号;comment:套餐编号;size:19;"
	PackageId int64 `protobuf:"varint,112,opt,name=packageId,proto3" json:"packageId,omitempty"`
	// @inject_tag: json:"packageName" gorm:"default:套餐名称;comment:套餐名称;size:100;"
	PackageName string `protobuf:"bytes,113,opt,name=packageName,proto3" json:"packageName,omitempty"`
	// @inject_tag: json:"modelId" gorm:"default:型号编号;comment:型号编号;size:19;"
	ModelId int64 `protobuf:"varint,114,opt,name=modelId,proto3" json:"modelId,omitempty"`
	// @inject_tag: json:"modelName" gorm:"default:型号编号;comment:型号编号;size:100;"
	ModelName string `protobuf:"bytes,115,opt,name=modelName,proto3" json:"modelName,omitempty"`
	// @inject_tag: json:"width" gorm:"default:分辨率-宽度;comment:分辨率-宽度;size:10,0;"
	Width float64 `protobuf:"fixed64,116,opt,name=width,proto3" json:"width,omitempty"`
	// @inject_tag: json:"height" gorm:"default:分辨率-高度;comment:分辨率-高度;size:10,0;"
	Height float64 `protobuf:"fixed64,117,opt,name=height,proto3" json:"height,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,118,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:19;"
	CreatedBy int64 `protobuf:"varint,119,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,120,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:20;"
	UpdatedBy int64 `protobuf:"varint,121,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	//面板设计器页面集合
	PageStudioList []*OpmPanelStudio `protobuf:"bytes,122,rep,name=pageStudioList,proto3" json:"pageStudioList,omitempty"`
	//源代码ZIP包
	SourceZip string `protobuf:"bytes,123,opt,name=sourceZip,proto3" json:"sourceZip,omitempty"`
	//产品类型Id
	BaseProductId int64 `protobuf:"varint,124,opt,name=baseProductId,proto3" json:"baseProductId,omitempty"`
	//产品Id
	ProductId int64 `protobuf:"varint,125,opt,name=productId,proto3" json:"productId,omitempty"`
	//编译描述（错误描述）
	BuildDesc string `protobuf:"bytes,126,opt,name=buildDesc,proto3" json:"buildDesc,omitempty"`
	//编译时间
	BuildTime *timestamppb.Timestamp `protobuf:"bytes,127,opt,name=buildTime,proto3" json:"buildTime,omitempty"`
	//编译失败状态
	BuildErrStatus int32 `protobuf:"varint,128,opt,name=buildErrStatus,proto3" json:"buildErrStatus,omitempty"`
	//主题设置
	ThemeJson string `protobuf:"bytes,129,opt,name=themeJson,proto3" json:"themeJson,omitempty"`
	//翻译数据
	Ens          map[string]string `protobuf:"bytes,130,rep,name=ens,proto3" json:"ens,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Zhs          map[string]string `protobuf:"bytes,131,rep,name=zhs,proto3" json:"zhs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	UserAccount  string            `protobuf:"bytes,132,opt,name=userAccount,proto3" json:"userAccount,omitempty"`
	OriginType   int32             `protobuf:"varint,133,opt,name=originType,proto3" json:"originType,omitempty"` //` //来源 = 1 预览 =2发布
	AppKey       string            `protobuf:"bytes,134,opt,name=appKey,proto3" json:"appKey,omitempty"`
	LangFileName string            `protobuf:"bytes,135,opt,name=langFileName,proto3" json:"langFileName,omitempty"`     //语言文件名称
	Remark       string            `protobuf:"bytes,136,opt,name=remark,proto3" json:"remark,omitempty"`                 //面板描述
	PanelTypes   []int32           `protobuf:"varint,137,rep,packed,name=panelTypes,proto3" json:"panelTypes,omitempty"` //面板類型多查詢
	UseCount     int32             `protobuf:"varint,138,opt,name=useCount,proto3" json:"useCount,omitempty"`            //当前适用次数
	Code         string            `protobuf:"bytes,139,opt,name=code,proto3" json:"code,omitempty"`                     //面板编码
}

func (x *OpmPanel) Reset() {
	*x = OpmPanel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_model_gen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanel) ProtoMessage() {}

func (x *OpmPanel) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_model_gen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanel.ProtoReflect.Descriptor instead.
func (*OpmPanel) Descriptor() ([]byte, []int) {
	return file_opm_panel_model_gen_proto_rawDescGZIP(), []int{0}
}

func (x *OpmPanel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpmPanel) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OpmPanel) GetPanelName() string {
	if x != nil {
		return x.PanelName
	}
	return ""
}

func (x *OpmPanel) GetPanelType() int32 {
	if x != nil {
		return x.PanelType
	}
	return 0
}

func (x *OpmPanel) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OpmPanel) GetBuildStatus() int32 {
	if x != nil {
		return x.BuildStatus
	}
	return 0
}

func (x *OpmPanel) GetPanelUrl() string {
	if x != nil {
		return x.PanelUrl
	}
	return ""
}

func (x *OpmPanel) GetPanelUrlName() string {
	if x != nil {
		return x.PanelUrlName
	}
	return ""
}

func (x *OpmPanel) GetPanelSize() int32 {
	if x != nil {
		return x.PanelSize
	}
	return 0
}

func (x *OpmPanel) GetPanelKey() string {
	if x != nil {
		return x.PanelKey
	}
	return ""
}

func (x *OpmPanel) GetPreviewName() string {
	if x != nil {
		return x.PreviewName
	}
	return ""
}

func (x *OpmPanel) GetPreviewUrl() string {
	if x != nil {
		return x.PreviewUrl
	}
	return ""
}

func (x *OpmPanel) GetPackageId() int64 {
	if x != nil {
		return x.PackageId
	}
	return 0
}

func (x *OpmPanel) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *OpmPanel) GetModelId() int64 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *OpmPanel) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *OpmPanel) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *OpmPanel) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *OpmPanel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OpmPanel) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *OpmPanel) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OpmPanel) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *OpmPanel) GetPageStudioList() []*OpmPanelStudio {
	if x != nil {
		return x.PageStudioList
	}
	return nil
}

func (x *OpmPanel) GetSourceZip() string {
	if x != nil {
		return x.SourceZip
	}
	return ""
}

func (x *OpmPanel) GetBaseProductId() int64 {
	if x != nil {
		return x.BaseProductId
	}
	return 0
}

func (x *OpmPanel) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *OpmPanel) GetBuildDesc() string {
	if x != nil {
		return x.BuildDesc
	}
	return ""
}

func (x *OpmPanel) GetBuildTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BuildTime
	}
	return nil
}

func (x *OpmPanel) GetBuildErrStatus() int32 {
	if x != nil {
		return x.BuildErrStatus
	}
	return 0
}

func (x *OpmPanel) GetThemeJson() string {
	if x != nil {
		return x.ThemeJson
	}
	return ""
}

func (x *OpmPanel) GetEns() map[string]string {
	if x != nil {
		return x.Ens
	}
	return nil
}

func (x *OpmPanel) GetZhs() map[string]string {
	if x != nil {
		return x.Zhs
	}
	return nil
}

func (x *OpmPanel) GetUserAccount() string {
	if x != nil {
		return x.UserAccount
	}
	return ""
}

func (x *OpmPanel) GetOriginType() int32 {
	if x != nil {
		return x.OriginType
	}
	return 0
}

func (x *OpmPanel) GetAppKey() string {
	if x != nil {
		return x.AppKey
	}
	return ""
}

func (x *OpmPanel) GetLangFileName() string {
	if x != nil {
		return x.LangFileName
	}
	return ""
}

func (x *OpmPanel) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *OpmPanel) GetPanelTypes() []int32 {
	if x != nil {
		return x.PanelTypes
	}
	return nil
}

func (x *OpmPanel) GetUseCount() int32 {
	if x != nil {
		return x.UseCount
	}
	return 0
}

func (x *OpmPanel) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type OpmPanelFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:主键ID;comment:主键ID;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"tenantId" gorm:"default:租户Id;comment:租户Id;size:10;"
	TenantId string `protobuf:"bytes,101,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// @inject_tag: json:"panelName" gorm:"default:面板名称;comment:面板名称;size:100;"
	PanelName string `protobuf:"bytes,102,opt,name=panelName,proto3" json:"panelName,omitempty"`
	// @inject_tag: json:"panelType" gorm:"default:面板类型（=1 APP控制面板 =2嵌入式面板）;comment:面板类型（=1 APP控制面板 =2嵌入式面板）;"
	PanelType int32 `protobuf:"varint,103,opt,name=panelType,proto3" json:"panelType,omitempty"`
	// @inject_tag: json:"status" gorm:"default:面板状态 草稿、开发中、已发布;comment:面板状态 草稿、开发中、已发布;"
	Status int32 `protobuf:"varint,104,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"buildStatus" gorm:"default:打包编译状态 （studio类型使用，其它默认已打包）;comment:打包编译状态 （studio类型使用，其它默认已打包）;"
	BuildStatus int32 `protobuf:"varint,105,opt,name=buildStatus,proto3" json:"buildStatus,omitempty"`
	// @inject_tag: json:"panelUrl" gorm:"default:面板地址（生成后）;comment:面板地址（生成后）;size:255;"
	PanelUrl string `protobuf:"bytes,106,opt,name=panelUrl,proto3" json:"panelUrl,omitempty"`
	// @inject_tag: json:"panelUrlName" gorm:"default:面板文件名称;comment:面板文件名称;size:64;"
	PanelUrlName string `protobuf:"bytes,107,opt,name=panelUrlName,proto3" json:"panelUrlName,omitempty"`
	// @inject_tag: json:"panelSize" gorm:"default:面板大小（生成后）;comment:面板大小（生成后）;size:10;"
	PanelSize int32 `protobuf:"varint,108,opt,name=panelSize,proto3" json:"panelSize,omitempty"`
	// @inject_tag: json:"panelKey" gorm:"default:面板md5（生成后）;comment:面板md5（生成后）;size:50;"
	PanelKey string `protobuf:"bytes,109,opt,name=panelKey,proto3" json:"panelKey,omitempty"`
	// @inject_tag: json:"previewName" gorm:"default:预览图名称;comment:预览图名称;size:64;"
	PreviewName string `protobuf:"bytes,110,opt,name=previewName,proto3" json:"previewName,omitempty"`
	// @inject_tag: json:"previewUrl" gorm:"default:面板地址;comment:面板地址;size:255;"
	PreviewUrl string `protobuf:"bytes,111,opt,name=previewUrl,proto3" json:"previewUrl,omitempty"`
	// @inject_tag: json:"packageId" gorm:"default:套餐编号;comment:套餐编号;size:19;"
	PackageId int64 `protobuf:"varint,112,opt,name=packageId,proto3" json:"packageId,omitempty"`
	// @inject_tag: json:"packageName" gorm:"default:套餐名称;comment:套餐名称;size:100;"
	PackageName string `protobuf:"bytes,113,opt,name=packageName,proto3" json:"packageName,omitempty"`
	// @inject_tag: json:"modelId" gorm:"default:型号编号;comment:型号编号;size:19;"
	ModelId int64 `protobuf:"varint,114,opt,name=modelId,proto3" json:"modelId,omitempty"`
	// @inject_tag: json:"modelName" gorm:"default:型号编号;comment:型号编号;size:100;"
	ModelName string `protobuf:"bytes,115,opt,name=modelName,proto3" json:"modelName,omitempty"`
	// @inject_tag: json:"width" gorm:"default:分辨率-宽度;comment:分辨率-宽度;size:10,0;"
	Width float64 `protobuf:"fixed64,116,opt,name=width,proto3" json:"width,omitempty"`
	// @inject_tag: json:"height" gorm:"default:分辨率-高度;comment:分辨率-高度;size:10,0;"
	Height float64 `protobuf:"fixed64,117,opt,name=height,proto3" json:"height,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,118,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:19;"
	CreatedBy int64 `protobuf:"varint,119,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,120,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:20;"
	UpdatedBy int64 `protobuf:"varint,121,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	//源代码ZIP包
	SourceZip string `protobuf:"bytes,122,opt,name=sourceZip,proto3" json:"sourceZip,omitempty"`
	//产品类型Id
	BaseProductId int64 `protobuf:"varint,123,opt,name=baseProductId,proto3" json:"baseProductId,omitempty"`
	//产品Id
	ProductId int64  `protobuf:"varint,124,opt,name=productId,proto3" json:"productId,omitempty"`
	Code      string `protobuf:"bytes,125,opt,name=code,proto3" json:"code,omitempty"` //面板编码
}

func (x *OpmPanelFilter) Reset() {
	*x = OpmPanelFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_model_gen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelFilter) ProtoMessage() {}

func (x *OpmPanelFilter) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_model_gen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelFilter.ProtoReflect.Descriptor instead.
func (*OpmPanelFilter) Descriptor() ([]byte, []int) {
	return file_opm_panel_model_gen_proto_rawDescGZIP(), []int{1}
}

func (x *OpmPanelFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpmPanelFilter) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OpmPanelFilter) GetPanelName() string {
	if x != nil {
		return x.PanelName
	}
	return ""
}

func (x *OpmPanelFilter) GetPanelType() int32 {
	if x != nil {
		return x.PanelType
	}
	return 0
}

func (x *OpmPanelFilter) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OpmPanelFilter) GetBuildStatus() int32 {
	if x != nil {
		return x.BuildStatus
	}
	return 0
}

func (x *OpmPanelFilter) GetPanelUrl() string {
	if x != nil {
		return x.PanelUrl
	}
	return ""
}

func (x *OpmPanelFilter) GetPanelUrlName() string {
	if x != nil {
		return x.PanelUrlName
	}
	return ""
}

func (x *OpmPanelFilter) GetPanelSize() int32 {
	if x != nil {
		return x.PanelSize
	}
	return 0
}

func (x *OpmPanelFilter) GetPanelKey() string {
	if x != nil {
		return x.PanelKey
	}
	return ""
}

func (x *OpmPanelFilter) GetPreviewName() string {
	if x != nil {
		return x.PreviewName
	}
	return ""
}

func (x *OpmPanelFilter) GetPreviewUrl() string {
	if x != nil {
		return x.PreviewUrl
	}
	return ""
}

func (x *OpmPanelFilter) GetPackageId() int64 {
	if x != nil {
		return x.PackageId
	}
	return 0
}

func (x *OpmPanelFilter) GetPackageName() string {
	if x != nil {
		return x.PackageName
	}
	return ""
}

func (x *OpmPanelFilter) GetModelId() int64 {
	if x != nil {
		return x.ModelId
	}
	return 0
}

func (x *OpmPanelFilter) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *OpmPanelFilter) GetWidth() float64 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *OpmPanelFilter) GetHeight() float64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *OpmPanelFilter) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OpmPanelFilter) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *OpmPanelFilter) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OpmPanelFilter) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *OpmPanelFilter) GetSourceZip() string {
	if x != nil {
		return x.SourceZip
	}
	return ""
}

func (x *OpmPanelFilter) GetBaseProductId() int64 {
	if x != nil {
		return x.BaseProductId
	}
	return 0
}

func (x *OpmPanelFilter) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *OpmPanelFilter) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type OpmPanelListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *OpmPanel `protobuf:"bytes,101,opt,name=query,proto3" json:"query,omitempty"`
	Page      int64     `protobuf:"varint,102,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64     `protobuf:"varint,103,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderKey  string    `protobuf:"bytes,104,opt,name=orderKey,proto3" json:"orderKey,omitempty"`
	OrderDesc string    `protobuf:"bytes,105,opt,name=orderDesc,proto3" json:"orderDesc,omitempty"`
	SearchKey string    `protobuf:"bytes,106,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
}

func (x *OpmPanelListRequest) Reset() {
	*x = OpmPanelListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_model_gen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelListRequest) ProtoMessage() {}

func (x *OpmPanelListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_model_gen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelListRequest.ProtoReflect.Descriptor instead.
func (*OpmPanelListRequest) Descriptor() ([]byte, []int) {
	return file_opm_panel_model_gen_proto_rawDescGZIP(), []int{2}
}

func (x *OpmPanelListRequest) GetQuery() *OpmPanel {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *OpmPanelListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *OpmPanelListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *OpmPanelListRequest) GetOrderKey() string {
	if x != nil {
		return x.OrderKey
	}
	return ""
}

func (x *OpmPanelListRequest) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *OpmPanelListRequest) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

type OpmPanelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32       `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string      `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64       `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*OpmPanel `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *OpmPanelResponse) Reset() {
	*x = OpmPanelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_model_gen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelResponse) ProtoMessage() {}

func (x *OpmPanelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_model_gen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelResponse.ProtoReflect.Descriptor instead.
func (*OpmPanelResponse) Descriptor() ([]byte, []int) {
	return file_opm_panel_model_gen_proto_rawDescGZIP(), []int{3}
}

func (x *OpmPanelResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OpmPanelResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OpmPanelResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OpmPanelResponse) GetData() []*OpmPanel {
	if x != nil {
		return x.Data
	}
	return nil
}

type OpmPanelUpdateFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string  `protobuf:"bytes,101,rep,name=fields,proto3" json:"fields,omitempty"`
	Data   *OpmPanel `protobuf:"bytes,102,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OpmPanelUpdateFieldsRequest) Reset() {
	*x = OpmPanelUpdateFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_model_gen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelUpdateFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelUpdateFieldsRequest) ProtoMessage() {}

func (x *OpmPanelUpdateFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_model_gen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelUpdateFieldsRequest.ProtoReflect.Descriptor instead.
func (*OpmPanelUpdateFieldsRequest) Descriptor() ([]byte, []int) {
	return file_opm_panel_model_gen_proto_rawDescGZIP(), []int{4}
}

func (x *OpmPanelUpdateFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *OpmPanelUpdateFieldsRequest) GetData() *OpmPanel {
	if x != nil {
		return x.Data
	}
	return nil
}

// 表模型主键，只能是整数或字符串，若生成错误，请检查数据库表主键是否正确。支持组合主键
type OpmPanelPrimarykey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OpmPanelPrimarykey) Reset() {
	*x = OpmPanelPrimarykey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_model_gen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelPrimarykey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelPrimarykey) ProtoMessage() {}

func (x *OpmPanelPrimarykey) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_model_gen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelPrimarykey.ProtoReflect.Descriptor instead.
func (*OpmPanelPrimarykey) Descriptor() ([]byte, []int) {
	return file_opm_panel_model_gen_proto_rawDescGZIP(), []int{5}
}

func (x *OpmPanelPrimarykey) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type OpmPanelBatchDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*OpmPanelPrimarykey `protobuf:"bytes,101,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *OpmPanelBatchDeleteRequest) Reset() {
	*x = OpmPanelBatchDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_model_gen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelBatchDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelBatchDeleteRequest) ProtoMessage() {}

func (x *OpmPanelBatchDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_model_gen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelBatchDeleteRequest.ProtoReflect.Descriptor instead.
func (*OpmPanelBatchDeleteRequest) Descriptor() ([]byte, []int) {
	return file_opm_panel_model_gen_proto_rawDescGZIP(), []int{6}
}

func (x *OpmPanelBatchDeleteRequest) GetKeys() []*OpmPanelPrimarykey {
	if x != nil {
		return x.Keys
	}
	return nil
}

var File_opm_panel_model_gen_proto protoreflect.FileDescriptor

var file_opm_panel_model_gen_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6f, 0x70, 0x6d, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6f, 0x70, 0x6d, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x67, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x0b, 0x0a, 0x08, 0x4f, 0x70, 0x6d, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x55,
	0x72, 0x6c, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x55,
	0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x55, 0x72, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x55,
	0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x79,
	0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c,
	0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55,
	0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18,
	0x70, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x72, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x18, 0x74, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x75, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x77, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x78, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x79, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x7a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x0e, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5a, 0x69, 0x70, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5a, 0x69, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x73, 0x63, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x45, 0x72, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x09,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x65,
	0x6e, 0x73, 0x18, 0x82, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x03, 0x7a, 0x68,
	0x73, 0x18, 0x83, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x2e, 0x5a, 0x68, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x7a, 0x68, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0a,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x61, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x89, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x13, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x36, 0x0a, 0x08, 0x5a, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xba, 0x06, 0x0a, 0x0e, 0x4f, 0x70, 0x6d, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x55, 0x72, 0x6c, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x55, 0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x55, 0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x6e, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x72, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x74, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x75, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x76, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x77, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x79, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5a, 0x69, 0x70, 0x18, 0x7a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5a, 0x69, 0x70, 0x12, 0x24, 0x0a, 0x0d,
	0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x7b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18,
	0x7c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x13, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x7d, 0x0a,
	0x10, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x68, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70,
	0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x1b,
	0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x24, 0x0a, 0x12, 0x4f, 0x70,
	0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x4d, 0x0a, 0x1a, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x42,
	0x11, 0x5a, 0x0f, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opm_panel_model_gen_proto_rawDescOnce sync.Once
	file_opm_panel_model_gen_proto_rawDescData = file_opm_panel_model_gen_proto_rawDesc
)

func file_opm_panel_model_gen_proto_rawDescGZIP() []byte {
	file_opm_panel_model_gen_proto_rawDescOnce.Do(func() {
		file_opm_panel_model_gen_proto_rawDescData = protoimpl.X.CompressGZIP(file_opm_panel_model_gen_proto_rawDescData)
	})
	return file_opm_panel_model_gen_proto_rawDescData
}

var file_opm_panel_model_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_opm_panel_model_gen_proto_goTypes = []interface{}{
	(*OpmPanel)(nil),                    // 0: service.OpmPanel
	(*OpmPanelFilter)(nil),              // 1: service.OpmPanelFilter
	(*OpmPanelListRequest)(nil),         // 2: service.OpmPanelListRequest
	(*OpmPanelResponse)(nil),            // 3: service.OpmPanelResponse
	(*OpmPanelUpdateFieldsRequest)(nil), // 4: service.OpmPanelUpdateFieldsRequest
	(*OpmPanelPrimarykey)(nil),          // 5: service.OpmPanelPrimarykey
	(*OpmPanelBatchDeleteRequest)(nil),  // 6: service.OpmPanelBatchDeleteRequest
	nil,                                 // 7: service.OpmPanel.EnsEntry
	nil,                                 // 8: service.OpmPanel.ZhsEntry
	(*timestamppb.Timestamp)(nil),       // 9: google.protobuf.Timestamp
	(*OpmPanelStudio)(nil),              // 10: service.OpmPanelStudio
}
var file_opm_panel_model_gen_proto_depIdxs = []int32{
	9,  // 0: service.OpmPanel.createdAt:type_name -> google.protobuf.Timestamp
	9,  // 1: service.OpmPanel.updatedAt:type_name -> google.protobuf.Timestamp
	10, // 2: service.OpmPanel.pageStudioList:type_name -> service.OpmPanelStudio
	9,  // 3: service.OpmPanel.buildTime:type_name -> google.protobuf.Timestamp
	7,  // 4: service.OpmPanel.ens:type_name -> service.OpmPanel.EnsEntry
	8,  // 5: service.OpmPanel.zhs:type_name -> service.OpmPanel.ZhsEntry
	9,  // 6: service.OpmPanelFilter.createdAt:type_name -> google.protobuf.Timestamp
	9,  // 7: service.OpmPanelFilter.updatedAt:type_name -> google.protobuf.Timestamp
	0,  // 8: service.OpmPanelListRequest.query:type_name -> service.OpmPanel
	0,  // 9: service.OpmPanelResponse.data:type_name -> service.OpmPanel
	0,  // 10: service.OpmPanelUpdateFieldsRequest.data:type_name -> service.OpmPanel
	5,  // 11: service.OpmPanelBatchDeleteRequest.keys:type_name -> service.OpmPanelPrimarykey
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_opm_panel_model_gen_proto_init() }
func file_opm_panel_model_gen_proto_init() {
	if File_opm_panel_model_gen_proto != nil {
		return
	}
	file_opm_panel_studio_model_gen_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_opm_panel_model_gen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_model_gen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_model_gen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_model_gen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_model_gen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelUpdateFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_model_gen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelPrimarykey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_model_gen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelBatchDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opm_panel_model_gen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opm_panel_model_gen_proto_goTypes,
		DependencyIndexes: file_opm_panel_model_gen_proto_depIdxs,
		MessageInfos:      file_opm_panel_model_gen_proto_msgTypes,
	}.Build()
	File_opm_panel_model_gen_proto = out.File
	file_opm_panel_model_gen_proto_rawDesc = nil
	file_opm_panel_model_gen_proto_goTypes = nil
	file_opm_panel_model_gen_proto_depIdxs = nil
}
