// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: opm_product_materials_service.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpmProductMaterialsService service

func NewOpmProductMaterialsServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpmProductMaterialsService.Create",
			Path:    []string{"/v1/opmProductMaterials/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialsService.Delete",
			Path:    []string{"/v1/opmProductMaterials/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialsService.DeleteById",
			Path:    []string{"/v1/opmProductMaterials/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialsService.DeleteByIds",
			Path:    []string{"/v1/opmProductMaterials/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialsService.Update",
			Path:    []string{"/v1/opmProductMaterials/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialsService.UpdateAll",
			Path:    []string{"/v1/opmProductMaterials/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialsService.UpdateFields",
			Path:    []string{"/v1/opmProductMaterials/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialsService.FindById",
			Path:    []string{"/v1/opmProductMaterials/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialsService.Find",
			Path:    []string{"/v1/opmProductMaterials/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialsService.Lists",
			Path:    []string{"/v1/opmProductMaterials/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialsService.Click",
			Path:    []string{"/v1/opmProductMaterials/click"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpmProductMaterialsService service

type OpmProductMaterialsService interface {
	//创建
	Create(ctx context.Context, in *OpmProductMaterials, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpmProductMaterials, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpmProductMaterials, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpmProductMaterialsBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpmProductMaterials, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpmProductMaterials, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpmProductMaterialsUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpmProductMaterialsFilter, opts ...client.CallOption) (*OpmProductMaterialsResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpmProductMaterialsFilter, opts ...client.CallOption) (*OpmProductMaterialsResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpmProductMaterialsListRequest, opts ...client.CallOption) (*OpmProductMaterialsResponse, error)
	//更新点击量
	Click(ctx context.Context, in *OpmProductMaterials, opts ...client.CallOption) (*Response, error)
}

type opmProductMaterialsService struct {
	c    client.Client
	name string
}

func NewOpmProductMaterialsService(name string, c client.Client) OpmProductMaterialsService {
	return &opmProductMaterialsService{
		c:    c,
		name: name,
	}
}

func (c *opmProductMaterialsService) Create(ctx context.Context, in *OpmProductMaterials, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialsService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialsService) Delete(ctx context.Context, in *OpmProductMaterials, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialsService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialsService) DeleteById(ctx context.Context, in *OpmProductMaterials, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialsService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialsService) DeleteByIds(ctx context.Context, in *OpmProductMaterialsBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialsService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialsService) Update(ctx context.Context, in *OpmProductMaterials, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialsService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialsService) UpdateAll(ctx context.Context, in *OpmProductMaterials, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialsService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialsService) UpdateFields(ctx context.Context, in *OpmProductMaterialsUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialsService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialsService) FindById(ctx context.Context, in *OpmProductMaterialsFilter, opts ...client.CallOption) (*OpmProductMaterialsResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialsService.FindById", in)
	out := new(OpmProductMaterialsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialsService) Find(ctx context.Context, in *OpmProductMaterialsFilter, opts ...client.CallOption) (*OpmProductMaterialsResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialsService.Find", in)
	out := new(OpmProductMaterialsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialsService) Lists(ctx context.Context, in *OpmProductMaterialsListRequest, opts ...client.CallOption) (*OpmProductMaterialsResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialsService.Lists", in)
	out := new(OpmProductMaterialsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialsService) Click(ctx context.Context, in *OpmProductMaterials, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialsService.Click", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpmProductMaterialsService service

type OpmProductMaterialsServiceHandler interface {
	//创建
	Create(context.Context, *OpmProductMaterials, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpmProductMaterials, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpmProductMaterials, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpmProductMaterialsBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpmProductMaterials, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpmProductMaterials, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpmProductMaterialsUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpmProductMaterialsFilter, *OpmProductMaterialsResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpmProductMaterialsFilter, *OpmProductMaterialsResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpmProductMaterialsListRequest, *OpmProductMaterialsResponse) error
	//更新点击量
	Click(context.Context, *OpmProductMaterials, *Response) error
}

func RegisterOpmProductMaterialsServiceHandler(s server.Server, hdlr OpmProductMaterialsServiceHandler, opts ...server.HandlerOption) error {
	type opmProductMaterialsService interface {
		Create(ctx context.Context, in *OpmProductMaterials, out *Response) error
		Delete(ctx context.Context, in *OpmProductMaterials, out *Response) error
		DeleteById(ctx context.Context, in *OpmProductMaterials, out *Response) error
		DeleteByIds(ctx context.Context, in *OpmProductMaterialsBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpmProductMaterials, out *Response) error
		UpdateAll(ctx context.Context, in *OpmProductMaterials, out *Response) error
		UpdateFields(ctx context.Context, in *OpmProductMaterialsUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpmProductMaterialsFilter, out *OpmProductMaterialsResponse) error
		Find(ctx context.Context, in *OpmProductMaterialsFilter, out *OpmProductMaterialsResponse) error
		Lists(ctx context.Context, in *OpmProductMaterialsListRequest, out *OpmProductMaterialsResponse) error
		Click(ctx context.Context, in *OpmProductMaterials, out *Response) error
	}
	type OpmProductMaterialsService struct {
		opmProductMaterialsService
	}
	h := &opmProductMaterialsServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialsService.Create",
		Path:    []string{"/v1/opmProductMaterials/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialsService.Delete",
		Path:    []string{"/v1/opmProductMaterials/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialsService.DeleteById",
		Path:    []string{"/v1/opmProductMaterials/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialsService.DeleteByIds",
		Path:    []string{"/v1/opmProductMaterials/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialsService.Update",
		Path:    []string{"/v1/opmProductMaterials/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialsService.UpdateAll",
		Path:    []string{"/v1/opmProductMaterials/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialsService.UpdateFields",
		Path:    []string{"/v1/opmProductMaterials/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialsService.FindById",
		Path:    []string{"/v1/opmProductMaterials/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialsService.Find",
		Path:    []string{"/v1/opmProductMaterials/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialsService.Lists",
		Path:    []string{"/v1/opmProductMaterials/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialsService.Click",
		Path:    []string{"/v1/opmProductMaterials/click"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpmProductMaterialsService{h}, opts...))
}

type opmProductMaterialsServiceHandler struct {
	OpmProductMaterialsServiceHandler
}

func (h *opmProductMaterialsServiceHandler) Create(ctx context.Context, in *OpmProductMaterials, out *Response) error {
	return h.OpmProductMaterialsServiceHandler.Create(ctx, in, out)
}

func (h *opmProductMaterialsServiceHandler) Delete(ctx context.Context, in *OpmProductMaterials, out *Response) error {
	return h.OpmProductMaterialsServiceHandler.Delete(ctx, in, out)
}

func (h *opmProductMaterialsServiceHandler) DeleteById(ctx context.Context, in *OpmProductMaterials, out *Response) error {
	return h.OpmProductMaterialsServiceHandler.DeleteById(ctx, in, out)
}

func (h *opmProductMaterialsServiceHandler) DeleteByIds(ctx context.Context, in *OpmProductMaterialsBatchDeleteRequest, out *Response) error {
	return h.OpmProductMaterialsServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *opmProductMaterialsServiceHandler) Update(ctx context.Context, in *OpmProductMaterials, out *Response) error {
	return h.OpmProductMaterialsServiceHandler.Update(ctx, in, out)
}

func (h *opmProductMaterialsServiceHandler) UpdateAll(ctx context.Context, in *OpmProductMaterials, out *Response) error {
	return h.OpmProductMaterialsServiceHandler.UpdateAll(ctx, in, out)
}

func (h *opmProductMaterialsServiceHandler) UpdateFields(ctx context.Context, in *OpmProductMaterialsUpdateFieldsRequest, out *Response) error {
	return h.OpmProductMaterialsServiceHandler.UpdateFields(ctx, in, out)
}

func (h *opmProductMaterialsServiceHandler) FindById(ctx context.Context, in *OpmProductMaterialsFilter, out *OpmProductMaterialsResponse) error {
	return h.OpmProductMaterialsServiceHandler.FindById(ctx, in, out)
}

func (h *opmProductMaterialsServiceHandler) Find(ctx context.Context, in *OpmProductMaterialsFilter, out *OpmProductMaterialsResponse) error {
	return h.OpmProductMaterialsServiceHandler.Find(ctx, in, out)
}

func (h *opmProductMaterialsServiceHandler) Lists(ctx context.Context, in *OpmProductMaterialsListRequest, out *OpmProductMaterialsResponse) error {
	return h.OpmProductMaterialsServiceHandler.Lists(ctx, in, out)
}

func (h *opmProductMaterialsServiceHandler) Click(ctx context.Context, in *OpmProductMaterials, out *Response) error {
	return h.OpmProductMaterialsServiceHandler.Click(ctx, in, out)
}
