// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: uc_user_third_service.gen.proto

package protosService

import (
	fmt "fmt"
	math "math"

	proto "google.golang.org/protobuf/proto"

	context "context"

	api "go-micro.dev/v4/api"

	client "go-micro.dev/v4/client"

	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UcUserThirdService service

func NewUcUserThirdServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "UcUserThirdService.Create",
			Path:    []string{"/v1/ucUserThird/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserThirdService.Delete",
			Path:    []string{"/v1/ucUserThird/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserThirdService.DeleteById",
			Path:    []string{"/v1/ucUserThird/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserThirdService.DeleteByIds",
			Path:    []string{"/v1/ucUserThird/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserThirdService.Update",
			Path:    []string{"/v1/ucUserThird/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserThirdService.UpdateAll",
			Path:    []string{"/v1/ucUserThird/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserThirdService.UpdateFields",
			Path:    []string{"/v1/ucUserThird/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserThirdService.FindById",
			Path:    []string{"/v1/ucUserThird/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserThirdService.Find",
			Path:    []string{"/v1/ucUserThird/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserThirdService.Lists",
			Path:    []string{"/v1/ucUserThird/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserThirdService.FindThirdUserInfo",
			Path:    []string{"/v1/ucUserThird/findThirdUserInfo"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for UcUserThirdService service

type UcUserThirdService interface {
	//创建
	Create(ctx context.Context, in *UcUserThird, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *UcUserThird, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *UcUserThird, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *UcUserThirdBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *UcUserThird, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *UcUserThird, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *UcUserThirdUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *UcUserThirdFilter, opts ...client.CallOption) (*UcUserThirdResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *UcUserThirdFilter, opts ...client.CallOption) (*UcUserThirdResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *UcUserThirdListRequest, opts ...client.CallOption) (*UcUserThirdResponse, error)
	//多条件查找，返回单条数据
	FindThirdUserInfo(ctx context.Context, in *UcUserThirdFilter, opts ...client.CallOption) (*UcUserThirdResponse, error)
}

type ucUserThirdService struct {
	c    client.Client
	name string
}

func NewUcUserThirdService(name string, c client.Client) UcUserThirdService {
	return &ucUserThirdService{
		c:    c,
		name: name,
	}
}

func (c *ucUserThirdService) Create(ctx context.Context, in *UcUserThird, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserThirdService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserThirdService) Delete(ctx context.Context, in *UcUserThird, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserThirdService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserThirdService) DeleteById(ctx context.Context, in *UcUserThird, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserThirdService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserThirdService) DeleteByIds(ctx context.Context, in *UcUserThirdBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserThirdService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserThirdService) Update(ctx context.Context, in *UcUserThird, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserThirdService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserThirdService) UpdateAll(ctx context.Context, in *UcUserThird, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserThirdService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserThirdService) UpdateFields(ctx context.Context, in *UcUserThirdUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserThirdService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserThirdService) FindById(ctx context.Context, in *UcUserThirdFilter, opts ...client.CallOption) (*UcUserThirdResponse, error) {
	req := c.c.NewRequest(c.name, "UcUserThirdService.FindById", in)
	out := new(UcUserThirdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserThirdService) Find(ctx context.Context, in *UcUserThirdFilter, opts ...client.CallOption) (*UcUserThirdResponse, error) {
	req := c.c.NewRequest(c.name, "UcUserThirdService.Find", in)
	out := new(UcUserThirdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserThirdService) Lists(ctx context.Context, in *UcUserThirdListRequest, opts ...client.CallOption) (*UcUserThirdResponse, error) {
	req := c.c.NewRequest(c.name, "UcUserThirdService.Lists", in)
	out := new(UcUserThirdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserThirdService) FindThirdUserInfo(ctx context.Context, in *UcUserThirdFilter, opts ...client.CallOption) (*UcUserThirdResponse, error) {
	req := c.c.NewRequest(c.name, "UcUserThirdService.FindThirdUserInfo", in)
	out := new(UcUserThirdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UcUserThirdService service

type UcUserThirdServiceHandler interface {
	//创建
	Create(context.Context, *UcUserThird, *Response) error
	//匹配多条件删除
	Delete(context.Context, *UcUserThird, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *UcUserThird, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *UcUserThirdBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *UcUserThird, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *UcUserThird, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *UcUserThirdUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *UcUserThirdFilter, *UcUserThirdResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *UcUserThirdFilter, *UcUserThirdResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *UcUserThirdListRequest, *UcUserThirdResponse) error
	//多条件查找，返回单条数据
	FindThirdUserInfo(context.Context, *UcUserThirdFilter, *UcUserThirdResponse) error
}

func RegisterUcUserThirdServiceHandler(s server.Server, hdlr UcUserThirdServiceHandler, opts ...server.HandlerOption) error {
	type ucUserThirdService interface {
		Create(ctx context.Context, in *UcUserThird, out *Response) error
		Delete(ctx context.Context, in *UcUserThird, out *Response) error
		DeleteById(ctx context.Context, in *UcUserThird, out *Response) error
		DeleteByIds(ctx context.Context, in *UcUserThirdBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *UcUserThird, out *Response) error
		UpdateAll(ctx context.Context, in *UcUserThird, out *Response) error
		UpdateFields(ctx context.Context, in *UcUserThirdUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *UcUserThirdFilter, out *UcUserThirdResponse) error
		Find(ctx context.Context, in *UcUserThirdFilter, out *UcUserThirdResponse) error
		Lists(ctx context.Context, in *UcUserThirdListRequest, out *UcUserThirdResponse) error
		FindThirdUserInfo(ctx context.Context, in *UcUserThirdFilter, out *UcUserThirdResponse) error
	}
	type UcUserThirdService struct {
		ucUserThirdService
	}
	h := &ucUserThirdServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserThirdService.Create",
		Path:    []string{"/v1/ucUserThird/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserThirdService.Delete",
		Path:    []string{"/v1/ucUserThird/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserThirdService.DeleteById",
		Path:    []string{"/v1/ucUserThird/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserThirdService.DeleteByIds",
		Path:    []string{"/v1/ucUserThird/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserThirdService.Update",
		Path:    []string{"/v1/ucUserThird/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserThirdService.UpdateAll",
		Path:    []string{"/v1/ucUserThird/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserThirdService.UpdateFields",
		Path:    []string{"/v1/ucUserThird/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserThirdService.FindById",
		Path:    []string{"/v1/ucUserThird/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserThirdService.Find",
		Path:    []string{"/v1/ucUserThird/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserThirdService.Lists",
		Path:    []string{"/v1/ucUserThird/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserThirdService.FindThirdUserInfo",
		Path:    []string{"/v1/ucUserThird/findThirdUserInfo"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&UcUserThirdService{h}, opts...))
}

type ucUserThirdServiceHandler struct {
	UcUserThirdServiceHandler
}

func (h *ucUserThirdServiceHandler) Create(ctx context.Context, in *UcUserThird, out *Response) error {
	return h.UcUserThirdServiceHandler.Create(ctx, in, out)
}

func (h *ucUserThirdServiceHandler) Delete(ctx context.Context, in *UcUserThird, out *Response) error {
	return h.UcUserThirdServiceHandler.Delete(ctx, in, out)
}

func (h *ucUserThirdServiceHandler) DeleteById(ctx context.Context, in *UcUserThird, out *Response) error {
	return h.UcUserThirdServiceHandler.DeleteById(ctx, in, out)
}

func (h *ucUserThirdServiceHandler) DeleteByIds(ctx context.Context, in *UcUserThirdBatchDeleteRequest, out *Response) error {
	return h.UcUserThirdServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *ucUserThirdServiceHandler) Update(ctx context.Context, in *UcUserThird, out *Response) error {
	return h.UcUserThirdServiceHandler.Update(ctx, in, out)
}

func (h *ucUserThirdServiceHandler) UpdateAll(ctx context.Context, in *UcUserThird, out *Response) error {
	return h.UcUserThirdServiceHandler.UpdateAll(ctx, in, out)
}

func (h *ucUserThirdServiceHandler) UpdateFields(ctx context.Context, in *UcUserThirdUpdateFieldsRequest, out *Response) error {
	return h.UcUserThirdServiceHandler.UpdateFields(ctx, in, out)
}

func (h *ucUserThirdServiceHandler) FindById(ctx context.Context, in *UcUserThirdFilter, out *UcUserThirdResponse) error {
	return h.UcUserThirdServiceHandler.FindById(ctx, in, out)
}

func (h *ucUserThirdServiceHandler) Find(ctx context.Context, in *UcUserThirdFilter, out *UcUserThirdResponse) error {
	return h.UcUserThirdServiceHandler.Find(ctx, in, out)
}

func (h *ucUserThirdServiceHandler) Lists(ctx context.Context, in *UcUserThirdListRequest, out *UcUserThirdResponse) error {
	return h.UcUserThirdServiceHandler.Lists(ctx, in, out)
}

func (h *ucUserThirdServiceHandler) FindThirdUserInfo(ctx context.Context, in *UcUserThirdFilter, out *UcUserThirdResponse) error {
	return h.UcUserThirdServiceHandler.FindThirdUserInfo(ctx, in, out)
}
