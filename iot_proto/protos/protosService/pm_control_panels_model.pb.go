// Code generated by sgen.exe,2022-05-05 20:17:27. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: pm_control_panels_model.proto

package protosService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//来源于数据表
type PmControlPanels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:面板模板 - 唯一主键 ;comment:面板模板 - 唯一主键 ;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"name" gorm:"default:面板名称;comment:面板名称;size:50;"
	Name string `protobuf:"bytes,101,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: json:"nameEn" gorm:"default:面板英文名称;comment:面板英文名称;size:50;"
	NameEn string `protobuf:"bytes,102,opt,name=nameEn,proto3" json:"nameEn,omitempty"`
	// @inject_tag: json:"lang" gorm:"default:面板语言,预留;comment:面板语言,预留;size:36;"
	Lang string `protobuf:"bytes,103,opt,name=lang,proto3" json:"lang,omitempty"`
	// @inject_tag: json:"desc" gorm:"default:面板描述;comment:面板描述;size:255;"
	Desc string `protobuf:"bytes,104,opt,name=desc,proto3" json:"desc,omitempty"`
	// @inject_tag: json:"url" gorm:"default:面板地址;comment:面板地址;size:255;"
	Url string `protobuf:"bytes,105,opt,name=url,proto3" json:"url,omitempty"`
	// @inject_tag: json:"urlName" gorm:"default:面板文件名称;comment:面板文件名称;size:64;"
	UrlName string `protobuf:"bytes,106,opt,name=urlName,proto3" json:"urlName,omitempty"`
	// @inject_tag: json:"panelSize" gorm:"default:面板大小;comment:面板大小;size:10;"
	PanelSize int32 `protobuf:"varint,107,opt,name=panelSize,proto3" json:"panelSize,omitempty"`
	// @inject_tag: json:"previewName" gorm:"default:预览图名称;comment:预览图名称;size:64;"
	PreviewName string `protobuf:"bytes,108,opt,name=previewName,proto3" json:"previewName,omitempty"`
	// @inject_tag: json:"previewUrl" gorm:"default:面板地址;comment:面板地址;size:255;"
	PreviewUrl string `protobuf:"bytes,109,opt,name=previewUrl,proto3" json:"previewUrl,omitempty"`
	// @inject_tag: json:"previewSize" gorm:"default:预览图大小;comment:预览图大小;size:10;"
	PreviewSize int32 `protobuf:"varint,110,opt,name=previewSize,proto3" json:"previewSize,omitempty"`
	// @inject_tag: json:"productTypeId" gorm:"default:产品分类编号;comment:产品分类编号;size:19;"
	ProductTypeId int64 `protobuf:"varint,111,opt,name=productTypeId,proto3" json:"productTypeId,omitempty"`
	// @inject_tag: json:"productId" gorm:"default:产品品类编号;comment:产品品类编号;size:19;"
	ProductId int64 `protobuf:"varint,112,opt,name=productId,proto3" json:"productId,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态（1=启用 2=禁用）;comment:状态（1=启用 2=禁用）;size:10;"
	Status int32 `protobuf:"varint,113,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:20;"
	CreatedBy int64 `protobuf:"varint,114,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:20;"
	UpdatedBy int64 `protobuf:"varint,115,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,116,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,117,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除时间;comment:删除时间;"
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,118,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	// @inject_tag: json:"panelKey" gorm:"default:面板Md5;comment:面板Md5;size:50;"
	PanelKey     string `protobuf:"bytes,119,opt,name=panelKey,proto3" json:"panelKey,omitempty"`
	LangFileName string `protobuf:"bytes,120,opt,name=langFileName,proto3" json:"langFileName,omitempty"`  //语言文件名称
	IsUpgrade    bool   `protobuf:"varint,121,opt,name=isUpgrade,proto3" json:"isUpgrade,omitempty"`       //是否需要更新
	AppPanelType int32  `protobuf:"varint,122,opt,name=appPanelType,proto3" json:"appPanelType,omitempty"` //APP面板类型
	Code         string `protobuf:"bytes,123,opt,name=code,proto3" json:"code,omitempty"`                  //面板编码
}

func (x *PmControlPanels) Reset() {
	*x = PmControlPanels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pm_control_panels_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmControlPanels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmControlPanels) ProtoMessage() {}

func (x *PmControlPanels) ProtoReflect() protoreflect.Message {
	mi := &file_pm_control_panels_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmControlPanels.ProtoReflect.Descriptor instead.
func (*PmControlPanels) Descriptor() ([]byte, []int) {
	return file_pm_control_panels_model_proto_rawDescGZIP(), []int{0}
}

func (x *PmControlPanels) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PmControlPanels) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PmControlPanels) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *PmControlPanels) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *PmControlPanels) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PmControlPanels) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PmControlPanels) GetUrlName() string {
	if x != nil {
		return x.UrlName
	}
	return ""
}

func (x *PmControlPanels) GetPanelSize() int32 {
	if x != nil {
		return x.PanelSize
	}
	return 0
}

func (x *PmControlPanels) GetPreviewName() string {
	if x != nil {
		return x.PreviewName
	}
	return ""
}

func (x *PmControlPanels) GetPreviewUrl() string {
	if x != nil {
		return x.PreviewUrl
	}
	return ""
}

func (x *PmControlPanels) GetPreviewSize() int32 {
	if x != nil {
		return x.PreviewSize
	}
	return 0
}

func (x *PmControlPanels) GetProductTypeId() int64 {
	if x != nil {
		return x.ProductTypeId
	}
	return 0
}

func (x *PmControlPanels) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *PmControlPanels) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PmControlPanels) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *PmControlPanels) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *PmControlPanels) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PmControlPanels) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PmControlPanels) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *PmControlPanels) GetPanelKey() string {
	if x != nil {
		return x.PanelKey
	}
	return ""
}

func (x *PmControlPanels) GetLangFileName() string {
	if x != nil {
		return x.LangFileName
	}
	return ""
}

func (x *PmControlPanels) GetIsUpgrade() bool {
	if x != nil {
		return x.IsUpgrade
	}
	return false
}

func (x *PmControlPanels) GetAppPanelType() int32 {
	if x != nil {
		return x.AppPanelType
	}
	return 0
}

func (x *PmControlPanels) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

//控制面板详情，控制面板列表
type PmControlPanelsDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64                  `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	Name                string                 `protobuf:"bytes,101,opt,name=name,proto3" json:"name,omitempty"`
	NameEn              string                 `protobuf:"bytes,102,opt,name=nameEn,proto3" json:"nameEn,omitempty"`
	Lang                string                 `protobuf:"bytes,103,opt,name=lang,proto3" json:"lang,omitempty"`
	Desc                string                 `protobuf:"bytes,104,opt,name=desc,proto3" json:"desc,omitempty"`
	Url                 string                 `protobuf:"bytes,105,opt,name=url,proto3" json:"url,omitempty"`
	UrlName             string                 `protobuf:"bytes,106,opt,name=urlName,proto3" json:"urlName,omitempty"`
	PanelSize           int32                  `protobuf:"varint,107,opt,name=panelSize,proto3" json:"panelSize,omitempty"`
	PreviewName         string                 `protobuf:"bytes,108,opt,name=previewName,proto3" json:"previewName,omitempty"`
	PreviewUrl          string                 `protobuf:"bytes,109,opt,name=previewUrl,proto3" json:"previewUrl,omitempty"`
	PreviewSize         int32                  `protobuf:"varint,110,opt,name=previewSize,proto3" json:"previewSize,omitempty"`
	ProductTypeId       int64                  `protobuf:"varint,111,opt,name=productTypeId,proto3" json:"productTypeId,omitempty"`
	ProductTypeName     string                 `protobuf:"bytes,112,opt,name=productTypeName,proto3" json:"productTypeName,omitempty"`
	ProductTypeFullName string                 `protobuf:"bytes,113,opt,name=productTypeFullName,proto3" json:"productTypeFullName,omitempty"`
	ProductId           int64                  `protobuf:"varint,114,opt,name=productId,proto3" json:"productId,omitempty"`
	ProductName         string                 `protobuf:"bytes,115,opt,name=productName,proto3" json:"productName,omitempty"`
	ProductStatus       string                 `protobuf:"bytes,116,opt,name=productStatus,proto3" json:"productStatus,omitempty"`
	Status              int32                  `protobuf:"varint,117,opt,name=status,proto3" json:"status,omitempty"`
	CreatedBy           int64                  `protobuf:"varint,118,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	UpdatedBy           int64                  `protobuf:"varint,119,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,120,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,121,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	DeletedAt           *timestamppb.Timestamp `protobuf:"bytes,122,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	LangFileName        string                 `protobuf:"bytes,123,opt,name=langFileName,proto3" json:"langFileName,omitempty"` //语言文件名称
	PanelKey            string                 `protobuf:"bytes,124,opt,name=panelKey,proto3" json:"panelKey,omitempty"`         //面板Key
	Code                string                 `protobuf:"bytes,125,opt,name=code,proto3" json:"code,omitempty"`                 //面板编码
}

func (x *PmControlPanelsDetails) Reset() {
	*x = PmControlPanelsDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pm_control_panels_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmControlPanelsDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmControlPanelsDetails) ProtoMessage() {}

func (x *PmControlPanelsDetails) ProtoReflect() protoreflect.Message {
	mi := &file_pm_control_panels_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmControlPanelsDetails.ProtoReflect.Descriptor instead.
func (*PmControlPanelsDetails) Descriptor() ([]byte, []int) {
	return file_pm_control_panels_model_proto_rawDescGZIP(), []int{1}
}

func (x *PmControlPanelsDetails) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PmControlPanelsDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PmControlPanelsDetails) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *PmControlPanelsDetails) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *PmControlPanelsDetails) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PmControlPanelsDetails) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PmControlPanelsDetails) GetUrlName() string {
	if x != nil {
		return x.UrlName
	}
	return ""
}

func (x *PmControlPanelsDetails) GetPanelSize() int32 {
	if x != nil {
		return x.PanelSize
	}
	return 0
}

func (x *PmControlPanelsDetails) GetPreviewName() string {
	if x != nil {
		return x.PreviewName
	}
	return ""
}

func (x *PmControlPanelsDetails) GetPreviewUrl() string {
	if x != nil {
		return x.PreviewUrl
	}
	return ""
}

func (x *PmControlPanelsDetails) GetPreviewSize() int32 {
	if x != nil {
		return x.PreviewSize
	}
	return 0
}

func (x *PmControlPanelsDetails) GetProductTypeId() int64 {
	if x != nil {
		return x.ProductTypeId
	}
	return 0
}

func (x *PmControlPanelsDetails) GetProductTypeName() string {
	if x != nil {
		return x.ProductTypeName
	}
	return ""
}

func (x *PmControlPanelsDetails) GetProductTypeFullName() string {
	if x != nil {
		return x.ProductTypeFullName
	}
	return ""
}

func (x *PmControlPanelsDetails) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *PmControlPanelsDetails) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *PmControlPanelsDetails) GetProductStatus() string {
	if x != nil {
		return x.ProductStatus
	}
	return ""
}

func (x *PmControlPanelsDetails) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PmControlPanelsDetails) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *PmControlPanelsDetails) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *PmControlPanelsDetails) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PmControlPanelsDetails) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PmControlPanelsDetails) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *PmControlPanelsDetails) GetLangFileName() string {
	if x != nil {
		return x.LangFileName
	}
	return ""
}

func (x *PmControlPanelsDetails) GetPanelKey() string {
	if x != nil {
		return x.PanelKey
	}
	return ""
}

func (x *PmControlPanelsDetails) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type PmControlPanelsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:面板模板 - 唯一主键 ;comment:面板模板 - 唯一主键 ;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"name" gorm:"default:面板名称;comment:面板名称;size:50;"
	Name string `protobuf:"bytes,101,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: json:"nameEn" gorm:"default:面板英文名称;comment:面板英文名称;size:50;"
	NameEn string `protobuf:"bytes,102,opt,name=nameEn,proto3" json:"nameEn,omitempty"`
	// @inject_tag: json:"lang" gorm:"default:面板语言,预留;comment:面板语言,预留;size:36;"
	Lang string `protobuf:"bytes,103,opt,name=lang,proto3" json:"lang,omitempty"`
	// @inject_tag: json:"desc" gorm:"default:面板描述;comment:面板描述;size:255;"
	Desc string `protobuf:"bytes,104,opt,name=desc,proto3" json:"desc,omitempty"`
	// @inject_tag: json:"url" gorm:"default:面板地址;comment:面板地址;size:255;"
	Url string `protobuf:"bytes,105,opt,name=url,proto3" json:"url,omitempty"`
	// @inject_tag: json:"urlName" gorm:"default:面板文件名称;comment:面板文件名称;size:64;"
	UrlName string `protobuf:"bytes,106,opt,name=urlName,proto3" json:"urlName,omitempty"`
	// @inject_tag: json:"panelSize" gorm:"default:面板大小;comment:面板大小;size:10;"
	PanelSize int32 `protobuf:"varint,107,opt,name=panelSize,proto3" json:"panelSize,omitempty"`
	// @inject_tag: json:"previewName" gorm:"default:预览图名称;comment:预览图名称;size:64;"
	PreviewName string `protobuf:"bytes,108,opt,name=previewName,proto3" json:"previewName,omitempty"`
	// @inject_tag: json:"previewUrl" gorm:"default:面板地址;comment:面板地址;size:255;"
	PreviewUrl string `protobuf:"bytes,109,opt,name=previewUrl,proto3" json:"previewUrl,omitempty"`
	// @inject_tag: json:"previewSize" gorm:"default:预览图大小;comment:预览图大小;size:10;"
	PreviewSize int32 `protobuf:"varint,110,opt,name=previewSize,proto3" json:"previewSize,omitempty"`
	// @inject_tag: json:"productTypeId" gorm:"default:产品分类编号;comment:产品分类编号;size:19;"
	ProductTypeId int64 `protobuf:"varint,111,opt,name=productTypeId,proto3" json:"productTypeId,omitempty"`
	// @inject_tag: json:"productId" gorm:"default:产品品类编号;comment:产品品类编号;size:19;"
	ProductId int64 `protobuf:"varint,112,opt,name=productId,proto3" json:"productId,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态（1=启用 2=禁用）;comment:状态（1=启用 2=禁用）;size:10;"
	Status int32 `protobuf:"varint,113,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:20;"
	CreatedBy int64 `protobuf:"varint,114,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:20;"
	UpdatedBy int64 `protobuf:"varint,115,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,116,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,117,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除时间;comment:删除时间;"
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,118,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	// @inject_tag: json:"panelKey" gorm:"default:面板Md5;comment:面板Md5;size:50;"
	PanelKey string `protobuf:"bytes,119,opt,name=panelKey,proto3" json:"panelKey,omitempty"`
	Code     string `protobuf:"bytes,120,opt,name=code,proto3" json:"code,omitempty"` //面板编码
}

func (x *PmControlPanelsFilter) Reset() {
	*x = PmControlPanelsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pm_control_panels_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmControlPanelsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmControlPanelsFilter) ProtoMessage() {}

func (x *PmControlPanelsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pm_control_panels_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmControlPanelsFilter.ProtoReflect.Descriptor instead.
func (*PmControlPanelsFilter) Descriptor() ([]byte, []int) {
	return file_pm_control_panels_model_proto_rawDescGZIP(), []int{2}
}

func (x *PmControlPanelsFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PmControlPanelsFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PmControlPanelsFilter) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *PmControlPanelsFilter) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *PmControlPanelsFilter) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PmControlPanelsFilter) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *PmControlPanelsFilter) GetUrlName() string {
	if x != nil {
		return x.UrlName
	}
	return ""
}

func (x *PmControlPanelsFilter) GetPanelSize() int32 {
	if x != nil {
		return x.PanelSize
	}
	return 0
}

func (x *PmControlPanelsFilter) GetPreviewName() string {
	if x != nil {
		return x.PreviewName
	}
	return ""
}

func (x *PmControlPanelsFilter) GetPreviewUrl() string {
	if x != nil {
		return x.PreviewUrl
	}
	return ""
}

func (x *PmControlPanelsFilter) GetPreviewSize() int32 {
	if x != nil {
		return x.PreviewSize
	}
	return 0
}

func (x *PmControlPanelsFilter) GetProductTypeId() int64 {
	if x != nil {
		return x.ProductTypeId
	}
	return 0
}

func (x *PmControlPanelsFilter) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *PmControlPanelsFilter) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PmControlPanelsFilter) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *PmControlPanelsFilter) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *PmControlPanelsFilter) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PmControlPanelsFilter) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PmControlPanelsFilter) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *PmControlPanelsFilter) GetPanelKey() string {
	if x != nil {
		return x.PanelKey
	}
	return ""
}

func (x *PmControlPanelsFilter) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type PmControlPanelsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *PmControlPanelsListFilter `protobuf:"bytes,101,opt,name=query,proto3" json:"query,omitempty"`
	Page      int64                      `protobuf:"varint,102,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64                      `protobuf:"varint,103,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderKey  string                     `protobuf:"bytes,104,opt,name=orderKey,proto3" json:"orderKey,omitempty"`
	OrderDesc string                     `protobuf:"bytes,105,opt,name=orderDesc,proto3" json:"orderDesc,omitempty"`
	SearchKey string                     `protobuf:"bytes,106,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
}

func (x *PmControlPanelsListRequest) Reset() {
	*x = PmControlPanelsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pm_control_panels_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmControlPanelsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmControlPanelsListRequest) ProtoMessage() {}

func (x *PmControlPanelsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pm_control_panels_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmControlPanelsListRequest.ProtoReflect.Descriptor instead.
func (*PmControlPanelsListRequest) Descriptor() ([]byte, []int) {
	return file_pm_control_panels_model_proto_rawDescGZIP(), []int{3}
}

func (x *PmControlPanelsListRequest) GetQuery() *PmControlPanelsListFilter {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *PmControlPanelsListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PmControlPanelsListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PmControlPanelsListRequest) GetOrderKey() string {
	if x != nil {
		return x.OrderKey
	}
	return ""
}

func (x *PmControlPanelsListRequest) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *PmControlPanelsListRequest) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

type PmControlPanelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                     `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string                    `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64                     `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*PmControlPanelsDetails `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PmControlPanelsResponse) Reset() {
	*x = PmControlPanelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pm_control_panels_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmControlPanelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmControlPanelsResponse) ProtoMessage() {}

func (x *PmControlPanelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pm_control_panels_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmControlPanelsResponse.ProtoReflect.Descriptor instead.
func (*PmControlPanelsResponse) Descriptor() ([]byte, []int) {
	return file_pm_control_panels_model_proto_rawDescGZIP(), []int{4}
}

func (x *PmControlPanelsResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PmControlPanelsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PmControlPanelsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PmControlPanelsResponse) GetData() []*PmControlPanelsDetails {
	if x != nil {
		return x.Data
	}
	return nil
}

type PmControlPanelsUpdateFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string         `protobuf:"bytes,101,rep,name=fields,proto3" json:"fields,omitempty"`
	Data   *PmControlPanels `protobuf:"bytes,102,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PmControlPanelsUpdateFieldsRequest) Reset() {
	*x = PmControlPanelsUpdateFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pm_control_panels_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmControlPanelsUpdateFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmControlPanelsUpdateFieldsRequest) ProtoMessage() {}

func (x *PmControlPanelsUpdateFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pm_control_panels_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmControlPanelsUpdateFieldsRequest.ProtoReflect.Descriptor instead.
func (*PmControlPanelsUpdateFieldsRequest) Descriptor() ([]byte, []int) {
	return file_pm_control_panels_model_proto_rawDescGZIP(), []int{5}
}

func (x *PmControlPanelsUpdateFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PmControlPanelsUpdateFieldsRequest) GetData() *PmControlPanels {
	if x != nil {
		return x.Data
	}
	return nil
}

// 表模型主键，只能是整数或字符串，若生成错误，请检查数据库表主键是否正确。支持组合主键
type PmControlPanelsPrimarykey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PmControlPanelsPrimarykey) Reset() {
	*x = PmControlPanelsPrimarykey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pm_control_panels_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmControlPanelsPrimarykey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmControlPanelsPrimarykey) ProtoMessage() {}

func (x *PmControlPanelsPrimarykey) ProtoReflect() protoreflect.Message {
	mi := &file_pm_control_panels_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmControlPanelsPrimarykey.ProtoReflect.Descriptor instead.
func (*PmControlPanelsPrimarykey) Descriptor() ([]byte, []int) {
	return file_pm_control_panels_model_proto_rawDescGZIP(), []int{6}
}

func (x *PmControlPanelsPrimarykey) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PmControlPanelsBatchDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*PmControlPanelsPrimarykey `protobuf:"bytes,101,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *PmControlPanelsBatchDeleteRequest) Reset() {
	*x = PmControlPanelsBatchDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pm_control_panels_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmControlPanelsBatchDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmControlPanelsBatchDeleteRequest) ProtoMessage() {}

func (x *PmControlPanelsBatchDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pm_control_panels_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmControlPanelsBatchDeleteRequest.ProtoReflect.Descriptor instead.
func (*PmControlPanelsBatchDeleteRequest) Descriptor() ([]byte, []int) {
	return file_pm_control_panels_model_proto_rawDescGZIP(), []int{7}
}

func (x *PmControlPanelsBatchDeleteRequest) GetKeys() []*PmControlPanelsPrimarykey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type PmControlPanelsListFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,101,opt,name=name,proto3" json:"name,omitempty"`
	NameEn        string `protobuf:"bytes,102,opt,name=nameEn,proto3" json:"nameEn,omitempty"`
	Lang          string `protobuf:"bytes,103,opt,name=lang,proto3" json:"lang,omitempty"`
	ProductTypeId int64  `protobuf:"varint,104,opt,name=productTypeId,proto3" json:"productTypeId,omitempty"`
	ProductId     int64  `protobuf:"varint,105,opt,name=productId,proto3" json:"productId,omitempty"`
	Status        int32  `protobuf:"varint,106,opt,name=status,proto3" json:"status,omitempty"`
	Associate     int32  `protobuf:"varint,107,opt,name=associate,proto3" json:"associate,omitempty"`
}

func (x *PmControlPanelsListFilter) Reset() {
	*x = PmControlPanelsListFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pm_control_panels_model_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmControlPanelsListFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmControlPanelsListFilter) ProtoMessage() {}

func (x *PmControlPanelsListFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pm_control_panels_model_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmControlPanelsListFilter.ProtoReflect.Descriptor instead.
func (*PmControlPanelsListFilter) Descriptor() ([]byte, []int) {
	return file_pm_control_panels_model_proto_rawDescGZIP(), []int{8}
}

func (x *PmControlPanelsListFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PmControlPanelsListFilter) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *PmControlPanelsListFilter) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *PmControlPanelsListFilter) GetProductTypeId() int64 {
	if x != nil {
		return x.ProductTypeId
	}
	return 0
}

func (x *PmControlPanelsListFilter) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *PmControlPanelsListFilter) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PmControlPanelsListFilter) GetAssociate() int32 {
	if x != nil {
		return x.Associate
	}
	return 0
}

var File_pm_control_panels_model_proto protoreflect.FileDescriptor

var file_pm_control_panels_model_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x61, 0x6e,
	0x65, 0x6c, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x05, 0x0a, 0x0f, 0x50, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x6a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x18, 0x6d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x18, 0x6f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x71, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x72, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x73, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x75,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x4b, 0x65,
	0x79, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x4b, 0x65,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x46, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x79, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x7b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xe8, 0x06, 0x0a, 0x16,
	0x50, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65,
	0x45, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x55, 0x72, 0x6c, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x72, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x74, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x75, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x76, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x77, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x79, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x4b,
	0x65, 0x79, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x4b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x9f, 0x05, 0x0a, 0x15, 0x50, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x72, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x6b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x6c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x71, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x72, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x73, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x76, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x4b, 0x65, 0x79, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x1a, 0x50, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x92, 0x01, 0x0a, 0x17, 0x50, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x68, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6a,
	0x0a, 0x22, 0x50, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x65,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x19, 0x50, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x50, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x21, 0x50, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x19, 0x50, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x18, 0x68, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x69, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x42, 0x11, 0x5a, 0x0f,
	0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pm_control_panels_model_proto_rawDescOnce sync.Once
	file_pm_control_panels_model_proto_rawDescData = file_pm_control_panels_model_proto_rawDesc
)

func file_pm_control_panels_model_proto_rawDescGZIP() []byte {
	file_pm_control_panels_model_proto_rawDescOnce.Do(func() {
		file_pm_control_panels_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_pm_control_panels_model_proto_rawDescData)
	})
	return file_pm_control_panels_model_proto_rawDescData
}

var file_pm_control_panels_model_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_pm_control_panels_model_proto_goTypes = []interface{}{
	(*PmControlPanels)(nil),                    // 0: service.PmControlPanels
	(*PmControlPanelsDetails)(nil),             // 1: service.PmControlPanelsDetails
	(*PmControlPanelsFilter)(nil),              // 2: service.PmControlPanelsFilter
	(*PmControlPanelsListRequest)(nil),         // 3: service.PmControlPanelsListRequest
	(*PmControlPanelsResponse)(nil),            // 4: service.PmControlPanelsResponse
	(*PmControlPanelsUpdateFieldsRequest)(nil), // 5: service.PmControlPanelsUpdateFieldsRequest
	(*PmControlPanelsPrimarykey)(nil),          // 6: service.PmControlPanelsPrimarykey
	(*PmControlPanelsBatchDeleteRequest)(nil),  // 7: service.PmControlPanelsBatchDeleteRequest
	(*PmControlPanelsListFilter)(nil),          // 8: service.PmControlPanelsListFilter
	(*timestamppb.Timestamp)(nil),              // 9: google.protobuf.Timestamp
}
var file_pm_control_panels_model_proto_depIdxs = []int32{
	9,  // 0: service.PmControlPanels.createdAt:type_name -> google.protobuf.Timestamp
	9,  // 1: service.PmControlPanels.updatedAt:type_name -> google.protobuf.Timestamp
	9,  // 2: service.PmControlPanels.deletedAt:type_name -> google.protobuf.Timestamp
	9,  // 3: service.PmControlPanelsDetails.createdAt:type_name -> google.protobuf.Timestamp
	9,  // 4: service.PmControlPanelsDetails.updatedAt:type_name -> google.protobuf.Timestamp
	9,  // 5: service.PmControlPanelsDetails.deletedAt:type_name -> google.protobuf.Timestamp
	9,  // 6: service.PmControlPanelsFilter.createdAt:type_name -> google.protobuf.Timestamp
	9,  // 7: service.PmControlPanelsFilter.updatedAt:type_name -> google.protobuf.Timestamp
	9,  // 8: service.PmControlPanelsFilter.deletedAt:type_name -> google.protobuf.Timestamp
	8,  // 9: service.PmControlPanelsListRequest.query:type_name -> service.PmControlPanelsListFilter
	1,  // 10: service.PmControlPanelsResponse.data:type_name -> service.PmControlPanelsDetails
	0,  // 11: service.PmControlPanelsUpdateFieldsRequest.data:type_name -> service.PmControlPanels
	6,  // 12: service.PmControlPanelsBatchDeleteRequest.keys:type_name -> service.PmControlPanelsPrimarykey
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_pm_control_panels_model_proto_init() }
func file_pm_control_panels_model_proto_init() {
	if File_pm_control_panels_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pm_control_panels_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmControlPanels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pm_control_panels_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmControlPanelsDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pm_control_panels_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmControlPanelsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pm_control_panels_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmControlPanelsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pm_control_panels_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmControlPanelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pm_control_panels_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmControlPanelsUpdateFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pm_control_panels_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmControlPanelsPrimarykey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pm_control_panels_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmControlPanelsBatchDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pm_control_panels_model_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmControlPanelsListFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pm_control_panels_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pm_control_panels_model_proto_goTypes,
		DependencyIndexes: file_pm_control_panels_model_proto_depIdxs,
		MessageInfos:      file_pm_control_panels_model_proto_msgTypes,
	}.Build()
	File_pm_control_panels_model_proto = out.File
	file_pm_control_panels_model_proto_rawDesc = nil
	file_pm_control_panels_model_proto_goTypes = nil
	file_pm_control_panels_model_proto_depIdxs = nil
}
