// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: oem_app_service.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OemAppService service

func NewOemAppServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OemAppService.Create",
			Path:    []string{"/v1/oemApp/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppService.Delete",
			Path:    []string{"/v1/oemApp/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppService.DeleteById",
			Path:    []string{"/v1/oemApp/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppService.DeleteByIds",
			Path:    []string{"/v1/oemApp/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppService.Update",
			Path:    []string{"/v1/oemApp/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppService.UpdateAll",
			Path:    []string{"/v1/oemApp/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppService.UpdateFields",
			Path:    []string{"/v1/oemApp/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppService.FindById",
			Path:    []string{"/v1/oemApp/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppService.Find",
			Path:    []string{"/v1/oemApp/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppService.Lists",
			Path:    []string{"/v1/oemApp/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppService.Build",
			Path:    []string{"/v1/oemApp/build"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppService.UpdateVersion",
			Path:    []string{"/v1/oemApp/updateVersion"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppService.SaveIcon",
			Path:    []string{"/v1/oemApp/saveIcon"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppService.ListsByAppKeys",
			Path:    []string{"/v1/oemApp/listsByAppKeys"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppService.CancelBuild",
			Path:    []string{"/v1/oemApp/cancelBuild"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OemAppService service

type OemAppService interface {
	//创建
	Create(ctx context.Context, in *OemApp, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OemApp, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OemApp, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OemAppBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OemApp, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OemApp, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OemAppUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OemAppFilter, opts ...client.CallOption) (*OemAppResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OemAppFilter, opts ...client.CallOption) (*OemAppResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OemAppListRequest, opts ...client.CallOption) (*OemAppResponse, error)
	//构建app
	Build(ctx context.Context, in *OemAppBuildReq, opts ...client.CallOption) (*OemAppBuildRes, error)
	//版本升级
	UpdateVersion(ctx context.Context, in *OemAppUpdateVersionReq, opts ...client.CallOption) (*OemAppUpdateVersionRes, error)
	//版本升级
	SaveIcon(ctx context.Context, in *OemAppSaveIconReq, opts ...client.CallOption) (*OemAppSaveIconRes, error)
	//根据appKeys查找，返回多条数据
	ListsByAppKeys(ctx context.Context, in *ListsByAppKeysRequest, opts ...client.CallOption) (*OemAppResponse, error)
	//构建app
	CancelBuild(ctx context.Context, in *OemAppBuildReq, opts ...client.CallOption) (*OemAppBuildRes, error)
}

type oemAppService struct {
	c    client.Client
	name string
}

func NewOemAppService(name string, c client.Client) OemAppService {
	return &oemAppService{
		c:    c,
		name: name,
	}
}

func (c *oemAppService) Create(ctx context.Context, in *OemApp, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppService) Delete(ctx context.Context, in *OemApp, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppService) DeleteById(ctx context.Context, in *OemApp, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppService) DeleteByIds(ctx context.Context, in *OemAppBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppService) Update(ctx context.Context, in *OemApp, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppService) UpdateAll(ctx context.Context, in *OemApp, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppService) UpdateFields(ctx context.Context, in *OemAppUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppService) FindById(ctx context.Context, in *OemAppFilter, opts ...client.CallOption) (*OemAppResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppService.FindById", in)
	out := new(OemAppResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppService) Find(ctx context.Context, in *OemAppFilter, opts ...client.CallOption) (*OemAppResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppService.Find", in)
	out := new(OemAppResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppService) Lists(ctx context.Context, in *OemAppListRequest, opts ...client.CallOption) (*OemAppResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppService.Lists", in)
	out := new(OemAppResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppService) Build(ctx context.Context, in *OemAppBuildReq, opts ...client.CallOption) (*OemAppBuildRes, error) {
	req := c.c.NewRequest(c.name, "OemAppService.Build", in)
	out := new(OemAppBuildRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppService) UpdateVersion(ctx context.Context, in *OemAppUpdateVersionReq, opts ...client.CallOption) (*OemAppUpdateVersionRes, error) {
	req := c.c.NewRequest(c.name, "OemAppService.UpdateVersion", in)
	out := new(OemAppUpdateVersionRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppService) SaveIcon(ctx context.Context, in *OemAppSaveIconReq, opts ...client.CallOption) (*OemAppSaveIconRes, error) {
	req := c.c.NewRequest(c.name, "OemAppService.SaveIcon", in)
	out := new(OemAppSaveIconRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppService) ListsByAppKeys(ctx context.Context, in *ListsByAppKeysRequest, opts ...client.CallOption) (*OemAppResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppService.ListsByAppKeys", in)
	out := new(OemAppResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppService) CancelBuild(ctx context.Context, in *OemAppBuildReq, opts ...client.CallOption) (*OemAppBuildRes, error) {
	req := c.c.NewRequest(c.name, "OemAppService.CancelBuild", in)
	out := new(OemAppBuildRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OemAppService service

type OemAppServiceHandler interface {
	//创建
	Create(context.Context, *OemApp, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OemApp, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OemApp, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OemAppBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OemApp, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OemApp, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OemAppUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OemAppFilter, *OemAppResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OemAppFilter, *OemAppResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OemAppListRequest, *OemAppResponse) error
	//构建app
	Build(context.Context, *OemAppBuildReq, *OemAppBuildRes) error
	//版本升级
	UpdateVersion(context.Context, *OemAppUpdateVersionReq, *OemAppUpdateVersionRes) error
	//版本升级
	SaveIcon(context.Context, *OemAppSaveIconReq, *OemAppSaveIconRes) error
	//根据appKeys查找，返回多条数据
	ListsByAppKeys(context.Context, *ListsByAppKeysRequest, *OemAppResponse) error
	//构建app
	CancelBuild(context.Context, *OemAppBuildReq, *OemAppBuildRes) error
}

func RegisterOemAppServiceHandler(s server.Server, hdlr OemAppServiceHandler, opts ...server.HandlerOption) error {
	type oemAppService interface {
		Create(ctx context.Context, in *OemApp, out *Response) error
		Delete(ctx context.Context, in *OemApp, out *Response) error
		DeleteById(ctx context.Context, in *OemApp, out *Response) error
		DeleteByIds(ctx context.Context, in *OemAppBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OemApp, out *Response) error
		UpdateAll(ctx context.Context, in *OemApp, out *Response) error
		UpdateFields(ctx context.Context, in *OemAppUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OemAppFilter, out *OemAppResponse) error
		Find(ctx context.Context, in *OemAppFilter, out *OemAppResponse) error
		Lists(ctx context.Context, in *OemAppListRequest, out *OemAppResponse) error
		Build(ctx context.Context, in *OemAppBuildReq, out *OemAppBuildRes) error
		UpdateVersion(ctx context.Context, in *OemAppUpdateVersionReq, out *OemAppUpdateVersionRes) error
		SaveIcon(ctx context.Context, in *OemAppSaveIconReq, out *OemAppSaveIconRes) error
		ListsByAppKeys(ctx context.Context, in *ListsByAppKeysRequest, out *OemAppResponse) error
		CancelBuild(ctx context.Context, in *OemAppBuildReq, out *OemAppBuildRes) error
	}
	type OemAppService struct {
		oemAppService
	}
	h := &oemAppServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppService.Create",
		Path:    []string{"/v1/oemApp/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppService.Delete",
		Path:    []string{"/v1/oemApp/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppService.DeleteById",
		Path:    []string{"/v1/oemApp/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppService.DeleteByIds",
		Path:    []string{"/v1/oemApp/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppService.Update",
		Path:    []string{"/v1/oemApp/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppService.UpdateAll",
		Path:    []string{"/v1/oemApp/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppService.UpdateFields",
		Path:    []string{"/v1/oemApp/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppService.FindById",
		Path:    []string{"/v1/oemApp/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppService.Find",
		Path:    []string{"/v1/oemApp/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppService.Lists",
		Path:    []string{"/v1/oemApp/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppService.Build",
		Path:    []string{"/v1/oemApp/build"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppService.UpdateVersion",
		Path:    []string{"/v1/oemApp/updateVersion"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppService.SaveIcon",
		Path:    []string{"/v1/oemApp/saveIcon"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppService.ListsByAppKeys",
		Path:    []string{"/v1/oemApp/listsByAppKeys"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppService.CancelBuild",
		Path:    []string{"/v1/oemApp/cancelBuild"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OemAppService{h}, opts...))
}

type oemAppServiceHandler struct {
	OemAppServiceHandler
}

func (h *oemAppServiceHandler) Create(ctx context.Context, in *OemApp, out *Response) error {
	return h.OemAppServiceHandler.Create(ctx, in, out)
}

func (h *oemAppServiceHandler) Delete(ctx context.Context, in *OemApp, out *Response) error {
	return h.OemAppServiceHandler.Delete(ctx, in, out)
}

func (h *oemAppServiceHandler) DeleteById(ctx context.Context, in *OemApp, out *Response) error {
	return h.OemAppServiceHandler.DeleteById(ctx, in, out)
}

func (h *oemAppServiceHandler) DeleteByIds(ctx context.Context, in *OemAppBatchDeleteRequest, out *Response) error {
	return h.OemAppServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *oemAppServiceHandler) Update(ctx context.Context, in *OemApp, out *Response) error {
	return h.OemAppServiceHandler.Update(ctx, in, out)
}

func (h *oemAppServiceHandler) UpdateAll(ctx context.Context, in *OemApp, out *Response) error {
	return h.OemAppServiceHandler.UpdateAll(ctx, in, out)
}

func (h *oemAppServiceHandler) UpdateFields(ctx context.Context, in *OemAppUpdateFieldsRequest, out *Response) error {
	return h.OemAppServiceHandler.UpdateFields(ctx, in, out)
}

func (h *oemAppServiceHandler) FindById(ctx context.Context, in *OemAppFilter, out *OemAppResponse) error {
	return h.OemAppServiceHandler.FindById(ctx, in, out)
}

func (h *oemAppServiceHandler) Find(ctx context.Context, in *OemAppFilter, out *OemAppResponse) error {
	return h.OemAppServiceHandler.Find(ctx, in, out)
}

func (h *oemAppServiceHandler) Lists(ctx context.Context, in *OemAppListRequest, out *OemAppResponse) error {
	return h.OemAppServiceHandler.Lists(ctx, in, out)
}

func (h *oemAppServiceHandler) Build(ctx context.Context, in *OemAppBuildReq, out *OemAppBuildRes) error {
	return h.OemAppServiceHandler.Build(ctx, in, out)
}

func (h *oemAppServiceHandler) UpdateVersion(ctx context.Context, in *OemAppUpdateVersionReq, out *OemAppUpdateVersionRes) error {
	return h.OemAppServiceHandler.UpdateVersion(ctx, in, out)
}

func (h *oemAppServiceHandler) SaveIcon(ctx context.Context, in *OemAppSaveIconReq, out *OemAppSaveIconRes) error {
	return h.OemAppServiceHandler.SaveIcon(ctx, in, out)
}

func (h *oemAppServiceHandler) ListsByAppKeys(ctx context.Context, in *ListsByAppKeysRequest, out *OemAppResponse) error {
	return h.OemAppServiceHandler.ListsByAppKeys(ctx, in, out)
}

func (h *oemAppServiceHandler) CancelBuild(ctx context.Context, in *OemAppBuildReq, out *OemAppBuildRes) error {
	return h.OemAppServiceHandler.CancelBuild(ctx, in, out)
}
