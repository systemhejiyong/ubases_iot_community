// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: panel_generate.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PanelGenerateService service

func NewPanelGenerateServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PanelGenerateService service

type PanelGenerateService interface {
	GenerateAndBuild(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*PanelGenerateResponse, error)
	GeneratePanelCode(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*PanelGenerateResponse, error)
}

type panelGenerateService struct {
	c    client.Client
	name string
}

func NewPanelGenerateService(name string, c client.Client) PanelGenerateService {
	return &panelGenerateService{
		c:    c,
		name: name,
	}
}

func (c *panelGenerateService) GenerateAndBuild(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*PanelGenerateResponse, error) {
	req := c.c.NewRequest(c.name, "PanelGenerateService.GenerateAndBuild", in)
	out := new(PanelGenerateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *panelGenerateService) GeneratePanelCode(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*PanelGenerateResponse, error) {
	req := c.c.NewRequest(c.name, "PanelGenerateService.GeneratePanelCode", in)
	out := new(PanelGenerateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PanelGenerateService service

type PanelGenerateServiceHandler interface {
	GenerateAndBuild(context.Context, *OpmPanel, *PanelGenerateResponse) error
	GeneratePanelCode(context.Context, *OpmPanel, *PanelGenerateResponse) error
}

func RegisterPanelGenerateServiceHandler(s server.Server, hdlr PanelGenerateServiceHandler, opts ...server.HandlerOption) error {
	type panelGenerateService interface {
		GenerateAndBuild(ctx context.Context, in *OpmPanel, out *PanelGenerateResponse) error
		GeneratePanelCode(ctx context.Context, in *OpmPanel, out *PanelGenerateResponse) error
	}
	type PanelGenerateService struct {
		panelGenerateService
	}
	h := &panelGenerateServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PanelGenerateService{h}, opts...))
}

type panelGenerateServiceHandler struct {
	PanelGenerateServiceHandler
}

func (h *panelGenerateServiceHandler) GenerateAndBuild(ctx context.Context, in *OpmPanel, out *PanelGenerateResponse) error {
	return h.PanelGenerateServiceHandler.GenerateAndBuild(ctx, in, out)
}

func (h *panelGenerateServiceHandler) GeneratePanelCode(ctx context.Context, in *OpmPanel, out *PanelGenerateResponse) error {
	return h.PanelGenerateServiceHandler.GeneratePanelCode(ctx, in, out)
}
