// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: mp_message_push_tpl_service.gen.proto

package protosService

import (
	fmt "fmt"
	math "math"

	proto "google.golang.org/protobuf/proto"

	context "context"

	api "go-micro.dev/v4/api"

	client "go-micro.dev/v4/client"

	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MpMessagePushTplService service

func NewMpMessagePushTplServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "MpMessagePushTplService.Create",
			Path:    []string{"/v1/mpMessagePushTpl/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushTplService.Delete",
			Path:    []string{"/v1/mpMessagePushTpl/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushTplService.DeleteById",
			Path:    []string{"/v1/mpMessagePushTpl/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushTplService.DeleteByIds",
			Path:    []string{"/v1/mpMessagePushTpl/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushTplService.Update",
			Path:    []string{"/v1/mpMessagePushTpl/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushTplService.UpdateAll",
			Path:    []string{"/v1/mpMessagePushTpl/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushTplService.UpdateFields",
			Path:    []string{"/v1/mpMessagePushTpl/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushTplService.FindById",
			Path:    []string{"/v1/mpMessagePushTpl/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushTplService.Find",
			Path:    []string{"/v1/mpMessagePushTpl/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushTplService.Lists",
			Path:    []string{"/v1/mpMessagePushTpl/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for MpMessagePushTplService service

type MpMessagePushTplService interface {
	//创建
	Create(ctx context.Context, in *MpMessagePushTpl, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *MpMessagePushTpl, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *MpMessagePushTpl, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *MpMessagePushTplBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *MpMessagePushTpl, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *MpMessagePushTpl, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *MpMessagePushTplUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *MpMessagePushTplFilter, opts ...client.CallOption) (*MpMessagePushTplResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *MpMessagePushTplFilter, opts ...client.CallOption) (*MpMessagePushTplResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *MpMessagePushTplListRequest, opts ...client.CallOption) (*MpMessagePushTplResponse, error)
}

type mpMessagePushTplService struct {
	c    client.Client
	name string
}

func NewMpMessagePushTplService(name string, c client.Client) MpMessagePushTplService {
	return &mpMessagePushTplService{
		c:    c,
		name: name,
	}
}

func (c *mpMessagePushTplService) Create(ctx context.Context, in *MpMessagePushTpl, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushTplService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushTplService) Delete(ctx context.Context, in *MpMessagePushTpl, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushTplService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushTplService) DeleteById(ctx context.Context, in *MpMessagePushTpl, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushTplService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushTplService) DeleteByIds(ctx context.Context, in *MpMessagePushTplBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushTplService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushTplService) Update(ctx context.Context, in *MpMessagePushTpl, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushTplService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushTplService) UpdateAll(ctx context.Context, in *MpMessagePushTpl, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushTplService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushTplService) UpdateFields(ctx context.Context, in *MpMessagePushTplUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushTplService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushTplService) FindById(ctx context.Context, in *MpMessagePushTplFilter, opts ...client.CallOption) (*MpMessagePushTplResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushTplService.FindById", in)
	out := new(MpMessagePushTplResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushTplService) Find(ctx context.Context, in *MpMessagePushTplFilter, opts ...client.CallOption) (*MpMessagePushTplResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushTplService.Find", in)
	out := new(MpMessagePushTplResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushTplService) Lists(ctx context.Context, in *MpMessagePushTplListRequest, opts ...client.CallOption) (*MpMessagePushTplResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushTplService.Lists", in)
	out := new(MpMessagePushTplResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MpMessagePushTplService service

type MpMessagePushTplServiceHandler interface {
	//创建
	Create(context.Context, *MpMessagePushTpl, *Response) error
	//匹配多条件删除
	Delete(context.Context, *MpMessagePushTpl, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *MpMessagePushTpl, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *MpMessagePushTplBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *MpMessagePushTpl, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *MpMessagePushTpl, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *MpMessagePushTplUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *MpMessagePushTplFilter, *MpMessagePushTplResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *MpMessagePushTplFilter, *MpMessagePushTplResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *MpMessagePushTplListRequest, *MpMessagePushTplResponse) error
}

func RegisterMpMessagePushTplServiceHandler(s server.Server, hdlr MpMessagePushTplServiceHandler, opts ...server.HandlerOption) error {
	type mpMessagePushTplService interface {
		Create(ctx context.Context, in *MpMessagePushTpl, out *Response) error
		Delete(ctx context.Context, in *MpMessagePushTpl, out *Response) error
		DeleteById(ctx context.Context, in *MpMessagePushTpl, out *Response) error
		DeleteByIds(ctx context.Context, in *MpMessagePushTplBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *MpMessagePushTpl, out *Response) error
		UpdateAll(ctx context.Context, in *MpMessagePushTpl, out *Response) error
		UpdateFields(ctx context.Context, in *MpMessagePushTplUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *MpMessagePushTplFilter, out *MpMessagePushTplResponse) error
		Find(ctx context.Context, in *MpMessagePushTplFilter, out *MpMessagePushTplResponse) error
		Lists(ctx context.Context, in *MpMessagePushTplListRequest, out *MpMessagePushTplResponse) error
	}
	type MpMessagePushTplService struct {
		mpMessagePushTplService
	}
	h := &mpMessagePushTplServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushTplService.Create",
		Path:    []string{"/v1/mpMessagePushTpl/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushTplService.Delete",
		Path:    []string{"/v1/mpMessagePushTpl/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushTplService.DeleteById",
		Path:    []string{"/v1/mpMessagePushTpl/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushTplService.DeleteByIds",
		Path:    []string{"/v1/mpMessagePushTpl/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushTplService.Update",
		Path:    []string{"/v1/mpMessagePushTpl/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushTplService.UpdateAll",
		Path:    []string{"/v1/mpMessagePushTpl/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushTplService.UpdateFields",
		Path:    []string{"/v1/mpMessagePushTpl/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushTplService.FindById",
		Path:    []string{"/v1/mpMessagePushTpl/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushTplService.Find",
		Path:    []string{"/v1/mpMessagePushTpl/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushTplService.Lists",
		Path:    []string{"/v1/mpMessagePushTpl/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&MpMessagePushTplService{h}, opts...))
}

type mpMessagePushTplServiceHandler struct {
	MpMessagePushTplServiceHandler
}

func (h *mpMessagePushTplServiceHandler) Create(ctx context.Context, in *MpMessagePushTpl, out *Response) error {
	return h.MpMessagePushTplServiceHandler.Create(ctx, in, out)
}

func (h *mpMessagePushTplServiceHandler) Delete(ctx context.Context, in *MpMessagePushTpl, out *Response) error {
	return h.MpMessagePushTplServiceHandler.Delete(ctx, in, out)
}

func (h *mpMessagePushTplServiceHandler) DeleteById(ctx context.Context, in *MpMessagePushTpl, out *Response) error {
	return h.MpMessagePushTplServiceHandler.DeleteById(ctx, in, out)
}

func (h *mpMessagePushTplServiceHandler) DeleteByIds(ctx context.Context, in *MpMessagePushTplBatchDeleteRequest, out *Response) error {
	return h.MpMessagePushTplServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *mpMessagePushTplServiceHandler) Update(ctx context.Context, in *MpMessagePushTpl, out *Response) error {
	return h.MpMessagePushTplServiceHandler.Update(ctx, in, out)
}

func (h *mpMessagePushTplServiceHandler) UpdateAll(ctx context.Context, in *MpMessagePushTpl, out *Response) error {
	return h.MpMessagePushTplServiceHandler.UpdateAll(ctx, in, out)
}

func (h *mpMessagePushTplServiceHandler) UpdateFields(ctx context.Context, in *MpMessagePushTplUpdateFieldsRequest, out *Response) error {
	return h.MpMessagePushTplServiceHandler.UpdateFields(ctx, in, out)
}

func (h *mpMessagePushTplServiceHandler) FindById(ctx context.Context, in *MpMessagePushTplFilter, out *MpMessagePushTplResponse) error {
	return h.MpMessagePushTplServiceHandler.FindById(ctx, in, out)
}

func (h *mpMessagePushTplServiceHandler) Find(ctx context.Context, in *MpMessagePushTplFilter, out *MpMessagePushTplResponse) error {
	return h.MpMessagePushTplServiceHandler.Find(ctx, in, out)
}

func (h *mpMessagePushTplServiceHandler) Lists(ctx context.Context, in *MpMessagePushTplListRequest, out *MpMessagePushTplResponse) error {
	return h.MpMessagePushTplServiceHandler.Lists(ctx, in, out)
}
