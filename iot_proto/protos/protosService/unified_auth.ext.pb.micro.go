// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: unified_auth.ext.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UnifiedIdentityAuthService service

func NewUnifiedIdentityAuthServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UnifiedIdentityAuthService service

type UnifiedIdentityAuthService interface {
	GenerateJwtToken(ctx context.Context, in *TokenGenRequest, opts ...client.CallOption) (*TokenResponse, error)
	ParseJwtToken(ctx context.Context, in *TokenRequest, opts ...client.CallOption) (*TokenResponse, error)
}

type unifiedIdentityAuthService struct {
	c    client.Client
	name string
}

func NewUnifiedIdentityAuthService(name string, c client.Client) UnifiedIdentityAuthService {
	return &unifiedIdentityAuthService{
		c:    c,
		name: name,
	}
}

func (c *unifiedIdentityAuthService) GenerateJwtToken(ctx context.Context, in *TokenGenRequest, opts ...client.CallOption) (*TokenResponse, error) {
	req := c.c.NewRequest(c.name, "UnifiedIdentityAuthService.GenerateJwtToken", in)
	out := new(TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *unifiedIdentityAuthService) ParseJwtToken(ctx context.Context, in *TokenRequest, opts ...client.CallOption) (*TokenResponse, error) {
	req := c.c.NewRequest(c.name, "UnifiedIdentityAuthService.ParseJwtToken", in)
	out := new(TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UnifiedIdentityAuthService service

type UnifiedIdentityAuthServiceHandler interface {
	GenerateJwtToken(context.Context, *TokenGenRequest, *TokenResponse) error
	ParseJwtToken(context.Context, *TokenRequest, *TokenResponse) error
}

func RegisterUnifiedIdentityAuthServiceHandler(s server.Server, hdlr UnifiedIdentityAuthServiceHandler, opts ...server.HandlerOption) error {
	type unifiedIdentityAuthService interface {
		GenerateJwtToken(ctx context.Context, in *TokenGenRequest, out *TokenResponse) error
		ParseJwtToken(ctx context.Context, in *TokenRequest, out *TokenResponse) error
	}
	type UnifiedIdentityAuthService struct {
		unifiedIdentityAuthService
	}
	h := &unifiedIdentityAuthServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UnifiedIdentityAuthService{h}, opts...))
}

type unifiedIdentityAuthServiceHandler struct {
	UnifiedIdentityAuthServiceHandler
}

func (h *unifiedIdentityAuthServiceHandler) GenerateJwtToken(ctx context.Context, in *TokenGenRequest, out *TokenResponse) error {
	return h.UnifiedIdentityAuthServiceHandler.GenerateJwtToken(ctx, in, out)
}

func (h *unifiedIdentityAuthServiceHandler) ParseJwtToken(ctx context.Context, in *TokenRequest, out *TokenResponse) error {
	return h.UnifiedIdentityAuthServiceHandler.ParseJwtToken(ctx, in, out)
}
