// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: app_user_active_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AppUserStatisticsService service

func NewAppUserStatisticsServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "AppUserStatisticsService.GetAppUserStatistics",
			Path:    []string{"/v1/appUser/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for AppUserStatisticsService service

type AppUserStatisticsService interface {
	GetAppUserStatistics(ctx context.Context, in *AppUserStatisticsFilter, opts ...client.CallOption) (*AppUserStatisticsResponse, error)
}

type appUserStatisticsService struct {
	c    client.Client
	name string
}

func NewAppUserStatisticsService(name string, c client.Client) AppUserStatisticsService {
	return &appUserStatisticsService{
		c:    c,
		name: name,
	}
}

func (c *appUserStatisticsService) GetAppUserStatistics(ctx context.Context, in *AppUserStatisticsFilter, opts ...client.CallOption) (*AppUserStatisticsResponse, error) {
	req := c.c.NewRequest(c.name, "AppUserStatisticsService.GetAppUserStatistics", in)
	out := new(AppUserStatisticsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppUserStatisticsService service

type AppUserStatisticsServiceHandler interface {
	GetAppUserStatistics(context.Context, *AppUserStatisticsFilter, *AppUserStatisticsResponse) error
}

func RegisterAppUserStatisticsServiceHandler(s server.Server, hdlr AppUserStatisticsServiceHandler, opts ...server.HandlerOption) error {
	type appUserStatisticsService interface {
		GetAppUserStatistics(ctx context.Context, in *AppUserStatisticsFilter, out *AppUserStatisticsResponse) error
	}
	type AppUserStatisticsService struct {
		appUserStatisticsService
	}
	h := &appUserStatisticsServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "AppUserStatisticsService.GetAppUserStatistics",
		Path:    []string{"/v1/appUser/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&AppUserStatisticsService{h}, opts...))
}

type appUserStatisticsServiceHandler struct {
	AppUserStatisticsServiceHandler
}

func (h *appUserStatisticsServiceHandler) GetAppUserStatistics(ctx context.Context, in *AppUserStatisticsFilter, out *AppUserStatisticsResponse) error {
	return h.AppUserStatisticsServiceHandler.GetAppUserStatistics(ctx, in, out)
}
