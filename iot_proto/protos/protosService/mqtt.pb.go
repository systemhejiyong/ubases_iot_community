// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: mqtt.proto

package protosService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Qos int32

const (
	Qos_AtMostOnce  Qos = 0
	Qos_AtLeastOnce Qos = 1
	Qos_ExactlyOnce Qos = 2
)

// Enum value maps for Qos.
var (
	Qos_name = map[int32]string{
		0: "AtMostOnce",
		1: "AtLeastOnce",
		2: "ExactlyOnce",
	}
	Qos_value = map[string]int32{
		"AtMostOnce":  0,
		"AtLeastOnce": 1,
		"ExactlyOnce": 2,
	}
)

func (x Qos) Enum() *Qos {
	p := new(Qos)
	*p = x
	return p
}

func (x Qos) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Qos) Descriptor() protoreflect.EnumDescriptor {
	return file_mqtt_proto_enumTypes[0].Descriptor()
}

func (Qos) Type() protoreflect.EnumType {
	return &file_mqtt_proto_enumTypes[0]
}

func (x Qos) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Qos.Descriptor instead.
func (Qos) EnumDescriptor() ([]byte, []int) {
	return file_mqtt_proto_rawDescGZIP(), []int{0}
}

// 发送精确的消息
type PublishMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicFullName  string `protobuf:"bytes,1,opt,name=topic_full_name,json=topicFullName,proto3" json:"topic_full_name,omitempty"`
	MessageContent string `protobuf:"bytes,2,opt,name=message_content,json=messageContent,proto3" json:"message_content,omitempty"`
	Qos            Qos    `protobuf:"varint,3,opt,name=qos,proto3,enum=service.Qos" json:"qos,omitempty"`
	Retained       bool   `protobuf:"varint,4,opt,name=retained,proto3" json:"retained,omitempty"`
}

func (x *PublishMessage) Reset() {
	*x = PublishMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMessage) ProtoMessage() {}

func (x *PublishMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMessage.ProtoReflect.Descriptor instead.
func (*PublishMessage) Descriptor() ([]byte, []int) {
	return file_mqtt_proto_rawDescGZIP(), []int{0}
}

func (x *PublishMessage) GetTopicFullName() string {
	if x != nil {
		return x.TopicFullName
	}
	return ""
}

func (x *PublishMessage) GetMessageContent() string {
	if x != nil {
		return x.MessageContent
	}
	return ""
}

func (x *PublishMessage) GetQos() Qos {
	if x != nil {
		return x.Qos
	}
	return Qos_AtMostOnce
}

func (x *PublishMessage) GetRetained() bool {
	if x != nil {
		return x.Retained
	}
	return false
}

// 批量发送的消息
type BatchPublishMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicFullNameList []string `protobuf:"bytes,1,rep,name=topic_full_name_list,json=topicFullNameList,proto3" json:"topic_full_name_list,omitempty"`
	MessageContent    string   `protobuf:"bytes,2,opt,name=message_content,json=messageContent,proto3" json:"message_content,omitempty"`
	Qos               Qos      `protobuf:"varint,3,opt,name=qos,proto3,enum=service.Qos" json:"qos,omitempty"`
	Retained          bool     `protobuf:"varint,4,opt,name=retained,proto3" json:"retained,omitempty"`
}

func (x *BatchPublishMessage) Reset() {
	*x = BatchPublishMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchPublishMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchPublishMessage) ProtoMessage() {}

func (x *BatchPublishMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchPublishMessage.ProtoReflect.Descriptor instead.
func (*BatchPublishMessage) Descriptor() ([]byte, []int) {
	return file_mqtt_proto_rawDescGZIP(), []int{1}
}

func (x *BatchPublishMessage) GetTopicFullNameList() []string {
	if x != nil {
		return x.TopicFullNameList
	}
	return nil
}

func (x *BatchPublishMessage) GetMessageContent() string {
	if x != nil {
		return x.MessageContent
	}
	return ""
}

func (x *BatchPublishMessage) GetQos() Qos {
	if x != nil {
		return x.Qos
	}
	return Qos_AtMostOnce
}

func (x *BatchPublishMessage) GetRetained() bool {
	if x != nil {
		return x.Retained
	}
	return false
}

type FilterMqttUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//根据client_id查询,预留，暂时不用
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	//根据user_name查询
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *FilterMqttUser) Reset() {
	*x = FilterMqttUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterMqttUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterMqttUser) ProtoMessage() {}

func (x *FilterMqttUser) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterMqttUser.ProtoReflect.Descriptor instead.
func (*FilterMqttUser) Descriptor() ([]byte, []int) {
	return file_mqtt_proto_rawDescGZIP(), []int{2}
}

func (x *FilterMqttUser) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *FilterMqttUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type MqttUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Password     string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Salt         string `protobuf:"bytes,3,opt,name=salt,proto3" json:"salt,omitempty"`
	ClientId     string `protobuf:"bytes,6,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	PasswordHash string `protobuf:"bytes,8,opt,name=password_hash,json=passwordHash,proto3" json:"password_hash,omitempty"`
}

func (x *MqttUser) Reset() {
	*x = MqttUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MqttUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MqttUser) ProtoMessage() {}

func (x *MqttUser) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MqttUser.ProtoReflect.Descriptor instead.
func (*MqttUser) Descriptor() ([]byte, []int) {
	return file_mqtt_proto_rawDescGZIP(), []int{3}
}

func (x *MqttUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MqttUser) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *MqttUser) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *MqttUser) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *MqttUser) GetPasswordHash() string {
	if x != nil {
		return x.PasswordHash
	}
	return ""
}

type Triad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,101,opt,name=id,proto3" json:"id,omitempty"`
	User     string `protobuf:"bytes,102,opt,name=user,proto3" json:"user,omitempty"`
	Password string `protobuf:"bytes,103,opt,name=password,proto3" json:"password,omitempty"`
	Salt     string `protobuf:"bytes,104,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (x *Triad) Reset() {
	*x = Triad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Triad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Triad) ProtoMessage() {}

func (x *Triad) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Triad.ProtoReflect.Descriptor instead.
func (*Triad) Descriptor() ([]byte, []int) {
	return file_mqtt_proto_rawDescGZIP(), []int{4}
}

func (x *Triad) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Triad) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Triad) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Triad) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

// 批量生成三元组请求参数
type BatchGenTriadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nums int64 `protobuf:"varint,101,opt,name=nums,proto3" json:"nums,omitempty"`
}

func (x *BatchGenTriadRequest) Reset() {
	*x = BatchGenTriadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGenTriadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGenTriadRequest) ProtoMessage() {}

func (x *BatchGenTriadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGenTriadRequest.ProtoReflect.Descriptor instead.
func (*BatchGenTriadRequest) Descriptor() ([]byte, []int) {
	return file_mqtt_proto_rawDescGZIP(), []int{5}
}

func (x *BatchGenTriadRequest) GetNums() int64 {
	if x != nil {
		return x.Nums
	}
	return 0
}

// 批量生成三元组响应参数
type BatchGenTriadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64    `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string   `protobuf:"bytes,102,opt,name=msg,proto3" json:"msg,omitempty"`
	Data []*Triad `protobuf:"bytes,103,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *BatchGenTriadResponse) Reset() {
	*x = BatchGenTriadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchGenTriadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGenTriadResponse) ProtoMessage() {}

func (x *BatchGenTriadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGenTriadResponse.ProtoReflect.Descriptor instead.
func (*BatchGenTriadResponse) Descriptor() ([]byte, []int) {
	return file_mqtt_proto_rawDescGZIP(), []int{6}
}

func (x *BatchGenTriadResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *BatchGenTriadResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *BatchGenTriadResponse) GetData() []*Triad {
	if x != nil {
		return x.Data
	}
	return nil
}

type VerifyTriadResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,101,opt,name=id,proto3" json:"id,omitempty"`
	Result bool   `protobuf:"varint,102,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *VerifyTriadResult) Reset() {
	*x = VerifyTriadResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyTriadResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTriadResult) ProtoMessage() {}

func (x *VerifyTriadResult) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTriadResult.ProtoReflect.Descriptor instead.
func (*VerifyTriadResult) Descriptor() ([]byte, []int) {
	return file_mqtt_proto_rawDescGZIP(), []int{7}
}

func (x *VerifyTriadResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VerifyTriadResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 校验三元组请求参数
type VerifyTriadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Triad `protobuf:"bytes,101,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *VerifyTriadRequest) Reset() {
	*x = VerifyTriadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyTriadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTriadRequest) ProtoMessage() {}

func (x *VerifyTriadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTriadRequest.ProtoReflect.Descriptor instead.
func (*VerifyTriadRequest) Descriptor() ([]byte, []int) {
	return file_mqtt_proto_rawDescGZIP(), []int{8}
}

func (x *VerifyTriadRequest) GetData() []*Triad {
	if x != nil {
		return x.Data
	}
	return nil
}

// 校验三元组响应参数
type VerifyTriadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int64           `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string          `protobuf:"bytes,102,opt,name=msg,proto3" json:"msg,omitempty"`
	Data map[string]bool `protobuf:"bytes,103,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *VerifyTriadResponse) Reset() {
	*x = VerifyTriadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mqtt_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyTriadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTriadResponse) ProtoMessage() {}

func (x *VerifyTriadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mqtt_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTriadResponse.ProtoReflect.Descriptor instead.
func (*VerifyTriadResponse) Descriptor() ([]byte, []int) {
	return file_mqtt_proto_rawDescGZIP(), []int{9}
}

func (x *VerifyTriadResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *VerifyTriadResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *VerifyTriadResponse) GetData() map[string]bool {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_mqtt_proto protoreflect.FileDescriptor

var file_mqtt_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x65, 0x78,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x71,
	0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x51, 0x6f, 0x73, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2f, 0x0a, 0x14, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x03, 0x71, 0x6f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x51, 0x6f, 0x73, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x4a, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d,
	0x71, 0x74, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x90, 0x01, 0x0a, 0x08, 0x4d, 0x71, 0x74, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61,
	0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x5b, 0x0a, 0x05, 0x54, 0x72, 0x69, 0x61, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c,
	0x74, 0x22, 0x2a, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x6e, 0x54, 0x72, 0x69,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x75, 0x6d,
	0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6e, 0x75, 0x6d, 0x73, 0x22, 0x61, 0x0a,
	0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x67, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x3b, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x72, 0x69, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x38, 0x0a,
	0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x72, 0x69, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x65, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x61,
	0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x54, 0x72, 0x69, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x67, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x54, 0x72, 0x69, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x37, 0x0a, 0x03, 0x51, 0x6f,
	0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x74, 0x4d, 0x6f, 0x73, 0x74, 0x4f, 0x6e, 0x63, 0x65, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x4f, 0x6e, 0x63, 0x65,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79, 0x4f, 0x6e, 0x63,
	0x65, 0x10, 0x02, 0x32, 0xba, 0x04, 0x0a, 0x0b, 0x4d, 0x71, 0x74, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x17,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x0c, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x71, 0x74, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x11,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x71, 0x74, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d,
	0x71, 0x74, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x71, 0x74, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x1a, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x78, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x71, 0x74, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x71, 0x74, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x78, 0x22, 0x00, 0x12, 0x50,
	0x0a, 0x0d, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x64, 0x12,
	0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x6e, 0x54, 0x72, 0x69, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4a, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x72, 0x69, 0x61, 0x64, 0x12,
	0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x54, 0x72, 0x69, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x72, 0x69,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f,
	0x47, 0x65, 0x6e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x61, 0x64, 0x12,
	0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47,
	0x65, 0x6e, 0x54, 0x72, 0x69, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65,
	0x6e, 0x54, 0x72, 0x69, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mqtt_proto_rawDescOnce sync.Once
	file_mqtt_proto_rawDescData = file_mqtt_proto_rawDesc
)

func file_mqtt_proto_rawDescGZIP() []byte {
	file_mqtt_proto_rawDescOnce.Do(func() {
		file_mqtt_proto_rawDescData = protoimpl.X.CompressGZIP(file_mqtt_proto_rawDescData)
	})
	return file_mqtt_proto_rawDescData
}

var file_mqtt_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mqtt_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_mqtt_proto_goTypes = []interface{}{
	(Qos)(0),                      // 0: service.Qos
	(*PublishMessage)(nil),        // 1: service.PublishMessage
	(*BatchPublishMessage)(nil),   // 2: service.BatchPublishMessage
	(*FilterMqttUser)(nil),        // 3: service.FilterMqttUser
	(*MqttUser)(nil),              // 4: service.MqttUser
	(*Triad)(nil),                 // 5: service.Triad
	(*BatchGenTriadRequest)(nil),  // 6: service.BatchGenTriadRequest
	(*BatchGenTriadResponse)(nil), // 7: service.BatchGenTriadResponse
	(*VerifyTriadResult)(nil),     // 8: service.VerifyTriadResult
	(*VerifyTriadRequest)(nil),    // 9: service.VerifyTriadRequest
	(*VerifyTriadResponse)(nil),   // 10: service.VerifyTriadResponse
	nil,                           // 11: service.VerifyTriadResponse.DataEntry
	(*ResponseEx)(nil),            // 12: service.ResponseEx
}
var file_mqtt_proto_depIdxs = []int32{
	0,  // 0: service.PublishMessage.qos:type_name -> service.Qos
	0,  // 1: service.BatchPublishMessage.qos:type_name -> service.Qos
	5,  // 2: service.BatchGenTriadResponse.data:type_name -> service.Triad
	5,  // 3: service.VerifyTriadRequest.data:type_name -> service.Triad
	11, // 4: service.VerifyTriadResponse.data:type_name -> service.VerifyTriadResponse.DataEntry
	1,  // 5: service.MqttService.Publish:input_type -> service.PublishMessage
	4,  // 6: service.MqttService.SaveMqttUser:input_type -> service.MqttUser
	3,  // 7: service.MqttService.GetMqttUser:input_type -> service.FilterMqttUser
	3,  // 8: service.MqttService.DeleteMqttUser:input_type -> service.FilterMqttUser
	2,  // 9: service.MqttService.BatchPublish:input_type -> service.BatchPublishMessage
	6,  // 10: service.MqttService.BatchGenTriad:input_type -> service.BatchGenTriadRequest
	9,  // 11: service.MqttService.VerifyTriad:input_type -> service.VerifyTriadRequest
	6,  // 12: service.MqttService.GenVirtualTriad:input_type -> service.BatchGenTriadRequest
	12, // 13: service.MqttService.Publish:output_type -> service.ResponseEx
	12, // 14: service.MqttService.SaveMqttUser:output_type -> service.ResponseEx
	12, // 15: service.MqttService.GetMqttUser:output_type -> service.ResponseEx
	12, // 16: service.MqttService.DeleteMqttUser:output_type -> service.ResponseEx
	12, // 17: service.MqttService.BatchPublish:output_type -> service.ResponseEx
	7,  // 18: service.MqttService.BatchGenTriad:output_type -> service.BatchGenTriadResponse
	10, // 19: service.MqttService.VerifyTriad:output_type -> service.VerifyTriadResponse
	7,  // 20: service.MqttService.GenVirtualTriad:output_type -> service.BatchGenTriadResponse
	13, // [13:21] is the sub-list for method output_type
	5,  // [5:13] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_mqtt_proto_init() }
func file_mqtt_proto_init() {
	if File_mqtt_proto != nil {
		return
	}
	file_common_ext_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mqtt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchPublishMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterMqttUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MqttUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Triad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGenTriadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchGenTriadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyTriadResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyTriadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mqtt_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyTriadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mqtt_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mqtt_proto_goTypes,
		DependencyIndexes: file_mqtt_proto_depIdxs,
		EnumInfos:         file_mqtt_proto_enumTypes,
		MessageInfos:      file_mqtt_proto_msgTypes,
	}.Build()
	File_mqtt_proto = out.File
	file_mqtt_proto_rawDesc = nil
	file_mqtt_proto_goTypes = nil
	file_mqtt_proto_depIdxs = nil
}
