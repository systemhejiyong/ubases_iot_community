// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: opm_community_product_service.gen.proto

package protosService

import (
	fmt "fmt"
	math "math"

	proto "google.golang.org/protobuf/proto"

	context "context"

	api "go-micro.dev/v4/api"

	client "go-micro.dev/v4/client"

	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpmCommunityProductService service

func NewOpmCommunityProductServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpmCommunityProductService.Create",
			Path:    []string{"/v1/opmCommunityProduct/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmCommunityProductService.Delete",
			Path:    []string{"/v1/opmCommunityProduct/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmCommunityProductService.DeleteById",
			Path:    []string{"/v1/opmCommunityProduct/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmCommunityProductService.DeleteByIds",
			Path:    []string{"/v1/opmCommunityProduct/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmCommunityProductService.Update",
			Path:    []string{"/v1/opmCommunityProduct/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmCommunityProductService.UpdateAll",
			Path:    []string{"/v1/opmCommunityProduct/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmCommunityProductService.UpdateFields",
			Path:    []string{"/v1/opmCommunityProduct/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmCommunityProductService.FindById",
			Path:    []string{"/v1/opmCommunityProduct/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmCommunityProductService.Find",
			Path:    []string{"/v1/opmCommunityProduct/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmCommunityProductService.Lists",
			Path:    []string{"/v1/opmCommunityProduct/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmCommunityProductService.UpdateStatus",
			Path:    []string{"/v1/opmCommunityProduct/updateStatus"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpmCommunityProductService service

type OpmCommunityProductService interface {
	//创建
	Create(ctx context.Context, in *OpmCommunityProduct, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpmCommunityProduct, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpmCommunityProduct, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpmCommunityProductBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpmCommunityProduct, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpmCommunityProduct, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpmCommunityProductUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpmCommunityProductFilter, opts ...client.CallOption) (*OpmCommunityProductResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpmCommunityProductFilter, opts ...client.CallOption) (*OpmCommunityProductResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpmCommunityProductListRequest, opts ...client.CallOption) (*OpmCommunityProductResponse, error)
	//修改状态
	UpdateStatus(ctx context.Context, in *OpmCommunityProduct, opts ...client.CallOption) (*Response, error)
}

type opmCommunityProductService struct {
	c    client.Client
	name string
}

func NewOpmCommunityProductService(name string, c client.Client) OpmCommunityProductService {
	return &opmCommunityProductService{
		c:    c,
		name: name,
	}
}

func (c *opmCommunityProductService) Create(ctx context.Context, in *OpmCommunityProduct, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmCommunityProductService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmCommunityProductService) Delete(ctx context.Context, in *OpmCommunityProduct, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmCommunityProductService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmCommunityProductService) DeleteById(ctx context.Context, in *OpmCommunityProduct, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmCommunityProductService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmCommunityProductService) DeleteByIds(ctx context.Context, in *OpmCommunityProductBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmCommunityProductService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmCommunityProductService) Update(ctx context.Context, in *OpmCommunityProduct, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmCommunityProductService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmCommunityProductService) UpdateAll(ctx context.Context, in *OpmCommunityProduct, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmCommunityProductService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmCommunityProductService) UpdateFields(ctx context.Context, in *OpmCommunityProductUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmCommunityProductService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmCommunityProductService) FindById(ctx context.Context, in *OpmCommunityProductFilter, opts ...client.CallOption) (*OpmCommunityProductResponse, error) {
	req := c.c.NewRequest(c.name, "OpmCommunityProductService.FindById", in)
	out := new(OpmCommunityProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmCommunityProductService) Find(ctx context.Context, in *OpmCommunityProductFilter, opts ...client.CallOption) (*OpmCommunityProductResponse, error) {
	req := c.c.NewRequest(c.name, "OpmCommunityProductService.Find", in)
	out := new(OpmCommunityProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmCommunityProductService) Lists(ctx context.Context, in *OpmCommunityProductListRequest, opts ...client.CallOption) (*OpmCommunityProductResponse, error) {
	req := c.c.NewRequest(c.name, "OpmCommunityProductService.Lists", in)
	out := new(OpmCommunityProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmCommunityProductService) UpdateStatus(ctx context.Context, in *OpmCommunityProduct, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmCommunityProductService.UpdateStatus", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpmCommunityProductService service

type OpmCommunityProductServiceHandler interface {
	//创建
	Create(context.Context, *OpmCommunityProduct, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpmCommunityProduct, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpmCommunityProduct, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpmCommunityProductBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpmCommunityProduct, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpmCommunityProduct, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpmCommunityProductUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpmCommunityProductFilter, *OpmCommunityProductResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpmCommunityProductFilter, *OpmCommunityProductResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpmCommunityProductListRequest, *OpmCommunityProductResponse) error
	//修改状态
	UpdateStatus(context.Context, *OpmCommunityProduct, *Response) error
}

func RegisterOpmCommunityProductServiceHandler(s server.Server, hdlr OpmCommunityProductServiceHandler, opts ...server.HandlerOption) error {
	type opmCommunityProductService interface {
		Create(ctx context.Context, in *OpmCommunityProduct, out *Response) error
		Delete(ctx context.Context, in *OpmCommunityProduct, out *Response) error
		DeleteById(ctx context.Context, in *OpmCommunityProduct, out *Response) error
		DeleteByIds(ctx context.Context, in *OpmCommunityProductBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpmCommunityProduct, out *Response) error
		UpdateAll(ctx context.Context, in *OpmCommunityProduct, out *Response) error
		UpdateFields(ctx context.Context, in *OpmCommunityProductUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpmCommunityProductFilter, out *OpmCommunityProductResponse) error
		Find(ctx context.Context, in *OpmCommunityProductFilter, out *OpmCommunityProductResponse) error
		Lists(ctx context.Context, in *OpmCommunityProductListRequest, out *OpmCommunityProductResponse) error
		UpdateStatus(ctx context.Context, in *OpmCommunityProduct, out *Response) error
	}
	type OpmCommunityProductService struct {
		opmCommunityProductService
	}
	h := &opmCommunityProductServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmCommunityProductService.Create",
		Path:    []string{"/v1/opmCommunityProduct/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmCommunityProductService.Delete",
		Path:    []string{"/v1/opmCommunityProduct/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmCommunityProductService.DeleteById",
		Path:    []string{"/v1/opmCommunityProduct/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmCommunityProductService.DeleteByIds",
		Path:    []string{"/v1/opmCommunityProduct/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmCommunityProductService.Update",
		Path:    []string{"/v1/opmCommunityProduct/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmCommunityProductService.UpdateAll",
		Path:    []string{"/v1/opmCommunityProduct/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmCommunityProductService.UpdateFields",
		Path:    []string{"/v1/opmCommunityProduct/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmCommunityProductService.FindById",
		Path:    []string{"/v1/opmCommunityProduct/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmCommunityProductService.Find",
		Path:    []string{"/v1/opmCommunityProduct/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmCommunityProductService.Lists",
		Path:    []string{"/v1/opmCommunityProduct/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmCommunityProductService.UpdateStatus",
		Path:    []string{"/v1/opmCommunityProduct/updateStatus"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpmCommunityProductService{h}, opts...))
}

type opmCommunityProductServiceHandler struct {
	OpmCommunityProductServiceHandler
}

func (h *opmCommunityProductServiceHandler) Create(ctx context.Context, in *OpmCommunityProduct, out *Response) error {
	return h.OpmCommunityProductServiceHandler.Create(ctx, in, out)
}

func (h *opmCommunityProductServiceHandler) Delete(ctx context.Context, in *OpmCommunityProduct, out *Response) error {
	return h.OpmCommunityProductServiceHandler.Delete(ctx, in, out)
}

func (h *opmCommunityProductServiceHandler) DeleteById(ctx context.Context, in *OpmCommunityProduct, out *Response) error {
	return h.OpmCommunityProductServiceHandler.DeleteById(ctx, in, out)
}

func (h *opmCommunityProductServiceHandler) DeleteByIds(ctx context.Context, in *OpmCommunityProductBatchDeleteRequest, out *Response) error {
	return h.OpmCommunityProductServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *opmCommunityProductServiceHandler) Update(ctx context.Context, in *OpmCommunityProduct, out *Response) error {
	return h.OpmCommunityProductServiceHandler.Update(ctx, in, out)
}

func (h *opmCommunityProductServiceHandler) UpdateAll(ctx context.Context, in *OpmCommunityProduct, out *Response) error {
	return h.OpmCommunityProductServiceHandler.UpdateAll(ctx, in, out)
}

func (h *opmCommunityProductServiceHandler) UpdateFields(ctx context.Context, in *OpmCommunityProductUpdateFieldsRequest, out *Response) error {
	return h.OpmCommunityProductServiceHandler.UpdateFields(ctx, in, out)
}

func (h *opmCommunityProductServiceHandler) FindById(ctx context.Context, in *OpmCommunityProductFilter, out *OpmCommunityProductResponse) error {
	return h.OpmCommunityProductServiceHandler.FindById(ctx, in, out)
}

func (h *opmCommunityProductServiceHandler) Find(ctx context.Context, in *OpmCommunityProductFilter, out *OpmCommunityProductResponse) error {
	return h.OpmCommunityProductServiceHandler.Find(ctx, in, out)
}

func (h *opmCommunityProductServiceHandler) Lists(ctx context.Context, in *OpmCommunityProductListRequest, out *OpmCommunityProductResponse) error {
	return h.OpmCommunityProductServiceHandler.Lists(ctx, in, out)
}

func (h *opmCommunityProductServiceHandler) UpdateStatus(ctx context.Context, in *OpmCommunityProduct, out *Response) error {
	return h.OpmCommunityProductServiceHandler.UpdateStatus(ctx, in, out)
}
