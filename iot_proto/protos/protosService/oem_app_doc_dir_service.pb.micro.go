// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: oem_app_doc_dir_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OemAppDocDirService service

func NewOemAppDocDirServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OemAppDocDirService.Create",
			Path:    []string{"/v1/oemAppDocDir/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocDirService.Delete",
			Path:    []string{"/v1/oemAppDocDir/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocDirService.DeleteById",
			Path:    []string{"/v1/oemAppDocDir/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocDirService.DeleteByIds",
			Path:    []string{"/v1/oemAppDocDir/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocDirService.Update",
			Path:    []string{"/v1/oemAppDocDir/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocDirService.UpdateAll",
			Path:    []string{"/v1/oemAppDocDir/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocDirService.UpdateFields",
			Path:    []string{"/v1/oemAppDocDir/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocDirService.FindById",
			Path:    []string{"/v1/oemAppDocDir/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocDirService.Find",
			Path:    []string{"/v1/oemAppDocDir/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocDirService.Lists",
			Path:    []string{"/v1/oemAppDocDir/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocDirService.CreateBatch",
			Path:    []string{"/v1/oemAppDocDir/createBatch"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OemAppDocDirService service

type OemAppDocDirService interface {
	//创建
	Create(ctx context.Context, in *OemAppDocDir, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OemAppDocDir, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OemAppDocDir, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OemAppDocDirBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OemAppDocDir, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OemAppDocDir, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OemAppDocDirUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OemAppDocDirFilter, opts ...client.CallOption) (*OemAppDocDirResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OemAppDocDirFilter, opts ...client.CallOption) (*OemAppDocDirResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OemAppDocDirListRequest, opts ...client.CallOption) (*OemAppDocDirResponse, error)
	//批量创建
	CreateBatch(ctx context.Context, in *OemAppDocDirBatchRequest, opts ...client.CallOption) (*Response, error)
}

type oemAppDocDirService struct {
	c    client.Client
	name string
}

func NewOemAppDocDirService(name string, c client.Client) OemAppDocDirService {
	return &oemAppDocDirService{
		c:    c,
		name: name,
	}
}

func (c *oemAppDocDirService) Create(ctx context.Context, in *OemAppDocDir, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppDocDirService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocDirService) Delete(ctx context.Context, in *OemAppDocDir, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppDocDirService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocDirService) DeleteById(ctx context.Context, in *OemAppDocDir, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppDocDirService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocDirService) DeleteByIds(ctx context.Context, in *OemAppDocDirBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppDocDirService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocDirService) Update(ctx context.Context, in *OemAppDocDir, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppDocDirService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocDirService) UpdateAll(ctx context.Context, in *OemAppDocDir, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppDocDirService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocDirService) UpdateFields(ctx context.Context, in *OemAppDocDirUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppDocDirService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocDirService) FindById(ctx context.Context, in *OemAppDocDirFilter, opts ...client.CallOption) (*OemAppDocDirResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppDocDirService.FindById", in)
	out := new(OemAppDocDirResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocDirService) Find(ctx context.Context, in *OemAppDocDirFilter, opts ...client.CallOption) (*OemAppDocDirResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppDocDirService.Find", in)
	out := new(OemAppDocDirResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocDirService) Lists(ctx context.Context, in *OemAppDocDirListRequest, opts ...client.CallOption) (*OemAppDocDirResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppDocDirService.Lists", in)
	out := new(OemAppDocDirResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocDirService) CreateBatch(ctx context.Context, in *OemAppDocDirBatchRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppDocDirService.CreateBatch", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OemAppDocDirService service

type OemAppDocDirServiceHandler interface {
	//创建
	Create(context.Context, *OemAppDocDir, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OemAppDocDir, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OemAppDocDir, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OemAppDocDirBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OemAppDocDir, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OemAppDocDir, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OemAppDocDirUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OemAppDocDirFilter, *OemAppDocDirResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OemAppDocDirFilter, *OemAppDocDirResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OemAppDocDirListRequest, *OemAppDocDirResponse) error
	//批量创建
	CreateBatch(context.Context, *OemAppDocDirBatchRequest, *Response) error
}

func RegisterOemAppDocDirServiceHandler(s server.Server, hdlr OemAppDocDirServiceHandler, opts ...server.HandlerOption) error {
	type oemAppDocDirService interface {
		Create(ctx context.Context, in *OemAppDocDir, out *Response) error
		Delete(ctx context.Context, in *OemAppDocDir, out *Response) error
		DeleteById(ctx context.Context, in *OemAppDocDir, out *Response) error
		DeleteByIds(ctx context.Context, in *OemAppDocDirBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OemAppDocDir, out *Response) error
		UpdateAll(ctx context.Context, in *OemAppDocDir, out *Response) error
		UpdateFields(ctx context.Context, in *OemAppDocDirUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OemAppDocDirFilter, out *OemAppDocDirResponse) error
		Find(ctx context.Context, in *OemAppDocDirFilter, out *OemAppDocDirResponse) error
		Lists(ctx context.Context, in *OemAppDocDirListRequest, out *OemAppDocDirResponse) error
		CreateBatch(ctx context.Context, in *OemAppDocDirBatchRequest, out *Response) error
	}
	type OemAppDocDirService struct {
		oemAppDocDirService
	}
	h := &oemAppDocDirServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocDirService.Create",
		Path:    []string{"/v1/oemAppDocDir/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocDirService.Delete",
		Path:    []string{"/v1/oemAppDocDir/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocDirService.DeleteById",
		Path:    []string{"/v1/oemAppDocDir/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocDirService.DeleteByIds",
		Path:    []string{"/v1/oemAppDocDir/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocDirService.Update",
		Path:    []string{"/v1/oemAppDocDir/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocDirService.UpdateAll",
		Path:    []string{"/v1/oemAppDocDir/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocDirService.UpdateFields",
		Path:    []string{"/v1/oemAppDocDir/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocDirService.FindById",
		Path:    []string{"/v1/oemAppDocDir/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocDirService.Find",
		Path:    []string{"/v1/oemAppDocDir/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocDirService.Lists",
		Path:    []string{"/v1/oemAppDocDir/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocDirService.CreateBatch",
		Path:    []string{"/v1/oemAppDocDir/createBatch"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OemAppDocDirService{h}, opts...))
}

type oemAppDocDirServiceHandler struct {
	OemAppDocDirServiceHandler
}

func (h *oemAppDocDirServiceHandler) Create(ctx context.Context, in *OemAppDocDir, out *Response) error {
	return h.OemAppDocDirServiceHandler.Create(ctx, in, out)
}

func (h *oemAppDocDirServiceHandler) Delete(ctx context.Context, in *OemAppDocDir, out *Response) error {
	return h.OemAppDocDirServiceHandler.Delete(ctx, in, out)
}

func (h *oemAppDocDirServiceHandler) DeleteById(ctx context.Context, in *OemAppDocDir, out *Response) error {
	return h.OemAppDocDirServiceHandler.DeleteById(ctx, in, out)
}

func (h *oemAppDocDirServiceHandler) DeleteByIds(ctx context.Context, in *OemAppDocDirBatchDeleteRequest, out *Response) error {
	return h.OemAppDocDirServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *oemAppDocDirServiceHandler) Update(ctx context.Context, in *OemAppDocDir, out *Response) error {
	return h.OemAppDocDirServiceHandler.Update(ctx, in, out)
}

func (h *oemAppDocDirServiceHandler) UpdateAll(ctx context.Context, in *OemAppDocDir, out *Response) error {
	return h.OemAppDocDirServiceHandler.UpdateAll(ctx, in, out)
}

func (h *oemAppDocDirServiceHandler) UpdateFields(ctx context.Context, in *OemAppDocDirUpdateFieldsRequest, out *Response) error {
	return h.OemAppDocDirServiceHandler.UpdateFields(ctx, in, out)
}

func (h *oemAppDocDirServiceHandler) FindById(ctx context.Context, in *OemAppDocDirFilter, out *OemAppDocDirResponse) error {
	return h.OemAppDocDirServiceHandler.FindById(ctx, in, out)
}

func (h *oemAppDocDirServiceHandler) Find(ctx context.Context, in *OemAppDocDirFilter, out *OemAppDocDirResponse) error {
	return h.OemAppDocDirServiceHandler.Find(ctx, in, out)
}

func (h *oemAppDocDirServiceHandler) Lists(ctx context.Context, in *OemAppDocDirListRequest, out *OemAppDocDirResponse) error {
	return h.OemAppDocDirServiceHandler.Lists(ctx, in, out)
}

func (h *oemAppDocDirServiceHandler) CreateBatch(ctx context.Context, in *OemAppDocDirBatchRequest, out *Response) error {
	return h.OemAppDocDirServiceHandler.CreateBatch(ctx, in, out)
}
