// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pm_firmware_version_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PmFirmwareVersionService service

func NewPmFirmwareVersionServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "PmFirmwareVersionService.Create",
			Path:    []string{"/v1/pmFirmwareVersion/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmFirmwareVersionService.Delete",
			Path:    []string{"/v1/pmFirmwareVersion/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmFirmwareVersionService.DeleteById",
			Path:    []string{"/v1/pmFirmwareVersion/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmFirmwareVersionService.DeleteByIds",
			Path:    []string{"/v1/pmFirmwareVersion/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmFirmwareVersionService.Update",
			Path:    []string{"/v1/pmFirmwareVersion/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmFirmwareVersionService.UpdateAll",
			Path:    []string{"/v1/pmFirmwareVersion/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmFirmwareVersionService.UpdateFields",
			Path:    []string{"/v1/pmFirmwareVersion/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmFirmwareVersionService.FindById",
			Path:    []string{"/v1/pmFirmwareVersion/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmFirmwareVersionService.Find",
			Path:    []string{"/v1/pmFirmwareVersion/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmFirmwareVersionService.Lists",
			Path:    []string{"/v1/pmFirmwareVersion/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmFirmwareVersionService.ModuleFirmwareVersionList",
			Path:    []string{"/v1/pmFirmwareVersion/moduleFirmwareVersionList"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmFirmwareVersionService.UpdateStatusByFirmware",
			Path:    []string{"/v1/pmFirmwareVersion/updateStatusByFirmware"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for PmFirmwareVersionService service

type PmFirmwareVersionService interface {
	//创建
	Create(ctx context.Context, in *PmFirmwareVersion, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *PmFirmwareVersion, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *PmFirmwareVersion, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *PmFirmwareVersionBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *PmFirmwareVersion, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *PmFirmwareVersion, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *PmFirmwareVersionUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *PmFirmwareVersionFilter, opts ...client.CallOption) (*PmFirmwareVersionResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *PmFirmwareVersionFilter, opts ...client.CallOption) (*PmFirmwareVersionResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *PmFirmwareVersionListRequest, opts ...client.CallOption) (*PmFirmwareVersionResponse, error)
	//查询可更换的固件列表
	ModuleFirmwareVersionList(ctx context.Context, in *ModuleFirmwareVersionRequest, opts ...client.CallOption) (*PmFirmwareVersionResponse, error)
	//修改状态
	UpdateStatusByFirmware(ctx context.Context, in *PmFirmwareVersionFilter, opts ...client.CallOption) (*Response, error)
}

type pmFirmwareVersionService struct {
	c    client.Client
	name string
}

func NewPmFirmwareVersionService(name string, c client.Client) PmFirmwareVersionService {
	return &pmFirmwareVersionService{
		c:    c,
		name: name,
	}
}

func (c *pmFirmwareVersionService) Create(ctx context.Context, in *PmFirmwareVersion, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmFirmwareVersionService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmFirmwareVersionService) Delete(ctx context.Context, in *PmFirmwareVersion, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmFirmwareVersionService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmFirmwareVersionService) DeleteById(ctx context.Context, in *PmFirmwareVersion, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmFirmwareVersionService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmFirmwareVersionService) DeleteByIds(ctx context.Context, in *PmFirmwareVersionBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmFirmwareVersionService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmFirmwareVersionService) Update(ctx context.Context, in *PmFirmwareVersion, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmFirmwareVersionService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmFirmwareVersionService) UpdateAll(ctx context.Context, in *PmFirmwareVersion, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmFirmwareVersionService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmFirmwareVersionService) UpdateFields(ctx context.Context, in *PmFirmwareVersionUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmFirmwareVersionService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmFirmwareVersionService) FindById(ctx context.Context, in *PmFirmwareVersionFilter, opts ...client.CallOption) (*PmFirmwareVersionResponse, error) {
	req := c.c.NewRequest(c.name, "PmFirmwareVersionService.FindById", in)
	out := new(PmFirmwareVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmFirmwareVersionService) Find(ctx context.Context, in *PmFirmwareVersionFilter, opts ...client.CallOption) (*PmFirmwareVersionResponse, error) {
	req := c.c.NewRequest(c.name, "PmFirmwareVersionService.Find", in)
	out := new(PmFirmwareVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmFirmwareVersionService) Lists(ctx context.Context, in *PmFirmwareVersionListRequest, opts ...client.CallOption) (*PmFirmwareVersionResponse, error) {
	req := c.c.NewRequest(c.name, "PmFirmwareVersionService.Lists", in)
	out := new(PmFirmwareVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmFirmwareVersionService) ModuleFirmwareVersionList(ctx context.Context, in *ModuleFirmwareVersionRequest, opts ...client.CallOption) (*PmFirmwareVersionResponse, error) {
	req := c.c.NewRequest(c.name, "PmFirmwareVersionService.ModuleFirmwareVersionList", in)
	out := new(PmFirmwareVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmFirmwareVersionService) UpdateStatusByFirmware(ctx context.Context, in *PmFirmwareVersionFilter, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmFirmwareVersionService.UpdateStatusByFirmware", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PmFirmwareVersionService service

type PmFirmwareVersionServiceHandler interface {
	//创建
	Create(context.Context, *PmFirmwareVersion, *Response) error
	//匹配多条件删除
	Delete(context.Context, *PmFirmwareVersion, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *PmFirmwareVersion, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *PmFirmwareVersionBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *PmFirmwareVersion, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *PmFirmwareVersion, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *PmFirmwareVersionUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *PmFirmwareVersionFilter, *PmFirmwareVersionResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *PmFirmwareVersionFilter, *PmFirmwareVersionResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *PmFirmwareVersionListRequest, *PmFirmwareVersionResponse) error
	//查询可更换的固件列表
	ModuleFirmwareVersionList(context.Context, *ModuleFirmwareVersionRequest, *PmFirmwareVersionResponse) error
	//修改状态
	UpdateStatusByFirmware(context.Context, *PmFirmwareVersionFilter, *Response) error
}

func RegisterPmFirmwareVersionServiceHandler(s server.Server, hdlr PmFirmwareVersionServiceHandler, opts ...server.HandlerOption) error {
	type pmFirmwareVersionService interface {
		Create(ctx context.Context, in *PmFirmwareVersion, out *Response) error
		Delete(ctx context.Context, in *PmFirmwareVersion, out *Response) error
		DeleteById(ctx context.Context, in *PmFirmwareVersion, out *Response) error
		DeleteByIds(ctx context.Context, in *PmFirmwareVersionBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *PmFirmwareVersion, out *Response) error
		UpdateAll(ctx context.Context, in *PmFirmwareVersion, out *Response) error
		UpdateFields(ctx context.Context, in *PmFirmwareVersionUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *PmFirmwareVersionFilter, out *PmFirmwareVersionResponse) error
		Find(ctx context.Context, in *PmFirmwareVersionFilter, out *PmFirmwareVersionResponse) error
		Lists(ctx context.Context, in *PmFirmwareVersionListRequest, out *PmFirmwareVersionResponse) error
		ModuleFirmwareVersionList(ctx context.Context, in *ModuleFirmwareVersionRequest, out *PmFirmwareVersionResponse) error
		UpdateStatusByFirmware(ctx context.Context, in *PmFirmwareVersionFilter, out *Response) error
	}
	type PmFirmwareVersionService struct {
		pmFirmwareVersionService
	}
	h := &pmFirmwareVersionServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmFirmwareVersionService.Create",
		Path:    []string{"/v1/pmFirmwareVersion/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmFirmwareVersionService.Delete",
		Path:    []string{"/v1/pmFirmwareVersion/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmFirmwareVersionService.DeleteById",
		Path:    []string{"/v1/pmFirmwareVersion/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmFirmwareVersionService.DeleteByIds",
		Path:    []string{"/v1/pmFirmwareVersion/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmFirmwareVersionService.Update",
		Path:    []string{"/v1/pmFirmwareVersion/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmFirmwareVersionService.UpdateAll",
		Path:    []string{"/v1/pmFirmwareVersion/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmFirmwareVersionService.UpdateFields",
		Path:    []string{"/v1/pmFirmwareVersion/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmFirmwareVersionService.FindById",
		Path:    []string{"/v1/pmFirmwareVersion/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmFirmwareVersionService.Find",
		Path:    []string{"/v1/pmFirmwareVersion/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmFirmwareVersionService.Lists",
		Path:    []string{"/v1/pmFirmwareVersion/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmFirmwareVersionService.ModuleFirmwareVersionList",
		Path:    []string{"/v1/pmFirmwareVersion/moduleFirmwareVersionList"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmFirmwareVersionService.UpdateStatusByFirmware",
		Path:    []string{"/v1/pmFirmwareVersion/updateStatusByFirmware"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&PmFirmwareVersionService{h}, opts...))
}

type pmFirmwareVersionServiceHandler struct {
	PmFirmwareVersionServiceHandler
}

func (h *pmFirmwareVersionServiceHandler) Create(ctx context.Context, in *PmFirmwareVersion, out *Response) error {
	return h.PmFirmwareVersionServiceHandler.Create(ctx, in, out)
}

func (h *pmFirmwareVersionServiceHandler) Delete(ctx context.Context, in *PmFirmwareVersion, out *Response) error {
	return h.PmFirmwareVersionServiceHandler.Delete(ctx, in, out)
}

func (h *pmFirmwareVersionServiceHandler) DeleteById(ctx context.Context, in *PmFirmwareVersion, out *Response) error {
	return h.PmFirmwareVersionServiceHandler.DeleteById(ctx, in, out)
}

func (h *pmFirmwareVersionServiceHandler) DeleteByIds(ctx context.Context, in *PmFirmwareVersionBatchDeleteRequest, out *Response) error {
	return h.PmFirmwareVersionServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *pmFirmwareVersionServiceHandler) Update(ctx context.Context, in *PmFirmwareVersion, out *Response) error {
	return h.PmFirmwareVersionServiceHandler.Update(ctx, in, out)
}

func (h *pmFirmwareVersionServiceHandler) UpdateAll(ctx context.Context, in *PmFirmwareVersion, out *Response) error {
	return h.PmFirmwareVersionServiceHandler.UpdateAll(ctx, in, out)
}

func (h *pmFirmwareVersionServiceHandler) UpdateFields(ctx context.Context, in *PmFirmwareVersionUpdateFieldsRequest, out *Response) error {
	return h.PmFirmwareVersionServiceHandler.UpdateFields(ctx, in, out)
}

func (h *pmFirmwareVersionServiceHandler) FindById(ctx context.Context, in *PmFirmwareVersionFilter, out *PmFirmwareVersionResponse) error {
	return h.PmFirmwareVersionServiceHandler.FindById(ctx, in, out)
}

func (h *pmFirmwareVersionServiceHandler) Find(ctx context.Context, in *PmFirmwareVersionFilter, out *PmFirmwareVersionResponse) error {
	return h.PmFirmwareVersionServiceHandler.Find(ctx, in, out)
}

func (h *pmFirmwareVersionServiceHandler) Lists(ctx context.Context, in *PmFirmwareVersionListRequest, out *PmFirmwareVersionResponse) error {
	return h.PmFirmwareVersionServiceHandler.Lists(ctx, in, out)
}

func (h *pmFirmwareVersionServiceHandler) ModuleFirmwareVersionList(ctx context.Context, in *ModuleFirmwareVersionRequest, out *PmFirmwareVersionResponse) error {
	return h.PmFirmwareVersionServiceHandler.ModuleFirmwareVersionList(ctx, in, out)
}

func (h *pmFirmwareVersionServiceHandler) UpdateStatusByFirmware(ctx context.Context, in *PmFirmwareVersionFilter, out *Response) error {
	return h.PmFirmwareVersionServiceHandler.UpdateStatusByFirmware(ctx, in, out)
}
