// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: scene_template_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SceneTemplateService service

func NewSceneTemplateServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "SceneTemplateService.Create",
			Path:    []string{"/v1/sceneTemplate/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneTemplateService.Delete",
			Path:    []string{"/v1/sceneTemplate/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneTemplateService.DeleteById",
			Path:    []string{"/v1/sceneTemplate/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneTemplateService.DeleteByIds",
			Path:    []string{"/v1/sceneTemplate/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneTemplateService.Update",
			Path:    []string{"/v1/sceneTemplate/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneTemplateService.UpdateAll",
			Path:    []string{"/v1/sceneTemplate/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneTemplateService.UpdateFields",
			Path:    []string{"/v1/sceneTemplate/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneTemplateService.FindById",
			Path:    []string{"/v1/sceneTemplate/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneTemplateService.Find",
			Path:    []string{"/v1/sceneTemplate/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneTemplateService.Lists",
			Path:    []string{"/v1/sceneTemplate/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for SceneTemplateService service

type SceneTemplateService interface {
	//创建
	Create(ctx context.Context, in *SceneTemplate, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *SceneTemplate, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *SceneTemplate, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *SceneTemplateBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *SceneTemplate, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *SceneTemplate, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *SceneTemplateUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *SceneTemplateFilter, opts ...client.CallOption) (*SceneTemplateResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *SceneTemplateFilter, opts ...client.CallOption) (*SceneTemplateResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *SceneTemplateListRequest, opts ...client.CallOption) (*SceneTemplateResponse, error)
}

type sceneTemplateService struct {
	c    client.Client
	name string
}

func NewSceneTemplateService(name string, c client.Client) SceneTemplateService {
	return &sceneTemplateService{
		c:    c,
		name: name,
	}
}

func (c *sceneTemplateService) Create(ctx context.Context, in *SceneTemplate, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SceneTemplateService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneTemplateService) Delete(ctx context.Context, in *SceneTemplate, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SceneTemplateService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneTemplateService) DeleteById(ctx context.Context, in *SceneTemplate, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SceneTemplateService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneTemplateService) DeleteByIds(ctx context.Context, in *SceneTemplateBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SceneTemplateService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneTemplateService) Update(ctx context.Context, in *SceneTemplate, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SceneTemplateService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneTemplateService) UpdateAll(ctx context.Context, in *SceneTemplate, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SceneTemplateService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneTemplateService) UpdateFields(ctx context.Context, in *SceneTemplateUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SceneTemplateService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneTemplateService) FindById(ctx context.Context, in *SceneTemplateFilter, opts ...client.CallOption) (*SceneTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "SceneTemplateService.FindById", in)
	out := new(SceneTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneTemplateService) Find(ctx context.Context, in *SceneTemplateFilter, opts ...client.CallOption) (*SceneTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "SceneTemplateService.Find", in)
	out := new(SceneTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneTemplateService) Lists(ctx context.Context, in *SceneTemplateListRequest, opts ...client.CallOption) (*SceneTemplateResponse, error) {
	req := c.c.NewRequest(c.name, "SceneTemplateService.Lists", in)
	out := new(SceneTemplateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SceneTemplateService service

type SceneTemplateServiceHandler interface {
	//创建
	Create(context.Context, *SceneTemplate, *Response) error
	//匹配多条件删除
	Delete(context.Context, *SceneTemplate, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *SceneTemplate, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *SceneTemplateBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *SceneTemplate, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *SceneTemplate, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *SceneTemplateUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *SceneTemplateFilter, *SceneTemplateResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *SceneTemplateFilter, *SceneTemplateResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *SceneTemplateListRequest, *SceneTemplateResponse) error
}

func RegisterSceneTemplateServiceHandler(s server.Server, hdlr SceneTemplateServiceHandler, opts ...server.HandlerOption) error {
	type sceneTemplateService interface {
		Create(ctx context.Context, in *SceneTemplate, out *Response) error
		Delete(ctx context.Context, in *SceneTemplate, out *Response) error
		DeleteById(ctx context.Context, in *SceneTemplate, out *Response) error
		DeleteByIds(ctx context.Context, in *SceneTemplateBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *SceneTemplate, out *Response) error
		UpdateAll(ctx context.Context, in *SceneTemplate, out *Response) error
		UpdateFields(ctx context.Context, in *SceneTemplateUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *SceneTemplateFilter, out *SceneTemplateResponse) error
		Find(ctx context.Context, in *SceneTemplateFilter, out *SceneTemplateResponse) error
		Lists(ctx context.Context, in *SceneTemplateListRequest, out *SceneTemplateResponse) error
	}
	type SceneTemplateService struct {
		sceneTemplateService
	}
	h := &sceneTemplateServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneTemplateService.Create",
		Path:    []string{"/v1/sceneTemplate/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneTemplateService.Delete",
		Path:    []string{"/v1/sceneTemplate/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneTemplateService.DeleteById",
		Path:    []string{"/v1/sceneTemplate/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneTemplateService.DeleteByIds",
		Path:    []string{"/v1/sceneTemplate/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneTemplateService.Update",
		Path:    []string{"/v1/sceneTemplate/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneTemplateService.UpdateAll",
		Path:    []string{"/v1/sceneTemplate/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneTemplateService.UpdateFields",
		Path:    []string{"/v1/sceneTemplate/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneTemplateService.FindById",
		Path:    []string{"/v1/sceneTemplate/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneTemplateService.Find",
		Path:    []string{"/v1/sceneTemplate/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneTemplateService.Lists",
		Path:    []string{"/v1/sceneTemplate/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&SceneTemplateService{h}, opts...))
}

type sceneTemplateServiceHandler struct {
	SceneTemplateServiceHandler
}

func (h *sceneTemplateServiceHandler) Create(ctx context.Context, in *SceneTemplate, out *Response) error {
	return h.SceneTemplateServiceHandler.Create(ctx, in, out)
}

func (h *sceneTemplateServiceHandler) Delete(ctx context.Context, in *SceneTemplate, out *Response) error {
	return h.SceneTemplateServiceHandler.Delete(ctx, in, out)
}

func (h *sceneTemplateServiceHandler) DeleteById(ctx context.Context, in *SceneTemplate, out *Response) error {
	return h.SceneTemplateServiceHandler.DeleteById(ctx, in, out)
}

func (h *sceneTemplateServiceHandler) DeleteByIds(ctx context.Context, in *SceneTemplateBatchDeleteRequest, out *Response) error {
	return h.SceneTemplateServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *sceneTemplateServiceHandler) Update(ctx context.Context, in *SceneTemplate, out *Response) error {
	return h.SceneTemplateServiceHandler.Update(ctx, in, out)
}

func (h *sceneTemplateServiceHandler) UpdateAll(ctx context.Context, in *SceneTemplate, out *Response) error {
	return h.SceneTemplateServiceHandler.UpdateAll(ctx, in, out)
}

func (h *sceneTemplateServiceHandler) UpdateFields(ctx context.Context, in *SceneTemplateUpdateFieldsRequest, out *Response) error {
	return h.SceneTemplateServiceHandler.UpdateFields(ctx, in, out)
}

func (h *sceneTemplateServiceHandler) FindById(ctx context.Context, in *SceneTemplateFilter, out *SceneTemplateResponse) error {
	return h.SceneTemplateServiceHandler.FindById(ctx, in, out)
}

func (h *sceneTemplateServiceHandler) Find(ctx context.Context, in *SceneTemplateFilter, out *SceneTemplateResponse) error {
	return h.SceneTemplateServiceHandler.Find(ctx, in, out)
}

func (h *sceneTemplateServiceHandler) Lists(ctx context.Context, in *SceneTemplateListRequest, out *SceneTemplateResponse) error {
	return h.SceneTemplateServiceHandler.Lists(ctx, in, out)
}
