// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sys_cloud_platform_service.gen.proto

package protosService

import (
	// _ "/api"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SysCloudPlatformService service

func NewSysCloudPlatformServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "SysCloudPlatformService.Create",
			Path:    []string{"/v1/sysCloudPlatform/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysCloudPlatformService.Delete",
			Path:    []string{"/v1/sysCloudPlatform/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysCloudPlatformService.DeleteById",
			Path:    []string{"/v1/sysCloudPlatform/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysCloudPlatformService.DeleteByIds",
			Path:    []string{"/v1/sysCloudPlatform/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysCloudPlatformService.Update",
			Path:    []string{"/v1/sysCloudPlatform/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysCloudPlatformService.UpdateAll",
			Path:    []string{"/v1/sysCloudPlatform/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysCloudPlatformService.UpdateFields",
			Path:    []string{"/v1/sysCloudPlatform/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysCloudPlatformService.FindById",
			Path:    []string{"/v1/sysCloudPlatform/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysCloudPlatformService.Find",
			Path:    []string{"/v1/sysCloudPlatform/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysCloudPlatformService.Lists",
			Path:    []string{"/v1/sysCloudPlatform/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysCloudPlatformService.UpdateStatus",
			Path:    []string{"/v1/sysCloudPlatform/updateStatus "},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for SysCloudPlatformService service

type SysCloudPlatformService interface {
	//创建
	Create(ctx context.Context, in *SysCloudPlatform, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *SysCloudPlatform, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *SysCloudPlatform, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *SysCloudPlatformBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *SysCloudPlatform, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *SysCloudPlatform, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *SysCloudPlatformUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *SysCloudPlatformFilter, opts ...client.CallOption) (*SysCloudPlatformResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *SysCloudPlatformFilter, opts ...client.CallOption) (*SysCloudPlatformResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *SysCloudPlatformListRequest, opts ...client.CallOption) (*SysCloudPlatformResponse, error)
	//根据主键更新所有字段
	UpdateStatus(ctx context.Context, in *SysCloudPlatform, opts ...client.CallOption) (*Response, error)
}

type sysCloudPlatformService struct {
	c    client.Client
	name string
}

func NewSysCloudPlatformService(name string, c client.Client) SysCloudPlatformService {
	return &sysCloudPlatformService{
		c:    c,
		name: name,
	}
}

func (c *sysCloudPlatformService) Create(ctx context.Context, in *SysCloudPlatform, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysCloudPlatformService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysCloudPlatformService) Delete(ctx context.Context, in *SysCloudPlatform, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysCloudPlatformService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysCloudPlatformService) DeleteById(ctx context.Context, in *SysCloudPlatform, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysCloudPlatformService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysCloudPlatformService) DeleteByIds(ctx context.Context, in *SysCloudPlatformBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysCloudPlatformService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysCloudPlatformService) Update(ctx context.Context, in *SysCloudPlatform, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysCloudPlatformService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysCloudPlatformService) UpdateAll(ctx context.Context, in *SysCloudPlatform, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysCloudPlatformService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysCloudPlatformService) UpdateFields(ctx context.Context, in *SysCloudPlatformUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysCloudPlatformService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysCloudPlatformService) FindById(ctx context.Context, in *SysCloudPlatformFilter, opts ...client.CallOption) (*SysCloudPlatformResponse, error) {
	req := c.c.NewRequest(c.name, "SysCloudPlatformService.FindById", in)
	out := new(SysCloudPlatformResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysCloudPlatformService) Find(ctx context.Context, in *SysCloudPlatformFilter, opts ...client.CallOption) (*SysCloudPlatformResponse, error) {
	req := c.c.NewRequest(c.name, "SysCloudPlatformService.Find", in)
	out := new(SysCloudPlatformResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysCloudPlatformService) Lists(ctx context.Context, in *SysCloudPlatformListRequest, opts ...client.CallOption) (*SysCloudPlatformResponse, error) {
	req := c.c.NewRequest(c.name, "SysCloudPlatformService.Lists", in)
	out := new(SysCloudPlatformResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysCloudPlatformService) UpdateStatus(ctx context.Context, in *SysCloudPlatform, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysCloudPlatformService.UpdateStatus", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SysCloudPlatformService service

type SysCloudPlatformServiceHandler interface {
	//创建
	Create(context.Context, *SysCloudPlatform, *Response) error
	//匹配多条件删除
	Delete(context.Context, *SysCloudPlatform, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *SysCloudPlatform, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *SysCloudPlatformBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *SysCloudPlatform, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *SysCloudPlatform, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *SysCloudPlatformUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *SysCloudPlatformFilter, *SysCloudPlatformResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *SysCloudPlatformFilter, *SysCloudPlatformResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *SysCloudPlatformListRequest, *SysCloudPlatformResponse) error
	//根据主键更新所有字段
	UpdateStatus(context.Context, *SysCloudPlatform, *Response) error
}

func RegisterSysCloudPlatformServiceHandler(s server.Server, hdlr SysCloudPlatformServiceHandler, opts ...server.HandlerOption) error {
	type sysCloudPlatformService interface {
		Create(ctx context.Context, in *SysCloudPlatform, out *Response) error
		Delete(ctx context.Context, in *SysCloudPlatform, out *Response) error
		DeleteById(ctx context.Context, in *SysCloudPlatform, out *Response) error
		DeleteByIds(ctx context.Context, in *SysCloudPlatformBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *SysCloudPlatform, out *Response) error
		UpdateAll(ctx context.Context, in *SysCloudPlatform, out *Response) error
		UpdateFields(ctx context.Context, in *SysCloudPlatformUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *SysCloudPlatformFilter, out *SysCloudPlatformResponse) error
		Find(ctx context.Context, in *SysCloudPlatformFilter, out *SysCloudPlatformResponse) error
		Lists(ctx context.Context, in *SysCloudPlatformListRequest, out *SysCloudPlatformResponse) error
		UpdateStatus(ctx context.Context, in *SysCloudPlatform, out *Response) error
	}
	type SysCloudPlatformService struct {
		sysCloudPlatformService
	}
	h := &sysCloudPlatformServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysCloudPlatformService.Create",
		Path:    []string{"/v1/sysCloudPlatform/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysCloudPlatformService.Delete",
		Path:    []string{"/v1/sysCloudPlatform/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysCloudPlatformService.DeleteById",
		Path:    []string{"/v1/sysCloudPlatform/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysCloudPlatformService.DeleteByIds",
		Path:    []string{"/v1/sysCloudPlatform/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysCloudPlatformService.Update",
		Path:    []string{"/v1/sysCloudPlatform/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysCloudPlatformService.UpdateAll",
		Path:    []string{"/v1/sysCloudPlatform/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysCloudPlatformService.UpdateFields",
		Path:    []string{"/v1/sysCloudPlatform/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysCloudPlatformService.FindById",
		Path:    []string{"/v1/sysCloudPlatform/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysCloudPlatformService.Find",
		Path:    []string{"/v1/sysCloudPlatform/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysCloudPlatformService.Lists",
		Path:    []string{"/v1/sysCloudPlatform/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysCloudPlatformService.UpdateStatus",
		Path:    []string{"/v1/sysCloudPlatform/updateStatus "},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&SysCloudPlatformService{h}, opts...))
}

type sysCloudPlatformServiceHandler struct {
	SysCloudPlatformServiceHandler
}

func (h *sysCloudPlatformServiceHandler) Create(ctx context.Context, in *SysCloudPlatform, out *Response) error {
	return h.SysCloudPlatformServiceHandler.Create(ctx, in, out)
}

func (h *sysCloudPlatformServiceHandler) Delete(ctx context.Context, in *SysCloudPlatform, out *Response) error {
	return h.SysCloudPlatformServiceHandler.Delete(ctx, in, out)
}

func (h *sysCloudPlatformServiceHandler) DeleteById(ctx context.Context, in *SysCloudPlatform, out *Response) error {
	return h.SysCloudPlatformServiceHandler.DeleteById(ctx, in, out)
}

func (h *sysCloudPlatformServiceHandler) DeleteByIds(ctx context.Context, in *SysCloudPlatformBatchDeleteRequest, out *Response) error {
	return h.SysCloudPlatformServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *sysCloudPlatformServiceHandler) Update(ctx context.Context, in *SysCloudPlatform, out *Response) error {
	return h.SysCloudPlatformServiceHandler.Update(ctx, in, out)
}

func (h *sysCloudPlatformServiceHandler) UpdateAll(ctx context.Context, in *SysCloudPlatform, out *Response) error {
	return h.SysCloudPlatformServiceHandler.UpdateAll(ctx, in, out)
}

func (h *sysCloudPlatformServiceHandler) UpdateFields(ctx context.Context, in *SysCloudPlatformUpdateFieldsRequest, out *Response) error {
	return h.SysCloudPlatformServiceHandler.UpdateFields(ctx, in, out)
}

func (h *sysCloudPlatformServiceHandler) FindById(ctx context.Context, in *SysCloudPlatformFilter, out *SysCloudPlatformResponse) error {
	return h.SysCloudPlatformServiceHandler.FindById(ctx, in, out)
}

func (h *sysCloudPlatformServiceHandler) Find(ctx context.Context, in *SysCloudPlatformFilter, out *SysCloudPlatformResponse) error {
	return h.SysCloudPlatformServiceHandler.Find(ctx, in, out)
}

func (h *sysCloudPlatformServiceHandler) Lists(ctx context.Context, in *SysCloudPlatformListRequest, out *SysCloudPlatformResponse) error {
	return h.SysCloudPlatformServiceHandler.Lists(ctx, in, out)
}

func (h *sysCloudPlatformServiceHandler) UpdateStatus(ctx context.Context, in *SysCloudPlatform, out *Response) error {
	return h.SysCloudPlatformServiceHandler.UpdateStatus(ctx, in, out)
}
