// Code generated by sgen.exe,2022-05-03 11:48:51. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: opm_firmware_model.proto

package protosService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//来源于数据表
type OpmFirmware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:唯一主键;comment:唯一主键;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"tenantId" gorm:"default:租户id（t_open_company.tenant_id）;comment:租户id（t_open_company.tenant_id）;size:6;"
	TenantId string `protobuf:"bytes,101,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// @inject_tag: json:"name" gorm:"default:固件名称;comment:固件名称;size:50;"
	Name string `protobuf:"bytes,102,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: json:"flag" gorm:"default:固件标识;comment:固件标识;size:50;"
	Flag string `protobuf:"bytes,103,opt,name=flag,proto3" json:"flag,omitempty"`
	// @inject_tag: json:"type" gorm:"default:固件类型;comment:固件类型;"
	Type string `protobuf:"bytes,104,opt,name=type,proto3" json:"type,omitempty"`
	// @inject_tag: json:"flashSize" gorm:"default:Flash大小;comment:Flash大小;size:10;"
	FlashSize int32 `protobuf:"varint,105,opt,name=flashSize,proto3" json:"flashSize,omitempty"`
	// @inject_tag: json:"upgradeChannel" gorm:"default:升级通道;comment:升级通道;size:10;"
	UpgradeChannel int32 `protobuf:"varint,106,opt,name=upgradeChannel,proto3" json:"upgradeChannel,omitempty"`
	// @inject_tag: json:"upgradeOvertime" gorm:"default:升级超时时间（秒）;comment:升级超时时间（秒）;size:10;"
	UpgradeOvertime int32 `protobuf:"varint,107,opt,name=upgradeOvertime,proto3" json:"upgradeOvertime,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态（1=启用 2=禁用）;comment:状态（1=启用 2=禁用）;size:10;"
	Status int32 `protobuf:"varint,108,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"remark" gorm:"default:备注;comment:备注;size:255;"
	Remark string `protobuf:"bytes,109,opt,name=remark,proto3" json:"remark,omitempty"`
	// @inject_tag: json:"version" gorm:"default:版本号;comment:版本号;size:255;"
	Version string `protobuf:"bytes,110,opt,name=version,proto3" json:"version,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,111,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:19;"
	UpdatedBy int64 `protobuf:"varint,112,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,113,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除标识（0-正常 1-删除）;comment:删除标识（0-正常 1-删除）;"
	DeletedAt       *timestamppb.Timestamp `protobuf:"bytes,114,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	VersionDesc     string                 `protobuf:"bytes,116,opt,name=VersionDesc,proto3" json:"VersionDesc,omitempty"`          //版本文件描述
	IsMust          int32                  `protobuf:"varint,117,opt,name=IsMust,proto3" json:"IsMust,omitempty"`                   //是否必须
	UpgradeMode     int32                  `protobuf:"varint,118,opt,name=UpgradeMode,proto3" json:"UpgradeMode,omitempty"`         //升级方式
	UpgradeFileName string                 `protobuf:"bytes,119,opt,name=UpgradeFileName,proto3" json:"UpgradeFileName,omitempty"`  //升级文件名称
	UpgradeFilePath string                 `protobuf:"bytes,120,opt,name=UpgradeFilePath,proto3" json:"UpgradeFilePath,omitempty"`  //升级文件地址
	UpgradeFileSize int64                  `protobuf:"varint,121,opt,name=UpgradeFileSize,proto3" json:"UpgradeFileSize,omitempty"` //升级文件尺寸
	UpgradeFileKey  string                 `protobuf:"bytes,122,opt,name=UpgradeFileKey,proto3" json:"UpgradeFileKey,omitempty"`    //升级文件key
	ProdFilePath    string                 `protobuf:"bytes,123,opt,name=ProdFilePath,proto3" json:"ProdFilePath,omitempty"`        //生成文件地址
	ProdFileSize    int64                  `protobuf:"varint,124,opt,name=ProdFileSize,proto3" json:"ProdFileSize,omitempty"`       //生成文件尺寸
	ProdFileKey     string                 `protobuf:"bytes,125,opt,name=ProdFileKey,proto3" json:"ProdFileKey,omitempty"`          //生成文件Key
	ProdFileName    string                 `protobuf:"bytes,126,opt,name=ProdFileName,proto3" json:"ProdFileName,omitempty"`        //生成文件名称
	FirmwareId      int64                  `protobuf:"varint,127,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`
	FirmwareKey     string                 `protobuf:"bytes,128,opt,name=firmwareKey,proto3" json:"firmwareKey,omitempty"` //固件Key
	// @inject_tag: json:"nameEn" gorm:"default:固件英文名称;comment:固件名称;size:100;"
	NameEn string `protobuf:"bytes,129,opt,name=nameEn,proto3" json:"nameEn,omitempty"`
	//是否查询有效版本
	IsQueryValidVersion bool `protobuf:"varint,130,opt,name=isQueryValidVersion,proto3" json:"isQueryValidVersion,omitempty"`
}

func (x *OpmFirmware) Reset() {
	*x = OpmFirmware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_firmware_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmFirmware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmFirmware) ProtoMessage() {}

func (x *OpmFirmware) ProtoReflect() protoreflect.Message {
	mi := &file_opm_firmware_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmFirmware.ProtoReflect.Descriptor instead.
func (*OpmFirmware) Descriptor() ([]byte, []int) {
	return file_opm_firmware_model_proto_rawDescGZIP(), []int{0}
}

func (x *OpmFirmware) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpmFirmware) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OpmFirmware) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpmFirmware) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

func (x *OpmFirmware) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OpmFirmware) GetFlashSize() int32 {
	if x != nil {
		return x.FlashSize
	}
	return 0
}

func (x *OpmFirmware) GetUpgradeChannel() int32 {
	if x != nil {
		return x.UpgradeChannel
	}
	return 0
}

func (x *OpmFirmware) GetUpgradeOvertime() int32 {
	if x != nil {
		return x.UpgradeOvertime
	}
	return 0
}

func (x *OpmFirmware) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OpmFirmware) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *OpmFirmware) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OpmFirmware) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OpmFirmware) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *OpmFirmware) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OpmFirmware) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *OpmFirmware) GetVersionDesc() string {
	if x != nil {
		return x.VersionDesc
	}
	return ""
}

func (x *OpmFirmware) GetIsMust() int32 {
	if x != nil {
		return x.IsMust
	}
	return 0
}

func (x *OpmFirmware) GetUpgradeMode() int32 {
	if x != nil {
		return x.UpgradeMode
	}
	return 0
}

func (x *OpmFirmware) GetUpgradeFileName() string {
	if x != nil {
		return x.UpgradeFileName
	}
	return ""
}

func (x *OpmFirmware) GetUpgradeFilePath() string {
	if x != nil {
		return x.UpgradeFilePath
	}
	return ""
}

func (x *OpmFirmware) GetUpgradeFileSize() int64 {
	if x != nil {
		return x.UpgradeFileSize
	}
	return 0
}

func (x *OpmFirmware) GetUpgradeFileKey() string {
	if x != nil {
		return x.UpgradeFileKey
	}
	return ""
}

func (x *OpmFirmware) GetProdFilePath() string {
	if x != nil {
		return x.ProdFilePath
	}
	return ""
}

func (x *OpmFirmware) GetProdFileSize() int64 {
	if x != nil {
		return x.ProdFileSize
	}
	return 0
}

func (x *OpmFirmware) GetProdFileKey() string {
	if x != nil {
		return x.ProdFileKey
	}
	return ""
}

func (x *OpmFirmware) GetProdFileName() string {
	if x != nil {
		return x.ProdFileName
	}
	return ""
}

func (x *OpmFirmware) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

func (x *OpmFirmware) GetFirmwareKey() string {
	if x != nil {
		return x.FirmwareKey
	}
	return ""
}

func (x *OpmFirmware) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *OpmFirmware) GetIsQueryValidVersion() bool {
	if x != nil {
		return x.IsQueryValidVersion
	}
	return false
}

type OpmFirmwareFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:唯一主键;comment:唯一主键;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"tenantId" gorm:"default:租户id（t_open_company.tenant_id）;comment:租户id（t_open_company.tenant_id）;size:6;"
	TenantId string `protobuf:"bytes,101,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// @inject_tag: json:"name" gorm:"default:固件名称;comment:固件名称;size:50;"
	Name string `protobuf:"bytes,102,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: json:"flag" gorm:"default:固件标识;comment:固件标识;size:50;"
	Flag string `protobuf:"bytes,103,opt,name=flag,proto3" json:"flag,omitempty"`
	// @inject_tag: json:"type" gorm:"default:固件类型;comment:固件类型;"
	Type string `protobuf:"bytes,104,opt,name=type,proto3" json:"type,omitempty"`
	// @inject_tag: json:"flashSize" gorm:"default:Flash大小;comment:Flash大小;size:10;"
	FlashSize int32 `protobuf:"varint,105,opt,name=flashSize,proto3" json:"flashSize,omitempty"`
	// @inject_tag: json:"upgradeChannel" gorm:"default:升级通道;comment:升级通道;size:10;"
	UpgradeChannel int32 `protobuf:"varint,106,opt,name=upgradeChannel,proto3" json:"upgradeChannel,omitempty"`
	// @inject_tag: json:"upgradeOvertime" gorm:"default:升级超时时间（秒）;comment:升级超时时间（秒）;size:10;"
	UpgradeOvertime int32 `protobuf:"varint,107,opt,name=upgradeOvertime,proto3" json:"upgradeOvertime,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态（1=启用 2=禁用）;comment:状态（1=启用 2=禁用）;size:10;"
	Status int32 `protobuf:"varint,108,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"remark" gorm:"default:备注;comment:备注;size:255;"
	Remark string `protobuf:"bytes,109,opt,name=remark,proto3" json:"remark,omitempty"`
	// @inject_tag: json:"version" gorm:"default:版本号;comment:版本号;size:255;"
	Version string `protobuf:"bytes,110,opt,name=version,proto3" json:"version,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,111,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:19;"
	UpdatedBy int64 `protobuf:"varint,112,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,113,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除标识（0-正常 1-删除）;comment:删除标识（0-正常 1-删除）;"
	DeletedAt   *timestamppb.Timestamp `protobuf:"bytes,114,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	FirmwareKey string                 `protobuf:"bytes,115,opt,name=firmwareKey,proto3" json:"firmwareKey,omitempty"` //固件Key
	NameEn      string                 `protobuf:"bytes,116,opt,name=nameEn,proto3" json:"nameEn,omitempty"`
}

func (x *OpmFirmwareFilter) Reset() {
	*x = OpmFirmwareFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_firmware_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmFirmwareFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmFirmwareFilter) ProtoMessage() {}

func (x *OpmFirmwareFilter) ProtoReflect() protoreflect.Message {
	mi := &file_opm_firmware_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmFirmwareFilter.ProtoReflect.Descriptor instead.
func (*OpmFirmwareFilter) Descriptor() ([]byte, []int) {
	return file_opm_firmware_model_proto_rawDescGZIP(), []int{1}
}

func (x *OpmFirmwareFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpmFirmwareFilter) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OpmFirmwareFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpmFirmwareFilter) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

func (x *OpmFirmwareFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OpmFirmwareFilter) GetFlashSize() int32 {
	if x != nil {
		return x.FlashSize
	}
	return 0
}

func (x *OpmFirmwareFilter) GetUpgradeChannel() int32 {
	if x != nil {
		return x.UpgradeChannel
	}
	return 0
}

func (x *OpmFirmwareFilter) GetUpgradeOvertime() int32 {
	if x != nil {
		return x.UpgradeOvertime
	}
	return 0
}

func (x *OpmFirmwareFilter) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OpmFirmwareFilter) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *OpmFirmwareFilter) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OpmFirmwareFilter) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OpmFirmwareFilter) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *OpmFirmwareFilter) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OpmFirmwareFilter) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *OpmFirmwareFilter) GetFirmwareKey() string {
	if x != nil {
		return x.FirmwareKey
	}
	return ""
}

func (x *OpmFirmwareFilter) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

type OpmFirmwareListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *OpmFirmware `protobuf:"bytes,101,opt,name=query,proto3" json:"query,omitempty"`
	Page      int64        `protobuf:"varint,102,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64        `protobuf:"varint,103,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderKey  string       `protobuf:"bytes,104,opt,name=orderKey,proto3" json:"orderKey,omitempty"`
	OrderDesc string       `protobuf:"bytes,105,opt,name=orderDesc,proto3" json:"orderDesc,omitempty"`
	SearchKey string       `protobuf:"bytes,106,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
}

func (x *OpmFirmwareListRequest) Reset() {
	*x = OpmFirmwareListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_firmware_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmFirmwareListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmFirmwareListRequest) ProtoMessage() {}

func (x *OpmFirmwareListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_firmware_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmFirmwareListRequest.ProtoReflect.Descriptor instead.
func (*OpmFirmwareListRequest) Descriptor() ([]byte, []int) {
	return file_opm_firmware_model_proto_rawDescGZIP(), []int{2}
}

func (x *OpmFirmwareListRequest) GetQuery() *OpmFirmware {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *OpmFirmwareListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *OpmFirmwareListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *OpmFirmwareListRequest) GetOrderKey() string {
	if x != nil {
		return x.OrderKey
	}
	return ""
}

func (x *OpmFirmwareListRequest) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *OpmFirmwareListRequest) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

type OpmFirmwareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32          `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string         `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64          `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*OpmFirmware `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *OpmFirmwareResponse) Reset() {
	*x = OpmFirmwareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_firmware_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmFirmwareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmFirmwareResponse) ProtoMessage() {}

func (x *OpmFirmwareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opm_firmware_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmFirmwareResponse.ProtoReflect.Descriptor instead.
func (*OpmFirmwareResponse) Descriptor() ([]byte, []int) {
	return file_opm_firmware_model_proto_rawDescGZIP(), []int{3}
}

func (x *OpmFirmwareResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OpmFirmwareResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OpmFirmwareResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OpmFirmwareResponse) GetData() []*OpmFirmware {
	if x != nil {
		return x.Data
	}
	return nil
}

type OpmFirmwareUpdateFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string     `protobuf:"bytes,101,rep,name=fields,proto3" json:"fields,omitempty"`
	Data   *OpmFirmware `protobuf:"bytes,102,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OpmFirmwareUpdateFieldsRequest) Reset() {
	*x = OpmFirmwareUpdateFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_firmware_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmFirmwareUpdateFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmFirmwareUpdateFieldsRequest) ProtoMessage() {}

func (x *OpmFirmwareUpdateFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_firmware_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmFirmwareUpdateFieldsRequest.ProtoReflect.Descriptor instead.
func (*OpmFirmwareUpdateFieldsRequest) Descriptor() ([]byte, []int) {
	return file_opm_firmware_model_proto_rawDescGZIP(), []int{4}
}

func (x *OpmFirmwareUpdateFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *OpmFirmwareUpdateFieldsRequest) GetData() *OpmFirmware {
	if x != nil {
		return x.Data
	}
	return nil
}

// 表模型主键，只能是整数或字符串，若生成错误，请检查数据库表主键是否正确。支持组合主键
type OpmFirmwarePrimarykey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OpmFirmwarePrimarykey) Reset() {
	*x = OpmFirmwarePrimarykey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_firmware_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmFirmwarePrimarykey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmFirmwarePrimarykey) ProtoMessage() {}

func (x *OpmFirmwarePrimarykey) ProtoReflect() protoreflect.Message {
	mi := &file_opm_firmware_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmFirmwarePrimarykey.ProtoReflect.Descriptor instead.
func (*OpmFirmwarePrimarykey) Descriptor() ([]byte, []int) {
	return file_opm_firmware_model_proto_rawDescGZIP(), []int{5}
}

func (x *OpmFirmwarePrimarykey) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type OpmFirmwareBatchDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*OpmFirmwarePrimarykey `protobuf:"bytes,101,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *OpmFirmwareBatchDeleteRequest) Reset() {
	*x = OpmFirmwareBatchDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_firmware_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmFirmwareBatchDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmFirmwareBatchDeleteRequest) ProtoMessage() {}

func (x *OpmFirmwareBatchDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_firmware_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmFirmwareBatchDeleteRequest.ProtoReflect.Descriptor instead.
func (*OpmFirmwareBatchDeleteRequest) Descriptor() ([]byte, []int) {
	return file_opm_firmware_model_proto_rawDescGZIP(), []int{6}
}

func (x *OpmFirmwareBatchDeleteRequest) GetKeys() []*OpmFirmwarePrimarykey {
	if x != nil {
		return x.Keys
	}
	return nil
}

//自定义固件的选择信息
type OpmFirmwareSelectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`                        //记录Id
	FirmwareName   string `protobuf:"bytes,101,opt,name=firmwareName,proto3" json:"firmwareName,omitempty"`     //固件名称
	FirmwareFlag   string `protobuf:"bytes,102,opt,name=firmwareFlag,proto3" json:"firmwareFlag,omitempty"`     //固件标识符
	FirmwareType   int32  `protobuf:"varint,103,opt,name=firmwareType,proto3" json:"firmwareType,omitempty"`    //固件类型
	FirmwareKey    string `protobuf:"bytes,104,opt,name=firmwareKey,proto3" json:"firmwareKey,omitempty"`       //固件Key
	Version        string `protobuf:"bytes,105,opt,name=version,proto3" json:"version,omitempty"`               //固件版本号
	VersionId      int64  `protobuf:"varint,106,opt,name=versionId,proto3" json:"versionId,omitempty"`          //固件版本编号
	ProductId      int64  `protobuf:"varint,107,opt,name=productId,proto3" json:"productId,omitempty"`          //产品编号
	FirmwareId     int64  `protobuf:"varint,108,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`        //自定义固件编号
	VersionCount   int32  `protobuf:"varint,109,opt,name=versionCount,proto3" json:"versionCount,omitempty"`    //版本总数
	IsCustom       int32  `protobuf:"varint,110,opt,name=isCustom,proto3" json:"isCustom,omitempty"`            //是否自定义固件
	FirmwareNameEn string `protobuf:"bytes,111,opt,name=firmwareNameEn,proto3" json:"firmwareNameEn,omitempty"` //固件英文名称
}

func (x *OpmFirmwareSelectInfo) Reset() {
	*x = OpmFirmwareSelectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_firmware_model_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmFirmwareSelectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmFirmwareSelectInfo) ProtoMessage() {}

func (x *OpmFirmwareSelectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_opm_firmware_model_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmFirmwareSelectInfo.ProtoReflect.Descriptor instead.
func (*OpmFirmwareSelectInfo) Descriptor() ([]byte, []int) {
	return file_opm_firmware_model_proto_rawDescGZIP(), []int{7}
}

func (x *OpmFirmwareSelectInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpmFirmwareSelectInfo) GetFirmwareName() string {
	if x != nil {
		return x.FirmwareName
	}
	return ""
}

func (x *OpmFirmwareSelectInfo) GetFirmwareFlag() string {
	if x != nil {
		return x.FirmwareFlag
	}
	return ""
}

func (x *OpmFirmwareSelectInfo) GetFirmwareType() int32 {
	if x != nil {
		return x.FirmwareType
	}
	return 0
}

func (x *OpmFirmwareSelectInfo) GetFirmwareKey() string {
	if x != nil {
		return x.FirmwareKey
	}
	return ""
}

func (x *OpmFirmwareSelectInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OpmFirmwareSelectInfo) GetVersionId() int64 {
	if x != nil {
		return x.VersionId
	}
	return 0
}

func (x *OpmFirmwareSelectInfo) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *OpmFirmwareSelectInfo) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

func (x *OpmFirmwareSelectInfo) GetVersionCount() int32 {
	if x != nil {
		return x.VersionCount
	}
	return 0
}

func (x *OpmFirmwareSelectInfo) GetIsCustom() int32 {
	if x != nil {
		return x.IsCustom
	}
	return 0
}

func (x *OpmFirmwareSelectInfo) GetFirmwareNameEn() string {
	if x != nil {
		return x.FirmwareNameEn
	}
	return ""
}

var File_opm_firmware_model_proto protoreflect.FileDescriptor

var file_opm_firmware_model_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6f, 0x70, 0x6d, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x08, 0x0a, 0x0b, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38,
	0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x71, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4d, 0x75, 0x73, 0x74, 0x18, 0x75,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x49, 0x73, 0x4d, 0x75, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x76, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x79, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x7a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x50, 0x72, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x7d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x7e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64,
	0x18, 0x7f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x18,
	0x81, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x31,
	0x0a, 0x13, 0x69, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xbb, 0x04, 0x0a, 0x11, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x69, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x18, 0x70, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x71,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x4b, 0x65, 0x79, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x22,
	0xcc, 0x01, 0x0a, 0x16, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x6a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x83,
	0x01, 0x0a, 0x13, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x68, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x1e, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x65, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x28,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x27, 0x0a, 0x15, 0x4f, 0x70, 0x6d, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x53, 0x0a, 0x1d, 0x4f, 0x70, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79,
	0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x93, 0x03, 0x0a, 0x15, 0x4f, 0x70, 0x6d, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x64, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x42, 0x11, 0x5a, 0x0f,
	0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opm_firmware_model_proto_rawDescOnce sync.Once
	file_opm_firmware_model_proto_rawDescData = file_opm_firmware_model_proto_rawDesc
)

func file_opm_firmware_model_proto_rawDescGZIP() []byte {
	file_opm_firmware_model_proto_rawDescOnce.Do(func() {
		file_opm_firmware_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_opm_firmware_model_proto_rawDescData)
	})
	return file_opm_firmware_model_proto_rawDescData
}

var file_opm_firmware_model_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_opm_firmware_model_proto_goTypes = []interface{}{
	(*OpmFirmware)(nil),                    // 0: service.OpmFirmware
	(*OpmFirmwareFilter)(nil),              // 1: service.OpmFirmwareFilter
	(*OpmFirmwareListRequest)(nil),         // 2: service.OpmFirmwareListRequest
	(*OpmFirmwareResponse)(nil),            // 3: service.OpmFirmwareResponse
	(*OpmFirmwareUpdateFieldsRequest)(nil), // 4: service.OpmFirmwareUpdateFieldsRequest
	(*OpmFirmwarePrimarykey)(nil),          // 5: service.OpmFirmwarePrimarykey
	(*OpmFirmwareBatchDeleteRequest)(nil),  // 6: service.OpmFirmwareBatchDeleteRequest
	(*OpmFirmwareSelectInfo)(nil),          // 7: service.OpmFirmwareSelectInfo
	(*timestamppb.Timestamp)(nil),          // 8: google.protobuf.Timestamp
}
var file_opm_firmware_model_proto_depIdxs = []int32{
	8,  // 0: service.OpmFirmware.createdAt:type_name -> google.protobuf.Timestamp
	8,  // 1: service.OpmFirmware.updatedAt:type_name -> google.protobuf.Timestamp
	8,  // 2: service.OpmFirmware.deletedAt:type_name -> google.protobuf.Timestamp
	8,  // 3: service.OpmFirmwareFilter.createdAt:type_name -> google.protobuf.Timestamp
	8,  // 4: service.OpmFirmwareFilter.updatedAt:type_name -> google.protobuf.Timestamp
	8,  // 5: service.OpmFirmwareFilter.deletedAt:type_name -> google.protobuf.Timestamp
	0,  // 6: service.OpmFirmwareListRequest.query:type_name -> service.OpmFirmware
	0,  // 7: service.OpmFirmwareResponse.data:type_name -> service.OpmFirmware
	0,  // 8: service.OpmFirmwareUpdateFieldsRequest.data:type_name -> service.OpmFirmware
	5,  // 9: service.OpmFirmwareBatchDeleteRequest.keys:type_name -> service.OpmFirmwarePrimarykey
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_opm_firmware_model_proto_init() }
func file_opm_firmware_model_proto_init() {
	if File_opm_firmware_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opm_firmware_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmFirmware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_firmware_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmFirmwareFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_firmware_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmFirmwareListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_firmware_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmFirmwareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_firmware_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmFirmwareUpdateFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_firmware_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmFirmwarePrimarykey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_firmware_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmFirmwareBatchDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_firmware_model_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmFirmwareSelectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opm_firmware_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opm_firmware_model_proto_goTypes,
		DependencyIndexes: file_opm_firmware_model_proto_depIdxs,
		MessageInfos:      file_opm_firmware_model_proto_msgTypes,
	}.Build()
	File_opm_firmware_model_proto = out.File
	file_opm_firmware_model_proto_rawDesc = nil
	file_opm_firmware_model_proto_goTypes = nil
	file_opm_firmware_model_proto_depIdxs = nil
}
