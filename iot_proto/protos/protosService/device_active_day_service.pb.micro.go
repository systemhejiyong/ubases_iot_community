// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: device_active_day_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DeviceActiveDayService service

func NewDeviceActiveDayServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "DeviceActiveDayService.Create",
			Path:    []string{"/v1/deviceActiveDay/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "DeviceActiveDayService.Delete",
			Path:    []string{"/v1/deviceActiveDay/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "DeviceActiveDayService.DeleteById",
			Path:    []string{"/v1/deviceActiveDay/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "DeviceActiveDayService.DeleteByIds",
			Path:    []string{"/v1/deviceActiveDay/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "DeviceActiveDayService.Update",
			Path:    []string{"/v1/deviceActiveDay/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "DeviceActiveDayService.UpdateAll",
			Path:    []string{"/v1/deviceActiveDay/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "DeviceActiveDayService.UpdateFields",
			Path:    []string{"/v1/deviceActiveDay/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "DeviceActiveDayService.FindById",
			Path:    []string{"/v1/deviceActiveDay/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "DeviceActiveDayService.Find",
			Path:    []string{"/v1/deviceActiveDay/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "DeviceActiveDayService.Lists",
			Path:    []string{"/v1/deviceActiveDay/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for DeviceActiveDayService service

type DeviceActiveDayService interface {
	//创建
	Create(ctx context.Context, in *DeviceActiveDay, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *DeviceActiveDay, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *DeviceActiveDay, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *DeviceActiveDayBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *DeviceActiveDay, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *DeviceActiveDay, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *DeviceActiveDayUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *DeviceActiveDayFilter, opts ...client.CallOption) (*DeviceActiveDayResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *DeviceActiveDayFilter, opts ...client.CallOption) (*DeviceActiveDayResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *DeviceActiveDayListRequest, opts ...client.CallOption) (*DeviceActiveDayResponse, error)
}

type deviceActiveDayService struct {
	c    client.Client
	name string
}

func NewDeviceActiveDayService(name string, c client.Client) DeviceActiveDayService {
	return &deviceActiveDayService{
		c:    c,
		name: name,
	}
}

func (c *deviceActiveDayService) Create(ctx context.Context, in *DeviceActiveDay, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DeviceActiveDayService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceActiveDayService) Delete(ctx context.Context, in *DeviceActiveDay, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DeviceActiveDayService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceActiveDayService) DeleteById(ctx context.Context, in *DeviceActiveDay, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DeviceActiveDayService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceActiveDayService) DeleteByIds(ctx context.Context, in *DeviceActiveDayBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DeviceActiveDayService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceActiveDayService) Update(ctx context.Context, in *DeviceActiveDay, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DeviceActiveDayService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceActiveDayService) UpdateAll(ctx context.Context, in *DeviceActiveDay, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DeviceActiveDayService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceActiveDayService) UpdateFields(ctx context.Context, in *DeviceActiveDayUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "DeviceActiveDayService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceActiveDayService) FindById(ctx context.Context, in *DeviceActiveDayFilter, opts ...client.CallOption) (*DeviceActiveDayResponse, error) {
	req := c.c.NewRequest(c.name, "DeviceActiveDayService.FindById", in)
	out := new(DeviceActiveDayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceActiveDayService) Find(ctx context.Context, in *DeviceActiveDayFilter, opts ...client.CallOption) (*DeviceActiveDayResponse, error) {
	req := c.c.NewRequest(c.name, "DeviceActiveDayService.Find", in)
	out := new(DeviceActiveDayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceActiveDayService) Lists(ctx context.Context, in *DeviceActiveDayListRequest, opts ...client.CallOption) (*DeviceActiveDayResponse, error) {
	req := c.c.NewRequest(c.name, "DeviceActiveDayService.Lists", in)
	out := new(DeviceActiveDayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeviceActiveDayService service

type DeviceActiveDayServiceHandler interface {
	//创建
	Create(context.Context, *DeviceActiveDay, *Response) error
	//匹配多条件删除
	Delete(context.Context, *DeviceActiveDay, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *DeviceActiveDay, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *DeviceActiveDayBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *DeviceActiveDay, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *DeviceActiveDay, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *DeviceActiveDayUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *DeviceActiveDayFilter, *DeviceActiveDayResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *DeviceActiveDayFilter, *DeviceActiveDayResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *DeviceActiveDayListRequest, *DeviceActiveDayResponse) error
}

func RegisterDeviceActiveDayServiceHandler(s server.Server, hdlr DeviceActiveDayServiceHandler, opts ...server.HandlerOption) error {
	type deviceActiveDayService interface {
		Create(ctx context.Context, in *DeviceActiveDay, out *Response) error
		Delete(ctx context.Context, in *DeviceActiveDay, out *Response) error
		DeleteById(ctx context.Context, in *DeviceActiveDay, out *Response) error
		DeleteByIds(ctx context.Context, in *DeviceActiveDayBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *DeviceActiveDay, out *Response) error
		UpdateAll(ctx context.Context, in *DeviceActiveDay, out *Response) error
		UpdateFields(ctx context.Context, in *DeviceActiveDayUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *DeviceActiveDayFilter, out *DeviceActiveDayResponse) error
		Find(ctx context.Context, in *DeviceActiveDayFilter, out *DeviceActiveDayResponse) error
		Lists(ctx context.Context, in *DeviceActiveDayListRequest, out *DeviceActiveDayResponse) error
	}
	type DeviceActiveDayService struct {
		deviceActiveDayService
	}
	h := &deviceActiveDayServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DeviceActiveDayService.Create",
		Path:    []string{"/v1/deviceActiveDay/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DeviceActiveDayService.Delete",
		Path:    []string{"/v1/deviceActiveDay/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DeviceActiveDayService.DeleteById",
		Path:    []string{"/v1/deviceActiveDay/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DeviceActiveDayService.DeleteByIds",
		Path:    []string{"/v1/deviceActiveDay/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DeviceActiveDayService.Update",
		Path:    []string{"/v1/deviceActiveDay/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DeviceActiveDayService.UpdateAll",
		Path:    []string{"/v1/deviceActiveDay/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DeviceActiveDayService.UpdateFields",
		Path:    []string{"/v1/deviceActiveDay/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DeviceActiveDayService.FindById",
		Path:    []string{"/v1/deviceActiveDay/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DeviceActiveDayService.Find",
		Path:    []string{"/v1/deviceActiveDay/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DeviceActiveDayService.Lists",
		Path:    []string{"/v1/deviceActiveDay/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&DeviceActiveDayService{h}, opts...))
}

type deviceActiveDayServiceHandler struct {
	DeviceActiveDayServiceHandler
}

func (h *deviceActiveDayServiceHandler) Create(ctx context.Context, in *DeviceActiveDay, out *Response) error {
	return h.DeviceActiveDayServiceHandler.Create(ctx, in, out)
}

func (h *deviceActiveDayServiceHandler) Delete(ctx context.Context, in *DeviceActiveDay, out *Response) error {
	return h.DeviceActiveDayServiceHandler.Delete(ctx, in, out)
}

func (h *deviceActiveDayServiceHandler) DeleteById(ctx context.Context, in *DeviceActiveDay, out *Response) error {
	return h.DeviceActiveDayServiceHandler.DeleteById(ctx, in, out)
}

func (h *deviceActiveDayServiceHandler) DeleteByIds(ctx context.Context, in *DeviceActiveDayBatchDeleteRequest, out *Response) error {
	return h.DeviceActiveDayServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *deviceActiveDayServiceHandler) Update(ctx context.Context, in *DeviceActiveDay, out *Response) error {
	return h.DeviceActiveDayServiceHandler.Update(ctx, in, out)
}

func (h *deviceActiveDayServiceHandler) UpdateAll(ctx context.Context, in *DeviceActiveDay, out *Response) error {
	return h.DeviceActiveDayServiceHandler.UpdateAll(ctx, in, out)
}

func (h *deviceActiveDayServiceHandler) UpdateFields(ctx context.Context, in *DeviceActiveDayUpdateFieldsRequest, out *Response) error {
	return h.DeviceActiveDayServiceHandler.UpdateFields(ctx, in, out)
}

func (h *deviceActiveDayServiceHandler) FindById(ctx context.Context, in *DeviceActiveDayFilter, out *DeviceActiveDayResponse) error {
	return h.DeviceActiveDayServiceHandler.FindById(ctx, in, out)
}

func (h *deviceActiveDayServiceHandler) Find(ctx context.Context, in *DeviceActiveDayFilter, out *DeviceActiveDayResponse) error {
	return h.DeviceActiveDayServiceHandler.Find(ctx, in, out)
}

func (h *deviceActiveDayServiceHandler) Lists(ctx context.Context, in *DeviceActiveDayListRequest, out *DeviceActiveDayResponse) error {
	return h.DeviceActiveDayServiceHandler.Lists(ctx, in, out)
}
