// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: opm_product_manual_service.gen.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpmProductManualService service

func NewOpmProductManualServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpmProductManualService.Create",
			Path:    []string{"/v1/opmProductManual/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductManualService.Delete",
			Path:    []string{"/v1/opmProductManual/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductManualService.DeleteById",
			Path:    []string{"/v1/opmProductManual/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductManualService.DeleteByIds",
			Path:    []string{"/v1/opmProductManual/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductManualService.Update",
			Path:    []string{"/v1/opmProductManual/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductManualService.UpdateAll",
			Path:    []string{"/v1/opmProductManual/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductManualService.UpdateFields",
			Path:    []string{"/v1/opmProductManual/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductManualService.FindById",
			Path:    []string{"/v1/opmProductManual/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductManualService.Find",
			Path:    []string{"/v1/opmProductManual/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductManualService.Lists",
			Path:    []string{"/v1/opmProductManual/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpmProductManualService service

type OpmProductManualService interface {
	//创建
	Create(ctx context.Context, in *OpmProductManual, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpmProductManual, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpmProductManual, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpmProductManualBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpmProductManual, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpmProductManual, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpmProductManualUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpmProductManualFilter, opts ...client.CallOption) (*OpmProductManualResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpmProductManualFilter, opts ...client.CallOption) (*OpmProductManualResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpmProductManualListRequest, opts ...client.CallOption) (*OpmProductManualResponse, error)
}

type opmProductManualService struct {
	c    client.Client
	name string
}

func NewOpmProductManualService(name string, c client.Client) OpmProductManualService {
	return &opmProductManualService{
		c:    c,
		name: name,
	}
}

func (c *opmProductManualService) Create(ctx context.Context, in *OpmProductManual, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductManualService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductManualService) Delete(ctx context.Context, in *OpmProductManual, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductManualService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductManualService) DeleteById(ctx context.Context, in *OpmProductManual, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductManualService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductManualService) DeleteByIds(ctx context.Context, in *OpmProductManualBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductManualService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductManualService) Update(ctx context.Context, in *OpmProductManual, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductManualService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductManualService) UpdateAll(ctx context.Context, in *OpmProductManual, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductManualService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductManualService) UpdateFields(ctx context.Context, in *OpmProductManualUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductManualService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductManualService) FindById(ctx context.Context, in *OpmProductManualFilter, opts ...client.CallOption) (*OpmProductManualResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductManualService.FindById", in)
	out := new(OpmProductManualResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductManualService) Find(ctx context.Context, in *OpmProductManualFilter, opts ...client.CallOption) (*OpmProductManualResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductManualService.Find", in)
	out := new(OpmProductManualResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductManualService) Lists(ctx context.Context, in *OpmProductManualListRequest, opts ...client.CallOption) (*OpmProductManualResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductManualService.Lists", in)
	out := new(OpmProductManualResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpmProductManualService service

type OpmProductManualServiceHandler interface {
	//创建
	Create(context.Context, *OpmProductManual, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpmProductManual, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpmProductManual, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpmProductManualBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpmProductManual, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpmProductManual, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpmProductManualUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpmProductManualFilter, *OpmProductManualResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpmProductManualFilter, *OpmProductManualResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpmProductManualListRequest, *OpmProductManualResponse) error
}

func RegisterOpmProductManualServiceHandler(s server.Server, hdlr OpmProductManualServiceHandler, opts ...server.HandlerOption) error {
	type opmProductManualService interface {
		Create(ctx context.Context, in *OpmProductManual, out *Response) error
		Delete(ctx context.Context, in *OpmProductManual, out *Response) error
		DeleteById(ctx context.Context, in *OpmProductManual, out *Response) error
		DeleteByIds(ctx context.Context, in *OpmProductManualBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpmProductManual, out *Response) error
		UpdateAll(ctx context.Context, in *OpmProductManual, out *Response) error
		UpdateFields(ctx context.Context, in *OpmProductManualUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpmProductManualFilter, out *OpmProductManualResponse) error
		Find(ctx context.Context, in *OpmProductManualFilter, out *OpmProductManualResponse) error
		Lists(ctx context.Context, in *OpmProductManualListRequest, out *OpmProductManualResponse) error
	}
	type OpmProductManualService struct {
		opmProductManualService
	}
	h := &opmProductManualServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductManualService.Create",
		Path:    []string{"/v1/opmProductManual/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductManualService.Delete",
		Path:    []string{"/v1/opmProductManual/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductManualService.DeleteById",
		Path:    []string{"/v1/opmProductManual/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductManualService.DeleteByIds",
		Path:    []string{"/v1/opmProductManual/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductManualService.Update",
		Path:    []string{"/v1/opmProductManual/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductManualService.UpdateAll",
		Path:    []string{"/v1/opmProductManual/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductManualService.UpdateFields",
		Path:    []string{"/v1/opmProductManual/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductManualService.FindById",
		Path:    []string{"/v1/opmProductManual/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductManualService.Find",
		Path:    []string{"/v1/opmProductManual/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductManualService.Lists",
		Path:    []string{"/v1/opmProductManual/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpmProductManualService{h}, opts...))
}

type opmProductManualServiceHandler struct {
	OpmProductManualServiceHandler
}

func (h *opmProductManualServiceHandler) Create(ctx context.Context, in *OpmProductManual, out *Response) error {
	return h.OpmProductManualServiceHandler.Create(ctx, in, out)
}

func (h *opmProductManualServiceHandler) Delete(ctx context.Context, in *OpmProductManual, out *Response) error {
	return h.OpmProductManualServiceHandler.Delete(ctx, in, out)
}

func (h *opmProductManualServiceHandler) DeleteById(ctx context.Context, in *OpmProductManual, out *Response) error {
	return h.OpmProductManualServiceHandler.DeleteById(ctx, in, out)
}

func (h *opmProductManualServiceHandler) DeleteByIds(ctx context.Context, in *OpmProductManualBatchDeleteRequest, out *Response) error {
	return h.OpmProductManualServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *opmProductManualServiceHandler) Update(ctx context.Context, in *OpmProductManual, out *Response) error {
	return h.OpmProductManualServiceHandler.Update(ctx, in, out)
}

func (h *opmProductManualServiceHandler) UpdateAll(ctx context.Context, in *OpmProductManual, out *Response) error {
	return h.OpmProductManualServiceHandler.UpdateAll(ctx, in, out)
}

func (h *opmProductManualServiceHandler) UpdateFields(ctx context.Context, in *OpmProductManualUpdateFieldsRequest, out *Response) error {
	return h.OpmProductManualServiceHandler.UpdateFields(ctx, in, out)
}

func (h *opmProductManualServiceHandler) FindById(ctx context.Context, in *OpmProductManualFilter, out *OpmProductManualResponse) error {
	return h.OpmProductManualServiceHandler.FindById(ctx, in, out)
}

func (h *opmProductManualServiceHandler) Find(ctx context.Context, in *OpmProductManualFilter, out *OpmProductManualResponse) error {
	return h.OpmProductManualServiceHandler.Find(ctx, in, out)
}

func (h *opmProductManualServiceHandler) Lists(ctx context.Context, in *OpmProductManualListRequest, out *OpmProductManualResponse) error {
	return h.OpmProductManualServiceHandler.Lists(ctx, in, out)
}
