// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: opm_product_material_relation_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpmProductMaterialRelationService service

func NewOpmProductMaterialRelationServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpmProductMaterialRelationService.Create",
			Path:    []string{"/v1/opmProductMaterialRelation/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialRelationService.Delete",
			Path:    []string{"/v1/opmProductMaterialRelation/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialRelationService.DeleteById",
			Path:    []string{"/v1/opmProductMaterialRelation/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialRelationService.DeleteByIds",
			Path:    []string{"/v1/opmProductMaterialRelation/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialRelationService.Update",
			Path:    []string{"/v1/opmProductMaterialRelation/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialRelationService.UpdateAll",
			Path:    []string{"/v1/opmProductMaterialRelation/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialRelationService.UpdateFields",
			Path:    []string{"/v1/opmProductMaterialRelation/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialRelationService.FindById",
			Path:    []string{"/v1/opmProductMaterialRelation/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialRelationService.Find",
			Path:    []string{"/v1/opmProductMaterialRelation/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialRelationService.Lists",
			Path:    []string{"/v1/opmProductMaterialRelation/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductMaterialRelationService.CreateBatch",
			Path:    []string{"/v1/opmProductMaterialRelation/createBatch"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpmProductMaterialRelationService service

type OpmProductMaterialRelationService interface {
	//创建
	Create(ctx context.Context, in *OpmProductMaterialRelation, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpmProductMaterialRelation, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpmProductMaterialRelation, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpmProductMaterialRelationBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpmProductMaterialRelation, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpmProductMaterialRelation, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpmProductMaterialRelationUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpmProductMaterialRelationFilter, opts ...client.CallOption) (*OpmProductMaterialRelationResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpmProductMaterialRelationFilter, opts ...client.CallOption) (*OpmProductMaterialRelationResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpmProductMaterialRelationListRequest, opts ...client.CallOption) (*OpmProductMaterialRelationResponse, error)
	//批量创建
	CreateBatch(ctx context.Context, in *OpmProductMaterialBatch, opts ...client.CallOption) (*Response, error)
}

type opmProductMaterialRelationService struct {
	c    client.Client
	name string
}

func NewOpmProductMaterialRelationService(name string, c client.Client) OpmProductMaterialRelationService {
	return &opmProductMaterialRelationService{
		c:    c,
		name: name,
	}
}

func (c *opmProductMaterialRelationService) Create(ctx context.Context, in *OpmProductMaterialRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialRelationService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialRelationService) Delete(ctx context.Context, in *OpmProductMaterialRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialRelationService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialRelationService) DeleteById(ctx context.Context, in *OpmProductMaterialRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialRelationService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialRelationService) DeleteByIds(ctx context.Context, in *OpmProductMaterialRelationBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialRelationService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialRelationService) Update(ctx context.Context, in *OpmProductMaterialRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialRelationService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialRelationService) UpdateAll(ctx context.Context, in *OpmProductMaterialRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialRelationService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialRelationService) UpdateFields(ctx context.Context, in *OpmProductMaterialRelationUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialRelationService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialRelationService) FindById(ctx context.Context, in *OpmProductMaterialRelationFilter, opts ...client.CallOption) (*OpmProductMaterialRelationResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialRelationService.FindById", in)
	out := new(OpmProductMaterialRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialRelationService) Find(ctx context.Context, in *OpmProductMaterialRelationFilter, opts ...client.CallOption) (*OpmProductMaterialRelationResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialRelationService.Find", in)
	out := new(OpmProductMaterialRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialRelationService) Lists(ctx context.Context, in *OpmProductMaterialRelationListRequest, opts ...client.CallOption) (*OpmProductMaterialRelationResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialRelationService.Lists", in)
	out := new(OpmProductMaterialRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductMaterialRelationService) CreateBatch(ctx context.Context, in *OpmProductMaterialBatch, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductMaterialRelationService.CreateBatch", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpmProductMaterialRelationService service

type OpmProductMaterialRelationServiceHandler interface {
	//创建
	Create(context.Context, *OpmProductMaterialRelation, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpmProductMaterialRelation, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpmProductMaterialRelation, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpmProductMaterialRelationBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpmProductMaterialRelation, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpmProductMaterialRelation, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpmProductMaterialRelationUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpmProductMaterialRelationFilter, *OpmProductMaterialRelationResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpmProductMaterialRelationFilter, *OpmProductMaterialRelationResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpmProductMaterialRelationListRequest, *OpmProductMaterialRelationResponse) error
	//批量创建
	CreateBatch(context.Context, *OpmProductMaterialBatch, *Response) error
}

func RegisterOpmProductMaterialRelationServiceHandler(s server.Server, hdlr OpmProductMaterialRelationServiceHandler, opts ...server.HandlerOption) error {
	type opmProductMaterialRelationService interface {
		Create(ctx context.Context, in *OpmProductMaterialRelation, out *Response) error
		Delete(ctx context.Context, in *OpmProductMaterialRelation, out *Response) error
		DeleteById(ctx context.Context, in *OpmProductMaterialRelation, out *Response) error
		DeleteByIds(ctx context.Context, in *OpmProductMaterialRelationBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpmProductMaterialRelation, out *Response) error
		UpdateAll(ctx context.Context, in *OpmProductMaterialRelation, out *Response) error
		UpdateFields(ctx context.Context, in *OpmProductMaterialRelationUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpmProductMaterialRelationFilter, out *OpmProductMaterialRelationResponse) error
		Find(ctx context.Context, in *OpmProductMaterialRelationFilter, out *OpmProductMaterialRelationResponse) error
		Lists(ctx context.Context, in *OpmProductMaterialRelationListRequest, out *OpmProductMaterialRelationResponse) error
		CreateBatch(ctx context.Context, in *OpmProductMaterialBatch, out *Response) error
	}
	type OpmProductMaterialRelationService struct {
		opmProductMaterialRelationService
	}
	h := &opmProductMaterialRelationServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialRelationService.Create",
		Path:    []string{"/v1/opmProductMaterialRelation/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialRelationService.Delete",
		Path:    []string{"/v1/opmProductMaterialRelation/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialRelationService.DeleteById",
		Path:    []string{"/v1/opmProductMaterialRelation/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialRelationService.DeleteByIds",
		Path:    []string{"/v1/opmProductMaterialRelation/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialRelationService.Update",
		Path:    []string{"/v1/opmProductMaterialRelation/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialRelationService.UpdateAll",
		Path:    []string{"/v1/opmProductMaterialRelation/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialRelationService.UpdateFields",
		Path:    []string{"/v1/opmProductMaterialRelation/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialRelationService.FindById",
		Path:    []string{"/v1/opmProductMaterialRelation/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialRelationService.Find",
		Path:    []string{"/v1/opmProductMaterialRelation/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialRelationService.Lists",
		Path:    []string{"/v1/opmProductMaterialRelation/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductMaterialRelationService.CreateBatch",
		Path:    []string{"/v1/opmProductMaterialRelation/createBatch"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpmProductMaterialRelationService{h}, opts...))
}

type opmProductMaterialRelationServiceHandler struct {
	OpmProductMaterialRelationServiceHandler
}

func (h *opmProductMaterialRelationServiceHandler) Create(ctx context.Context, in *OpmProductMaterialRelation, out *Response) error {
	return h.OpmProductMaterialRelationServiceHandler.Create(ctx, in, out)
}

func (h *opmProductMaterialRelationServiceHandler) Delete(ctx context.Context, in *OpmProductMaterialRelation, out *Response) error {
	return h.OpmProductMaterialRelationServiceHandler.Delete(ctx, in, out)
}

func (h *opmProductMaterialRelationServiceHandler) DeleteById(ctx context.Context, in *OpmProductMaterialRelation, out *Response) error {
	return h.OpmProductMaterialRelationServiceHandler.DeleteById(ctx, in, out)
}

func (h *opmProductMaterialRelationServiceHandler) DeleteByIds(ctx context.Context, in *OpmProductMaterialRelationBatchDeleteRequest, out *Response) error {
	return h.OpmProductMaterialRelationServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *opmProductMaterialRelationServiceHandler) Update(ctx context.Context, in *OpmProductMaterialRelation, out *Response) error {
	return h.OpmProductMaterialRelationServiceHandler.Update(ctx, in, out)
}

func (h *opmProductMaterialRelationServiceHandler) UpdateAll(ctx context.Context, in *OpmProductMaterialRelation, out *Response) error {
	return h.OpmProductMaterialRelationServiceHandler.UpdateAll(ctx, in, out)
}

func (h *opmProductMaterialRelationServiceHandler) UpdateFields(ctx context.Context, in *OpmProductMaterialRelationUpdateFieldsRequest, out *Response) error {
	return h.OpmProductMaterialRelationServiceHandler.UpdateFields(ctx, in, out)
}

func (h *opmProductMaterialRelationServiceHandler) FindById(ctx context.Context, in *OpmProductMaterialRelationFilter, out *OpmProductMaterialRelationResponse) error {
	return h.OpmProductMaterialRelationServiceHandler.FindById(ctx, in, out)
}

func (h *opmProductMaterialRelationServiceHandler) Find(ctx context.Context, in *OpmProductMaterialRelationFilter, out *OpmProductMaterialRelationResponse) error {
	return h.OpmProductMaterialRelationServiceHandler.Find(ctx, in, out)
}

func (h *opmProductMaterialRelationServiceHandler) Lists(ctx context.Context, in *OpmProductMaterialRelationListRequest, out *OpmProductMaterialRelationResponse) error {
	return h.OpmProductMaterialRelationServiceHandler.Lists(ctx, in, out)
}

func (h *opmProductMaterialRelationServiceHandler) CreateBatch(ctx context.Context, in *OpmProductMaterialBatch, out *Response) error {
	return h.OpmProductMaterialRelationServiceHandler.CreateBatch(ctx, in, out)
}
