// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: tpl_document_template_field_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TplDocumentTemplateFieldService service

func NewTplDocumentTemplateFieldServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "TplDocumentTemplateFieldService.Create",
			Path:    []string{"/v1/tplDocumentTemplateField/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "TplDocumentTemplateFieldService.Delete",
			Path:    []string{"/v1/tplDocumentTemplateField/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "TplDocumentTemplateFieldService.DeleteById",
			Path:    []string{"/v1/tplDocumentTemplateField/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "TplDocumentTemplateFieldService.DeleteByIds",
			Path:    []string{"/v1/tplDocumentTemplateField/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "TplDocumentTemplateFieldService.Update",
			Path:    []string{"/v1/tplDocumentTemplateField/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "TplDocumentTemplateFieldService.UpdateAll",
			Path:    []string{"/v1/tplDocumentTemplateField/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "TplDocumentTemplateFieldService.UpdateFields",
			Path:    []string{"/v1/tplDocumentTemplateField/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "TplDocumentTemplateFieldService.FindById",
			Path:    []string{"/v1/tplDocumentTemplateField/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "TplDocumentTemplateFieldService.Find",
			Path:    []string{"/v1/tplDocumentTemplateField/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "TplDocumentTemplateFieldService.Lists",
			Path:    []string{"/v1/tplDocumentTemplateField/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for TplDocumentTemplateFieldService service

type TplDocumentTemplateFieldService interface {
	//创建
	Create(ctx context.Context, in *TplDocumentTemplateField, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *TplDocumentTemplateField, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *TplDocumentTemplateField, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *TplDocumentTemplateFieldBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *TplDocumentTemplateField, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *TplDocumentTemplateField, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *TplDocumentTemplateFieldUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *TplDocumentTemplateFieldFilter, opts ...client.CallOption) (*TplDocumentTemplateFieldResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *TplDocumentTemplateFieldFilter, opts ...client.CallOption) (*TplDocumentTemplateFieldResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *TplDocumentTemplateFieldListRequest, opts ...client.CallOption) (*TplDocumentTemplateFieldResponse, error)
}

type tplDocumentTemplateFieldService struct {
	c    client.Client
	name string
}

func NewTplDocumentTemplateFieldService(name string, c client.Client) TplDocumentTemplateFieldService {
	return &tplDocumentTemplateFieldService{
		c:    c,
		name: name,
	}
}

func (c *tplDocumentTemplateFieldService) Create(ctx context.Context, in *TplDocumentTemplateField, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "TplDocumentTemplateFieldService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tplDocumentTemplateFieldService) Delete(ctx context.Context, in *TplDocumentTemplateField, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "TplDocumentTemplateFieldService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tplDocumentTemplateFieldService) DeleteById(ctx context.Context, in *TplDocumentTemplateField, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "TplDocumentTemplateFieldService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tplDocumentTemplateFieldService) DeleteByIds(ctx context.Context, in *TplDocumentTemplateFieldBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "TplDocumentTemplateFieldService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tplDocumentTemplateFieldService) Update(ctx context.Context, in *TplDocumentTemplateField, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "TplDocumentTemplateFieldService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tplDocumentTemplateFieldService) UpdateAll(ctx context.Context, in *TplDocumentTemplateField, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "TplDocumentTemplateFieldService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tplDocumentTemplateFieldService) UpdateFields(ctx context.Context, in *TplDocumentTemplateFieldUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "TplDocumentTemplateFieldService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tplDocumentTemplateFieldService) FindById(ctx context.Context, in *TplDocumentTemplateFieldFilter, opts ...client.CallOption) (*TplDocumentTemplateFieldResponse, error) {
	req := c.c.NewRequest(c.name, "TplDocumentTemplateFieldService.FindById", in)
	out := new(TplDocumentTemplateFieldResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tplDocumentTemplateFieldService) Find(ctx context.Context, in *TplDocumentTemplateFieldFilter, opts ...client.CallOption) (*TplDocumentTemplateFieldResponse, error) {
	req := c.c.NewRequest(c.name, "TplDocumentTemplateFieldService.Find", in)
	out := new(TplDocumentTemplateFieldResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tplDocumentTemplateFieldService) Lists(ctx context.Context, in *TplDocumentTemplateFieldListRequest, opts ...client.CallOption) (*TplDocumentTemplateFieldResponse, error) {
	req := c.c.NewRequest(c.name, "TplDocumentTemplateFieldService.Lists", in)
	out := new(TplDocumentTemplateFieldResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TplDocumentTemplateFieldService service

type TplDocumentTemplateFieldServiceHandler interface {
	//创建
	Create(context.Context, *TplDocumentTemplateField, *Response) error
	//匹配多条件删除
	Delete(context.Context, *TplDocumentTemplateField, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *TplDocumentTemplateField, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *TplDocumentTemplateFieldBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *TplDocumentTemplateField, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *TplDocumentTemplateField, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *TplDocumentTemplateFieldUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *TplDocumentTemplateFieldFilter, *TplDocumentTemplateFieldResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *TplDocumentTemplateFieldFilter, *TplDocumentTemplateFieldResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *TplDocumentTemplateFieldListRequest, *TplDocumentTemplateFieldResponse) error
}

func RegisterTplDocumentTemplateFieldServiceHandler(s server.Server, hdlr TplDocumentTemplateFieldServiceHandler, opts ...server.HandlerOption) error {
	type tplDocumentTemplateFieldService interface {
		Create(ctx context.Context, in *TplDocumentTemplateField, out *Response) error
		Delete(ctx context.Context, in *TplDocumentTemplateField, out *Response) error
		DeleteById(ctx context.Context, in *TplDocumentTemplateField, out *Response) error
		DeleteByIds(ctx context.Context, in *TplDocumentTemplateFieldBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *TplDocumentTemplateField, out *Response) error
		UpdateAll(ctx context.Context, in *TplDocumentTemplateField, out *Response) error
		UpdateFields(ctx context.Context, in *TplDocumentTemplateFieldUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *TplDocumentTemplateFieldFilter, out *TplDocumentTemplateFieldResponse) error
		Find(ctx context.Context, in *TplDocumentTemplateFieldFilter, out *TplDocumentTemplateFieldResponse) error
		Lists(ctx context.Context, in *TplDocumentTemplateFieldListRequest, out *TplDocumentTemplateFieldResponse) error
	}
	type TplDocumentTemplateFieldService struct {
		tplDocumentTemplateFieldService
	}
	h := &tplDocumentTemplateFieldServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "TplDocumentTemplateFieldService.Create",
		Path:    []string{"/v1/tplDocumentTemplateField/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "TplDocumentTemplateFieldService.Delete",
		Path:    []string{"/v1/tplDocumentTemplateField/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "TplDocumentTemplateFieldService.DeleteById",
		Path:    []string{"/v1/tplDocumentTemplateField/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "TplDocumentTemplateFieldService.DeleteByIds",
		Path:    []string{"/v1/tplDocumentTemplateField/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "TplDocumentTemplateFieldService.Update",
		Path:    []string{"/v1/tplDocumentTemplateField/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "TplDocumentTemplateFieldService.UpdateAll",
		Path:    []string{"/v1/tplDocumentTemplateField/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "TplDocumentTemplateFieldService.UpdateFields",
		Path:    []string{"/v1/tplDocumentTemplateField/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "TplDocumentTemplateFieldService.FindById",
		Path:    []string{"/v1/tplDocumentTemplateField/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "TplDocumentTemplateFieldService.Find",
		Path:    []string{"/v1/tplDocumentTemplateField/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "TplDocumentTemplateFieldService.Lists",
		Path:    []string{"/v1/tplDocumentTemplateField/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&TplDocumentTemplateFieldService{h}, opts...))
}

type tplDocumentTemplateFieldServiceHandler struct {
	TplDocumentTemplateFieldServiceHandler
}

func (h *tplDocumentTemplateFieldServiceHandler) Create(ctx context.Context, in *TplDocumentTemplateField, out *Response) error {
	return h.TplDocumentTemplateFieldServiceHandler.Create(ctx, in, out)
}

func (h *tplDocumentTemplateFieldServiceHandler) Delete(ctx context.Context, in *TplDocumentTemplateField, out *Response) error {
	return h.TplDocumentTemplateFieldServiceHandler.Delete(ctx, in, out)
}

func (h *tplDocumentTemplateFieldServiceHandler) DeleteById(ctx context.Context, in *TplDocumentTemplateField, out *Response) error {
	return h.TplDocumentTemplateFieldServiceHandler.DeleteById(ctx, in, out)
}

func (h *tplDocumentTemplateFieldServiceHandler) DeleteByIds(ctx context.Context, in *TplDocumentTemplateFieldBatchDeleteRequest, out *Response) error {
	return h.TplDocumentTemplateFieldServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *tplDocumentTemplateFieldServiceHandler) Update(ctx context.Context, in *TplDocumentTemplateField, out *Response) error {
	return h.TplDocumentTemplateFieldServiceHandler.Update(ctx, in, out)
}

func (h *tplDocumentTemplateFieldServiceHandler) UpdateAll(ctx context.Context, in *TplDocumentTemplateField, out *Response) error {
	return h.TplDocumentTemplateFieldServiceHandler.UpdateAll(ctx, in, out)
}

func (h *tplDocumentTemplateFieldServiceHandler) UpdateFields(ctx context.Context, in *TplDocumentTemplateFieldUpdateFieldsRequest, out *Response) error {
	return h.TplDocumentTemplateFieldServiceHandler.UpdateFields(ctx, in, out)
}

func (h *tplDocumentTemplateFieldServiceHandler) FindById(ctx context.Context, in *TplDocumentTemplateFieldFilter, out *TplDocumentTemplateFieldResponse) error {
	return h.TplDocumentTemplateFieldServiceHandler.FindById(ctx, in, out)
}

func (h *tplDocumentTemplateFieldServiceHandler) Find(ctx context.Context, in *TplDocumentTemplateFieldFilter, out *TplDocumentTemplateFieldResponse) error {
	return h.TplDocumentTemplateFieldServiceHandler.Find(ctx, in, out)
}

func (h *tplDocumentTemplateFieldServiceHandler) Lists(ctx context.Context, in *TplDocumentTemplateFieldListRequest, out *TplDocumentTemplateFieldResponse) error {
	return h.TplDocumentTemplateFieldServiceHandler.Lists(ctx, in, out)
}
