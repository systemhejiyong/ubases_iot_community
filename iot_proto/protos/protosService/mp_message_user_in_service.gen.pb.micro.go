// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: mp_message_user_in_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MpMessageUserInService service

func NewMpMessageUserInServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "MpMessageUserInService.Create",
			Path:    []string{"/v1/mpMessageUserIn/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserInService.Delete",
			Path:    []string{"/v1/mpMessageUserIn/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserInService.DeleteById",
			Path:    []string{"/v1/mpMessageUserIn/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserInService.DeleteByIds",
			Path:    []string{"/v1/mpMessageUserIn/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserInService.Update",
			Path:    []string{"/v1/mpMessageUserIn/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserInService.UpdateAll",
			Path:    []string{"/v1/mpMessageUserIn/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserInService.UpdateFields",
			Path:    []string{"/v1/mpMessageUserIn/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserInService.FindById",
			Path:    []string{"/v1/mpMessageUserIn/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserInService.Find",
			Path:    []string{"/v1/mpMessageUserIn/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserInService.Lists",
			Path:    []string{"/v1/mpMessageUserIn/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageUserInService.GroupLists",
			Path:    []string{"/v1/mpMessageUserIn/groupLists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for MpMessageUserInService service

type MpMessageUserInService interface {
	//创建
	Create(ctx context.Context, in *MpMessageUserIn, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *MpMessageUserIn, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *MpMessageUserIn, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *MpMessageUserInBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *MpMessageUserIn, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *MpMessageUserIn, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *MpMessageUserInUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *MpMessageUserInFilter, opts ...client.CallOption) (*MpMessageUserInResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *MpMessageUserInFilter, opts ...client.CallOption) (*MpMessageUserInResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *MpMessageUserInListRequest, opts ...client.CallOption) (*MpMessageUserInResponse, error)
	//查找，支持分页，可返回多条数据
	GroupLists(ctx context.Context, in *MpMessageUserInListRequest, opts ...client.CallOption) (*MpMessageUserInGroupResponse, error)
}

type mpMessageUserInService struct {
	c    client.Client
	name string
}

func NewMpMessageUserInService(name string, c client.Client) MpMessageUserInService {
	return &mpMessageUserInService{
		c:    c,
		name: name,
	}
}

func (c *mpMessageUserInService) Create(ctx context.Context, in *MpMessageUserIn, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserInService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserInService) Delete(ctx context.Context, in *MpMessageUserIn, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserInService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserInService) DeleteById(ctx context.Context, in *MpMessageUserIn, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserInService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserInService) DeleteByIds(ctx context.Context, in *MpMessageUserInBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserInService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserInService) Update(ctx context.Context, in *MpMessageUserIn, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserInService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserInService) UpdateAll(ctx context.Context, in *MpMessageUserIn, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserInService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserInService) UpdateFields(ctx context.Context, in *MpMessageUserInUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserInService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserInService) FindById(ctx context.Context, in *MpMessageUserInFilter, opts ...client.CallOption) (*MpMessageUserInResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserInService.FindById", in)
	out := new(MpMessageUserInResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserInService) Find(ctx context.Context, in *MpMessageUserInFilter, opts ...client.CallOption) (*MpMessageUserInResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserInService.Find", in)
	out := new(MpMessageUserInResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserInService) Lists(ctx context.Context, in *MpMessageUserInListRequest, opts ...client.CallOption) (*MpMessageUserInResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserInService.Lists", in)
	out := new(MpMessageUserInResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageUserInService) GroupLists(ctx context.Context, in *MpMessageUserInListRequest, opts ...client.CallOption) (*MpMessageUserInGroupResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessageUserInService.GroupLists", in)
	out := new(MpMessageUserInGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MpMessageUserInService service

type MpMessageUserInServiceHandler interface {
	//创建
	Create(context.Context, *MpMessageUserIn, *Response) error
	//匹配多条件删除
	Delete(context.Context, *MpMessageUserIn, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *MpMessageUserIn, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *MpMessageUserInBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *MpMessageUserIn, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *MpMessageUserIn, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *MpMessageUserInUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *MpMessageUserInFilter, *MpMessageUserInResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *MpMessageUserInFilter, *MpMessageUserInResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *MpMessageUserInListRequest, *MpMessageUserInResponse) error
	//查找，支持分页，可返回多条数据
	GroupLists(context.Context, *MpMessageUserInListRequest, *MpMessageUserInGroupResponse) error
}

func RegisterMpMessageUserInServiceHandler(s server.Server, hdlr MpMessageUserInServiceHandler, opts ...server.HandlerOption) error {
	type mpMessageUserInService interface {
		Create(ctx context.Context, in *MpMessageUserIn, out *Response) error
		Delete(ctx context.Context, in *MpMessageUserIn, out *Response) error
		DeleteById(ctx context.Context, in *MpMessageUserIn, out *Response) error
		DeleteByIds(ctx context.Context, in *MpMessageUserInBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *MpMessageUserIn, out *Response) error
		UpdateAll(ctx context.Context, in *MpMessageUserIn, out *Response) error
		UpdateFields(ctx context.Context, in *MpMessageUserInUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *MpMessageUserInFilter, out *MpMessageUserInResponse) error
		Find(ctx context.Context, in *MpMessageUserInFilter, out *MpMessageUserInResponse) error
		Lists(ctx context.Context, in *MpMessageUserInListRequest, out *MpMessageUserInResponse) error
		GroupLists(ctx context.Context, in *MpMessageUserInListRequest, out *MpMessageUserInGroupResponse) error
	}
	type MpMessageUserInService struct {
		mpMessageUserInService
	}
	h := &mpMessageUserInServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserInService.Create",
		Path:    []string{"/v1/mpMessageUserIn/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserInService.Delete",
		Path:    []string{"/v1/mpMessageUserIn/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserInService.DeleteById",
		Path:    []string{"/v1/mpMessageUserIn/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserInService.DeleteByIds",
		Path:    []string{"/v1/mpMessageUserIn/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserInService.Update",
		Path:    []string{"/v1/mpMessageUserIn/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserInService.UpdateAll",
		Path:    []string{"/v1/mpMessageUserIn/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserInService.UpdateFields",
		Path:    []string{"/v1/mpMessageUserIn/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserInService.FindById",
		Path:    []string{"/v1/mpMessageUserIn/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserInService.Find",
		Path:    []string{"/v1/mpMessageUserIn/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserInService.Lists",
		Path:    []string{"/v1/mpMessageUserIn/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageUserInService.GroupLists",
		Path:    []string{"/v1/mpMessageUserIn/groupLists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&MpMessageUserInService{h}, opts...))
}

type mpMessageUserInServiceHandler struct {
	MpMessageUserInServiceHandler
}

func (h *mpMessageUserInServiceHandler) Create(ctx context.Context, in *MpMessageUserIn, out *Response) error {
	return h.MpMessageUserInServiceHandler.Create(ctx, in, out)
}

func (h *mpMessageUserInServiceHandler) Delete(ctx context.Context, in *MpMessageUserIn, out *Response) error {
	return h.MpMessageUserInServiceHandler.Delete(ctx, in, out)
}

func (h *mpMessageUserInServiceHandler) DeleteById(ctx context.Context, in *MpMessageUserIn, out *Response) error {
	return h.MpMessageUserInServiceHandler.DeleteById(ctx, in, out)
}

func (h *mpMessageUserInServiceHandler) DeleteByIds(ctx context.Context, in *MpMessageUserInBatchDeleteRequest, out *Response) error {
	return h.MpMessageUserInServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *mpMessageUserInServiceHandler) Update(ctx context.Context, in *MpMessageUserIn, out *Response) error {
	return h.MpMessageUserInServiceHandler.Update(ctx, in, out)
}

func (h *mpMessageUserInServiceHandler) UpdateAll(ctx context.Context, in *MpMessageUserIn, out *Response) error {
	return h.MpMessageUserInServiceHandler.UpdateAll(ctx, in, out)
}

func (h *mpMessageUserInServiceHandler) UpdateFields(ctx context.Context, in *MpMessageUserInUpdateFieldsRequest, out *Response) error {
	return h.MpMessageUserInServiceHandler.UpdateFields(ctx, in, out)
}

func (h *mpMessageUserInServiceHandler) FindById(ctx context.Context, in *MpMessageUserInFilter, out *MpMessageUserInResponse) error {
	return h.MpMessageUserInServiceHandler.FindById(ctx, in, out)
}

func (h *mpMessageUserInServiceHandler) Find(ctx context.Context, in *MpMessageUserInFilter, out *MpMessageUserInResponse) error {
	return h.MpMessageUserInServiceHandler.Find(ctx, in, out)
}

func (h *mpMessageUserInServiceHandler) Lists(ctx context.Context, in *MpMessageUserInListRequest, out *MpMessageUserInResponse) error {
	return h.MpMessageUserInServiceHandler.Lists(ctx, in, out)
}

func (h *mpMessageUserInServiceHandler) GroupLists(ctx context.Context, in *MpMessageUserInListRequest, out *MpMessageUserInGroupResponse) error {
	return h.MpMessageUserInServiceHandler.GroupLists(ctx, in, out)
}
