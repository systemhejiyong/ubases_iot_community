// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: uc_user_feedback_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UcUserFeedbackService service

func NewUcUserFeedbackServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "UcUserFeedbackService.Create",
			Path:    []string{"/v1/ucUserFeedback/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserFeedbackService.Delete",
			Path:    []string{"/v1/ucUserFeedback/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserFeedbackService.DeleteById",
			Path:    []string{"/v1/ucUserFeedback/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserFeedbackService.DeleteByIds",
			Path:    []string{"/v1/ucUserFeedback/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserFeedbackService.Update",
			Path:    []string{"/v1/ucUserFeedback/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserFeedbackService.UpdateAll",
			Path:    []string{"/v1/ucUserFeedback/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserFeedbackService.UpdateFields",
			Path:    []string{"/v1/ucUserFeedback/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserFeedbackService.FindById",
			Path:    []string{"/v1/ucUserFeedback/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserFeedbackService.Find",
			Path:    []string{"/v1/ucUserFeedback/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserFeedbackService.Lists",
			Path:    []string{"/v1/ucUserFeedback/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserFeedbackService.FeedbackLists",
			Path:    []string{"/v1/ucUserFeedback/feedbackLists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserFeedbackService.FeedbackDetails",
			Path:    []string{"/v1/ucUserFeedback/feedbackDetails"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for UcUserFeedbackService service

type UcUserFeedbackService interface {
	//创建
	Create(ctx context.Context, in *UcUserFeedback, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *UcUserFeedback, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *UcUserFeedback, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *UcUserFeedbackBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *UcUserFeedback, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *UcUserFeedback, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *UcUserFeedbackUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *UcUserFeedbackFilter, opts ...client.CallOption) (*UcUserFeedbackResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *UcUserFeedbackFilter, opts ...client.CallOption) (*UcUserFeedbackResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *UcUserFeedbackListRequest, opts ...client.CallOption) (*UcUserFeedbackResponse, error)
	//反馈列表
	FeedbackLists(ctx context.Context, in *UcUserFeedbackListRequest, opts ...client.CallOption) (*UcUserFeedbackResponse, error)
	//返回信息详情
	FeedbackDetails(ctx context.Context, in *UcUserFeedbackFilter, opts ...client.CallOption) (*UcUserFeedbackDetailsResponse, error)
}

type ucUserFeedbackService struct {
	c    client.Client
	name string
}

func NewUcUserFeedbackService(name string, c client.Client) UcUserFeedbackService {
	return &ucUserFeedbackService{
		c:    c,
		name: name,
	}
}

func (c *ucUserFeedbackService) Create(ctx context.Context, in *UcUserFeedback, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserFeedbackService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserFeedbackService) Delete(ctx context.Context, in *UcUserFeedback, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserFeedbackService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserFeedbackService) DeleteById(ctx context.Context, in *UcUserFeedback, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserFeedbackService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserFeedbackService) DeleteByIds(ctx context.Context, in *UcUserFeedbackBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserFeedbackService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserFeedbackService) Update(ctx context.Context, in *UcUserFeedback, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserFeedbackService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserFeedbackService) UpdateAll(ctx context.Context, in *UcUserFeedback, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserFeedbackService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserFeedbackService) UpdateFields(ctx context.Context, in *UcUserFeedbackUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserFeedbackService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserFeedbackService) FindById(ctx context.Context, in *UcUserFeedbackFilter, opts ...client.CallOption) (*UcUserFeedbackResponse, error) {
	req := c.c.NewRequest(c.name, "UcUserFeedbackService.FindById", in)
	out := new(UcUserFeedbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserFeedbackService) Find(ctx context.Context, in *UcUserFeedbackFilter, opts ...client.CallOption) (*UcUserFeedbackResponse, error) {
	req := c.c.NewRequest(c.name, "UcUserFeedbackService.Find", in)
	out := new(UcUserFeedbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserFeedbackService) Lists(ctx context.Context, in *UcUserFeedbackListRequest, opts ...client.CallOption) (*UcUserFeedbackResponse, error) {
	req := c.c.NewRequest(c.name, "UcUserFeedbackService.Lists", in)
	out := new(UcUserFeedbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserFeedbackService) FeedbackLists(ctx context.Context, in *UcUserFeedbackListRequest, opts ...client.CallOption) (*UcUserFeedbackResponse, error) {
	req := c.c.NewRequest(c.name, "UcUserFeedbackService.FeedbackLists", in)
	out := new(UcUserFeedbackResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserFeedbackService) FeedbackDetails(ctx context.Context, in *UcUserFeedbackFilter, opts ...client.CallOption) (*UcUserFeedbackDetailsResponse, error) {
	req := c.c.NewRequest(c.name, "UcUserFeedbackService.FeedbackDetails", in)
	out := new(UcUserFeedbackDetailsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UcUserFeedbackService service

type UcUserFeedbackServiceHandler interface {
	//创建
	Create(context.Context, *UcUserFeedback, *Response) error
	//匹配多条件删除
	Delete(context.Context, *UcUserFeedback, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *UcUserFeedback, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *UcUserFeedbackBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *UcUserFeedback, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *UcUserFeedback, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *UcUserFeedbackUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *UcUserFeedbackFilter, *UcUserFeedbackResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *UcUserFeedbackFilter, *UcUserFeedbackResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *UcUserFeedbackListRequest, *UcUserFeedbackResponse) error
	//反馈列表
	FeedbackLists(context.Context, *UcUserFeedbackListRequest, *UcUserFeedbackResponse) error
	//返回信息详情
	FeedbackDetails(context.Context, *UcUserFeedbackFilter, *UcUserFeedbackDetailsResponse) error
}

func RegisterUcUserFeedbackServiceHandler(s server.Server, hdlr UcUserFeedbackServiceHandler, opts ...server.HandlerOption) error {
	type ucUserFeedbackService interface {
		Create(ctx context.Context, in *UcUserFeedback, out *Response) error
		Delete(ctx context.Context, in *UcUserFeedback, out *Response) error
		DeleteById(ctx context.Context, in *UcUserFeedback, out *Response) error
		DeleteByIds(ctx context.Context, in *UcUserFeedbackBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *UcUserFeedback, out *Response) error
		UpdateAll(ctx context.Context, in *UcUserFeedback, out *Response) error
		UpdateFields(ctx context.Context, in *UcUserFeedbackUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *UcUserFeedbackFilter, out *UcUserFeedbackResponse) error
		Find(ctx context.Context, in *UcUserFeedbackFilter, out *UcUserFeedbackResponse) error
		Lists(ctx context.Context, in *UcUserFeedbackListRequest, out *UcUserFeedbackResponse) error
		FeedbackLists(ctx context.Context, in *UcUserFeedbackListRequest, out *UcUserFeedbackResponse) error
		FeedbackDetails(ctx context.Context, in *UcUserFeedbackFilter, out *UcUserFeedbackDetailsResponse) error
	}
	type UcUserFeedbackService struct {
		ucUserFeedbackService
	}
	h := &ucUserFeedbackServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserFeedbackService.Create",
		Path:    []string{"/v1/ucUserFeedback/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserFeedbackService.Delete",
		Path:    []string{"/v1/ucUserFeedback/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserFeedbackService.DeleteById",
		Path:    []string{"/v1/ucUserFeedback/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserFeedbackService.DeleteByIds",
		Path:    []string{"/v1/ucUserFeedback/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserFeedbackService.Update",
		Path:    []string{"/v1/ucUserFeedback/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserFeedbackService.UpdateAll",
		Path:    []string{"/v1/ucUserFeedback/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserFeedbackService.UpdateFields",
		Path:    []string{"/v1/ucUserFeedback/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserFeedbackService.FindById",
		Path:    []string{"/v1/ucUserFeedback/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserFeedbackService.Find",
		Path:    []string{"/v1/ucUserFeedback/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserFeedbackService.Lists",
		Path:    []string{"/v1/ucUserFeedback/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserFeedbackService.FeedbackLists",
		Path:    []string{"/v1/ucUserFeedback/feedbackLists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserFeedbackService.FeedbackDetails",
		Path:    []string{"/v1/ucUserFeedback/feedbackDetails"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&UcUserFeedbackService{h}, opts...))
}

type ucUserFeedbackServiceHandler struct {
	UcUserFeedbackServiceHandler
}

func (h *ucUserFeedbackServiceHandler) Create(ctx context.Context, in *UcUserFeedback, out *Response) error {
	return h.UcUserFeedbackServiceHandler.Create(ctx, in, out)
}

func (h *ucUserFeedbackServiceHandler) Delete(ctx context.Context, in *UcUserFeedback, out *Response) error {
	return h.UcUserFeedbackServiceHandler.Delete(ctx, in, out)
}

func (h *ucUserFeedbackServiceHandler) DeleteById(ctx context.Context, in *UcUserFeedback, out *Response) error {
	return h.UcUserFeedbackServiceHandler.DeleteById(ctx, in, out)
}

func (h *ucUserFeedbackServiceHandler) DeleteByIds(ctx context.Context, in *UcUserFeedbackBatchDeleteRequest, out *Response) error {
	return h.UcUserFeedbackServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *ucUserFeedbackServiceHandler) Update(ctx context.Context, in *UcUserFeedback, out *Response) error {
	return h.UcUserFeedbackServiceHandler.Update(ctx, in, out)
}

func (h *ucUserFeedbackServiceHandler) UpdateAll(ctx context.Context, in *UcUserFeedback, out *Response) error {
	return h.UcUserFeedbackServiceHandler.UpdateAll(ctx, in, out)
}

func (h *ucUserFeedbackServiceHandler) UpdateFields(ctx context.Context, in *UcUserFeedbackUpdateFieldsRequest, out *Response) error {
	return h.UcUserFeedbackServiceHandler.UpdateFields(ctx, in, out)
}

func (h *ucUserFeedbackServiceHandler) FindById(ctx context.Context, in *UcUserFeedbackFilter, out *UcUserFeedbackResponse) error {
	return h.UcUserFeedbackServiceHandler.FindById(ctx, in, out)
}

func (h *ucUserFeedbackServiceHandler) Find(ctx context.Context, in *UcUserFeedbackFilter, out *UcUserFeedbackResponse) error {
	return h.UcUserFeedbackServiceHandler.Find(ctx, in, out)
}

func (h *ucUserFeedbackServiceHandler) Lists(ctx context.Context, in *UcUserFeedbackListRequest, out *UcUserFeedbackResponse) error {
	return h.UcUserFeedbackServiceHandler.Lists(ctx, in, out)
}

func (h *ucUserFeedbackServiceHandler) FeedbackLists(ctx context.Context, in *UcUserFeedbackListRequest, out *UcUserFeedbackResponse) error {
	return h.UcUserFeedbackServiceHandler.FeedbackLists(ctx, in, out)
}

func (h *ucUserFeedbackServiceHandler) FeedbackDetails(ctx context.Context, in *UcUserFeedbackFilter, out *UcUserFeedbackDetailsResponse) error {
	return h.UcUserFeedbackServiceHandler.FeedbackDetails(ctx, in, out)
}
