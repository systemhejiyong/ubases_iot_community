// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: iot_device_timer_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for IotDeviceTimerService service

func NewIotDeviceTimerServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "IotDeviceTimerService.Create",
			Path:    []string{"/v1/iotDeviceTimer/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTimerService.Delete",
			Path:    []string{"/v1/iotDeviceTimer/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTimerService.DeleteById",
			Path:    []string{"/v1/iotDeviceTimer/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTimerService.DeleteByIds",
			Path:    []string{"/v1/iotDeviceTimer/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTimerService.Update",
			Path:    []string{"/v1/iotDeviceTimer/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTimerService.UpdateAll",
			Path:    []string{"/v1/iotDeviceTimer/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTimerService.UpdateFields",
			Path:    []string{"/v1/iotDeviceTimer/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTimerService.FindById",
			Path:    []string{"/v1/iotDeviceTimer/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTimerService.Find",
			Path:    []string{"/v1/iotDeviceTimer/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTimerService.Lists",
			Path:    []string{"/v1/iotDeviceTimer/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTimerService.StartIotDeviceTimerJob",
			Path:    []string{"/v1/iotDeviceTimer/startIotDeviceTimerJob"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTimerService.StopIotDeviceTimerJob",
			Path:    []string{"/v1/iotDeviceTimer/stopIotDeviceTimerJob"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for IotDeviceTimerService service

type IotDeviceTimerService interface {
	//创建
	Create(ctx context.Context, in *IotDeviceTimer, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *IotDeviceTimer, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *IotDeviceTimer, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *IotDeviceTimerBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *IotDeviceTimer, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *IotDeviceTimer, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *IotDeviceTimerUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *IotDeviceTimerFilter, opts ...client.CallOption) (*IotDeviceTimerResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *IotDeviceTimerFilter, opts ...client.CallOption) (*IotDeviceTimerResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *IotDeviceTimerListRequest, opts ...client.CallOption) (*IotDeviceTimerResponse, error)
	// 开始倒计时任务
	StartIotDeviceTimerJob(ctx context.Context, in *IotDeviceTimerJobReq, opts ...client.CallOption) (*Response, error)
	// 关闭倒计时任务
	StopIotDeviceTimerJob(ctx context.Context, in *IotDeviceTimerJobReq, opts ...client.CallOption) (*Response, error)
}

type iotDeviceTimerService struct {
	c    client.Client
	name string
}

func NewIotDeviceTimerService(name string, c client.Client) IotDeviceTimerService {
	return &iotDeviceTimerService{
		c:    c,
		name: name,
	}
}

func (c *iotDeviceTimerService) Create(ctx context.Context, in *IotDeviceTimer, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTimerService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTimerService) Delete(ctx context.Context, in *IotDeviceTimer, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTimerService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTimerService) DeleteById(ctx context.Context, in *IotDeviceTimer, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTimerService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTimerService) DeleteByIds(ctx context.Context, in *IotDeviceTimerBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTimerService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTimerService) Update(ctx context.Context, in *IotDeviceTimer, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTimerService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTimerService) UpdateAll(ctx context.Context, in *IotDeviceTimer, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTimerService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTimerService) UpdateFields(ctx context.Context, in *IotDeviceTimerUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTimerService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTimerService) FindById(ctx context.Context, in *IotDeviceTimerFilter, opts ...client.CallOption) (*IotDeviceTimerResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTimerService.FindById", in)
	out := new(IotDeviceTimerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTimerService) Find(ctx context.Context, in *IotDeviceTimerFilter, opts ...client.CallOption) (*IotDeviceTimerResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTimerService.Find", in)
	out := new(IotDeviceTimerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTimerService) Lists(ctx context.Context, in *IotDeviceTimerListRequest, opts ...client.CallOption) (*IotDeviceTimerResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTimerService.Lists", in)
	out := new(IotDeviceTimerResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTimerService) StartIotDeviceTimerJob(ctx context.Context, in *IotDeviceTimerJobReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTimerService.StartIotDeviceTimerJob", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTimerService) StopIotDeviceTimerJob(ctx context.Context, in *IotDeviceTimerJobReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTimerService.StopIotDeviceTimerJob", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IotDeviceTimerService service

type IotDeviceTimerServiceHandler interface {
	//创建
	Create(context.Context, *IotDeviceTimer, *Response) error
	//匹配多条件删除
	Delete(context.Context, *IotDeviceTimer, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *IotDeviceTimer, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *IotDeviceTimerBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *IotDeviceTimer, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *IotDeviceTimer, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *IotDeviceTimerUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *IotDeviceTimerFilter, *IotDeviceTimerResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *IotDeviceTimerFilter, *IotDeviceTimerResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *IotDeviceTimerListRequest, *IotDeviceTimerResponse) error
	// 开始倒计时任务
	StartIotDeviceTimerJob(context.Context, *IotDeviceTimerJobReq, *Response) error
	// 关闭倒计时任务
	StopIotDeviceTimerJob(context.Context, *IotDeviceTimerJobReq, *Response) error
}

func RegisterIotDeviceTimerServiceHandler(s server.Server, hdlr IotDeviceTimerServiceHandler, opts ...server.HandlerOption) error {
	type iotDeviceTimerService interface {
		Create(ctx context.Context, in *IotDeviceTimer, out *Response) error
		Delete(ctx context.Context, in *IotDeviceTimer, out *Response) error
		DeleteById(ctx context.Context, in *IotDeviceTimer, out *Response) error
		DeleteByIds(ctx context.Context, in *IotDeviceTimerBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *IotDeviceTimer, out *Response) error
		UpdateAll(ctx context.Context, in *IotDeviceTimer, out *Response) error
		UpdateFields(ctx context.Context, in *IotDeviceTimerUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *IotDeviceTimerFilter, out *IotDeviceTimerResponse) error
		Find(ctx context.Context, in *IotDeviceTimerFilter, out *IotDeviceTimerResponse) error
		Lists(ctx context.Context, in *IotDeviceTimerListRequest, out *IotDeviceTimerResponse) error
		StartIotDeviceTimerJob(ctx context.Context, in *IotDeviceTimerJobReq, out *Response) error
		StopIotDeviceTimerJob(ctx context.Context, in *IotDeviceTimerJobReq, out *Response) error
	}
	type IotDeviceTimerService struct {
		iotDeviceTimerService
	}
	h := &iotDeviceTimerServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTimerService.Create",
		Path:    []string{"/v1/iotDeviceTimer/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTimerService.Delete",
		Path:    []string{"/v1/iotDeviceTimer/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTimerService.DeleteById",
		Path:    []string{"/v1/iotDeviceTimer/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTimerService.DeleteByIds",
		Path:    []string{"/v1/iotDeviceTimer/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTimerService.Update",
		Path:    []string{"/v1/iotDeviceTimer/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTimerService.UpdateAll",
		Path:    []string{"/v1/iotDeviceTimer/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTimerService.UpdateFields",
		Path:    []string{"/v1/iotDeviceTimer/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTimerService.FindById",
		Path:    []string{"/v1/iotDeviceTimer/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTimerService.Find",
		Path:    []string{"/v1/iotDeviceTimer/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTimerService.Lists",
		Path:    []string{"/v1/iotDeviceTimer/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTimerService.StartIotDeviceTimerJob",
		Path:    []string{"/v1/iotDeviceTimer/startIotDeviceTimerJob"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTimerService.StopIotDeviceTimerJob",
		Path:    []string{"/v1/iotDeviceTimer/stopIotDeviceTimerJob"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&IotDeviceTimerService{h}, opts...))
}

type iotDeviceTimerServiceHandler struct {
	IotDeviceTimerServiceHandler
}

func (h *iotDeviceTimerServiceHandler) Create(ctx context.Context, in *IotDeviceTimer, out *Response) error {
	return h.IotDeviceTimerServiceHandler.Create(ctx, in, out)
}

func (h *iotDeviceTimerServiceHandler) Delete(ctx context.Context, in *IotDeviceTimer, out *Response) error {
	return h.IotDeviceTimerServiceHandler.Delete(ctx, in, out)
}

func (h *iotDeviceTimerServiceHandler) DeleteById(ctx context.Context, in *IotDeviceTimer, out *Response) error {
	return h.IotDeviceTimerServiceHandler.DeleteById(ctx, in, out)
}

func (h *iotDeviceTimerServiceHandler) DeleteByIds(ctx context.Context, in *IotDeviceTimerBatchDeleteRequest, out *Response) error {
	return h.IotDeviceTimerServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *iotDeviceTimerServiceHandler) Update(ctx context.Context, in *IotDeviceTimer, out *Response) error {
	return h.IotDeviceTimerServiceHandler.Update(ctx, in, out)
}

func (h *iotDeviceTimerServiceHandler) UpdateAll(ctx context.Context, in *IotDeviceTimer, out *Response) error {
	return h.IotDeviceTimerServiceHandler.UpdateAll(ctx, in, out)
}

func (h *iotDeviceTimerServiceHandler) UpdateFields(ctx context.Context, in *IotDeviceTimerUpdateFieldsRequest, out *Response) error {
	return h.IotDeviceTimerServiceHandler.UpdateFields(ctx, in, out)
}

func (h *iotDeviceTimerServiceHandler) FindById(ctx context.Context, in *IotDeviceTimerFilter, out *IotDeviceTimerResponse) error {
	return h.IotDeviceTimerServiceHandler.FindById(ctx, in, out)
}

func (h *iotDeviceTimerServiceHandler) Find(ctx context.Context, in *IotDeviceTimerFilter, out *IotDeviceTimerResponse) error {
	return h.IotDeviceTimerServiceHandler.Find(ctx, in, out)
}

func (h *iotDeviceTimerServiceHandler) Lists(ctx context.Context, in *IotDeviceTimerListRequest, out *IotDeviceTimerResponse) error {
	return h.IotDeviceTimerServiceHandler.Lists(ctx, in, out)
}

func (h *iotDeviceTimerServiceHandler) StartIotDeviceTimerJob(ctx context.Context, in *IotDeviceTimerJobReq, out *Response) error {
	return h.IotDeviceTimerServiceHandler.StartIotDeviceTimerJob(ctx, in, out)
}

func (h *iotDeviceTimerServiceHandler) StopIotDeviceTimerJob(ctx context.Context, in *IotDeviceTimerJobReq, out *Response) error {
	return h.IotDeviceTimerServiceHandler.StopIotDeviceTimerJob(ctx, in, out)
}
