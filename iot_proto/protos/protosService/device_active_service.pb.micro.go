// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: device_active_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DeviceActiveService service

func NewDeviceActiveServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "DeviceActiveService.Lists",
			Path:    []string{"/v1/deviceActive/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for DeviceActiveService service

type DeviceActiveService interface {
	Lists(ctx context.Context, in *DeviceActiveListFilter, opts ...client.CallOption) (*DeviceActiveResponse, error)
}

type deviceActiveService struct {
	c    client.Client
	name string
}

func NewDeviceActiveService(name string, c client.Client) DeviceActiveService {
	return &deviceActiveService{
		c:    c,
		name: name,
	}
}

func (c *deviceActiveService) Lists(ctx context.Context, in *DeviceActiveListFilter, opts ...client.CallOption) (*DeviceActiveResponse, error) {
	req := c.c.NewRequest(c.name, "DeviceActiveService.Lists", in)
	out := new(DeviceActiveResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeviceActiveService service

type DeviceActiveServiceHandler interface {
	Lists(context.Context, *DeviceActiveListFilter, *DeviceActiveResponse) error
}

func RegisterDeviceActiveServiceHandler(s server.Server, hdlr DeviceActiveServiceHandler, opts ...server.HandlerOption) error {
	type deviceActiveService interface {
		Lists(ctx context.Context, in *DeviceActiveListFilter, out *DeviceActiveResponse) error
	}
	type DeviceActiveService struct {
		deviceActiveService
	}
	h := &deviceActiveServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "DeviceActiveService.Lists",
		Path:    []string{"/v1/deviceActive/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&DeviceActiveService{h}, opts...))
}

type deviceActiveServiceHandler struct {
	DeviceActiveServiceHandler
}

func (h *deviceActiveServiceHandler) Lists(ctx context.Context, in *DeviceActiveListFilter, out *DeviceActiveResponse) error {
	return h.DeviceActiveServiceHandler.Lists(ctx, in, out)
}
