// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: opm_product_panel_relation_service.proto

package protosService

import (
	fmt "fmt"
	math "math"

	proto "google.golang.org/protobuf/proto"

	context "context"

	api "go-micro.dev/v4/api"

	client "go-micro.dev/v4/client"

	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpmProductPanelRelationService service

func NewOpmProductPanelRelationServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpmProductPanelRelationService.Create",
			Path:    []string{"/v1/opmProductPanelRelation/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductPanelRelationService.BatchCreate",
			Path:    []string{"/v1/opmProductPanelRelation/batchCreate"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductPanelRelationService.Delete",
			Path:    []string{"/v1/opmProductPanelRelation/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductPanelRelationService.DeleteById",
			Path:    []string{"/v1/opmProductPanelRelation/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductPanelRelationService.DeleteByIds",
			Path:    []string{"/v1/opmProductPanelRelation/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductPanelRelationService.Update",
			Path:    []string{"/v1/opmProductPanelRelation/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductPanelRelationService.UpdateAll",
			Path:    []string{"/v1/opmProductPanelRelation/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductPanelRelationService.UpdateFields",
			Path:    []string{"/v1/opmProductPanelRelation/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductPanelRelationService.FindById",
			Path:    []string{"/v1/opmProductPanelRelation/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductPanelRelationService.Find",
			Path:    []string{"/v1/opmProductPanelRelation/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductPanelRelationService.Lists",
			Path:    []string{"/v1/opmProductPanelRelation/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpmProductPanelRelationService service

type OpmProductPanelRelationService interface {
	//创建
	Create(ctx context.Context, in *OpmProductPanelRelation, opts ...client.CallOption) (*Response, error)
	//批量创建
	BatchCreate(ctx context.Context, in *OpmProductPanelRelationList, opts ...client.CallOption) (*OpmProductPanelRelationResponse, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpmProductPanelRelation, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpmProductPanelRelation, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpmProductPanelRelationBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpmProductPanelRelation, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpmProductPanelRelation, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpmProductPanelRelationUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpmProductPanelRelationFilter, opts ...client.CallOption) (*OpmProductPanelRelationResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpmProductPanelRelationFilter, opts ...client.CallOption) (*OpmProductPanelRelationResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpmProductPanelRelationListRequest, opts ...client.CallOption) (*OpmProductPanelRelationResponse, error)
}

type opmProductPanelRelationService struct {
	c    client.Client
	name string
}

func NewOpmProductPanelRelationService(name string, c client.Client) OpmProductPanelRelationService {
	return &opmProductPanelRelationService{
		c:    c,
		name: name,
	}
}

func (c *opmProductPanelRelationService) Create(ctx context.Context, in *OpmProductPanelRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductPanelRelationService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductPanelRelationService) BatchCreate(ctx context.Context, in *OpmProductPanelRelationList, opts ...client.CallOption) (*OpmProductPanelRelationResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductPanelRelationService.BatchCreate", in)
	out := new(OpmProductPanelRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductPanelRelationService) Delete(ctx context.Context, in *OpmProductPanelRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductPanelRelationService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductPanelRelationService) DeleteById(ctx context.Context, in *OpmProductPanelRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductPanelRelationService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductPanelRelationService) DeleteByIds(ctx context.Context, in *OpmProductPanelRelationBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductPanelRelationService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductPanelRelationService) Update(ctx context.Context, in *OpmProductPanelRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductPanelRelationService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductPanelRelationService) UpdateAll(ctx context.Context, in *OpmProductPanelRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductPanelRelationService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductPanelRelationService) UpdateFields(ctx context.Context, in *OpmProductPanelRelationUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductPanelRelationService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductPanelRelationService) FindById(ctx context.Context, in *OpmProductPanelRelationFilter, opts ...client.CallOption) (*OpmProductPanelRelationResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductPanelRelationService.FindById", in)
	out := new(OpmProductPanelRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductPanelRelationService) Find(ctx context.Context, in *OpmProductPanelRelationFilter, opts ...client.CallOption) (*OpmProductPanelRelationResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductPanelRelationService.Find", in)
	out := new(OpmProductPanelRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductPanelRelationService) Lists(ctx context.Context, in *OpmProductPanelRelationListRequest, opts ...client.CallOption) (*OpmProductPanelRelationResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductPanelRelationService.Lists", in)
	out := new(OpmProductPanelRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpmProductPanelRelationService service

type OpmProductPanelRelationServiceHandler interface {
	//创建
	Create(context.Context, *OpmProductPanelRelation, *Response) error
	//批量创建
	BatchCreate(context.Context, *OpmProductPanelRelationList, *OpmProductPanelRelationResponse) error
	//匹配多条件删除
	Delete(context.Context, *OpmProductPanelRelation, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpmProductPanelRelation, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpmProductPanelRelationBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpmProductPanelRelation, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpmProductPanelRelation, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpmProductPanelRelationUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpmProductPanelRelationFilter, *OpmProductPanelRelationResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpmProductPanelRelationFilter, *OpmProductPanelRelationResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpmProductPanelRelationListRequest, *OpmProductPanelRelationResponse) error
}

func RegisterOpmProductPanelRelationServiceHandler(s server.Server, hdlr OpmProductPanelRelationServiceHandler, opts ...server.HandlerOption) error {
	type opmProductPanelRelationService interface {
		Create(ctx context.Context, in *OpmProductPanelRelation, out *Response) error
		BatchCreate(ctx context.Context, in *OpmProductPanelRelationList, out *OpmProductPanelRelationResponse) error
		Delete(ctx context.Context, in *OpmProductPanelRelation, out *Response) error
		DeleteById(ctx context.Context, in *OpmProductPanelRelation, out *Response) error
		DeleteByIds(ctx context.Context, in *OpmProductPanelRelationBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpmProductPanelRelation, out *Response) error
		UpdateAll(ctx context.Context, in *OpmProductPanelRelation, out *Response) error
		UpdateFields(ctx context.Context, in *OpmProductPanelRelationUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpmProductPanelRelationFilter, out *OpmProductPanelRelationResponse) error
		Find(ctx context.Context, in *OpmProductPanelRelationFilter, out *OpmProductPanelRelationResponse) error
		Lists(ctx context.Context, in *OpmProductPanelRelationListRequest, out *OpmProductPanelRelationResponse) error
	}
	type OpmProductPanelRelationService struct {
		opmProductPanelRelationService
	}
	h := &opmProductPanelRelationServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductPanelRelationService.Create",
		Path:    []string{"/v1/opmProductPanelRelation/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductPanelRelationService.BatchCreate",
		Path:    []string{"/v1/opmProductPanelRelation/batchCreate"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductPanelRelationService.Delete",
		Path:    []string{"/v1/opmProductPanelRelation/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductPanelRelationService.DeleteById",
		Path:    []string{"/v1/opmProductPanelRelation/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductPanelRelationService.DeleteByIds",
		Path:    []string{"/v1/opmProductPanelRelation/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductPanelRelationService.Update",
		Path:    []string{"/v1/opmProductPanelRelation/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductPanelRelationService.UpdateAll",
		Path:    []string{"/v1/opmProductPanelRelation/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductPanelRelationService.UpdateFields",
		Path:    []string{"/v1/opmProductPanelRelation/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductPanelRelationService.FindById",
		Path:    []string{"/v1/opmProductPanelRelation/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductPanelRelationService.Find",
		Path:    []string{"/v1/opmProductPanelRelation/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductPanelRelationService.Lists",
		Path:    []string{"/v1/opmProductPanelRelation/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpmProductPanelRelationService{h}, opts...))
}

type opmProductPanelRelationServiceHandler struct {
	OpmProductPanelRelationServiceHandler
}

func (h *opmProductPanelRelationServiceHandler) Create(ctx context.Context, in *OpmProductPanelRelation, out *Response) error {
	return h.OpmProductPanelRelationServiceHandler.Create(ctx, in, out)
}

func (h *opmProductPanelRelationServiceHandler) BatchCreate(ctx context.Context, in *OpmProductPanelRelationList, out *OpmProductPanelRelationResponse) error {
	return h.OpmProductPanelRelationServiceHandler.BatchCreate(ctx, in, out)
}

func (h *opmProductPanelRelationServiceHandler) Delete(ctx context.Context, in *OpmProductPanelRelation, out *Response) error {
	return h.OpmProductPanelRelationServiceHandler.Delete(ctx, in, out)
}

func (h *opmProductPanelRelationServiceHandler) DeleteById(ctx context.Context, in *OpmProductPanelRelation, out *Response) error {
	return h.OpmProductPanelRelationServiceHandler.DeleteById(ctx, in, out)
}

func (h *opmProductPanelRelationServiceHandler) DeleteByIds(ctx context.Context, in *OpmProductPanelRelationBatchDeleteRequest, out *Response) error {
	return h.OpmProductPanelRelationServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *opmProductPanelRelationServiceHandler) Update(ctx context.Context, in *OpmProductPanelRelation, out *Response) error {
	return h.OpmProductPanelRelationServiceHandler.Update(ctx, in, out)
}

func (h *opmProductPanelRelationServiceHandler) UpdateAll(ctx context.Context, in *OpmProductPanelRelation, out *Response) error {
	return h.OpmProductPanelRelationServiceHandler.UpdateAll(ctx, in, out)
}

func (h *opmProductPanelRelationServiceHandler) UpdateFields(ctx context.Context, in *OpmProductPanelRelationUpdateFieldsRequest, out *Response) error {
	return h.OpmProductPanelRelationServiceHandler.UpdateFields(ctx, in, out)
}

func (h *opmProductPanelRelationServiceHandler) FindById(ctx context.Context, in *OpmProductPanelRelationFilter, out *OpmProductPanelRelationResponse) error {
	return h.OpmProductPanelRelationServiceHandler.FindById(ctx, in, out)
}

func (h *opmProductPanelRelationServiceHandler) Find(ctx context.Context, in *OpmProductPanelRelationFilter, out *OpmProductPanelRelationResponse) error {
	return h.OpmProductPanelRelationServiceHandler.Find(ctx, in, out)
}

func (h *opmProductPanelRelationServiceHandler) Lists(ctx context.Context, in *OpmProductPanelRelationListRequest, out *OpmProductPanelRelationResponse) error {
	return h.OpmProductPanelRelationServiceHandler.Lists(ctx, in, out)
}
