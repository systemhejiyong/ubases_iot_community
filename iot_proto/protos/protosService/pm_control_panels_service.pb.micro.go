// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: pm_control_panels_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PmControlPanelsService service

func NewPmControlPanelsServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "PmControlPanelsService.Create",
			Path:    []string{"/v1/pmControlPanels/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmControlPanelsService.Delete",
			Path:    []string{"/v1/pmControlPanels/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmControlPanelsService.DeleteById",
			Path:    []string{"/v1/pmControlPanels/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmControlPanelsService.DeleteByIds",
			Path:    []string{"/v1/pmControlPanels/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmControlPanelsService.Update",
			Path:    []string{"/v1/pmControlPanels/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmControlPanelsService.UpdateAll",
			Path:    []string{"/v1/pmControlPanels/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmControlPanelsService.UpdateFields",
			Path:    []string{"/v1/pmControlPanels/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmControlPanelsService.FindById",
			Path:    []string{"/v1/pmControlPanels/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmControlPanelsService.Find",
			Path:    []string{"/v1/pmControlPanels/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "PmControlPanelsService.Lists",
			Path:    []string{"/v1/pmControlPanels/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for PmControlPanelsService service

type PmControlPanelsService interface {
	//创建
	Create(ctx context.Context, in *PmControlPanels, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *PmControlPanels, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *PmControlPanels, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *PmControlPanelsBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *PmControlPanels, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *PmControlPanels, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *PmControlPanelsUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *PmControlPanelsFilter, opts ...client.CallOption) (*PmControlPanelsResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *PmControlPanelsFilter, opts ...client.CallOption) (*PmControlPanelsResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *PmControlPanelsListRequest, opts ...client.CallOption) (*PmControlPanelsResponse, error)
}

type pmControlPanelsService struct {
	c    client.Client
	name string
}

func NewPmControlPanelsService(name string, c client.Client) PmControlPanelsService {
	return &pmControlPanelsService{
		c:    c,
		name: name,
	}
}

func (c *pmControlPanelsService) Create(ctx context.Context, in *PmControlPanels, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmControlPanelsService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmControlPanelsService) Delete(ctx context.Context, in *PmControlPanels, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmControlPanelsService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmControlPanelsService) DeleteById(ctx context.Context, in *PmControlPanels, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmControlPanelsService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmControlPanelsService) DeleteByIds(ctx context.Context, in *PmControlPanelsBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmControlPanelsService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmControlPanelsService) Update(ctx context.Context, in *PmControlPanels, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmControlPanelsService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmControlPanelsService) UpdateAll(ctx context.Context, in *PmControlPanels, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmControlPanelsService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmControlPanelsService) UpdateFields(ctx context.Context, in *PmControlPanelsUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "PmControlPanelsService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmControlPanelsService) FindById(ctx context.Context, in *PmControlPanelsFilter, opts ...client.CallOption) (*PmControlPanelsResponse, error) {
	req := c.c.NewRequest(c.name, "PmControlPanelsService.FindById", in)
	out := new(PmControlPanelsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmControlPanelsService) Find(ctx context.Context, in *PmControlPanelsFilter, opts ...client.CallOption) (*PmControlPanelsResponse, error) {
	req := c.c.NewRequest(c.name, "PmControlPanelsService.Find", in)
	out := new(PmControlPanelsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pmControlPanelsService) Lists(ctx context.Context, in *PmControlPanelsListRequest, opts ...client.CallOption) (*PmControlPanelsResponse, error) {
	req := c.c.NewRequest(c.name, "PmControlPanelsService.Lists", in)
	out := new(PmControlPanelsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PmControlPanelsService service

type PmControlPanelsServiceHandler interface {
	//创建
	Create(context.Context, *PmControlPanels, *Response) error
	//匹配多条件删除
	Delete(context.Context, *PmControlPanels, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *PmControlPanels, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *PmControlPanelsBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *PmControlPanels, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *PmControlPanels, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *PmControlPanelsUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *PmControlPanelsFilter, *PmControlPanelsResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *PmControlPanelsFilter, *PmControlPanelsResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *PmControlPanelsListRequest, *PmControlPanelsResponse) error
}

func RegisterPmControlPanelsServiceHandler(s server.Server, hdlr PmControlPanelsServiceHandler, opts ...server.HandlerOption) error {
	type pmControlPanelsService interface {
		Create(ctx context.Context, in *PmControlPanels, out *Response) error
		Delete(ctx context.Context, in *PmControlPanels, out *Response) error
		DeleteById(ctx context.Context, in *PmControlPanels, out *Response) error
		DeleteByIds(ctx context.Context, in *PmControlPanelsBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *PmControlPanels, out *Response) error
		UpdateAll(ctx context.Context, in *PmControlPanels, out *Response) error
		UpdateFields(ctx context.Context, in *PmControlPanelsUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *PmControlPanelsFilter, out *PmControlPanelsResponse) error
		Find(ctx context.Context, in *PmControlPanelsFilter, out *PmControlPanelsResponse) error
		Lists(ctx context.Context, in *PmControlPanelsListRequest, out *PmControlPanelsResponse) error
	}
	type PmControlPanelsService struct {
		pmControlPanelsService
	}
	h := &pmControlPanelsServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmControlPanelsService.Create",
		Path:    []string{"/v1/pmControlPanels/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmControlPanelsService.Delete",
		Path:    []string{"/v1/pmControlPanels/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmControlPanelsService.DeleteById",
		Path:    []string{"/v1/pmControlPanels/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmControlPanelsService.DeleteByIds",
		Path:    []string{"/v1/pmControlPanels/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmControlPanelsService.Update",
		Path:    []string{"/v1/pmControlPanels/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmControlPanelsService.UpdateAll",
		Path:    []string{"/v1/pmControlPanels/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmControlPanelsService.UpdateFields",
		Path:    []string{"/v1/pmControlPanels/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmControlPanelsService.FindById",
		Path:    []string{"/v1/pmControlPanels/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmControlPanelsService.Find",
		Path:    []string{"/v1/pmControlPanels/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "PmControlPanelsService.Lists",
		Path:    []string{"/v1/pmControlPanels/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&PmControlPanelsService{h}, opts...))
}

type pmControlPanelsServiceHandler struct {
	PmControlPanelsServiceHandler
}

func (h *pmControlPanelsServiceHandler) Create(ctx context.Context, in *PmControlPanels, out *Response) error {
	return h.PmControlPanelsServiceHandler.Create(ctx, in, out)
}

func (h *pmControlPanelsServiceHandler) Delete(ctx context.Context, in *PmControlPanels, out *Response) error {
	return h.PmControlPanelsServiceHandler.Delete(ctx, in, out)
}

func (h *pmControlPanelsServiceHandler) DeleteById(ctx context.Context, in *PmControlPanels, out *Response) error {
	return h.PmControlPanelsServiceHandler.DeleteById(ctx, in, out)
}

func (h *pmControlPanelsServiceHandler) DeleteByIds(ctx context.Context, in *PmControlPanelsBatchDeleteRequest, out *Response) error {
	return h.PmControlPanelsServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *pmControlPanelsServiceHandler) Update(ctx context.Context, in *PmControlPanels, out *Response) error {
	return h.PmControlPanelsServiceHandler.Update(ctx, in, out)
}

func (h *pmControlPanelsServiceHandler) UpdateAll(ctx context.Context, in *PmControlPanels, out *Response) error {
	return h.PmControlPanelsServiceHandler.UpdateAll(ctx, in, out)
}

func (h *pmControlPanelsServiceHandler) UpdateFields(ctx context.Context, in *PmControlPanelsUpdateFieldsRequest, out *Response) error {
	return h.PmControlPanelsServiceHandler.UpdateFields(ctx, in, out)
}

func (h *pmControlPanelsServiceHandler) FindById(ctx context.Context, in *PmControlPanelsFilter, out *PmControlPanelsResponse) error {
	return h.PmControlPanelsServiceHandler.FindById(ctx, in, out)
}

func (h *pmControlPanelsServiceHandler) Find(ctx context.Context, in *PmControlPanelsFilter, out *PmControlPanelsResponse) error {
	return h.PmControlPanelsServiceHandler.Find(ctx, in, out)
}

func (h *pmControlPanelsServiceHandler) Lists(ctx context.Context, in *PmControlPanelsListRequest, out *PmControlPanelsResponse) error {
	return h.PmControlPanelsServiceHandler.Lists(ctx, in, out)
}
