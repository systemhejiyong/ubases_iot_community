// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: lvgl_service.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LvglService service

func NewLvglServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for LvglService service

type LvglService interface {
	GenerateCode(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*NULLX, error)
}

type lvglService struct {
	c    client.Client
	name string
}

func NewLvglService(name string, c client.Client) LvglService {
	return &lvglService{
		c:    c,
		name: name,
	}
}

func (c *lvglService) GenerateCode(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*NULLX, error) {
	req := c.c.NewRequest(c.name, "LvglService.GenerateCode", in)
	out := new(NULLX)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LvglService service

type LvglServiceHandler interface {
	GenerateCode(context.Context, *OpmPanel, *NULLX) error
}

func RegisterLvglServiceHandler(s server.Server, hdlr LvglServiceHandler, opts ...server.HandlerOption) error {
	type lvglService interface {
		GenerateCode(ctx context.Context, in *OpmPanel, out *NULLX) error
	}
	type LvglService struct {
		lvglService
	}
	h := &lvglServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&LvglService{h}, opts...))
}

type lvglServiceHandler struct {
	LvglServiceHandler
}

func (h *lvglServiceHandler) GenerateCode(ctx context.Context, in *OpmPanel, out *NULLX) error {
	return h.LvglServiceHandler.GenerateCode(ctx, in, out)
}
