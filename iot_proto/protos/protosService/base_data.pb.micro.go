// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: base_data.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for BaseData service

func NewBaseDataEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for BaseData service

type BaseDataService interface {
	UpdateTConfigDictData(ctx context.Context, in *TConfigDictDataRequest, opts ...client.CallOption) (*TConfigDictDataResponse, error)
	ListTConfigDictData(ctx context.Context, in *TConfigDictDataFilterPage, opts ...client.CallOption) (*TConfigDictDataResponseList, error)
	DeleteTConfigDictData(ctx context.Context, in *TConfigDictDataRequest, opts ...client.CallOption) (*TConfigDictDataResponse, error)
	GetTConfigDictData(ctx context.Context, in *TConfigDictDataFilter, opts ...client.CallOption) (*TConfigDictDataRequest, error)
	CreateTConfigDictData(ctx context.Context, in *TConfigDictDataRequest, opts ...client.CallOption) (*TConfigDictDataResponse, error)
	GetTConfigDictType(ctx context.Context, in *TConfigDictTypeFilter, opts ...client.CallOption) (*TConfigDictTypeRequest, error)
	CreateTConfigDictType(ctx context.Context, in *TConfigDictTypeRequest, opts ...client.CallOption) (*TConfigDictTypeResponse, error)
	UpdateTConfigDictType(ctx context.Context, in *TConfigDictTypeRequest, opts ...client.CallOption) (*TConfigDictTypeResponse, error)
	ListTConfigDictType(ctx context.Context, in *TConfigDictTypeFilterPage, opts ...client.CallOption) (*TConfigDictTypeResponseList, error)
	DeleteTConfigDictType(ctx context.Context, in *TConfigDictTypeRequest, opts ...client.CallOption) (*TConfigDictTypeResponse, error)
}

type baseDataService struct {
	c    client.Client
	name string
}

func NewBaseDataService(name string, c client.Client) BaseDataService {
	return &baseDataService{
		c:    c,
		name: name,
	}
}

func (c *baseDataService) UpdateTConfigDictData(ctx context.Context, in *TConfigDictDataRequest, opts ...client.CallOption) (*TConfigDictDataResponse, error) {
	req := c.c.NewRequest(c.name, "BaseData.UpdateTConfigDictData", in)
	out := new(TConfigDictDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseDataService) ListTConfigDictData(ctx context.Context, in *TConfigDictDataFilterPage, opts ...client.CallOption) (*TConfigDictDataResponseList, error) {
	req := c.c.NewRequest(c.name, "BaseData.ListTConfigDictData", in)
	out := new(TConfigDictDataResponseList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseDataService) DeleteTConfigDictData(ctx context.Context, in *TConfigDictDataRequest, opts ...client.CallOption) (*TConfigDictDataResponse, error) {
	req := c.c.NewRequest(c.name, "BaseData.DeleteTConfigDictData", in)
	out := new(TConfigDictDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseDataService) GetTConfigDictData(ctx context.Context, in *TConfigDictDataFilter, opts ...client.CallOption) (*TConfigDictDataRequest, error) {
	req := c.c.NewRequest(c.name, "BaseData.GetTConfigDictData", in)
	out := new(TConfigDictDataRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseDataService) CreateTConfigDictData(ctx context.Context, in *TConfigDictDataRequest, opts ...client.CallOption) (*TConfigDictDataResponse, error) {
	req := c.c.NewRequest(c.name, "BaseData.CreateTConfigDictData", in)
	out := new(TConfigDictDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseDataService) GetTConfigDictType(ctx context.Context, in *TConfigDictTypeFilter, opts ...client.CallOption) (*TConfigDictTypeRequest, error) {
	req := c.c.NewRequest(c.name, "BaseData.GetTConfigDictType", in)
	out := new(TConfigDictTypeRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseDataService) CreateTConfigDictType(ctx context.Context, in *TConfigDictTypeRequest, opts ...client.CallOption) (*TConfigDictTypeResponse, error) {
	req := c.c.NewRequest(c.name, "BaseData.CreateTConfigDictType", in)
	out := new(TConfigDictTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseDataService) UpdateTConfigDictType(ctx context.Context, in *TConfigDictTypeRequest, opts ...client.CallOption) (*TConfigDictTypeResponse, error) {
	req := c.c.NewRequest(c.name, "BaseData.UpdateTConfigDictType", in)
	out := new(TConfigDictTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseDataService) ListTConfigDictType(ctx context.Context, in *TConfigDictTypeFilterPage, opts ...client.CallOption) (*TConfigDictTypeResponseList, error) {
	req := c.c.NewRequest(c.name, "BaseData.ListTConfigDictType", in)
	out := new(TConfigDictTypeResponseList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseDataService) DeleteTConfigDictType(ctx context.Context, in *TConfigDictTypeRequest, opts ...client.CallOption) (*TConfigDictTypeResponse, error) {
	req := c.c.NewRequest(c.name, "BaseData.DeleteTConfigDictType", in)
	out := new(TConfigDictTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BaseData service

type BaseDataHandler interface {
	UpdateTConfigDictData(context.Context, *TConfigDictDataRequest, *TConfigDictDataResponse) error
	ListTConfigDictData(context.Context, *TConfigDictDataFilterPage, *TConfigDictDataResponseList) error
	DeleteTConfigDictData(context.Context, *TConfigDictDataRequest, *TConfigDictDataResponse) error
	GetTConfigDictData(context.Context, *TConfigDictDataFilter, *TConfigDictDataRequest) error
	CreateTConfigDictData(context.Context, *TConfigDictDataRequest, *TConfigDictDataResponse) error
	GetTConfigDictType(context.Context, *TConfigDictTypeFilter, *TConfigDictTypeRequest) error
	CreateTConfigDictType(context.Context, *TConfigDictTypeRequest, *TConfigDictTypeResponse) error
	UpdateTConfigDictType(context.Context, *TConfigDictTypeRequest, *TConfigDictTypeResponse) error
	ListTConfigDictType(context.Context, *TConfigDictTypeFilterPage, *TConfigDictTypeResponseList) error
	DeleteTConfigDictType(context.Context, *TConfigDictTypeRequest, *TConfigDictTypeResponse) error
}

func RegisterBaseDataHandler(s server.Server, hdlr BaseDataHandler, opts ...server.HandlerOption) error {
	type baseData interface {
		UpdateTConfigDictData(ctx context.Context, in *TConfigDictDataRequest, out *TConfigDictDataResponse) error
		ListTConfigDictData(ctx context.Context, in *TConfigDictDataFilterPage, out *TConfigDictDataResponseList) error
		DeleteTConfigDictData(ctx context.Context, in *TConfigDictDataRequest, out *TConfigDictDataResponse) error
		GetTConfigDictData(ctx context.Context, in *TConfigDictDataFilter, out *TConfigDictDataRequest) error
		CreateTConfigDictData(ctx context.Context, in *TConfigDictDataRequest, out *TConfigDictDataResponse) error
		GetTConfigDictType(ctx context.Context, in *TConfigDictTypeFilter, out *TConfigDictTypeRequest) error
		CreateTConfigDictType(ctx context.Context, in *TConfigDictTypeRequest, out *TConfigDictTypeResponse) error
		UpdateTConfigDictType(ctx context.Context, in *TConfigDictTypeRequest, out *TConfigDictTypeResponse) error
		ListTConfigDictType(ctx context.Context, in *TConfigDictTypeFilterPage, out *TConfigDictTypeResponseList) error
		DeleteTConfigDictType(ctx context.Context, in *TConfigDictTypeRequest, out *TConfigDictTypeResponse) error
	}
	type BaseData struct {
		baseData
	}
	h := &baseDataHandler{hdlr}
	return s.Handle(s.NewHandler(&BaseData{h}, opts...))
}

type baseDataHandler struct {
	BaseDataHandler
}

func (h *baseDataHandler) UpdateTConfigDictData(ctx context.Context, in *TConfigDictDataRequest, out *TConfigDictDataResponse) error {
	return h.BaseDataHandler.UpdateTConfigDictData(ctx, in, out)
}

func (h *baseDataHandler) ListTConfigDictData(ctx context.Context, in *TConfigDictDataFilterPage, out *TConfigDictDataResponseList) error {
	return h.BaseDataHandler.ListTConfigDictData(ctx, in, out)
}

func (h *baseDataHandler) DeleteTConfigDictData(ctx context.Context, in *TConfigDictDataRequest, out *TConfigDictDataResponse) error {
	return h.BaseDataHandler.DeleteTConfigDictData(ctx, in, out)
}

func (h *baseDataHandler) GetTConfigDictData(ctx context.Context, in *TConfigDictDataFilter, out *TConfigDictDataRequest) error {
	return h.BaseDataHandler.GetTConfigDictData(ctx, in, out)
}

func (h *baseDataHandler) CreateTConfigDictData(ctx context.Context, in *TConfigDictDataRequest, out *TConfigDictDataResponse) error {
	return h.BaseDataHandler.CreateTConfigDictData(ctx, in, out)
}

func (h *baseDataHandler) GetTConfigDictType(ctx context.Context, in *TConfigDictTypeFilter, out *TConfigDictTypeRequest) error {
	return h.BaseDataHandler.GetTConfigDictType(ctx, in, out)
}

func (h *baseDataHandler) CreateTConfigDictType(ctx context.Context, in *TConfigDictTypeRequest, out *TConfigDictTypeResponse) error {
	return h.BaseDataHandler.CreateTConfigDictType(ctx, in, out)
}

func (h *baseDataHandler) UpdateTConfigDictType(ctx context.Context, in *TConfigDictTypeRequest, out *TConfigDictTypeResponse) error {
	return h.BaseDataHandler.UpdateTConfigDictType(ctx, in, out)
}

func (h *baseDataHandler) ListTConfigDictType(ctx context.Context, in *TConfigDictTypeFilterPage, out *TConfigDictTypeResponseList) error {
	return h.BaseDataHandler.ListTConfigDictType(ctx, in, out)
}

func (h *baseDataHandler) DeleteTConfigDictType(ctx context.Context, in *TConfigDictTypeRequest, out *TConfigDictTypeResponse) error {
	return h.BaseDataHandler.DeleteTConfigDictType(ctx, in, out)
}
