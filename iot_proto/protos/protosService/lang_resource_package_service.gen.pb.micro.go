// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: lang_resource_package_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LangResourcePackageService service

func NewLangResourcePackageServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "LangResourcePackageService.Create",
			Path:    []string{"/v1/langResourcePackage/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangResourcePackageService.Delete",
			Path:    []string{"/v1/langResourcePackage/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangResourcePackageService.DeleteById",
			Path:    []string{"/v1/langResourcePackage/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangResourcePackageService.DeleteByIds",
			Path:    []string{"/v1/langResourcePackage/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangResourcePackageService.Update",
			Path:    []string{"/v1/langResourcePackage/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangResourcePackageService.UpdateAll",
			Path:    []string{"/v1/langResourcePackage/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangResourcePackageService.UpdateFields",
			Path:    []string{"/v1/langResourcePackage/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangResourcePackageService.FindById",
			Path:    []string{"/v1/langResourcePackage/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangResourcePackageService.Find",
			Path:    []string{"/v1/langResourcePackage/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangResourcePackageService.Lists",
			Path:    []string{"/v1/langResourcePackage/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangResourcePackageService.CreateV2",
			Path:    []string{"/v1/langResourcePackage/createV2"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for LangResourcePackageService service

type LangResourcePackageService interface {
	//创建
	Create(ctx context.Context, in *LangResourcePackage, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *LangResourcePackage, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *LangResourcePackage, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *LangResourcePackageBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *LangResourcePackage, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *LangResourcePackage, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *LangResourcePackageUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *LangResourcePackageFilter, opts ...client.CallOption) (*LangResourcePackageResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *LangResourcePackageFilter, opts ...client.CallOption) (*LangResourcePackageResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *LangResourcePackageListRequest, opts ...client.CallOption) (*LangResourcePackageResponse, error)
	CreateV2(ctx context.Context, in *LangResourcePackage, opts ...client.CallOption) (*Response, error)
}

type langResourcePackageService struct {
	c    client.Client
	name string
}

func NewLangResourcePackageService(name string, c client.Client) LangResourcePackageService {
	return &langResourcePackageService{
		c:    c,
		name: name,
	}
}

func (c *langResourcePackageService) Create(ctx context.Context, in *LangResourcePackage, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangResourcePackageService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langResourcePackageService) Delete(ctx context.Context, in *LangResourcePackage, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangResourcePackageService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langResourcePackageService) DeleteById(ctx context.Context, in *LangResourcePackage, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangResourcePackageService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langResourcePackageService) DeleteByIds(ctx context.Context, in *LangResourcePackageBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangResourcePackageService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langResourcePackageService) Update(ctx context.Context, in *LangResourcePackage, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangResourcePackageService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langResourcePackageService) UpdateAll(ctx context.Context, in *LangResourcePackage, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangResourcePackageService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langResourcePackageService) UpdateFields(ctx context.Context, in *LangResourcePackageUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangResourcePackageService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langResourcePackageService) FindById(ctx context.Context, in *LangResourcePackageFilter, opts ...client.CallOption) (*LangResourcePackageResponse, error) {
	req := c.c.NewRequest(c.name, "LangResourcePackageService.FindById", in)
	out := new(LangResourcePackageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langResourcePackageService) Find(ctx context.Context, in *LangResourcePackageFilter, opts ...client.CallOption) (*LangResourcePackageResponse, error) {
	req := c.c.NewRequest(c.name, "LangResourcePackageService.Find", in)
	out := new(LangResourcePackageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langResourcePackageService) Lists(ctx context.Context, in *LangResourcePackageListRequest, opts ...client.CallOption) (*LangResourcePackageResponse, error) {
	req := c.c.NewRequest(c.name, "LangResourcePackageService.Lists", in)
	out := new(LangResourcePackageResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langResourcePackageService) CreateV2(ctx context.Context, in *LangResourcePackage, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangResourcePackageService.CreateV2", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LangResourcePackageService service

type LangResourcePackageServiceHandler interface {
	//创建
	Create(context.Context, *LangResourcePackage, *Response) error
	//匹配多条件删除
	Delete(context.Context, *LangResourcePackage, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *LangResourcePackage, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *LangResourcePackageBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *LangResourcePackage, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *LangResourcePackage, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *LangResourcePackageUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *LangResourcePackageFilter, *LangResourcePackageResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *LangResourcePackageFilter, *LangResourcePackageResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *LangResourcePackageListRequest, *LangResourcePackageResponse) error
	CreateV2(context.Context, *LangResourcePackage, *Response) error
}

func RegisterLangResourcePackageServiceHandler(s server.Server, hdlr LangResourcePackageServiceHandler, opts ...server.HandlerOption) error {
	type langResourcePackageService interface {
		Create(ctx context.Context, in *LangResourcePackage, out *Response) error
		Delete(ctx context.Context, in *LangResourcePackage, out *Response) error
		DeleteById(ctx context.Context, in *LangResourcePackage, out *Response) error
		DeleteByIds(ctx context.Context, in *LangResourcePackageBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *LangResourcePackage, out *Response) error
		UpdateAll(ctx context.Context, in *LangResourcePackage, out *Response) error
		UpdateFields(ctx context.Context, in *LangResourcePackageUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *LangResourcePackageFilter, out *LangResourcePackageResponse) error
		Find(ctx context.Context, in *LangResourcePackageFilter, out *LangResourcePackageResponse) error
		Lists(ctx context.Context, in *LangResourcePackageListRequest, out *LangResourcePackageResponse) error
		CreateV2(ctx context.Context, in *LangResourcePackage, out *Response) error
	}
	type LangResourcePackageService struct {
		langResourcePackageService
	}
	h := &langResourcePackageServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangResourcePackageService.Create",
		Path:    []string{"/v1/langResourcePackage/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangResourcePackageService.Delete",
		Path:    []string{"/v1/langResourcePackage/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangResourcePackageService.DeleteById",
		Path:    []string{"/v1/langResourcePackage/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangResourcePackageService.DeleteByIds",
		Path:    []string{"/v1/langResourcePackage/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangResourcePackageService.Update",
		Path:    []string{"/v1/langResourcePackage/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangResourcePackageService.UpdateAll",
		Path:    []string{"/v1/langResourcePackage/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangResourcePackageService.UpdateFields",
		Path:    []string{"/v1/langResourcePackage/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangResourcePackageService.FindById",
		Path:    []string{"/v1/langResourcePackage/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangResourcePackageService.Find",
		Path:    []string{"/v1/langResourcePackage/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangResourcePackageService.Lists",
		Path:    []string{"/v1/langResourcePackage/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangResourcePackageService.CreateV2",
		Path:    []string{"/v1/langResourcePackage/createV2"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&LangResourcePackageService{h}, opts...))
}

type langResourcePackageServiceHandler struct {
	LangResourcePackageServiceHandler
}

func (h *langResourcePackageServiceHandler) Create(ctx context.Context, in *LangResourcePackage, out *Response) error {
	return h.LangResourcePackageServiceHandler.Create(ctx, in, out)
}

func (h *langResourcePackageServiceHandler) Delete(ctx context.Context, in *LangResourcePackage, out *Response) error {
	return h.LangResourcePackageServiceHandler.Delete(ctx, in, out)
}

func (h *langResourcePackageServiceHandler) DeleteById(ctx context.Context, in *LangResourcePackage, out *Response) error {
	return h.LangResourcePackageServiceHandler.DeleteById(ctx, in, out)
}

func (h *langResourcePackageServiceHandler) DeleteByIds(ctx context.Context, in *LangResourcePackageBatchDeleteRequest, out *Response) error {
	return h.LangResourcePackageServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *langResourcePackageServiceHandler) Update(ctx context.Context, in *LangResourcePackage, out *Response) error {
	return h.LangResourcePackageServiceHandler.Update(ctx, in, out)
}

func (h *langResourcePackageServiceHandler) UpdateAll(ctx context.Context, in *LangResourcePackage, out *Response) error {
	return h.LangResourcePackageServiceHandler.UpdateAll(ctx, in, out)
}

func (h *langResourcePackageServiceHandler) UpdateFields(ctx context.Context, in *LangResourcePackageUpdateFieldsRequest, out *Response) error {
	return h.LangResourcePackageServiceHandler.UpdateFields(ctx, in, out)
}

func (h *langResourcePackageServiceHandler) FindById(ctx context.Context, in *LangResourcePackageFilter, out *LangResourcePackageResponse) error {
	return h.LangResourcePackageServiceHandler.FindById(ctx, in, out)
}

func (h *langResourcePackageServiceHandler) Find(ctx context.Context, in *LangResourcePackageFilter, out *LangResourcePackageResponse) error {
	return h.LangResourcePackageServiceHandler.Find(ctx, in, out)
}

func (h *langResourcePackageServiceHandler) Lists(ctx context.Context, in *LangResourcePackageListRequest, out *LangResourcePackageResponse) error {
	return h.LangResourcePackageServiceHandler.Lists(ctx, in, out)
}

func (h *langResourcePackageServiceHandler) CreateV2(ctx context.Context, in *LangResourcePackage, out *Response) error {
	return h.LangResourcePackageServiceHandler.CreateV2(ctx, in, out)
}
