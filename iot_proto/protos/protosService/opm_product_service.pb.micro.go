// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: opm_product_service.proto

package protosService

import (
	fmt "fmt"
	math "math"

	proto "google.golang.org/protobuf/proto"

	context "context"

	api "go-micro.dev/v4/api"

	client "go-micro.dev/v4/client"

	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpmProductService service

func NewOpmProductServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpmProductService.Create",
			Path:    []string{"/v1/opmProduct/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.Delete",
			Path:    []string{"/v1/opmProduct/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.DeleteById",
			Path:    []string{"/v1/opmProduct/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.DeleteByIds",
			Path:    []string{"/v1/opmProduct/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.Update",
			Path:    []string{"/v1/opmProduct/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.UpdateAll",
			Path:    []string{"/v1/opmProduct/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.UpdateFields",
			Path:    []string{"/v1/opmProduct/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.FindById",
			Path:    []string{"/v1/opmProduct/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.Find",
			Path:    []string{"/v1/opmProduct/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.Lists",
			Path:    []string{"/v1/opmProduct/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.ControlPanelsLists",
			Path:    []string{"/v1/opmProduct/controlPanelsList"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.ModuleLists",
			Path:    []string{"/v1/opmProduct/moduleLists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.AppLists",
			Path:    []string{"/v1/opmProduct/AppLists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.FindByAllDetails",
			Path:    []string{"/v1/opmProduct/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.ControlPanelsUrlAndMd5",
			Path:    []string{"/v1/opmProduct/controlPanelsUrlAndMd5"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.ListsByProductIds",
			Path:    []string{"/v1/opmProduct/listsByProductIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.ResetOpmProductThingsModel",
			Path:    []string{"/v1/opmProduct/resetOpmProductThingsModel"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.PanelListsByProductIds",
			Path:    []string{"/v1/opmProduct/panelListsByProductIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductService.MergeProductThingsModel",
			Path:    []string{"/v1/opmProduct/mergeProductThingsModel"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpmProductService service

type OpmProductService interface {
	//创建
	Create(ctx context.Context, in *OpmProduct, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpmProduct, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpmProduct, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpmProductBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpmProduct, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpmProduct, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpmProductUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpmProductFilter, opts ...client.CallOption) (*OpmProductResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpmProductFilter, opts ...client.CallOption) (*OpmProductResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpmProductListRequest, opts ...client.CallOption) (*OpmProductResponse, error)
	//查找关联控制面板列表
	ControlPanelsLists(ctx context.Context, in *ControlPanelIdsRequest, opts ...client.CallOption) (*PmControlPanelsVoResponse, error)
	//查找关联模组SDK列表
	ModuleLists(ctx context.Context, in *ModuleIdsRequest, opts ...client.CallOption) (*PmModuleVoResponse, error)
	//App查找，支持分页，可返回多条数据
	AppLists(ctx context.Context, in *AppOpmProductListRequest, opts ...client.CallOption) (*OpmProductResponse, error)
	//根据主键查找,一般是Id,返回单条数据
	FindByAllDetails(ctx context.Context, in *OpmProductPrimarykey, opts ...client.CallOption) (*OpmProductAllDetails, error)
	//app中获取控制面板url和md5
	ControlPanelsUrlAndMd5(ctx context.Context, in *ControlPanelsUrlAndMd5Request, opts ...client.CallOption) (*ControlPanelsUrlAndMd5Response, error)
	//根据productIds查找，返回多条数据
	ListsByProductIds(ctx context.Context, in *ListsByProductIdsRequest, opts ...client.CallOption) (*OpmProductResponse, error)
	//创建
	ResetOpmProductThingsModel(ctx context.Context, in *OpmProduct, opts ...client.CallOption) (*Response, error)
	//根据productIds查找，返回多条数据
	PanelListsByProductIds(ctx context.Context, in *ListsByProductIdsRequest, opts ...client.CallOption) (*OpmProductResponse, error)
	//根据productIds合并物模型数据
	MergeProductThingsModel(ctx context.Context, in *ListsByProductIdsRequest, opts ...client.CallOption) (*OpmThingModelByProductResponse, error)
}

type opmProductService struct {
	c    client.Client
	name string
}

func NewOpmProductService(name string, c client.Client) OpmProductService {
	return &opmProductService{
		c:    c,
		name: name,
	}
}

func (c *opmProductService) Create(ctx context.Context, in *OpmProduct, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) Delete(ctx context.Context, in *OpmProduct, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) DeleteById(ctx context.Context, in *OpmProduct, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) DeleteByIds(ctx context.Context, in *OpmProductBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) Update(ctx context.Context, in *OpmProduct, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) UpdateAll(ctx context.Context, in *OpmProduct, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) UpdateFields(ctx context.Context, in *OpmProductUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) FindById(ctx context.Context, in *OpmProductFilter, opts ...client.CallOption) (*OpmProductResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.FindById", in)
	out := new(OpmProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) Find(ctx context.Context, in *OpmProductFilter, opts ...client.CallOption) (*OpmProductResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.Find", in)
	out := new(OpmProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) Lists(ctx context.Context, in *OpmProductListRequest, opts ...client.CallOption) (*OpmProductResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.Lists", in)
	out := new(OpmProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) ControlPanelsLists(ctx context.Context, in *ControlPanelIdsRequest, opts ...client.CallOption) (*PmControlPanelsVoResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.ControlPanelsLists", in)
	out := new(PmControlPanelsVoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) ModuleLists(ctx context.Context, in *ModuleIdsRequest, opts ...client.CallOption) (*PmModuleVoResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.ModuleLists", in)
	out := new(PmModuleVoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) AppLists(ctx context.Context, in *AppOpmProductListRequest, opts ...client.CallOption) (*OpmProductResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.AppLists", in)
	out := new(OpmProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) FindByAllDetails(ctx context.Context, in *OpmProductPrimarykey, opts ...client.CallOption) (*OpmProductAllDetails, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.FindByAllDetails", in)
	out := new(OpmProductAllDetails)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) ControlPanelsUrlAndMd5(ctx context.Context, in *ControlPanelsUrlAndMd5Request, opts ...client.CallOption) (*ControlPanelsUrlAndMd5Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.ControlPanelsUrlAndMd5", in)
	out := new(ControlPanelsUrlAndMd5Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) ListsByProductIds(ctx context.Context, in *ListsByProductIdsRequest, opts ...client.CallOption) (*OpmProductResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.ListsByProductIds", in)
	out := new(OpmProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) ResetOpmProductThingsModel(ctx context.Context, in *OpmProduct, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.ResetOpmProductThingsModel", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) PanelListsByProductIds(ctx context.Context, in *ListsByProductIdsRequest, opts ...client.CallOption) (*OpmProductResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.PanelListsByProductIds", in)
	out := new(OpmProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductService) MergeProductThingsModel(ctx context.Context, in *ListsByProductIdsRequest, opts ...client.CallOption) (*OpmThingModelByProductResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductService.MergeProductThingsModel", in)
	out := new(OpmThingModelByProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpmProductService service

type OpmProductServiceHandler interface {
	//创建
	Create(context.Context, *OpmProduct, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpmProduct, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpmProduct, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpmProductBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpmProduct, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpmProduct, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpmProductUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpmProductFilter, *OpmProductResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpmProductFilter, *OpmProductResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpmProductListRequest, *OpmProductResponse) error
	//查找关联控制面板列表
	ControlPanelsLists(context.Context, *ControlPanelIdsRequest, *PmControlPanelsVoResponse) error
	//查找关联模组SDK列表
	ModuleLists(context.Context, *ModuleIdsRequest, *PmModuleVoResponse) error
	//App查找，支持分页，可返回多条数据
	AppLists(context.Context, *AppOpmProductListRequest, *OpmProductResponse) error
	//根据主键查找,一般是Id,返回单条数据
	FindByAllDetails(context.Context, *OpmProductPrimarykey, *OpmProductAllDetails) error
	//app中获取控制面板url和md5
	ControlPanelsUrlAndMd5(context.Context, *ControlPanelsUrlAndMd5Request, *ControlPanelsUrlAndMd5Response) error
	//根据productIds查找，返回多条数据
	ListsByProductIds(context.Context, *ListsByProductIdsRequest, *OpmProductResponse) error
	//创建
	ResetOpmProductThingsModel(context.Context, *OpmProduct, *Response) error
	//根据productIds查找，返回多条数据
	PanelListsByProductIds(context.Context, *ListsByProductIdsRequest, *OpmProductResponse) error
	//根据productIds合并物模型数据
	MergeProductThingsModel(context.Context, *ListsByProductIdsRequest, *OpmThingModelByProductResponse) error
}

func RegisterOpmProductServiceHandler(s server.Server, hdlr OpmProductServiceHandler, opts ...server.HandlerOption) error {
	type opmProductService interface {
		Create(ctx context.Context, in *OpmProduct, out *Response) error
		Delete(ctx context.Context, in *OpmProduct, out *Response) error
		DeleteById(ctx context.Context, in *OpmProduct, out *Response) error
		DeleteByIds(ctx context.Context, in *OpmProductBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpmProduct, out *Response) error
		UpdateAll(ctx context.Context, in *OpmProduct, out *Response) error
		UpdateFields(ctx context.Context, in *OpmProductUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpmProductFilter, out *OpmProductResponse) error
		Find(ctx context.Context, in *OpmProductFilter, out *OpmProductResponse) error
		Lists(ctx context.Context, in *OpmProductListRequest, out *OpmProductResponse) error
		ControlPanelsLists(ctx context.Context, in *ControlPanelIdsRequest, out *PmControlPanelsVoResponse) error
		ModuleLists(ctx context.Context, in *ModuleIdsRequest, out *PmModuleVoResponse) error
		AppLists(ctx context.Context, in *AppOpmProductListRequest, out *OpmProductResponse) error
		FindByAllDetails(ctx context.Context, in *OpmProductPrimarykey, out *OpmProductAllDetails) error
		ControlPanelsUrlAndMd5(ctx context.Context, in *ControlPanelsUrlAndMd5Request, out *ControlPanelsUrlAndMd5Response) error
		ListsByProductIds(ctx context.Context, in *ListsByProductIdsRequest, out *OpmProductResponse) error
		ResetOpmProductThingsModel(ctx context.Context, in *OpmProduct, out *Response) error
		PanelListsByProductIds(ctx context.Context, in *ListsByProductIdsRequest, out *OpmProductResponse) error
		MergeProductThingsModel(ctx context.Context, in *ListsByProductIdsRequest, out *OpmThingModelByProductResponse) error
	}
	type OpmProductService struct {
		opmProductService
	}
	h := &opmProductServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.Create",
		Path:    []string{"/v1/opmProduct/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.Delete",
		Path:    []string{"/v1/opmProduct/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.DeleteById",
		Path:    []string{"/v1/opmProduct/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.DeleteByIds",
		Path:    []string{"/v1/opmProduct/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.Update",
		Path:    []string{"/v1/opmProduct/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.UpdateAll",
		Path:    []string{"/v1/opmProduct/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.UpdateFields",
		Path:    []string{"/v1/opmProduct/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.FindById",
		Path:    []string{"/v1/opmProduct/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.Find",
		Path:    []string{"/v1/opmProduct/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.Lists",
		Path:    []string{"/v1/opmProduct/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.ControlPanelsLists",
		Path:    []string{"/v1/opmProduct/controlPanelsList"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.ModuleLists",
		Path:    []string{"/v1/opmProduct/moduleLists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.AppLists",
		Path:    []string{"/v1/opmProduct/AppLists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.FindByAllDetails",
		Path:    []string{"/v1/opmProduct/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.ControlPanelsUrlAndMd5",
		Path:    []string{"/v1/opmProduct/controlPanelsUrlAndMd5"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.ListsByProductIds",
		Path:    []string{"/v1/opmProduct/listsByProductIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.ResetOpmProductThingsModel",
		Path:    []string{"/v1/opmProduct/resetOpmProductThingsModel"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.PanelListsByProductIds",
		Path:    []string{"/v1/opmProduct/panelListsByProductIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductService.MergeProductThingsModel",
		Path:    []string{"/v1/opmProduct/mergeProductThingsModel"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpmProductService{h}, opts...))
}

type opmProductServiceHandler struct {
	OpmProductServiceHandler
}

func (h *opmProductServiceHandler) Create(ctx context.Context, in *OpmProduct, out *Response) error {
	return h.OpmProductServiceHandler.Create(ctx, in, out)
}

func (h *opmProductServiceHandler) Delete(ctx context.Context, in *OpmProduct, out *Response) error {
	return h.OpmProductServiceHandler.Delete(ctx, in, out)
}

func (h *opmProductServiceHandler) DeleteById(ctx context.Context, in *OpmProduct, out *Response) error {
	return h.OpmProductServiceHandler.DeleteById(ctx, in, out)
}

func (h *opmProductServiceHandler) DeleteByIds(ctx context.Context, in *OpmProductBatchDeleteRequest, out *Response) error {
	return h.OpmProductServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *opmProductServiceHandler) Update(ctx context.Context, in *OpmProduct, out *Response) error {
	return h.OpmProductServiceHandler.Update(ctx, in, out)
}

func (h *opmProductServiceHandler) UpdateAll(ctx context.Context, in *OpmProduct, out *Response) error {
	return h.OpmProductServiceHandler.UpdateAll(ctx, in, out)
}

func (h *opmProductServiceHandler) UpdateFields(ctx context.Context, in *OpmProductUpdateFieldsRequest, out *Response) error {
	return h.OpmProductServiceHandler.UpdateFields(ctx, in, out)
}

func (h *opmProductServiceHandler) FindById(ctx context.Context, in *OpmProductFilter, out *OpmProductResponse) error {
	return h.OpmProductServiceHandler.FindById(ctx, in, out)
}

func (h *opmProductServiceHandler) Find(ctx context.Context, in *OpmProductFilter, out *OpmProductResponse) error {
	return h.OpmProductServiceHandler.Find(ctx, in, out)
}

func (h *opmProductServiceHandler) Lists(ctx context.Context, in *OpmProductListRequest, out *OpmProductResponse) error {
	return h.OpmProductServiceHandler.Lists(ctx, in, out)
}

func (h *opmProductServiceHandler) ControlPanelsLists(ctx context.Context, in *ControlPanelIdsRequest, out *PmControlPanelsVoResponse) error {
	return h.OpmProductServiceHandler.ControlPanelsLists(ctx, in, out)
}

func (h *opmProductServiceHandler) ModuleLists(ctx context.Context, in *ModuleIdsRequest, out *PmModuleVoResponse) error {
	return h.OpmProductServiceHandler.ModuleLists(ctx, in, out)
}

func (h *opmProductServiceHandler) AppLists(ctx context.Context, in *AppOpmProductListRequest, out *OpmProductResponse) error {
	return h.OpmProductServiceHandler.AppLists(ctx, in, out)
}

func (h *opmProductServiceHandler) FindByAllDetails(ctx context.Context, in *OpmProductPrimarykey, out *OpmProductAllDetails) error {
	return h.OpmProductServiceHandler.FindByAllDetails(ctx, in, out)
}

func (h *opmProductServiceHandler) ControlPanelsUrlAndMd5(ctx context.Context, in *ControlPanelsUrlAndMd5Request, out *ControlPanelsUrlAndMd5Response) error {
	return h.OpmProductServiceHandler.ControlPanelsUrlAndMd5(ctx, in, out)
}

func (h *opmProductServiceHandler) ListsByProductIds(ctx context.Context, in *ListsByProductIdsRequest, out *OpmProductResponse) error {
	return h.OpmProductServiceHandler.ListsByProductIds(ctx, in, out)
}

func (h *opmProductServiceHandler) ResetOpmProductThingsModel(ctx context.Context, in *OpmProduct, out *Response) error {
	return h.OpmProductServiceHandler.ResetOpmProductThingsModel(ctx, in, out)
}

func (h *opmProductServiceHandler) PanelListsByProductIds(ctx context.Context, in *ListsByProductIdsRequest, out *OpmProductResponse) error {
	return h.OpmProductServiceHandler.PanelListsByProductIds(ctx, in, out)
}

func (h *opmProductServiceHandler) MergeProductThingsModel(ctx context.Context, in *ListsByProductIdsRequest, out *OpmThingModelByProductResponse) error {
	return h.OpmProductServiceHandler.MergeProductThingsModel(ctx, in, out)
}
