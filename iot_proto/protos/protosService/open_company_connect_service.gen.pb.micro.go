// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: open_company_connect_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpenCompanyConnectService service

func NewOpenCompanyConnectServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpenCompanyConnectService.Create",
			Path:    []string{"/v1/openCompanyConnect/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyConnectService.Delete",
			Path:    []string{"/v1/openCompanyConnect/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyConnectService.DeleteById",
			Path:    []string{"/v1/openCompanyConnect/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyConnectService.DeleteByIds",
			Path:    []string{"/v1/openCompanyConnect/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyConnectService.Update",
			Path:    []string{"/v1/openCompanyConnect/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyConnectService.UpdateAll",
			Path:    []string{"/v1/openCompanyConnect/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyConnectService.UpdateFields",
			Path:    []string{"/v1/openCompanyConnect/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyConnectService.FindById",
			Path:    []string{"/v1/openCompanyConnect/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyConnectService.Find",
			Path:    []string{"/v1/openCompanyConnect/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyConnectService.Lists",
			Path:    []string{"/v1/openCompanyConnect/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyConnectService.GetUserCompanyLists",
			Path:    []string{"/v1/openCompanyConnect/getUserCompanyLists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpenCompanyConnectService service

type OpenCompanyConnectService interface {
	//创建
	Create(ctx context.Context, in *OpenCompanyConnect, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpenCompanyConnect, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpenCompanyConnect, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpenCompanyConnectBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpenCompanyConnect, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpenCompanyConnect, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpenCompanyConnectUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpenCompanyConnectFilter, opts ...client.CallOption) (*OpenCompanyConnectResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpenCompanyConnectFilter, opts ...client.CallOption) (*OpenCompanyConnectResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpenCompanyConnectListRequest, opts ...client.CallOption) (*OpenCompanyConnectResponse, error)
	//查询用户对应的所有企业信息
	GetUserCompanyLists(ctx context.Context, in *OpenCompanyQueryByUserIdRequest, opts ...client.CallOption) (*OpenCompanyConnectResponse, error)
}

type openCompanyConnectService struct {
	c    client.Client
	name string
}

func NewOpenCompanyConnectService(name string, c client.Client) OpenCompanyConnectService {
	return &openCompanyConnectService{
		c:    c,
		name: name,
	}
}

func (c *openCompanyConnectService) Create(ctx context.Context, in *OpenCompanyConnect, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyConnectService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyConnectService) Delete(ctx context.Context, in *OpenCompanyConnect, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyConnectService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyConnectService) DeleteById(ctx context.Context, in *OpenCompanyConnect, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyConnectService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyConnectService) DeleteByIds(ctx context.Context, in *OpenCompanyConnectBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyConnectService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyConnectService) Update(ctx context.Context, in *OpenCompanyConnect, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyConnectService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyConnectService) UpdateAll(ctx context.Context, in *OpenCompanyConnect, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyConnectService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyConnectService) UpdateFields(ctx context.Context, in *OpenCompanyConnectUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyConnectService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyConnectService) FindById(ctx context.Context, in *OpenCompanyConnectFilter, opts ...client.CallOption) (*OpenCompanyConnectResponse, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyConnectService.FindById", in)
	out := new(OpenCompanyConnectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyConnectService) Find(ctx context.Context, in *OpenCompanyConnectFilter, opts ...client.CallOption) (*OpenCompanyConnectResponse, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyConnectService.Find", in)
	out := new(OpenCompanyConnectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyConnectService) Lists(ctx context.Context, in *OpenCompanyConnectListRequest, opts ...client.CallOption) (*OpenCompanyConnectResponse, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyConnectService.Lists", in)
	out := new(OpenCompanyConnectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyConnectService) GetUserCompanyLists(ctx context.Context, in *OpenCompanyQueryByUserIdRequest, opts ...client.CallOption) (*OpenCompanyConnectResponse, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyConnectService.GetUserCompanyLists", in)
	out := new(OpenCompanyConnectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpenCompanyConnectService service

type OpenCompanyConnectServiceHandler interface {
	//创建
	Create(context.Context, *OpenCompanyConnect, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpenCompanyConnect, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpenCompanyConnect, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpenCompanyConnectBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpenCompanyConnect, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpenCompanyConnect, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpenCompanyConnectUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpenCompanyConnectFilter, *OpenCompanyConnectResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpenCompanyConnectFilter, *OpenCompanyConnectResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpenCompanyConnectListRequest, *OpenCompanyConnectResponse) error
	//查询用户对应的所有企业信息
	GetUserCompanyLists(context.Context, *OpenCompanyQueryByUserIdRequest, *OpenCompanyConnectResponse) error
}

func RegisterOpenCompanyConnectServiceHandler(s server.Server, hdlr OpenCompanyConnectServiceHandler, opts ...server.HandlerOption) error {
	type openCompanyConnectService interface {
		Create(ctx context.Context, in *OpenCompanyConnect, out *Response) error
		Delete(ctx context.Context, in *OpenCompanyConnect, out *Response) error
		DeleteById(ctx context.Context, in *OpenCompanyConnect, out *Response) error
		DeleteByIds(ctx context.Context, in *OpenCompanyConnectBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpenCompanyConnect, out *Response) error
		UpdateAll(ctx context.Context, in *OpenCompanyConnect, out *Response) error
		UpdateFields(ctx context.Context, in *OpenCompanyConnectUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpenCompanyConnectFilter, out *OpenCompanyConnectResponse) error
		Find(ctx context.Context, in *OpenCompanyConnectFilter, out *OpenCompanyConnectResponse) error
		Lists(ctx context.Context, in *OpenCompanyConnectListRequest, out *OpenCompanyConnectResponse) error
		GetUserCompanyLists(ctx context.Context, in *OpenCompanyQueryByUserIdRequest, out *OpenCompanyConnectResponse) error
	}
	type OpenCompanyConnectService struct {
		openCompanyConnectService
	}
	h := &openCompanyConnectServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyConnectService.Create",
		Path:    []string{"/v1/openCompanyConnect/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyConnectService.Delete",
		Path:    []string{"/v1/openCompanyConnect/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyConnectService.DeleteById",
		Path:    []string{"/v1/openCompanyConnect/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyConnectService.DeleteByIds",
		Path:    []string{"/v1/openCompanyConnect/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyConnectService.Update",
		Path:    []string{"/v1/openCompanyConnect/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyConnectService.UpdateAll",
		Path:    []string{"/v1/openCompanyConnect/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyConnectService.UpdateFields",
		Path:    []string{"/v1/openCompanyConnect/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyConnectService.FindById",
		Path:    []string{"/v1/openCompanyConnect/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyConnectService.Find",
		Path:    []string{"/v1/openCompanyConnect/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyConnectService.Lists",
		Path:    []string{"/v1/openCompanyConnect/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyConnectService.GetUserCompanyLists",
		Path:    []string{"/v1/openCompanyConnect/getUserCompanyLists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpenCompanyConnectService{h}, opts...))
}

type openCompanyConnectServiceHandler struct {
	OpenCompanyConnectServiceHandler
}

func (h *openCompanyConnectServiceHandler) Create(ctx context.Context, in *OpenCompanyConnect, out *Response) error {
	return h.OpenCompanyConnectServiceHandler.Create(ctx, in, out)
}

func (h *openCompanyConnectServiceHandler) Delete(ctx context.Context, in *OpenCompanyConnect, out *Response) error {
	return h.OpenCompanyConnectServiceHandler.Delete(ctx, in, out)
}

func (h *openCompanyConnectServiceHandler) DeleteById(ctx context.Context, in *OpenCompanyConnect, out *Response) error {
	return h.OpenCompanyConnectServiceHandler.DeleteById(ctx, in, out)
}

func (h *openCompanyConnectServiceHandler) DeleteByIds(ctx context.Context, in *OpenCompanyConnectBatchDeleteRequest, out *Response) error {
	return h.OpenCompanyConnectServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *openCompanyConnectServiceHandler) Update(ctx context.Context, in *OpenCompanyConnect, out *Response) error {
	return h.OpenCompanyConnectServiceHandler.Update(ctx, in, out)
}

func (h *openCompanyConnectServiceHandler) UpdateAll(ctx context.Context, in *OpenCompanyConnect, out *Response) error {
	return h.OpenCompanyConnectServiceHandler.UpdateAll(ctx, in, out)
}

func (h *openCompanyConnectServiceHandler) UpdateFields(ctx context.Context, in *OpenCompanyConnectUpdateFieldsRequest, out *Response) error {
	return h.OpenCompanyConnectServiceHandler.UpdateFields(ctx, in, out)
}

func (h *openCompanyConnectServiceHandler) FindById(ctx context.Context, in *OpenCompanyConnectFilter, out *OpenCompanyConnectResponse) error {
	return h.OpenCompanyConnectServiceHandler.FindById(ctx, in, out)
}

func (h *openCompanyConnectServiceHandler) Find(ctx context.Context, in *OpenCompanyConnectFilter, out *OpenCompanyConnectResponse) error {
	return h.OpenCompanyConnectServiceHandler.Find(ctx, in, out)
}

func (h *openCompanyConnectServiceHandler) Lists(ctx context.Context, in *OpenCompanyConnectListRequest, out *OpenCompanyConnectResponse) error {
	return h.OpenCompanyConnectServiceHandler.Lists(ctx, in, out)
}

func (h *openCompanyConnectServiceHandler) GetUserCompanyLists(ctx context.Context, in *OpenCompanyQueryByUserIdRequest, out *OpenCompanyConnectResponse) error {
	return h.OpenCompanyConnectServiceHandler.GetUserCompanyLists(ctx, in, out)
}
