// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: oem_app_assist_release_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OemAppAssistReleaseService service

func NewOemAppAssistReleaseServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OemAppAssistReleaseService.Create",
			Path:    []string{"/v1/oemAppAssistRelease/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppAssistReleaseService.Delete",
			Path:    []string{"/v1/oemAppAssistRelease/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppAssistReleaseService.DeleteById",
			Path:    []string{"/v1/oemAppAssistRelease/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppAssistReleaseService.DeleteByIds",
			Path:    []string{"/v1/oemAppAssistRelease/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppAssistReleaseService.Update",
			Path:    []string{"/v1/oemAppAssistRelease/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppAssistReleaseService.UpdateAll",
			Path:    []string{"/v1/oemAppAssistRelease/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppAssistReleaseService.UpdateFields",
			Path:    []string{"/v1/oemAppAssistRelease/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppAssistReleaseService.FindById",
			Path:    []string{"/v1/oemAppAssistRelease/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppAssistReleaseService.Find",
			Path:    []string{"/v1/oemAppAssistRelease/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppAssistReleaseService.Lists",
			Path:    []string{"/v1/oemAppAssistRelease/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppAssistReleaseService.DeveloperAppList",
			Path:    []string{"/v1/oemAppAssistRelease/developerAppList"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OemAppAssistReleaseService service

type OemAppAssistReleaseService interface {
	//创建
	Create(ctx context.Context, in *OemAppAssistRelease, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OemAppAssistRelease, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OemAppAssistRelease, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OemAppAssistReleaseBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OemAppAssistRelease, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OemAppAssistRelease, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OemAppAssistReleaseUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OemAppAssistReleaseFilter, opts ...client.CallOption) (*OemAppAssistReleaseResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OemAppAssistReleaseFilter, opts ...client.CallOption) (*OemAppAssistReleaseResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OemAppAssistReleaseListRequest, opts ...client.CallOption) (*OemAppAssistReleaseResponse, error)
	//查找，支持分页，可返回多条数据
	DeveloperAppList(ctx context.Context, in *DeveloperAppListRequest, opts ...client.CallOption) (*DeveloperAppListResponse, error)
}

type oemAppAssistReleaseService struct {
	c    client.Client
	name string
}

func NewOemAppAssistReleaseService(name string, c client.Client) OemAppAssistReleaseService {
	return &oemAppAssistReleaseService{
		c:    c,
		name: name,
	}
}

func (c *oemAppAssistReleaseService) Create(ctx context.Context, in *OemAppAssistRelease, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppAssistReleaseService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppAssistReleaseService) Delete(ctx context.Context, in *OemAppAssistRelease, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppAssistReleaseService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppAssistReleaseService) DeleteById(ctx context.Context, in *OemAppAssistRelease, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppAssistReleaseService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppAssistReleaseService) DeleteByIds(ctx context.Context, in *OemAppAssistReleaseBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppAssistReleaseService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppAssistReleaseService) Update(ctx context.Context, in *OemAppAssistRelease, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppAssistReleaseService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppAssistReleaseService) UpdateAll(ctx context.Context, in *OemAppAssistRelease, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppAssistReleaseService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppAssistReleaseService) UpdateFields(ctx context.Context, in *OemAppAssistReleaseUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppAssistReleaseService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppAssistReleaseService) FindById(ctx context.Context, in *OemAppAssistReleaseFilter, opts ...client.CallOption) (*OemAppAssistReleaseResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppAssistReleaseService.FindById", in)
	out := new(OemAppAssistReleaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppAssistReleaseService) Find(ctx context.Context, in *OemAppAssistReleaseFilter, opts ...client.CallOption) (*OemAppAssistReleaseResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppAssistReleaseService.Find", in)
	out := new(OemAppAssistReleaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppAssistReleaseService) Lists(ctx context.Context, in *OemAppAssistReleaseListRequest, opts ...client.CallOption) (*OemAppAssistReleaseResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppAssistReleaseService.Lists", in)
	out := new(OemAppAssistReleaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppAssistReleaseService) DeveloperAppList(ctx context.Context, in *DeveloperAppListRequest, opts ...client.CallOption) (*DeveloperAppListResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppAssistReleaseService.DeveloperAppList", in)
	out := new(DeveloperAppListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OemAppAssistReleaseService service

type OemAppAssistReleaseServiceHandler interface {
	//创建
	Create(context.Context, *OemAppAssistRelease, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OemAppAssistRelease, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OemAppAssistRelease, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OemAppAssistReleaseBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OemAppAssistRelease, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OemAppAssistRelease, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OemAppAssistReleaseUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OemAppAssistReleaseFilter, *OemAppAssistReleaseResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OemAppAssistReleaseFilter, *OemAppAssistReleaseResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OemAppAssistReleaseListRequest, *OemAppAssistReleaseResponse) error
	//查找，支持分页，可返回多条数据
	DeveloperAppList(context.Context, *DeveloperAppListRequest, *DeveloperAppListResponse) error
}

func RegisterOemAppAssistReleaseServiceHandler(s server.Server, hdlr OemAppAssistReleaseServiceHandler, opts ...server.HandlerOption) error {
	type oemAppAssistReleaseService interface {
		Create(ctx context.Context, in *OemAppAssistRelease, out *Response) error
		Delete(ctx context.Context, in *OemAppAssistRelease, out *Response) error
		DeleteById(ctx context.Context, in *OemAppAssistRelease, out *Response) error
		DeleteByIds(ctx context.Context, in *OemAppAssistReleaseBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OemAppAssistRelease, out *Response) error
		UpdateAll(ctx context.Context, in *OemAppAssistRelease, out *Response) error
		UpdateFields(ctx context.Context, in *OemAppAssistReleaseUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OemAppAssistReleaseFilter, out *OemAppAssistReleaseResponse) error
		Find(ctx context.Context, in *OemAppAssistReleaseFilter, out *OemAppAssistReleaseResponse) error
		Lists(ctx context.Context, in *OemAppAssistReleaseListRequest, out *OemAppAssistReleaseResponse) error
		DeveloperAppList(ctx context.Context, in *DeveloperAppListRequest, out *DeveloperAppListResponse) error
	}
	type OemAppAssistReleaseService struct {
		oemAppAssistReleaseService
	}
	h := &oemAppAssistReleaseServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppAssistReleaseService.Create",
		Path:    []string{"/v1/oemAppAssistRelease/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppAssistReleaseService.Delete",
		Path:    []string{"/v1/oemAppAssistRelease/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppAssistReleaseService.DeleteById",
		Path:    []string{"/v1/oemAppAssistRelease/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppAssistReleaseService.DeleteByIds",
		Path:    []string{"/v1/oemAppAssistRelease/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppAssistReleaseService.Update",
		Path:    []string{"/v1/oemAppAssistRelease/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppAssistReleaseService.UpdateAll",
		Path:    []string{"/v1/oemAppAssistRelease/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppAssistReleaseService.UpdateFields",
		Path:    []string{"/v1/oemAppAssistRelease/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppAssistReleaseService.FindById",
		Path:    []string{"/v1/oemAppAssistRelease/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppAssistReleaseService.Find",
		Path:    []string{"/v1/oemAppAssistRelease/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppAssistReleaseService.Lists",
		Path:    []string{"/v1/oemAppAssistRelease/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppAssistReleaseService.DeveloperAppList",
		Path:    []string{"/v1/oemAppAssistRelease/developerAppList"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OemAppAssistReleaseService{h}, opts...))
}

type oemAppAssistReleaseServiceHandler struct {
	OemAppAssistReleaseServiceHandler
}

func (h *oemAppAssistReleaseServiceHandler) Create(ctx context.Context, in *OemAppAssistRelease, out *Response) error {
	return h.OemAppAssistReleaseServiceHandler.Create(ctx, in, out)
}

func (h *oemAppAssistReleaseServiceHandler) Delete(ctx context.Context, in *OemAppAssistRelease, out *Response) error {
	return h.OemAppAssistReleaseServiceHandler.Delete(ctx, in, out)
}

func (h *oemAppAssistReleaseServiceHandler) DeleteById(ctx context.Context, in *OemAppAssistRelease, out *Response) error {
	return h.OemAppAssistReleaseServiceHandler.DeleteById(ctx, in, out)
}

func (h *oemAppAssistReleaseServiceHandler) DeleteByIds(ctx context.Context, in *OemAppAssistReleaseBatchDeleteRequest, out *Response) error {
	return h.OemAppAssistReleaseServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *oemAppAssistReleaseServiceHandler) Update(ctx context.Context, in *OemAppAssistRelease, out *Response) error {
	return h.OemAppAssistReleaseServiceHandler.Update(ctx, in, out)
}

func (h *oemAppAssistReleaseServiceHandler) UpdateAll(ctx context.Context, in *OemAppAssistRelease, out *Response) error {
	return h.OemAppAssistReleaseServiceHandler.UpdateAll(ctx, in, out)
}

func (h *oemAppAssistReleaseServiceHandler) UpdateFields(ctx context.Context, in *OemAppAssistReleaseUpdateFieldsRequest, out *Response) error {
	return h.OemAppAssistReleaseServiceHandler.UpdateFields(ctx, in, out)
}

func (h *oemAppAssistReleaseServiceHandler) FindById(ctx context.Context, in *OemAppAssistReleaseFilter, out *OemAppAssistReleaseResponse) error {
	return h.OemAppAssistReleaseServiceHandler.FindById(ctx, in, out)
}

func (h *oemAppAssistReleaseServiceHandler) Find(ctx context.Context, in *OemAppAssistReleaseFilter, out *OemAppAssistReleaseResponse) error {
	return h.OemAppAssistReleaseServiceHandler.Find(ctx, in, out)
}

func (h *oemAppAssistReleaseServiceHandler) Lists(ctx context.Context, in *OemAppAssistReleaseListRequest, out *OemAppAssistReleaseResponse) error {
	return h.OemAppAssistReleaseServiceHandler.Lists(ctx, in, out)
}

func (h *oemAppAssistReleaseServiceHandler) DeveloperAppList(ctx context.Context, in *DeveloperAppListRequest, out *DeveloperAppListResponse) error {
	return h.OemAppAssistReleaseServiceHandler.DeveloperAppList(ctx, in, out)
}
