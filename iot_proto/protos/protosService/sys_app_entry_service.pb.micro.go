// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sys_app_entry_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SysAppEntryService service

func NewSysAppEntryServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "SysAppEntryService.Create",
			Path:    []string{"/v1/sysAppEntry/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppEntryService.Delete",
			Path:    []string{"/v1/sysAppEntry/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppEntryService.DeleteById",
			Path:    []string{"/v1/sysAppEntry/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppEntryService.DeleteByIds",
			Path:    []string{"/v1/sysAppEntry/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppEntryService.Update",
			Path:    []string{"/v1/sysAppEntry/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppEntryService.UpdateAll",
			Path:    []string{"/v1/sysAppEntry/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppEntryService.UpdateFields",
			Path:    []string{"/v1/sysAppEntry/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppEntryService.FindById",
			Path:    []string{"/v1/sysAppEntry/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppEntryService.Find",
			Path:    []string{"/v1/sysAppEntry/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppEntryService.Lists",
			Path:    []string{"/v1/sysAppEntry/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppEntryService.ListDiy",
			Path:    []string{"/v1/sysAppEntry/listDiy"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppEntryService.EntryLangsDiy",
			Path:    []string{"/v1/sysAppEntry/entryLangsDiy"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysAppEntryService.CreateBatch",
			Path:    []string{"/v1/sysAppEntry/createBatch"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for SysAppEntryService service

type SysAppEntryService interface {
	//创建
	Create(ctx context.Context, in *SysAppEntry, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *SysAppEntry, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *SysAppEntry, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *SysAppEntryBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *SysAppEntry, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *SysAppEntry, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *SysAppEntryUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *SysAppEntryFilter, opts ...client.CallOption) (*SysAppEntryResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *SysAppEntryFilter, opts ...client.CallOption) (*SysAppEntryResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *SysAppEntryListRequest, opts ...client.CallOption) (*SysAppEntryResponse, error)
	//查找，支持分页，可返回多条数据
	ListDiy(ctx context.Context, in *SysAppEntryListDiyRequqest, opts ...client.CallOption) (*SysAppEntryListDiyResponse, error)
	//查询公版支持的语种.
	EntryLangsDiy(ctx context.Context, in *SysAppEntryFilter, opts ...client.CallOption) (*SysAppEntryLangsDiyResponse, error)
	//批量创建
	CreateBatch(ctx context.Context, in *SysAppEntryBatchRequest, opts ...client.CallOption) (*Response, error)
}

type sysAppEntryService struct {
	c    client.Client
	name string
}

func NewSysAppEntryService(name string, c client.Client) SysAppEntryService {
	return &sysAppEntryService{
		c:    c,
		name: name,
	}
}

func (c *sysAppEntryService) Create(ctx context.Context, in *SysAppEntry, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysAppEntryService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppEntryService) Delete(ctx context.Context, in *SysAppEntry, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysAppEntryService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppEntryService) DeleteById(ctx context.Context, in *SysAppEntry, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysAppEntryService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppEntryService) DeleteByIds(ctx context.Context, in *SysAppEntryBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysAppEntryService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppEntryService) Update(ctx context.Context, in *SysAppEntry, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysAppEntryService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppEntryService) UpdateAll(ctx context.Context, in *SysAppEntry, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysAppEntryService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppEntryService) UpdateFields(ctx context.Context, in *SysAppEntryUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysAppEntryService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppEntryService) FindById(ctx context.Context, in *SysAppEntryFilter, opts ...client.CallOption) (*SysAppEntryResponse, error) {
	req := c.c.NewRequest(c.name, "SysAppEntryService.FindById", in)
	out := new(SysAppEntryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppEntryService) Find(ctx context.Context, in *SysAppEntryFilter, opts ...client.CallOption) (*SysAppEntryResponse, error) {
	req := c.c.NewRequest(c.name, "SysAppEntryService.Find", in)
	out := new(SysAppEntryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppEntryService) Lists(ctx context.Context, in *SysAppEntryListRequest, opts ...client.CallOption) (*SysAppEntryResponse, error) {
	req := c.c.NewRequest(c.name, "SysAppEntryService.Lists", in)
	out := new(SysAppEntryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppEntryService) ListDiy(ctx context.Context, in *SysAppEntryListDiyRequqest, opts ...client.CallOption) (*SysAppEntryListDiyResponse, error) {
	req := c.c.NewRequest(c.name, "SysAppEntryService.ListDiy", in)
	out := new(SysAppEntryListDiyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppEntryService) EntryLangsDiy(ctx context.Context, in *SysAppEntryFilter, opts ...client.CallOption) (*SysAppEntryLangsDiyResponse, error) {
	req := c.c.NewRequest(c.name, "SysAppEntryService.EntryLangsDiy", in)
	out := new(SysAppEntryLangsDiyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysAppEntryService) CreateBatch(ctx context.Context, in *SysAppEntryBatchRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysAppEntryService.CreateBatch", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SysAppEntryService service

type SysAppEntryServiceHandler interface {
	//创建
	Create(context.Context, *SysAppEntry, *Response) error
	//匹配多条件删除
	Delete(context.Context, *SysAppEntry, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *SysAppEntry, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *SysAppEntryBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *SysAppEntry, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *SysAppEntry, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *SysAppEntryUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *SysAppEntryFilter, *SysAppEntryResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *SysAppEntryFilter, *SysAppEntryResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *SysAppEntryListRequest, *SysAppEntryResponse) error
	//查找，支持分页，可返回多条数据
	ListDiy(context.Context, *SysAppEntryListDiyRequqest, *SysAppEntryListDiyResponse) error
	//查询公版支持的语种.
	EntryLangsDiy(context.Context, *SysAppEntryFilter, *SysAppEntryLangsDiyResponse) error
	//批量创建
	CreateBatch(context.Context, *SysAppEntryBatchRequest, *Response) error
}

func RegisterSysAppEntryServiceHandler(s server.Server, hdlr SysAppEntryServiceHandler, opts ...server.HandlerOption) error {
	type sysAppEntryService interface {
		Create(ctx context.Context, in *SysAppEntry, out *Response) error
		Delete(ctx context.Context, in *SysAppEntry, out *Response) error
		DeleteById(ctx context.Context, in *SysAppEntry, out *Response) error
		DeleteByIds(ctx context.Context, in *SysAppEntryBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *SysAppEntry, out *Response) error
		UpdateAll(ctx context.Context, in *SysAppEntry, out *Response) error
		UpdateFields(ctx context.Context, in *SysAppEntryUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *SysAppEntryFilter, out *SysAppEntryResponse) error
		Find(ctx context.Context, in *SysAppEntryFilter, out *SysAppEntryResponse) error
		Lists(ctx context.Context, in *SysAppEntryListRequest, out *SysAppEntryResponse) error
		ListDiy(ctx context.Context, in *SysAppEntryListDiyRequqest, out *SysAppEntryListDiyResponse) error
		EntryLangsDiy(ctx context.Context, in *SysAppEntryFilter, out *SysAppEntryLangsDiyResponse) error
		CreateBatch(ctx context.Context, in *SysAppEntryBatchRequest, out *Response) error
	}
	type SysAppEntryService struct {
		sysAppEntryService
	}
	h := &sysAppEntryServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppEntryService.Create",
		Path:    []string{"/v1/sysAppEntry/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppEntryService.Delete",
		Path:    []string{"/v1/sysAppEntry/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppEntryService.DeleteById",
		Path:    []string{"/v1/sysAppEntry/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppEntryService.DeleteByIds",
		Path:    []string{"/v1/sysAppEntry/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppEntryService.Update",
		Path:    []string{"/v1/sysAppEntry/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppEntryService.UpdateAll",
		Path:    []string{"/v1/sysAppEntry/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppEntryService.UpdateFields",
		Path:    []string{"/v1/sysAppEntry/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppEntryService.FindById",
		Path:    []string{"/v1/sysAppEntry/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppEntryService.Find",
		Path:    []string{"/v1/sysAppEntry/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppEntryService.Lists",
		Path:    []string{"/v1/sysAppEntry/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppEntryService.ListDiy",
		Path:    []string{"/v1/sysAppEntry/listDiy"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppEntryService.EntryLangsDiy",
		Path:    []string{"/v1/sysAppEntry/entryLangsDiy"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysAppEntryService.CreateBatch",
		Path:    []string{"/v1/sysAppEntry/createBatch"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&SysAppEntryService{h}, opts...))
}

type sysAppEntryServiceHandler struct {
	SysAppEntryServiceHandler
}

func (h *sysAppEntryServiceHandler) Create(ctx context.Context, in *SysAppEntry, out *Response) error {
	return h.SysAppEntryServiceHandler.Create(ctx, in, out)
}

func (h *sysAppEntryServiceHandler) Delete(ctx context.Context, in *SysAppEntry, out *Response) error {
	return h.SysAppEntryServiceHandler.Delete(ctx, in, out)
}

func (h *sysAppEntryServiceHandler) DeleteById(ctx context.Context, in *SysAppEntry, out *Response) error {
	return h.SysAppEntryServiceHandler.DeleteById(ctx, in, out)
}

func (h *sysAppEntryServiceHandler) DeleteByIds(ctx context.Context, in *SysAppEntryBatchDeleteRequest, out *Response) error {
	return h.SysAppEntryServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *sysAppEntryServiceHandler) Update(ctx context.Context, in *SysAppEntry, out *Response) error {
	return h.SysAppEntryServiceHandler.Update(ctx, in, out)
}

func (h *sysAppEntryServiceHandler) UpdateAll(ctx context.Context, in *SysAppEntry, out *Response) error {
	return h.SysAppEntryServiceHandler.UpdateAll(ctx, in, out)
}

func (h *sysAppEntryServiceHandler) UpdateFields(ctx context.Context, in *SysAppEntryUpdateFieldsRequest, out *Response) error {
	return h.SysAppEntryServiceHandler.UpdateFields(ctx, in, out)
}

func (h *sysAppEntryServiceHandler) FindById(ctx context.Context, in *SysAppEntryFilter, out *SysAppEntryResponse) error {
	return h.SysAppEntryServiceHandler.FindById(ctx, in, out)
}

func (h *sysAppEntryServiceHandler) Find(ctx context.Context, in *SysAppEntryFilter, out *SysAppEntryResponse) error {
	return h.SysAppEntryServiceHandler.Find(ctx, in, out)
}

func (h *sysAppEntryServiceHandler) Lists(ctx context.Context, in *SysAppEntryListRequest, out *SysAppEntryResponse) error {
	return h.SysAppEntryServiceHandler.Lists(ctx, in, out)
}

func (h *sysAppEntryServiceHandler) ListDiy(ctx context.Context, in *SysAppEntryListDiyRequqest, out *SysAppEntryListDiyResponse) error {
	return h.SysAppEntryServiceHandler.ListDiy(ctx, in, out)
}

func (h *sysAppEntryServiceHandler) EntryLangsDiy(ctx context.Context, in *SysAppEntryFilter, out *SysAppEntryLangsDiyResponse) error {
	return h.SysAppEntryServiceHandler.EntryLangsDiy(ctx, in, out)
}

func (h *sysAppEntryServiceHandler) CreateBatch(ctx context.Context, in *SysAppEntryBatchRequest, out *Response) error {
	return h.SysAppEntryServiceHandler.CreateBatch(ctx, in, out)
}
