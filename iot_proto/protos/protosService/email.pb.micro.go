// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: email.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for EmailService service

func NewEmailServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for EmailService service

type EmailService interface {
	//邮箱验证码
	SendEmailUserCode(ctx context.Context, in *SendEmailUserCodeRequest, opts ...client.CallOption) (*SendEmailResponse, error)
	//异地登录提醒
	SendEmailUserLoggedIn(ctx context.Context, in *SendEmailUserLoggedInRequest, opts ...client.CallOption) (*SendEmailResponse, error)
	//邮箱注册提醒
	SendEmailUserRegister(ctx context.Context, in *SendEmailUserRegisterRequest, opts ...client.CallOption) (*SendEmailResponse, error)
}

type emailService struct {
	c    client.Client
	name string
}

func NewEmailService(name string, c client.Client) EmailService {
	return &emailService{
		c:    c,
		name: name,
	}
}

func (c *emailService) SendEmailUserCode(ctx context.Context, in *SendEmailUserCodeRequest, opts ...client.CallOption) (*SendEmailResponse, error) {
	req := c.c.NewRequest(c.name, "EmailService.SendEmailUserCode", in)
	out := new(SendEmailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailService) SendEmailUserLoggedIn(ctx context.Context, in *SendEmailUserLoggedInRequest, opts ...client.CallOption) (*SendEmailResponse, error) {
	req := c.c.NewRequest(c.name, "EmailService.SendEmailUserLoggedIn", in)
	out := new(SendEmailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailService) SendEmailUserRegister(ctx context.Context, in *SendEmailUserRegisterRequest, opts ...client.CallOption) (*SendEmailResponse, error) {
	req := c.c.NewRequest(c.name, "EmailService.SendEmailUserRegister", in)
	out := new(SendEmailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EmailService service

type EmailServiceHandler interface {
	//邮箱验证码
	SendEmailUserCode(context.Context, *SendEmailUserCodeRequest, *SendEmailResponse) error
	//异地登录提醒
	SendEmailUserLoggedIn(context.Context, *SendEmailUserLoggedInRequest, *SendEmailResponse) error
	//邮箱注册提醒
	SendEmailUserRegister(context.Context, *SendEmailUserRegisterRequest, *SendEmailResponse) error
}

func RegisterEmailServiceHandler(s server.Server, hdlr EmailServiceHandler, opts ...server.HandlerOption) error {
	type emailService interface {
		SendEmailUserCode(ctx context.Context, in *SendEmailUserCodeRequest, out *SendEmailResponse) error
		SendEmailUserLoggedIn(ctx context.Context, in *SendEmailUserLoggedInRequest, out *SendEmailResponse) error
		SendEmailUserRegister(ctx context.Context, in *SendEmailUserRegisterRequest, out *SendEmailResponse) error
	}
	type EmailService struct {
		emailService
	}
	h := &emailServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&EmailService{h}, opts...))
}

type emailServiceHandler struct {
	EmailServiceHandler
}

func (h *emailServiceHandler) SendEmailUserCode(ctx context.Context, in *SendEmailUserCodeRequest, out *SendEmailResponse) error {
	return h.EmailServiceHandler.SendEmailUserCode(ctx, in, out)
}

func (h *emailServiceHandler) SendEmailUserLoggedIn(ctx context.Context, in *SendEmailUserLoggedInRequest, out *SendEmailResponse) error {
	return h.EmailServiceHandler.SendEmailUserLoggedIn(ctx, in, out)
}

func (h *emailServiceHandler) SendEmailUserRegister(ctx context.Context, in *SendEmailUserRegisterRequest, out *SendEmailResponse) error {
	return h.EmailServiceHandler.SendEmailUserRegister(ctx, in, out)
}
