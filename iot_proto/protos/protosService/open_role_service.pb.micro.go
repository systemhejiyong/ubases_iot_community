// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: open_role_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpenRoleService service

func NewOpenRoleServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpenRoleService.Create",
			Path:    []string{"/v1/openRole/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenRoleService.Delete",
			Path:    []string{"/v1/openRole/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenRoleService.DeleteById",
			Path:    []string{"/v1/openRole/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenRoleService.DeleteByIds",
			Path:    []string{"/v1/openRole/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenRoleService.Update",
			Path:    []string{"/v1/openRole/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenRoleService.UpdateAll",
			Path:    []string{"/v1/openRole/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenRoleService.UpdateFields",
			Path:    []string{"/v1/openRole/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenRoleService.FindById",
			Path:    []string{"/v1/openRole/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenRoleService.Find",
			Path:    []string{"/v1/openRole/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenRoleService.Lists",
			Path:    []string{"/v1/openRole/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenRoleService.RoleAdd",
			Path:    []string{"/v1/openRole/roleadd"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenRoleService.RoleEdit",
			Path:    []string{"/v1/openRole/roleedit"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenRoleService.RoleDetail",
			Path:    []string{"/v1/openRole/roledetail"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenRoleService.RoleSetUser",
			Path:    []string{"/v1/openRole/rolesetuser"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpenRoleService service

type OpenRoleService interface {
	//创建
	Create(ctx context.Context, in *OpenRole, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpenRole, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpenRole, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpenRoleBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpenRole, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpenRole, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpenRoleUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpenRoleFilter, opts ...client.CallOption) (*OpenRoleResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpenRoleFilter, opts ...client.CallOption) (*OpenRoleResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpenRoleListRequest, opts ...client.CallOption) (*OpenRoleResponse, error)
	//新增角色
	RoleAdd(ctx context.Context, in *OpenRoleAddRequest, opts ...client.CallOption) (*Response, error)
	//编辑角色
	RoleEdit(ctx context.Context, in *OpenRoleEditRequest, opts ...client.CallOption) (*Response, error)
	//获取角色详细
	RoleDetail(ctx context.Context, in *OpenRolePrimarykey, opts ...client.CallOption) (*OpenRoleDetailResponse, error)
	//给用户分配角色
	RoleSetUser(ctx context.Context, in *OpenRoleSetUserRequest, opts ...client.CallOption) (*Response, error)
}

type openRoleService struct {
	c    client.Client
	name string
}

func NewOpenRoleService(name string, c client.Client) OpenRoleService {
	return &openRoleService{
		c:    c,
		name: name,
	}
}

func (c *openRoleService) Create(ctx context.Context, in *OpenRole, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenRoleService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openRoleService) Delete(ctx context.Context, in *OpenRole, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenRoleService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openRoleService) DeleteById(ctx context.Context, in *OpenRole, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenRoleService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openRoleService) DeleteByIds(ctx context.Context, in *OpenRoleBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenRoleService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openRoleService) Update(ctx context.Context, in *OpenRole, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenRoleService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openRoleService) UpdateAll(ctx context.Context, in *OpenRole, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenRoleService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openRoleService) UpdateFields(ctx context.Context, in *OpenRoleUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenRoleService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openRoleService) FindById(ctx context.Context, in *OpenRoleFilter, opts ...client.CallOption) (*OpenRoleResponse, error) {
	req := c.c.NewRequest(c.name, "OpenRoleService.FindById", in)
	out := new(OpenRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openRoleService) Find(ctx context.Context, in *OpenRoleFilter, opts ...client.CallOption) (*OpenRoleResponse, error) {
	req := c.c.NewRequest(c.name, "OpenRoleService.Find", in)
	out := new(OpenRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openRoleService) Lists(ctx context.Context, in *OpenRoleListRequest, opts ...client.CallOption) (*OpenRoleResponse, error) {
	req := c.c.NewRequest(c.name, "OpenRoleService.Lists", in)
	out := new(OpenRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openRoleService) RoleAdd(ctx context.Context, in *OpenRoleAddRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenRoleService.RoleAdd", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openRoleService) RoleEdit(ctx context.Context, in *OpenRoleEditRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenRoleService.RoleEdit", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openRoleService) RoleDetail(ctx context.Context, in *OpenRolePrimarykey, opts ...client.CallOption) (*OpenRoleDetailResponse, error) {
	req := c.c.NewRequest(c.name, "OpenRoleService.RoleDetail", in)
	out := new(OpenRoleDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openRoleService) RoleSetUser(ctx context.Context, in *OpenRoleSetUserRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenRoleService.RoleSetUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpenRoleService service

type OpenRoleServiceHandler interface {
	//创建
	Create(context.Context, *OpenRole, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpenRole, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpenRole, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpenRoleBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpenRole, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpenRole, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpenRoleUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpenRoleFilter, *OpenRoleResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpenRoleFilter, *OpenRoleResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpenRoleListRequest, *OpenRoleResponse) error
	//新增角色
	RoleAdd(context.Context, *OpenRoleAddRequest, *Response) error
	//编辑角色
	RoleEdit(context.Context, *OpenRoleEditRequest, *Response) error
	//获取角色详细
	RoleDetail(context.Context, *OpenRolePrimarykey, *OpenRoleDetailResponse) error
	//给用户分配角色
	RoleSetUser(context.Context, *OpenRoleSetUserRequest, *Response) error
}

func RegisterOpenRoleServiceHandler(s server.Server, hdlr OpenRoleServiceHandler, opts ...server.HandlerOption) error {
	type openRoleService interface {
		Create(ctx context.Context, in *OpenRole, out *Response) error
		Delete(ctx context.Context, in *OpenRole, out *Response) error
		DeleteById(ctx context.Context, in *OpenRole, out *Response) error
		DeleteByIds(ctx context.Context, in *OpenRoleBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpenRole, out *Response) error
		UpdateAll(ctx context.Context, in *OpenRole, out *Response) error
		UpdateFields(ctx context.Context, in *OpenRoleUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpenRoleFilter, out *OpenRoleResponse) error
		Find(ctx context.Context, in *OpenRoleFilter, out *OpenRoleResponse) error
		Lists(ctx context.Context, in *OpenRoleListRequest, out *OpenRoleResponse) error
		RoleAdd(ctx context.Context, in *OpenRoleAddRequest, out *Response) error
		RoleEdit(ctx context.Context, in *OpenRoleEditRequest, out *Response) error
		RoleDetail(ctx context.Context, in *OpenRolePrimarykey, out *OpenRoleDetailResponse) error
		RoleSetUser(ctx context.Context, in *OpenRoleSetUserRequest, out *Response) error
	}
	type OpenRoleService struct {
		openRoleService
	}
	h := &openRoleServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenRoleService.Create",
		Path:    []string{"/v1/openRole/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenRoleService.Delete",
		Path:    []string{"/v1/openRole/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenRoleService.DeleteById",
		Path:    []string{"/v1/openRole/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenRoleService.DeleteByIds",
		Path:    []string{"/v1/openRole/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenRoleService.Update",
		Path:    []string{"/v1/openRole/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenRoleService.UpdateAll",
		Path:    []string{"/v1/openRole/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenRoleService.UpdateFields",
		Path:    []string{"/v1/openRole/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenRoleService.FindById",
		Path:    []string{"/v1/openRole/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenRoleService.Find",
		Path:    []string{"/v1/openRole/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenRoleService.Lists",
		Path:    []string{"/v1/openRole/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenRoleService.RoleAdd",
		Path:    []string{"/v1/openRole/roleadd"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenRoleService.RoleEdit",
		Path:    []string{"/v1/openRole/roleedit"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenRoleService.RoleDetail",
		Path:    []string{"/v1/openRole/roledetail"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenRoleService.RoleSetUser",
		Path:    []string{"/v1/openRole/rolesetuser"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpenRoleService{h}, opts...))
}

type openRoleServiceHandler struct {
	OpenRoleServiceHandler
}

func (h *openRoleServiceHandler) Create(ctx context.Context, in *OpenRole, out *Response) error {
	return h.OpenRoleServiceHandler.Create(ctx, in, out)
}

func (h *openRoleServiceHandler) Delete(ctx context.Context, in *OpenRole, out *Response) error {
	return h.OpenRoleServiceHandler.Delete(ctx, in, out)
}

func (h *openRoleServiceHandler) DeleteById(ctx context.Context, in *OpenRole, out *Response) error {
	return h.OpenRoleServiceHandler.DeleteById(ctx, in, out)
}

func (h *openRoleServiceHandler) DeleteByIds(ctx context.Context, in *OpenRoleBatchDeleteRequest, out *Response) error {
	return h.OpenRoleServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *openRoleServiceHandler) Update(ctx context.Context, in *OpenRole, out *Response) error {
	return h.OpenRoleServiceHandler.Update(ctx, in, out)
}

func (h *openRoleServiceHandler) UpdateAll(ctx context.Context, in *OpenRole, out *Response) error {
	return h.OpenRoleServiceHandler.UpdateAll(ctx, in, out)
}

func (h *openRoleServiceHandler) UpdateFields(ctx context.Context, in *OpenRoleUpdateFieldsRequest, out *Response) error {
	return h.OpenRoleServiceHandler.UpdateFields(ctx, in, out)
}

func (h *openRoleServiceHandler) FindById(ctx context.Context, in *OpenRoleFilter, out *OpenRoleResponse) error {
	return h.OpenRoleServiceHandler.FindById(ctx, in, out)
}

func (h *openRoleServiceHandler) Find(ctx context.Context, in *OpenRoleFilter, out *OpenRoleResponse) error {
	return h.OpenRoleServiceHandler.Find(ctx, in, out)
}

func (h *openRoleServiceHandler) Lists(ctx context.Context, in *OpenRoleListRequest, out *OpenRoleResponse) error {
	return h.OpenRoleServiceHandler.Lists(ctx, in, out)
}

func (h *openRoleServiceHandler) RoleAdd(ctx context.Context, in *OpenRoleAddRequest, out *Response) error {
	return h.OpenRoleServiceHandler.RoleAdd(ctx, in, out)
}

func (h *openRoleServiceHandler) RoleEdit(ctx context.Context, in *OpenRoleEditRequest, out *Response) error {
	return h.OpenRoleServiceHandler.RoleEdit(ctx, in, out)
}

func (h *openRoleServiceHandler) RoleDetail(ctx context.Context, in *OpenRolePrimarykey, out *OpenRoleDetailResponse) error {
	return h.OpenRoleServiceHandler.RoleDetail(ctx, in, out)
}

func (h *openRoleServiceHandler) RoleSetUser(ctx context.Context, in *OpenRoleSetUserRequest, out *Response) error {
	return h.OpenRoleServiceHandler.RoleSetUser(ctx, in, out)
}
