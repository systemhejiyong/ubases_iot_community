// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: config_translate_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ConfigTranslateService service

func NewConfigTranslateServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "ConfigTranslateService.Create",
			Path:    []string{"/v1/configTranslate/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ConfigTranslateService.Delete",
			Path:    []string{"/v1/configTranslate/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ConfigTranslateService.DeleteById",
			Path:    []string{"/v1/configTranslate/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ConfigTranslateService.DeleteByIds",
			Path:    []string{"/v1/configTranslate/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ConfigTranslateService.Update",
			Path:    []string{"/v1/configTranslate/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ConfigTranslateService.UpdateAll",
			Path:    []string{"/v1/configTranslate/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ConfigTranslateService.UpdateFields",
			Path:    []string{"/v1/configTranslate/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ConfigTranslateService.FindById",
			Path:    []string{"/v1/configTranslate/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ConfigTranslateService.Find",
			Path:    []string{"/v1/configTranslate/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "ConfigTranslateService.Lists",
			Path:    []string{"/v1/configTranslate/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for ConfigTranslateService service

type ConfigTranslateService interface {
	//创建
	Create(ctx context.Context, in *ConfigTranslate, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *ConfigTranslate, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *ConfigTranslate, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *ConfigTranslateBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *ConfigTranslate, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *ConfigTranslate, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *ConfigTranslateUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *ConfigTranslateFilter, opts ...client.CallOption) (*ConfigTranslateResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *ConfigTranslateFilter, opts ...client.CallOption) (*ConfigTranslateResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *ConfigTranslateListRequest, opts ...client.CallOption) (*ConfigTranslateResponse, error)
}

type configTranslateService struct {
	c    client.Client
	name string
}

func NewConfigTranslateService(name string, c client.Client) ConfigTranslateService {
	return &configTranslateService{
		c:    c,
		name: name,
	}
}

func (c *configTranslateService) Create(ctx context.Context, in *ConfigTranslate, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ConfigTranslateService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configTranslateService) Delete(ctx context.Context, in *ConfigTranslate, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ConfigTranslateService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configTranslateService) DeleteById(ctx context.Context, in *ConfigTranslate, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ConfigTranslateService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configTranslateService) DeleteByIds(ctx context.Context, in *ConfigTranslateBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ConfigTranslateService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configTranslateService) Update(ctx context.Context, in *ConfigTranslate, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ConfigTranslateService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configTranslateService) UpdateAll(ctx context.Context, in *ConfigTranslate, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ConfigTranslateService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configTranslateService) UpdateFields(ctx context.Context, in *ConfigTranslateUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ConfigTranslateService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configTranslateService) FindById(ctx context.Context, in *ConfigTranslateFilter, opts ...client.CallOption) (*ConfigTranslateResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigTranslateService.FindById", in)
	out := new(ConfigTranslateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configTranslateService) Find(ctx context.Context, in *ConfigTranslateFilter, opts ...client.CallOption) (*ConfigTranslateResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigTranslateService.Find", in)
	out := new(ConfigTranslateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configTranslateService) Lists(ctx context.Context, in *ConfigTranslateListRequest, opts ...client.CallOption) (*ConfigTranslateResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigTranslateService.Lists", in)
	out := new(ConfigTranslateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigTranslateService service

type ConfigTranslateServiceHandler interface {
	//创建
	Create(context.Context, *ConfigTranslate, *Response) error
	//匹配多条件删除
	Delete(context.Context, *ConfigTranslate, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *ConfigTranslate, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *ConfigTranslateBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *ConfigTranslate, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *ConfigTranslate, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *ConfigTranslateUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *ConfigTranslateFilter, *ConfigTranslateResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *ConfigTranslateFilter, *ConfigTranslateResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *ConfigTranslateListRequest, *ConfigTranslateResponse) error
}

func RegisterConfigTranslateServiceHandler(s server.Server, hdlr ConfigTranslateServiceHandler, opts ...server.HandlerOption) error {
	type configTranslateService interface {
		Create(ctx context.Context, in *ConfigTranslate, out *Response) error
		Delete(ctx context.Context, in *ConfigTranslate, out *Response) error
		DeleteById(ctx context.Context, in *ConfigTranslate, out *Response) error
		DeleteByIds(ctx context.Context, in *ConfigTranslateBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *ConfigTranslate, out *Response) error
		UpdateAll(ctx context.Context, in *ConfigTranslate, out *Response) error
		UpdateFields(ctx context.Context, in *ConfigTranslateUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *ConfigTranslateFilter, out *ConfigTranslateResponse) error
		Find(ctx context.Context, in *ConfigTranslateFilter, out *ConfigTranslateResponse) error
		Lists(ctx context.Context, in *ConfigTranslateListRequest, out *ConfigTranslateResponse) error
	}
	type ConfigTranslateService struct {
		configTranslateService
	}
	h := &configTranslateServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigTranslateService.Create",
		Path:    []string{"/v1/configTranslate/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigTranslateService.Delete",
		Path:    []string{"/v1/configTranslate/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigTranslateService.DeleteById",
		Path:    []string{"/v1/configTranslate/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigTranslateService.DeleteByIds",
		Path:    []string{"/v1/configTranslate/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigTranslateService.Update",
		Path:    []string{"/v1/configTranslate/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigTranslateService.UpdateAll",
		Path:    []string{"/v1/configTranslate/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigTranslateService.UpdateFields",
		Path:    []string{"/v1/configTranslate/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigTranslateService.FindById",
		Path:    []string{"/v1/configTranslate/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigTranslateService.Find",
		Path:    []string{"/v1/configTranslate/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "ConfigTranslateService.Lists",
		Path:    []string{"/v1/configTranslate/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&ConfigTranslateService{h}, opts...))
}

type configTranslateServiceHandler struct {
	ConfigTranslateServiceHandler
}

func (h *configTranslateServiceHandler) Create(ctx context.Context, in *ConfigTranslate, out *Response) error {
	return h.ConfigTranslateServiceHandler.Create(ctx, in, out)
}

func (h *configTranslateServiceHandler) Delete(ctx context.Context, in *ConfigTranslate, out *Response) error {
	return h.ConfigTranslateServiceHandler.Delete(ctx, in, out)
}

func (h *configTranslateServiceHandler) DeleteById(ctx context.Context, in *ConfigTranslate, out *Response) error {
	return h.ConfigTranslateServiceHandler.DeleteById(ctx, in, out)
}

func (h *configTranslateServiceHandler) DeleteByIds(ctx context.Context, in *ConfigTranslateBatchDeleteRequest, out *Response) error {
	return h.ConfigTranslateServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *configTranslateServiceHandler) Update(ctx context.Context, in *ConfigTranslate, out *Response) error {
	return h.ConfigTranslateServiceHandler.Update(ctx, in, out)
}

func (h *configTranslateServiceHandler) UpdateAll(ctx context.Context, in *ConfigTranslate, out *Response) error {
	return h.ConfigTranslateServiceHandler.UpdateAll(ctx, in, out)
}

func (h *configTranslateServiceHandler) UpdateFields(ctx context.Context, in *ConfigTranslateUpdateFieldsRequest, out *Response) error {
	return h.ConfigTranslateServiceHandler.UpdateFields(ctx, in, out)
}

func (h *configTranslateServiceHandler) FindById(ctx context.Context, in *ConfigTranslateFilter, out *ConfigTranslateResponse) error {
	return h.ConfigTranslateServiceHandler.FindById(ctx, in, out)
}

func (h *configTranslateServiceHandler) Find(ctx context.Context, in *ConfigTranslateFilter, out *ConfigTranslateResponse) error {
	return h.ConfigTranslateServiceHandler.Find(ctx, in, out)
}

func (h *configTranslateServiceHandler) Lists(ctx context.Context, in *ConfigTranslateListRequest, out *ConfigTranslateResponse) error {
	return h.ConfigTranslateServiceHandler.Lists(ctx, in, out)
}
