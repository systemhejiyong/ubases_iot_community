// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: opm_ota_pkg_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpmOtaPkgService service

func NewOpmOtaPkgServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpmOtaPkgService.Create",
			Path:    []string{"/v1/opmOtaPkg/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPkgService.Delete",
			Path:    []string{"/v1/opmOtaPkg/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPkgService.DeleteById",
			Path:    []string{"/v1/opmOtaPkg/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPkgService.DeleteByIds",
			Path:    []string{"/v1/opmOtaPkg/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPkgService.Update",
			Path:    []string{"/v1/opmOtaPkg/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPkgService.UpdateAll",
			Path:    []string{"/v1/opmOtaPkg/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPkgService.UpdateFields",
			Path:    []string{"/v1/opmOtaPkg/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPkgService.FindById",
			Path:    []string{"/v1/opmOtaPkg/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPkgService.Find",
			Path:    []string{"/v1/opmOtaPkg/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPkgService.Lists",
			Path:    []string{"/v1/opmOtaPkg/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPkgService.SetPublish",
			Path:    []string{"/v1/opmOtaPkg/setPublish"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPkgService.GetProductOtaVersion",
			Path:    []string{"/v1/opmOtaPkg/productOtaVersion"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmOtaPkgService.GetProductOtaAreas",
			Path:    []string{"/v1/opmOtaPkg/productOtaArea"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpmOtaPkgService service

type OpmOtaPkgService interface {
	//创建
	Create(ctx context.Context, in *OpmOtaPkg, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpmOtaPkg, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpmOtaPkg, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpmOtaPkgBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpmOtaPkg, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpmOtaPkg, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpmOtaPkgUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpmOtaPkgFilter, opts ...client.CallOption) (*OpmOtaPkgResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpmOtaPkgFilter, opts ...client.CallOption) (*OpmOtaPkgResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpmOtaPkgListRequest, opts ...client.CallOption) (*OpmOtaPkgResponse, error)
	//设置发布、暂停、恢复发布
	SetPublish(ctx context.Context, in *SetOtaPublishRequest, opts ...client.CallOption) (*Response, error)
	GetProductOtaVersion(ctx context.Context, in *ProductOtaVersionRequest, opts ...client.CallOption) (*ProductOtaVersionResponse, error)
	GetProductOtaAreas(ctx context.Context, in *ProductOtaAreaRequest, opts ...client.CallOption) (*ProductOtaAreaResponse, error)
}

type opmOtaPkgService struct {
	c    client.Client
	name string
}

func NewOpmOtaPkgService(name string, c client.Client) OpmOtaPkgService {
	return &opmOtaPkgService{
		c:    c,
		name: name,
	}
}

func (c *opmOtaPkgService) Create(ctx context.Context, in *OpmOtaPkg, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPkgService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPkgService) Delete(ctx context.Context, in *OpmOtaPkg, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPkgService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPkgService) DeleteById(ctx context.Context, in *OpmOtaPkg, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPkgService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPkgService) DeleteByIds(ctx context.Context, in *OpmOtaPkgBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPkgService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPkgService) Update(ctx context.Context, in *OpmOtaPkg, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPkgService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPkgService) UpdateAll(ctx context.Context, in *OpmOtaPkg, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPkgService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPkgService) UpdateFields(ctx context.Context, in *OpmOtaPkgUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPkgService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPkgService) FindById(ctx context.Context, in *OpmOtaPkgFilter, opts ...client.CallOption) (*OpmOtaPkgResponse, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPkgService.FindById", in)
	out := new(OpmOtaPkgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPkgService) Find(ctx context.Context, in *OpmOtaPkgFilter, opts ...client.CallOption) (*OpmOtaPkgResponse, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPkgService.Find", in)
	out := new(OpmOtaPkgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPkgService) Lists(ctx context.Context, in *OpmOtaPkgListRequest, opts ...client.CallOption) (*OpmOtaPkgResponse, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPkgService.Lists", in)
	out := new(OpmOtaPkgResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPkgService) SetPublish(ctx context.Context, in *SetOtaPublishRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPkgService.SetPublish", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPkgService) GetProductOtaVersion(ctx context.Context, in *ProductOtaVersionRequest, opts ...client.CallOption) (*ProductOtaVersionResponse, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPkgService.GetProductOtaVersion", in)
	out := new(ProductOtaVersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmOtaPkgService) GetProductOtaAreas(ctx context.Context, in *ProductOtaAreaRequest, opts ...client.CallOption) (*ProductOtaAreaResponse, error) {
	req := c.c.NewRequest(c.name, "OpmOtaPkgService.GetProductOtaAreas", in)
	out := new(ProductOtaAreaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpmOtaPkgService service

type OpmOtaPkgServiceHandler interface {
	//创建
	Create(context.Context, *OpmOtaPkg, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpmOtaPkg, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpmOtaPkg, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpmOtaPkgBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpmOtaPkg, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpmOtaPkg, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpmOtaPkgUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpmOtaPkgFilter, *OpmOtaPkgResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpmOtaPkgFilter, *OpmOtaPkgResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpmOtaPkgListRequest, *OpmOtaPkgResponse) error
	//设置发布、暂停、恢复发布
	SetPublish(context.Context, *SetOtaPublishRequest, *Response) error
	GetProductOtaVersion(context.Context, *ProductOtaVersionRequest, *ProductOtaVersionResponse) error
	GetProductOtaAreas(context.Context, *ProductOtaAreaRequest, *ProductOtaAreaResponse) error
}

func RegisterOpmOtaPkgServiceHandler(s server.Server, hdlr OpmOtaPkgServiceHandler, opts ...server.HandlerOption) error {
	type opmOtaPkgService interface {
		Create(ctx context.Context, in *OpmOtaPkg, out *Response) error
		Delete(ctx context.Context, in *OpmOtaPkg, out *Response) error
		DeleteById(ctx context.Context, in *OpmOtaPkg, out *Response) error
		DeleteByIds(ctx context.Context, in *OpmOtaPkgBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpmOtaPkg, out *Response) error
		UpdateAll(ctx context.Context, in *OpmOtaPkg, out *Response) error
		UpdateFields(ctx context.Context, in *OpmOtaPkgUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpmOtaPkgFilter, out *OpmOtaPkgResponse) error
		Find(ctx context.Context, in *OpmOtaPkgFilter, out *OpmOtaPkgResponse) error
		Lists(ctx context.Context, in *OpmOtaPkgListRequest, out *OpmOtaPkgResponse) error
		SetPublish(ctx context.Context, in *SetOtaPublishRequest, out *Response) error
		GetProductOtaVersion(ctx context.Context, in *ProductOtaVersionRequest, out *ProductOtaVersionResponse) error
		GetProductOtaAreas(ctx context.Context, in *ProductOtaAreaRequest, out *ProductOtaAreaResponse) error
	}
	type OpmOtaPkgService struct {
		opmOtaPkgService
	}
	h := &opmOtaPkgServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPkgService.Create",
		Path:    []string{"/v1/opmOtaPkg/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPkgService.Delete",
		Path:    []string{"/v1/opmOtaPkg/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPkgService.DeleteById",
		Path:    []string{"/v1/opmOtaPkg/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPkgService.DeleteByIds",
		Path:    []string{"/v1/opmOtaPkg/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPkgService.Update",
		Path:    []string{"/v1/opmOtaPkg/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPkgService.UpdateAll",
		Path:    []string{"/v1/opmOtaPkg/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPkgService.UpdateFields",
		Path:    []string{"/v1/opmOtaPkg/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPkgService.FindById",
		Path:    []string{"/v1/opmOtaPkg/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPkgService.Find",
		Path:    []string{"/v1/opmOtaPkg/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPkgService.Lists",
		Path:    []string{"/v1/opmOtaPkg/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPkgService.SetPublish",
		Path:    []string{"/v1/opmOtaPkg/setPublish"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPkgService.GetProductOtaVersion",
		Path:    []string{"/v1/opmOtaPkg/productOtaVersion"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmOtaPkgService.GetProductOtaAreas",
		Path:    []string{"/v1/opmOtaPkg/productOtaArea"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpmOtaPkgService{h}, opts...))
}

type opmOtaPkgServiceHandler struct {
	OpmOtaPkgServiceHandler
}

func (h *opmOtaPkgServiceHandler) Create(ctx context.Context, in *OpmOtaPkg, out *Response) error {
	return h.OpmOtaPkgServiceHandler.Create(ctx, in, out)
}

func (h *opmOtaPkgServiceHandler) Delete(ctx context.Context, in *OpmOtaPkg, out *Response) error {
	return h.OpmOtaPkgServiceHandler.Delete(ctx, in, out)
}

func (h *opmOtaPkgServiceHandler) DeleteById(ctx context.Context, in *OpmOtaPkg, out *Response) error {
	return h.OpmOtaPkgServiceHandler.DeleteById(ctx, in, out)
}

func (h *opmOtaPkgServiceHandler) DeleteByIds(ctx context.Context, in *OpmOtaPkgBatchDeleteRequest, out *Response) error {
	return h.OpmOtaPkgServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *opmOtaPkgServiceHandler) Update(ctx context.Context, in *OpmOtaPkg, out *Response) error {
	return h.OpmOtaPkgServiceHandler.Update(ctx, in, out)
}

func (h *opmOtaPkgServiceHandler) UpdateAll(ctx context.Context, in *OpmOtaPkg, out *Response) error {
	return h.OpmOtaPkgServiceHandler.UpdateAll(ctx, in, out)
}

func (h *opmOtaPkgServiceHandler) UpdateFields(ctx context.Context, in *OpmOtaPkgUpdateFieldsRequest, out *Response) error {
	return h.OpmOtaPkgServiceHandler.UpdateFields(ctx, in, out)
}

func (h *opmOtaPkgServiceHandler) FindById(ctx context.Context, in *OpmOtaPkgFilter, out *OpmOtaPkgResponse) error {
	return h.OpmOtaPkgServiceHandler.FindById(ctx, in, out)
}

func (h *opmOtaPkgServiceHandler) Find(ctx context.Context, in *OpmOtaPkgFilter, out *OpmOtaPkgResponse) error {
	return h.OpmOtaPkgServiceHandler.Find(ctx, in, out)
}

func (h *opmOtaPkgServiceHandler) Lists(ctx context.Context, in *OpmOtaPkgListRequest, out *OpmOtaPkgResponse) error {
	return h.OpmOtaPkgServiceHandler.Lists(ctx, in, out)
}

func (h *opmOtaPkgServiceHandler) SetPublish(ctx context.Context, in *SetOtaPublishRequest, out *Response) error {
	return h.OpmOtaPkgServiceHandler.SetPublish(ctx, in, out)
}

func (h *opmOtaPkgServiceHandler) GetProductOtaVersion(ctx context.Context, in *ProductOtaVersionRequest, out *ProductOtaVersionResponse) error {
	return h.OpmOtaPkgServiceHandler.GetProductOtaVersion(ctx, in, out)
}

func (h *opmOtaPkgServiceHandler) GetProductOtaAreas(ctx context.Context, in *ProductOtaAreaRequest, out *ProductOtaAreaResponse) error {
	return h.OpmOtaPkgServiceHandler.GetProductOtaAreas(ctx, in, out)
}
