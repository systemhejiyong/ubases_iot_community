// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: opm_panel_service.gen.proto

package protosService

import (
	fmt "fmt"
	math "math"

	proto "google.golang.org/protobuf/proto"

	context "context"

	api "go-micro.dev/v4/api"

	client "go-micro.dev/v4/client"

	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpmPanelService service

func NewOpmPanelServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpmPanelService.Create",
			Path:    []string{"/v1/opmPanel/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmPanelService.Delete",
			Path:    []string{"/v1/opmPanel/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmPanelService.DeleteById",
			Path:    []string{"/v1/opmPanel/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmPanelService.DeleteByIds",
			Path:    []string{"/v1/opmPanel/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmPanelService.Update",
			Path:    []string{"/v1/opmPanel/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmPanelService.UpdateAll",
			Path:    []string{"/v1/opmPanel/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmPanelService.UpdateFields",
			Path:    []string{"/v1/opmPanel/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmPanelService.FindById",
			Path:    []string{"/v1/opmPanel/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmPanelService.Find",
			Path:    []string{"/v1/opmPanel/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmPanelService.Lists",
			Path:    []string{"/v1/opmPanel/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmPanelService.UpdateStatus",
			Path:    []string{"/v1/opmPanel/UpdateStatus"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmPanelService.CopyPanel",
			Path:    []string{"/v1/opmPanel/copyPanel"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmPanelService.UpdateEditStudio",
			Path:    []string{"/v1/opmPanel/updateEditStudio"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpmPanelService service

type OpmPanelService interface {
	//创建
	Create(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpmPanelBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpmPanelUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpmPanelFilter, opts ...client.CallOption) (*OpmPanelResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpmPanelFilter, opts ...client.CallOption) (*OpmPanelResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpmPanelListRequest, opts ...client.CallOption) (*OpmPanelResponse, error)
	//修改状态
	UpdateStatus(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*Response, error)
	//修改状态
	CopyPanel(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*Response, error)
	//编辑设计器中的内容
	UpdateEditStudio(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*Response, error)
}

type opmPanelService struct {
	c    client.Client
	name string
}

func NewOpmPanelService(name string, c client.Client) OpmPanelService {
	return &opmPanelService{
		c:    c,
		name: name,
	}
}

func (c *opmPanelService) Create(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmPanelService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmPanelService) Delete(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmPanelService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmPanelService) DeleteById(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmPanelService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmPanelService) DeleteByIds(ctx context.Context, in *OpmPanelBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmPanelService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmPanelService) Update(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmPanelService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmPanelService) UpdateAll(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmPanelService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmPanelService) UpdateFields(ctx context.Context, in *OpmPanelUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmPanelService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmPanelService) FindById(ctx context.Context, in *OpmPanelFilter, opts ...client.CallOption) (*OpmPanelResponse, error) {
	req := c.c.NewRequest(c.name, "OpmPanelService.FindById", in)
	out := new(OpmPanelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmPanelService) Find(ctx context.Context, in *OpmPanelFilter, opts ...client.CallOption) (*OpmPanelResponse, error) {
	req := c.c.NewRequest(c.name, "OpmPanelService.Find", in)
	out := new(OpmPanelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmPanelService) Lists(ctx context.Context, in *OpmPanelListRequest, opts ...client.CallOption) (*OpmPanelResponse, error) {
	req := c.c.NewRequest(c.name, "OpmPanelService.Lists", in)
	out := new(OpmPanelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmPanelService) UpdateStatus(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmPanelService.UpdateStatus", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmPanelService) CopyPanel(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmPanelService.CopyPanel", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmPanelService) UpdateEditStudio(ctx context.Context, in *OpmPanel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmPanelService.UpdateEditStudio", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpmPanelService service

type OpmPanelServiceHandler interface {
	//创建
	Create(context.Context, *OpmPanel, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpmPanel, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpmPanel, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpmPanelBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpmPanel, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpmPanel, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpmPanelUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpmPanelFilter, *OpmPanelResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpmPanelFilter, *OpmPanelResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpmPanelListRequest, *OpmPanelResponse) error
	//修改状态
	UpdateStatus(context.Context, *OpmPanel, *Response) error
	//修改状态
	CopyPanel(context.Context, *OpmPanel, *Response) error
	//编辑设计器中的内容
	UpdateEditStudio(context.Context, *OpmPanel, *Response) error
}

func RegisterOpmPanelServiceHandler(s server.Server, hdlr OpmPanelServiceHandler, opts ...server.HandlerOption) error {
	type opmPanelService interface {
		Create(ctx context.Context, in *OpmPanel, out *Response) error
		Delete(ctx context.Context, in *OpmPanel, out *Response) error
		DeleteById(ctx context.Context, in *OpmPanel, out *Response) error
		DeleteByIds(ctx context.Context, in *OpmPanelBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpmPanel, out *Response) error
		UpdateAll(ctx context.Context, in *OpmPanel, out *Response) error
		UpdateFields(ctx context.Context, in *OpmPanelUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpmPanelFilter, out *OpmPanelResponse) error
		Find(ctx context.Context, in *OpmPanelFilter, out *OpmPanelResponse) error
		Lists(ctx context.Context, in *OpmPanelListRequest, out *OpmPanelResponse) error
		UpdateStatus(ctx context.Context, in *OpmPanel, out *Response) error
		CopyPanel(ctx context.Context, in *OpmPanel, out *Response) error
		UpdateEditStudio(ctx context.Context, in *OpmPanel, out *Response) error
	}
	type OpmPanelService struct {
		opmPanelService
	}
	h := &opmPanelServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmPanelService.Create",
		Path:    []string{"/v1/opmPanel/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmPanelService.Delete",
		Path:    []string{"/v1/opmPanel/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmPanelService.DeleteById",
		Path:    []string{"/v1/opmPanel/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmPanelService.DeleteByIds",
		Path:    []string{"/v1/opmPanel/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmPanelService.Update",
		Path:    []string{"/v1/opmPanel/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmPanelService.UpdateAll",
		Path:    []string{"/v1/opmPanel/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmPanelService.UpdateFields",
		Path:    []string{"/v1/opmPanel/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmPanelService.FindById",
		Path:    []string{"/v1/opmPanel/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmPanelService.Find",
		Path:    []string{"/v1/opmPanel/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmPanelService.Lists",
		Path:    []string{"/v1/opmPanel/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmPanelService.UpdateStatus",
		Path:    []string{"/v1/opmPanel/UpdateStatus"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmPanelService.CopyPanel",
		Path:    []string{"/v1/opmPanel/copyPanel"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmPanelService.UpdateEditStudio",
		Path:    []string{"/v1/opmPanel/updateEditStudio"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpmPanelService{h}, opts...))
}

type opmPanelServiceHandler struct {
	OpmPanelServiceHandler
}

func (h *opmPanelServiceHandler) Create(ctx context.Context, in *OpmPanel, out *Response) error {
	return h.OpmPanelServiceHandler.Create(ctx, in, out)
}

func (h *opmPanelServiceHandler) Delete(ctx context.Context, in *OpmPanel, out *Response) error {
	return h.OpmPanelServiceHandler.Delete(ctx, in, out)
}

func (h *opmPanelServiceHandler) DeleteById(ctx context.Context, in *OpmPanel, out *Response) error {
	return h.OpmPanelServiceHandler.DeleteById(ctx, in, out)
}

func (h *opmPanelServiceHandler) DeleteByIds(ctx context.Context, in *OpmPanelBatchDeleteRequest, out *Response) error {
	return h.OpmPanelServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *opmPanelServiceHandler) Update(ctx context.Context, in *OpmPanel, out *Response) error {
	return h.OpmPanelServiceHandler.Update(ctx, in, out)
}

func (h *opmPanelServiceHandler) UpdateAll(ctx context.Context, in *OpmPanel, out *Response) error {
	return h.OpmPanelServiceHandler.UpdateAll(ctx, in, out)
}

func (h *opmPanelServiceHandler) UpdateFields(ctx context.Context, in *OpmPanelUpdateFieldsRequest, out *Response) error {
	return h.OpmPanelServiceHandler.UpdateFields(ctx, in, out)
}

func (h *opmPanelServiceHandler) FindById(ctx context.Context, in *OpmPanelFilter, out *OpmPanelResponse) error {
	return h.OpmPanelServiceHandler.FindById(ctx, in, out)
}

func (h *opmPanelServiceHandler) Find(ctx context.Context, in *OpmPanelFilter, out *OpmPanelResponse) error {
	return h.OpmPanelServiceHandler.Find(ctx, in, out)
}

func (h *opmPanelServiceHandler) Lists(ctx context.Context, in *OpmPanelListRequest, out *OpmPanelResponse) error {
	return h.OpmPanelServiceHandler.Lists(ctx, in, out)
}

func (h *opmPanelServiceHandler) UpdateStatus(ctx context.Context, in *OpmPanel, out *Response) error {
	return h.OpmPanelServiceHandler.UpdateStatus(ctx, in, out)
}

func (h *opmPanelServiceHandler) CopyPanel(ctx context.Context, in *OpmPanel, out *Response) error {
	return h.OpmPanelServiceHandler.CopyPanel(ctx, in, out)
}

func (h *opmPanelServiceHandler) UpdateEditStudio(ctx context.Context, in *OpmPanel, out *Response) error {
	return h.OpmPanelServiceHandler.UpdateEditStudio(ctx, in, out)
}
