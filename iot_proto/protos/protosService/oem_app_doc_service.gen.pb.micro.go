// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: oem_app_doc_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OemAppDocService service

func NewOemAppDocServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OemAppDocService.Create",
			Path:    []string{"/v1/oemAppDoc/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocService.Delete",
			Path:    []string{"/v1/oemAppDoc/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocService.DeleteById",
			Path:    []string{"/v1/oemAppDoc/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocService.DeleteByIds",
			Path:    []string{"/v1/oemAppDoc/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocService.Update",
			Path:    []string{"/v1/oemAppDoc/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocService.UpdateAll",
			Path:    []string{"/v1/oemAppDoc/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocService.UpdateFields",
			Path:    []string{"/v1/oemAppDoc/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocService.FindById",
			Path:    []string{"/v1/oemAppDoc/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocService.Find",
			Path:    []string{"/v1/oemAppDoc/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppDocService.Lists",
			Path:    []string{"/v1/oemAppDoc/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OemAppDocService service

type OemAppDocService interface {
	//创建
	Create(ctx context.Context, in *OemAppDoc, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OemAppDoc, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OemAppDoc, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OemAppDocBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OemAppDoc, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OemAppDoc, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OemAppDocUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OemAppDocFilter, opts ...client.CallOption) (*OemAppDocResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OemAppDocFilter, opts ...client.CallOption) (*OemAppDocResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OemAppDocListRequest, opts ...client.CallOption) (*OemAppDocResponse, error)
}

type oemAppDocService struct {
	c    client.Client
	name string
}

func NewOemAppDocService(name string, c client.Client) OemAppDocService {
	return &oemAppDocService{
		c:    c,
		name: name,
	}
}

func (c *oemAppDocService) Create(ctx context.Context, in *OemAppDoc, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppDocService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocService) Delete(ctx context.Context, in *OemAppDoc, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppDocService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocService) DeleteById(ctx context.Context, in *OemAppDoc, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppDocService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocService) DeleteByIds(ctx context.Context, in *OemAppDocBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppDocService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocService) Update(ctx context.Context, in *OemAppDoc, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppDocService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocService) UpdateAll(ctx context.Context, in *OemAppDoc, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppDocService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocService) UpdateFields(ctx context.Context, in *OemAppDocUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppDocService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocService) FindById(ctx context.Context, in *OemAppDocFilter, opts ...client.CallOption) (*OemAppDocResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppDocService.FindById", in)
	out := new(OemAppDocResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocService) Find(ctx context.Context, in *OemAppDocFilter, opts ...client.CallOption) (*OemAppDocResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppDocService.Find", in)
	out := new(OemAppDocResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppDocService) Lists(ctx context.Context, in *OemAppDocListRequest, opts ...client.CallOption) (*OemAppDocResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppDocService.Lists", in)
	out := new(OemAppDocResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OemAppDocService service

type OemAppDocServiceHandler interface {
	//创建
	Create(context.Context, *OemAppDoc, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OemAppDoc, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OemAppDoc, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OemAppDocBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OemAppDoc, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OemAppDoc, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OemAppDocUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OemAppDocFilter, *OemAppDocResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OemAppDocFilter, *OemAppDocResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OemAppDocListRequest, *OemAppDocResponse) error
}

func RegisterOemAppDocServiceHandler(s server.Server, hdlr OemAppDocServiceHandler, opts ...server.HandlerOption) error {
	type oemAppDocService interface {
		Create(ctx context.Context, in *OemAppDoc, out *Response) error
		Delete(ctx context.Context, in *OemAppDoc, out *Response) error
		DeleteById(ctx context.Context, in *OemAppDoc, out *Response) error
		DeleteByIds(ctx context.Context, in *OemAppDocBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OemAppDoc, out *Response) error
		UpdateAll(ctx context.Context, in *OemAppDoc, out *Response) error
		UpdateFields(ctx context.Context, in *OemAppDocUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OemAppDocFilter, out *OemAppDocResponse) error
		Find(ctx context.Context, in *OemAppDocFilter, out *OemAppDocResponse) error
		Lists(ctx context.Context, in *OemAppDocListRequest, out *OemAppDocResponse) error
	}
	type OemAppDocService struct {
		oemAppDocService
	}
	h := &oemAppDocServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocService.Create",
		Path:    []string{"/v1/oemAppDoc/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocService.Delete",
		Path:    []string{"/v1/oemAppDoc/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocService.DeleteById",
		Path:    []string{"/v1/oemAppDoc/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocService.DeleteByIds",
		Path:    []string{"/v1/oemAppDoc/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocService.Update",
		Path:    []string{"/v1/oemAppDoc/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocService.UpdateAll",
		Path:    []string{"/v1/oemAppDoc/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocService.UpdateFields",
		Path:    []string{"/v1/oemAppDoc/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocService.FindById",
		Path:    []string{"/v1/oemAppDoc/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocService.Find",
		Path:    []string{"/v1/oemAppDoc/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppDocService.Lists",
		Path:    []string{"/v1/oemAppDoc/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OemAppDocService{h}, opts...))
}

type oemAppDocServiceHandler struct {
	OemAppDocServiceHandler
}

func (h *oemAppDocServiceHandler) Create(ctx context.Context, in *OemAppDoc, out *Response) error {
	return h.OemAppDocServiceHandler.Create(ctx, in, out)
}

func (h *oemAppDocServiceHandler) Delete(ctx context.Context, in *OemAppDoc, out *Response) error {
	return h.OemAppDocServiceHandler.Delete(ctx, in, out)
}

func (h *oemAppDocServiceHandler) DeleteById(ctx context.Context, in *OemAppDoc, out *Response) error {
	return h.OemAppDocServiceHandler.DeleteById(ctx, in, out)
}

func (h *oemAppDocServiceHandler) DeleteByIds(ctx context.Context, in *OemAppDocBatchDeleteRequest, out *Response) error {
	return h.OemAppDocServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *oemAppDocServiceHandler) Update(ctx context.Context, in *OemAppDoc, out *Response) error {
	return h.OemAppDocServiceHandler.Update(ctx, in, out)
}

func (h *oemAppDocServiceHandler) UpdateAll(ctx context.Context, in *OemAppDoc, out *Response) error {
	return h.OemAppDocServiceHandler.UpdateAll(ctx, in, out)
}

func (h *oemAppDocServiceHandler) UpdateFields(ctx context.Context, in *OemAppDocUpdateFieldsRequest, out *Response) error {
	return h.OemAppDocServiceHandler.UpdateFields(ctx, in, out)
}

func (h *oemAppDocServiceHandler) FindById(ctx context.Context, in *OemAppDocFilter, out *OemAppDocResponse) error {
	return h.OemAppDocServiceHandler.FindById(ctx, in, out)
}

func (h *oemAppDocServiceHandler) Find(ctx context.Context, in *OemAppDocFilter, out *OemAppDocResponse) error {
	return h.OemAppDocServiceHandler.Find(ctx, in, out)
}

func (h *oemAppDocServiceHandler) Lists(ctx context.Context, in *OemAppDocListRequest, out *OemAppDocResponse) error {
	return h.OemAppDocServiceHandler.Lists(ctx, in, out)
}
