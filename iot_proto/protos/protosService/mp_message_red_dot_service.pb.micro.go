// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: mp_message_red_dot_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MpMessageRedDotService service

func NewMpMessageRedDotServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "MpMessageRedDotService.Create",
			Path:    []string{"/v1/mpMessageRedDot/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageRedDotService.Delete",
			Path:    []string{"/v1/mpMessageRedDot/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageRedDotService.DeleteById",
			Path:    []string{"/v1/mpMessageRedDot/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageRedDotService.DeleteByIds",
			Path:    []string{"/v1/mpMessageRedDot/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageRedDotService.Update",
			Path:    []string{"/v1/mpMessageRedDot/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageRedDotService.UpdateAll",
			Path:    []string{"/v1/mpMessageRedDot/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageRedDotService.UpdateFields",
			Path:    []string{"/v1/mpMessageRedDot/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageRedDotService.FindById",
			Path:    []string{"/v1/mpMessageRedDot/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageRedDotService.Find",
			Path:    []string{"/v1/mpMessageRedDot/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessageRedDotService.Lists",
			Path:    []string{"/v1/mpMessageRedDot/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for MpMessageRedDotService service

type MpMessageRedDotService interface {
	//创建
	Create(ctx context.Context, in *MpMessageRedDot, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *MpMessageRedDot, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *MpMessageRedDot, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *MpMessageRedDotBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *MpMessageRedDot, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *MpMessageRedDot, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *MpMessageRedDotUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *MpMessageRedDotFilter, opts ...client.CallOption) (*MpMessageRedDotResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *MpMessageRedDotFilter, opts ...client.CallOption) (*MpMessageRedDotResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *MpMessageRedDotListRequest, opts ...client.CallOption) (*MpMessageRedDotResponse, error)
}

type mpMessageRedDotService struct {
	c    client.Client
	name string
}

func NewMpMessageRedDotService(name string, c client.Client) MpMessageRedDotService {
	return &mpMessageRedDotService{
		c:    c,
		name: name,
	}
}

func (c *mpMessageRedDotService) Create(ctx context.Context, in *MpMessageRedDot, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageRedDotService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageRedDotService) Delete(ctx context.Context, in *MpMessageRedDot, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageRedDotService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageRedDotService) DeleteById(ctx context.Context, in *MpMessageRedDot, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageRedDotService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageRedDotService) DeleteByIds(ctx context.Context, in *MpMessageRedDotBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageRedDotService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageRedDotService) Update(ctx context.Context, in *MpMessageRedDot, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageRedDotService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageRedDotService) UpdateAll(ctx context.Context, in *MpMessageRedDot, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageRedDotService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageRedDotService) UpdateFields(ctx context.Context, in *MpMessageRedDotUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessageRedDotService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageRedDotService) FindById(ctx context.Context, in *MpMessageRedDotFilter, opts ...client.CallOption) (*MpMessageRedDotResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessageRedDotService.FindById", in)
	out := new(MpMessageRedDotResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageRedDotService) Find(ctx context.Context, in *MpMessageRedDotFilter, opts ...client.CallOption) (*MpMessageRedDotResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessageRedDotService.Find", in)
	out := new(MpMessageRedDotResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessageRedDotService) Lists(ctx context.Context, in *MpMessageRedDotListRequest, opts ...client.CallOption) (*MpMessageRedDotResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessageRedDotService.Lists", in)
	out := new(MpMessageRedDotResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MpMessageRedDotService service

type MpMessageRedDotServiceHandler interface {
	//创建
	Create(context.Context, *MpMessageRedDot, *Response) error
	//匹配多条件删除
	Delete(context.Context, *MpMessageRedDot, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *MpMessageRedDot, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *MpMessageRedDotBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *MpMessageRedDot, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *MpMessageRedDot, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *MpMessageRedDotUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *MpMessageRedDotFilter, *MpMessageRedDotResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *MpMessageRedDotFilter, *MpMessageRedDotResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *MpMessageRedDotListRequest, *MpMessageRedDotResponse) error
}

func RegisterMpMessageRedDotServiceHandler(s server.Server, hdlr MpMessageRedDotServiceHandler, opts ...server.HandlerOption) error {
	type mpMessageRedDotService interface {
		Create(ctx context.Context, in *MpMessageRedDot, out *Response) error
		Delete(ctx context.Context, in *MpMessageRedDot, out *Response) error
		DeleteById(ctx context.Context, in *MpMessageRedDot, out *Response) error
		DeleteByIds(ctx context.Context, in *MpMessageRedDotBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *MpMessageRedDot, out *Response) error
		UpdateAll(ctx context.Context, in *MpMessageRedDot, out *Response) error
		UpdateFields(ctx context.Context, in *MpMessageRedDotUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *MpMessageRedDotFilter, out *MpMessageRedDotResponse) error
		Find(ctx context.Context, in *MpMessageRedDotFilter, out *MpMessageRedDotResponse) error
		Lists(ctx context.Context, in *MpMessageRedDotListRequest, out *MpMessageRedDotResponse) error
	}
	type MpMessageRedDotService struct {
		mpMessageRedDotService
	}
	h := &mpMessageRedDotServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageRedDotService.Create",
		Path:    []string{"/v1/mpMessageRedDot/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageRedDotService.Delete",
		Path:    []string{"/v1/mpMessageRedDot/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageRedDotService.DeleteById",
		Path:    []string{"/v1/mpMessageRedDot/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageRedDotService.DeleteByIds",
		Path:    []string{"/v1/mpMessageRedDot/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageRedDotService.Update",
		Path:    []string{"/v1/mpMessageRedDot/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageRedDotService.UpdateAll",
		Path:    []string{"/v1/mpMessageRedDot/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageRedDotService.UpdateFields",
		Path:    []string{"/v1/mpMessageRedDot/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageRedDotService.FindById",
		Path:    []string{"/v1/mpMessageRedDot/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageRedDotService.Find",
		Path:    []string{"/v1/mpMessageRedDot/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessageRedDotService.Lists",
		Path:    []string{"/v1/mpMessageRedDot/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&MpMessageRedDotService{h}, opts...))
}

type mpMessageRedDotServiceHandler struct {
	MpMessageRedDotServiceHandler
}

func (h *mpMessageRedDotServiceHandler) Create(ctx context.Context, in *MpMessageRedDot, out *Response) error {
	return h.MpMessageRedDotServiceHandler.Create(ctx, in, out)
}

func (h *mpMessageRedDotServiceHandler) Delete(ctx context.Context, in *MpMessageRedDot, out *Response) error {
	return h.MpMessageRedDotServiceHandler.Delete(ctx, in, out)
}

func (h *mpMessageRedDotServiceHandler) DeleteById(ctx context.Context, in *MpMessageRedDot, out *Response) error {
	return h.MpMessageRedDotServiceHandler.DeleteById(ctx, in, out)
}

func (h *mpMessageRedDotServiceHandler) DeleteByIds(ctx context.Context, in *MpMessageRedDotBatchDeleteRequest, out *Response) error {
	return h.MpMessageRedDotServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *mpMessageRedDotServiceHandler) Update(ctx context.Context, in *MpMessageRedDot, out *Response) error {
	return h.MpMessageRedDotServiceHandler.Update(ctx, in, out)
}

func (h *mpMessageRedDotServiceHandler) UpdateAll(ctx context.Context, in *MpMessageRedDot, out *Response) error {
	return h.MpMessageRedDotServiceHandler.UpdateAll(ctx, in, out)
}

func (h *mpMessageRedDotServiceHandler) UpdateFields(ctx context.Context, in *MpMessageRedDotUpdateFieldsRequest, out *Response) error {
	return h.MpMessageRedDotServiceHandler.UpdateFields(ctx, in, out)
}

func (h *mpMessageRedDotServiceHandler) FindById(ctx context.Context, in *MpMessageRedDotFilter, out *MpMessageRedDotResponse) error {
	return h.MpMessageRedDotServiceHandler.FindById(ctx, in, out)
}

func (h *mpMessageRedDotServiceHandler) Find(ctx context.Context, in *MpMessageRedDotFilter, out *MpMessageRedDotResponse) error {
	return h.MpMessageRedDotServiceHandler.Find(ctx, in, out)
}

func (h *mpMessageRedDotServiceHandler) Lists(ctx context.Context, in *MpMessageRedDotListRequest, out *MpMessageRedDotResponse) error {
	return h.MpMessageRedDotServiceHandler.Lists(ctx, in, out)
}
