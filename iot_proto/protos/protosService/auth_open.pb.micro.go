// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: auth_open.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpenAuth service

func NewOpenAuthEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OpenAuth service

type OpenAuthService interface {
	// 手机验证码登录
	PhoneCodeLogin(ctx context.Context, in *PhoneCodeLoginRequest, opts ...client.CallOption) (*CloudLoginResponse, error)
	// 邮箱验证码登录
	EmailCodeLogin(ctx context.Context, in *EmailCodeLoginRequest, opts ...client.CallOption) (*CloudLoginResponse, error)
	// 密码登录 (手机密码.用户名密码.邮箱密码)
	PasswordLogin(ctx context.Context, in *PasswordLoginRequest, opts ...client.CallOption) (*CloudLoginResponse, error)
	//退出
	Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error)
	// 验证token是否有效
	VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...client.CallOption) (*CloudVerifyTokenResponse, error)
	// 刷新token
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*CloudRefreshTokenResponse, error)
	// 更换租户
	ChangeTenant(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*CloudRefreshTokenResponse, error)
}

type openAuthService struct {
	c    client.Client
	name string
}

func NewOpenAuthService(name string, c client.Client) OpenAuthService {
	return &openAuthService{
		c:    c,
		name: name,
	}
}

func (c *openAuthService) PhoneCodeLogin(ctx context.Context, in *PhoneCodeLoginRequest, opts ...client.CallOption) (*CloudLoginResponse, error) {
	req := c.c.NewRequest(c.name, "OpenAuth.PhoneCodeLogin", in)
	out := new(CloudLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAuthService) EmailCodeLogin(ctx context.Context, in *EmailCodeLoginRequest, opts ...client.CallOption) (*CloudLoginResponse, error) {
	req := c.c.NewRequest(c.name, "OpenAuth.EmailCodeLogin", in)
	out := new(CloudLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAuthService) PasswordLogin(ctx context.Context, in *PasswordLoginRequest, opts ...client.CallOption) (*CloudLoginResponse, error) {
	req := c.c.NewRequest(c.name, "OpenAuth.PasswordLogin", in)
	out := new(CloudLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAuthService) Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error) {
	req := c.c.NewRequest(c.name, "OpenAuth.Logout", in)
	out := new(LogoutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAuthService) VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...client.CallOption) (*CloudVerifyTokenResponse, error) {
	req := c.c.NewRequest(c.name, "OpenAuth.VerifyToken", in)
	out := new(CloudVerifyTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAuthService) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*CloudRefreshTokenResponse, error) {
	req := c.c.NewRequest(c.name, "OpenAuth.RefreshToken", in)
	out := new(CloudRefreshTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAuthService) ChangeTenant(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*CloudRefreshTokenResponse, error) {
	req := c.c.NewRequest(c.name, "OpenAuth.ChangeTenant", in)
	out := new(CloudRefreshTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpenAuth service

type OpenAuthHandler interface {
	// 手机验证码登录
	PhoneCodeLogin(context.Context, *PhoneCodeLoginRequest, *CloudLoginResponse) error
	// 邮箱验证码登录
	EmailCodeLogin(context.Context, *EmailCodeLoginRequest, *CloudLoginResponse) error
	// 密码登录 (手机密码.用户名密码.邮箱密码)
	PasswordLogin(context.Context, *PasswordLoginRequest, *CloudLoginResponse) error
	//退出
	Logout(context.Context, *LogoutRequest, *LogoutResponse) error
	// 验证token是否有效
	VerifyToken(context.Context, *VerifyTokenRequest, *CloudVerifyTokenResponse) error
	// 刷新token
	RefreshToken(context.Context, *RefreshTokenRequest, *CloudRefreshTokenResponse) error
	// 更换租户
	ChangeTenant(context.Context, *RefreshTokenRequest, *CloudRefreshTokenResponse) error
}

func RegisterOpenAuthHandler(s server.Server, hdlr OpenAuthHandler, opts ...server.HandlerOption) error {
	type openAuth interface {
		PhoneCodeLogin(ctx context.Context, in *PhoneCodeLoginRequest, out *CloudLoginResponse) error
		EmailCodeLogin(ctx context.Context, in *EmailCodeLoginRequest, out *CloudLoginResponse) error
		PasswordLogin(ctx context.Context, in *PasswordLoginRequest, out *CloudLoginResponse) error
		Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error
		VerifyToken(ctx context.Context, in *VerifyTokenRequest, out *CloudVerifyTokenResponse) error
		RefreshToken(ctx context.Context, in *RefreshTokenRequest, out *CloudRefreshTokenResponse) error
		ChangeTenant(ctx context.Context, in *RefreshTokenRequest, out *CloudRefreshTokenResponse) error
	}
	type OpenAuth struct {
		openAuth
	}
	h := &openAuthHandler{hdlr}
	return s.Handle(s.NewHandler(&OpenAuth{h}, opts...))
}

type openAuthHandler struct {
	OpenAuthHandler
}

func (h *openAuthHandler) PhoneCodeLogin(ctx context.Context, in *PhoneCodeLoginRequest, out *CloudLoginResponse) error {
	return h.OpenAuthHandler.PhoneCodeLogin(ctx, in, out)
}

func (h *openAuthHandler) EmailCodeLogin(ctx context.Context, in *EmailCodeLoginRequest, out *CloudLoginResponse) error {
	return h.OpenAuthHandler.EmailCodeLogin(ctx, in, out)
}

func (h *openAuthHandler) PasswordLogin(ctx context.Context, in *PasswordLoginRequest, out *CloudLoginResponse) error {
	return h.OpenAuthHandler.PasswordLogin(ctx, in, out)
}

func (h *openAuthHandler) Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error {
	return h.OpenAuthHandler.Logout(ctx, in, out)
}

func (h *openAuthHandler) VerifyToken(ctx context.Context, in *VerifyTokenRequest, out *CloudVerifyTokenResponse) error {
	return h.OpenAuthHandler.VerifyToken(ctx, in, out)
}

func (h *openAuthHandler) RefreshToken(ctx context.Context, in *RefreshTokenRequest, out *CloudRefreshTokenResponse) error {
	return h.OpenAuthHandler.RefreshToken(ctx, in, out)
}

func (h *openAuthHandler) ChangeTenant(ctx context.Context, in *RefreshTokenRequest, out *CloudRefreshTokenResponse) error {
	return h.OpenAuthHandler.ChangeTenant(ctx, in, out)
}
