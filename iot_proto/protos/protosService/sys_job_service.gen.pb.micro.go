// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sys_job_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SysJobService service

func NewSysJobServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "SysJobService.Create",
			Path:    []string{"/v1/sysJob/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysJobService.Delete",
			Path:    []string{"/v1/sysJob/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysJobService.DeleteById",
			Path:    []string{"/v1/sysJob/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysJobService.DeleteByIds",
			Path:    []string{"/v1/sysJob/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysJobService.Update",
			Path:    []string{"/v1/sysJob/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysJobService.UpdateAll",
			Path:    []string{"/v1/sysJob/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysJobService.UpdateFields",
			Path:    []string{"/v1/sysJob/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysJobService.FindById",
			Path:    []string{"/v1/sysJob/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysJobService.Find",
			Path:    []string{"/v1/sysJob/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysJobService.Lists",
			Path:    []string{"/v1/sysJob/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for SysJobService service

type SysJobService interface {
	//创建
	Create(ctx context.Context, in *SysJob, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *SysJob, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *SysJob, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *SysJobBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *SysJob, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *SysJob, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *SysJobUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *SysJobFilter, opts ...client.CallOption) (*SysJobResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *SysJobFilter, opts ...client.CallOption) (*SysJobResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *SysJobListRequest, opts ...client.CallOption) (*SysJobResponse, error)
}

type sysJobService struct {
	c    client.Client
	name string
}

func NewSysJobService(name string, c client.Client) SysJobService {
	return &sysJobService{
		c:    c,
		name: name,
	}
}

func (c *sysJobService) Create(ctx context.Context, in *SysJob, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysJobService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobService) Delete(ctx context.Context, in *SysJob, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysJobService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobService) DeleteById(ctx context.Context, in *SysJob, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysJobService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobService) DeleteByIds(ctx context.Context, in *SysJobBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysJobService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobService) Update(ctx context.Context, in *SysJob, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysJobService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobService) UpdateAll(ctx context.Context, in *SysJob, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysJobService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobService) UpdateFields(ctx context.Context, in *SysJobUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysJobService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobService) FindById(ctx context.Context, in *SysJobFilter, opts ...client.CallOption) (*SysJobResponse, error) {
	req := c.c.NewRequest(c.name, "SysJobService.FindById", in)
	out := new(SysJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobService) Find(ctx context.Context, in *SysJobFilter, opts ...client.CallOption) (*SysJobResponse, error) {
	req := c.c.NewRequest(c.name, "SysJobService.Find", in)
	out := new(SysJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysJobService) Lists(ctx context.Context, in *SysJobListRequest, opts ...client.CallOption) (*SysJobResponse, error) {
	req := c.c.NewRequest(c.name, "SysJobService.Lists", in)
	out := new(SysJobResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SysJobService service

type SysJobServiceHandler interface {
	//创建
	Create(context.Context, *SysJob, *Response) error
	//匹配多条件删除
	Delete(context.Context, *SysJob, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *SysJob, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *SysJobBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *SysJob, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *SysJob, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *SysJobUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *SysJobFilter, *SysJobResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *SysJobFilter, *SysJobResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *SysJobListRequest, *SysJobResponse) error
}

func RegisterSysJobServiceHandler(s server.Server, hdlr SysJobServiceHandler, opts ...server.HandlerOption) error {
	type sysJobService interface {
		Create(ctx context.Context, in *SysJob, out *Response) error
		Delete(ctx context.Context, in *SysJob, out *Response) error
		DeleteById(ctx context.Context, in *SysJob, out *Response) error
		DeleteByIds(ctx context.Context, in *SysJobBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *SysJob, out *Response) error
		UpdateAll(ctx context.Context, in *SysJob, out *Response) error
		UpdateFields(ctx context.Context, in *SysJobUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *SysJobFilter, out *SysJobResponse) error
		Find(ctx context.Context, in *SysJobFilter, out *SysJobResponse) error
		Lists(ctx context.Context, in *SysJobListRequest, out *SysJobResponse) error
	}
	type SysJobService struct {
		sysJobService
	}
	h := &sysJobServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysJobService.Create",
		Path:    []string{"/v1/sysJob/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysJobService.Delete",
		Path:    []string{"/v1/sysJob/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysJobService.DeleteById",
		Path:    []string{"/v1/sysJob/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysJobService.DeleteByIds",
		Path:    []string{"/v1/sysJob/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysJobService.Update",
		Path:    []string{"/v1/sysJob/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysJobService.UpdateAll",
		Path:    []string{"/v1/sysJob/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysJobService.UpdateFields",
		Path:    []string{"/v1/sysJob/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysJobService.FindById",
		Path:    []string{"/v1/sysJob/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysJobService.Find",
		Path:    []string{"/v1/sysJob/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysJobService.Lists",
		Path:    []string{"/v1/sysJob/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&SysJobService{h}, opts...))
}

type sysJobServiceHandler struct {
	SysJobServiceHandler
}

func (h *sysJobServiceHandler) Create(ctx context.Context, in *SysJob, out *Response) error {
	return h.SysJobServiceHandler.Create(ctx, in, out)
}

func (h *sysJobServiceHandler) Delete(ctx context.Context, in *SysJob, out *Response) error {
	return h.SysJobServiceHandler.Delete(ctx, in, out)
}

func (h *sysJobServiceHandler) DeleteById(ctx context.Context, in *SysJob, out *Response) error {
	return h.SysJobServiceHandler.DeleteById(ctx, in, out)
}

func (h *sysJobServiceHandler) DeleteByIds(ctx context.Context, in *SysJobBatchDeleteRequest, out *Response) error {
	return h.SysJobServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *sysJobServiceHandler) Update(ctx context.Context, in *SysJob, out *Response) error {
	return h.SysJobServiceHandler.Update(ctx, in, out)
}

func (h *sysJobServiceHandler) UpdateAll(ctx context.Context, in *SysJob, out *Response) error {
	return h.SysJobServiceHandler.UpdateAll(ctx, in, out)
}

func (h *sysJobServiceHandler) UpdateFields(ctx context.Context, in *SysJobUpdateFieldsRequest, out *Response) error {
	return h.SysJobServiceHandler.UpdateFields(ctx, in, out)
}

func (h *sysJobServiceHandler) FindById(ctx context.Context, in *SysJobFilter, out *SysJobResponse) error {
	return h.SysJobServiceHandler.FindById(ctx, in, out)
}

func (h *sysJobServiceHandler) Find(ctx context.Context, in *SysJobFilter, out *SysJobResponse) error {
	return h.SysJobServiceHandler.Find(ctx, in, out)
}

func (h *sysJobServiceHandler) Lists(ctx context.Context, in *SysJobListRequest, out *SysJobResponse) error {
	return h.SysJobServiceHandler.Lists(ctx, in, out)
}
