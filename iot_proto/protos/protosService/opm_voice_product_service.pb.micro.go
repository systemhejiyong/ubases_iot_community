// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: opm_voice_product_service.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpmVoiceProductService service

func NewOpmVoiceProductServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpmVoiceProductService.Create",
			Path:    []string{"/v1/opmVoiceProduct/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmVoiceProductService.Delete",
			Path:    []string{"/v1/opmVoiceProduct/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmVoiceProductService.DeleteById",
			Path:    []string{"/v1/opmVoiceProduct/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmVoiceProductService.DeleteByIds",
			Path:    []string{"/v1/opmVoiceProduct/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmVoiceProductService.Update",
			Path:    []string{"/v1/opmVoiceProduct/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmVoiceProductService.UpdateAll",
			Path:    []string{"/v1/opmVoiceProduct/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmVoiceProductService.UpdateFields",
			Path:    []string{"/v1/opmVoiceProduct/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmVoiceProductService.FindById",
			Path:    []string{"/v1/opmVoiceProduct/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmVoiceProductService.Find",
			Path:    []string{"/v1/opmVoiceProduct/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmVoiceProductService.Lists",
			Path:    []string{"/v1/opmVoiceProduct/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmVoiceProductService.Save",
			Path:    []string{"/v1/opmVoiceProduct/save"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmVoiceProductService.GetList",
			Path:    []string{"/v1/opmVoiceProduct/getList"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmVoiceProductService.GetDetail",
			Path:    []string{"/v1/opmVoiceProduct/getDetail"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmVoiceProductService.Publish",
			Path:    []string{"/v1/opmVoiceProduct/publish"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmVoiceProductService.GetVoiceProductFunc",
			Path:    []string{"/v1/opmVoiceProduct/getVoiceProductFunc"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmVoiceProductService.GetDetailList",
			Path:    []string{"/v1/opmVoiceProduct/getDetailList"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpmVoiceProductService service

type OpmVoiceProductService interface {
	//创建
	Create(ctx context.Context, in *OpmVoiceProduct, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpmVoiceProduct, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpmVoiceProduct, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpmVoiceProductBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpmVoiceProduct, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpmVoiceProduct, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpmVoiceProductUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpmVoiceProductFilter, opts ...client.CallOption) (*OpmVoiceProductResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpmVoiceProductFilter, opts ...client.CallOption) (*OpmVoiceProductResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpmVoiceProductListRequest, opts ...client.CallOption) (*OpmVoiceProductResponse, error)
	//保存产品语控配置
	Save(ctx context.Context, in *OpmVoiceProductSaveReq, opts ...client.CallOption) (*OpmVoiceProductSaveRes, error)
	//产品语控配置列表
	GetList(ctx context.Context, in *OpmVoiceProductListReq, opts ...client.CallOption) (*OpmVoiceProductListRes, error)
	//产品语控配置列表
	GetDetail(ctx context.Context, in *OpmVoiceProductDetailReq, opts ...client.CallOption) (*OpmVoiceProductDetailRes, error)
	//产品语控配置列表
	Publish(ctx context.Context, in *OpmVoiceProductPublishReq, opts ...client.CallOption) (*OpmVoiceProductPublishRes, error)
	//获取配置的功能map
	GetVoiceProductFunc(ctx context.Context, in *OpmVoiceProductListReq, opts ...client.CallOption) (*OpmVoiceProductFuncMap, error)
	//产品语控配置列表
	GetDetailList(ctx context.Context, in *OpmVoiceProductDetailReq, opts ...client.CallOption) (*OpmVoiceProductDetailResList, error)
}

type opmVoiceProductService struct {
	c    client.Client
	name string
}

func NewOpmVoiceProductService(name string, c client.Client) OpmVoiceProductService {
	return &opmVoiceProductService{
		c:    c,
		name: name,
	}
}

func (c *opmVoiceProductService) Create(ctx context.Context, in *OpmVoiceProduct, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmVoiceProductService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmVoiceProductService) Delete(ctx context.Context, in *OpmVoiceProduct, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmVoiceProductService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmVoiceProductService) DeleteById(ctx context.Context, in *OpmVoiceProduct, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmVoiceProductService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmVoiceProductService) DeleteByIds(ctx context.Context, in *OpmVoiceProductBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmVoiceProductService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmVoiceProductService) Update(ctx context.Context, in *OpmVoiceProduct, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmVoiceProductService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmVoiceProductService) UpdateAll(ctx context.Context, in *OpmVoiceProduct, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmVoiceProductService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmVoiceProductService) UpdateFields(ctx context.Context, in *OpmVoiceProductUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmVoiceProductService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmVoiceProductService) FindById(ctx context.Context, in *OpmVoiceProductFilter, opts ...client.CallOption) (*OpmVoiceProductResponse, error) {
	req := c.c.NewRequest(c.name, "OpmVoiceProductService.FindById", in)
	out := new(OpmVoiceProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmVoiceProductService) Find(ctx context.Context, in *OpmVoiceProductFilter, opts ...client.CallOption) (*OpmVoiceProductResponse, error) {
	req := c.c.NewRequest(c.name, "OpmVoiceProductService.Find", in)
	out := new(OpmVoiceProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmVoiceProductService) Lists(ctx context.Context, in *OpmVoiceProductListRequest, opts ...client.CallOption) (*OpmVoiceProductResponse, error) {
	req := c.c.NewRequest(c.name, "OpmVoiceProductService.Lists", in)
	out := new(OpmVoiceProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmVoiceProductService) Save(ctx context.Context, in *OpmVoiceProductSaveReq, opts ...client.CallOption) (*OpmVoiceProductSaveRes, error) {
	req := c.c.NewRequest(c.name, "OpmVoiceProductService.Save", in)
	out := new(OpmVoiceProductSaveRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmVoiceProductService) GetList(ctx context.Context, in *OpmVoiceProductListReq, opts ...client.CallOption) (*OpmVoiceProductListRes, error) {
	req := c.c.NewRequest(c.name, "OpmVoiceProductService.GetList", in)
	out := new(OpmVoiceProductListRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmVoiceProductService) GetDetail(ctx context.Context, in *OpmVoiceProductDetailReq, opts ...client.CallOption) (*OpmVoiceProductDetailRes, error) {
	req := c.c.NewRequest(c.name, "OpmVoiceProductService.GetDetail", in)
	out := new(OpmVoiceProductDetailRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmVoiceProductService) Publish(ctx context.Context, in *OpmVoiceProductPublishReq, opts ...client.CallOption) (*OpmVoiceProductPublishRes, error) {
	req := c.c.NewRequest(c.name, "OpmVoiceProductService.Publish", in)
	out := new(OpmVoiceProductPublishRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmVoiceProductService) GetVoiceProductFunc(ctx context.Context, in *OpmVoiceProductListReq, opts ...client.CallOption) (*OpmVoiceProductFuncMap, error) {
	req := c.c.NewRequest(c.name, "OpmVoiceProductService.GetVoiceProductFunc", in)
	out := new(OpmVoiceProductFuncMap)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmVoiceProductService) GetDetailList(ctx context.Context, in *OpmVoiceProductDetailReq, opts ...client.CallOption) (*OpmVoiceProductDetailResList, error) {
	req := c.c.NewRequest(c.name, "OpmVoiceProductService.GetDetailList", in)
	out := new(OpmVoiceProductDetailResList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpmVoiceProductService service

type OpmVoiceProductServiceHandler interface {
	//创建
	Create(context.Context, *OpmVoiceProduct, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpmVoiceProduct, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpmVoiceProduct, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpmVoiceProductBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpmVoiceProduct, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpmVoiceProduct, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpmVoiceProductUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpmVoiceProductFilter, *OpmVoiceProductResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpmVoiceProductFilter, *OpmVoiceProductResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpmVoiceProductListRequest, *OpmVoiceProductResponse) error
	//保存产品语控配置
	Save(context.Context, *OpmVoiceProductSaveReq, *OpmVoiceProductSaveRes) error
	//产品语控配置列表
	GetList(context.Context, *OpmVoiceProductListReq, *OpmVoiceProductListRes) error
	//产品语控配置列表
	GetDetail(context.Context, *OpmVoiceProductDetailReq, *OpmVoiceProductDetailRes) error
	//产品语控配置列表
	Publish(context.Context, *OpmVoiceProductPublishReq, *OpmVoiceProductPublishRes) error
	//获取配置的功能map
	GetVoiceProductFunc(context.Context, *OpmVoiceProductListReq, *OpmVoiceProductFuncMap) error
	//产品语控配置列表
	GetDetailList(context.Context, *OpmVoiceProductDetailReq, *OpmVoiceProductDetailResList) error
}

func RegisterOpmVoiceProductServiceHandler(s server.Server, hdlr OpmVoiceProductServiceHandler, opts ...server.HandlerOption) error {
	type opmVoiceProductService interface {
		Create(ctx context.Context, in *OpmVoiceProduct, out *Response) error
		Delete(ctx context.Context, in *OpmVoiceProduct, out *Response) error
		DeleteById(ctx context.Context, in *OpmVoiceProduct, out *Response) error
		DeleteByIds(ctx context.Context, in *OpmVoiceProductBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpmVoiceProduct, out *Response) error
		UpdateAll(ctx context.Context, in *OpmVoiceProduct, out *Response) error
		UpdateFields(ctx context.Context, in *OpmVoiceProductUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpmVoiceProductFilter, out *OpmVoiceProductResponse) error
		Find(ctx context.Context, in *OpmVoiceProductFilter, out *OpmVoiceProductResponse) error
		Lists(ctx context.Context, in *OpmVoiceProductListRequest, out *OpmVoiceProductResponse) error
		Save(ctx context.Context, in *OpmVoiceProductSaveReq, out *OpmVoiceProductSaveRes) error
		GetList(ctx context.Context, in *OpmVoiceProductListReq, out *OpmVoiceProductListRes) error
		GetDetail(ctx context.Context, in *OpmVoiceProductDetailReq, out *OpmVoiceProductDetailRes) error
		Publish(ctx context.Context, in *OpmVoiceProductPublishReq, out *OpmVoiceProductPublishRes) error
		GetVoiceProductFunc(ctx context.Context, in *OpmVoiceProductListReq, out *OpmVoiceProductFuncMap) error
		GetDetailList(ctx context.Context, in *OpmVoiceProductDetailReq, out *OpmVoiceProductDetailResList) error
	}
	type OpmVoiceProductService struct {
		opmVoiceProductService
	}
	h := &opmVoiceProductServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmVoiceProductService.Create",
		Path:    []string{"/v1/opmVoiceProduct/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmVoiceProductService.Delete",
		Path:    []string{"/v1/opmVoiceProduct/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmVoiceProductService.DeleteById",
		Path:    []string{"/v1/opmVoiceProduct/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmVoiceProductService.DeleteByIds",
		Path:    []string{"/v1/opmVoiceProduct/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmVoiceProductService.Update",
		Path:    []string{"/v1/opmVoiceProduct/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmVoiceProductService.UpdateAll",
		Path:    []string{"/v1/opmVoiceProduct/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmVoiceProductService.UpdateFields",
		Path:    []string{"/v1/opmVoiceProduct/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmVoiceProductService.FindById",
		Path:    []string{"/v1/opmVoiceProduct/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmVoiceProductService.Find",
		Path:    []string{"/v1/opmVoiceProduct/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmVoiceProductService.Lists",
		Path:    []string{"/v1/opmVoiceProduct/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmVoiceProductService.Save",
		Path:    []string{"/v1/opmVoiceProduct/save"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmVoiceProductService.GetList",
		Path:    []string{"/v1/opmVoiceProduct/getList"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmVoiceProductService.GetDetail",
		Path:    []string{"/v1/opmVoiceProduct/getDetail"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmVoiceProductService.Publish",
		Path:    []string{"/v1/opmVoiceProduct/publish"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmVoiceProductService.GetVoiceProductFunc",
		Path:    []string{"/v1/opmVoiceProduct/getVoiceProductFunc"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmVoiceProductService.GetDetailList",
		Path:    []string{"/v1/opmVoiceProduct/getDetailList"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpmVoiceProductService{h}, opts...))
}

type opmVoiceProductServiceHandler struct {
	OpmVoiceProductServiceHandler
}

func (h *opmVoiceProductServiceHandler) Create(ctx context.Context, in *OpmVoiceProduct, out *Response) error {
	return h.OpmVoiceProductServiceHandler.Create(ctx, in, out)
}

func (h *opmVoiceProductServiceHandler) Delete(ctx context.Context, in *OpmVoiceProduct, out *Response) error {
	return h.OpmVoiceProductServiceHandler.Delete(ctx, in, out)
}

func (h *opmVoiceProductServiceHandler) DeleteById(ctx context.Context, in *OpmVoiceProduct, out *Response) error {
	return h.OpmVoiceProductServiceHandler.DeleteById(ctx, in, out)
}

func (h *opmVoiceProductServiceHandler) DeleteByIds(ctx context.Context, in *OpmVoiceProductBatchDeleteRequest, out *Response) error {
	return h.OpmVoiceProductServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *opmVoiceProductServiceHandler) Update(ctx context.Context, in *OpmVoiceProduct, out *Response) error {
	return h.OpmVoiceProductServiceHandler.Update(ctx, in, out)
}

func (h *opmVoiceProductServiceHandler) UpdateAll(ctx context.Context, in *OpmVoiceProduct, out *Response) error {
	return h.OpmVoiceProductServiceHandler.UpdateAll(ctx, in, out)
}

func (h *opmVoiceProductServiceHandler) UpdateFields(ctx context.Context, in *OpmVoiceProductUpdateFieldsRequest, out *Response) error {
	return h.OpmVoiceProductServiceHandler.UpdateFields(ctx, in, out)
}

func (h *opmVoiceProductServiceHandler) FindById(ctx context.Context, in *OpmVoiceProductFilter, out *OpmVoiceProductResponse) error {
	return h.OpmVoiceProductServiceHandler.FindById(ctx, in, out)
}

func (h *opmVoiceProductServiceHandler) Find(ctx context.Context, in *OpmVoiceProductFilter, out *OpmVoiceProductResponse) error {
	return h.OpmVoiceProductServiceHandler.Find(ctx, in, out)
}

func (h *opmVoiceProductServiceHandler) Lists(ctx context.Context, in *OpmVoiceProductListRequest, out *OpmVoiceProductResponse) error {
	return h.OpmVoiceProductServiceHandler.Lists(ctx, in, out)
}

func (h *opmVoiceProductServiceHandler) Save(ctx context.Context, in *OpmVoiceProductSaveReq, out *OpmVoiceProductSaveRes) error {
	return h.OpmVoiceProductServiceHandler.Save(ctx, in, out)
}

func (h *opmVoiceProductServiceHandler) GetList(ctx context.Context, in *OpmVoiceProductListReq, out *OpmVoiceProductListRes) error {
	return h.OpmVoiceProductServiceHandler.GetList(ctx, in, out)
}

func (h *opmVoiceProductServiceHandler) GetDetail(ctx context.Context, in *OpmVoiceProductDetailReq, out *OpmVoiceProductDetailRes) error {
	return h.OpmVoiceProductServiceHandler.GetDetail(ctx, in, out)
}

func (h *opmVoiceProductServiceHandler) Publish(ctx context.Context, in *OpmVoiceProductPublishReq, out *OpmVoiceProductPublishRes) error {
	return h.OpmVoiceProductServiceHandler.Publish(ctx, in, out)
}

func (h *opmVoiceProductServiceHandler) GetVoiceProductFunc(ctx context.Context, in *OpmVoiceProductListReq, out *OpmVoiceProductFuncMap) error {
	return h.OpmVoiceProductServiceHandler.GetVoiceProductFunc(ctx, in, out)
}

func (h *opmVoiceProductServiceHandler) GetDetailList(ctx context.Context, in *OpmVoiceProductDetailReq, out *OpmVoiceProductDetailResList) error {
	return h.OpmVoiceProductServiceHandler.GetDetailList(ctx, in, out)
}
