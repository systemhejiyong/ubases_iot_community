// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: uc_home_user_service.gen.proto

package protosService

import (
	fmt "fmt"
	math "math"

	proto "google.golang.org/protobuf/proto"

	context "context"

	api "go-micro.dev/v4/api"

	client "go-micro.dev/v4/client"

	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UcHomeUserService service

func NewUcHomeUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "UcHomeUserService.Create",
			Path:    []string{"/v1/ucHomeUser/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeUserService.Delete",
			Path:    []string{"/v1/ucHomeUser/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeUserService.DeleteById",
			Path:    []string{"/v1/ucHomeUser/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeUserService.DeleteByIds",
			Path:    []string{"/v1/ucHomeUser/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeUserService.Update",
			Path:    []string{"/v1/ucHomeUser/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeUserService.UpdateAll",
			Path:    []string{"/v1/ucHomeUser/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeUserService.UpdateFields",
			Path:    []string{"/v1/ucHomeUser/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeUserService.FindById",
			Path:    []string{"/v1/ucHomeUser/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeUserService.Find",
			Path:    []string{"/v1/ucHomeUser/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeUserService.Lists",
			Path:    []string{"/v1/ucHomeUser/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeUserService.GetUsersByHomeId",
			Path:    []string{"/v1/ucHomeUser/getUsersByHomeId"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeUserService.HomeUserLists",
			Path:    []string{"/v1/ucHomeUser/homeUserList"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for UcHomeUserService service

type UcHomeUserService interface {
	//创建
	Create(ctx context.Context, in *UcHomeUser, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *UcHomeUser, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *UcHomeUser, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *UcHomeUserBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *UcHomeUser, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *UcHomeUser, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *UcHomeUserUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *UcHomeUserFilter, opts ...client.CallOption) (*UcHomeUserResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *UcHomeUserFilter, opts ...client.CallOption) (*UcHomeUserResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *UcHomeUserListRequest, opts ...client.CallOption) (*UcHomeUserResponse, error)
	//通过家庭编号获取家庭下的成员
	GetUsersByHomeId(ctx context.Context, in *UcHomeUserPrimarykey, opts ...client.CallOption) (*UcHomeUsersResponse, error)
	//获取家庭用户列表（关联用户数据）
	HomeUserLists(ctx context.Context, in *UcHomeUserFilter, opts ...client.CallOption) (*UcHomeUserResponse, error)
}

type ucHomeUserService struct {
	c    client.Client
	name string
}

func NewUcHomeUserService(name string, c client.Client) UcHomeUserService {
	return &ucHomeUserService{
		c:    c,
		name: name,
	}
}

func (c *ucHomeUserService) Create(ctx context.Context, in *UcHomeUser, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcHomeUserService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeUserService) Delete(ctx context.Context, in *UcHomeUser, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcHomeUserService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeUserService) DeleteById(ctx context.Context, in *UcHomeUser, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcHomeUserService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeUserService) DeleteByIds(ctx context.Context, in *UcHomeUserBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcHomeUserService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeUserService) Update(ctx context.Context, in *UcHomeUser, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcHomeUserService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeUserService) UpdateAll(ctx context.Context, in *UcHomeUser, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcHomeUserService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeUserService) UpdateFields(ctx context.Context, in *UcHomeUserUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcHomeUserService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeUserService) FindById(ctx context.Context, in *UcHomeUserFilter, opts ...client.CallOption) (*UcHomeUserResponse, error) {
	req := c.c.NewRequest(c.name, "UcHomeUserService.FindById", in)
	out := new(UcHomeUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeUserService) Find(ctx context.Context, in *UcHomeUserFilter, opts ...client.CallOption) (*UcHomeUserResponse, error) {
	req := c.c.NewRequest(c.name, "UcHomeUserService.Find", in)
	out := new(UcHomeUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeUserService) Lists(ctx context.Context, in *UcHomeUserListRequest, opts ...client.CallOption) (*UcHomeUserResponse, error) {
	req := c.c.NewRequest(c.name, "UcHomeUserService.Lists", in)
	out := new(UcHomeUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeUserService) GetUsersByHomeId(ctx context.Context, in *UcHomeUserPrimarykey, opts ...client.CallOption) (*UcHomeUsersResponse, error) {
	req := c.c.NewRequest(c.name, "UcHomeUserService.GetUsersByHomeId", in)
	out := new(UcHomeUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeUserService) HomeUserLists(ctx context.Context, in *UcHomeUserFilter, opts ...client.CallOption) (*UcHomeUserResponse, error) {
	req := c.c.NewRequest(c.name, "UcHomeUserService.HomeUserLists", in)
	out := new(UcHomeUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UcHomeUserService service

type UcHomeUserServiceHandler interface {
	//创建
	Create(context.Context, *UcHomeUser, *Response) error
	//匹配多条件删除
	Delete(context.Context, *UcHomeUser, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *UcHomeUser, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *UcHomeUserBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *UcHomeUser, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *UcHomeUser, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *UcHomeUserUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *UcHomeUserFilter, *UcHomeUserResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *UcHomeUserFilter, *UcHomeUserResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *UcHomeUserListRequest, *UcHomeUserResponse) error
	//通过家庭编号获取家庭下的成员
	GetUsersByHomeId(context.Context, *UcHomeUserPrimarykey, *UcHomeUsersResponse) error
	//获取家庭用户列表（关联用户数据）
	HomeUserLists(context.Context, *UcHomeUserFilter, *UcHomeUserResponse) error
}

func RegisterUcHomeUserServiceHandler(s server.Server, hdlr UcHomeUserServiceHandler, opts ...server.HandlerOption) error {
	type ucHomeUserService interface {
		Create(ctx context.Context, in *UcHomeUser, out *Response) error
		Delete(ctx context.Context, in *UcHomeUser, out *Response) error
		DeleteById(ctx context.Context, in *UcHomeUser, out *Response) error
		DeleteByIds(ctx context.Context, in *UcHomeUserBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *UcHomeUser, out *Response) error
		UpdateAll(ctx context.Context, in *UcHomeUser, out *Response) error
		UpdateFields(ctx context.Context, in *UcHomeUserUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *UcHomeUserFilter, out *UcHomeUserResponse) error
		Find(ctx context.Context, in *UcHomeUserFilter, out *UcHomeUserResponse) error
		Lists(ctx context.Context, in *UcHomeUserListRequest, out *UcHomeUserResponse) error
		GetUsersByHomeId(ctx context.Context, in *UcHomeUserPrimarykey, out *UcHomeUsersResponse) error
		HomeUserLists(ctx context.Context, in *UcHomeUserFilter, out *UcHomeUserResponse) error
	}
	type UcHomeUserService struct {
		ucHomeUserService
	}
	h := &ucHomeUserServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeUserService.Create",
		Path:    []string{"/v1/ucHomeUser/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeUserService.Delete",
		Path:    []string{"/v1/ucHomeUser/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeUserService.DeleteById",
		Path:    []string{"/v1/ucHomeUser/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeUserService.DeleteByIds",
		Path:    []string{"/v1/ucHomeUser/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeUserService.Update",
		Path:    []string{"/v1/ucHomeUser/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeUserService.UpdateAll",
		Path:    []string{"/v1/ucHomeUser/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeUserService.UpdateFields",
		Path:    []string{"/v1/ucHomeUser/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeUserService.FindById",
		Path:    []string{"/v1/ucHomeUser/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeUserService.Find",
		Path:    []string{"/v1/ucHomeUser/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeUserService.Lists",
		Path:    []string{"/v1/ucHomeUser/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeUserService.GetUsersByHomeId",
		Path:    []string{"/v1/ucHomeUser/getUsersByHomeId"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeUserService.HomeUserLists",
		Path:    []string{"/v1/ucHomeUser/homeUserList"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&UcHomeUserService{h}, opts...))
}

type ucHomeUserServiceHandler struct {
	UcHomeUserServiceHandler
}

func (h *ucHomeUserServiceHandler) Create(ctx context.Context, in *UcHomeUser, out *Response) error {
	return h.UcHomeUserServiceHandler.Create(ctx, in, out)
}

func (h *ucHomeUserServiceHandler) Delete(ctx context.Context, in *UcHomeUser, out *Response) error {
	return h.UcHomeUserServiceHandler.Delete(ctx, in, out)
}

func (h *ucHomeUserServiceHandler) DeleteById(ctx context.Context, in *UcHomeUser, out *Response) error {
	return h.UcHomeUserServiceHandler.DeleteById(ctx, in, out)
}

func (h *ucHomeUserServiceHandler) DeleteByIds(ctx context.Context, in *UcHomeUserBatchDeleteRequest, out *Response) error {
	return h.UcHomeUserServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *ucHomeUserServiceHandler) Update(ctx context.Context, in *UcHomeUser, out *Response) error {
	return h.UcHomeUserServiceHandler.Update(ctx, in, out)
}

func (h *ucHomeUserServiceHandler) UpdateAll(ctx context.Context, in *UcHomeUser, out *Response) error {
	return h.UcHomeUserServiceHandler.UpdateAll(ctx, in, out)
}

func (h *ucHomeUserServiceHandler) UpdateFields(ctx context.Context, in *UcHomeUserUpdateFieldsRequest, out *Response) error {
	return h.UcHomeUserServiceHandler.UpdateFields(ctx, in, out)
}

func (h *ucHomeUserServiceHandler) FindById(ctx context.Context, in *UcHomeUserFilter, out *UcHomeUserResponse) error {
	return h.UcHomeUserServiceHandler.FindById(ctx, in, out)
}

func (h *ucHomeUserServiceHandler) Find(ctx context.Context, in *UcHomeUserFilter, out *UcHomeUserResponse) error {
	return h.UcHomeUserServiceHandler.Find(ctx, in, out)
}

func (h *ucHomeUserServiceHandler) Lists(ctx context.Context, in *UcHomeUserListRequest, out *UcHomeUserResponse) error {
	return h.UcHomeUserServiceHandler.Lists(ctx, in, out)
}

func (h *ucHomeUserServiceHandler) GetUsersByHomeId(ctx context.Context, in *UcHomeUserPrimarykey, out *UcHomeUsersResponse) error {
	return h.UcHomeUserServiceHandler.GetUsersByHomeId(ctx, in, out)
}

func (h *ucHomeUserServiceHandler) HomeUserLists(ctx context.Context, in *UcHomeUserFilter, out *UcHomeUserResponse) error {
	return h.UcHomeUserServiceHandler.HomeUserLists(ctx, in, out)
}
