// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sys_dict_type_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SysDictTypeService service

func NewSysDictTypeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "SysDictTypeService.Create",
			Path:    []string{"/v1/sysDictType/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysDictTypeService.Delete",
			Path:    []string{"/v1/sysDictType/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysDictTypeService.DeleteById",
			Path:    []string{"/v1/sysDictType/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysDictTypeService.DeleteByIds",
			Path:    []string{"/v1/sysDictType/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysDictTypeService.Update",
			Path:    []string{"/v1/sysDictType/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysDictTypeService.UpdateAll",
			Path:    []string{"/v1/sysDictType/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysDictTypeService.UpdateFields",
			Path:    []string{"/v1/sysDictType/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysDictTypeService.FindById",
			Path:    []string{"/v1/sysDictType/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysDictTypeService.Find",
			Path:    []string{"/v1/sysDictType/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SysDictTypeService.Lists",
			Path:    []string{"/v1/sysDictType/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for SysDictTypeService service

type SysDictTypeService interface {
	//创建
	Create(ctx context.Context, in *SysDictType, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *SysDictType, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *SysDictType, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *SysDictTypeBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *SysDictType, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *SysDictType, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *SysDictTypeUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *SysDictTypeFilter, opts ...client.CallOption) (*SysDictTypeResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *SysDictTypeFilter, opts ...client.CallOption) (*SysDictTypeResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *SysDictTypeListRequest, opts ...client.CallOption) (*SysDictTypeResponse, error)
}

type sysDictTypeService struct {
	c    client.Client
	name string
}

func NewSysDictTypeService(name string, c client.Client) SysDictTypeService {
	return &sysDictTypeService{
		c:    c,
		name: name,
	}
}

func (c *sysDictTypeService) Create(ctx context.Context, in *SysDictType, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysDictTypeService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictTypeService) Delete(ctx context.Context, in *SysDictType, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysDictTypeService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictTypeService) DeleteById(ctx context.Context, in *SysDictType, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysDictTypeService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictTypeService) DeleteByIds(ctx context.Context, in *SysDictTypeBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysDictTypeService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictTypeService) Update(ctx context.Context, in *SysDictType, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysDictTypeService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictTypeService) UpdateAll(ctx context.Context, in *SysDictType, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysDictTypeService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictTypeService) UpdateFields(ctx context.Context, in *SysDictTypeUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SysDictTypeService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictTypeService) FindById(ctx context.Context, in *SysDictTypeFilter, opts ...client.CallOption) (*SysDictTypeResponse, error) {
	req := c.c.NewRequest(c.name, "SysDictTypeService.FindById", in)
	out := new(SysDictTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictTypeService) Find(ctx context.Context, in *SysDictTypeFilter, opts ...client.CallOption) (*SysDictTypeResponse, error) {
	req := c.c.NewRequest(c.name, "SysDictTypeService.Find", in)
	out := new(SysDictTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysDictTypeService) Lists(ctx context.Context, in *SysDictTypeListRequest, opts ...client.CallOption) (*SysDictTypeResponse, error) {
	req := c.c.NewRequest(c.name, "SysDictTypeService.Lists", in)
	out := new(SysDictTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SysDictTypeService service

type SysDictTypeServiceHandler interface {
	//创建
	Create(context.Context, *SysDictType, *Response) error
	//匹配多条件删除
	Delete(context.Context, *SysDictType, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *SysDictType, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *SysDictTypeBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *SysDictType, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *SysDictType, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *SysDictTypeUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *SysDictTypeFilter, *SysDictTypeResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *SysDictTypeFilter, *SysDictTypeResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *SysDictTypeListRequest, *SysDictTypeResponse) error
}

func RegisterSysDictTypeServiceHandler(s server.Server, hdlr SysDictTypeServiceHandler, opts ...server.HandlerOption) error {
	type sysDictTypeService interface {
		Create(ctx context.Context, in *SysDictType, out *Response) error
		Delete(ctx context.Context, in *SysDictType, out *Response) error
		DeleteById(ctx context.Context, in *SysDictType, out *Response) error
		DeleteByIds(ctx context.Context, in *SysDictTypeBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *SysDictType, out *Response) error
		UpdateAll(ctx context.Context, in *SysDictType, out *Response) error
		UpdateFields(ctx context.Context, in *SysDictTypeUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *SysDictTypeFilter, out *SysDictTypeResponse) error
		Find(ctx context.Context, in *SysDictTypeFilter, out *SysDictTypeResponse) error
		Lists(ctx context.Context, in *SysDictTypeListRequest, out *SysDictTypeResponse) error
	}
	type SysDictTypeService struct {
		sysDictTypeService
	}
	h := &sysDictTypeServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysDictTypeService.Create",
		Path:    []string{"/v1/sysDictType/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysDictTypeService.Delete",
		Path:    []string{"/v1/sysDictType/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysDictTypeService.DeleteById",
		Path:    []string{"/v1/sysDictType/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysDictTypeService.DeleteByIds",
		Path:    []string{"/v1/sysDictType/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysDictTypeService.Update",
		Path:    []string{"/v1/sysDictType/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysDictTypeService.UpdateAll",
		Path:    []string{"/v1/sysDictType/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysDictTypeService.UpdateFields",
		Path:    []string{"/v1/sysDictType/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysDictTypeService.FindById",
		Path:    []string{"/v1/sysDictType/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysDictTypeService.Find",
		Path:    []string{"/v1/sysDictType/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SysDictTypeService.Lists",
		Path:    []string{"/v1/sysDictType/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&SysDictTypeService{h}, opts...))
}

type sysDictTypeServiceHandler struct {
	SysDictTypeServiceHandler
}

func (h *sysDictTypeServiceHandler) Create(ctx context.Context, in *SysDictType, out *Response) error {
	return h.SysDictTypeServiceHandler.Create(ctx, in, out)
}

func (h *sysDictTypeServiceHandler) Delete(ctx context.Context, in *SysDictType, out *Response) error {
	return h.SysDictTypeServiceHandler.Delete(ctx, in, out)
}

func (h *sysDictTypeServiceHandler) DeleteById(ctx context.Context, in *SysDictType, out *Response) error {
	return h.SysDictTypeServiceHandler.DeleteById(ctx, in, out)
}

func (h *sysDictTypeServiceHandler) DeleteByIds(ctx context.Context, in *SysDictTypeBatchDeleteRequest, out *Response) error {
	return h.SysDictTypeServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *sysDictTypeServiceHandler) Update(ctx context.Context, in *SysDictType, out *Response) error {
	return h.SysDictTypeServiceHandler.Update(ctx, in, out)
}

func (h *sysDictTypeServiceHandler) UpdateAll(ctx context.Context, in *SysDictType, out *Response) error {
	return h.SysDictTypeServiceHandler.UpdateAll(ctx, in, out)
}

func (h *sysDictTypeServiceHandler) UpdateFields(ctx context.Context, in *SysDictTypeUpdateFieldsRequest, out *Response) error {
	return h.SysDictTypeServiceHandler.UpdateFields(ctx, in, out)
}

func (h *sysDictTypeServiceHandler) FindById(ctx context.Context, in *SysDictTypeFilter, out *SysDictTypeResponse) error {
	return h.SysDictTypeServiceHandler.FindById(ctx, in, out)
}

func (h *sysDictTypeServiceHandler) Find(ctx context.Context, in *SysDictTypeFilter, out *SysDictTypeResponse) error {
	return h.SysDictTypeServiceHandler.Find(ctx, in, out)
}

func (h *sysDictTypeServiceHandler) Lists(ctx context.Context, in *SysDictTypeListRequest, out *SysDictTypeResponse) error {
	return h.SysDictTypeServiceHandler.Lists(ctx, in, out)
}
