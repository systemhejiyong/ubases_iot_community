// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: casbin.ext.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CasbinExtService service

func NewCasbinExtServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CasbinExtService service

type CasbinExtService interface {
	AddUserRole(ctx context.Context, in *CasbinReq, opts ...client.CallOption) (*CasbinResponse, error)
	DeleteUserRole(ctx context.Context, in *CasbinReq, opts ...client.CallOption) (*CasbinResponse, error)
	AddRoleMenu(ctx context.Context, in *CasbinReq, opts ...client.CallOption) (*CasbinResponse, error)
	DeleteRoleMenu(ctx context.Context, in *CasbinReq, opts ...client.CallOption) (*CasbinResponse, error)
	GetUserRole(ctx context.Context, in *UserRoleExtReq, opts ...client.CallOption) (*UserRoleExtResp, error)
	GetRoleUser(ctx context.Context, in *RoleUserExtReq, opts ...client.CallOption) (*UserRoleExtResp, error)
	GetPermissionsByRoleIds(ctx context.Context, in *PermissionsByRoleIdReq, opts ...client.CallOption) (*PermissionsByRoleIdResp, error)
	GetRoleMenuList(ctx context.Context, in *CasbinRoleMenuReq, opts ...client.CallOption) (*CasbinRoleMenuRes, error)
	DeleteAllRoleMenuById(ctx context.Context, in *CasbinReq, opts ...client.CallOption) (*CasbinResponse, error)
}

type casbinExtService struct {
	c    client.Client
	name string
}

func NewCasbinExtService(name string, c client.Client) CasbinExtService {
	return &casbinExtService{
		c:    c,
		name: name,
	}
}

func (c *casbinExtService) AddUserRole(ctx context.Context, in *CasbinReq, opts ...client.CallOption) (*CasbinResponse, error) {
	req := c.c.NewRequest(c.name, "CasbinExtService.AddUserRole", in)
	out := new(CasbinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinExtService) DeleteUserRole(ctx context.Context, in *CasbinReq, opts ...client.CallOption) (*CasbinResponse, error) {
	req := c.c.NewRequest(c.name, "CasbinExtService.DeleteUserRole", in)
	out := new(CasbinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinExtService) AddRoleMenu(ctx context.Context, in *CasbinReq, opts ...client.CallOption) (*CasbinResponse, error) {
	req := c.c.NewRequest(c.name, "CasbinExtService.AddRoleMenu", in)
	out := new(CasbinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinExtService) DeleteRoleMenu(ctx context.Context, in *CasbinReq, opts ...client.CallOption) (*CasbinResponse, error) {
	req := c.c.NewRequest(c.name, "CasbinExtService.DeleteRoleMenu", in)
	out := new(CasbinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinExtService) GetUserRole(ctx context.Context, in *UserRoleExtReq, opts ...client.CallOption) (*UserRoleExtResp, error) {
	req := c.c.NewRequest(c.name, "CasbinExtService.GetUserRole", in)
	out := new(UserRoleExtResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinExtService) GetRoleUser(ctx context.Context, in *RoleUserExtReq, opts ...client.CallOption) (*UserRoleExtResp, error) {
	req := c.c.NewRequest(c.name, "CasbinExtService.GetRoleUser", in)
	out := new(UserRoleExtResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinExtService) GetPermissionsByRoleIds(ctx context.Context, in *PermissionsByRoleIdReq, opts ...client.CallOption) (*PermissionsByRoleIdResp, error) {
	req := c.c.NewRequest(c.name, "CasbinExtService.GetPermissionsByRoleIds", in)
	out := new(PermissionsByRoleIdResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinExtService) GetRoleMenuList(ctx context.Context, in *CasbinRoleMenuReq, opts ...client.CallOption) (*CasbinRoleMenuRes, error) {
	req := c.c.NewRequest(c.name, "CasbinExtService.GetRoleMenuList", in)
	out := new(CasbinRoleMenuRes)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinExtService) DeleteAllRoleMenuById(ctx context.Context, in *CasbinReq, opts ...client.CallOption) (*CasbinResponse, error) {
	req := c.c.NewRequest(c.name, "CasbinExtService.DeleteAllRoleMenuById", in)
	out := new(CasbinResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CasbinExtService service

type CasbinExtServiceHandler interface {
	AddUserRole(context.Context, *CasbinReq, *CasbinResponse) error
	DeleteUserRole(context.Context, *CasbinReq, *CasbinResponse) error
	AddRoleMenu(context.Context, *CasbinReq, *CasbinResponse) error
	DeleteRoleMenu(context.Context, *CasbinReq, *CasbinResponse) error
	GetUserRole(context.Context, *UserRoleExtReq, *UserRoleExtResp) error
	GetRoleUser(context.Context, *RoleUserExtReq, *UserRoleExtResp) error
	GetPermissionsByRoleIds(context.Context, *PermissionsByRoleIdReq, *PermissionsByRoleIdResp) error
	GetRoleMenuList(context.Context, *CasbinRoleMenuReq, *CasbinRoleMenuRes) error
	DeleteAllRoleMenuById(context.Context, *CasbinReq, *CasbinResponse) error
}

func RegisterCasbinExtServiceHandler(s server.Server, hdlr CasbinExtServiceHandler, opts ...server.HandlerOption) error {
	type casbinExtService interface {
		AddUserRole(ctx context.Context, in *CasbinReq, out *CasbinResponse) error
		DeleteUserRole(ctx context.Context, in *CasbinReq, out *CasbinResponse) error
		AddRoleMenu(ctx context.Context, in *CasbinReq, out *CasbinResponse) error
		DeleteRoleMenu(ctx context.Context, in *CasbinReq, out *CasbinResponse) error
		GetUserRole(ctx context.Context, in *UserRoleExtReq, out *UserRoleExtResp) error
		GetRoleUser(ctx context.Context, in *RoleUserExtReq, out *UserRoleExtResp) error
		GetPermissionsByRoleIds(ctx context.Context, in *PermissionsByRoleIdReq, out *PermissionsByRoleIdResp) error
		GetRoleMenuList(ctx context.Context, in *CasbinRoleMenuReq, out *CasbinRoleMenuRes) error
		DeleteAllRoleMenuById(ctx context.Context, in *CasbinReq, out *CasbinResponse) error
	}
	type CasbinExtService struct {
		casbinExtService
	}
	h := &casbinExtServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CasbinExtService{h}, opts...))
}

type casbinExtServiceHandler struct {
	CasbinExtServiceHandler
}

func (h *casbinExtServiceHandler) AddUserRole(ctx context.Context, in *CasbinReq, out *CasbinResponse) error {
	return h.CasbinExtServiceHandler.AddUserRole(ctx, in, out)
}

func (h *casbinExtServiceHandler) DeleteUserRole(ctx context.Context, in *CasbinReq, out *CasbinResponse) error {
	return h.CasbinExtServiceHandler.DeleteUserRole(ctx, in, out)
}

func (h *casbinExtServiceHandler) AddRoleMenu(ctx context.Context, in *CasbinReq, out *CasbinResponse) error {
	return h.CasbinExtServiceHandler.AddRoleMenu(ctx, in, out)
}

func (h *casbinExtServiceHandler) DeleteRoleMenu(ctx context.Context, in *CasbinReq, out *CasbinResponse) error {
	return h.CasbinExtServiceHandler.DeleteRoleMenu(ctx, in, out)
}

func (h *casbinExtServiceHandler) GetUserRole(ctx context.Context, in *UserRoleExtReq, out *UserRoleExtResp) error {
	return h.CasbinExtServiceHandler.GetUserRole(ctx, in, out)
}

func (h *casbinExtServiceHandler) GetRoleUser(ctx context.Context, in *RoleUserExtReq, out *UserRoleExtResp) error {
	return h.CasbinExtServiceHandler.GetRoleUser(ctx, in, out)
}

func (h *casbinExtServiceHandler) GetPermissionsByRoleIds(ctx context.Context, in *PermissionsByRoleIdReq, out *PermissionsByRoleIdResp) error {
	return h.CasbinExtServiceHandler.GetPermissionsByRoleIds(ctx, in, out)
}

func (h *casbinExtServiceHandler) GetRoleMenuList(ctx context.Context, in *CasbinRoleMenuReq, out *CasbinRoleMenuRes) error {
	return h.CasbinExtServiceHandler.GetRoleMenuList(ctx, in, out)
}

func (h *casbinExtServiceHandler) DeleteAllRoleMenuById(ctx context.Context, in *CasbinReq, out *CasbinResponse) error {
	return h.CasbinExtServiceHandler.DeleteAllRoleMenuById(ctx, in, out)
}
