// Code generated by sgen,2023-10-11 16:24:25. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: opm_panel_font_config_model.gen.proto

package protosService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//来源于数据表
type OpmPanelFontConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:;comment:;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"panelId" gorm:"default:面板ID;comment:面板ID;size:19;"
	PanelId int64 `protobuf:"varint,101,opt,name=panelId,proto3" json:"panelId,omitempty"`
	// @inject_tag: json:"fontId" gorm:"default:字体文件;comment:字体文件;size:19;"
	FontId int64 `protobuf:"varint,102,opt,name=fontId,proto3" json:"fontId,omitempty"`
	// @inject_tag: json:"variableName" gorm:"default:字体变量名;comment:字体变量名;size:64;"
	VariableName string `protobuf:"bytes,103,opt,name=variableName,proto3" json:"variableName,omitempty"`
	// @inject_tag: json:"bpp" gorm:"default:内置资源这里是空字符串;comment:内置资源这里是空字符串;size:10;"
	Bpp int32 `protobuf:"varint,104,opt,name=bpp,proto3" json:"bpp,omitempty"`
	// @inject_tag: json:"unicodeRange" gorm:"default:unicode范围;comment:unicode范围;size:256;"
	UnicodeRange string `protobuf:"bytes,105,opt,name=unicodeRange,proto3" json:"unicodeRange,omitempty"`
	// @inject_tag: json:"symbols" gorm:"default:文字或符号;comment:文字或符号;"
	Symbols string `protobuf:"bytes,106,opt,name=symbols,proto3" json:"symbols,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:19;"
	CreatedBy int64 `protobuf:"varint,107,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,108,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *OpmPanelFontConfig) Reset() {
	*x = OpmPanelFontConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_font_config_model_gen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelFontConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelFontConfig) ProtoMessage() {}

func (x *OpmPanelFontConfig) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_font_config_model_gen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelFontConfig.ProtoReflect.Descriptor instead.
func (*OpmPanelFontConfig) Descriptor() ([]byte, []int) {
	return file_opm_panel_font_config_model_gen_proto_rawDescGZIP(), []int{0}
}

func (x *OpmPanelFontConfig) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpmPanelFontConfig) GetPanelId() int64 {
	if x != nil {
		return x.PanelId
	}
	return 0
}

func (x *OpmPanelFontConfig) GetFontId() int64 {
	if x != nil {
		return x.FontId
	}
	return 0
}

func (x *OpmPanelFontConfig) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *OpmPanelFontConfig) GetBpp() int32 {
	if x != nil {
		return x.Bpp
	}
	return 0
}

func (x *OpmPanelFontConfig) GetUnicodeRange() string {
	if x != nil {
		return x.UnicodeRange
	}
	return ""
}

func (x *OpmPanelFontConfig) GetSymbols() string {
	if x != nil {
		return x.Symbols
	}
	return ""
}

func (x *OpmPanelFontConfig) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *OpmPanelFontConfig) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type OpmPanelFontConfigFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:;comment:;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"panelId" gorm:"default:面板ID;comment:面板ID;size:19;"
	PanelId int64 `protobuf:"varint,101,opt,name=panelId,proto3" json:"panelId,omitempty"`
	// @inject_tag: json:"fontId" gorm:"default:字体文件;comment:字体文件;size:19;"
	FontId int64 `protobuf:"varint,102,opt,name=fontId,proto3" json:"fontId,omitempty"`
	// @inject_tag: json:"variableName" gorm:"default:字体变量名;comment:字体变量名;size:64;"
	VariableName string `protobuf:"bytes,103,opt,name=variableName,proto3" json:"variableName,omitempty"`
	// @inject_tag: json:"bpp" gorm:"default:内置资源这里是空字符串;comment:内置资源这里是空字符串;size:10;"
	Bpp int32 `protobuf:"varint,104,opt,name=bpp,proto3" json:"bpp,omitempty"`
	// @inject_tag: json:"unicodeRange" gorm:"default:unicode范围;comment:unicode范围;size:256;"
	UnicodeRange string `protobuf:"bytes,105,opt,name=unicodeRange,proto3" json:"unicodeRange,omitempty"`
	// @inject_tag: json:"symbols" gorm:"default:文字或符号;comment:文字或符号;"
	Symbols string `protobuf:"bytes,106,opt,name=symbols,proto3" json:"symbols,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:19;"
	CreatedBy int64 `protobuf:"varint,107,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,108,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (x *OpmPanelFontConfigFilter) Reset() {
	*x = OpmPanelFontConfigFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_font_config_model_gen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelFontConfigFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelFontConfigFilter) ProtoMessage() {}

func (x *OpmPanelFontConfigFilter) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_font_config_model_gen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelFontConfigFilter.ProtoReflect.Descriptor instead.
func (*OpmPanelFontConfigFilter) Descriptor() ([]byte, []int) {
	return file_opm_panel_font_config_model_gen_proto_rawDescGZIP(), []int{1}
}

func (x *OpmPanelFontConfigFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpmPanelFontConfigFilter) GetPanelId() int64 {
	if x != nil {
		return x.PanelId
	}
	return 0
}

func (x *OpmPanelFontConfigFilter) GetFontId() int64 {
	if x != nil {
		return x.FontId
	}
	return 0
}

func (x *OpmPanelFontConfigFilter) GetVariableName() string {
	if x != nil {
		return x.VariableName
	}
	return ""
}

func (x *OpmPanelFontConfigFilter) GetBpp() int32 {
	if x != nil {
		return x.Bpp
	}
	return 0
}

func (x *OpmPanelFontConfigFilter) GetUnicodeRange() string {
	if x != nil {
		return x.UnicodeRange
	}
	return ""
}

func (x *OpmPanelFontConfigFilter) GetSymbols() string {
	if x != nil {
		return x.Symbols
	}
	return ""
}

func (x *OpmPanelFontConfigFilter) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *OpmPanelFontConfigFilter) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type OpmPanelFontConfigListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *OpmPanelFontConfig `protobuf:"bytes,101,opt,name=query,proto3" json:"query,omitempty"`
	Page      int64               `protobuf:"varint,102,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64               `protobuf:"varint,103,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderKey  string              `protobuf:"bytes,104,opt,name=orderKey,proto3" json:"orderKey,omitempty"`
	OrderDesc string              `protobuf:"bytes,105,opt,name=orderDesc,proto3" json:"orderDesc,omitempty"`
	SearchKey string              `protobuf:"bytes,106,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
}

func (x *OpmPanelFontConfigListRequest) Reset() {
	*x = OpmPanelFontConfigListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_font_config_model_gen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelFontConfigListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelFontConfigListRequest) ProtoMessage() {}

func (x *OpmPanelFontConfigListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_font_config_model_gen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelFontConfigListRequest.ProtoReflect.Descriptor instead.
func (*OpmPanelFontConfigListRequest) Descriptor() ([]byte, []int) {
	return file_opm_panel_font_config_model_gen_proto_rawDescGZIP(), []int{2}
}

func (x *OpmPanelFontConfigListRequest) GetQuery() *OpmPanelFontConfig {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *OpmPanelFontConfigListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *OpmPanelFontConfigListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *OpmPanelFontConfigListRequest) GetOrderKey() string {
	if x != nil {
		return x.OrderKey
	}
	return ""
}

func (x *OpmPanelFontConfigListRequest) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *OpmPanelFontConfigListRequest) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

type OpmPanelFontConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                 `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string                `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64                 `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*OpmPanelFontConfig `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *OpmPanelFontConfigResponse) Reset() {
	*x = OpmPanelFontConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_font_config_model_gen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelFontConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelFontConfigResponse) ProtoMessage() {}

func (x *OpmPanelFontConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_font_config_model_gen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelFontConfigResponse.ProtoReflect.Descriptor instead.
func (*OpmPanelFontConfigResponse) Descriptor() ([]byte, []int) {
	return file_opm_panel_font_config_model_gen_proto_rawDescGZIP(), []int{3}
}

func (x *OpmPanelFontConfigResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OpmPanelFontConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OpmPanelFontConfigResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OpmPanelFontConfigResponse) GetData() []*OpmPanelFontConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

type OpmPanelFontConfigUpdateFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string            `protobuf:"bytes,101,rep,name=fields,proto3" json:"fields,omitempty"`
	Data   *OpmPanelFontConfig `protobuf:"bytes,102,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OpmPanelFontConfigUpdateFieldsRequest) Reset() {
	*x = OpmPanelFontConfigUpdateFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_font_config_model_gen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelFontConfigUpdateFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelFontConfigUpdateFieldsRequest) ProtoMessage() {}

func (x *OpmPanelFontConfigUpdateFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_font_config_model_gen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelFontConfigUpdateFieldsRequest.ProtoReflect.Descriptor instead.
func (*OpmPanelFontConfigUpdateFieldsRequest) Descriptor() ([]byte, []int) {
	return file_opm_panel_font_config_model_gen_proto_rawDescGZIP(), []int{4}
}

func (x *OpmPanelFontConfigUpdateFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *OpmPanelFontConfigUpdateFieldsRequest) GetData() *OpmPanelFontConfig {
	if x != nil {
		return x.Data
	}
	return nil
}

// 表模型主键，只能是整数或字符串，若生成错误，请检查数据库表主键是否正确。支持组合主键
type OpmPanelFontConfigPrimarykey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OpmPanelFontConfigPrimarykey) Reset() {
	*x = OpmPanelFontConfigPrimarykey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_font_config_model_gen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelFontConfigPrimarykey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelFontConfigPrimarykey) ProtoMessage() {}

func (x *OpmPanelFontConfigPrimarykey) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_font_config_model_gen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelFontConfigPrimarykey.ProtoReflect.Descriptor instead.
func (*OpmPanelFontConfigPrimarykey) Descriptor() ([]byte, []int) {
	return file_opm_panel_font_config_model_gen_proto_rawDescGZIP(), []int{5}
}

func (x *OpmPanelFontConfigPrimarykey) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type OpmPanelFontConfigBatchDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*OpmPanelFontConfigPrimarykey `protobuf:"bytes,101,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *OpmPanelFontConfigBatchDeleteRequest) Reset() {
	*x = OpmPanelFontConfigBatchDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_font_config_model_gen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelFontConfigBatchDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelFontConfigBatchDeleteRequest) ProtoMessage() {}

func (x *OpmPanelFontConfigBatchDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_font_config_model_gen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelFontConfigBatchDeleteRequest.ProtoReflect.Descriptor instead.
func (*OpmPanelFontConfigBatchDeleteRequest) Descriptor() ([]byte, []int) {
	return file_opm_panel_font_config_model_gen_proto_rawDescGZIP(), []int{6}
}

func (x *OpmPanelFontConfigBatchDeleteRequest) GetKeys() []*OpmPanelFontConfigPrimarykey {
	if x != nil {
		return x.Keys
	}
	return nil
}

var File_opm_panel_font_config_model_gen_proto protoreflect.FileDescriptor

var file_opm_panel_font_config_model_gen_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6f, 0x70, 0x6d, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x66, 0x6f, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x67, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa2, 0x02, 0x0a, 0x12, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x46, 0x6f,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x66, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x70, 0x70, 0x18, 0x68, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x62, 0x70, 0x70,
	0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x6b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa8, 0x02, 0x0a, 0x18, 0x4f, 0x70, 0x6d, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x6f, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66,
	0x6f, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x70, 0x70,
	0x18, 0x68, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x62, 0x70, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x75,
	0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xda, 0x01, 0x0a, 0x1d, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x46, 0x6f,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x6a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x91,
	0x01, 0x0a, 0x1a, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x68, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e,
	0x65, 0x6c, 0x46, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x70, 0x0a, 0x25, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x46, 0x6f,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x1c, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x46, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x61, 0x0a, 0x24, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x46, 0x6f, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65,
	0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_opm_panel_font_config_model_gen_proto_rawDescOnce sync.Once
	file_opm_panel_font_config_model_gen_proto_rawDescData = file_opm_panel_font_config_model_gen_proto_rawDesc
)

func file_opm_panel_font_config_model_gen_proto_rawDescGZIP() []byte {
	file_opm_panel_font_config_model_gen_proto_rawDescOnce.Do(func() {
		file_opm_panel_font_config_model_gen_proto_rawDescData = protoimpl.X.CompressGZIP(file_opm_panel_font_config_model_gen_proto_rawDescData)
	})
	return file_opm_panel_font_config_model_gen_proto_rawDescData
}

var file_opm_panel_font_config_model_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_opm_panel_font_config_model_gen_proto_goTypes = []interface{}{
	(*OpmPanelFontConfig)(nil),                    // 0: service.OpmPanelFontConfig
	(*OpmPanelFontConfigFilter)(nil),              // 1: service.OpmPanelFontConfigFilter
	(*OpmPanelFontConfigListRequest)(nil),         // 2: service.OpmPanelFontConfigListRequest
	(*OpmPanelFontConfigResponse)(nil),            // 3: service.OpmPanelFontConfigResponse
	(*OpmPanelFontConfigUpdateFieldsRequest)(nil), // 4: service.OpmPanelFontConfigUpdateFieldsRequest
	(*OpmPanelFontConfigPrimarykey)(nil),          // 5: service.OpmPanelFontConfigPrimarykey
	(*OpmPanelFontConfigBatchDeleteRequest)(nil),  // 6: service.OpmPanelFontConfigBatchDeleteRequest
	(*timestamppb.Timestamp)(nil),                 // 7: google.protobuf.Timestamp
}
var file_opm_panel_font_config_model_gen_proto_depIdxs = []int32{
	7, // 0: service.OpmPanelFontConfig.createdAt:type_name -> google.protobuf.Timestamp
	7, // 1: service.OpmPanelFontConfigFilter.createdAt:type_name -> google.protobuf.Timestamp
	0, // 2: service.OpmPanelFontConfigListRequest.query:type_name -> service.OpmPanelFontConfig
	0, // 3: service.OpmPanelFontConfigResponse.data:type_name -> service.OpmPanelFontConfig
	0, // 4: service.OpmPanelFontConfigUpdateFieldsRequest.data:type_name -> service.OpmPanelFontConfig
	5, // 5: service.OpmPanelFontConfigBatchDeleteRequest.keys:type_name -> service.OpmPanelFontConfigPrimarykey
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_opm_panel_font_config_model_gen_proto_init() }
func file_opm_panel_font_config_model_gen_proto_init() {
	if File_opm_panel_font_config_model_gen_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opm_panel_font_config_model_gen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelFontConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_font_config_model_gen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelFontConfigFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_font_config_model_gen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelFontConfigListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_font_config_model_gen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelFontConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_font_config_model_gen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelFontConfigUpdateFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_font_config_model_gen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelFontConfigPrimarykey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_font_config_model_gen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelFontConfigBatchDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opm_panel_font_config_model_gen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opm_panel_font_config_model_gen_proto_goTypes,
		DependencyIndexes: file_opm_panel_font_config_model_gen_proto_depIdxs,
		MessageInfos:      file_opm_panel_font_config_model_gen_proto_msgTypes,
	}.Build()
	File_opm_panel_font_config_model_gen_proto = out.File
	file_opm_panel_font_config_model_gen_proto_rawDesc = nil
	file_opm_panel_font_config_model_gen_proto_goTypes = nil
	file_opm_panel_font_config_model_gen_proto_depIdxs = nil
}
