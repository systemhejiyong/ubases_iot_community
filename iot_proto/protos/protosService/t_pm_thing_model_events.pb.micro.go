// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: t_pm_thing_model_events.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TPmThingModelEvents service

func NewTPmThingModelEventsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TPmThingModelEvents service

type TPmThingModelEventsService interface {
	GetByIdTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsFilterById, opts ...client.CallOption) (*TPmThingModelEventsResponseObject, error)
	GetTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsFilter, opts ...client.CallOption) (*TPmThingModelEventsResponseObject, error)
	ListTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsFilterPage, opts ...client.CallOption) (*TPmThingModelEventsResponseList, error)
	CreateTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsRequest, opts ...client.CallOption) (*TPmThingModelEventsResponse, error)
	UpdateTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsRequest, opts ...client.CallOption) (*TPmThingModelEventsResponse, error)
	DeleteTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsRequest, opts ...client.CallOption) (*TPmThingModelEventsResponse, error)
}

type tPmThingModelEventsService struct {
	c    client.Client
	name string
}

func NewTPmThingModelEventsService(name string, c client.Client) TPmThingModelEventsService {
	return &tPmThingModelEventsService{
		c:    c,
		name: name,
	}
}

func (c *tPmThingModelEventsService) GetByIdTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsFilterById, opts ...client.CallOption) (*TPmThingModelEventsResponseObject, error) {
	req := c.c.NewRequest(c.name, "TPmThingModelEvents.GetByIdTPmThingModelEvents", in)
	out := new(TPmThingModelEventsResponseObject)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmThingModelEventsService) GetTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsFilter, opts ...client.CallOption) (*TPmThingModelEventsResponseObject, error) {
	req := c.c.NewRequest(c.name, "TPmThingModelEvents.GetTPmThingModelEvents", in)
	out := new(TPmThingModelEventsResponseObject)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmThingModelEventsService) ListTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsFilterPage, opts ...client.CallOption) (*TPmThingModelEventsResponseList, error) {
	req := c.c.NewRequest(c.name, "TPmThingModelEvents.ListTPmThingModelEvents", in)
	out := new(TPmThingModelEventsResponseList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmThingModelEventsService) CreateTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsRequest, opts ...client.CallOption) (*TPmThingModelEventsResponse, error) {
	req := c.c.NewRequest(c.name, "TPmThingModelEvents.CreateTPmThingModelEvents", in)
	out := new(TPmThingModelEventsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmThingModelEventsService) UpdateTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsRequest, opts ...client.CallOption) (*TPmThingModelEventsResponse, error) {
	req := c.c.NewRequest(c.name, "TPmThingModelEvents.UpdateTPmThingModelEvents", in)
	out := new(TPmThingModelEventsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmThingModelEventsService) DeleteTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsRequest, opts ...client.CallOption) (*TPmThingModelEventsResponse, error) {
	req := c.c.NewRequest(c.name, "TPmThingModelEvents.DeleteTPmThingModelEvents", in)
	out := new(TPmThingModelEventsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TPmThingModelEvents service

type TPmThingModelEventsHandler interface {
	GetByIdTPmThingModelEvents(context.Context, *TPmThingModelEventsFilterById, *TPmThingModelEventsResponseObject) error
	GetTPmThingModelEvents(context.Context, *TPmThingModelEventsFilter, *TPmThingModelEventsResponseObject) error
	ListTPmThingModelEvents(context.Context, *TPmThingModelEventsFilterPage, *TPmThingModelEventsResponseList) error
	CreateTPmThingModelEvents(context.Context, *TPmThingModelEventsRequest, *TPmThingModelEventsResponse) error
	UpdateTPmThingModelEvents(context.Context, *TPmThingModelEventsRequest, *TPmThingModelEventsResponse) error
	DeleteTPmThingModelEvents(context.Context, *TPmThingModelEventsRequest, *TPmThingModelEventsResponse) error
}

func RegisterTPmThingModelEventsHandler(s server.Server, hdlr TPmThingModelEventsHandler, opts ...server.HandlerOption) error {
	type tPmThingModelEvents interface {
		GetByIdTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsFilterById, out *TPmThingModelEventsResponseObject) error
		GetTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsFilter, out *TPmThingModelEventsResponseObject) error
		ListTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsFilterPage, out *TPmThingModelEventsResponseList) error
		CreateTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsRequest, out *TPmThingModelEventsResponse) error
		UpdateTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsRequest, out *TPmThingModelEventsResponse) error
		DeleteTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsRequest, out *TPmThingModelEventsResponse) error
	}
	type TPmThingModelEvents struct {
		tPmThingModelEvents
	}
	h := &tPmThingModelEventsHandler{hdlr}
	return s.Handle(s.NewHandler(&TPmThingModelEvents{h}, opts...))
}

type tPmThingModelEventsHandler struct {
	TPmThingModelEventsHandler
}

func (h *tPmThingModelEventsHandler) GetByIdTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsFilterById, out *TPmThingModelEventsResponseObject) error {
	return h.TPmThingModelEventsHandler.GetByIdTPmThingModelEvents(ctx, in, out)
}

func (h *tPmThingModelEventsHandler) GetTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsFilter, out *TPmThingModelEventsResponseObject) error {
	return h.TPmThingModelEventsHandler.GetTPmThingModelEvents(ctx, in, out)
}

func (h *tPmThingModelEventsHandler) ListTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsFilterPage, out *TPmThingModelEventsResponseList) error {
	return h.TPmThingModelEventsHandler.ListTPmThingModelEvents(ctx, in, out)
}

func (h *tPmThingModelEventsHandler) CreateTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsRequest, out *TPmThingModelEventsResponse) error {
	return h.TPmThingModelEventsHandler.CreateTPmThingModelEvents(ctx, in, out)
}

func (h *tPmThingModelEventsHandler) UpdateTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsRequest, out *TPmThingModelEventsResponse) error {
	return h.TPmThingModelEventsHandler.UpdateTPmThingModelEvents(ctx, in, out)
}

func (h *tPmThingModelEventsHandler) DeleteTPmThingModelEvents(ctx context.Context, in *TPmThingModelEventsRequest, out *TPmThingModelEventsResponse) error {
	return h.TPmThingModelEventsHandler.DeleteTPmThingModelEvents(ctx, in, out)
}
