// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: uc_home_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UcHomeService service

func NewUcHomeServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "UcHomeService.Create",
			Path:    []string{"/v1/ucHome/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeService.Delete",
			Path:    []string{"/v1/ucHome/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeService.DeleteById",
			Path:    []string{"/v1/ucHome/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeService.DeleteByIds",
			Path:    []string{"/v1/ucHome/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeService.Update",
			Path:    []string{"/v1/ucHome/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeService.UpdateAll",
			Path:    []string{"/v1/ucHome/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeService.UpdateFields",
			Path:    []string{"/v1/ucHome/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeService.FindById",
			Path:    []string{"/v1/ucHome/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeService.Find",
			Path:    []string{"/v1/ucHome/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeService.Lists",
			Path:    []string{"/v1/ucHome/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeService.AddHome",
			Path:    []string{"/v1/ucHome/addHome"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeService.HomeDetail",
			Path:    []string{"/v1/ucHome/homeDetail"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeService.JoinHome",
			Path:    []string{"/v1/ucHome/joinHome"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeService.SetRole",
			Path:    []string{"/v1/ucHome/setRole"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeService.RemoveMembers",
			Path:    []string{"/v1/ucHome/removeMembers"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeService.TransferOwnership",
			Path:    []string{"/v1/ucHome/transferOwnership"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeService.Quit",
			Path:    []string{"/v1/ucHome/quit"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcHomeService.ChangeAllUserDefaultHomeId",
			Path:    []string{"/v1/ucHome/changeAllUserDefaultHomeId"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for UcHomeService service

type UcHomeService interface {
	//创建
	Create(ctx context.Context, in *UcHome, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *UcHome, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *UcHome, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *UcHomeBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *UcHome, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *UcHome, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *UcHomeUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *UcHomeFilter, opts ...client.CallOption) (*UcHomeResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *UcHomeFilter, opts ...client.CallOption) (*UcHomeResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *UcHomeListRequest, opts ...client.CallOption) (*UcHomeResponse, error)
	//添加家庭
	AddHome(ctx context.Context, in *UcHomeReq, opts ...client.CallOption) (*UcHomeResponse, error)
	//获取家庭详情
	HomeDetail(ctx context.Context, in *UcHomeDetailRequest, opts ...client.CallOption) (*UcHomeDetailResponse, error)
	//成员加入家庭
	JoinHome(ctx context.Context, in *UcHomeDetailRequest, opts ...client.CallOption) (*Response, error)
	//家庭成员角色设置
	SetRole(ctx context.Context, in *UcHomeDetailRequest, opts ...client.CallOption) (*UcHomeResponse, error)
	//移除家庭成员
	RemoveMembers(ctx context.Context, in *UcHomeDetailRequest, opts ...client.CallOption) (*UcHomeResponse, error)
	//转移家庭所有权
	TransferOwnership(ctx context.Context, in *UcHomeDetailRequest, opts ...client.CallOption) (*UcHomeResponse, error)
	//离开家庭
	Quit(ctx context.Context, in *UcHomeDetailRequest, opts ...client.CallOption) (*UcHomeResponse, error)
	//自动切换默认家庭
	ChangeAllUserDefaultHomeId(ctx context.Context, in *UcHome, opts ...client.CallOption) (*Response, error)
}

type ucHomeService struct {
	c    client.Client
	name string
}

func NewUcHomeService(name string, c client.Client) UcHomeService {
	return &ucHomeService{
		c:    c,
		name: name,
	}
}

func (c *ucHomeService) Create(ctx context.Context, in *UcHome, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeService) Delete(ctx context.Context, in *UcHome, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeService) DeleteById(ctx context.Context, in *UcHome, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeService) DeleteByIds(ctx context.Context, in *UcHomeBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeService) Update(ctx context.Context, in *UcHome, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeService) UpdateAll(ctx context.Context, in *UcHome, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeService) UpdateFields(ctx context.Context, in *UcHomeUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeService) FindById(ctx context.Context, in *UcHomeFilter, opts ...client.CallOption) (*UcHomeResponse, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.FindById", in)
	out := new(UcHomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeService) Find(ctx context.Context, in *UcHomeFilter, opts ...client.CallOption) (*UcHomeResponse, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.Find", in)
	out := new(UcHomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeService) Lists(ctx context.Context, in *UcHomeListRequest, opts ...client.CallOption) (*UcHomeResponse, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.Lists", in)
	out := new(UcHomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeService) AddHome(ctx context.Context, in *UcHomeReq, opts ...client.CallOption) (*UcHomeResponse, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.AddHome", in)
	out := new(UcHomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeService) HomeDetail(ctx context.Context, in *UcHomeDetailRequest, opts ...client.CallOption) (*UcHomeDetailResponse, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.HomeDetail", in)
	out := new(UcHomeDetailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeService) JoinHome(ctx context.Context, in *UcHomeDetailRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.JoinHome", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeService) SetRole(ctx context.Context, in *UcHomeDetailRequest, opts ...client.CallOption) (*UcHomeResponse, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.SetRole", in)
	out := new(UcHomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeService) RemoveMembers(ctx context.Context, in *UcHomeDetailRequest, opts ...client.CallOption) (*UcHomeResponse, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.RemoveMembers", in)
	out := new(UcHomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeService) TransferOwnership(ctx context.Context, in *UcHomeDetailRequest, opts ...client.CallOption) (*UcHomeResponse, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.TransferOwnership", in)
	out := new(UcHomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeService) Quit(ctx context.Context, in *UcHomeDetailRequest, opts ...client.CallOption) (*UcHomeResponse, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.Quit", in)
	out := new(UcHomeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucHomeService) ChangeAllUserDefaultHomeId(ctx context.Context, in *UcHome, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcHomeService.ChangeAllUserDefaultHomeId", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UcHomeService service

type UcHomeServiceHandler interface {
	//创建
	Create(context.Context, *UcHome, *Response) error
	//匹配多条件删除
	Delete(context.Context, *UcHome, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *UcHome, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *UcHomeBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *UcHome, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *UcHome, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *UcHomeUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *UcHomeFilter, *UcHomeResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *UcHomeFilter, *UcHomeResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *UcHomeListRequest, *UcHomeResponse) error
	//添加家庭
	AddHome(context.Context, *UcHomeReq, *UcHomeResponse) error
	//获取家庭详情
	HomeDetail(context.Context, *UcHomeDetailRequest, *UcHomeDetailResponse) error
	//成员加入家庭
	JoinHome(context.Context, *UcHomeDetailRequest, *Response) error
	//家庭成员角色设置
	SetRole(context.Context, *UcHomeDetailRequest, *UcHomeResponse) error
	//移除家庭成员
	RemoveMembers(context.Context, *UcHomeDetailRequest, *UcHomeResponse) error
	//转移家庭所有权
	TransferOwnership(context.Context, *UcHomeDetailRequest, *UcHomeResponse) error
	//离开家庭
	Quit(context.Context, *UcHomeDetailRequest, *UcHomeResponse) error
	//自动切换默认家庭
	ChangeAllUserDefaultHomeId(context.Context, *UcHome, *Response) error
}

func RegisterUcHomeServiceHandler(s server.Server, hdlr UcHomeServiceHandler, opts ...server.HandlerOption) error {
	type ucHomeService interface {
		Create(ctx context.Context, in *UcHome, out *Response) error
		Delete(ctx context.Context, in *UcHome, out *Response) error
		DeleteById(ctx context.Context, in *UcHome, out *Response) error
		DeleteByIds(ctx context.Context, in *UcHomeBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *UcHome, out *Response) error
		UpdateAll(ctx context.Context, in *UcHome, out *Response) error
		UpdateFields(ctx context.Context, in *UcHomeUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *UcHomeFilter, out *UcHomeResponse) error
		Find(ctx context.Context, in *UcHomeFilter, out *UcHomeResponse) error
		Lists(ctx context.Context, in *UcHomeListRequest, out *UcHomeResponse) error
		AddHome(ctx context.Context, in *UcHomeReq, out *UcHomeResponse) error
		HomeDetail(ctx context.Context, in *UcHomeDetailRequest, out *UcHomeDetailResponse) error
		JoinHome(ctx context.Context, in *UcHomeDetailRequest, out *Response) error
		SetRole(ctx context.Context, in *UcHomeDetailRequest, out *UcHomeResponse) error
		RemoveMembers(ctx context.Context, in *UcHomeDetailRequest, out *UcHomeResponse) error
		TransferOwnership(ctx context.Context, in *UcHomeDetailRequest, out *UcHomeResponse) error
		Quit(ctx context.Context, in *UcHomeDetailRequest, out *UcHomeResponse) error
		ChangeAllUserDefaultHomeId(ctx context.Context, in *UcHome, out *Response) error
	}
	type UcHomeService struct {
		ucHomeService
	}
	h := &ucHomeServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.Create",
		Path:    []string{"/v1/ucHome/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.Delete",
		Path:    []string{"/v1/ucHome/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.DeleteById",
		Path:    []string{"/v1/ucHome/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.DeleteByIds",
		Path:    []string{"/v1/ucHome/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.Update",
		Path:    []string{"/v1/ucHome/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.UpdateAll",
		Path:    []string{"/v1/ucHome/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.UpdateFields",
		Path:    []string{"/v1/ucHome/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.FindById",
		Path:    []string{"/v1/ucHome/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.Find",
		Path:    []string{"/v1/ucHome/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.Lists",
		Path:    []string{"/v1/ucHome/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.AddHome",
		Path:    []string{"/v1/ucHome/addHome"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.HomeDetail",
		Path:    []string{"/v1/ucHome/homeDetail"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.JoinHome",
		Path:    []string{"/v1/ucHome/joinHome"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.SetRole",
		Path:    []string{"/v1/ucHome/setRole"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.RemoveMembers",
		Path:    []string{"/v1/ucHome/removeMembers"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.TransferOwnership",
		Path:    []string{"/v1/ucHome/transferOwnership"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.Quit",
		Path:    []string{"/v1/ucHome/quit"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcHomeService.ChangeAllUserDefaultHomeId",
		Path:    []string{"/v1/ucHome/changeAllUserDefaultHomeId"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&UcHomeService{h}, opts...))
}

type ucHomeServiceHandler struct {
	UcHomeServiceHandler
}

func (h *ucHomeServiceHandler) Create(ctx context.Context, in *UcHome, out *Response) error {
	return h.UcHomeServiceHandler.Create(ctx, in, out)
}

func (h *ucHomeServiceHandler) Delete(ctx context.Context, in *UcHome, out *Response) error {
	return h.UcHomeServiceHandler.Delete(ctx, in, out)
}

func (h *ucHomeServiceHandler) DeleteById(ctx context.Context, in *UcHome, out *Response) error {
	return h.UcHomeServiceHandler.DeleteById(ctx, in, out)
}

func (h *ucHomeServiceHandler) DeleteByIds(ctx context.Context, in *UcHomeBatchDeleteRequest, out *Response) error {
	return h.UcHomeServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *ucHomeServiceHandler) Update(ctx context.Context, in *UcHome, out *Response) error {
	return h.UcHomeServiceHandler.Update(ctx, in, out)
}

func (h *ucHomeServiceHandler) UpdateAll(ctx context.Context, in *UcHome, out *Response) error {
	return h.UcHomeServiceHandler.UpdateAll(ctx, in, out)
}

func (h *ucHomeServiceHandler) UpdateFields(ctx context.Context, in *UcHomeUpdateFieldsRequest, out *Response) error {
	return h.UcHomeServiceHandler.UpdateFields(ctx, in, out)
}

func (h *ucHomeServiceHandler) FindById(ctx context.Context, in *UcHomeFilter, out *UcHomeResponse) error {
	return h.UcHomeServiceHandler.FindById(ctx, in, out)
}

func (h *ucHomeServiceHandler) Find(ctx context.Context, in *UcHomeFilter, out *UcHomeResponse) error {
	return h.UcHomeServiceHandler.Find(ctx, in, out)
}

func (h *ucHomeServiceHandler) Lists(ctx context.Context, in *UcHomeListRequest, out *UcHomeResponse) error {
	return h.UcHomeServiceHandler.Lists(ctx, in, out)
}

func (h *ucHomeServiceHandler) AddHome(ctx context.Context, in *UcHomeReq, out *UcHomeResponse) error {
	return h.UcHomeServiceHandler.AddHome(ctx, in, out)
}

func (h *ucHomeServiceHandler) HomeDetail(ctx context.Context, in *UcHomeDetailRequest, out *UcHomeDetailResponse) error {
	return h.UcHomeServiceHandler.HomeDetail(ctx, in, out)
}

func (h *ucHomeServiceHandler) JoinHome(ctx context.Context, in *UcHomeDetailRequest, out *Response) error {
	return h.UcHomeServiceHandler.JoinHome(ctx, in, out)
}

func (h *ucHomeServiceHandler) SetRole(ctx context.Context, in *UcHomeDetailRequest, out *UcHomeResponse) error {
	return h.UcHomeServiceHandler.SetRole(ctx, in, out)
}

func (h *ucHomeServiceHandler) RemoveMembers(ctx context.Context, in *UcHomeDetailRequest, out *UcHomeResponse) error {
	return h.UcHomeServiceHandler.RemoveMembers(ctx, in, out)
}

func (h *ucHomeServiceHandler) TransferOwnership(ctx context.Context, in *UcHomeDetailRequest, out *UcHomeResponse) error {
	return h.UcHomeServiceHandler.TransferOwnership(ctx, in, out)
}

func (h *ucHomeServiceHandler) Quit(ctx context.Context, in *UcHomeDetailRequest, out *UcHomeResponse) error {
	return h.UcHomeServiceHandler.Quit(ctx, in, out)
}

func (h *ucHomeServiceHandler) ChangeAllUserDefaultHomeId(ctx context.Context, in *UcHome, out *Response) error {
	return h.UcHomeServiceHandler.ChangeAllUserDefaultHomeId(ctx, in, out)
}
