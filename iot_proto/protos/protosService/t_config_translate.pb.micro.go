// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: t_config_translate.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TConfigTranslate service

func NewTConfigTranslateEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TConfigTranslate service

type TConfigTranslateService interface {
	CreateTConfigTranslate(ctx context.Context, in *TConfigTranslateRequest, opts ...client.CallOption) (*TConfigTranslateResponse, error)
	UpdateTConfigTranslate(ctx context.Context, in *TConfigTranslateRequest, opts ...client.CallOption) (*TConfigTranslateResponse, error)
}

type tConfigTranslateService struct {
	c    client.Client
	name string
}

func NewTConfigTranslateService(name string, c client.Client) TConfigTranslateService {
	return &tConfigTranslateService{
		c:    c,
		name: name,
	}
}

func (c *tConfigTranslateService) CreateTConfigTranslate(ctx context.Context, in *TConfigTranslateRequest, opts ...client.CallOption) (*TConfigTranslateResponse, error) {
	req := c.c.NewRequest(c.name, "TConfigTranslate.CreateTConfigTranslate", in)
	out := new(TConfigTranslateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tConfigTranslateService) UpdateTConfigTranslate(ctx context.Context, in *TConfigTranslateRequest, opts ...client.CallOption) (*TConfigTranslateResponse, error) {
	req := c.c.NewRequest(c.name, "TConfigTranslate.UpdateTConfigTranslate", in)
	out := new(TConfigTranslateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TConfigTranslate service

type TConfigTranslateHandler interface {
	CreateTConfigTranslate(context.Context, *TConfigTranslateRequest, *TConfigTranslateResponse) error
	UpdateTConfigTranslate(context.Context, *TConfigTranslateRequest, *TConfigTranslateResponse) error
}

func RegisterTConfigTranslateHandler(s server.Server, hdlr TConfigTranslateHandler, opts ...server.HandlerOption) error {
	type tConfigTranslate interface {
		CreateTConfigTranslate(ctx context.Context, in *TConfigTranslateRequest, out *TConfigTranslateResponse) error
		UpdateTConfigTranslate(ctx context.Context, in *TConfigTranslateRequest, out *TConfigTranslateResponse) error
	}
	type TConfigTranslate struct {
		tConfigTranslate
	}
	h := &tConfigTranslateHandler{hdlr}
	return s.Handle(s.NewHandler(&TConfigTranslate{h}, opts...))
}

type tConfigTranslateHandler struct {
	TConfigTranslateHandler
}

func (h *tConfigTranslateHandler) CreateTConfigTranslate(ctx context.Context, in *TConfigTranslateRequest, out *TConfigTranslateResponse) error {
	return h.TConfigTranslateHandler.CreateTConfigTranslate(ctx, in, out)
}

func (h *tConfigTranslateHandler) UpdateTConfigTranslate(ctx context.Context, in *TConfigTranslateRequest, out *TConfigTranslateResponse) error {
	return h.TConfigTranslateHandler.UpdateTConfigTranslate(ctx, in, out)
}
