// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: iot_device_triad_service.proto

package protosService

import (
	// _ "/api"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for IotDeviceTriadService service

func NewIotDeviceTriadServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "IotDeviceTriadService.Create",
			Path:    []string{"/v1/iotDeviceTriad/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTriadService.Delete",
			Path:    []string{"/v1/iotDeviceTriad/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTriadService.DeleteById",
			Path:    []string{"/v1/iotDeviceTriad/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTriadService.DeleteByIds",
			Path:    []string{"/v1/iotDeviceTriad/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTriadService.Update",
			Path:    []string{"/v1/iotDeviceTriad/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTriadService.UpdateAll",
			Path:    []string{"/v1/iotDeviceTriad/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTriadService.UpdateFields",
			Path:    []string{"/v1/iotDeviceTriad/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTriadService.FindById",
			Path:    []string{"/v1/iotDeviceTriad/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTriadService.Find",
			Path:    []string{"/v1/iotDeviceTriad/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTriadService.Lists",
			Path:    []string{"/v1/iotDeviceTriad/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTriadService.GeneratorDeviceTriad",
			Path:    []string{"/v1/iotDeviceTriad/generator"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTriadService.GetDeviceTriadCountByTenantId",
			Path:    []string{"/v1/iotDeviceTriad/count"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTriadService.SetTestDeviceTriad",
			Path:    []string{"/v1/iotDeviceTriad/setTestDeviceTriad"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTriadService.BindTestAccount",
			Path:    []string{"/v1/iotDeviceTriad/bindTestAccount"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTriadService.CreateAndBindDeviceTriad",
			Path:    []string{"/v1/iotDeviceTriad/createAndBind"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTriadService.SetExportCount",
			Path:    []string{"/v1/iotDeviceTriad/setExportCount"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceTriadService.GetDeviceTriadCount",
			Path:    []string{"/v1/iotDeviceTriad/getDeviceTriadCount"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for IotDeviceTriadService service

type IotDeviceTriadService interface {
	//创建
	Create(ctx context.Context, in *IotDeviceTriad, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *IotDeviceTriad, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *IotDeviceTriad, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *IotDeviceTriadBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *IotDeviceTriad, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *IotDeviceTriad, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *IotDeviceTriadUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *IotDeviceTriadFilter, opts ...client.CallOption) (*IotDeviceTriadResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *IotDeviceTriadFilter, opts ...client.CallOption) (*IotDeviceTriadResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *IotDeviceTriadListRequest, opts ...client.CallOption) (*IotDeviceTriadResponse, error)
	//批量生成三元组
	GeneratorDeviceTriad(ctx context.Context, in *IotDeviceTriadGenerateRequest, opts ...client.CallOption) (*Response, error)
	//获取租户的三元组总数
	GetDeviceTriadCountByTenantId(ctx context.Context, in *IotDeviceTriadFilter, opts ...client.CallOption) (*Response, error)
	//设置测试三元组
	SetTestDeviceTriad(ctx context.Context, in *SetTestTriadRequest, opts ...client.CallOption) (*Response, error)
	//绑定测试账号
	BindTestAccount(ctx context.Context, in *BindTestAccountRequest, opts ...client.CallOption) (*Response, error)
	//创建并绑定设备三元组
	CreateAndBindDeviceTriad(ctx context.Context, in *IotDeviceTriadGenerateRequest, opts ...client.CallOption) (*Response, error)
	//查找，支持分页，可返回多条数据
	SetExportCount(ctx context.Context, in *IotDeviceTriadListRequest, opts ...client.CallOption) (*IotDeviceTriadResponse, error)
	//设备三组统计
	GetDeviceTriadCount(ctx context.Context, in *IotDeviceTriadCountRequest, opts ...client.CallOption) (*IotDeviceTriadCountResponse, error)
}

type iotDeviceTriadService struct {
	c    client.Client
	name string
}

func NewIotDeviceTriadService(name string, c client.Client) IotDeviceTriadService {
	return &iotDeviceTriadService{
		c:    c,
		name: name,
	}
}

func (c *iotDeviceTriadService) Create(ctx context.Context, in *IotDeviceTriad, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTriadService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTriadService) Delete(ctx context.Context, in *IotDeviceTriad, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTriadService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTriadService) DeleteById(ctx context.Context, in *IotDeviceTriad, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTriadService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTriadService) DeleteByIds(ctx context.Context, in *IotDeviceTriadBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTriadService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTriadService) Update(ctx context.Context, in *IotDeviceTriad, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTriadService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTriadService) UpdateAll(ctx context.Context, in *IotDeviceTriad, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTriadService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTriadService) UpdateFields(ctx context.Context, in *IotDeviceTriadUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTriadService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTriadService) FindById(ctx context.Context, in *IotDeviceTriadFilter, opts ...client.CallOption) (*IotDeviceTriadResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTriadService.FindById", in)
	out := new(IotDeviceTriadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTriadService) Find(ctx context.Context, in *IotDeviceTriadFilter, opts ...client.CallOption) (*IotDeviceTriadResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTriadService.Find", in)
	out := new(IotDeviceTriadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTriadService) Lists(ctx context.Context, in *IotDeviceTriadListRequest, opts ...client.CallOption) (*IotDeviceTriadResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTriadService.Lists", in)
	out := new(IotDeviceTriadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTriadService) GeneratorDeviceTriad(ctx context.Context, in *IotDeviceTriadGenerateRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTriadService.GeneratorDeviceTriad", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTriadService) GetDeviceTriadCountByTenantId(ctx context.Context, in *IotDeviceTriadFilter, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTriadService.GetDeviceTriadCountByTenantId", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTriadService) SetTestDeviceTriad(ctx context.Context, in *SetTestTriadRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTriadService.SetTestDeviceTriad", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTriadService) BindTestAccount(ctx context.Context, in *BindTestAccountRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTriadService.BindTestAccount", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTriadService) CreateAndBindDeviceTriad(ctx context.Context, in *IotDeviceTriadGenerateRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTriadService.CreateAndBindDeviceTriad", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTriadService) SetExportCount(ctx context.Context, in *IotDeviceTriadListRequest, opts ...client.CallOption) (*IotDeviceTriadResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTriadService.SetExportCount", in)
	out := new(IotDeviceTriadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceTriadService) GetDeviceTriadCount(ctx context.Context, in *IotDeviceTriadCountRequest, opts ...client.CallOption) (*IotDeviceTriadCountResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceTriadService.GetDeviceTriadCount", in)
	out := new(IotDeviceTriadCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IotDeviceTriadService service

type IotDeviceTriadServiceHandler interface {
	//创建
	Create(context.Context, *IotDeviceTriad, *Response) error
	//匹配多条件删除
	Delete(context.Context, *IotDeviceTriad, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *IotDeviceTriad, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *IotDeviceTriadBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *IotDeviceTriad, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *IotDeviceTriad, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *IotDeviceTriadUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *IotDeviceTriadFilter, *IotDeviceTriadResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *IotDeviceTriadFilter, *IotDeviceTriadResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *IotDeviceTriadListRequest, *IotDeviceTriadResponse) error
	//批量生成三元组
	GeneratorDeviceTriad(context.Context, *IotDeviceTriadGenerateRequest, *Response) error
	//获取租户的三元组总数
	GetDeviceTriadCountByTenantId(context.Context, *IotDeviceTriadFilter, *Response) error
	//设置测试三元组
	SetTestDeviceTriad(context.Context, *SetTestTriadRequest, *Response) error
	//绑定测试账号
	BindTestAccount(context.Context, *BindTestAccountRequest, *Response) error
	//创建并绑定设备三元组
	CreateAndBindDeviceTriad(context.Context, *IotDeviceTriadGenerateRequest, *Response) error
	//查找，支持分页，可返回多条数据
	SetExportCount(context.Context, *IotDeviceTriadListRequest, *IotDeviceTriadResponse) error
	//设备三组统计
	GetDeviceTriadCount(context.Context, *IotDeviceTriadCountRequest, *IotDeviceTriadCountResponse) error
}

func RegisterIotDeviceTriadServiceHandler(s server.Server, hdlr IotDeviceTriadServiceHandler, opts ...server.HandlerOption) error {
	type iotDeviceTriadService interface {
		Create(ctx context.Context, in *IotDeviceTriad, out *Response) error
		Delete(ctx context.Context, in *IotDeviceTriad, out *Response) error
		DeleteById(ctx context.Context, in *IotDeviceTriad, out *Response) error
		DeleteByIds(ctx context.Context, in *IotDeviceTriadBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *IotDeviceTriad, out *Response) error
		UpdateAll(ctx context.Context, in *IotDeviceTriad, out *Response) error
		UpdateFields(ctx context.Context, in *IotDeviceTriadUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *IotDeviceTriadFilter, out *IotDeviceTriadResponse) error
		Find(ctx context.Context, in *IotDeviceTriadFilter, out *IotDeviceTriadResponse) error
		Lists(ctx context.Context, in *IotDeviceTriadListRequest, out *IotDeviceTriadResponse) error
		GeneratorDeviceTriad(ctx context.Context, in *IotDeviceTriadGenerateRequest, out *Response) error
		GetDeviceTriadCountByTenantId(ctx context.Context, in *IotDeviceTriadFilter, out *Response) error
		SetTestDeviceTriad(ctx context.Context, in *SetTestTriadRequest, out *Response) error
		BindTestAccount(ctx context.Context, in *BindTestAccountRequest, out *Response) error
		CreateAndBindDeviceTriad(ctx context.Context, in *IotDeviceTriadGenerateRequest, out *Response) error
		SetExportCount(ctx context.Context, in *IotDeviceTriadListRequest, out *IotDeviceTriadResponse) error
		GetDeviceTriadCount(ctx context.Context, in *IotDeviceTriadCountRequest, out *IotDeviceTriadCountResponse) error
	}
	type IotDeviceTriadService struct {
		iotDeviceTriadService
	}
	h := &iotDeviceTriadServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTriadService.Create",
		Path:    []string{"/v1/iotDeviceTriad/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTriadService.Delete",
		Path:    []string{"/v1/iotDeviceTriad/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTriadService.DeleteById",
		Path:    []string{"/v1/iotDeviceTriad/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTriadService.DeleteByIds",
		Path:    []string{"/v1/iotDeviceTriad/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTriadService.Update",
		Path:    []string{"/v1/iotDeviceTriad/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTriadService.UpdateAll",
		Path:    []string{"/v1/iotDeviceTriad/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTriadService.UpdateFields",
		Path:    []string{"/v1/iotDeviceTriad/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTriadService.FindById",
		Path:    []string{"/v1/iotDeviceTriad/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTriadService.Find",
		Path:    []string{"/v1/iotDeviceTriad/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTriadService.Lists",
		Path:    []string{"/v1/iotDeviceTriad/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTriadService.GeneratorDeviceTriad",
		Path:    []string{"/v1/iotDeviceTriad/generator"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTriadService.GetDeviceTriadCountByTenantId",
		Path:    []string{"/v1/iotDeviceTriad/count"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTriadService.SetTestDeviceTriad",
		Path:    []string{"/v1/iotDeviceTriad/setTestDeviceTriad"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTriadService.BindTestAccount",
		Path:    []string{"/v1/iotDeviceTriad/bindTestAccount"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTriadService.CreateAndBindDeviceTriad",
		Path:    []string{"/v1/iotDeviceTriad/createAndBind"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTriadService.SetExportCount",
		Path:    []string{"/v1/iotDeviceTriad/setExportCount"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceTriadService.GetDeviceTriadCount",
		Path:    []string{"/v1/iotDeviceTriad/getDeviceTriadCount"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&IotDeviceTriadService{h}, opts...))
}

type iotDeviceTriadServiceHandler struct {
	IotDeviceTriadServiceHandler
}

func (h *iotDeviceTriadServiceHandler) Create(ctx context.Context, in *IotDeviceTriad, out *Response) error {
	return h.IotDeviceTriadServiceHandler.Create(ctx, in, out)
}

func (h *iotDeviceTriadServiceHandler) Delete(ctx context.Context, in *IotDeviceTriad, out *Response) error {
	return h.IotDeviceTriadServiceHandler.Delete(ctx, in, out)
}

func (h *iotDeviceTriadServiceHandler) DeleteById(ctx context.Context, in *IotDeviceTriad, out *Response) error {
	return h.IotDeviceTriadServiceHandler.DeleteById(ctx, in, out)
}

func (h *iotDeviceTriadServiceHandler) DeleteByIds(ctx context.Context, in *IotDeviceTriadBatchDeleteRequest, out *Response) error {
	return h.IotDeviceTriadServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *iotDeviceTriadServiceHandler) Update(ctx context.Context, in *IotDeviceTriad, out *Response) error {
	return h.IotDeviceTriadServiceHandler.Update(ctx, in, out)
}

func (h *iotDeviceTriadServiceHandler) UpdateAll(ctx context.Context, in *IotDeviceTriad, out *Response) error {
	return h.IotDeviceTriadServiceHandler.UpdateAll(ctx, in, out)
}

func (h *iotDeviceTriadServiceHandler) UpdateFields(ctx context.Context, in *IotDeviceTriadUpdateFieldsRequest, out *Response) error {
	return h.IotDeviceTriadServiceHandler.UpdateFields(ctx, in, out)
}

func (h *iotDeviceTriadServiceHandler) FindById(ctx context.Context, in *IotDeviceTriadFilter, out *IotDeviceTriadResponse) error {
	return h.IotDeviceTriadServiceHandler.FindById(ctx, in, out)
}

func (h *iotDeviceTriadServiceHandler) Find(ctx context.Context, in *IotDeviceTriadFilter, out *IotDeviceTriadResponse) error {
	return h.IotDeviceTriadServiceHandler.Find(ctx, in, out)
}

func (h *iotDeviceTriadServiceHandler) Lists(ctx context.Context, in *IotDeviceTriadListRequest, out *IotDeviceTriadResponse) error {
	return h.IotDeviceTriadServiceHandler.Lists(ctx, in, out)
}

func (h *iotDeviceTriadServiceHandler) GeneratorDeviceTriad(ctx context.Context, in *IotDeviceTriadGenerateRequest, out *Response) error {
	return h.IotDeviceTriadServiceHandler.GeneratorDeviceTriad(ctx, in, out)
}

func (h *iotDeviceTriadServiceHandler) GetDeviceTriadCountByTenantId(ctx context.Context, in *IotDeviceTriadFilter, out *Response) error {
	return h.IotDeviceTriadServiceHandler.GetDeviceTriadCountByTenantId(ctx, in, out)
}

func (h *iotDeviceTriadServiceHandler) SetTestDeviceTriad(ctx context.Context, in *SetTestTriadRequest, out *Response) error {
	return h.IotDeviceTriadServiceHandler.SetTestDeviceTriad(ctx, in, out)
}

func (h *iotDeviceTriadServiceHandler) BindTestAccount(ctx context.Context, in *BindTestAccountRequest, out *Response) error {
	return h.IotDeviceTriadServiceHandler.BindTestAccount(ctx, in, out)
}

func (h *iotDeviceTriadServiceHandler) CreateAndBindDeviceTriad(ctx context.Context, in *IotDeviceTriadGenerateRequest, out *Response) error {
	return h.IotDeviceTriadServiceHandler.CreateAndBindDeviceTriad(ctx, in, out)
}

func (h *iotDeviceTriadServiceHandler) SetExportCount(ctx context.Context, in *IotDeviceTriadListRequest, out *IotDeviceTriadResponse) error {
	return h.IotDeviceTriadServiceHandler.SetExportCount(ctx, in, out)
}

func (h *iotDeviceTriadServiceHandler) GetDeviceTriadCount(ctx context.Context, in *IotDeviceTriadCountRequest, out *IotDeviceTriadCountResponse) error {
	return h.IotDeviceTriadServiceHandler.GetDeviceTriadCount(ctx, in, out)
}
