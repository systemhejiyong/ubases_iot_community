// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: iot_device_info_service.proto

package protosService

import (
	fmt "fmt"
	math "math"

	proto "google.golang.org/protobuf/proto"

	context "context"

	api "go-micro.dev/v4/api"

	client "go-micro.dev/v4/client"

	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for IotDeviceInfoService service

func NewIotDeviceInfoServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "IotDeviceInfoService.Create",
			Path:    []string{"/v1/iotDeviceInfo/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceInfoService.Delete",
			Path:    []string{"/v1/iotDeviceInfo/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceInfoService.DeleteById",
			Path:    []string{"/v1/iotDeviceInfo/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceInfoService.DeleteByIds",
			Path:    []string{"/v1/iotDeviceInfo/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceInfoService.Update",
			Path:    []string{"/v1/iotDeviceInfo/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceInfoService.UpdateAll",
			Path:    []string{"/v1/iotDeviceInfo/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceInfoService.UpdateFields",
			Path:    []string{"/v1/iotDeviceInfo/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceInfoService.FindById",
			Path:    []string{"/v1/iotDeviceInfo/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceInfoService.Find",
			Path:    []string{"/v1/iotDeviceInfo/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceInfoService.Lists",
			Path:    []string{"/v1/iotDeviceInfo/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceInfoService.QueryCount",
			Path:    []string{"/v1/iotDeviceInfo/count"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceInfoService.QueryDetails",
			Path:    []string{"/v1/iotDeviceInfo/details"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceInfoService.CurrentDeviceInfo",
			Path:    []string{"/v1/iotDeviceInfo/currentDeviceInfo"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceInfoService.ActiveDevice",
			Path:    []string{"/v1/iotDeviceInfo/activeDevice"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceInfoService.DeviceInfoListByDevIds",
			Path:    []string{"/v1/iotDeviceInfo/deviceInfoListByDevIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceInfoService.GetDeviceFunctionSetList",
			Path:    []string{"/v1/iotDeviceInfo/getDeviceFunctionSetList"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceInfoService.SaveDeviceFunctionSet",
			Path:    []string{"/v1/iotDeviceInfo/saveDeviceFunctionSet"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceInfoService.SaveDeviceFunctionBatchSet",
			Path:    []string{"/v1/iotDeviceInfo/saveDeviceFunctionBatchSet"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for IotDeviceInfoService service

type IotDeviceInfoService interface {
	//创建
	Create(ctx context.Context, in *IotDeviceInfo, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *IotDeviceInfo, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *IotDeviceInfo, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *IotDeviceInfoBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *IotDeviceInfo, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *IotDeviceInfo, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *IotDeviceInfoUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *IotDeviceInfoFilter, opts ...client.CallOption) (*IotDeviceInfoResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *IotDeviceInfoFilter, opts ...client.CallOption) (*IotDeviceInfoResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *IotDeviceInfoListRequest, opts ...client.CallOption) (*IotDeviceInfoResponse, error)
	//查找，支持分页，可返回多条数据
	QueryCount(ctx context.Context, in *IotDeviceInfoListRequest, opts ...client.CallOption) (*IotDeviceInfoCountResponse, error)
	//查找，支持分页，可返回多条数据
	QueryDetails(ctx context.Context, in *IotDeviceInfoFilter, opts ...client.CallOption) (*IotDeviceInfoDetailsResponse, error)
	//通用设备信息
	CurrentDeviceInfo(ctx context.Context, in *CurrentDeviceInfoFilter, opts ...client.CallOption) (*CurrentDeviceInfoResponse, error)
	//通用设备信息
	ActiveDevice(ctx context.Context, in *ActiveDeviceRequest, opts ...client.CallOption) (*Response, error)
	//根据DevIds获取设备列表
	DeviceInfoListByDevIds(ctx context.Context, in *DeviceInfoListByDevIdsFilter, opts ...client.CallOption) (*IotDeviceInfoResponse, error)
	//获取设备的物模型自定义名称信息
	GetDeviceFunctionSetList(ctx context.Context, in *IotDeviceFunctionSet, opts ...client.CallOption) (*IotDeviceFunctionSetResponse, error)
	//保存设备的物模型自定义名称信息
	SaveDeviceFunctionSet(ctx context.Context, in *IotDeviceFunctionSet, opts ...client.CallOption) (*Response, error)
	//保存设备的物模型自定义名称信息
	SaveDeviceFunctionBatchSet(ctx context.Context, in *IotDeviceFunctionBatchSet, opts ...client.CallOption) (*Response, error)
}

type iotDeviceInfoService struct {
	c    client.Client
	name string
}

func NewIotDeviceInfoService(name string, c client.Client) IotDeviceInfoService {
	return &iotDeviceInfoService{
		c:    c,
		name: name,
	}
}

func (c *iotDeviceInfoService) Create(ctx context.Context, in *IotDeviceInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceInfoService) Delete(ctx context.Context, in *IotDeviceInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceInfoService) DeleteById(ctx context.Context, in *IotDeviceInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceInfoService) DeleteByIds(ctx context.Context, in *IotDeviceInfoBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceInfoService) Update(ctx context.Context, in *IotDeviceInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceInfoService) UpdateAll(ctx context.Context, in *IotDeviceInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceInfoService) UpdateFields(ctx context.Context, in *IotDeviceInfoUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceInfoService) FindById(ctx context.Context, in *IotDeviceInfoFilter, opts ...client.CallOption) (*IotDeviceInfoResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.FindById", in)
	out := new(IotDeviceInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceInfoService) Find(ctx context.Context, in *IotDeviceInfoFilter, opts ...client.CallOption) (*IotDeviceInfoResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.Find", in)
	out := new(IotDeviceInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceInfoService) Lists(ctx context.Context, in *IotDeviceInfoListRequest, opts ...client.CallOption) (*IotDeviceInfoResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.Lists", in)
	out := new(IotDeviceInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceInfoService) QueryCount(ctx context.Context, in *IotDeviceInfoListRequest, opts ...client.CallOption) (*IotDeviceInfoCountResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.QueryCount", in)
	out := new(IotDeviceInfoCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceInfoService) QueryDetails(ctx context.Context, in *IotDeviceInfoFilter, opts ...client.CallOption) (*IotDeviceInfoDetailsResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.QueryDetails", in)
	out := new(IotDeviceInfoDetailsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceInfoService) CurrentDeviceInfo(ctx context.Context, in *CurrentDeviceInfoFilter, opts ...client.CallOption) (*CurrentDeviceInfoResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.CurrentDeviceInfo", in)
	out := new(CurrentDeviceInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceInfoService) ActiveDevice(ctx context.Context, in *ActiveDeviceRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.ActiveDevice", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceInfoService) DeviceInfoListByDevIds(ctx context.Context, in *DeviceInfoListByDevIdsFilter, opts ...client.CallOption) (*IotDeviceInfoResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.DeviceInfoListByDevIds", in)
	out := new(IotDeviceInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceInfoService) GetDeviceFunctionSetList(ctx context.Context, in *IotDeviceFunctionSet, opts ...client.CallOption) (*IotDeviceFunctionSetResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.GetDeviceFunctionSetList", in)
	out := new(IotDeviceFunctionSetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceInfoService) SaveDeviceFunctionSet(ctx context.Context, in *IotDeviceFunctionSet, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.SaveDeviceFunctionSet", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceInfoService) SaveDeviceFunctionBatchSet(ctx context.Context, in *IotDeviceFunctionBatchSet, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceInfoService.SaveDeviceFunctionBatchSet", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IotDeviceInfoService service

type IotDeviceInfoServiceHandler interface {
	//创建
	Create(context.Context, *IotDeviceInfo, *Response) error
	//匹配多条件删除
	Delete(context.Context, *IotDeviceInfo, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *IotDeviceInfo, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *IotDeviceInfoBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *IotDeviceInfo, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *IotDeviceInfo, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *IotDeviceInfoUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *IotDeviceInfoFilter, *IotDeviceInfoResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *IotDeviceInfoFilter, *IotDeviceInfoResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *IotDeviceInfoListRequest, *IotDeviceInfoResponse) error
	//查找，支持分页，可返回多条数据
	QueryCount(context.Context, *IotDeviceInfoListRequest, *IotDeviceInfoCountResponse) error
	//查找，支持分页，可返回多条数据
	QueryDetails(context.Context, *IotDeviceInfoFilter, *IotDeviceInfoDetailsResponse) error
	//通用设备信息
	CurrentDeviceInfo(context.Context, *CurrentDeviceInfoFilter, *CurrentDeviceInfoResponse) error
	//通用设备信息
	ActiveDevice(context.Context, *ActiveDeviceRequest, *Response) error
	//根据DevIds获取设备列表
	DeviceInfoListByDevIds(context.Context, *DeviceInfoListByDevIdsFilter, *IotDeviceInfoResponse) error
	//获取设备的物模型自定义名称信息
	GetDeviceFunctionSetList(context.Context, *IotDeviceFunctionSet, *IotDeviceFunctionSetResponse) error
	//保存设备的物模型自定义名称信息
	SaveDeviceFunctionSet(context.Context, *IotDeviceFunctionSet, *Response) error
	//保存设备的物模型自定义名称信息
	SaveDeviceFunctionBatchSet(context.Context, *IotDeviceFunctionBatchSet, *Response) error
}

func RegisterIotDeviceInfoServiceHandler(s server.Server, hdlr IotDeviceInfoServiceHandler, opts ...server.HandlerOption) error {
	type iotDeviceInfoService interface {
		Create(ctx context.Context, in *IotDeviceInfo, out *Response) error
		Delete(ctx context.Context, in *IotDeviceInfo, out *Response) error
		DeleteById(ctx context.Context, in *IotDeviceInfo, out *Response) error
		DeleteByIds(ctx context.Context, in *IotDeviceInfoBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *IotDeviceInfo, out *Response) error
		UpdateAll(ctx context.Context, in *IotDeviceInfo, out *Response) error
		UpdateFields(ctx context.Context, in *IotDeviceInfoUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *IotDeviceInfoFilter, out *IotDeviceInfoResponse) error
		Find(ctx context.Context, in *IotDeviceInfoFilter, out *IotDeviceInfoResponse) error
		Lists(ctx context.Context, in *IotDeviceInfoListRequest, out *IotDeviceInfoResponse) error
		QueryCount(ctx context.Context, in *IotDeviceInfoListRequest, out *IotDeviceInfoCountResponse) error
		QueryDetails(ctx context.Context, in *IotDeviceInfoFilter, out *IotDeviceInfoDetailsResponse) error
		CurrentDeviceInfo(ctx context.Context, in *CurrentDeviceInfoFilter, out *CurrentDeviceInfoResponse) error
		ActiveDevice(ctx context.Context, in *ActiveDeviceRequest, out *Response) error
		DeviceInfoListByDevIds(ctx context.Context, in *DeviceInfoListByDevIdsFilter, out *IotDeviceInfoResponse) error
		GetDeviceFunctionSetList(ctx context.Context, in *IotDeviceFunctionSet, out *IotDeviceFunctionSetResponse) error
		SaveDeviceFunctionSet(ctx context.Context, in *IotDeviceFunctionSet, out *Response) error
		SaveDeviceFunctionBatchSet(ctx context.Context, in *IotDeviceFunctionBatchSet, out *Response) error
	}
	type IotDeviceInfoService struct {
		iotDeviceInfoService
	}
	h := &iotDeviceInfoServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.Create",
		Path:    []string{"/v1/iotDeviceInfo/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.Delete",
		Path:    []string{"/v1/iotDeviceInfo/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.DeleteById",
		Path:    []string{"/v1/iotDeviceInfo/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.DeleteByIds",
		Path:    []string{"/v1/iotDeviceInfo/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.Update",
		Path:    []string{"/v1/iotDeviceInfo/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.UpdateAll",
		Path:    []string{"/v1/iotDeviceInfo/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.UpdateFields",
		Path:    []string{"/v1/iotDeviceInfo/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.FindById",
		Path:    []string{"/v1/iotDeviceInfo/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.Find",
		Path:    []string{"/v1/iotDeviceInfo/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.Lists",
		Path:    []string{"/v1/iotDeviceInfo/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.QueryCount",
		Path:    []string{"/v1/iotDeviceInfo/count"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.QueryDetails",
		Path:    []string{"/v1/iotDeviceInfo/details"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.CurrentDeviceInfo",
		Path:    []string{"/v1/iotDeviceInfo/currentDeviceInfo"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.ActiveDevice",
		Path:    []string{"/v1/iotDeviceInfo/activeDevice"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.DeviceInfoListByDevIds",
		Path:    []string{"/v1/iotDeviceInfo/deviceInfoListByDevIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.GetDeviceFunctionSetList",
		Path:    []string{"/v1/iotDeviceInfo/getDeviceFunctionSetList"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.SaveDeviceFunctionSet",
		Path:    []string{"/v1/iotDeviceInfo/saveDeviceFunctionSet"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceInfoService.SaveDeviceFunctionBatchSet",
		Path:    []string{"/v1/iotDeviceInfo/saveDeviceFunctionBatchSet"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&IotDeviceInfoService{h}, opts...))
}

type iotDeviceInfoServiceHandler struct {
	IotDeviceInfoServiceHandler
}

func (h *iotDeviceInfoServiceHandler) Create(ctx context.Context, in *IotDeviceInfo, out *Response) error {
	return h.IotDeviceInfoServiceHandler.Create(ctx, in, out)
}

func (h *iotDeviceInfoServiceHandler) Delete(ctx context.Context, in *IotDeviceInfo, out *Response) error {
	return h.IotDeviceInfoServiceHandler.Delete(ctx, in, out)
}

func (h *iotDeviceInfoServiceHandler) DeleteById(ctx context.Context, in *IotDeviceInfo, out *Response) error {
	return h.IotDeviceInfoServiceHandler.DeleteById(ctx, in, out)
}

func (h *iotDeviceInfoServiceHandler) DeleteByIds(ctx context.Context, in *IotDeviceInfoBatchDeleteRequest, out *Response) error {
	return h.IotDeviceInfoServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *iotDeviceInfoServiceHandler) Update(ctx context.Context, in *IotDeviceInfo, out *Response) error {
	return h.IotDeviceInfoServiceHandler.Update(ctx, in, out)
}

func (h *iotDeviceInfoServiceHandler) UpdateAll(ctx context.Context, in *IotDeviceInfo, out *Response) error {
	return h.IotDeviceInfoServiceHandler.UpdateAll(ctx, in, out)
}

func (h *iotDeviceInfoServiceHandler) UpdateFields(ctx context.Context, in *IotDeviceInfoUpdateFieldsRequest, out *Response) error {
	return h.IotDeviceInfoServiceHandler.UpdateFields(ctx, in, out)
}

func (h *iotDeviceInfoServiceHandler) FindById(ctx context.Context, in *IotDeviceInfoFilter, out *IotDeviceInfoResponse) error {
	return h.IotDeviceInfoServiceHandler.FindById(ctx, in, out)
}

func (h *iotDeviceInfoServiceHandler) Find(ctx context.Context, in *IotDeviceInfoFilter, out *IotDeviceInfoResponse) error {
	return h.IotDeviceInfoServiceHandler.Find(ctx, in, out)
}

func (h *iotDeviceInfoServiceHandler) Lists(ctx context.Context, in *IotDeviceInfoListRequest, out *IotDeviceInfoResponse) error {
	return h.IotDeviceInfoServiceHandler.Lists(ctx, in, out)
}

func (h *iotDeviceInfoServiceHandler) QueryCount(ctx context.Context, in *IotDeviceInfoListRequest, out *IotDeviceInfoCountResponse) error {
	return h.IotDeviceInfoServiceHandler.QueryCount(ctx, in, out)
}

func (h *iotDeviceInfoServiceHandler) QueryDetails(ctx context.Context, in *IotDeviceInfoFilter, out *IotDeviceInfoDetailsResponse) error {
	return h.IotDeviceInfoServiceHandler.QueryDetails(ctx, in, out)
}

func (h *iotDeviceInfoServiceHandler) CurrentDeviceInfo(ctx context.Context, in *CurrentDeviceInfoFilter, out *CurrentDeviceInfoResponse) error {
	return h.IotDeviceInfoServiceHandler.CurrentDeviceInfo(ctx, in, out)
}

func (h *iotDeviceInfoServiceHandler) ActiveDevice(ctx context.Context, in *ActiveDeviceRequest, out *Response) error {
	return h.IotDeviceInfoServiceHandler.ActiveDevice(ctx, in, out)
}

func (h *iotDeviceInfoServiceHandler) DeviceInfoListByDevIds(ctx context.Context, in *DeviceInfoListByDevIdsFilter, out *IotDeviceInfoResponse) error {
	return h.IotDeviceInfoServiceHandler.DeviceInfoListByDevIds(ctx, in, out)
}

func (h *iotDeviceInfoServiceHandler) GetDeviceFunctionSetList(ctx context.Context, in *IotDeviceFunctionSet, out *IotDeviceFunctionSetResponse) error {
	return h.IotDeviceInfoServiceHandler.GetDeviceFunctionSetList(ctx, in, out)
}

func (h *iotDeviceInfoServiceHandler) SaveDeviceFunctionSet(ctx context.Context, in *IotDeviceFunctionSet, out *Response) error {
	return h.IotDeviceInfoServiceHandler.SaveDeviceFunctionSet(ctx, in, out)
}

func (h *iotDeviceInfoServiceHandler) SaveDeviceFunctionBatchSet(ctx context.Context, in *IotDeviceFunctionBatchSet, out *Response) error {
	return h.IotDeviceInfoServiceHandler.SaveDeviceFunctionBatchSet(ctx, in, out)
}
