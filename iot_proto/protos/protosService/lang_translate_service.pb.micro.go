// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: lang_translate_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LangTranslateService service

func NewLangTranslateServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "LangTranslateService.Create",
			Path:    []string{"/v1/langTranslate/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangTranslateService.BatchCreate",
			Path:    []string{"/v1/langTranslate/batchCreate"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangTranslateService.Delete",
			Path:    []string{"/v1/langTranslate/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangTranslateService.DeleteById",
			Path:    []string{"/v1/langTranslate/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangTranslateService.DeleteByIds",
			Path:    []string{"/v1/langTranslate/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangTranslateService.Update",
			Path:    []string{"/v1/langTranslate/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangTranslateService.UpdateAll",
			Path:    []string{"/v1/langTranslate/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangTranslateService.UpdateFields",
			Path:    []string{"/v1/langTranslate/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangTranslateService.FindById",
			Path:    []string{"/v1/langTranslate/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangTranslateService.Find",
			Path:    []string{"/v1/langTranslate/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangTranslateService.Lists",
			Path:    []string{"/v1/langTranslate/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangTranslateService.GroupLists",
			Path:    []string{"/v1/langTranslate/groupList"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for LangTranslateService service

type LangTranslateService interface {
	//创建
	Create(ctx context.Context, in *LangTranslate, opts ...client.CallOption) (*Response, error)
	//批量保存
	BatchCreate(ctx context.Context, in *BatchSaveTranslate, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *LangTranslate, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *LangTranslate, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *LangTranslateBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *LangTranslate, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *LangTranslate, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *LangTranslateUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *LangTranslateFilter, opts ...client.CallOption) (*LangTranslateResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *LangTranslateFilter, opts ...client.CallOption) (*LangTranslateResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *LangTranslateListRequest, opts ...client.CallOption) (*LangTranslateResponse, error)
	//查找，支持分页，可返回多条数据
	GroupLists(ctx context.Context, in *LangTranslateListRequest, opts ...client.CallOption) (*LangTranslateGroupResponse, error)
}

type langTranslateService struct {
	c    client.Client
	name string
}

func NewLangTranslateService(name string, c client.Client) LangTranslateService {
	return &langTranslateService{
		c:    c,
		name: name,
	}
}

func (c *langTranslateService) Create(ctx context.Context, in *LangTranslate, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangTranslateService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langTranslateService) BatchCreate(ctx context.Context, in *BatchSaveTranslate, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangTranslateService.BatchCreate", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langTranslateService) Delete(ctx context.Context, in *LangTranslate, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangTranslateService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langTranslateService) DeleteById(ctx context.Context, in *LangTranslate, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangTranslateService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langTranslateService) DeleteByIds(ctx context.Context, in *LangTranslateBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangTranslateService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langTranslateService) Update(ctx context.Context, in *LangTranslate, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangTranslateService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langTranslateService) UpdateAll(ctx context.Context, in *LangTranslate, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangTranslateService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langTranslateService) UpdateFields(ctx context.Context, in *LangTranslateUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangTranslateService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langTranslateService) FindById(ctx context.Context, in *LangTranslateFilter, opts ...client.CallOption) (*LangTranslateResponse, error) {
	req := c.c.NewRequest(c.name, "LangTranslateService.FindById", in)
	out := new(LangTranslateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langTranslateService) Find(ctx context.Context, in *LangTranslateFilter, opts ...client.CallOption) (*LangTranslateResponse, error) {
	req := c.c.NewRequest(c.name, "LangTranslateService.Find", in)
	out := new(LangTranslateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langTranslateService) Lists(ctx context.Context, in *LangTranslateListRequest, opts ...client.CallOption) (*LangTranslateResponse, error) {
	req := c.c.NewRequest(c.name, "LangTranslateService.Lists", in)
	out := new(LangTranslateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langTranslateService) GroupLists(ctx context.Context, in *LangTranslateListRequest, opts ...client.CallOption) (*LangTranslateGroupResponse, error) {
	req := c.c.NewRequest(c.name, "LangTranslateService.GroupLists", in)
	out := new(LangTranslateGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LangTranslateService service

type LangTranslateServiceHandler interface {
	//创建
	Create(context.Context, *LangTranslate, *Response) error
	//批量保存
	BatchCreate(context.Context, *BatchSaveTranslate, *Response) error
	//匹配多条件删除
	Delete(context.Context, *LangTranslate, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *LangTranslate, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *LangTranslateBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *LangTranslate, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *LangTranslate, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *LangTranslateUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *LangTranslateFilter, *LangTranslateResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *LangTranslateFilter, *LangTranslateResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *LangTranslateListRequest, *LangTranslateResponse) error
	//查找，支持分页，可返回多条数据
	GroupLists(context.Context, *LangTranslateListRequest, *LangTranslateGroupResponse) error
}

func RegisterLangTranslateServiceHandler(s server.Server, hdlr LangTranslateServiceHandler, opts ...server.HandlerOption) error {
	type langTranslateService interface {
		Create(ctx context.Context, in *LangTranslate, out *Response) error
		BatchCreate(ctx context.Context, in *BatchSaveTranslate, out *Response) error
		Delete(ctx context.Context, in *LangTranslate, out *Response) error
		DeleteById(ctx context.Context, in *LangTranslate, out *Response) error
		DeleteByIds(ctx context.Context, in *LangTranslateBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *LangTranslate, out *Response) error
		UpdateAll(ctx context.Context, in *LangTranslate, out *Response) error
		UpdateFields(ctx context.Context, in *LangTranslateUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *LangTranslateFilter, out *LangTranslateResponse) error
		Find(ctx context.Context, in *LangTranslateFilter, out *LangTranslateResponse) error
		Lists(ctx context.Context, in *LangTranslateListRequest, out *LangTranslateResponse) error
		GroupLists(ctx context.Context, in *LangTranslateListRequest, out *LangTranslateGroupResponse) error
	}
	type LangTranslateService struct {
		langTranslateService
	}
	h := &langTranslateServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangTranslateService.Create",
		Path:    []string{"/v1/langTranslate/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangTranslateService.BatchCreate",
		Path:    []string{"/v1/langTranslate/batchCreate"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangTranslateService.Delete",
		Path:    []string{"/v1/langTranslate/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangTranslateService.DeleteById",
		Path:    []string{"/v1/langTranslate/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangTranslateService.DeleteByIds",
		Path:    []string{"/v1/langTranslate/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangTranslateService.Update",
		Path:    []string{"/v1/langTranslate/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangTranslateService.UpdateAll",
		Path:    []string{"/v1/langTranslate/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangTranslateService.UpdateFields",
		Path:    []string{"/v1/langTranslate/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangTranslateService.FindById",
		Path:    []string{"/v1/langTranslate/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangTranslateService.Find",
		Path:    []string{"/v1/langTranslate/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangTranslateService.Lists",
		Path:    []string{"/v1/langTranslate/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangTranslateService.GroupLists",
		Path:    []string{"/v1/langTranslate/groupList"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&LangTranslateService{h}, opts...))
}

type langTranslateServiceHandler struct {
	LangTranslateServiceHandler
}

func (h *langTranslateServiceHandler) Create(ctx context.Context, in *LangTranslate, out *Response) error {
	return h.LangTranslateServiceHandler.Create(ctx, in, out)
}

func (h *langTranslateServiceHandler) BatchCreate(ctx context.Context, in *BatchSaveTranslate, out *Response) error {
	return h.LangTranslateServiceHandler.BatchCreate(ctx, in, out)
}

func (h *langTranslateServiceHandler) Delete(ctx context.Context, in *LangTranslate, out *Response) error {
	return h.LangTranslateServiceHandler.Delete(ctx, in, out)
}

func (h *langTranslateServiceHandler) DeleteById(ctx context.Context, in *LangTranslate, out *Response) error {
	return h.LangTranslateServiceHandler.DeleteById(ctx, in, out)
}

func (h *langTranslateServiceHandler) DeleteByIds(ctx context.Context, in *LangTranslateBatchDeleteRequest, out *Response) error {
	return h.LangTranslateServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *langTranslateServiceHandler) Update(ctx context.Context, in *LangTranslate, out *Response) error {
	return h.LangTranslateServiceHandler.Update(ctx, in, out)
}

func (h *langTranslateServiceHandler) UpdateAll(ctx context.Context, in *LangTranslate, out *Response) error {
	return h.LangTranslateServiceHandler.UpdateAll(ctx, in, out)
}

func (h *langTranslateServiceHandler) UpdateFields(ctx context.Context, in *LangTranslateUpdateFieldsRequest, out *Response) error {
	return h.LangTranslateServiceHandler.UpdateFields(ctx, in, out)
}

func (h *langTranslateServiceHandler) FindById(ctx context.Context, in *LangTranslateFilter, out *LangTranslateResponse) error {
	return h.LangTranslateServiceHandler.FindById(ctx, in, out)
}

func (h *langTranslateServiceHandler) Find(ctx context.Context, in *LangTranslateFilter, out *LangTranslateResponse) error {
	return h.LangTranslateServiceHandler.Find(ctx, in, out)
}

func (h *langTranslateServiceHandler) Lists(ctx context.Context, in *LangTranslateListRequest, out *LangTranslateResponse) error {
	return h.LangTranslateServiceHandler.Lists(ctx, in, out)
}

func (h *langTranslateServiceHandler) GroupLists(ctx context.Context, in *LangTranslateListRequest, out *LangTranslateGroupResponse) error {
	return h.LangTranslateServiceHandler.GroupLists(ctx, in, out)
}
