// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: opm_thing_model_service.proto

package protosService

import (
	fmt "fmt"
	math "math"

	proto "google.golang.org/protobuf/proto"

	context "context"

	api "go-micro.dev/v4/api"

	client "go-micro.dev/v4/client"

	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpmThingModelService service

func NewOpmThingModelServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpmThingModelService.Create",
			Path:    []string{"/v1/opmThingModel/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmThingModelService.Delete",
			Path:    []string{"/v1/opmThingModel/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmThingModelService.DeleteById",
			Path:    []string{"/v1/opmThingModel/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmThingModelService.DeleteByIds",
			Path:    []string{"/v1/opmThingModel/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmThingModelService.Update",
			Path:    []string{"/v1/opmThingModel/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmThingModelService.UpdateAll",
			Path:    []string{"/v1/opmThingModel/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmThingModelService.UpdateFields",
			Path:    []string{"/v1/opmThingModel/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmThingModelService.FindById",
			Path:    []string{"/v1/opmThingModel/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmThingModelService.Find",
			Path:    []string{"/v1/opmThingModel/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmThingModelService.Lists",
			Path:    []string{"/v1/opmThingModel/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmThingModelService.ProductThingModel",
			Path:    []string{"/v1/opmThingModel/productThingModel"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmThingModelService.StandardThingModel",
			Path:    []string{"/v1/opmThingModel/standardThingModel"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmThingModelService.DeleteThingModel",
			Path:    []string{"/v1/opmThingModel/deleteThingModel"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmThingModelService.SetThingsModelSceneFunc",
			Path:    []string{"/v1/opmThingModel/setThingsModelSceneFunc"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmThingModelService.SetAppointmentFunc",
			Path:    []string{"/v1/opmThingModel/setAppointmentFunc"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmThingModelService.SetFuncLevel",
			Path:    []string{"/v1/opmThingModel/setFuncLevel"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmThingModelService.SetFuncSort",
			Path:    []string{"/v1/opmThingModel/setFuncSort"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpmThingModelService service

type OpmThingModelService interface {
	//创建
	Create(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpmThingModelBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpmThingModelUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpmThingModelFilter, opts ...client.CallOption) (*OpmThingModelResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpmThingModelFilter, opts ...client.CallOption) (*OpmThingModelResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpmThingModelListRequest, opts ...client.CallOption) (*OpmThingModelResponse, error)
	//查询产品基础物模型数据
	ProductThingModel(ctx context.Context, in *OpmThingModelByProductRequest, opts ...client.CallOption) (*OpmThingModelByProductResponse, error)
	//查询产品基础物模型数据
	StandardThingModel(ctx context.Context, in *OpmThingModelByProductRequest, opts ...client.CallOption) (*OpmThingModelByProductResponse, error)
	//删除物理模型项通用方法
	DeleteThingModel(ctx context.Context, in *OpmThingModelDeleteRequest, opts ...client.CallOption) (*Response, error)
	//设置场景功能
	SetThingsModelSceneFunc(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error)
	//设置预约规则
	SetAppointmentFunc(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error)
	//设置功能层级
	SetFuncLevel(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error)
	//设置功能排序
	SetFuncSort(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error)
}

type opmThingModelService struct {
	c    client.Client
	name string
}

func NewOpmThingModelService(name string, c client.Client) OpmThingModelService {
	return &opmThingModelService{
		c:    c,
		name: name,
	}
}

func (c *opmThingModelService) Create(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmThingModelService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmThingModelService) Delete(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmThingModelService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmThingModelService) DeleteById(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmThingModelService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmThingModelService) DeleteByIds(ctx context.Context, in *OpmThingModelBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmThingModelService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmThingModelService) Update(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmThingModelService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmThingModelService) UpdateAll(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmThingModelService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmThingModelService) UpdateFields(ctx context.Context, in *OpmThingModelUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmThingModelService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmThingModelService) FindById(ctx context.Context, in *OpmThingModelFilter, opts ...client.CallOption) (*OpmThingModelResponse, error) {
	req := c.c.NewRequest(c.name, "OpmThingModelService.FindById", in)
	out := new(OpmThingModelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmThingModelService) Find(ctx context.Context, in *OpmThingModelFilter, opts ...client.CallOption) (*OpmThingModelResponse, error) {
	req := c.c.NewRequest(c.name, "OpmThingModelService.Find", in)
	out := new(OpmThingModelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmThingModelService) Lists(ctx context.Context, in *OpmThingModelListRequest, opts ...client.CallOption) (*OpmThingModelResponse, error) {
	req := c.c.NewRequest(c.name, "OpmThingModelService.Lists", in)
	out := new(OpmThingModelResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmThingModelService) ProductThingModel(ctx context.Context, in *OpmThingModelByProductRequest, opts ...client.CallOption) (*OpmThingModelByProductResponse, error) {
	req := c.c.NewRequest(c.name, "OpmThingModelService.ProductThingModel", in)
	out := new(OpmThingModelByProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmThingModelService) StandardThingModel(ctx context.Context, in *OpmThingModelByProductRequest, opts ...client.CallOption) (*OpmThingModelByProductResponse, error) {
	req := c.c.NewRequest(c.name, "OpmThingModelService.StandardThingModel", in)
	out := new(OpmThingModelByProductResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmThingModelService) DeleteThingModel(ctx context.Context, in *OpmThingModelDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmThingModelService.DeleteThingModel", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmThingModelService) SetThingsModelSceneFunc(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmThingModelService.SetThingsModelSceneFunc", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmThingModelService) SetAppointmentFunc(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmThingModelService.SetAppointmentFunc", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmThingModelService) SetFuncLevel(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmThingModelService.SetFuncLevel", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmThingModelService) SetFuncSort(ctx context.Context, in *OpmThingModel, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmThingModelService.SetFuncSort", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpmThingModelService service

type OpmThingModelServiceHandler interface {
	//创建
	Create(context.Context, *OpmThingModel, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpmThingModel, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpmThingModel, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpmThingModelBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpmThingModel, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpmThingModel, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpmThingModelUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpmThingModelFilter, *OpmThingModelResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpmThingModelFilter, *OpmThingModelResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpmThingModelListRequest, *OpmThingModelResponse) error
	//查询产品基础物模型数据
	ProductThingModel(context.Context, *OpmThingModelByProductRequest, *OpmThingModelByProductResponse) error
	//查询产品基础物模型数据
	StandardThingModel(context.Context, *OpmThingModelByProductRequest, *OpmThingModelByProductResponse) error
	//删除物理模型项通用方法
	DeleteThingModel(context.Context, *OpmThingModelDeleteRequest, *Response) error
	//设置场景功能
	SetThingsModelSceneFunc(context.Context, *OpmThingModel, *Response) error
	//设置预约规则
	SetAppointmentFunc(context.Context, *OpmThingModel, *Response) error
	//设置功能层级
	SetFuncLevel(context.Context, *OpmThingModel, *Response) error
	//设置功能排序
	SetFuncSort(context.Context, *OpmThingModel, *Response) error
}

func RegisterOpmThingModelServiceHandler(s server.Server, hdlr OpmThingModelServiceHandler, opts ...server.HandlerOption) error {
	type opmThingModelService interface {
		Create(ctx context.Context, in *OpmThingModel, out *Response) error
		Delete(ctx context.Context, in *OpmThingModel, out *Response) error
		DeleteById(ctx context.Context, in *OpmThingModel, out *Response) error
		DeleteByIds(ctx context.Context, in *OpmThingModelBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpmThingModel, out *Response) error
		UpdateAll(ctx context.Context, in *OpmThingModel, out *Response) error
		UpdateFields(ctx context.Context, in *OpmThingModelUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpmThingModelFilter, out *OpmThingModelResponse) error
		Find(ctx context.Context, in *OpmThingModelFilter, out *OpmThingModelResponse) error
		Lists(ctx context.Context, in *OpmThingModelListRequest, out *OpmThingModelResponse) error
		ProductThingModel(ctx context.Context, in *OpmThingModelByProductRequest, out *OpmThingModelByProductResponse) error
		StandardThingModel(ctx context.Context, in *OpmThingModelByProductRequest, out *OpmThingModelByProductResponse) error
		DeleteThingModel(ctx context.Context, in *OpmThingModelDeleteRequest, out *Response) error
		SetThingsModelSceneFunc(ctx context.Context, in *OpmThingModel, out *Response) error
		SetAppointmentFunc(ctx context.Context, in *OpmThingModel, out *Response) error
		SetFuncLevel(ctx context.Context, in *OpmThingModel, out *Response) error
		SetFuncSort(ctx context.Context, in *OpmThingModel, out *Response) error
	}
	type OpmThingModelService struct {
		opmThingModelService
	}
	h := &opmThingModelServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmThingModelService.Create",
		Path:    []string{"/v1/opmThingModel/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmThingModelService.Delete",
		Path:    []string{"/v1/opmThingModel/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmThingModelService.DeleteById",
		Path:    []string{"/v1/opmThingModel/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmThingModelService.DeleteByIds",
		Path:    []string{"/v1/opmThingModel/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmThingModelService.Update",
		Path:    []string{"/v1/opmThingModel/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmThingModelService.UpdateAll",
		Path:    []string{"/v1/opmThingModel/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmThingModelService.UpdateFields",
		Path:    []string{"/v1/opmThingModel/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmThingModelService.FindById",
		Path:    []string{"/v1/opmThingModel/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmThingModelService.Find",
		Path:    []string{"/v1/opmThingModel/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmThingModelService.Lists",
		Path:    []string{"/v1/opmThingModel/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmThingModelService.ProductThingModel",
		Path:    []string{"/v1/opmThingModel/productThingModel"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmThingModelService.StandardThingModel",
		Path:    []string{"/v1/opmThingModel/standardThingModel"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmThingModelService.DeleteThingModel",
		Path:    []string{"/v1/opmThingModel/deleteThingModel"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmThingModelService.SetThingsModelSceneFunc",
		Path:    []string{"/v1/opmThingModel/setThingsModelSceneFunc"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmThingModelService.SetAppointmentFunc",
		Path:    []string{"/v1/opmThingModel/setAppointmentFunc"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmThingModelService.SetFuncLevel",
		Path:    []string{"/v1/opmThingModel/setFuncLevel"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmThingModelService.SetFuncSort",
		Path:    []string{"/v1/opmThingModel/setFuncSort"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpmThingModelService{h}, opts...))
}

type opmThingModelServiceHandler struct {
	OpmThingModelServiceHandler
}

func (h *opmThingModelServiceHandler) Create(ctx context.Context, in *OpmThingModel, out *Response) error {
	return h.OpmThingModelServiceHandler.Create(ctx, in, out)
}

func (h *opmThingModelServiceHandler) Delete(ctx context.Context, in *OpmThingModel, out *Response) error {
	return h.OpmThingModelServiceHandler.Delete(ctx, in, out)
}

func (h *opmThingModelServiceHandler) DeleteById(ctx context.Context, in *OpmThingModel, out *Response) error {
	return h.OpmThingModelServiceHandler.DeleteById(ctx, in, out)
}

func (h *opmThingModelServiceHandler) DeleteByIds(ctx context.Context, in *OpmThingModelBatchDeleteRequest, out *Response) error {
	return h.OpmThingModelServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *opmThingModelServiceHandler) Update(ctx context.Context, in *OpmThingModel, out *Response) error {
	return h.OpmThingModelServiceHandler.Update(ctx, in, out)
}

func (h *opmThingModelServiceHandler) UpdateAll(ctx context.Context, in *OpmThingModel, out *Response) error {
	return h.OpmThingModelServiceHandler.UpdateAll(ctx, in, out)
}

func (h *opmThingModelServiceHandler) UpdateFields(ctx context.Context, in *OpmThingModelUpdateFieldsRequest, out *Response) error {
	return h.OpmThingModelServiceHandler.UpdateFields(ctx, in, out)
}

func (h *opmThingModelServiceHandler) FindById(ctx context.Context, in *OpmThingModelFilter, out *OpmThingModelResponse) error {
	return h.OpmThingModelServiceHandler.FindById(ctx, in, out)
}

func (h *opmThingModelServiceHandler) Find(ctx context.Context, in *OpmThingModelFilter, out *OpmThingModelResponse) error {
	return h.OpmThingModelServiceHandler.Find(ctx, in, out)
}

func (h *opmThingModelServiceHandler) Lists(ctx context.Context, in *OpmThingModelListRequest, out *OpmThingModelResponse) error {
	return h.OpmThingModelServiceHandler.Lists(ctx, in, out)
}

func (h *opmThingModelServiceHandler) ProductThingModel(ctx context.Context, in *OpmThingModelByProductRequest, out *OpmThingModelByProductResponse) error {
	return h.OpmThingModelServiceHandler.ProductThingModel(ctx, in, out)
}

func (h *opmThingModelServiceHandler) StandardThingModel(ctx context.Context, in *OpmThingModelByProductRequest, out *OpmThingModelByProductResponse) error {
	return h.OpmThingModelServiceHandler.StandardThingModel(ctx, in, out)
}

func (h *opmThingModelServiceHandler) DeleteThingModel(ctx context.Context, in *OpmThingModelDeleteRequest, out *Response) error {
	return h.OpmThingModelServiceHandler.DeleteThingModel(ctx, in, out)
}

func (h *opmThingModelServiceHandler) SetThingsModelSceneFunc(ctx context.Context, in *OpmThingModel, out *Response) error {
	return h.OpmThingModelServiceHandler.SetThingsModelSceneFunc(ctx, in, out)
}

func (h *opmThingModelServiceHandler) SetAppointmentFunc(ctx context.Context, in *OpmThingModel, out *Response) error {
	return h.OpmThingModelServiceHandler.SetAppointmentFunc(ctx, in, out)
}

func (h *opmThingModelServiceHandler) SetFuncLevel(ctx context.Context, in *OpmThingModel, out *Response) error {
	return h.OpmThingModelServiceHandler.SetFuncLevel(ctx, in, out)
}

func (h *opmThingModelServiceHandler) SetFuncSort(ctx context.Context, in *OpmThingModel, out *Response) error {
	return h.OpmThingModelServiceHandler.SetFuncSort(ctx, in, out)
}
