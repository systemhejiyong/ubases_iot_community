// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: mp_message_push_service.gen.proto

package protosService

import (
	fmt "fmt"
	math "math"

	proto "google.golang.org/protobuf/proto"

	context "context"

	api "go-micro.dev/v4/api"

	client "go-micro.dev/v4/client"

	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MpMessagePushService service

func NewMpMessagePushServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "MpMessagePushService.Create",
			Path:    []string{"/v1/mpMessagePush/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushService.Delete",
			Path:    []string{"/v1/mpMessagePush/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushService.DeleteById",
			Path:    []string{"/v1/mpMessagePush/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushService.DeleteByIds",
			Path:    []string{"/v1/mpMessagePush/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushService.Update",
			Path:    []string{"/v1/mpMessagePush/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushService.UpdateAll",
			Path:    []string{"/v1/mpMessagePush/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushService.UpdateFields",
			Path:    []string{"/v1/mpMessagePush/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushService.FindById",
			Path:    []string{"/v1/mpMessagePush/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushService.Find",
			Path:    []string{"/v1/mpMessagePush/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushService.Lists",
			Path:    []string{"/v1/mpMessagePush/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for MpMessagePushService service

type MpMessagePushService interface {
	//创建
	Create(ctx context.Context, in *MpMessagePush, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *MpMessagePush, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *MpMessagePush, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *MpMessagePushBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *MpMessagePush, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *MpMessagePush, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *MpMessagePushUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *MpMessagePushFilter, opts ...client.CallOption) (*MpMessagePushResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *MpMessagePushFilter, opts ...client.CallOption) (*MpMessagePushResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *MpMessagePushListRequest, opts ...client.CallOption) (*MpMessagePushResponse, error)
}

type mpMessagePushService struct {
	c    client.Client
	name string
}

func NewMpMessagePushService(name string, c client.Client) MpMessagePushService {
	return &mpMessagePushService{
		c:    c,
		name: name,
	}
}

func (c *mpMessagePushService) Create(ctx context.Context, in *MpMessagePush, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushService) Delete(ctx context.Context, in *MpMessagePush, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushService) DeleteById(ctx context.Context, in *MpMessagePush, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushService) DeleteByIds(ctx context.Context, in *MpMessagePushBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushService) Update(ctx context.Context, in *MpMessagePush, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushService) UpdateAll(ctx context.Context, in *MpMessagePush, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushService) UpdateFields(ctx context.Context, in *MpMessagePushUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushService) FindById(ctx context.Context, in *MpMessagePushFilter, opts ...client.CallOption) (*MpMessagePushResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushService.FindById", in)
	out := new(MpMessagePushResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushService) Find(ctx context.Context, in *MpMessagePushFilter, opts ...client.CallOption) (*MpMessagePushResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushService.Find", in)
	out := new(MpMessagePushResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushService) Lists(ctx context.Context, in *MpMessagePushListRequest, opts ...client.CallOption) (*MpMessagePushResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushService.Lists", in)
	out := new(MpMessagePushResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MpMessagePushService service

type MpMessagePushServiceHandler interface {
	//创建
	Create(context.Context, *MpMessagePush, *Response) error
	//匹配多条件删除
	Delete(context.Context, *MpMessagePush, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *MpMessagePush, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *MpMessagePushBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *MpMessagePush, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *MpMessagePush, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *MpMessagePushUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *MpMessagePushFilter, *MpMessagePushResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *MpMessagePushFilter, *MpMessagePushResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *MpMessagePushListRequest, *MpMessagePushResponse) error
}

func RegisterMpMessagePushServiceHandler(s server.Server, hdlr MpMessagePushServiceHandler, opts ...server.HandlerOption) error {
	type mpMessagePushService interface {
		Create(ctx context.Context, in *MpMessagePush, out *Response) error
		Delete(ctx context.Context, in *MpMessagePush, out *Response) error
		DeleteById(ctx context.Context, in *MpMessagePush, out *Response) error
		DeleteByIds(ctx context.Context, in *MpMessagePushBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *MpMessagePush, out *Response) error
		UpdateAll(ctx context.Context, in *MpMessagePush, out *Response) error
		UpdateFields(ctx context.Context, in *MpMessagePushUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *MpMessagePushFilter, out *MpMessagePushResponse) error
		Find(ctx context.Context, in *MpMessagePushFilter, out *MpMessagePushResponse) error
		Lists(ctx context.Context, in *MpMessagePushListRequest, out *MpMessagePushResponse) error
	}
	type MpMessagePushService struct {
		mpMessagePushService
	}
	h := &mpMessagePushServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushService.Create",
		Path:    []string{"/v1/mpMessagePush/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushService.Delete",
		Path:    []string{"/v1/mpMessagePush/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushService.DeleteById",
		Path:    []string{"/v1/mpMessagePush/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushService.DeleteByIds",
		Path:    []string{"/v1/mpMessagePush/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushService.Update",
		Path:    []string{"/v1/mpMessagePush/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushService.UpdateAll",
		Path:    []string{"/v1/mpMessagePush/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushService.UpdateFields",
		Path:    []string{"/v1/mpMessagePush/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushService.FindById",
		Path:    []string{"/v1/mpMessagePush/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushService.Find",
		Path:    []string{"/v1/mpMessagePush/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushService.Lists",
		Path:    []string{"/v1/mpMessagePush/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&MpMessagePushService{h}, opts...))
}

type mpMessagePushServiceHandler struct {
	MpMessagePushServiceHandler
}

func (h *mpMessagePushServiceHandler) Create(ctx context.Context, in *MpMessagePush, out *Response) error {
	return h.MpMessagePushServiceHandler.Create(ctx, in, out)
}

func (h *mpMessagePushServiceHandler) Delete(ctx context.Context, in *MpMessagePush, out *Response) error {
	return h.MpMessagePushServiceHandler.Delete(ctx, in, out)
}

func (h *mpMessagePushServiceHandler) DeleteById(ctx context.Context, in *MpMessagePush, out *Response) error {
	return h.MpMessagePushServiceHandler.DeleteById(ctx, in, out)
}

func (h *mpMessagePushServiceHandler) DeleteByIds(ctx context.Context, in *MpMessagePushBatchDeleteRequest, out *Response) error {
	return h.MpMessagePushServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *mpMessagePushServiceHandler) Update(ctx context.Context, in *MpMessagePush, out *Response) error {
	return h.MpMessagePushServiceHandler.Update(ctx, in, out)
}

func (h *mpMessagePushServiceHandler) UpdateAll(ctx context.Context, in *MpMessagePush, out *Response) error {
	return h.MpMessagePushServiceHandler.UpdateAll(ctx, in, out)
}

func (h *mpMessagePushServiceHandler) UpdateFields(ctx context.Context, in *MpMessagePushUpdateFieldsRequest, out *Response) error {
	return h.MpMessagePushServiceHandler.UpdateFields(ctx, in, out)
}

func (h *mpMessagePushServiceHandler) FindById(ctx context.Context, in *MpMessagePushFilter, out *MpMessagePushResponse) error {
	return h.MpMessagePushServiceHandler.FindById(ctx, in, out)
}

func (h *mpMessagePushServiceHandler) Find(ctx context.Context, in *MpMessagePushFilter, out *MpMessagePushResponse) error {
	return h.MpMessagePushServiceHandler.Find(ctx, in, out)
}

func (h *mpMessagePushServiceHandler) Lists(ctx context.Context, in *MpMessagePushListRequest, out *MpMessagePushResponse) error {
	return h.MpMessagePushServiceHandler.Lists(ctx, in, out)
}
