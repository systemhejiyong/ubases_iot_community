// Code generated by sgen,2023-10-11 08:22:20. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: opm_panel_font_asset_model.gen.proto

package protosService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//来源于数据表
type OpmPanelFontAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:;comment:;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"builtin" gorm:"default:0：非内置；1：内置;comment:0：非内置；1：内置;"
	Builtin int32 `protobuf:"varint,101,opt,name=builtin,proto3" json:"builtin,omitempty"`
	// @inject_tag: json:"fileName" gorm:"default:文件名;comment:文件名;size:64;"
	FileName string `protobuf:"bytes,102,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// @inject_tag: json:"fontName" gorm:"default:字体名称;comment:字体名称;size:64;"
	FontName string `protobuf:"bytes,103,opt,name=fontName,proto3" json:"fontName,omitempty"`
	// @inject_tag: json:"fontKey" gorm:"default:字体key;comment:字体key;size:10;"
	FontKey string `protobuf:"bytes,104,opt,name=fontKey,proto3" json:"fontKey,omitempty"`
	// @inject_tag: json:"assetUrl" gorm:"default:资源OSS下载地址;comment:资源OSS下载地址;size:256;"
	AssetUrl string `protobuf:"bytes,105,opt,name=assetUrl,proto3" json:"assetUrl,omitempty"`
	// @inject_tag: json:"default" gorm:"default:0：非默认；1：默认字体;comment:0：非默认；1：默认字体;"
	Default int32 `protobuf:"varint,106,opt,name=default,proto3" json:"default,omitempty"`
	// @inject_tag: json:"tenantId" gorm:"default:内置资源这里是空字符串;comment:内置资源这里是空字符串;size:10;"
	TenantId string `protobuf:"bytes,107,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:19;"
	CreatedBy int64 `protobuf:"varint,108,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,109,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:;comment:;"
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,110,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	// @inject_tag: json:"hasConfig"
	HasConfig bool `protobuf:"varint,111,opt,name=hasConfig,proto3" json:"hasConfig,omitempty"`
}

func (x *OpmPanelFontAsset) Reset() {
	*x = OpmPanelFontAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_font_asset_model_gen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelFontAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelFontAsset) ProtoMessage() {}

func (x *OpmPanelFontAsset) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_font_asset_model_gen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelFontAsset.ProtoReflect.Descriptor instead.
func (*OpmPanelFontAsset) Descriptor() ([]byte, []int) {
	return file_opm_panel_font_asset_model_gen_proto_rawDescGZIP(), []int{0}
}

func (x *OpmPanelFontAsset) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpmPanelFontAsset) GetBuiltin() int32 {
	if x != nil {
		return x.Builtin
	}
	return 0
}

func (x *OpmPanelFontAsset) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *OpmPanelFontAsset) GetFontName() string {
	if x != nil {
		return x.FontName
	}
	return ""
}

func (x *OpmPanelFontAsset) GetFontKey() string {
	if x != nil {
		return x.FontKey
	}
	return ""
}

func (x *OpmPanelFontAsset) GetAssetUrl() string {
	if x != nil {
		return x.AssetUrl
	}
	return ""
}

func (x *OpmPanelFontAsset) GetDefault() int32 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *OpmPanelFontAsset) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OpmPanelFontAsset) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *OpmPanelFontAsset) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OpmPanelFontAsset) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *OpmPanelFontAsset) GetHasConfig() bool {
	if x != nil {
		return x.HasConfig
	}
	return false
}

type OpmPanelFontAssetFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:;comment:;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"builtin" gorm:"default:0：非内置；1：内置;comment:0：非内置；1：内置;"
	Builtin int32 `protobuf:"varint,101,opt,name=builtin,proto3" json:"builtin,omitempty"`
	// @inject_tag: json:"fileName" gorm:"default:文件名;comment:文件名;size:64;"
	FileName string `protobuf:"bytes,102,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// @inject_tag: json:"fontName" gorm:"default:字体名称;comment:字体名称;size:64;"
	FontName string `protobuf:"bytes,103,opt,name=fontName,proto3" json:"fontName,omitempty"`
	// @inject_tag: json:"fontKey" gorm:"default:字体key;comment:字体key;size:10;"
	FontKey string `protobuf:"bytes,104,opt,name=fontKey,proto3" json:"fontKey,omitempty"`
	// @inject_tag: json:"assetUrl" gorm:"default:资源OSS下载地址;comment:资源OSS下载地址;size:256;"
	AssetUrl string `protobuf:"bytes,105,opt,name=assetUrl,proto3" json:"assetUrl,omitempty"`
	// @inject_tag: json:"default" gorm:"default:0：非默认；1：默认字体;comment:0：非默认；1：默认字体;"
	Default int32 `protobuf:"varint,106,opt,name=default,proto3" json:"default,omitempty"`
	// @inject_tag: json:"tenantId" gorm:"default:内置资源这里是空字符串;comment:内置资源这里是空字符串;size:10;"
	TenantId string `protobuf:"bytes,107,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// @inject_tag: json:"hasConfig"
	HasConfig bool `protobuf:"varint,111,opt,name=hasConfig,proto3" json:"hasConfig,omitempty"`
	// @inject_tag: json:"panelId"
	PanelId int64 `protobuf:"varint,112,opt,name=panelId,proto3" json:"panelId,omitempty"`
}

func (x *OpmPanelFontAssetFilter) Reset() {
	*x = OpmPanelFontAssetFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_font_asset_model_gen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelFontAssetFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelFontAssetFilter) ProtoMessage() {}

func (x *OpmPanelFontAssetFilter) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_font_asset_model_gen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelFontAssetFilter.ProtoReflect.Descriptor instead.
func (*OpmPanelFontAssetFilter) Descriptor() ([]byte, []int) {
	return file_opm_panel_font_asset_model_gen_proto_rawDescGZIP(), []int{1}
}

func (x *OpmPanelFontAssetFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpmPanelFontAssetFilter) GetBuiltin() int32 {
	if x != nil {
		return x.Builtin
	}
	return 0
}

func (x *OpmPanelFontAssetFilter) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *OpmPanelFontAssetFilter) GetFontName() string {
	if x != nil {
		return x.FontName
	}
	return ""
}

func (x *OpmPanelFontAssetFilter) GetFontKey() string {
	if x != nil {
		return x.FontKey
	}
	return ""
}

func (x *OpmPanelFontAssetFilter) GetAssetUrl() string {
	if x != nil {
		return x.AssetUrl
	}
	return ""
}

func (x *OpmPanelFontAssetFilter) GetDefault() int32 {
	if x != nil {
		return x.Default
	}
	return 0
}

func (x *OpmPanelFontAssetFilter) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OpmPanelFontAssetFilter) GetHasConfig() bool {
	if x != nil {
		return x.HasConfig
	}
	return false
}

func (x *OpmPanelFontAssetFilter) GetPanelId() int64 {
	if x != nil {
		return x.PanelId
	}
	return 0
}

type OpmPanelFontAssetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *OpmPanelFontAssetFilter `protobuf:"bytes,101,opt,name=query,proto3" json:"query,omitempty"`
	Page      int64                    `protobuf:"varint,102,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64                    `protobuf:"varint,103,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderKey  string                   `protobuf:"bytes,104,opt,name=orderKey,proto3" json:"orderKey,omitempty"`
	OrderDesc string                   `protobuf:"bytes,105,opt,name=orderDesc,proto3" json:"orderDesc,omitempty"`
	SearchKey string                   `protobuf:"bytes,106,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
}

func (x *OpmPanelFontAssetListRequest) Reset() {
	*x = OpmPanelFontAssetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_font_asset_model_gen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelFontAssetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelFontAssetListRequest) ProtoMessage() {}

func (x *OpmPanelFontAssetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_font_asset_model_gen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelFontAssetListRequest.ProtoReflect.Descriptor instead.
func (*OpmPanelFontAssetListRequest) Descriptor() ([]byte, []int) {
	return file_opm_panel_font_asset_model_gen_proto_rawDescGZIP(), []int{2}
}

func (x *OpmPanelFontAssetListRequest) GetQuery() *OpmPanelFontAssetFilter {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *OpmPanelFontAssetListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *OpmPanelFontAssetListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *OpmPanelFontAssetListRequest) GetOrderKey() string {
	if x != nil {
		return x.OrderKey
	}
	return ""
}

func (x *OpmPanelFontAssetListRequest) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *OpmPanelFontAssetListRequest) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

type OpmPanelFontAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string               `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64                `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*OpmPanelFontAsset `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *OpmPanelFontAssetResponse) Reset() {
	*x = OpmPanelFontAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_font_asset_model_gen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelFontAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelFontAssetResponse) ProtoMessage() {}

func (x *OpmPanelFontAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_font_asset_model_gen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelFontAssetResponse.ProtoReflect.Descriptor instead.
func (*OpmPanelFontAssetResponse) Descriptor() ([]byte, []int) {
	return file_opm_panel_font_asset_model_gen_proto_rawDescGZIP(), []int{3}
}

func (x *OpmPanelFontAssetResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OpmPanelFontAssetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OpmPanelFontAssetResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OpmPanelFontAssetResponse) GetData() []*OpmPanelFontAsset {
	if x != nil {
		return x.Data
	}
	return nil
}

type OpmPanelFontAssetUpdateFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string           `protobuf:"bytes,101,rep,name=fields,proto3" json:"fields,omitempty"`
	Data   *OpmPanelFontAsset `protobuf:"bytes,102,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OpmPanelFontAssetUpdateFieldsRequest) Reset() {
	*x = OpmPanelFontAssetUpdateFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_font_asset_model_gen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelFontAssetUpdateFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelFontAssetUpdateFieldsRequest) ProtoMessage() {}

func (x *OpmPanelFontAssetUpdateFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_font_asset_model_gen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelFontAssetUpdateFieldsRequest.ProtoReflect.Descriptor instead.
func (*OpmPanelFontAssetUpdateFieldsRequest) Descriptor() ([]byte, []int) {
	return file_opm_panel_font_asset_model_gen_proto_rawDescGZIP(), []int{4}
}

func (x *OpmPanelFontAssetUpdateFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *OpmPanelFontAssetUpdateFieldsRequest) GetData() *OpmPanelFontAsset {
	if x != nil {
		return x.Data
	}
	return nil
}

// 表模型主键，只能是整数或字符串，若生成错误，请检查数据库表主键是否正确。支持组合主键
type OpmPanelFontAssetPrimarykey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OpmPanelFontAssetPrimarykey) Reset() {
	*x = OpmPanelFontAssetPrimarykey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_font_asset_model_gen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelFontAssetPrimarykey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelFontAssetPrimarykey) ProtoMessage() {}

func (x *OpmPanelFontAssetPrimarykey) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_font_asset_model_gen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelFontAssetPrimarykey.ProtoReflect.Descriptor instead.
func (*OpmPanelFontAssetPrimarykey) Descriptor() ([]byte, []int) {
	return file_opm_panel_font_asset_model_gen_proto_rawDescGZIP(), []int{5}
}

func (x *OpmPanelFontAssetPrimarykey) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type OpmPanelFontAssetBatchDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*OpmPanelFontAssetPrimarykey `protobuf:"bytes,101,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *OpmPanelFontAssetBatchDeleteRequest) Reset() {
	*x = OpmPanelFontAssetBatchDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_panel_font_asset_model_gen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmPanelFontAssetBatchDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmPanelFontAssetBatchDeleteRequest) ProtoMessage() {}

func (x *OpmPanelFontAssetBatchDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_panel_font_asset_model_gen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmPanelFontAssetBatchDeleteRequest.ProtoReflect.Descriptor instead.
func (*OpmPanelFontAssetBatchDeleteRequest) Descriptor() ([]byte, []int) {
	return file_opm_panel_font_asset_model_gen_proto_rawDescGZIP(), []int{6}
}

func (x *OpmPanelFontAssetBatchDeleteRequest) GetKeys() []*OpmPanelFontAssetPrimarykey {
	if x != nil {
		return x.Keys
	}
	return nil
}

var File_opm_panel_font_asset_model_gen_proto protoreflect.FileDescriptor

var file_opm_panel_font_asset_model_gen_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6f, 0x70, 0x6d, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x6c, 0x5f, 0x66, 0x6f, 0x6e, 0x74,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x67, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x91, 0x03, 0x0a, 0x11, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6e,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69,
	0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x6e, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x9f, 0x02, 0x0a, 0x17, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65,
	0x6c, 0x46, 0x6f, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x6b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70,
	0x61, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x1c, 0x4f, 0x70, 0x6d, 0x50, 0x61,
	0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6e, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x4f, 0x70, 0x6d, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x68, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6e, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6e, 0x0a, 0x24, 0x4f, 0x70, 0x6d,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6e, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x2d, 0x0a, 0x1b, 0x4f, 0x70, 0x6d,
	0x50, 0x61, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x23, 0x4f, 0x70, 0x6d, 0x50,
	0x61, 0x6e, 0x65, 0x6c, 0x46, 0x6f, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50, 0x61, 0x6e, 0x65, 0x6c,
	0x46, 0x6f, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x6b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x3b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opm_panel_font_asset_model_gen_proto_rawDescOnce sync.Once
	file_opm_panel_font_asset_model_gen_proto_rawDescData = file_opm_panel_font_asset_model_gen_proto_rawDesc
)

func file_opm_panel_font_asset_model_gen_proto_rawDescGZIP() []byte {
	file_opm_panel_font_asset_model_gen_proto_rawDescOnce.Do(func() {
		file_opm_panel_font_asset_model_gen_proto_rawDescData = protoimpl.X.CompressGZIP(file_opm_panel_font_asset_model_gen_proto_rawDescData)
	})
	return file_opm_panel_font_asset_model_gen_proto_rawDescData
}

var file_opm_panel_font_asset_model_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_opm_panel_font_asset_model_gen_proto_goTypes = []interface{}{
	(*OpmPanelFontAsset)(nil),                    // 0: service.OpmPanelFontAsset
	(*OpmPanelFontAssetFilter)(nil),              // 1: service.OpmPanelFontAssetFilter
	(*OpmPanelFontAssetListRequest)(nil),         // 2: service.OpmPanelFontAssetListRequest
	(*OpmPanelFontAssetResponse)(nil),            // 3: service.OpmPanelFontAssetResponse
	(*OpmPanelFontAssetUpdateFieldsRequest)(nil), // 4: service.OpmPanelFontAssetUpdateFieldsRequest
	(*OpmPanelFontAssetPrimarykey)(nil),          // 5: service.OpmPanelFontAssetPrimarykey
	(*OpmPanelFontAssetBatchDeleteRequest)(nil),  // 6: service.OpmPanelFontAssetBatchDeleteRequest
	(*timestamppb.Timestamp)(nil),                // 7: google.protobuf.Timestamp
}
var file_opm_panel_font_asset_model_gen_proto_depIdxs = []int32{
	7, // 0: service.OpmPanelFontAsset.createdAt:type_name -> google.protobuf.Timestamp
	7, // 1: service.OpmPanelFontAsset.deletedAt:type_name -> google.protobuf.Timestamp
	1, // 2: service.OpmPanelFontAssetListRequest.query:type_name -> service.OpmPanelFontAssetFilter
	0, // 3: service.OpmPanelFontAssetResponse.data:type_name -> service.OpmPanelFontAsset
	0, // 4: service.OpmPanelFontAssetUpdateFieldsRequest.data:type_name -> service.OpmPanelFontAsset
	5, // 5: service.OpmPanelFontAssetBatchDeleteRequest.keys:type_name -> service.OpmPanelFontAssetPrimarykey
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_opm_panel_font_asset_model_gen_proto_init() }
func file_opm_panel_font_asset_model_gen_proto_init() {
	if File_opm_panel_font_asset_model_gen_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opm_panel_font_asset_model_gen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelFontAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_font_asset_model_gen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelFontAssetFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_font_asset_model_gen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelFontAssetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_font_asset_model_gen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelFontAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_font_asset_model_gen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelFontAssetUpdateFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_font_asset_model_gen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelFontAssetPrimarykey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_panel_font_asset_model_gen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmPanelFontAssetBatchDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opm_panel_font_asset_model_gen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opm_panel_font_asset_model_gen_proto_goTypes,
		DependencyIndexes: file_opm_panel_font_asset_model_gen_proto_depIdxs,
		MessageInfos:      file_opm_panel_font_asset_model_gen_proto_msgTypes,
	}.Build()
	File_opm_panel_font_asset_model_gen_proto = out.File
	file_opm_panel_font_asset_model_gen_proto_rawDesc = nil
	file_opm_panel_font_asset_model_gen_proto_goTypes = nil
	file_opm_panel_font_asset_model_gen_proto_depIdxs = nil
}
