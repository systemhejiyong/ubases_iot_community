// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: open_auth_quantity_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpenAuthQuantityService service

func NewOpenAuthQuantityServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpenAuthQuantityService.Create",
			Path:    []string{"/v1/openAuthQuantity/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenAuthQuantityService.Delete",
			Path:    []string{"/v1/openAuthQuantity/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenAuthQuantityService.DeleteById",
			Path:    []string{"/v1/openAuthQuantity/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenAuthQuantityService.DeleteByIds",
			Path:    []string{"/v1/openAuthQuantity/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenAuthQuantityService.Update",
			Path:    []string{"/v1/openAuthQuantity/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenAuthQuantityService.UpdateAll",
			Path:    []string{"/v1/openAuthQuantity/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenAuthQuantityService.UpdateFields",
			Path:    []string{"/v1/openAuthQuantity/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenAuthQuantityService.FindById",
			Path:    []string{"/v1/openAuthQuantity/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenAuthQuantityService.Find",
			Path:    []string{"/v1/openAuthQuantity/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenAuthQuantityService.Lists",
			Path:    []string{"/v1/openAuthQuantity/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenAuthQuantityService.GetCountByTenantId",
			Path:    []string{"/v1/openAuthQuantity/getCountByTenantId"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpenAuthQuantityService service

type OpenAuthQuantityService interface {
	//创建
	Create(ctx context.Context, in *OpenAuthQuantity, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpenAuthQuantity, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpenAuthQuantity, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpenAuthQuantityBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpenAuthQuantity, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpenAuthQuantity, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpenAuthQuantityUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpenAuthQuantityFilter, opts ...client.CallOption) (*OpenAuthQuantityResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpenAuthQuantityFilter, opts ...client.CallOption) (*OpenAuthQuantityResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpenAuthQuantityListRequest, opts ...client.CallOption) (*OpenAuthQuantityResponse, error)
	//获取当前租户下的授权设备总数
	GetCountByTenantId(ctx context.Context, in *OpenAuthQuantityFilter, opts ...client.CallOption) (*OpenAuthQuantityResponse, error)
}

type openAuthQuantityService struct {
	c    client.Client
	name string
}

func NewOpenAuthQuantityService(name string, c client.Client) OpenAuthQuantityService {
	return &openAuthQuantityService{
		c:    c,
		name: name,
	}
}

func (c *openAuthQuantityService) Create(ctx context.Context, in *OpenAuthQuantity, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenAuthQuantityService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAuthQuantityService) Delete(ctx context.Context, in *OpenAuthQuantity, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenAuthQuantityService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAuthQuantityService) DeleteById(ctx context.Context, in *OpenAuthQuantity, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenAuthQuantityService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAuthQuantityService) DeleteByIds(ctx context.Context, in *OpenAuthQuantityBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenAuthQuantityService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAuthQuantityService) Update(ctx context.Context, in *OpenAuthQuantity, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenAuthQuantityService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAuthQuantityService) UpdateAll(ctx context.Context, in *OpenAuthQuantity, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenAuthQuantityService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAuthQuantityService) UpdateFields(ctx context.Context, in *OpenAuthQuantityUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenAuthQuantityService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAuthQuantityService) FindById(ctx context.Context, in *OpenAuthQuantityFilter, opts ...client.CallOption) (*OpenAuthQuantityResponse, error) {
	req := c.c.NewRequest(c.name, "OpenAuthQuantityService.FindById", in)
	out := new(OpenAuthQuantityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAuthQuantityService) Find(ctx context.Context, in *OpenAuthQuantityFilter, opts ...client.CallOption) (*OpenAuthQuantityResponse, error) {
	req := c.c.NewRequest(c.name, "OpenAuthQuantityService.Find", in)
	out := new(OpenAuthQuantityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAuthQuantityService) Lists(ctx context.Context, in *OpenAuthQuantityListRequest, opts ...client.CallOption) (*OpenAuthQuantityResponse, error) {
	req := c.c.NewRequest(c.name, "OpenAuthQuantityService.Lists", in)
	out := new(OpenAuthQuantityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openAuthQuantityService) GetCountByTenantId(ctx context.Context, in *OpenAuthQuantityFilter, opts ...client.CallOption) (*OpenAuthQuantityResponse, error) {
	req := c.c.NewRequest(c.name, "OpenAuthQuantityService.GetCountByTenantId", in)
	out := new(OpenAuthQuantityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpenAuthQuantityService service

type OpenAuthQuantityServiceHandler interface {
	//创建
	Create(context.Context, *OpenAuthQuantity, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpenAuthQuantity, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpenAuthQuantity, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpenAuthQuantityBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpenAuthQuantity, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpenAuthQuantity, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpenAuthQuantityUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpenAuthQuantityFilter, *OpenAuthQuantityResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpenAuthQuantityFilter, *OpenAuthQuantityResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpenAuthQuantityListRequest, *OpenAuthQuantityResponse) error
	//获取当前租户下的授权设备总数
	GetCountByTenantId(context.Context, *OpenAuthQuantityFilter, *OpenAuthQuantityResponse) error
}

func RegisterOpenAuthQuantityServiceHandler(s server.Server, hdlr OpenAuthQuantityServiceHandler, opts ...server.HandlerOption) error {
	type openAuthQuantityService interface {
		Create(ctx context.Context, in *OpenAuthQuantity, out *Response) error
		Delete(ctx context.Context, in *OpenAuthQuantity, out *Response) error
		DeleteById(ctx context.Context, in *OpenAuthQuantity, out *Response) error
		DeleteByIds(ctx context.Context, in *OpenAuthQuantityBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpenAuthQuantity, out *Response) error
		UpdateAll(ctx context.Context, in *OpenAuthQuantity, out *Response) error
		UpdateFields(ctx context.Context, in *OpenAuthQuantityUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpenAuthQuantityFilter, out *OpenAuthQuantityResponse) error
		Find(ctx context.Context, in *OpenAuthQuantityFilter, out *OpenAuthQuantityResponse) error
		Lists(ctx context.Context, in *OpenAuthQuantityListRequest, out *OpenAuthQuantityResponse) error
		GetCountByTenantId(ctx context.Context, in *OpenAuthQuantityFilter, out *OpenAuthQuantityResponse) error
	}
	type OpenAuthQuantityService struct {
		openAuthQuantityService
	}
	h := &openAuthQuantityServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenAuthQuantityService.Create",
		Path:    []string{"/v1/openAuthQuantity/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenAuthQuantityService.Delete",
		Path:    []string{"/v1/openAuthQuantity/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenAuthQuantityService.DeleteById",
		Path:    []string{"/v1/openAuthQuantity/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenAuthQuantityService.DeleteByIds",
		Path:    []string{"/v1/openAuthQuantity/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenAuthQuantityService.Update",
		Path:    []string{"/v1/openAuthQuantity/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenAuthQuantityService.UpdateAll",
		Path:    []string{"/v1/openAuthQuantity/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenAuthQuantityService.UpdateFields",
		Path:    []string{"/v1/openAuthQuantity/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenAuthQuantityService.FindById",
		Path:    []string{"/v1/openAuthQuantity/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenAuthQuantityService.Find",
		Path:    []string{"/v1/openAuthQuantity/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenAuthQuantityService.Lists",
		Path:    []string{"/v1/openAuthQuantity/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenAuthQuantityService.GetCountByTenantId",
		Path:    []string{"/v1/openAuthQuantity/getCountByTenantId"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpenAuthQuantityService{h}, opts...))
}

type openAuthQuantityServiceHandler struct {
	OpenAuthQuantityServiceHandler
}

func (h *openAuthQuantityServiceHandler) Create(ctx context.Context, in *OpenAuthQuantity, out *Response) error {
	return h.OpenAuthQuantityServiceHandler.Create(ctx, in, out)
}

func (h *openAuthQuantityServiceHandler) Delete(ctx context.Context, in *OpenAuthQuantity, out *Response) error {
	return h.OpenAuthQuantityServiceHandler.Delete(ctx, in, out)
}

func (h *openAuthQuantityServiceHandler) DeleteById(ctx context.Context, in *OpenAuthQuantity, out *Response) error {
	return h.OpenAuthQuantityServiceHandler.DeleteById(ctx, in, out)
}

func (h *openAuthQuantityServiceHandler) DeleteByIds(ctx context.Context, in *OpenAuthQuantityBatchDeleteRequest, out *Response) error {
	return h.OpenAuthQuantityServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *openAuthQuantityServiceHandler) Update(ctx context.Context, in *OpenAuthQuantity, out *Response) error {
	return h.OpenAuthQuantityServiceHandler.Update(ctx, in, out)
}

func (h *openAuthQuantityServiceHandler) UpdateAll(ctx context.Context, in *OpenAuthQuantity, out *Response) error {
	return h.OpenAuthQuantityServiceHandler.UpdateAll(ctx, in, out)
}

func (h *openAuthQuantityServiceHandler) UpdateFields(ctx context.Context, in *OpenAuthQuantityUpdateFieldsRequest, out *Response) error {
	return h.OpenAuthQuantityServiceHandler.UpdateFields(ctx, in, out)
}

func (h *openAuthQuantityServiceHandler) FindById(ctx context.Context, in *OpenAuthQuantityFilter, out *OpenAuthQuantityResponse) error {
	return h.OpenAuthQuantityServiceHandler.FindById(ctx, in, out)
}

func (h *openAuthQuantityServiceHandler) Find(ctx context.Context, in *OpenAuthQuantityFilter, out *OpenAuthQuantityResponse) error {
	return h.OpenAuthQuantityServiceHandler.Find(ctx, in, out)
}

func (h *openAuthQuantityServiceHandler) Lists(ctx context.Context, in *OpenAuthQuantityListRequest, out *OpenAuthQuantityResponse) error {
	return h.OpenAuthQuantityServiceHandler.Lists(ctx, in, out)
}

func (h *openAuthQuantityServiceHandler) GetCountByTenantId(ctx context.Context, in *OpenAuthQuantityFilter, out *OpenAuthQuantityResponse) error {
	return h.OpenAuthQuantityServiceHandler.GetCountByTenantId(ctx, in, out)
}
