// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: open_company_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpenCompanyService service

func NewOpenCompanyServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpenCompanyService.Create",
			Path:    []string{"/v1/openCompany/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyService.Delete",
			Path:    []string{"/v1/openCompany/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyService.DeleteById",
			Path:    []string{"/v1/openCompany/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyService.DeleteByIds",
			Path:    []string{"/v1/openCompany/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyService.Update",
			Path:    []string{"/v1/openCompany/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyService.UpdateAll",
			Path:    []string{"/v1/openCompany/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyService.UpdateFields",
			Path:    []string{"/v1/openCompany/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyService.FindById",
			Path:    []string{"/v1/openCompany/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyService.Find",
			Path:    []string{"/v1/openCompany/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyService.Lists",
			Path:    []string{"/v1/openCompany/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyService.CompanyAuth",
			Path:    []string{"/v1/openCompany/companyauth"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpenCompanyService.OpenDevCompanyAuth",
			Path:    []string{"/v1/openCompany/opendevcompanyauth"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpenCompanyService service

type OpenCompanyService interface {
	//创建
	Create(ctx context.Context, in *OpenCompany, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpenCompany, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpenCompany, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpenCompanyBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpenCompany, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpenCompany, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpenCompanyUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpenCompanyFilter, opts ...client.CallOption) (*OpenCompanyResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpenCompanyFilter, opts ...client.CallOption) (*OpenCompanyResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpenCompanyListRequest, opts ...client.CallOption) (*OpenCompanyResponse, error)
	//企业认证
	CompanyAuth(ctx context.Context, in *OpenCompanyUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//开发者认证审核
	OpenDevCompanyAuth(ctx context.Context, in *OpenDevCompanyAuthRequest, opts ...client.CallOption) (*Response, error)
}

type openCompanyService struct {
	c    client.Client
	name string
}

func NewOpenCompanyService(name string, c client.Client) OpenCompanyService {
	return &openCompanyService{
		c:    c,
		name: name,
	}
}

func (c *openCompanyService) Create(ctx context.Context, in *OpenCompany, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyService) Delete(ctx context.Context, in *OpenCompany, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyService) DeleteById(ctx context.Context, in *OpenCompany, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyService) DeleteByIds(ctx context.Context, in *OpenCompanyBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyService) Update(ctx context.Context, in *OpenCompany, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyService) UpdateAll(ctx context.Context, in *OpenCompany, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyService) UpdateFields(ctx context.Context, in *OpenCompanyUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyService) FindById(ctx context.Context, in *OpenCompanyFilter, opts ...client.CallOption) (*OpenCompanyResponse, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyService.FindById", in)
	out := new(OpenCompanyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyService) Find(ctx context.Context, in *OpenCompanyFilter, opts ...client.CallOption) (*OpenCompanyResponse, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyService.Find", in)
	out := new(OpenCompanyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyService) Lists(ctx context.Context, in *OpenCompanyListRequest, opts ...client.CallOption) (*OpenCompanyResponse, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyService.Lists", in)
	out := new(OpenCompanyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyService) CompanyAuth(ctx context.Context, in *OpenCompanyUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyService.CompanyAuth", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openCompanyService) OpenDevCompanyAuth(ctx context.Context, in *OpenDevCompanyAuthRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpenCompanyService.OpenDevCompanyAuth", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpenCompanyService service

type OpenCompanyServiceHandler interface {
	//创建
	Create(context.Context, *OpenCompany, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpenCompany, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpenCompany, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpenCompanyBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpenCompany, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpenCompany, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpenCompanyUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpenCompanyFilter, *OpenCompanyResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpenCompanyFilter, *OpenCompanyResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpenCompanyListRequest, *OpenCompanyResponse) error
	//企业认证
	CompanyAuth(context.Context, *OpenCompanyUpdateFieldsRequest, *Response) error
	//开发者认证审核
	OpenDevCompanyAuth(context.Context, *OpenDevCompanyAuthRequest, *Response) error
}

func RegisterOpenCompanyServiceHandler(s server.Server, hdlr OpenCompanyServiceHandler, opts ...server.HandlerOption) error {
	type openCompanyService interface {
		Create(ctx context.Context, in *OpenCompany, out *Response) error
		Delete(ctx context.Context, in *OpenCompany, out *Response) error
		DeleteById(ctx context.Context, in *OpenCompany, out *Response) error
		DeleteByIds(ctx context.Context, in *OpenCompanyBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpenCompany, out *Response) error
		UpdateAll(ctx context.Context, in *OpenCompany, out *Response) error
		UpdateFields(ctx context.Context, in *OpenCompanyUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpenCompanyFilter, out *OpenCompanyResponse) error
		Find(ctx context.Context, in *OpenCompanyFilter, out *OpenCompanyResponse) error
		Lists(ctx context.Context, in *OpenCompanyListRequest, out *OpenCompanyResponse) error
		CompanyAuth(ctx context.Context, in *OpenCompanyUpdateFieldsRequest, out *Response) error
		OpenDevCompanyAuth(ctx context.Context, in *OpenDevCompanyAuthRequest, out *Response) error
	}
	type OpenCompanyService struct {
		openCompanyService
	}
	h := &openCompanyServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyService.Create",
		Path:    []string{"/v1/openCompany/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyService.Delete",
		Path:    []string{"/v1/openCompany/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyService.DeleteById",
		Path:    []string{"/v1/openCompany/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyService.DeleteByIds",
		Path:    []string{"/v1/openCompany/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyService.Update",
		Path:    []string{"/v1/openCompany/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyService.UpdateAll",
		Path:    []string{"/v1/openCompany/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyService.UpdateFields",
		Path:    []string{"/v1/openCompany/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyService.FindById",
		Path:    []string{"/v1/openCompany/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyService.Find",
		Path:    []string{"/v1/openCompany/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyService.Lists",
		Path:    []string{"/v1/openCompany/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyService.CompanyAuth",
		Path:    []string{"/v1/openCompany/companyauth"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpenCompanyService.OpenDevCompanyAuth",
		Path:    []string{"/v1/openCompany/opendevcompanyauth"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpenCompanyService{h}, opts...))
}

type openCompanyServiceHandler struct {
	OpenCompanyServiceHandler
}

func (h *openCompanyServiceHandler) Create(ctx context.Context, in *OpenCompany, out *Response) error {
	return h.OpenCompanyServiceHandler.Create(ctx, in, out)
}

func (h *openCompanyServiceHandler) Delete(ctx context.Context, in *OpenCompany, out *Response) error {
	return h.OpenCompanyServiceHandler.Delete(ctx, in, out)
}

func (h *openCompanyServiceHandler) DeleteById(ctx context.Context, in *OpenCompany, out *Response) error {
	return h.OpenCompanyServiceHandler.DeleteById(ctx, in, out)
}

func (h *openCompanyServiceHandler) DeleteByIds(ctx context.Context, in *OpenCompanyBatchDeleteRequest, out *Response) error {
	return h.OpenCompanyServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *openCompanyServiceHandler) Update(ctx context.Context, in *OpenCompany, out *Response) error {
	return h.OpenCompanyServiceHandler.Update(ctx, in, out)
}

func (h *openCompanyServiceHandler) UpdateAll(ctx context.Context, in *OpenCompany, out *Response) error {
	return h.OpenCompanyServiceHandler.UpdateAll(ctx, in, out)
}

func (h *openCompanyServiceHandler) UpdateFields(ctx context.Context, in *OpenCompanyUpdateFieldsRequest, out *Response) error {
	return h.OpenCompanyServiceHandler.UpdateFields(ctx, in, out)
}

func (h *openCompanyServiceHandler) FindById(ctx context.Context, in *OpenCompanyFilter, out *OpenCompanyResponse) error {
	return h.OpenCompanyServiceHandler.FindById(ctx, in, out)
}

func (h *openCompanyServiceHandler) Find(ctx context.Context, in *OpenCompanyFilter, out *OpenCompanyResponse) error {
	return h.OpenCompanyServiceHandler.Find(ctx, in, out)
}

func (h *openCompanyServiceHandler) Lists(ctx context.Context, in *OpenCompanyListRequest, out *OpenCompanyResponse) error {
	return h.OpenCompanyServiceHandler.Lists(ctx, in, out)
}

func (h *openCompanyServiceHandler) CompanyAuth(ctx context.Context, in *OpenCompanyUpdateFieldsRequest, out *Response) error {
	return h.OpenCompanyServiceHandler.CompanyAuth(ctx, in, out)
}

func (h *openCompanyServiceHandler) OpenDevCompanyAuth(ctx context.Context, in *OpenDevCompanyAuthRequest, out *Response) error {
	return h.OpenCompanyServiceHandler.OpenDevCompanyAuth(ctx, in, out)
}
