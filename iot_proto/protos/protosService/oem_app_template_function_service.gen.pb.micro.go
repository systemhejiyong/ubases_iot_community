// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: oem_app_template_function_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OemAppTemplateFunctionService service

func NewOemAppTemplateFunctionServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OemAppTemplateFunctionService.Create",
			Path:    []string{"/v1/oemAppTemplateFunction/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppTemplateFunctionService.Delete",
			Path:    []string{"/v1/oemAppTemplateFunction/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppTemplateFunctionService.DeleteById",
			Path:    []string{"/v1/oemAppTemplateFunction/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppTemplateFunctionService.DeleteByIds",
			Path:    []string{"/v1/oemAppTemplateFunction/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppTemplateFunctionService.Update",
			Path:    []string{"/v1/oemAppTemplateFunction/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppTemplateFunctionService.UpdateAll",
			Path:    []string{"/v1/oemAppTemplateFunction/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppTemplateFunctionService.UpdateFields",
			Path:    []string{"/v1/oemAppTemplateFunction/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppTemplateFunctionService.FindById",
			Path:    []string{"/v1/oemAppTemplateFunction/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppTemplateFunctionService.Find",
			Path:    []string{"/v1/oemAppTemplateFunction/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppTemplateFunctionService.Lists",
			Path:    []string{"/v1/oemAppTemplateFunction/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OemAppTemplateFunctionService service

type OemAppTemplateFunctionService interface {
	//创建
	Create(ctx context.Context, in *OemAppTemplateFunction, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OemAppTemplateFunction, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OemAppTemplateFunction, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OemAppTemplateFunctionBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OemAppTemplateFunction, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OemAppTemplateFunction, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OemAppTemplateFunctionUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OemAppTemplateFunctionFilter, opts ...client.CallOption) (*OemAppTemplateFunctionResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OemAppTemplateFunctionFilter, opts ...client.CallOption) (*OemAppTemplateFunctionResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OemAppTemplateFunctionListRequest, opts ...client.CallOption) (*OemAppTemplateFunctionResponse, error)
}

type oemAppTemplateFunctionService struct {
	c    client.Client
	name string
}

func NewOemAppTemplateFunctionService(name string, c client.Client) OemAppTemplateFunctionService {
	return &oemAppTemplateFunctionService{
		c:    c,
		name: name,
	}
}

func (c *oemAppTemplateFunctionService) Create(ctx context.Context, in *OemAppTemplateFunction, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppTemplateFunctionService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppTemplateFunctionService) Delete(ctx context.Context, in *OemAppTemplateFunction, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppTemplateFunctionService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppTemplateFunctionService) DeleteById(ctx context.Context, in *OemAppTemplateFunction, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppTemplateFunctionService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppTemplateFunctionService) DeleteByIds(ctx context.Context, in *OemAppTemplateFunctionBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppTemplateFunctionService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppTemplateFunctionService) Update(ctx context.Context, in *OemAppTemplateFunction, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppTemplateFunctionService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppTemplateFunctionService) UpdateAll(ctx context.Context, in *OemAppTemplateFunction, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppTemplateFunctionService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppTemplateFunctionService) UpdateFields(ctx context.Context, in *OemAppTemplateFunctionUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppTemplateFunctionService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppTemplateFunctionService) FindById(ctx context.Context, in *OemAppTemplateFunctionFilter, opts ...client.CallOption) (*OemAppTemplateFunctionResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppTemplateFunctionService.FindById", in)
	out := new(OemAppTemplateFunctionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppTemplateFunctionService) Find(ctx context.Context, in *OemAppTemplateFunctionFilter, opts ...client.CallOption) (*OemAppTemplateFunctionResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppTemplateFunctionService.Find", in)
	out := new(OemAppTemplateFunctionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppTemplateFunctionService) Lists(ctx context.Context, in *OemAppTemplateFunctionListRequest, opts ...client.CallOption) (*OemAppTemplateFunctionResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppTemplateFunctionService.Lists", in)
	out := new(OemAppTemplateFunctionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OemAppTemplateFunctionService service

type OemAppTemplateFunctionServiceHandler interface {
	//创建
	Create(context.Context, *OemAppTemplateFunction, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OemAppTemplateFunction, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OemAppTemplateFunction, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OemAppTemplateFunctionBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OemAppTemplateFunction, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OemAppTemplateFunction, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OemAppTemplateFunctionUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OemAppTemplateFunctionFilter, *OemAppTemplateFunctionResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OemAppTemplateFunctionFilter, *OemAppTemplateFunctionResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OemAppTemplateFunctionListRequest, *OemAppTemplateFunctionResponse) error
}

func RegisterOemAppTemplateFunctionServiceHandler(s server.Server, hdlr OemAppTemplateFunctionServiceHandler, opts ...server.HandlerOption) error {
	type oemAppTemplateFunctionService interface {
		Create(ctx context.Context, in *OemAppTemplateFunction, out *Response) error
		Delete(ctx context.Context, in *OemAppTemplateFunction, out *Response) error
		DeleteById(ctx context.Context, in *OemAppTemplateFunction, out *Response) error
		DeleteByIds(ctx context.Context, in *OemAppTemplateFunctionBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OemAppTemplateFunction, out *Response) error
		UpdateAll(ctx context.Context, in *OemAppTemplateFunction, out *Response) error
		UpdateFields(ctx context.Context, in *OemAppTemplateFunctionUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OemAppTemplateFunctionFilter, out *OemAppTemplateFunctionResponse) error
		Find(ctx context.Context, in *OemAppTemplateFunctionFilter, out *OemAppTemplateFunctionResponse) error
		Lists(ctx context.Context, in *OemAppTemplateFunctionListRequest, out *OemAppTemplateFunctionResponse) error
	}
	type OemAppTemplateFunctionService struct {
		oemAppTemplateFunctionService
	}
	h := &oemAppTemplateFunctionServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppTemplateFunctionService.Create",
		Path:    []string{"/v1/oemAppTemplateFunction/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppTemplateFunctionService.Delete",
		Path:    []string{"/v1/oemAppTemplateFunction/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppTemplateFunctionService.DeleteById",
		Path:    []string{"/v1/oemAppTemplateFunction/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppTemplateFunctionService.DeleteByIds",
		Path:    []string{"/v1/oemAppTemplateFunction/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppTemplateFunctionService.Update",
		Path:    []string{"/v1/oemAppTemplateFunction/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppTemplateFunctionService.UpdateAll",
		Path:    []string{"/v1/oemAppTemplateFunction/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppTemplateFunctionService.UpdateFields",
		Path:    []string{"/v1/oemAppTemplateFunction/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppTemplateFunctionService.FindById",
		Path:    []string{"/v1/oemAppTemplateFunction/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppTemplateFunctionService.Find",
		Path:    []string{"/v1/oemAppTemplateFunction/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppTemplateFunctionService.Lists",
		Path:    []string{"/v1/oemAppTemplateFunction/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OemAppTemplateFunctionService{h}, opts...))
}

type oemAppTemplateFunctionServiceHandler struct {
	OemAppTemplateFunctionServiceHandler
}

func (h *oemAppTemplateFunctionServiceHandler) Create(ctx context.Context, in *OemAppTemplateFunction, out *Response) error {
	return h.OemAppTemplateFunctionServiceHandler.Create(ctx, in, out)
}

func (h *oemAppTemplateFunctionServiceHandler) Delete(ctx context.Context, in *OemAppTemplateFunction, out *Response) error {
	return h.OemAppTemplateFunctionServiceHandler.Delete(ctx, in, out)
}

func (h *oemAppTemplateFunctionServiceHandler) DeleteById(ctx context.Context, in *OemAppTemplateFunction, out *Response) error {
	return h.OemAppTemplateFunctionServiceHandler.DeleteById(ctx, in, out)
}

func (h *oemAppTemplateFunctionServiceHandler) DeleteByIds(ctx context.Context, in *OemAppTemplateFunctionBatchDeleteRequest, out *Response) error {
	return h.OemAppTemplateFunctionServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *oemAppTemplateFunctionServiceHandler) Update(ctx context.Context, in *OemAppTemplateFunction, out *Response) error {
	return h.OemAppTemplateFunctionServiceHandler.Update(ctx, in, out)
}

func (h *oemAppTemplateFunctionServiceHandler) UpdateAll(ctx context.Context, in *OemAppTemplateFunction, out *Response) error {
	return h.OemAppTemplateFunctionServiceHandler.UpdateAll(ctx, in, out)
}

func (h *oemAppTemplateFunctionServiceHandler) UpdateFields(ctx context.Context, in *OemAppTemplateFunctionUpdateFieldsRequest, out *Response) error {
	return h.OemAppTemplateFunctionServiceHandler.UpdateFields(ctx, in, out)
}

func (h *oemAppTemplateFunctionServiceHandler) FindById(ctx context.Context, in *OemAppTemplateFunctionFilter, out *OemAppTemplateFunctionResponse) error {
	return h.OemAppTemplateFunctionServiceHandler.FindById(ctx, in, out)
}

func (h *oemAppTemplateFunctionServiceHandler) Find(ctx context.Context, in *OemAppTemplateFunctionFilter, out *OemAppTemplateFunctionResponse) error {
	return h.OemAppTemplateFunctionServiceHandler.Find(ctx, in, out)
}

func (h *oemAppTemplateFunctionServiceHandler) Lists(ctx context.Context, in *OemAppTemplateFunctionListRequest, out *OemAppTemplateFunctionResponse) error {
	return h.OemAppTemplateFunctionServiceHandler.Lists(ctx, in, out)
}
