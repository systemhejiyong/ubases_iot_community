// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: opm_firmware_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpmFirmwareService service

func NewOpmFirmwareServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpmFirmwareService.Create",
			Path:    []string{"/v1/opmFirmware/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmFirmwareService.CreateAndInitVersion",
			Path:    []string{"/v1/opmFirmware/createAndInitVersion"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmFirmwareService.Delete",
			Path:    []string{"/v1/opmFirmware/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmFirmwareService.DeleteById",
			Path:    []string{"/v1/opmFirmware/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmFirmwareService.DeleteByIds",
			Path:    []string{"/v1/opmFirmware/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmFirmwareService.Update",
			Path:    []string{"/v1/opmFirmware/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmFirmwareService.UpdateAll",
			Path:    []string{"/v1/opmFirmware/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmFirmwareService.UpdateFields",
			Path:    []string{"/v1/opmFirmware/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmFirmwareService.FindById",
			Path:    []string{"/v1/opmFirmware/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmFirmwareService.Find",
			Path:    []string{"/v1/opmFirmware/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmFirmwareService.Lists",
			Path:    []string{"/v1/opmFirmware/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpmFirmwareService service

type OpmFirmwareService interface {
	//创建
	Create(ctx context.Context, in *OpmFirmware, opts ...client.CallOption) (*Response, error)
	//创建
	CreateAndInitVersion(ctx context.Context, in *OpmFirmware, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpmFirmware, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpmFirmware, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpmFirmwareBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpmFirmware, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpmFirmware, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpmFirmwareUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpmFirmwareFilter, opts ...client.CallOption) (*OpmFirmwareResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpmFirmwareFilter, opts ...client.CallOption) (*OpmFirmwareResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpmFirmwareListRequest, opts ...client.CallOption) (*OpmFirmwareResponse, error)
}

type opmFirmwareService struct {
	c    client.Client
	name string
}

func NewOpmFirmwareService(name string, c client.Client) OpmFirmwareService {
	return &opmFirmwareService{
		c:    c,
		name: name,
	}
}

func (c *opmFirmwareService) Create(ctx context.Context, in *OpmFirmware, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwareService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwareService) CreateAndInitVersion(ctx context.Context, in *OpmFirmware, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwareService.CreateAndInitVersion", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwareService) Delete(ctx context.Context, in *OpmFirmware, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwareService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwareService) DeleteById(ctx context.Context, in *OpmFirmware, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwareService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwareService) DeleteByIds(ctx context.Context, in *OpmFirmwareBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwareService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwareService) Update(ctx context.Context, in *OpmFirmware, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwareService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwareService) UpdateAll(ctx context.Context, in *OpmFirmware, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwareService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwareService) UpdateFields(ctx context.Context, in *OpmFirmwareUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwareService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwareService) FindById(ctx context.Context, in *OpmFirmwareFilter, opts ...client.CallOption) (*OpmFirmwareResponse, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwareService.FindById", in)
	out := new(OpmFirmwareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwareService) Find(ctx context.Context, in *OpmFirmwareFilter, opts ...client.CallOption) (*OpmFirmwareResponse, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwareService.Find", in)
	out := new(OpmFirmwareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmFirmwareService) Lists(ctx context.Context, in *OpmFirmwareListRequest, opts ...client.CallOption) (*OpmFirmwareResponse, error) {
	req := c.c.NewRequest(c.name, "OpmFirmwareService.Lists", in)
	out := new(OpmFirmwareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpmFirmwareService service

type OpmFirmwareServiceHandler interface {
	//创建
	Create(context.Context, *OpmFirmware, *Response) error
	//创建
	CreateAndInitVersion(context.Context, *OpmFirmware, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpmFirmware, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpmFirmware, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpmFirmwareBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpmFirmware, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpmFirmware, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpmFirmwareUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpmFirmwareFilter, *OpmFirmwareResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpmFirmwareFilter, *OpmFirmwareResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpmFirmwareListRequest, *OpmFirmwareResponse) error
}

func RegisterOpmFirmwareServiceHandler(s server.Server, hdlr OpmFirmwareServiceHandler, opts ...server.HandlerOption) error {
	type opmFirmwareService interface {
		Create(ctx context.Context, in *OpmFirmware, out *Response) error
		CreateAndInitVersion(ctx context.Context, in *OpmFirmware, out *Response) error
		Delete(ctx context.Context, in *OpmFirmware, out *Response) error
		DeleteById(ctx context.Context, in *OpmFirmware, out *Response) error
		DeleteByIds(ctx context.Context, in *OpmFirmwareBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpmFirmware, out *Response) error
		UpdateAll(ctx context.Context, in *OpmFirmware, out *Response) error
		UpdateFields(ctx context.Context, in *OpmFirmwareUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpmFirmwareFilter, out *OpmFirmwareResponse) error
		Find(ctx context.Context, in *OpmFirmwareFilter, out *OpmFirmwareResponse) error
		Lists(ctx context.Context, in *OpmFirmwareListRequest, out *OpmFirmwareResponse) error
	}
	type OpmFirmwareService struct {
		opmFirmwareService
	}
	h := &opmFirmwareServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwareService.Create",
		Path:    []string{"/v1/opmFirmware/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwareService.CreateAndInitVersion",
		Path:    []string{"/v1/opmFirmware/createAndInitVersion"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwareService.Delete",
		Path:    []string{"/v1/opmFirmware/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwareService.DeleteById",
		Path:    []string{"/v1/opmFirmware/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwareService.DeleteByIds",
		Path:    []string{"/v1/opmFirmware/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwareService.Update",
		Path:    []string{"/v1/opmFirmware/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwareService.UpdateAll",
		Path:    []string{"/v1/opmFirmware/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwareService.UpdateFields",
		Path:    []string{"/v1/opmFirmware/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwareService.FindById",
		Path:    []string{"/v1/opmFirmware/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwareService.Find",
		Path:    []string{"/v1/opmFirmware/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmFirmwareService.Lists",
		Path:    []string{"/v1/opmFirmware/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpmFirmwareService{h}, opts...))
}

type opmFirmwareServiceHandler struct {
	OpmFirmwareServiceHandler
}

func (h *opmFirmwareServiceHandler) Create(ctx context.Context, in *OpmFirmware, out *Response) error {
	return h.OpmFirmwareServiceHandler.Create(ctx, in, out)
}

func (h *opmFirmwareServiceHandler) CreateAndInitVersion(ctx context.Context, in *OpmFirmware, out *Response) error {
	return h.OpmFirmwareServiceHandler.CreateAndInitVersion(ctx, in, out)
}

func (h *opmFirmwareServiceHandler) Delete(ctx context.Context, in *OpmFirmware, out *Response) error {
	return h.OpmFirmwareServiceHandler.Delete(ctx, in, out)
}

func (h *opmFirmwareServiceHandler) DeleteById(ctx context.Context, in *OpmFirmware, out *Response) error {
	return h.OpmFirmwareServiceHandler.DeleteById(ctx, in, out)
}

func (h *opmFirmwareServiceHandler) DeleteByIds(ctx context.Context, in *OpmFirmwareBatchDeleteRequest, out *Response) error {
	return h.OpmFirmwareServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *opmFirmwareServiceHandler) Update(ctx context.Context, in *OpmFirmware, out *Response) error {
	return h.OpmFirmwareServiceHandler.Update(ctx, in, out)
}

func (h *opmFirmwareServiceHandler) UpdateAll(ctx context.Context, in *OpmFirmware, out *Response) error {
	return h.OpmFirmwareServiceHandler.UpdateAll(ctx, in, out)
}

func (h *opmFirmwareServiceHandler) UpdateFields(ctx context.Context, in *OpmFirmwareUpdateFieldsRequest, out *Response) error {
	return h.OpmFirmwareServiceHandler.UpdateFields(ctx, in, out)
}

func (h *opmFirmwareServiceHandler) FindById(ctx context.Context, in *OpmFirmwareFilter, out *OpmFirmwareResponse) error {
	return h.OpmFirmwareServiceHandler.FindById(ctx, in, out)
}

func (h *opmFirmwareServiceHandler) Find(ctx context.Context, in *OpmFirmwareFilter, out *OpmFirmwareResponse) error {
	return h.OpmFirmwareServiceHandler.Find(ctx, in, out)
}

func (h *opmFirmwareServiceHandler) Lists(ctx context.Context, in *OpmFirmwareListRequest, out *OpmFirmwareResponse) error {
	return h.OpmFirmwareServiceHandler.Lists(ctx, in, out)
}
