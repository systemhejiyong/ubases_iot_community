// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: weather.proto

package protosService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//城市名称请求
type CityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//城市编码
	CityCode string `protobuf:"bytes,101,opt,name=cityCode,proto3" json:"cityCode,omitempty"`
	//城市名称
	CityName string `protobuf:"bytes,102,opt,name=cityName,proto3" json:"cityName,omitempty"`
	//省份名称，如果城市无法获取到，则使用省份进行获取
	Province string `protobuf:"bytes,103,opt,name=province,proto3" json:"province,omitempty"`
}

func (x *CityRequest) Reset() {
	*x = CityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_weather_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CityRequest) ProtoMessage() {}

func (x *CityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CityRequest.ProtoReflect.Descriptor instead.
func (*CityRequest) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{0}
}

func (x *CityRequest) GetCityCode() string {
	if x != nil {
		return x.CityCode
	}
	return ""
}

func (x *CityRequest) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *CityRequest) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

//IP请求
type IPRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip string `protobuf:"bytes,101,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *IPRequest) Reset() {
	*x = IPRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_weather_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPRequest) ProtoMessage() {}

func (x *IPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPRequest.ProtoReflect.Descriptor instead.
func (*IPRequest) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{1}
}

func (x *IPRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

//经纬度请求
type CoordinatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Longitude float64 `protobuf:"fixed64,101,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude  float64 `protobuf:"fixed64,102,opt,name=latitude,proto3" json:"latitude,omitempty"`
}

func (x *CoordinatesRequest) Reset() {
	*x = CoordinatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_weather_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoordinatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoordinatesRequest) ProtoMessage() {}

func (x *CoordinatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoordinatesRequest.ProtoReflect.Descriptor instead.
func (*CoordinatesRequest) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{2}
}

func (x *CoordinatesRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *CoordinatesRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

//天气预报的数据
type ForecastData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//城市编号
	CityCode string `protobuf:"bytes,101,opt,name=cityCode,proto3" json:"cityCode,omitempty"`
	//城市名称
	CityName string `protobuf:"bytes,102,opt,name=cityName,proto3" json:"cityName,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,103,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//支持多天的天气数据
	Data []*WeatherData `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ForecastData) Reset() {
	*x = ForecastData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_weather_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForecastData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForecastData) ProtoMessage() {}

func (x *ForecastData) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForecastData.ProtoReflect.Descriptor instead.
func (*ForecastData) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{3}
}

func (x *ForecastData) GetCityCode() string {
	if x != nil {
		return x.CityCode
	}
	return ""
}

func (x *ForecastData) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *ForecastData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ForecastData) GetData() []*WeatherData {
	if x != nil {
		return x.Data
	}
	return nil
}

//当前天气预报的数据
type CurrentData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//城市编号
	CityCode string `protobuf:"bytes,101,opt,name=cityCode,proto3" json:"cityCode,omitempty"`
	//城市名称
	CityName string `protobuf:"bytes,102,opt,name=cityName,proto3" json:"cityName,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,103,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//当天的天气情况
	Data *WeatherData `protobuf:"bytes,104,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CurrentData) Reset() {
	*x = CurrentData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_weather_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentData) ProtoMessage() {}

func (x *CurrentData) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentData.ProtoReflect.Descriptor instead.
func (*CurrentData) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{4}
}

func (x *CurrentData) GetCityCode() string {
	if x != nil {
		return x.CityCode
	}
	return ""
}

func (x *CurrentData) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *CurrentData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CurrentData) GetData() *WeatherData {
	if x != nil {
		return x.Data
	}
	return nil
}

//天气情况的数据
type WeatherData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//城市编号
	CityCode string `protobuf:"bytes,101,opt,name=cityCode,proto3" json:"cityCode,omitempty"`
	//城市名称
	CityName string `protobuf:"bytes,102,opt,name=cityName,proto3" json:"cityName,omitempty"`
	//天气日期
	Date string `protobuf:"bytes,103,opt,name=date,proto3" json:"date,omitempty"`
	//天气时间，如：12:23
	Time string `protobuf:"bytes,104,opt,name=time,proto3" json:"time,omitempty"`
	//日出时间
	Sunrise *timestamppb.Timestamp `protobuf:"bytes,105,opt,name=sunrise,proto3" json:"sunrise,omitempty"`
	//日落时间
	Sunset *timestamppb.Timestamp `protobuf:"bytes,106,opt,name=sunset,proto3" json:"sunset,omitempty"`
	//天气
	Weather string `protobuf:"bytes,107,opt,name=weather,proto3" json:"weather,omitempty"`
	//温度
	Temperature float64 `protobuf:"fixed64,108,opt,name=temperature,proto3" json:"temperature,omitempty"`
	//最高温度
	TemperatureHigh float64 `protobuf:"fixed64,109,opt,name=temperatureHigh,proto3" json:"temperatureHigh,omitempty"`
	//最低温度
	TemperatureLow float64 `protobuf:"fixed64,110,opt,name=temperatureLow,proto3" json:"temperatureLow,omitempty"`
	//湿度
	Humidity int32 `protobuf:"varint,111,opt,name=humidity,proto3" json:"humidity,omitempty"`
	//pm2.5值
	Pm25 float64 `protobuf:"fixed64,112,opt,name=pm25,proto3" json:"pm25,omitempty"`
	//pm10值
	Pm10 float64 `protobuf:"fixed64,113,opt,name=pm10,proto3" json:"pm10,omitempty"`
	//风速 公里/小时
	WindSpeed float64 `protobuf:"fixed64,114,opt,name=windSpeed,proto3" json:"windSpeed,omitempty"`
	//风力 3-4
	WindGrade float64 `protobuf:"fixed64,115,opt,name=windGrade,proto3" json:"windGrade,omitempty"`
	//空气质量指数
	Aqi float64 `protobuf:"fixed64,116,opt,name=aqi,proto3" json:"aqi,omitempty"`
	//空气质量
	Quality string `protobuf:"bytes,117,opt,name=quality,proto3" json:"quality,omitempty"`
	//风向，如东南风
	WindDir string `protobuf:"bytes,118,opt,name=windDir,proto3" json:"windDir,omitempty"`
	//紫外线指数
	UvIndex int32 `protobuf:"varint,119,opt,name=uvIndex,proto3" json:"uvIndex,omitempty"`
	//大气压强
	Pressure float64 `protobuf:"fixed64,120,opt,name=pressure,proto3" json:"pressure,omitempty"`
	//能见度，默认单位：公里
	Visibility int32 `protobuf:"varint,121,opt,name=visibility,proto3" json:"visibility,omitempty"`
	//天气数据来源
	Source string `protobuf:"bytes,122,opt,name=source,proto3" json:"source,omitempty"`
	//更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,123,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	//天气图标标识
	Icon string `protobuf:"bytes,124,opt,name=icon,proto3" json:"icon,omitempty"`
	//天气描述
	WeatherDesc string `protobuf:"bytes,235,opt,name=weatherDesc,proto3" json:"weatherDesc,omitempty"`
}

func (x *WeatherData) Reset() {
	*x = WeatherData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_weather_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherData) ProtoMessage() {}

func (x *WeatherData) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherData.ProtoReflect.Descriptor instead.
func (*WeatherData) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{5}
}

func (x *WeatherData) GetCityCode() string {
	if x != nil {
		return x.CityCode
	}
	return ""
}

func (x *WeatherData) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *WeatherData) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *WeatherData) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *WeatherData) GetSunrise() *timestamppb.Timestamp {
	if x != nil {
		return x.Sunrise
	}
	return nil
}

func (x *WeatherData) GetSunset() *timestamppb.Timestamp {
	if x != nil {
		return x.Sunset
	}
	return nil
}

func (x *WeatherData) GetWeather() string {
	if x != nil {
		return x.Weather
	}
	return ""
}

func (x *WeatherData) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *WeatherData) GetTemperatureHigh() float64 {
	if x != nil {
		return x.TemperatureHigh
	}
	return 0
}

func (x *WeatherData) GetTemperatureLow() float64 {
	if x != nil {
		return x.TemperatureLow
	}
	return 0
}

func (x *WeatherData) GetHumidity() int32 {
	if x != nil {
		return x.Humidity
	}
	return 0
}

func (x *WeatherData) GetPm25() float64 {
	if x != nil {
		return x.Pm25
	}
	return 0
}

func (x *WeatherData) GetPm10() float64 {
	if x != nil {
		return x.Pm10
	}
	return 0
}

func (x *WeatherData) GetWindSpeed() float64 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *WeatherData) GetWindGrade() float64 {
	if x != nil {
		return x.WindGrade
	}
	return 0
}

func (x *WeatherData) GetAqi() float64 {
	if x != nil {
		return x.Aqi
	}
	return 0
}

func (x *WeatherData) GetQuality() string {
	if x != nil {
		return x.Quality
	}
	return ""
}

func (x *WeatherData) GetWindDir() string {
	if x != nil {
		return x.WindDir
	}
	return ""
}

func (x *WeatherData) GetUvIndex() int32 {
	if x != nil {
		return x.UvIndex
	}
	return 0
}

func (x *WeatherData) GetPressure() float64 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *WeatherData) GetVisibility() int32 {
	if x != nil {
		return x.Visibility
	}
	return 0
}

func (x *WeatherData) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *WeatherData) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *WeatherData) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *WeatherData) GetWeatherDesc() string {
	if x != nil {
		return x.WeatherDesc
	}
	return ""
}

//订阅某个城市的天气，定时拉取天气
type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//城市编码
	CityCode string `protobuf:"bytes,101,opt,name=cityCode,proto3" json:"cityCode,omitempty"`
	//城市名称
	CityName string `protobuf:"bytes,102,opt,name=cityName,proto3" json:"cityName,omitempty"`
	//省份名称，如果城市无法获取到，则使用省份进行获取
	Province string `protobuf:"bytes,103,opt,name=province,proto3" json:"province,omitempty"`
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_weather_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{6}
}

func (x *SubscribeRequest) GetCityCode() string {
	if x != nil {
		return x.CityCode
	}
	return ""
}

func (x *SubscribeRequest) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *SubscribeRequest) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

//由后台任务定时取消订阅不再需要的城市
//比如没有智能场景需要了某个城市天气数据，则不再定时拉取天气
type UnSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//城市编码列表
	CityCode []string `protobuf:"bytes,101,rep,name=cityCode,proto3" json:"cityCode,omitempty"`
	//城市名称列表
	CityName []string `protobuf:"bytes,102,rep,name=cityName,proto3" json:"cityName,omitempty"`
}

func (x *UnSubscribeRequest) Reset() {
	*x = UnSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_weather_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnSubscribeRequest) ProtoMessage() {}

func (x *UnSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnSubscribeRequest.ProtoReflect.Descriptor instead.
func (*UnSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{7}
}

func (x *UnSubscribeRequest) GetCityCode() []string {
	if x != nil {
		return x.CityCode
	}
	return nil
}

func (x *UnSubscribeRequest) GetCityName() []string {
	if x != nil {
		return x.CityName
	}
	return nil
}

type GeoIpDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,101,opt,name=ip,proto3" json:"ip,omitempty"`
	Lang string `protobuf:"bytes,102,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *GeoIpDataRequest) Reset() {
	*x = GeoIpDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_weather_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoIpDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoIpDataRequest) ProtoMessage() {}

func (x *GeoIpDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoIpDataRequest.ProtoReflect.Descriptor instead.
func (*GeoIpDataRequest) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{8}
}

func (x *GeoIpDataRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *GeoIpDataRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type GeoIpDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City     *GeoIpCity     `protobuf:"bytes,101,opt,name=city,proto3" json:"city,omitempty"`
	Country  *GeoIpCountry  `protobuf:"bytes,102,opt,name=country,proto3" json:"country,omitempty"`
	Location *GeoIpLocation `protobuf:"bytes,103,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *GeoIpDataResponse) Reset() {
	*x = GeoIpDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_weather_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoIpDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoIpDataResponse) ProtoMessage() {}

func (x *GeoIpDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoIpDataResponse.ProtoReflect.Descriptor instead.
func (*GeoIpDataResponse) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{9}
}

func (x *GeoIpDataResponse) GetCity() *GeoIpCity {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *GeoIpDataResponse) GetCountry() *GeoIpCountry {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *GeoIpDataResponse) GetLocation() *GeoIpLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

type GeoIpCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoNameID uint32            `protobuf:"varint,101,opt,name=geoNameID,proto3" json:"geoNameID,omitempty"`
	Names     map[string]string `protobuf:"bytes,102,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GeoIpCity) Reset() {
	*x = GeoIpCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_weather_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoIpCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoIpCity) ProtoMessage() {}

func (x *GeoIpCity) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoIpCity.ProtoReflect.Descriptor instead.
func (*GeoIpCity) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{10}
}

func (x *GeoIpCity) GetGeoNameID() uint32 {
	if x != nil {
		return x.GeoNameID
	}
	return 0
}

func (x *GeoIpCity) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

type GeoIpCountry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeoNameID         uint32            `protobuf:"varint,101,opt,name=geoNameID,proto3" json:"geoNameID,omitempty"`
	IsInEuropeanUnion bool              `protobuf:"varint,102,opt,name=isInEuropeanUnion,proto3" json:"isInEuropeanUnion,omitempty"`
	IsoCode           string            `protobuf:"bytes,103,opt,name=isoCode,proto3" json:"isoCode,omitempty"`
	Names             map[string]string `protobuf:"bytes,104,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GeoIpCountry) Reset() {
	*x = GeoIpCountry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_weather_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoIpCountry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoIpCountry) ProtoMessage() {}

func (x *GeoIpCountry) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoIpCountry.ProtoReflect.Descriptor instead.
func (*GeoIpCountry) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{11}
}

func (x *GeoIpCountry) GetGeoNameID() uint32 {
	if x != nil {
		return x.GeoNameID
	}
	return 0
}

func (x *GeoIpCountry) GetIsInEuropeanUnion() bool {
	if x != nil {
		return x.IsInEuropeanUnion
	}
	return false
}

func (x *GeoIpCountry) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *GeoIpCountry) GetNames() map[string]string {
	if x != nil {
		return x.Names
	}
	return nil
}

type GeoIpLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccuracyRadius uint32  `protobuf:"varint,101,opt,name=accuracyRadius,proto3" json:"accuracyRadius,omitempty"`
	Latitude       float64 `protobuf:"fixed64,102,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude      float64 `protobuf:"fixed64,103,opt,name=longitude,proto3" json:"longitude,omitempty"`
	MetroCode      uint32  `protobuf:"varint,104,opt,name=metroCode,proto3" json:"metroCode,omitempty"`
	TimeZone       string  `protobuf:"bytes,105,opt,name=timeZone,proto3" json:"timeZone,omitempty"`
}

func (x *GeoIpLocation) Reset() {
	*x = GeoIpLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_weather_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoIpLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoIpLocation) ProtoMessage() {}

func (x *GeoIpLocation) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoIpLocation.ProtoReflect.Descriptor instead.
func (*GeoIpLocation) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{12}
}

func (x *GeoIpLocation) GetAccuracyRadius() uint32 {
	if x != nil {
		return x.AccuracyRadius
	}
	return 0
}

func (x *GeoIpLocation) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GeoIpLocation) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GeoIpLocation) GetMetroCode() uint32 {
	if x != nil {
		return x.MetroCode
	}
	return 0
}

func (x *GeoIpLocation) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

type GeoIpResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      string  `protobuf:"bytes,101,opt,name=code,proto3" json:"code,omitempty"`
	Name      string  `protobuf:"bytes,102,opt,name=name,proto3" json:"name,omitempty"`
	Country   string  `protobuf:"bytes,103,opt,name=country,proto3" json:"country,omitempty"`
	Province  string  `protobuf:"bytes,104,opt,name=province,proto3" json:"province,omitempty"`
	City      string  `protobuf:"bytes,105,opt,name=city,proto3" json:"city,omitempty"`
	District  string  `protobuf:"bytes,106,opt,name=district,proto3" json:"district,omitempty"`
	Adcode    int64   `protobuf:"varint,107,opt,name=adcode,proto3" json:"adcode,omitempty"`
	Latitude  float64 `protobuf:"fixed64,108,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,109,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *GeoIpResp) Reset() {
	*x = GeoIpResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_weather_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoIpResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoIpResp) ProtoMessage() {}

func (x *GeoIpResp) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoIpResp.ProtoReflect.Descriptor instead.
func (*GeoIpResp) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{13}
}

func (x *GeoIpResp) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GeoIpResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GeoIpResp) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GeoIpResp) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *GeoIpResp) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *GeoIpResp) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *GeoIpResp) GetAdcode() int64 {
	if x != nil {
		return x.Adcode
	}
	return 0
}

func (x *GeoIpResp) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GeoIpResp) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type GeoIPInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnCode   string  `protobuf:"bytes,101,opt,name=enCode,proto3" json:"enCode,omitempty"`
	EnName   string  `protobuf:"bytes,102,opt,name=enName,proto3" json:"enName,omitempty"`
	Country  string  `protobuf:"bytes,103,opt,name=country,proto3" json:"country,omitempty"`
	Province string  `protobuf:"bytes,104,opt,name=province,proto3" json:"province,omitempty"`
	City     string  `protobuf:"bytes,105,opt,name=city,proto3" json:"city,omitempty"`
	District string  `protobuf:"bytes,106,opt,name=district,proto3" json:"district,omitempty"`
	Adcode   int32   `protobuf:"varint,107,opt,name=adcode,proto3" json:"adcode,omitempty"`
	Lat      float64 `protobuf:"fixed64,108,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng      float64 `protobuf:"fixed64,109,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (x *GeoIPInfo) Reset() {
	*x = GeoIPInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_weather_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoIPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoIPInfo) ProtoMessage() {}

func (x *GeoIPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoIPInfo.ProtoReflect.Descriptor instead.
func (*GeoIPInfo) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{14}
}

func (x *GeoIPInfo) GetEnCode() string {
	if x != nil {
		return x.EnCode
	}
	return ""
}

func (x *GeoIPInfo) GetEnName() string {
	if x != nil {
		return x.EnName
	}
	return ""
}

func (x *GeoIPInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GeoIPInfo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *GeoIPInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *GeoIPInfo) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *GeoIPInfo) GetAdcode() int32 {
	if x != nil {
		return x.Adcode
	}
	return 0
}

func (x *GeoIPInfo) GetLat() float64 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *GeoIPInfo) GetLng() float64 {
	if x != nil {
		return x.Lng
	}
	return 0
}

var File_weather_proto protoreflect.FileDescriptor

var file_weather_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x61, 0x0a, 0x0b, 0x43, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x22, 0x1b, 0x0a, 0x09, 0x49, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x4e, 0x0a, 0x12, 0x43, 0x6f, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c,
	0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x68, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x8a, 0x06, 0x0a, 0x0b, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x73,
	0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x75, 0x6e, 0x73, 0x65, 0x74,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x06, 0x73, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x69, 0x67, 0x68, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x69, 0x67, 0x68,
	0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c,
	0x6f, 0x77, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x75, 0x6d, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6d, 0x32, 0x35, 0x18, 0x70, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x70, 0x6d, 0x32, 0x35, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6d, 0x31, 0x30,
	0x18, 0x71, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x70, 0x6d, 0x31, 0x30, 0x12, 0x1c, 0x0a, 0x09,
	0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x72, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69,
	0x6e, 0x64, 0x47, 0x72, 0x61, 0x64, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x77,
	0x69, 0x6e, 0x64, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x71, 0x69, 0x18,
	0x74, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x61, 0x71, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x18,
	0x76, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x75, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x77, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x75, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x79, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x7a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x7c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x77, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0xeb, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x22, 0x66, 0x0a,
	0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x12, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a, 0x10, 0x47, 0x65, 0x6f, 0x49, 0x70, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0xa0, 0x01, 0x0a, 0x11,
	0x47, 0x65, 0x6f, 0x49, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x70, 0x43,
	0x69, 0x74, 0x79, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x70, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98,
	0x01, 0x0a, 0x09, 0x47, 0x65, 0x6f, 0x49, 0x70, 0x43, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x67, 0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x66, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x70, 0x43, 0x69, 0x74, 0x79, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x1a,
	0x38, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x01, 0x0a, 0x0c, 0x47, 0x65,
	0x6f, 0x49, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x65,
	0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67,
	0x65, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x49, 0x6e,
	0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61, 0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x49, 0x6e, 0x45, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x61,
	0x6e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x36, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x68, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x70, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xab, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x6f, 0x49, 0x70, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x61, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x72, 0x6f,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x22, 0xeb, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x6f, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x68, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x64, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x64,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x6c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x6d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xdd,
	0x01, 0x0a, 0x09, 0x47, 0x65, 0x6f, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x6b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x64, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61,
	0x74, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6c, 0x6e, 0x67, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x32, 0xc7,
	0x01, 0x0a, 0x09, 0x49, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6f,
	0x49, 0x70, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x12, 0x19, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6f, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6f,
	0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x32, 0xa1, 0x04, 0x0a, 0x0e, 0x57, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x69, 0x74, 0x79, 0x12, 0x14, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x46, 0x6f,
	0x72, 0x65, 0x63, 0x61, 0x73, 0x42, 0x79, 0x43, 0x69, 0x74, 0x79, 0x12, 0x14, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0b, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x50, 0x12, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x42, 0x79, 0x49, 0x50, 0x12, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x49, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x00, 0x12, 0x4b, 0x0a, 0x14, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x43,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12,
	0x4d, 0x0a, 0x15, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x55,
	0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x6e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x11, 0x5a, 0x0f,
	0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_weather_proto_rawDescOnce sync.Once
	file_weather_proto_rawDescData = file_weather_proto_rawDesc
)

func file_weather_proto_rawDescGZIP() []byte {
	file_weather_proto_rawDescOnce.Do(func() {
		file_weather_proto_rawDescData = protoimpl.X.CompressGZIP(file_weather_proto_rawDescData)
	})
	return file_weather_proto_rawDescData
}

var file_weather_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_weather_proto_goTypes = []interface{}{
	(*CityRequest)(nil),           // 0: service.CityRequest
	(*IPRequest)(nil),             // 1: service.IPRequest
	(*CoordinatesRequest)(nil),    // 2: service.CoordinatesRequest
	(*ForecastData)(nil),          // 3: service.ForecastData
	(*CurrentData)(nil),           // 4: service.CurrentData
	(*WeatherData)(nil),           // 5: service.WeatherData
	(*SubscribeRequest)(nil),      // 6: service.SubscribeRequest
	(*UnSubscribeRequest)(nil),    // 7: service.UnSubscribeRequest
	(*GeoIpDataRequest)(nil),      // 8: service.GeoIpDataRequest
	(*GeoIpDataResponse)(nil),     // 9: service.GeoIpDataResponse
	(*GeoIpCity)(nil),             // 10: service.GeoIpCity
	(*GeoIpCountry)(nil),          // 11: service.GeoIpCountry
	(*GeoIpLocation)(nil),         // 12: service.GeoIpLocation
	(*GeoIpResp)(nil),             // 13: service.GeoIpResp
	(*GeoIPInfo)(nil),             // 14: service.GeoIPInfo
	nil,                           // 15: service.GeoIpCity.NamesEntry
	nil,                           // 16: service.GeoIpCountry.NamesEntry
	(*timestamppb.Timestamp)(nil), // 17: google.protobuf.Timestamp
	(*Response)(nil),              // 18: service.Response
}
var file_weather_proto_depIdxs = []int32{
	17, // 0: service.ForecastData.updatedAt:type_name -> google.protobuf.Timestamp
	5,  // 1: service.ForecastData.data:type_name -> service.WeatherData
	17, // 2: service.CurrentData.updatedAt:type_name -> google.protobuf.Timestamp
	5,  // 3: service.CurrentData.data:type_name -> service.WeatherData
	17, // 4: service.WeatherData.sunrise:type_name -> google.protobuf.Timestamp
	17, // 5: service.WeatherData.sunset:type_name -> google.protobuf.Timestamp
	17, // 6: service.WeatherData.updatedAt:type_name -> google.protobuf.Timestamp
	10, // 7: service.GeoIpDataResponse.city:type_name -> service.GeoIpCity
	11, // 8: service.GeoIpDataResponse.country:type_name -> service.GeoIpCountry
	12, // 9: service.GeoIpDataResponse.location:type_name -> service.GeoIpLocation
	15, // 10: service.GeoIpCity.names:type_name -> service.GeoIpCity.NamesEntry
	16, // 11: service.GeoIpCountry.names:type_name -> service.GeoIpCountry.NamesEntry
	8,  // 12: service.IPService.GetData:input_type -> service.GeoIpDataRequest
	8,  // 13: service.IPService.GetDataEx:input_type -> service.GeoIpDataRequest
	1,  // 14: service.IPService.GetGeoIPInfo:input_type -> service.IPRequest
	0,  // 15: service.WeatherService.CurrentByCity:input_type -> service.CityRequest
	0,  // 16: service.WeatherService.ForecasByCity:input_type -> service.CityRequest
	1,  // 17: service.WeatherService.CurrentByIP:input_type -> service.IPRequest
	1,  // 18: service.WeatherService.ForecastByIP:input_type -> service.IPRequest
	2,  // 19: service.WeatherService.CurrentByCoordinates:input_type -> service.CoordinatesRequest
	2,  // 20: service.WeatherService.ForecastByCoordinates:input_type -> service.CoordinatesRequest
	6,  // 21: service.WeatherService.Subscribe:input_type -> service.SubscribeRequest
	7,  // 22: service.WeatherService.UnSubscribe:input_type -> service.UnSubscribeRequest
	9,  // 23: service.IPService.GetData:output_type -> service.GeoIpDataResponse
	13, // 24: service.IPService.GetDataEx:output_type -> service.GeoIpResp
	14, // 25: service.IPService.GetGeoIPInfo:output_type -> service.GeoIPInfo
	4,  // 26: service.WeatherService.CurrentByCity:output_type -> service.CurrentData
	3,  // 27: service.WeatherService.ForecasByCity:output_type -> service.ForecastData
	4,  // 28: service.WeatherService.CurrentByIP:output_type -> service.CurrentData
	3,  // 29: service.WeatherService.ForecastByIP:output_type -> service.ForecastData
	4,  // 30: service.WeatherService.CurrentByCoordinates:output_type -> service.CurrentData
	3,  // 31: service.WeatherService.ForecastByCoordinates:output_type -> service.ForecastData
	18, // 32: service.WeatherService.Subscribe:output_type -> service.Response
	18, // 33: service.WeatherService.UnSubscribe:output_type -> service.Response
	23, // [23:34] is the sub-list for method output_type
	12, // [12:23] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_weather_proto_init() }
func file_weather_proto_init() {
	if File_weather_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_weather_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_weather_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_weather_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoordinatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_weather_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForecastData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_weather_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_weather_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeatherData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_weather_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_weather_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_weather_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoIpDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_weather_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoIpDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_weather_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoIpCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_weather_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoIpCountry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_weather_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoIpLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_weather_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoIpResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_weather_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoIPInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_weather_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_weather_proto_goTypes,
		DependencyIndexes: file_weather_proto_depIdxs,
		MessageInfos:      file_weather_proto_msgTypes,
	}.Build()
	File_weather_proto = out.File
	file_weather_proto_rawDesc = nil
	file_weather_proto_goTypes = nil
	file_weather_proto_depIdxs = nil
}
