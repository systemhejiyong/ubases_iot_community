// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: oem_app_entry_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OemAppEntryService service

func NewOemAppEntryServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OemAppEntryService.Create",
			Path:    []string{"/v1/oemAppEntry/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppEntryService.Delete",
			Path:    []string{"/v1/oemAppEntry/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppEntryService.DeleteById",
			Path:    []string{"/v1/oemAppEntry/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppEntryService.DeleteByIds",
			Path:    []string{"/v1/oemAppEntry/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppEntryService.Update",
			Path:    []string{"/v1/oemAppEntry/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppEntryService.UpdateAll",
			Path:    []string{"/v1/oemAppEntry/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppEntryService.UpdateFields",
			Path:    []string{"/v1/oemAppEntry/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppEntryService.FindById",
			Path:    []string{"/v1/oemAppEntry/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppEntryService.Find",
			Path:    []string{"/v1/oemAppEntry/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppEntryService.Lists",
			Path:    []string{"/v1/oemAppEntry/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppEntryService.ListDiy",
			Path:    []string{"/v1/oemAppEntry/listDiy"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OemAppEntryService.CreateBatch",
			Path:    []string{"/v1/oemAppEntrySeting/createBatch"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OemAppEntryService service

type OemAppEntryService interface {
	//创建
	Create(ctx context.Context, in *OemAppEntry, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OemAppEntry, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OemAppEntry, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OemAppEntryBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OemAppEntry, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OemAppEntry, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OemAppEntryUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OemAppEntryFilter, opts ...client.CallOption) (*OemAppEntryResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OemAppEntryFilter, opts ...client.CallOption) (*OemAppEntryResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OemAppEntryListRequest, opts ...client.CallOption) (*OemAppEntryResponse, error)
	//查找，支持分页，可返回多条数据
	ListDiy(ctx context.Context, in *OemAppEntryListDiyRequqest, opts ...client.CallOption) (*OemAppEntryListDiyResponse, error)
	//批量创建
	CreateBatch(ctx context.Context, in *OemAppEntryBatchRequest, opts ...client.CallOption) (*Response, error)
}

type oemAppEntryService struct {
	c    client.Client
	name string
}

func NewOemAppEntryService(name string, c client.Client) OemAppEntryService {
	return &oemAppEntryService{
		c:    c,
		name: name,
	}
}

func (c *oemAppEntryService) Create(ctx context.Context, in *OemAppEntry, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppEntryService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppEntryService) Delete(ctx context.Context, in *OemAppEntry, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppEntryService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppEntryService) DeleteById(ctx context.Context, in *OemAppEntry, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppEntryService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppEntryService) DeleteByIds(ctx context.Context, in *OemAppEntryBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppEntryService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppEntryService) Update(ctx context.Context, in *OemAppEntry, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppEntryService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppEntryService) UpdateAll(ctx context.Context, in *OemAppEntry, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppEntryService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppEntryService) UpdateFields(ctx context.Context, in *OemAppEntryUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppEntryService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppEntryService) FindById(ctx context.Context, in *OemAppEntryFilter, opts ...client.CallOption) (*OemAppEntryResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppEntryService.FindById", in)
	out := new(OemAppEntryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppEntryService) Find(ctx context.Context, in *OemAppEntryFilter, opts ...client.CallOption) (*OemAppEntryResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppEntryService.Find", in)
	out := new(OemAppEntryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppEntryService) Lists(ctx context.Context, in *OemAppEntryListRequest, opts ...client.CallOption) (*OemAppEntryResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppEntryService.Lists", in)
	out := new(OemAppEntryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppEntryService) ListDiy(ctx context.Context, in *OemAppEntryListDiyRequqest, opts ...client.CallOption) (*OemAppEntryListDiyResponse, error) {
	req := c.c.NewRequest(c.name, "OemAppEntryService.ListDiy", in)
	out := new(OemAppEntryListDiyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oemAppEntryService) CreateBatch(ctx context.Context, in *OemAppEntryBatchRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OemAppEntryService.CreateBatch", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OemAppEntryService service

type OemAppEntryServiceHandler interface {
	//创建
	Create(context.Context, *OemAppEntry, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OemAppEntry, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OemAppEntry, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OemAppEntryBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OemAppEntry, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OemAppEntry, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OemAppEntryUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OemAppEntryFilter, *OemAppEntryResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OemAppEntryFilter, *OemAppEntryResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OemAppEntryListRequest, *OemAppEntryResponse) error
	//查找，支持分页，可返回多条数据
	ListDiy(context.Context, *OemAppEntryListDiyRequqest, *OemAppEntryListDiyResponse) error
	//批量创建
	CreateBatch(context.Context, *OemAppEntryBatchRequest, *Response) error
}

func RegisterOemAppEntryServiceHandler(s server.Server, hdlr OemAppEntryServiceHandler, opts ...server.HandlerOption) error {
	type oemAppEntryService interface {
		Create(ctx context.Context, in *OemAppEntry, out *Response) error
		Delete(ctx context.Context, in *OemAppEntry, out *Response) error
		DeleteById(ctx context.Context, in *OemAppEntry, out *Response) error
		DeleteByIds(ctx context.Context, in *OemAppEntryBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OemAppEntry, out *Response) error
		UpdateAll(ctx context.Context, in *OemAppEntry, out *Response) error
		UpdateFields(ctx context.Context, in *OemAppEntryUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OemAppEntryFilter, out *OemAppEntryResponse) error
		Find(ctx context.Context, in *OemAppEntryFilter, out *OemAppEntryResponse) error
		Lists(ctx context.Context, in *OemAppEntryListRequest, out *OemAppEntryResponse) error
		ListDiy(ctx context.Context, in *OemAppEntryListDiyRequqest, out *OemAppEntryListDiyResponse) error
		CreateBatch(ctx context.Context, in *OemAppEntryBatchRequest, out *Response) error
	}
	type OemAppEntryService struct {
		oemAppEntryService
	}
	h := &oemAppEntryServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppEntryService.Create",
		Path:    []string{"/v1/oemAppEntry/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppEntryService.Delete",
		Path:    []string{"/v1/oemAppEntry/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppEntryService.DeleteById",
		Path:    []string{"/v1/oemAppEntry/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppEntryService.DeleteByIds",
		Path:    []string{"/v1/oemAppEntry/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppEntryService.Update",
		Path:    []string{"/v1/oemAppEntry/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppEntryService.UpdateAll",
		Path:    []string{"/v1/oemAppEntry/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppEntryService.UpdateFields",
		Path:    []string{"/v1/oemAppEntry/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppEntryService.FindById",
		Path:    []string{"/v1/oemAppEntry/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppEntryService.Find",
		Path:    []string{"/v1/oemAppEntry/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppEntryService.Lists",
		Path:    []string{"/v1/oemAppEntry/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppEntryService.ListDiy",
		Path:    []string{"/v1/oemAppEntry/listDiy"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OemAppEntryService.CreateBatch",
		Path:    []string{"/v1/oemAppEntrySeting/createBatch"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OemAppEntryService{h}, opts...))
}

type oemAppEntryServiceHandler struct {
	OemAppEntryServiceHandler
}

func (h *oemAppEntryServiceHandler) Create(ctx context.Context, in *OemAppEntry, out *Response) error {
	return h.OemAppEntryServiceHandler.Create(ctx, in, out)
}

func (h *oemAppEntryServiceHandler) Delete(ctx context.Context, in *OemAppEntry, out *Response) error {
	return h.OemAppEntryServiceHandler.Delete(ctx, in, out)
}

func (h *oemAppEntryServiceHandler) DeleteById(ctx context.Context, in *OemAppEntry, out *Response) error {
	return h.OemAppEntryServiceHandler.DeleteById(ctx, in, out)
}

func (h *oemAppEntryServiceHandler) DeleteByIds(ctx context.Context, in *OemAppEntryBatchDeleteRequest, out *Response) error {
	return h.OemAppEntryServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *oemAppEntryServiceHandler) Update(ctx context.Context, in *OemAppEntry, out *Response) error {
	return h.OemAppEntryServiceHandler.Update(ctx, in, out)
}

func (h *oemAppEntryServiceHandler) UpdateAll(ctx context.Context, in *OemAppEntry, out *Response) error {
	return h.OemAppEntryServiceHandler.UpdateAll(ctx, in, out)
}

func (h *oemAppEntryServiceHandler) UpdateFields(ctx context.Context, in *OemAppEntryUpdateFieldsRequest, out *Response) error {
	return h.OemAppEntryServiceHandler.UpdateFields(ctx, in, out)
}

func (h *oemAppEntryServiceHandler) FindById(ctx context.Context, in *OemAppEntryFilter, out *OemAppEntryResponse) error {
	return h.OemAppEntryServiceHandler.FindById(ctx, in, out)
}

func (h *oemAppEntryServiceHandler) Find(ctx context.Context, in *OemAppEntryFilter, out *OemAppEntryResponse) error {
	return h.OemAppEntryServiceHandler.Find(ctx, in, out)
}

func (h *oemAppEntryServiceHandler) Lists(ctx context.Context, in *OemAppEntryListRequest, out *OemAppEntryResponse) error {
	return h.OemAppEntryServiceHandler.Lists(ctx, in, out)
}

func (h *oemAppEntryServiceHandler) ListDiy(ctx context.Context, in *OemAppEntryListDiyRequqest, out *OemAppEntryListDiyResponse) error {
	return h.OemAppEntryServiceHandler.ListDiy(ctx, in, out)
}

func (h *oemAppEntryServiceHandler) CreateBatch(ctx context.Context, in *OemAppEntryBatchRequest, out *Response) error {
	return h.OemAppEntryServiceHandler.CreateBatch(ctx, in, out)
}
