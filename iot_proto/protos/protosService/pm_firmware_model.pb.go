// Code generated by protoc,2022-04-24 10:36:38. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: pm_firmware_model.proto

package protosService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//来源于数据表
type PmFirmware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:唯一主键;comment:唯一主键;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"name" gorm:"default:固件名称;comment:固件名称;size:50;"
	Name string `protobuf:"bytes,101,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: json:"flag" gorm:"default:固件标识;comment:固件标识;size:50;"
	Flag string `protobuf:"bytes,102,opt,name=flag,proto3" json:"flag,omitempty"`
	// @inject_tag: json:"type" gorm:"default:固件类型;comment:固件类型;"
	Type string `protobuf:"bytes,103,opt,name=type,proto3" json:"type,omitempty"`
	// @inject_tag: json:"flashSize" gorm:"default:Flash大小;comment:Flash大小;size:10;"
	FlashSize int32 `protobuf:"varint,104,opt,name=flashSize,proto3" json:"flashSize,omitempty"`
	// @inject_tag: json:"upgradeChannel" gorm:"default:升级通道;comment:升级通道;size:10;"
	UpgradeChannel int32 `protobuf:"varint,105,opt,name=upgradeChannel,proto3" json:"upgradeChannel,omitempty"`
	// @inject_tag: json:"upgradeOvertime" gorm:"default:升级超时时间（秒）;comment:升级超时时间（秒）;size:10;"
	UpgradeOvertime int32 `protobuf:"varint,106,opt,name=upgradeOvertime,proto3" json:"upgradeOvertime,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态（1=启用 2=禁用）;comment:状态（1=启用 2=禁用）;size:10;"
	Status int32 `protobuf:"varint,107,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"remark" gorm:"default:备注;comment:备注;size:255;"
	Remark string `protobuf:"bytes,108,opt,name=remark,proto3" json:"remark,omitempty"`
	// @inject_tag: json:"version" gorm:"default:版本号;comment:版本号;size:255;"
	Version string `protobuf:"bytes,109,opt,name=version,proto3" json:"version,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,110,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:19;"
	UpdatedBy int64 `protobuf:"varint,111,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,112,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除标识（0-正常 1-删除）;comment:删除标识（0-正常 1-删除）;"
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,113,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	// @inject_tag: json:"desc" gorm:"default:版本描述;comment:版本描述;size:255;"
	Desc string `protobuf:"bytes,114,opt,name=desc,proto3" json:"desc,omitempty"`
	// @inject_tag: json:"fileName" gorm:"default:版本文件名;comment:版本文件名;size:100;"
	FileName string `protobuf:"bytes,115,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// @inject_tag: json:"fileSize" gorm:"default:版本文件尺寸;comment:版本描述;size:10;"
	FileSize int32 `protobuf:"varint,116,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	// @inject_tag: json:"fileKey" gorm:"default:版本文件Md5;comment:版本描述;size:50;"
	FileKey string `protobuf:"bytes,117,opt,name=fileKey,proto3" json:"fileKey,omitempty"`
	// @inject_tag: json:"fileUrl" gorm:"default:版本文件地址;comment:版本描述;size:255;"
	FilePath string `protobuf:"bytes,118,opt,name=filePath,proto3" json:"filePath,omitempty"`
	// @inject_tag: json:"nameEn" gorm:"default:英文名称;comment:英文名称;size:50;"
	NameEn string `protobuf:"bytes,119,opt,name=nameEn,proto3" json:"nameEn,omitempty"`
	// @inject_tag: json:"moduleIds" gorm:"default:模组编号集合;comment:模组编号集合;"
	ModuleIds []string `protobuf:"bytes,120,rep,name=moduleIds,proto3" json:"moduleIds,omitempty"`
	// @inject_tag: json:"firmwareIds" gorm:"default:固件编号集合;comment:固件编号集合;"
	FirmwareIds []string `protobuf:"bytes,121,rep,name=firmwareIds,proto3" json:"firmwareIds,omitempty"`
	//是否必须有效版本
	IsMustValidVersion bool `protobuf:"varint,122,opt,name=isMustValidVersion,proto3" json:"isMustValidVersion,omitempty"`
	//资源文件包
	ZipFileName string `protobuf:"bytes,123,opt,name=zipFileName,proto3" json:"zipFileName,omitempty"`
	ZipFilePath string `protobuf:"bytes,124,opt,name=zipFilePath,proto3" json:"zipFilePath,omitempty"`
	ZipFileKey  string `protobuf:"bytes,125,opt,name=zipFileKey,proto3" json:"zipFileKey,omitempty"`
	ZipFileSize int32  `protobuf:"varint,126,opt,name=zipFileSize,proto3" json:"zipFileSize,omitempty"`
	//固件key
	FirmwareKey string `protobuf:"bytes,127,opt,name=firmwareKey,proto3" json:"firmwareKey,omitempty"`
	//是否必须
	IsMust int32 `protobuf:"varint,128,opt,name=isMust,proto3" json:"isMust,omitempty"`
}

func (x *PmFirmware) Reset() {
	*x = PmFirmware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pm_firmware_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmFirmware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmFirmware) ProtoMessage() {}

func (x *PmFirmware) ProtoReflect() protoreflect.Message {
	mi := &file_pm_firmware_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmFirmware.ProtoReflect.Descriptor instead.
func (*PmFirmware) Descriptor() ([]byte, []int) {
	return file_pm_firmware_model_proto_rawDescGZIP(), []int{0}
}

func (x *PmFirmware) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PmFirmware) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PmFirmware) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

func (x *PmFirmware) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PmFirmware) GetFlashSize() int32 {
	if x != nil {
		return x.FlashSize
	}
	return 0
}

func (x *PmFirmware) GetUpgradeChannel() int32 {
	if x != nil {
		return x.UpgradeChannel
	}
	return 0
}

func (x *PmFirmware) GetUpgradeOvertime() int32 {
	if x != nil {
		return x.UpgradeOvertime
	}
	return 0
}

func (x *PmFirmware) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PmFirmware) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *PmFirmware) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PmFirmware) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PmFirmware) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *PmFirmware) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PmFirmware) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *PmFirmware) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *PmFirmware) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *PmFirmware) GetFileSize() int32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *PmFirmware) GetFileKey() string {
	if x != nil {
		return x.FileKey
	}
	return ""
}

func (x *PmFirmware) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *PmFirmware) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *PmFirmware) GetModuleIds() []string {
	if x != nil {
		return x.ModuleIds
	}
	return nil
}

func (x *PmFirmware) GetFirmwareIds() []string {
	if x != nil {
		return x.FirmwareIds
	}
	return nil
}

func (x *PmFirmware) GetIsMustValidVersion() bool {
	if x != nil {
		return x.IsMustValidVersion
	}
	return false
}

func (x *PmFirmware) GetZipFileName() string {
	if x != nil {
		return x.ZipFileName
	}
	return ""
}

func (x *PmFirmware) GetZipFilePath() string {
	if x != nil {
		return x.ZipFilePath
	}
	return ""
}

func (x *PmFirmware) GetZipFileKey() string {
	if x != nil {
		return x.ZipFileKey
	}
	return ""
}

func (x *PmFirmware) GetZipFileSize() int32 {
	if x != nil {
		return x.ZipFileSize
	}
	return 0
}

func (x *PmFirmware) GetFirmwareKey() string {
	if x != nil {
		return x.FirmwareKey
	}
	return ""
}

func (x *PmFirmware) GetIsMust() int32 {
	if x != nil {
		return x.IsMust
	}
	return 0
}

type PmFirmwareFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:唯一主键;comment:唯一主键;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"name" gorm:"default:固件名称;comment:固件名称;size:50;"
	Name string `protobuf:"bytes,101,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: json:"flag" gorm:"default:固件标识;comment:固件标识;size:50;"
	Flag string `protobuf:"bytes,102,opt,name=flag,proto3" json:"flag,omitempty"`
	// @inject_tag: json:"type" gorm:"default:固件类型;comment:固件类型;"
	Type string `protobuf:"bytes,103,opt,name=type,proto3" json:"type,omitempty"`
	// @inject_tag: json:"flashSize" gorm:"default:Flash大小;comment:Flash大小;size:10;"
	FlashSize int32 `protobuf:"varint,104,opt,name=flashSize,proto3" json:"flashSize,omitempty"`
	// @inject_tag: json:"upgradeChannel" gorm:"default:升级通道;comment:升级通道;size:10;"
	UpgradeChannel int32 `protobuf:"varint,105,opt,name=upgradeChannel,proto3" json:"upgradeChannel,omitempty"`
	// @inject_tag: json:"upgradeOvertime" gorm:"default:升级超时时间（秒）;comment:升级超时时间（秒）;size:10;"
	UpgradeOvertime int32 `protobuf:"varint,106,opt,name=upgradeOvertime,proto3" json:"upgradeOvertime,omitempty"`
	// @inject_tag: json:"status" gorm:"default:状态（1=启用 2=禁用）;comment:状态（1=启用 2=禁用）;size:10;"
	Status int32 `protobuf:"varint,107,opt,name=status,proto3" json:"status,omitempty"`
	// @inject_tag: json:"remark" gorm:"default:备注;comment:备注;size:255;"
	Remark string `protobuf:"bytes,108,opt,name=remark,proto3" json:"remark,omitempty"`
	// @inject_tag: json:"version" gorm:"default:版本号;comment:版本号;size:255;"
	Version string `protobuf:"bytes,109,opt,name=version,proto3" json:"version,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,110,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:19;"
	UpdatedBy int64 `protobuf:"varint,111,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,112,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	// @inject_tag: json:"deletedAt" gorm:"default:删除标识（0-正常 1-删除）;comment:删除标识（0-正常 1-删除）;"
	DeletedAt *timestamppb.Timestamp `protobuf:"bytes,113,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
	// @inject_tag: json:"nameEn" gorm:"default:英文名称;comment:英文名称;size:50;"
	NameEn string `protobuf:"bytes,114,opt,name=nameEn,proto3" json:"nameEn,omitempty"`
}

func (x *PmFirmwareFilter) Reset() {
	*x = PmFirmwareFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pm_firmware_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmFirmwareFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmFirmwareFilter) ProtoMessage() {}

func (x *PmFirmwareFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pm_firmware_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmFirmwareFilter.ProtoReflect.Descriptor instead.
func (*PmFirmwareFilter) Descriptor() ([]byte, []int) {
	return file_pm_firmware_model_proto_rawDescGZIP(), []int{1}
}

func (x *PmFirmwareFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PmFirmwareFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PmFirmwareFilter) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

func (x *PmFirmwareFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PmFirmwareFilter) GetFlashSize() int32 {
	if x != nil {
		return x.FlashSize
	}
	return 0
}

func (x *PmFirmwareFilter) GetUpgradeChannel() int32 {
	if x != nil {
		return x.UpgradeChannel
	}
	return 0
}

func (x *PmFirmwareFilter) GetUpgradeOvertime() int32 {
	if x != nil {
		return x.UpgradeOvertime
	}
	return 0
}

func (x *PmFirmwareFilter) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *PmFirmwareFilter) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *PmFirmwareFilter) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PmFirmwareFilter) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PmFirmwareFilter) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *PmFirmwareFilter) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PmFirmwareFilter) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

func (x *PmFirmwareFilter) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

type PmFirmwareListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *PmFirmware `protobuf:"bytes,101,opt,name=query,proto3" json:"query,omitempty"`
	Page      int64       `protobuf:"varint,102,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64       `protobuf:"varint,103,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderKey  string      `protobuf:"bytes,104,opt,name=orderKey,proto3" json:"orderKey,omitempty"`
	OrderDesc string      `protobuf:"bytes,105,opt,name=orderDesc,proto3" json:"orderDesc,omitempty"`
	SearchKey string      `protobuf:"bytes,106,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
}

func (x *PmFirmwareListRequest) Reset() {
	*x = PmFirmwareListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pm_firmware_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmFirmwareListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmFirmwareListRequest) ProtoMessage() {}

func (x *PmFirmwareListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pm_firmware_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmFirmwareListRequest.ProtoReflect.Descriptor instead.
func (*PmFirmwareListRequest) Descriptor() ([]byte, []int) {
	return file_pm_firmware_model_proto_rawDescGZIP(), []int{2}
}

func (x *PmFirmwareListRequest) GetQuery() *PmFirmware {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *PmFirmwareListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PmFirmwareListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *PmFirmwareListRequest) GetOrderKey() string {
	if x != nil {
		return x.OrderKey
	}
	return ""
}

func (x *PmFirmwareListRequest) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *PmFirmwareListRequest) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

type PmFirmwareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32         `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string        `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64         `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*PmFirmware `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *PmFirmwareResponse) Reset() {
	*x = PmFirmwareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pm_firmware_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmFirmwareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmFirmwareResponse) ProtoMessage() {}

func (x *PmFirmwareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pm_firmware_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmFirmwareResponse.ProtoReflect.Descriptor instead.
func (*PmFirmwareResponse) Descriptor() ([]byte, []int) {
	return file_pm_firmware_model_proto_rawDescGZIP(), []int{3}
}

func (x *PmFirmwareResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PmFirmwareResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PmFirmwareResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PmFirmwareResponse) GetData() []*PmFirmware {
	if x != nil {
		return x.Data
	}
	return nil
}

type PmFirmwareUpdateFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string    `protobuf:"bytes,101,rep,name=fields,proto3" json:"fields,omitempty"`
	Data   *PmFirmware `protobuf:"bytes,102,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PmFirmwareUpdateFieldsRequest) Reset() {
	*x = PmFirmwareUpdateFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pm_firmware_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmFirmwareUpdateFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmFirmwareUpdateFieldsRequest) ProtoMessage() {}

func (x *PmFirmwareUpdateFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pm_firmware_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmFirmwareUpdateFieldsRequest.ProtoReflect.Descriptor instead.
func (*PmFirmwareUpdateFieldsRequest) Descriptor() ([]byte, []int) {
	return file_pm_firmware_model_proto_rawDescGZIP(), []int{4}
}

func (x *PmFirmwareUpdateFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *PmFirmwareUpdateFieldsRequest) GetData() *PmFirmware {
	if x != nil {
		return x.Data
	}
	return nil
}

// 表模型主键，只能是整数或字符串，若生成错误，请检查数据库表主键是否正确。支持组合主键
type PmFirmwarePrimarykey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PmFirmwarePrimarykey) Reset() {
	*x = PmFirmwarePrimarykey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pm_firmware_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmFirmwarePrimarykey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmFirmwarePrimarykey) ProtoMessage() {}

func (x *PmFirmwarePrimarykey) ProtoReflect() protoreflect.Message {
	mi := &file_pm_firmware_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmFirmwarePrimarykey.ProtoReflect.Descriptor instead.
func (*PmFirmwarePrimarykey) Descriptor() ([]byte, []int) {
	return file_pm_firmware_model_proto_rawDescGZIP(), []int{5}
}

func (x *PmFirmwarePrimarykey) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PmFirmwareBatchDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*PmFirmwarePrimarykey `protobuf:"bytes,101,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *PmFirmwareBatchDeleteRequest) Reset() {
	*x = PmFirmwareBatchDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pm_firmware_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PmFirmwareBatchDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PmFirmwareBatchDeleteRequest) ProtoMessage() {}

func (x *PmFirmwareBatchDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pm_firmware_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PmFirmwareBatchDeleteRequest.ProtoReflect.Descriptor instead.
func (*PmFirmwareBatchDeleteRequest) Descriptor() ([]byte, []int) {
	return file_pm_firmware_model_proto_rawDescGZIP(), []int{6}
}

func (x *PmFirmwareBatchDeleteRequest) GetKeys() []*PmFirmwarePrimarykey {
	if x != nil {
		return x.Keys
	}
	return nil
}

var File_pm_firmware_model_proto protoreflect.FileDescriptor

var file_pm_firmware_model_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x6d, 0x5f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x07, 0x0a, 0x0a, 0x50, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x69,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4f,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0x6f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x72, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x18, 0x74, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x75, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x76, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x18, 0x78, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x73, 0x18, 0x79, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x69, 0x73, 0x4d, 0x75, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x4d, 0x75,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x7a, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x7b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x7a, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x7a, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x7c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x7a, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x7a, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x7a, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x7a, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x7a, 0x69, 0x70, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x06, 0x69, 0x73, 0x4d, 0x75, 0x73, 0x74,
	0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x75, 0x73, 0x74, 0x22,
	0xfc, 0x03, 0x0a, 0x10, 0x50, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x69, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x6d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x22, 0xca,
	0x01, 0x0a, 0x15, 0x50, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18,
	0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x69, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x12,
	0x50, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x68,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x60, 0x0a, 0x1d, 0x50, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x50, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x26, 0x0a, 0x14, 0x50, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x50,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x51, 0x0a, 0x1c, 0x50, 0x6d, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x50, 0x6d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x42, 0x11, 0x5a, 0x0f,
	0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pm_firmware_model_proto_rawDescOnce sync.Once
	file_pm_firmware_model_proto_rawDescData = file_pm_firmware_model_proto_rawDesc
)

func file_pm_firmware_model_proto_rawDescGZIP() []byte {
	file_pm_firmware_model_proto_rawDescOnce.Do(func() {
		file_pm_firmware_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_pm_firmware_model_proto_rawDescData)
	})
	return file_pm_firmware_model_proto_rawDescData
}

var file_pm_firmware_model_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_pm_firmware_model_proto_goTypes = []interface{}{
	(*PmFirmware)(nil),                    // 0: service.PmFirmware
	(*PmFirmwareFilter)(nil),              // 1: service.PmFirmwareFilter
	(*PmFirmwareListRequest)(nil),         // 2: service.PmFirmwareListRequest
	(*PmFirmwareResponse)(nil),            // 3: service.PmFirmwareResponse
	(*PmFirmwareUpdateFieldsRequest)(nil), // 4: service.PmFirmwareUpdateFieldsRequest
	(*PmFirmwarePrimarykey)(nil),          // 5: service.PmFirmwarePrimarykey
	(*PmFirmwareBatchDeleteRequest)(nil),  // 6: service.PmFirmwareBatchDeleteRequest
	(*timestamppb.Timestamp)(nil),         // 7: google.protobuf.Timestamp
}
var file_pm_firmware_model_proto_depIdxs = []int32{
	7,  // 0: service.PmFirmware.createdAt:type_name -> google.protobuf.Timestamp
	7,  // 1: service.PmFirmware.updatedAt:type_name -> google.protobuf.Timestamp
	7,  // 2: service.PmFirmware.deletedAt:type_name -> google.protobuf.Timestamp
	7,  // 3: service.PmFirmwareFilter.createdAt:type_name -> google.protobuf.Timestamp
	7,  // 4: service.PmFirmwareFilter.updatedAt:type_name -> google.protobuf.Timestamp
	7,  // 5: service.PmFirmwareFilter.deletedAt:type_name -> google.protobuf.Timestamp
	0,  // 6: service.PmFirmwareListRequest.query:type_name -> service.PmFirmware
	0,  // 7: service.PmFirmwareResponse.data:type_name -> service.PmFirmware
	0,  // 8: service.PmFirmwareUpdateFieldsRequest.data:type_name -> service.PmFirmware
	5,  // 9: service.PmFirmwareBatchDeleteRequest.keys:type_name -> service.PmFirmwarePrimarykey
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_pm_firmware_model_proto_init() }
func file_pm_firmware_model_proto_init() {
	if File_pm_firmware_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pm_firmware_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmFirmware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pm_firmware_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmFirmwareFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pm_firmware_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmFirmwareListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pm_firmware_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmFirmwareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pm_firmware_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmFirmwareUpdateFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pm_firmware_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmFirmwarePrimarykey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pm_firmware_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PmFirmwareBatchDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pm_firmware_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pm_firmware_model_proto_goTypes,
		DependencyIndexes: file_pm_firmware_model_proto_depIdxs,
		MessageInfos:      file_pm_firmware_model_proto_msgTypes,
	}.Build()
	File_pm_firmware_model_proto = out.File
	file_pm_firmware_model_proto_rawDesc = nil
	file_pm_firmware_model_proto_goTypes = nil
	file_pm_firmware_model_proto_depIdxs = nil
}
