// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: mp_message_push_field_service.gen.proto

package protosService

import (
	fmt "fmt"
	math "math"

	proto "google.golang.org/protobuf/proto"

	context "context"

	api "go-micro.dev/v4/api"

	client "go-micro.dev/v4/client"

	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MpMessagePushFieldService service

func NewMpMessagePushFieldServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "MpMessagePushFieldService.Create",
			Path:    []string{"/v1/mpMessagePushField/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushFieldService.Delete",
			Path:    []string{"/v1/mpMessagePushField/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushFieldService.DeleteById",
			Path:    []string{"/v1/mpMessagePushField/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushFieldService.DeleteByIds",
			Path:    []string{"/v1/mpMessagePushField/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushFieldService.Update",
			Path:    []string{"/v1/mpMessagePushField/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushFieldService.UpdateAll",
			Path:    []string{"/v1/mpMessagePushField/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushFieldService.UpdateFields",
			Path:    []string{"/v1/mpMessagePushField/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushFieldService.FindById",
			Path:    []string{"/v1/mpMessagePushField/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushFieldService.Find",
			Path:    []string{"/v1/mpMessagePushField/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "MpMessagePushFieldService.Lists",
			Path:    []string{"/v1/mpMessagePushField/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for MpMessagePushFieldService service

type MpMessagePushFieldService interface {
	//创建
	Create(ctx context.Context, in *MpMessagePushField, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *MpMessagePushField, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *MpMessagePushField, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *MpMessagePushFieldBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *MpMessagePushField, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *MpMessagePushField, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *MpMessagePushFieldUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *MpMessagePushFieldFilter, opts ...client.CallOption) (*MpMessagePushFieldResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *MpMessagePushFieldFilter, opts ...client.CallOption) (*MpMessagePushFieldResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *MpMessagePushFieldListRequest, opts ...client.CallOption) (*MpMessagePushFieldResponse, error)
}

type mpMessagePushFieldService struct {
	c    client.Client
	name string
}

func NewMpMessagePushFieldService(name string, c client.Client) MpMessagePushFieldService {
	return &mpMessagePushFieldService{
		c:    c,
		name: name,
	}
}

func (c *mpMessagePushFieldService) Create(ctx context.Context, in *MpMessagePushField, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushFieldService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushFieldService) Delete(ctx context.Context, in *MpMessagePushField, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushFieldService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushFieldService) DeleteById(ctx context.Context, in *MpMessagePushField, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushFieldService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushFieldService) DeleteByIds(ctx context.Context, in *MpMessagePushFieldBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushFieldService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushFieldService) Update(ctx context.Context, in *MpMessagePushField, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushFieldService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushFieldService) UpdateAll(ctx context.Context, in *MpMessagePushField, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushFieldService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushFieldService) UpdateFields(ctx context.Context, in *MpMessagePushFieldUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushFieldService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushFieldService) FindById(ctx context.Context, in *MpMessagePushFieldFilter, opts ...client.CallOption) (*MpMessagePushFieldResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushFieldService.FindById", in)
	out := new(MpMessagePushFieldResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushFieldService) Find(ctx context.Context, in *MpMessagePushFieldFilter, opts ...client.CallOption) (*MpMessagePushFieldResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushFieldService.Find", in)
	out := new(MpMessagePushFieldResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mpMessagePushFieldService) Lists(ctx context.Context, in *MpMessagePushFieldListRequest, opts ...client.CallOption) (*MpMessagePushFieldResponse, error) {
	req := c.c.NewRequest(c.name, "MpMessagePushFieldService.Lists", in)
	out := new(MpMessagePushFieldResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MpMessagePushFieldService service

type MpMessagePushFieldServiceHandler interface {
	//创建
	Create(context.Context, *MpMessagePushField, *Response) error
	//匹配多条件删除
	Delete(context.Context, *MpMessagePushField, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *MpMessagePushField, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *MpMessagePushFieldBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *MpMessagePushField, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *MpMessagePushField, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *MpMessagePushFieldUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *MpMessagePushFieldFilter, *MpMessagePushFieldResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *MpMessagePushFieldFilter, *MpMessagePushFieldResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *MpMessagePushFieldListRequest, *MpMessagePushFieldResponse) error
}

func RegisterMpMessagePushFieldServiceHandler(s server.Server, hdlr MpMessagePushFieldServiceHandler, opts ...server.HandlerOption) error {
	type mpMessagePushFieldService interface {
		Create(ctx context.Context, in *MpMessagePushField, out *Response) error
		Delete(ctx context.Context, in *MpMessagePushField, out *Response) error
		DeleteById(ctx context.Context, in *MpMessagePushField, out *Response) error
		DeleteByIds(ctx context.Context, in *MpMessagePushFieldBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *MpMessagePushField, out *Response) error
		UpdateAll(ctx context.Context, in *MpMessagePushField, out *Response) error
		UpdateFields(ctx context.Context, in *MpMessagePushFieldUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *MpMessagePushFieldFilter, out *MpMessagePushFieldResponse) error
		Find(ctx context.Context, in *MpMessagePushFieldFilter, out *MpMessagePushFieldResponse) error
		Lists(ctx context.Context, in *MpMessagePushFieldListRequest, out *MpMessagePushFieldResponse) error
	}
	type MpMessagePushFieldService struct {
		mpMessagePushFieldService
	}
	h := &mpMessagePushFieldServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushFieldService.Create",
		Path:    []string{"/v1/mpMessagePushField/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushFieldService.Delete",
		Path:    []string{"/v1/mpMessagePushField/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushFieldService.DeleteById",
		Path:    []string{"/v1/mpMessagePushField/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushFieldService.DeleteByIds",
		Path:    []string{"/v1/mpMessagePushField/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushFieldService.Update",
		Path:    []string{"/v1/mpMessagePushField/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushFieldService.UpdateAll",
		Path:    []string{"/v1/mpMessagePushField/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushFieldService.UpdateFields",
		Path:    []string{"/v1/mpMessagePushField/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushFieldService.FindById",
		Path:    []string{"/v1/mpMessagePushField/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushFieldService.Find",
		Path:    []string{"/v1/mpMessagePushField/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MpMessagePushFieldService.Lists",
		Path:    []string{"/v1/mpMessagePushField/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&MpMessagePushFieldService{h}, opts...))
}

type mpMessagePushFieldServiceHandler struct {
	MpMessagePushFieldServiceHandler
}

func (h *mpMessagePushFieldServiceHandler) Create(ctx context.Context, in *MpMessagePushField, out *Response) error {
	return h.MpMessagePushFieldServiceHandler.Create(ctx, in, out)
}

func (h *mpMessagePushFieldServiceHandler) Delete(ctx context.Context, in *MpMessagePushField, out *Response) error {
	return h.MpMessagePushFieldServiceHandler.Delete(ctx, in, out)
}

func (h *mpMessagePushFieldServiceHandler) DeleteById(ctx context.Context, in *MpMessagePushField, out *Response) error {
	return h.MpMessagePushFieldServiceHandler.DeleteById(ctx, in, out)
}

func (h *mpMessagePushFieldServiceHandler) DeleteByIds(ctx context.Context, in *MpMessagePushFieldBatchDeleteRequest, out *Response) error {
	return h.MpMessagePushFieldServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *mpMessagePushFieldServiceHandler) Update(ctx context.Context, in *MpMessagePushField, out *Response) error {
	return h.MpMessagePushFieldServiceHandler.Update(ctx, in, out)
}

func (h *mpMessagePushFieldServiceHandler) UpdateAll(ctx context.Context, in *MpMessagePushField, out *Response) error {
	return h.MpMessagePushFieldServiceHandler.UpdateAll(ctx, in, out)
}

func (h *mpMessagePushFieldServiceHandler) UpdateFields(ctx context.Context, in *MpMessagePushFieldUpdateFieldsRequest, out *Response) error {
	return h.MpMessagePushFieldServiceHandler.UpdateFields(ctx, in, out)
}

func (h *mpMessagePushFieldServiceHandler) FindById(ctx context.Context, in *MpMessagePushFieldFilter, out *MpMessagePushFieldResponse) error {
	return h.MpMessagePushFieldServiceHandler.FindById(ctx, in, out)
}

func (h *mpMessagePushFieldServiceHandler) Find(ctx context.Context, in *MpMessagePushFieldFilter, out *MpMessagePushFieldResponse) error {
	return h.MpMessagePushFieldServiceHandler.Find(ctx, in, out)
}

func (h *mpMessagePushFieldServiceHandler) Lists(ctx context.Context, in *MpMessagePushFieldListRequest, out *MpMessagePushFieldResponse) error {
	return h.MpMessagePushFieldServiceHandler.Lists(ctx, in, out)
}
