// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: weather.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for IPService service

func NewIPServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for IPService service

type IPService interface {
	GetData(ctx context.Context, in *GeoIpDataRequest, opts ...client.CallOption) (*GeoIpDataResponse, error)
	GetDataEx(ctx context.Context, in *GeoIpDataRequest, opts ...client.CallOption) (*GeoIpResp, error)
	GetGeoIPInfo(ctx context.Context, in *IPRequest, opts ...client.CallOption) (*GeoIPInfo, error)
}

type iPService struct {
	c    client.Client
	name string
}

func NewIPService(name string, c client.Client) IPService {
	return &iPService{
		c:    c,
		name: name,
	}
}

func (c *iPService) GetData(ctx context.Context, in *GeoIpDataRequest, opts ...client.CallOption) (*GeoIpDataResponse, error) {
	req := c.c.NewRequest(c.name, "IPService.GetData", in)
	out := new(GeoIpDataResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPService) GetDataEx(ctx context.Context, in *GeoIpDataRequest, opts ...client.CallOption) (*GeoIpResp, error) {
	req := c.c.NewRequest(c.name, "IPService.GetDataEx", in)
	out := new(GeoIpResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPService) GetGeoIPInfo(ctx context.Context, in *IPRequest, opts ...client.CallOption) (*GeoIPInfo, error) {
	req := c.c.NewRequest(c.name, "IPService.GetGeoIPInfo", in)
	out := new(GeoIPInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IPService service

type IPServiceHandler interface {
	GetData(context.Context, *GeoIpDataRequest, *GeoIpDataResponse) error
	GetDataEx(context.Context, *GeoIpDataRequest, *GeoIpResp) error
	GetGeoIPInfo(context.Context, *IPRequest, *GeoIPInfo) error
}

func RegisterIPServiceHandler(s server.Server, hdlr IPServiceHandler, opts ...server.HandlerOption) error {
	type iPService interface {
		GetData(ctx context.Context, in *GeoIpDataRequest, out *GeoIpDataResponse) error
		GetDataEx(ctx context.Context, in *GeoIpDataRequest, out *GeoIpResp) error
		GetGeoIPInfo(ctx context.Context, in *IPRequest, out *GeoIPInfo) error
	}
	type IPService struct {
		iPService
	}
	h := &iPServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&IPService{h}, opts...))
}

type iPServiceHandler struct {
	IPServiceHandler
}

func (h *iPServiceHandler) GetData(ctx context.Context, in *GeoIpDataRequest, out *GeoIpDataResponse) error {
	return h.IPServiceHandler.GetData(ctx, in, out)
}

func (h *iPServiceHandler) GetDataEx(ctx context.Context, in *GeoIpDataRequest, out *GeoIpResp) error {
	return h.IPServiceHandler.GetDataEx(ctx, in, out)
}

func (h *iPServiceHandler) GetGeoIPInfo(ctx context.Context, in *IPRequest, out *GeoIPInfo) error {
	return h.IPServiceHandler.GetGeoIPInfo(ctx, in, out)
}

// Api Endpoints for WeatherService service

func NewWeatherServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WeatherService service

type WeatherService interface {
	//获取实况的天气数据
	CurrentByCity(ctx context.Context, in *CityRequest, opts ...client.CallOption) (*CurrentData, error)
	//获取天气预报数据
	ForecasByCity(ctx context.Context, in *CityRequest, opts ...client.CallOption) (*ForecastData, error)
	//获取实况的天气数据
	CurrentByIP(ctx context.Context, in *IPRequest, opts ...client.CallOption) (*CurrentData, error)
	//获取天气预报数据
	ForecastByIP(ctx context.Context, in *IPRequest, opts ...client.CallOption) (*ForecastData, error)
	//获取实况的天气数据
	CurrentByCoordinates(ctx context.Context, in *CoordinatesRequest, opts ...client.CallOption) (*CurrentData, error)
	//获取天气预报数据
	ForecastByCoordinates(ctx context.Context, in *CoordinatesRequest, opts ...client.CallOption) (*ForecastData, error)
	//////以下设置定时订阅,根据配置文件设置的间隔定时更新实时天气//////
	//订阅某城市实时天气，支持重复订阅,订阅之后会定时拉取,并缓存到redis
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*Response, error)
	//取消订阅城市实时天气，支持重复取消订阅,订阅之后会定时拉取,并缓存到redis
	UnSubscribe(ctx context.Context, in *UnSubscribeRequest, opts ...client.CallOption) (*Response, error)
}

type weatherService struct {
	c    client.Client
	name string
}

func NewWeatherService(name string, c client.Client) WeatherService {
	return &weatherService{
		c:    c,
		name: name,
	}
}

func (c *weatherService) CurrentByCity(ctx context.Context, in *CityRequest, opts ...client.CallOption) (*CurrentData, error) {
	req := c.c.NewRequest(c.name, "WeatherService.CurrentByCity", in)
	out := new(CurrentData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherService) ForecasByCity(ctx context.Context, in *CityRequest, opts ...client.CallOption) (*ForecastData, error) {
	req := c.c.NewRequest(c.name, "WeatherService.ForecasByCity", in)
	out := new(ForecastData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherService) CurrentByIP(ctx context.Context, in *IPRequest, opts ...client.CallOption) (*CurrentData, error) {
	req := c.c.NewRequest(c.name, "WeatherService.CurrentByIP", in)
	out := new(CurrentData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherService) ForecastByIP(ctx context.Context, in *IPRequest, opts ...client.CallOption) (*ForecastData, error) {
	req := c.c.NewRequest(c.name, "WeatherService.ForecastByIP", in)
	out := new(ForecastData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherService) CurrentByCoordinates(ctx context.Context, in *CoordinatesRequest, opts ...client.CallOption) (*CurrentData, error) {
	req := c.c.NewRequest(c.name, "WeatherService.CurrentByCoordinates", in)
	out := new(CurrentData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherService) ForecastByCoordinates(ctx context.Context, in *CoordinatesRequest, opts ...client.CallOption) (*ForecastData, error) {
	req := c.c.NewRequest(c.name, "WeatherService.ForecastByCoordinates", in)
	out := new(ForecastData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherService) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "WeatherService.Subscribe", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherService) UnSubscribe(ctx context.Context, in *UnSubscribeRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "WeatherService.UnSubscribe", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WeatherService service

type WeatherServiceHandler interface {
	//获取实况的天气数据
	CurrentByCity(context.Context, *CityRequest, *CurrentData) error
	//获取天气预报数据
	ForecasByCity(context.Context, *CityRequest, *ForecastData) error
	//获取实况的天气数据
	CurrentByIP(context.Context, *IPRequest, *CurrentData) error
	//获取天气预报数据
	ForecastByIP(context.Context, *IPRequest, *ForecastData) error
	//获取实况的天气数据
	CurrentByCoordinates(context.Context, *CoordinatesRequest, *CurrentData) error
	//获取天气预报数据
	ForecastByCoordinates(context.Context, *CoordinatesRequest, *ForecastData) error
	//////以下设置定时订阅,根据配置文件设置的间隔定时更新实时天气//////
	//订阅某城市实时天气，支持重复订阅,订阅之后会定时拉取,并缓存到redis
	Subscribe(context.Context, *SubscribeRequest, *Response) error
	//取消订阅城市实时天气，支持重复取消订阅,订阅之后会定时拉取,并缓存到redis
	UnSubscribe(context.Context, *UnSubscribeRequest, *Response) error
}

func RegisterWeatherServiceHandler(s server.Server, hdlr WeatherServiceHandler, opts ...server.HandlerOption) error {
	type weatherService interface {
		CurrentByCity(ctx context.Context, in *CityRequest, out *CurrentData) error
		ForecasByCity(ctx context.Context, in *CityRequest, out *ForecastData) error
		CurrentByIP(ctx context.Context, in *IPRequest, out *CurrentData) error
		ForecastByIP(ctx context.Context, in *IPRequest, out *ForecastData) error
		CurrentByCoordinates(ctx context.Context, in *CoordinatesRequest, out *CurrentData) error
		ForecastByCoordinates(ctx context.Context, in *CoordinatesRequest, out *ForecastData) error
		Subscribe(ctx context.Context, in *SubscribeRequest, out *Response) error
		UnSubscribe(ctx context.Context, in *UnSubscribeRequest, out *Response) error
	}
	type WeatherService struct {
		weatherService
	}
	h := &weatherServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WeatherService{h}, opts...))
}

type weatherServiceHandler struct {
	WeatherServiceHandler
}

func (h *weatherServiceHandler) CurrentByCity(ctx context.Context, in *CityRequest, out *CurrentData) error {
	return h.WeatherServiceHandler.CurrentByCity(ctx, in, out)
}

func (h *weatherServiceHandler) ForecasByCity(ctx context.Context, in *CityRequest, out *ForecastData) error {
	return h.WeatherServiceHandler.ForecasByCity(ctx, in, out)
}

func (h *weatherServiceHandler) CurrentByIP(ctx context.Context, in *IPRequest, out *CurrentData) error {
	return h.WeatherServiceHandler.CurrentByIP(ctx, in, out)
}

func (h *weatherServiceHandler) ForecastByIP(ctx context.Context, in *IPRequest, out *ForecastData) error {
	return h.WeatherServiceHandler.ForecastByIP(ctx, in, out)
}

func (h *weatherServiceHandler) CurrentByCoordinates(ctx context.Context, in *CoordinatesRequest, out *CurrentData) error {
	return h.WeatherServiceHandler.CurrentByCoordinates(ctx, in, out)
}

func (h *weatherServiceHandler) ForecastByCoordinates(ctx context.Context, in *CoordinatesRequest, out *ForecastData) error {
	return h.WeatherServiceHandler.ForecastByCoordinates(ctx, in, out)
}

func (h *weatherServiceHandler) Subscribe(ctx context.Context, in *SubscribeRequest, out *Response) error {
	return h.WeatherServiceHandler.Subscribe(ctx, in, out)
}

func (h *weatherServiceHandler) UnSubscribe(ctx context.Context, in *UnSubscribeRequest, out *Response) error {
	return h.WeatherServiceHandler.UnSubscribe(ctx, in, out)
}
