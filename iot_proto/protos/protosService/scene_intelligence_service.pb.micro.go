// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: scene_intelligence_service.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SceneIntelligenceService service

func NewSceneIntelligenceServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "SceneIntelligenceService.Create",
			Path:    []string{"/v1/sceneIntelligence/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneIntelligenceService.Delete",
			Path:    []string{"/v1/sceneIntelligence/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneIntelligenceService.DeleteById",
			Path:    []string{"/v1/sceneIntelligence/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneIntelligenceService.DeleteByIds",
			Path:    []string{"/v1/sceneIntelligence/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneIntelligenceService.Update",
			Path:    []string{"/v1/sceneIntelligence/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneIntelligenceService.UpdateAll",
			Path:    []string{"/v1/sceneIntelligence/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneIntelligenceService.UpdateFields",
			Path:    []string{"/v1/sceneIntelligence/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneIntelligenceService.FindById",
			Path:    []string{"/v1/sceneIntelligence/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneIntelligenceService.Find",
			Path:    []string{"/v1/sceneIntelligence/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneIntelligenceService.Lists",
			Path:    []string{"/v1/sceneIntelligence/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "SceneIntelligenceService.OneKeyExec",
			Path:    []string{"/v1/sceneIntelligence/oneKeyExec"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for SceneIntelligenceService service

type SceneIntelligenceService interface {
	//创建
	Create(ctx context.Context, in *SceneIntelligence, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *SceneIntelligence, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *SceneIntelligence, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *SceneIntelligenceBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *SceneIntelligence, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *SceneIntelligence, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *SceneIntelligenceUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *SceneIntelligenceFilter, opts ...client.CallOption) (*SceneIntelligenceResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *SceneIntelligenceFilter, opts ...client.CallOption) (*SceneIntelligenceResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *SceneIntelligenceListRequest, opts ...client.CallOption) (*SceneIntelligenceResponse, error)
	//一键执行
	OneKeyExec(ctx context.Context, in *SceneIntelligencePrimarykey, opts ...client.CallOption) (*Response, error)
}

type sceneIntelligenceService struct {
	c    client.Client
	name string
}

func NewSceneIntelligenceService(name string, c client.Client) SceneIntelligenceService {
	return &sceneIntelligenceService{
		c:    c,
		name: name,
	}
}

func (c *sceneIntelligenceService) Create(ctx context.Context, in *SceneIntelligence, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SceneIntelligenceService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneIntelligenceService) Delete(ctx context.Context, in *SceneIntelligence, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SceneIntelligenceService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneIntelligenceService) DeleteById(ctx context.Context, in *SceneIntelligence, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SceneIntelligenceService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneIntelligenceService) DeleteByIds(ctx context.Context, in *SceneIntelligenceBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SceneIntelligenceService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneIntelligenceService) Update(ctx context.Context, in *SceneIntelligence, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SceneIntelligenceService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneIntelligenceService) UpdateAll(ctx context.Context, in *SceneIntelligence, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SceneIntelligenceService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneIntelligenceService) UpdateFields(ctx context.Context, in *SceneIntelligenceUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SceneIntelligenceService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneIntelligenceService) FindById(ctx context.Context, in *SceneIntelligenceFilter, opts ...client.CallOption) (*SceneIntelligenceResponse, error) {
	req := c.c.NewRequest(c.name, "SceneIntelligenceService.FindById", in)
	out := new(SceneIntelligenceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneIntelligenceService) Find(ctx context.Context, in *SceneIntelligenceFilter, opts ...client.CallOption) (*SceneIntelligenceResponse, error) {
	req := c.c.NewRequest(c.name, "SceneIntelligenceService.Find", in)
	out := new(SceneIntelligenceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneIntelligenceService) Lists(ctx context.Context, in *SceneIntelligenceListRequest, opts ...client.CallOption) (*SceneIntelligenceResponse, error) {
	req := c.c.NewRequest(c.name, "SceneIntelligenceService.Lists", in)
	out := new(SceneIntelligenceResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sceneIntelligenceService) OneKeyExec(ctx context.Context, in *SceneIntelligencePrimarykey, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SceneIntelligenceService.OneKeyExec", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SceneIntelligenceService service

type SceneIntelligenceServiceHandler interface {
	//创建
	Create(context.Context, *SceneIntelligence, *Response) error
	//匹配多条件删除
	Delete(context.Context, *SceneIntelligence, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *SceneIntelligence, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *SceneIntelligenceBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *SceneIntelligence, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *SceneIntelligence, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *SceneIntelligenceUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *SceneIntelligenceFilter, *SceneIntelligenceResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *SceneIntelligenceFilter, *SceneIntelligenceResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *SceneIntelligenceListRequest, *SceneIntelligenceResponse) error
	//一键执行
	OneKeyExec(context.Context, *SceneIntelligencePrimarykey, *Response) error
}

func RegisterSceneIntelligenceServiceHandler(s server.Server, hdlr SceneIntelligenceServiceHandler, opts ...server.HandlerOption) error {
	type sceneIntelligenceService interface {
		Create(ctx context.Context, in *SceneIntelligence, out *Response) error
		Delete(ctx context.Context, in *SceneIntelligence, out *Response) error
		DeleteById(ctx context.Context, in *SceneIntelligence, out *Response) error
		DeleteByIds(ctx context.Context, in *SceneIntelligenceBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *SceneIntelligence, out *Response) error
		UpdateAll(ctx context.Context, in *SceneIntelligence, out *Response) error
		UpdateFields(ctx context.Context, in *SceneIntelligenceUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *SceneIntelligenceFilter, out *SceneIntelligenceResponse) error
		Find(ctx context.Context, in *SceneIntelligenceFilter, out *SceneIntelligenceResponse) error
		Lists(ctx context.Context, in *SceneIntelligenceListRequest, out *SceneIntelligenceResponse) error
		OneKeyExec(ctx context.Context, in *SceneIntelligencePrimarykey, out *Response) error
	}
	type SceneIntelligenceService struct {
		sceneIntelligenceService
	}
	h := &sceneIntelligenceServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneIntelligenceService.Create",
		Path:    []string{"/v1/sceneIntelligence/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneIntelligenceService.Delete",
		Path:    []string{"/v1/sceneIntelligence/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneIntelligenceService.DeleteById",
		Path:    []string{"/v1/sceneIntelligence/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneIntelligenceService.DeleteByIds",
		Path:    []string{"/v1/sceneIntelligence/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneIntelligenceService.Update",
		Path:    []string{"/v1/sceneIntelligence/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneIntelligenceService.UpdateAll",
		Path:    []string{"/v1/sceneIntelligence/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneIntelligenceService.UpdateFields",
		Path:    []string{"/v1/sceneIntelligence/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneIntelligenceService.FindById",
		Path:    []string{"/v1/sceneIntelligence/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneIntelligenceService.Find",
		Path:    []string{"/v1/sceneIntelligence/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneIntelligenceService.Lists",
		Path:    []string{"/v1/sceneIntelligence/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "SceneIntelligenceService.OneKeyExec",
		Path:    []string{"/v1/sceneIntelligence/oneKeyExec"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&SceneIntelligenceService{h}, opts...))
}

type sceneIntelligenceServiceHandler struct {
	SceneIntelligenceServiceHandler
}

func (h *sceneIntelligenceServiceHandler) Create(ctx context.Context, in *SceneIntelligence, out *Response) error {
	return h.SceneIntelligenceServiceHandler.Create(ctx, in, out)
}

func (h *sceneIntelligenceServiceHandler) Delete(ctx context.Context, in *SceneIntelligence, out *Response) error {
	return h.SceneIntelligenceServiceHandler.Delete(ctx, in, out)
}

func (h *sceneIntelligenceServiceHandler) DeleteById(ctx context.Context, in *SceneIntelligence, out *Response) error {
	return h.SceneIntelligenceServiceHandler.DeleteById(ctx, in, out)
}

func (h *sceneIntelligenceServiceHandler) DeleteByIds(ctx context.Context, in *SceneIntelligenceBatchDeleteRequest, out *Response) error {
	return h.SceneIntelligenceServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *sceneIntelligenceServiceHandler) Update(ctx context.Context, in *SceneIntelligence, out *Response) error {
	return h.SceneIntelligenceServiceHandler.Update(ctx, in, out)
}

func (h *sceneIntelligenceServiceHandler) UpdateAll(ctx context.Context, in *SceneIntelligence, out *Response) error {
	return h.SceneIntelligenceServiceHandler.UpdateAll(ctx, in, out)
}

func (h *sceneIntelligenceServiceHandler) UpdateFields(ctx context.Context, in *SceneIntelligenceUpdateFieldsRequest, out *Response) error {
	return h.SceneIntelligenceServiceHandler.UpdateFields(ctx, in, out)
}

func (h *sceneIntelligenceServiceHandler) FindById(ctx context.Context, in *SceneIntelligenceFilter, out *SceneIntelligenceResponse) error {
	return h.SceneIntelligenceServiceHandler.FindById(ctx, in, out)
}

func (h *sceneIntelligenceServiceHandler) Find(ctx context.Context, in *SceneIntelligenceFilter, out *SceneIntelligenceResponse) error {
	return h.SceneIntelligenceServiceHandler.Find(ctx, in, out)
}

func (h *sceneIntelligenceServiceHandler) Lists(ctx context.Context, in *SceneIntelligenceListRequest, out *SceneIntelligenceResponse) error {
	return h.SceneIntelligenceServiceHandler.Lists(ctx, in, out)
}

func (h *sceneIntelligenceServiceHandler) OneKeyExec(ctx context.Context, in *SceneIntelligencePrimarykey, out *Response) error {
	return h.SceneIntelligenceServiceHandler.OneKeyExec(ctx, in, out)
}
