// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: iot_device_group_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for IotDeviceGroupService service

func NewIotDeviceGroupServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "IotDeviceGroupService.Create",
			Path:    []string{"/v1/iotDeviceGroup/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceGroupService.Delete",
			Path:    []string{"/v1/iotDeviceGroup/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceGroupService.DeleteById",
			Path:    []string{"/v1/iotDeviceGroup/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceGroupService.DeleteByIds",
			Path:    []string{"/v1/iotDeviceGroup/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceGroupService.Update",
			Path:    []string{"/v1/iotDeviceGroup/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceGroupService.UpdateAll",
			Path:    []string{"/v1/iotDeviceGroup/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceGroupService.UpdateFields",
			Path:    []string{"/v1/iotDeviceGroup/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceGroupService.FindById",
			Path:    []string{"/v1/iotDeviceGroup/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceGroupService.Find",
			Path:    []string{"/v1/iotDeviceGroup/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceGroupService.Lists",
			Path:    []string{"/v1/iotDeviceGroup/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "IotDeviceGroupService.UpsertGroup",
			Path:    []string{"/v1/iotDeviceGroup/upsertGroup"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for IotDeviceGroupService service

type IotDeviceGroupService interface {
	//创建
	Create(ctx context.Context, in *IotDeviceGroup, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *IotDeviceGroup, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *IotDeviceGroup, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *IotDeviceGroupBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *IotDeviceGroup, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *IotDeviceGroup, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *IotDeviceGroupUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *IotDeviceGroupFilter, opts ...client.CallOption) (*IotDeviceGroupResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *IotDeviceGroupFilter, opts ...client.CallOption) (*IotDeviceGroupResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *IotDeviceGroupListRequest, opts ...client.CallOption) (*IotDeviceGroupResponse, error)
	//新增修改群组
	UpsertGroup(ctx context.Context, in *UpsertGroupRequest, opts ...client.CallOption) (*IotDeviceGroupResponse, error)
}

type iotDeviceGroupService struct {
	c    client.Client
	name string
}

func NewIotDeviceGroupService(name string, c client.Client) IotDeviceGroupService {
	return &iotDeviceGroupService{
		c:    c,
		name: name,
	}
}

func (c *iotDeviceGroupService) Create(ctx context.Context, in *IotDeviceGroup, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceGroupService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceGroupService) Delete(ctx context.Context, in *IotDeviceGroup, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceGroupService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceGroupService) DeleteById(ctx context.Context, in *IotDeviceGroup, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceGroupService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceGroupService) DeleteByIds(ctx context.Context, in *IotDeviceGroupBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceGroupService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceGroupService) Update(ctx context.Context, in *IotDeviceGroup, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceGroupService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceGroupService) UpdateAll(ctx context.Context, in *IotDeviceGroup, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceGroupService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceGroupService) UpdateFields(ctx context.Context, in *IotDeviceGroupUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "IotDeviceGroupService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceGroupService) FindById(ctx context.Context, in *IotDeviceGroupFilter, opts ...client.CallOption) (*IotDeviceGroupResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceGroupService.FindById", in)
	out := new(IotDeviceGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceGroupService) Find(ctx context.Context, in *IotDeviceGroupFilter, opts ...client.CallOption) (*IotDeviceGroupResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceGroupService.Find", in)
	out := new(IotDeviceGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceGroupService) Lists(ctx context.Context, in *IotDeviceGroupListRequest, opts ...client.CallOption) (*IotDeviceGroupResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceGroupService.Lists", in)
	out := new(IotDeviceGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iotDeviceGroupService) UpsertGroup(ctx context.Context, in *UpsertGroupRequest, opts ...client.CallOption) (*IotDeviceGroupResponse, error) {
	req := c.c.NewRequest(c.name, "IotDeviceGroupService.UpsertGroup", in)
	out := new(IotDeviceGroupResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IotDeviceGroupService service

type IotDeviceGroupServiceHandler interface {
	//创建
	Create(context.Context, *IotDeviceGroup, *Response) error
	//匹配多条件删除
	Delete(context.Context, *IotDeviceGroup, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *IotDeviceGroup, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *IotDeviceGroupBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *IotDeviceGroup, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *IotDeviceGroup, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *IotDeviceGroupUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *IotDeviceGroupFilter, *IotDeviceGroupResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *IotDeviceGroupFilter, *IotDeviceGroupResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *IotDeviceGroupListRequest, *IotDeviceGroupResponse) error
	//新增修改群组
	UpsertGroup(context.Context, *UpsertGroupRequest, *IotDeviceGroupResponse) error
}

func RegisterIotDeviceGroupServiceHandler(s server.Server, hdlr IotDeviceGroupServiceHandler, opts ...server.HandlerOption) error {
	type iotDeviceGroupService interface {
		Create(ctx context.Context, in *IotDeviceGroup, out *Response) error
		Delete(ctx context.Context, in *IotDeviceGroup, out *Response) error
		DeleteById(ctx context.Context, in *IotDeviceGroup, out *Response) error
		DeleteByIds(ctx context.Context, in *IotDeviceGroupBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *IotDeviceGroup, out *Response) error
		UpdateAll(ctx context.Context, in *IotDeviceGroup, out *Response) error
		UpdateFields(ctx context.Context, in *IotDeviceGroupUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *IotDeviceGroupFilter, out *IotDeviceGroupResponse) error
		Find(ctx context.Context, in *IotDeviceGroupFilter, out *IotDeviceGroupResponse) error
		Lists(ctx context.Context, in *IotDeviceGroupListRequest, out *IotDeviceGroupResponse) error
		UpsertGroup(ctx context.Context, in *UpsertGroupRequest, out *IotDeviceGroupResponse) error
	}
	type IotDeviceGroupService struct {
		iotDeviceGroupService
	}
	h := &iotDeviceGroupServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceGroupService.Create",
		Path:    []string{"/v1/iotDeviceGroup/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceGroupService.Delete",
		Path:    []string{"/v1/iotDeviceGroup/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceGroupService.DeleteById",
		Path:    []string{"/v1/iotDeviceGroup/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceGroupService.DeleteByIds",
		Path:    []string{"/v1/iotDeviceGroup/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceGroupService.Update",
		Path:    []string{"/v1/iotDeviceGroup/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceGroupService.UpdateAll",
		Path:    []string{"/v1/iotDeviceGroup/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceGroupService.UpdateFields",
		Path:    []string{"/v1/iotDeviceGroup/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceGroupService.FindById",
		Path:    []string{"/v1/iotDeviceGroup/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceGroupService.Find",
		Path:    []string{"/v1/iotDeviceGroup/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceGroupService.Lists",
		Path:    []string{"/v1/iotDeviceGroup/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "IotDeviceGroupService.UpsertGroup",
		Path:    []string{"/v1/iotDeviceGroup/upsertGroup"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&IotDeviceGroupService{h}, opts...))
}

type iotDeviceGroupServiceHandler struct {
	IotDeviceGroupServiceHandler
}

func (h *iotDeviceGroupServiceHandler) Create(ctx context.Context, in *IotDeviceGroup, out *Response) error {
	return h.IotDeviceGroupServiceHandler.Create(ctx, in, out)
}

func (h *iotDeviceGroupServiceHandler) Delete(ctx context.Context, in *IotDeviceGroup, out *Response) error {
	return h.IotDeviceGroupServiceHandler.Delete(ctx, in, out)
}

func (h *iotDeviceGroupServiceHandler) DeleteById(ctx context.Context, in *IotDeviceGroup, out *Response) error {
	return h.IotDeviceGroupServiceHandler.DeleteById(ctx, in, out)
}

func (h *iotDeviceGroupServiceHandler) DeleteByIds(ctx context.Context, in *IotDeviceGroupBatchDeleteRequest, out *Response) error {
	return h.IotDeviceGroupServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *iotDeviceGroupServiceHandler) Update(ctx context.Context, in *IotDeviceGroup, out *Response) error {
	return h.IotDeviceGroupServiceHandler.Update(ctx, in, out)
}

func (h *iotDeviceGroupServiceHandler) UpdateAll(ctx context.Context, in *IotDeviceGroup, out *Response) error {
	return h.IotDeviceGroupServiceHandler.UpdateAll(ctx, in, out)
}

func (h *iotDeviceGroupServiceHandler) UpdateFields(ctx context.Context, in *IotDeviceGroupUpdateFieldsRequest, out *Response) error {
	return h.IotDeviceGroupServiceHandler.UpdateFields(ctx, in, out)
}

func (h *iotDeviceGroupServiceHandler) FindById(ctx context.Context, in *IotDeviceGroupFilter, out *IotDeviceGroupResponse) error {
	return h.IotDeviceGroupServiceHandler.FindById(ctx, in, out)
}

func (h *iotDeviceGroupServiceHandler) Find(ctx context.Context, in *IotDeviceGroupFilter, out *IotDeviceGroupResponse) error {
	return h.IotDeviceGroupServiceHandler.Find(ctx, in, out)
}

func (h *iotDeviceGroupServiceHandler) Lists(ctx context.Context, in *IotDeviceGroupListRequest, out *IotDeviceGroupResponse) error {
	return h.IotDeviceGroupServiceHandler.Lists(ctx, in, out)
}

func (h *iotDeviceGroupServiceHandler) UpsertGroup(ctx context.Context, in *UpsertGroupRequest, out *IotDeviceGroupResponse) error {
	return h.IotDeviceGroupServiceHandler.UpsertGroup(ctx, in, out)
}
