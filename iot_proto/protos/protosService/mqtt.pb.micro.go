// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: mqtt.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MqttService service

func NewMqttServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MqttService service

type MqttService interface {
	//发布消息到MQTT
	Publish(ctx context.Context, in *PublishMessage, opts ...client.CallOption) (*ResponseEx, error)
	//保存用户，具体是新增还是修改，由业务逻辑判断
	SaveMqttUser(ctx context.Context, in *MqttUser, opts ...client.CallOption) (*ResponseEx, error)
	//查询用户
	GetMqttUser(ctx context.Context, in *FilterMqttUser, opts ...client.CallOption) (*ResponseEx, error)
	//删除用户
	DeleteMqttUser(ctx context.Context, in *FilterMqttUser, opts ...client.CallOption) (*ResponseEx, error)
	//批量发布
	BatchPublish(ctx context.Context, in *BatchPublishMessage, opts ...client.CallOption) (*ResponseEx, error)
	//生成三元组
	BatchGenTriad(ctx context.Context, in *BatchGenTriadRequest, opts ...client.CallOption) (*BatchGenTriadResponse, error)
	//校验三元组
	VerifyTriad(ctx context.Context, in *VerifyTriadRequest, opts ...client.CallOption) (*VerifyTriadResponse, error)
	//生成虚拟设备三元组
	GenVirtualTriad(ctx context.Context, in *BatchGenTriadRequest, opts ...client.CallOption) (*BatchGenTriadResponse, error)
}

type mqttService struct {
	c    client.Client
	name string
}

func NewMqttService(name string, c client.Client) MqttService {
	return &mqttService{
		c:    c,
		name: name,
	}
}

func (c *mqttService) Publish(ctx context.Context, in *PublishMessage, opts ...client.CallOption) (*ResponseEx, error) {
	req := c.c.NewRequest(c.name, "MqttService.Publish", in)
	out := new(ResponseEx)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqttService) SaveMqttUser(ctx context.Context, in *MqttUser, opts ...client.CallOption) (*ResponseEx, error) {
	req := c.c.NewRequest(c.name, "MqttService.SaveMqttUser", in)
	out := new(ResponseEx)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqttService) GetMqttUser(ctx context.Context, in *FilterMqttUser, opts ...client.CallOption) (*ResponseEx, error) {
	req := c.c.NewRequest(c.name, "MqttService.GetMqttUser", in)
	out := new(ResponseEx)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqttService) DeleteMqttUser(ctx context.Context, in *FilterMqttUser, opts ...client.CallOption) (*ResponseEx, error) {
	req := c.c.NewRequest(c.name, "MqttService.DeleteMqttUser", in)
	out := new(ResponseEx)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqttService) BatchPublish(ctx context.Context, in *BatchPublishMessage, opts ...client.CallOption) (*ResponseEx, error) {
	req := c.c.NewRequest(c.name, "MqttService.BatchPublish", in)
	out := new(ResponseEx)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqttService) BatchGenTriad(ctx context.Context, in *BatchGenTriadRequest, opts ...client.CallOption) (*BatchGenTriadResponse, error) {
	req := c.c.NewRequest(c.name, "MqttService.BatchGenTriad", in)
	out := new(BatchGenTriadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqttService) VerifyTriad(ctx context.Context, in *VerifyTriadRequest, opts ...client.CallOption) (*VerifyTriadResponse, error) {
	req := c.c.NewRequest(c.name, "MqttService.VerifyTriad", in)
	out := new(VerifyTriadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqttService) GenVirtualTriad(ctx context.Context, in *BatchGenTriadRequest, opts ...client.CallOption) (*BatchGenTriadResponse, error) {
	req := c.c.NewRequest(c.name, "MqttService.GenVirtualTriad", in)
	out := new(BatchGenTriadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MqttService service

type MqttServiceHandler interface {
	//发布消息到MQTT
	Publish(context.Context, *PublishMessage, *ResponseEx) error
	//保存用户，具体是新增还是修改，由业务逻辑判断
	SaveMqttUser(context.Context, *MqttUser, *ResponseEx) error
	//查询用户
	GetMqttUser(context.Context, *FilterMqttUser, *ResponseEx) error
	//删除用户
	DeleteMqttUser(context.Context, *FilterMqttUser, *ResponseEx) error
	//批量发布
	BatchPublish(context.Context, *BatchPublishMessage, *ResponseEx) error
	//生成三元组
	BatchGenTriad(context.Context, *BatchGenTriadRequest, *BatchGenTriadResponse) error
	//校验三元组
	VerifyTriad(context.Context, *VerifyTriadRequest, *VerifyTriadResponse) error
	//生成虚拟设备三元组
	GenVirtualTriad(context.Context, *BatchGenTriadRequest, *BatchGenTriadResponse) error
}

func RegisterMqttServiceHandler(s server.Server, hdlr MqttServiceHandler, opts ...server.HandlerOption) error {
	type mqttService interface {
		Publish(ctx context.Context, in *PublishMessage, out *ResponseEx) error
		SaveMqttUser(ctx context.Context, in *MqttUser, out *ResponseEx) error
		GetMqttUser(ctx context.Context, in *FilterMqttUser, out *ResponseEx) error
		DeleteMqttUser(ctx context.Context, in *FilterMqttUser, out *ResponseEx) error
		BatchPublish(ctx context.Context, in *BatchPublishMessage, out *ResponseEx) error
		BatchGenTriad(ctx context.Context, in *BatchGenTriadRequest, out *BatchGenTriadResponse) error
		VerifyTriad(ctx context.Context, in *VerifyTriadRequest, out *VerifyTriadResponse) error
		GenVirtualTriad(ctx context.Context, in *BatchGenTriadRequest, out *BatchGenTriadResponse) error
	}
	type MqttService struct {
		mqttService
	}
	h := &mqttServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&MqttService{h}, opts...))
}

type mqttServiceHandler struct {
	MqttServiceHandler
}

func (h *mqttServiceHandler) Publish(ctx context.Context, in *PublishMessage, out *ResponseEx) error {
	return h.MqttServiceHandler.Publish(ctx, in, out)
}

func (h *mqttServiceHandler) SaveMqttUser(ctx context.Context, in *MqttUser, out *ResponseEx) error {
	return h.MqttServiceHandler.SaveMqttUser(ctx, in, out)
}

func (h *mqttServiceHandler) GetMqttUser(ctx context.Context, in *FilterMqttUser, out *ResponseEx) error {
	return h.MqttServiceHandler.GetMqttUser(ctx, in, out)
}

func (h *mqttServiceHandler) DeleteMqttUser(ctx context.Context, in *FilterMqttUser, out *ResponseEx) error {
	return h.MqttServiceHandler.DeleteMqttUser(ctx, in, out)
}

func (h *mqttServiceHandler) BatchPublish(ctx context.Context, in *BatchPublishMessage, out *ResponseEx) error {
	return h.MqttServiceHandler.BatchPublish(ctx, in, out)
}

func (h *mqttServiceHandler) BatchGenTriad(ctx context.Context, in *BatchGenTriadRequest, out *BatchGenTriadResponse) error {
	return h.MqttServiceHandler.BatchGenTriad(ctx, in, out)
}

func (h *mqttServiceHandler) VerifyTriad(ctx context.Context, in *VerifyTriadRequest, out *VerifyTriadResponse) error {
	return h.MqttServiceHandler.VerifyTriad(ctx, in, out)
}

func (h *mqttServiceHandler) GenVirtualTriad(ctx context.Context, in *BatchGenTriadRequest, out *BatchGenTriadResponse) error {
	return h.MqttServiceHandler.GenVirtualTriad(ctx, in, out)
}
