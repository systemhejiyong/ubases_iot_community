// Code generated by protoc,2022-05-20 13:36:03. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: scene_intelligence_condition_model.proto

package protosService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//来源于数据表
type SceneIntelligenceCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:唯一主键;comment:唯一主键;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"intelligenceId" gorm:"default:场景ID;comment:场景ID;size:19;"
	IntelligenceId int64 `protobuf:"varint,101,opt,name=intelligenceId,proto3" json:"intelligenceId,omitempty"`
	// @inject_tag: json:"conditionType" gorm:"default:条件类型;comment:条件类型;"
	ConditionType int32 `protobuf:"varint,102,opt,name=conditionType,proto3" json:"conditionType,omitempty"`
	// @inject_tag: json:"desc" gorm:"default:天气描述;comment:天气描述;size:100;"
	Desc string `protobuf:"bytes,103,opt,name=desc,proto3" json:"desc,omitempty"`
	// @inject_tag: json:"weatherCountry" gorm:"default:国家;comment:国家;size:10;"
	WeatherCountry string `protobuf:"bytes,104,opt,name=weatherCountry,proto3" json:"weatherCountry,omitempty"`
	// @inject_tag: json:"weatherCity" gorm:"default:城市;comment:城市;size:10;"
	WeatherCity string `protobuf:"bytes,105,opt,name=weatherCity,proto3" json:"weatherCity,omitempty"`
	// @inject_tag: json:"weatherArea" gorm:"default:区域;comment:区域;size:10;"
	WeatherArea string `protobuf:"bytes,106,opt,name=weatherArea,proto3" json:"weatherArea,omitempty"`
	// @inject_tag: json:"weatherType" gorm:"default:天气类型;comment:天气类型;size:10;"
	WeatherType int32 `protobuf:"varint,107,opt,name=weatherType,proto3" json:"weatherType,omitempty"`
	// @inject_tag: json:"weatherValue" gorm:"default:天气值;comment:天气值;size:50;"
	WeatherValue string `protobuf:"bytes,108,opt,name=weatherValue,proto3" json:"weatherValue,omitempty"`
	// @inject_tag: json:"weatherCompare" gorm:"default:条件比较（1为等于 2 大于 ....);comment:条件比较（1为等于 2 大于 ....);size:10;"
	WeatherCompare int32 `protobuf:"varint,109,opt,name=weatherCompare,proto3" json:"weatherCompare,omitempty"`
	// @inject_tag: json:"timerWeeks" gorm:"default:定时周设置，逗号分隔(例如：0,1,2,3,4);comment:定时周设置，逗号分隔(例如：0,1,2,3,4);size:20;"
	TimerWeeks string `protobuf:"bytes,110,opt,name=timerWeeks,proto3" json:"timerWeeks,omitempty"`
	// @inject_tag: json:"timerValue" gorm:"default:定时的值设置（01:33);comment:定时的值设置（01:33);size:5;"
	TimerValue string `protobuf:"bytes,111,opt,name=timerValue,proto3" json:"timerValue,omitempty"`
	// @inject_tag: json:"deviceDid" gorm:"default:设备ID;comment:设备ID;size:14;"
	DeviceDid string `protobuf:"bytes,112,opt,name=deviceDid,proto3" json:"deviceDid,omitempty"`
	// @inject_tag: json:"devicePropKey" gorm:"default:设备功能的Key;comment:设备功能的Key;size:50;"
	DevicePropKey string `protobuf:"bytes,113,opt,name=devicePropKey,proto3" json:"devicePropKey,omitempty"`
	// @inject_tag: json:"devicePropCompare" gorm:"default:条件比较（1为等于 2 大于 ....);comment:条件比较（1为等于 2 大于 ....);size:10;"
	DevicePropCompare int32 `protobuf:"varint,114,opt,name=devicePropCompare,proto3" json:"devicePropCompare,omitempty"`
	// @inject_tag: json:"devicePropValue" gorm:"default:设备属性条件值;comment:设备属性条件值;size:50;"
	DevicePropValue      string `protobuf:"bytes,115,opt,name=devicePropValue,proto3" json:"devicePropValue,omitempty"`
	ProductKey           string `protobuf:"bytes,116,opt,name=productKey,proto3" json:"productKey,omitempty"`
	ProductId            int64  `protobuf:"varint,117,opt,name=productId,proto3" json:"productId,omitempty"`
	DevicePropIdentifier string `protobuf:"bytes,118,opt,name=devicePropIdentifier,proto3" json:"devicePropIdentifier,omitempty"`
	//功能属性描述
	DevicePropDesc string `protobuf:"bytes,119,opt,name=devicePropDesc,proto3" json:"devicePropDesc,omitempty"`
}

func (x *SceneIntelligenceCondition) Reset() {
	*x = SceneIntelligenceCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scene_intelligence_condition_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneIntelligenceCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneIntelligenceCondition) ProtoMessage() {}

func (x *SceneIntelligenceCondition) ProtoReflect() protoreflect.Message {
	mi := &file_scene_intelligence_condition_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneIntelligenceCondition.ProtoReflect.Descriptor instead.
func (*SceneIntelligenceCondition) Descriptor() ([]byte, []int) {
	return file_scene_intelligence_condition_model_proto_rawDescGZIP(), []int{0}
}

func (x *SceneIntelligenceCondition) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SceneIntelligenceCondition) GetIntelligenceId() int64 {
	if x != nil {
		return x.IntelligenceId
	}
	return 0
}

func (x *SceneIntelligenceCondition) GetConditionType() int32 {
	if x != nil {
		return x.ConditionType
	}
	return 0
}

func (x *SceneIntelligenceCondition) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SceneIntelligenceCondition) GetWeatherCountry() string {
	if x != nil {
		return x.WeatherCountry
	}
	return ""
}

func (x *SceneIntelligenceCondition) GetWeatherCity() string {
	if x != nil {
		return x.WeatherCity
	}
	return ""
}

func (x *SceneIntelligenceCondition) GetWeatherArea() string {
	if x != nil {
		return x.WeatherArea
	}
	return ""
}

func (x *SceneIntelligenceCondition) GetWeatherType() int32 {
	if x != nil {
		return x.WeatherType
	}
	return 0
}

func (x *SceneIntelligenceCondition) GetWeatherValue() string {
	if x != nil {
		return x.WeatherValue
	}
	return ""
}

func (x *SceneIntelligenceCondition) GetWeatherCompare() int32 {
	if x != nil {
		return x.WeatherCompare
	}
	return 0
}

func (x *SceneIntelligenceCondition) GetTimerWeeks() string {
	if x != nil {
		return x.TimerWeeks
	}
	return ""
}

func (x *SceneIntelligenceCondition) GetTimerValue() string {
	if x != nil {
		return x.TimerValue
	}
	return ""
}

func (x *SceneIntelligenceCondition) GetDeviceDid() string {
	if x != nil {
		return x.DeviceDid
	}
	return ""
}

func (x *SceneIntelligenceCondition) GetDevicePropKey() string {
	if x != nil {
		return x.DevicePropKey
	}
	return ""
}

func (x *SceneIntelligenceCondition) GetDevicePropCompare() int32 {
	if x != nil {
		return x.DevicePropCompare
	}
	return 0
}

func (x *SceneIntelligenceCondition) GetDevicePropValue() string {
	if x != nil {
		return x.DevicePropValue
	}
	return ""
}

func (x *SceneIntelligenceCondition) GetProductKey() string {
	if x != nil {
		return x.ProductKey
	}
	return ""
}

func (x *SceneIntelligenceCondition) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *SceneIntelligenceCondition) GetDevicePropIdentifier() string {
	if x != nil {
		return x.DevicePropIdentifier
	}
	return ""
}

func (x *SceneIntelligenceCondition) GetDevicePropDesc() string {
	if x != nil {
		return x.DevicePropDesc
	}
	return ""
}

type SceneIntelligenceConditionFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:唯一主键;comment:唯一主键;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"intelligenceId" gorm:"default:场景ID;comment:场景ID;size:19;"
	IntelligenceId int64 `protobuf:"varint,101,opt,name=intelligenceId,proto3" json:"intelligenceId,omitempty"`
	// @inject_tag: json:"conditionType" gorm:"default:条件类型;comment:条件类型;"
	ConditionType int32 `protobuf:"varint,102,opt,name=conditionType,proto3" json:"conditionType,omitempty"`
	// @inject_tag: json:"desc" gorm:"default:天气描述;comment:天气描述;size:100;"
	Desc string `protobuf:"bytes,103,opt,name=desc,proto3" json:"desc,omitempty"`
	// @inject_tag: json:"weatherCountry" gorm:"default:国家;comment:国家;size:10;"
	WeatherCountry string `protobuf:"bytes,104,opt,name=weatherCountry,proto3" json:"weatherCountry,omitempty"`
	// @inject_tag: json:"weatherCity" gorm:"default:城市;comment:城市;size:10;"
	WeatherCity string `protobuf:"bytes,105,opt,name=weatherCity,proto3" json:"weatherCity,omitempty"`
	// @inject_tag: json:"weatherArea" gorm:"default:区域;comment:区域;size:10;"
	WeatherArea string `protobuf:"bytes,106,opt,name=weatherArea,proto3" json:"weatherArea,omitempty"`
	// @inject_tag: json:"weatherType" gorm:"default:天气类型;comment:天气类型;size:10;"
	WeatherType int32 `protobuf:"varint,107,opt,name=weatherType,proto3" json:"weatherType,omitempty"`
	// @inject_tag: json:"weatherValue" gorm:"default:天气值;comment:天气值;size:50;"
	WeatherValue string `protobuf:"bytes,108,opt,name=weatherValue,proto3" json:"weatherValue,omitempty"`
	// @inject_tag: json:"weatherCompare" gorm:"default:条件比较（1为等于 2 大于 ....);comment:条件比较（1为等于 2 大于 ....);size:10;"
	WeatherCompare int32 `protobuf:"varint,109,opt,name=weatherCompare,proto3" json:"weatherCompare,omitempty"`
	// @inject_tag: json:"timerWeeks" gorm:"default:定时周设置，逗号分隔(例如：0,1,2,3,4);comment:定时周设置，逗号分隔(例如：0,1,2,3,4);size:20;"
	TimerWeeks string `protobuf:"bytes,110,opt,name=timerWeeks,proto3" json:"timerWeeks,omitempty"`
	// @inject_tag: json:"timerValue" gorm:"default:定时的值设置（01:33);comment:定时的值设置（01:33);size:5;"
	TimerValue string `protobuf:"bytes,111,opt,name=timerValue,proto3" json:"timerValue,omitempty"`
	// @inject_tag: json:"deviceDid" gorm:"default:设备ID;comment:设备ID;size:14;"
	DeviceDid string `protobuf:"bytes,112,opt,name=deviceDid,proto3" json:"deviceDid,omitempty"`
	// @inject_tag: json:"devicePropKey" gorm:"default:设备功能的Key;comment:设备功能的Key;size:50;"
	DevicePropKey string `protobuf:"bytes,113,opt,name=devicePropKey,proto3" json:"devicePropKey,omitempty"`
	// @inject_tag: json:"devicePropCompare" gorm:"default:条件比较（1为等于 2 大于 ....);comment:条件比较（1为等于 2 大于 ....);size:10;"
	DevicePropCompare int32 `protobuf:"varint,114,opt,name=devicePropCompare,proto3" json:"devicePropCompare,omitempty"`
	// @inject_tag: json:"devicePropValue" gorm:"default:设备属性条件值;comment:设备属性条件值;size:50;"
	DevicePropValue string `protobuf:"bytes,115,opt,name=devicePropValue,proto3" json:"devicePropValue,omitempty"`
	ProductKey      string `protobuf:"bytes,116,opt,name=productKey,proto3" json:"productKey,omitempty"`
	ProductId       int64  `protobuf:"varint,117,opt,name=productId,proto3" json:"productId,omitempty"`
}

func (x *SceneIntelligenceConditionFilter) Reset() {
	*x = SceneIntelligenceConditionFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scene_intelligence_condition_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneIntelligenceConditionFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneIntelligenceConditionFilter) ProtoMessage() {}

func (x *SceneIntelligenceConditionFilter) ProtoReflect() protoreflect.Message {
	mi := &file_scene_intelligence_condition_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneIntelligenceConditionFilter.ProtoReflect.Descriptor instead.
func (*SceneIntelligenceConditionFilter) Descriptor() ([]byte, []int) {
	return file_scene_intelligence_condition_model_proto_rawDescGZIP(), []int{1}
}

func (x *SceneIntelligenceConditionFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SceneIntelligenceConditionFilter) GetIntelligenceId() int64 {
	if x != nil {
		return x.IntelligenceId
	}
	return 0
}

func (x *SceneIntelligenceConditionFilter) GetConditionType() int32 {
	if x != nil {
		return x.ConditionType
	}
	return 0
}

func (x *SceneIntelligenceConditionFilter) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *SceneIntelligenceConditionFilter) GetWeatherCountry() string {
	if x != nil {
		return x.WeatherCountry
	}
	return ""
}

func (x *SceneIntelligenceConditionFilter) GetWeatherCity() string {
	if x != nil {
		return x.WeatherCity
	}
	return ""
}

func (x *SceneIntelligenceConditionFilter) GetWeatherArea() string {
	if x != nil {
		return x.WeatherArea
	}
	return ""
}

func (x *SceneIntelligenceConditionFilter) GetWeatherType() int32 {
	if x != nil {
		return x.WeatherType
	}
	return 0
}

func (x *SceneIntelligenceConditionFilter) GetWeatherValue() string {
	if x != nil {
		return x.WeatherValue
	}
	return ""
}

func (x *SceneIntelligenceConditionFilter) GetWeatherCompare() int32 {
	if x != nil {
		return x.WeatherCompare
	}
	return 0
}

func (x *SceneIntelligenceConditionFilter) GetTimerWeeks() string {
	if x != nil {
		return x.TimerWeeks
	}
	return ""
}

func (x *SceneIntelligenceConditionFilter) GetTimerValue() string {
	if x != nil {
		return x.TimerValue
	}
	return ""
}

func (x *SceneIntelligenceConditionFilter) GetDeviceDid() string {
	if x != nil {
		return x.DeviceDid
	}
	return ""
}

func (x *SceneIntelligenceConditionFilter) GetDevicePropKey() string {
	if x != nil {
		return x.DevicePropKey
	}
	return ""
}

func (x *SceneIntelligenceConditionFilter) GetDevicePropCompare() int32 {
	if x != nil {
		return x.DevicePropCompare
	}
	return 0
}

func (x *SceneIntelligenceConditionFilter) GetDevicePropValue() string {
	if x != nil {
		return x.DevicePropValue
	}
	return ""
}

func (x *SceneIntelligenceConditionFilter) GetProductKey() string {
	if x != nil {
		return x.ProductKey
	}
	return ""
}

func (x *SceneIntelligenceConditionFilter) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

type SceneIntelligenceConditionListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *SceneIntelligenceCondition `protobuf:"bytes,101,opt,name=query,proto3" json:"query,omitempty"`
	Page      int64                       `protobuf:"varint,102,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64                       `protobuf:"varint,103,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderKey  string                      `protobuf:"bytes,104,opt,name=orderKey,proto3" json:"orderKey,omitempty"`
	OrderDesc string                      `protobuf:"bytes,105,opt,name=orderDesc,proto3" json:"orderDesc,omitempty"`
	SearchKey string                      `protobuf:"bytes,106,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
}

func (x *SceneIntelligenceConditionListRequest) Reset() {
	*x = SceneIntelligenceConditionListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scene_intelligence_condition_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneIntelligenceConditionListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneIntelligenceConditionListRequest) ProtoMessage() {}

func (x *SceneIntelligenceConditionListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scene_intelligence_condition_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneIntelligenceConditionListRequest.ProtoReflect.Descriptor instead.
func (*SceneIntelligenceConditionListRequest) Descriptor() ([]byte, []int) {
	return file_scene_intelligence_condition_model_proto_rawDescGZIP(), []int{2}
}

func (x *SceneIntelligenceConditionListRequest) GetQuery() *SceneIntelligenceCondition {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SceneIntelligenceConditionListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *SceneIntelligenceConditionListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SceneIntelligenceConditionListRequest) GetOrderKey() string {
	if x != nil {
		return x.OrderKey
	}
	return ""
}

func (x *SceneIntelligenceConditionListRequest) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *SceneIntelligenceConditionListRequest) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

type SceneIntelligenceConditionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                         `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string                        `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64                         `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*SceneIntelligenceCondition `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SceneIntelligenceConditionResponse) Reset() {
	*x = SceneIntelligenceConditionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scene_intelligence_condition_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneIntelligenceConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneIntelligenceConditionResponse) ProtoMessage() {}

func (x *SceneIntelligenceConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scene_intelligence_condition_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneIntelligenceConditionResponse.ProtoReflect.Descriptor instead.
func (*SceneIntelligenceConditionResponse) Descriptor() ([]byte, []int) {
	return file_scene_intelligence_condition_model_proto_rawDescGZIP(), []int{3}
}

func (x *SceneIntelligenceConditionResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SceneIntelligenceConditionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SceneIntelligenceConditionResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SceneIntelligenceConditionResponse) GetData() []*SceneIntelligenceCondition {
	if x != nil {
		return x.Data
	}
	return nil
}

type SceneIntelligenceConditionUpdateFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string                    `protobuf:"bytes,101,rep,name=fields,proto3" json:"fields,omitempty"`
	Data   *SceneIntelligenceCondition `protobuf:"bytes,102,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SceneIntelligenceConditionUpdateFieldsRequest) Reset() {
	*x = SceneIntelligenceConditionUpdateFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scene_intelligence_condition_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneIntelligenceConditionUpdateFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneIntelligenceConditionUpdateFieldsRequest) ProtoMessage() {}

func (x *SceneIntelligenceConditionUpdateFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scene_intelligence_condition_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneIntelligenceConditionUpdateFieldsRequest.ProtoReflect.Descriptor instead.
func (*SceneIntelligenceConditionUpdateFieldsRequest) Descriptor() ([]byte, []int) {
	return file_scene_intelligence_condition_model_proto_rawDescGZIP(), []int{4}
}

func (x *SceneIntelligenceConditionUpdateFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SceneIntelligenceConditionUpdateFieldsRequest) GetData() *SceneIntelligenceCondition {
	if x != nil {
		return x.Data
	}
	return nil
}

// 表模型主键，只能是整数或字符串，若生成错误，请检查数据库表主键是否正确。支持组合主键
type SceneIntelligenceConditionPrimarykey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SceneIntelligenceConditionPrimarykey) Reset() {
	*x = SceneIntelligenceConditionPrimarykey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scene_intelligence_condition_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneIntelligenceConditionPrimarykey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneIntelligenceConditionPrimarykey) ProtoMessage() {}

func (x *SceneIntelligenceConditionPrimarykey) ProtoReflect() protoreflect.Message {
	mi := &file_scene_intelligence_condition_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneIntelligenceConditionPrimarykey.ProtoReflect.Descriptor instead.
func (*SceneIntelligenceConditionPrimarykey) Descriptor() ([]byte, []int) {
	return file_scene_intelligence_condition_model_proto_rawDescGZIP(), []int{5}
}

func (x *SceneIntelligenceConditionPrimarykey) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SceneIntelligenceConditionBatchDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*SceneIntelligenceConditionPrimarykey `protobuf:"bytes,101,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *SceneIntelligenceConditionBatchDeleteRequest) Reset() {
	*x = SceneIntelligenceConditionBatchDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scene_intelligence_condition_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SceneIntelligenceConditionBatchDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SceneIntelligenceConditionBatchDeleteRequest) ProtoMessage() {}

func (x *SceneIntelligenceConditionBatchDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scene_intelligence_condition_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SceneIntelligenceConditionBatchDeleteRequest.ProtoReflect.Descriptor instead.
func (*SceneIntelligenceConditionBatchDeleteRequest) Descriptor() ([]byte, []int) {
	return file_scene_intelligence_condition_model_proto_rawDescGZIP(), []int{6}
}

func (x *SceneIntelligenceConditionBatchDeleteRequest) GetKeys() []*SceneIntelligenceConditionPrimarykey {
	if x != nil {
		return x.Keys
	}
	return nil
}

var File_scene_intelligence_condition_model_proto protoreflect.FileDescriptor

var file_scene_intelligence_condition_model_proto_rawDesc = []byte{
	0x0a, 0x28, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x22, 0xde, 0x05, 0x0a, 0x1a, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x69, 0x74, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x18, 0x6a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61,
	0x12, 0x20, 0x0a, 0x0b, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x6b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x6f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x71, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x4b,
	0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x18, 0x72, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x75, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x76, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x44, 0x65, 0x73, 0x63, 0x18, 0x77,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x44, 0x65, 0x73, 0x63, 0x22, 0x88, 0x05, 0x0a, 0x20, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x77,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x69,
	0x74, 0x79, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x43, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x41, 0x72, 0x65, 0x61, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x77, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x18,
	0x6d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x57, 0x65,
	0x65, 0x6b, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x57, 0x65, 0x65, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x69, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x4b, 0x65, 0x79, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x18, 0x72,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x18,
	0x74, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x75,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22,
	0xea, 0x01, 0x0a, 0x25, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x67, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x69, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x22, 0xa1, 0x01, 0x0a,
	0x22, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x68, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x80, 0x01, 0x0a, 0x2d, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x65, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67,
	0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x36, 0x0a, 0x24, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x71, 0x0a, 0x2c, 0x53,
	0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x67, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x6b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x42, 0x11,
	0x5a, 0x0f, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scene_intelligence_condition_model_proto_rawDescOnce sync.Once
	file_scene_intelligence_condition_model_proto_rawDescData = file_scene_intelligence_condition_model_proto_rawDesc
)

func file_scene_intelligence_condition_model_proto_rawDescGZIP() []byte {
	file_scene_intelligence_condition_model_proto_rawDescOnce.Do(func() {
		file_scene_intelligence_condition_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_scene_intelligence_condition_model_proto_rawDescData)
	})
	return file_scene_intelligence_condition_model_proto_rawDescData
}

var file_scene_intelligence_condition_model_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_scene_intelligence_condition_model_proto_goTypes = []interface{}{
	(*SceneIntelligenceCondition)(nil),                    // 0: service.SceneIntelligenceCondition
	(*SceneIntelligenceConditionFilter)(nil),              // 1: service.SceneIntelligenceConditionFilter
	(*SceneIntelligenceConditionListRequest)(nil),         // 2: service.SceneIntelligenceConditionListRequest
	(*SceneIntelligenceConditionResponse)(nil),            // 3: service.SceneIntelligenceConditionResponse
	(*SceneIntelligenceConditionUpdateFieldsRequest)(nil), // 4: service.SceneIntelligenceConditionUpdateFieldsRequest
	(*SceneIntelligenceConditionPrimarykey)(nil),          // 5: service.SceneIntelligenceConditionPrimarykey
	(*SceneIntelligenceConditionBatchDeleteRequest)(nil),  // 6: service.SceneIntelligenceConditionBatchDeleteRequest
}
var file_scene_intelligence_condition_model_proto_depIdxs = []int32{
	0, // 0: service.SceneIntelligenceConditionListRequest.query:type_name -> service.SceneIntelligenceCondition
	0, // 1: service.SceneIntelligenceConditionResponse.data:type_name -> service.SceneIntelligenceCondition
	0, // 2: service.SceneIntelligenceConditionUpdateFieldsRequest.data:type_name -> service.SceneIntelligenceCondition
	5, // 3: service.SceneIntelligenceConditionBatchDeleteRequest.keys:type_name -> service.SceneIntelligenceConditionPrimarykey
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_scene_intelligence_condition_model_proto_init() }
func file_scene_intelligence_condition_model_proto_init() {
	if File_scene_intelligence_condition_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scene_intelligence_condition_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneIntelligenceCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scene_intelligence_condition_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneIntelligenceConditionFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scene_intelligence_condition_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneIntelligenceConditionListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scene_intelligence_condition_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneIntelligenceConditionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scene_intelligence_condition_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneIntelligenceConditionUpdateFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scene_intelligence_condition_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneIntelligenceConditionPrimarykey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scene_intelligence_condition_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SceneIntelligenceConditionBatchDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scene_intelligence_condition_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scene_intelligence_condition_model_proto_goTypes,
		DependencyIndexes: file_scene_intelligence_condition_model_proto_depIdxs,
		MessageInfos:      file_scene_intelligence_condition_model_proto_msgTypes,
	}.Build()
	File_scene_intelligence_condition_model_proto = out.File
	file_scene_intelligence_condition_model_proto_rawDesc = nil
	file_scene_intelligence_condition_model_proto_goTypes = nil
	file_scene_intelligence_condition_model_proto_depIdxs = nil
}
