// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: uc_user_service.gen.proto

package protosService

import (
	// _ "/api"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UcUserService service

func NewUcUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "UcUserService.Create",
			Path:    []string{"/v1/ucUser/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserService.Delete",
			Path:    []string{"/v1/ucUser/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserService.DeleteById",
			Path:    []string{"/v1/ucUser/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserService.DeleteByIds",
			Path:    []string{"/v1/ucUser/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserService.Update",
			Path:    []string{"/v1/ucUser/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserService.UpdateAll",
			Path:    []string{"/v1/ucUser/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserService.UpdateFields",
			Path:    []string{"/v1/ucUser/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserService.FindById",
			Path:    []string{"/v1/ucUser/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserService.Find",
			Path:    []string{"/v1/ucUser/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserService.Lists",
			Path:    []string{"/v1/ucUser/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserService.Register",
			Path:    []string{"/v1/ucUser/register"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserService.ForgetPassword",
			Path:    []string{"/v1/ucUser/forgetPassword"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserService.HomeList",
			Path:    []string{"/v1/ucUser/homeList"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserService.GetUserByLogin",
			Path:    []string{"/v1/ucUser/listsByLogin"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserService.LoginSuccess",
			Path:    []string{"/v1/ucUser/loginSuccess"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "UcUserService.UpdateAgreementFlag",
			Path:    []string{"/v1/ucUser/updateAgreementFlag"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for UcUserService service

type UcUserService interface {
	//创建
	Create(ctx context.Context, in *UcUser, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *UcUser, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *UcUser, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *UcUserBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *UcUser, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *UcUser, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *UcUserUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *UcUserFilter, opts ...client.CallOption) (*UcUserResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *UcUserFilter, opts ...client.CallOption) (*UcUserResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *UcUserListRequest, opts ...client.CallOption) (*UcUserResponse, error)
	//注册
	Register(ctx context.Context, in *UcUserRegisterRequest, opts ...client.CallOption) (*UcUserResponse, error)
	//忘记密码
	ForgetPassword(ctx context.Context, in *UcForgetPasswordReq, opts ...client.CallOption) (*UcUserResponse, error)
	//用户家庭列表
	HomeList(ctx context.Context, in *UcUser, opts ...client.CallOption) (*UcUserHomeListResponse, error)
	//通过登录信息获取登录信息
	GetUserByLogin(ctx context.Context, in *UcUserByLoginRequest, opts ...client.CallOption) (*UcUserResponse, error)
	//查找，支持分页，可返回多条数据
	LoginSuccess(ctx context.Context, in *UcUserLoginSuccessRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	UpdateAgreementFlag(ctx context.Context, in *UcUser, opts ...client.CallOption) (*Response, error)
}

type ucUserService struct {
	c    client.Client
	name string
}

func NewUcUserService(name string, c client.Client) UcUserService {
	return &ucUserService{
		c:    c,
		name: name,
	}
}

func (c *ucUserService) Create(ctx context.Context, in *UcUser, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserService) Delete(ctx context.Context, in *UcUser, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserService) DeleteById(ctx context.Context, in *UcUser, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserService) DeleteByIds(ctx context.Context, in *UcUserBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserService) Update(ctx context.Context, in *UcUser, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserService) UpdateAll(ctx context.Context, in *UcUser, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserService) UpdateFields(ctx context.Context, in *UcUserUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserService) FindById(ctx context.Context, in *UcUserFilter, opts ...client.CallOption) (*UcUserResponse, error) {
	req := c.c.NewRequest(c.name, "UcUserService.FindById", in)
	out := new(UcUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserService) Find(ctx context.Context, in *UcUserFilter, opts ...client.CallOption) (*UcUserResponse, error) {
	req := c.c.NewRequest(c.name, "UcUserService.Find", in)
	out := new(UcUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserService) Lists(ctx context.Context, in *UcUserListRequest, opts ...client.CallOption) (*UcUserResponse, error) {
	req := c.c.NewRequest(c.name, "UcUserService.Lists", in)
	out := new(UcUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserService) Register(ctx context.Context, in *UcUserRegisterRequest, opts ...client.CallOption) (*UcUserResponse, error) {
	req := c.c.NewRequest(c.name, "UcUserService.Register", in)
	out := new(UcUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserService) ForgetPassword(ctx context.Context, in *UcForgetPasswordReq, opts ...client.CallOption) (*UcUserResponse, error) {
	req := c.c.NewRequest(c.name, "UcUserService.ForgetPassword", in)
	out := new(UcUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserService) HomeList(ctx context.Context, in *UcUser, opts ...client.CallOption) (*UcUserHomeListResponse, error) {
	req := c.c.NewRequest(c.name, "UcUserService.HomeList", in)
	out := new(UcUserHomeListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserService) GetUserByLogin(ctx context.Context, in *UcUserByLoginRequest, opts ...client.CallOption) (*UcUserResponse, error) {
	req := c.c.NewRequest(c.name, "UcUserService.GetUserByLogin", in)
	out := new(UcUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserService) LoginSuccess(ctx context.Context, in *UcUserLoginSuccessRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserService.LoginSuccess", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucUserService) UpdateAgreementFlag(ctx context.Context, in *UcUser, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UcUserService.UpdateAgreementFlag", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UcUserService service

type UcUserServiceHandler interface {
	//创建
	Create(context.Context, *UcUser, *Response) error
	//匹配多条件删除
	Delete(context.Context, *UcUser, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *UcUser, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *UcUserBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *UcUser, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *UcUser, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *UcUserUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *UcUserFilter, *UcUserResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *UcUserFilter, *UcUserResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *UcUserListRequest, *UcUserResponse) error
	//注册
	Register(context.Context, *UcUserRegisterRequest, *UcUserResponse) error
	//忘记密码
	ForgetPassword(context.Context, *UcForgetPasswordReq, *UcUserResponse) error
	//用户家庭列表
	HomeList(context.Context, *UcUser, *UcUserHomeListResponse) error
	//通过登录信息获取登录信息
	GetUserByLogin(context.Context, *UcUserByLoginRequest, *UcUserResponse) error
	//查找，支持分页，可返回多条数据
	LoginSuccess(context.Context, *UcUserLoginSuccessRequest, *Response) error
	//根据主键更新非空字段
	UpdateAgreementFlag(context.Context, *UcUser, *Response) error
}

func RegisterUcUserServiceHandler(s server.Server, hdlr UcUserServiceHandler, opts ...server.HandlerOption) error {
	type ucUserService interface {
		Create(ctx context.Context, in *UcUser, out *Response) error
		Delete(ctx context.Context, in *UcUser, out *Response) error
		DeleteById(ctx context.Context, in *UcUser, out *Response) error
		DeleteByIds(ctx context.Context, in *UcUserBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *UcUser, out *Response) error
		UpdateAll(ctx context.Context, in *UcUser, out *Response) error
		UpdateFields(ctx context.Context, in *UcUserUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *UcUserFilter, out *UcUserResponse) error
		Find(ctx context.Context, in *UcUserFilter, out *UcUserResponse) error
		Lists(ctx context.Context, in *UcUserListRequest, out *UcUserResponse) error
		Register(ctx context.Context, in *UcUserRegisterRequest, out *UcUserResponse) error
		ForgetPassword(ctx context.Context, in *UcForgetPasswordReq, out *UcUserResponse) error
		HomeList(ctx context.Context, in *UcUser, out *UcUserHomeListResponse) error
		GetUserByLogin(ctx context.Context, in *UcUserByLoginRequest, out *UcUserResponse) error
		LoginSuccess(ctx context.Context, in *UcUserLoginSuccessRequest, out *Response) error
		UpdateAgreementFlag(ctx context.Context, in *UcUser, out *Response) error
	}
	type UcUserService struct {
		ucUserService
	}
	h := &ucUserServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserService.Create",
		Path:    []string{"/v1/ucUser/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserService.Delete",
		Path:    []string{"/v1/ucUser/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserService.DeleteById",
		Path:    []string{"/v1/ucUser/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserService.DeleteByIds",
		Path:    []string{"/v1/ucUser/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserService.Update",
		Path:    []string{"/v1/ucUser/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserService.UpdateAll",
		Path:    []string{"/v1/ucUser/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserService.UpdateFields",
		Path:    []string{"/v1/ucUser/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserService.FindById",
		Path:    []string{"/v1/ucUser/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserService.Find",
		Path:    []string{"/v1/ucUser/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserService.Lists",
		Path:    []string{"/v1/ucUser/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserService.Register",
		Path:    []string{"/v1/ucUser/register"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserService.ForgetPassword",
		Path:    []string{"/v1/ucUser/forgetPassword"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserService.HomeList",
		Path:    []string{"/v1/ucUser/homeList"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserService.GetUserByLogin",
		Path:    []string{"/v1/ucUser/listsByLogin"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserService.LoginSuccess",
		Path:    []string{"/v1/ucUser/loginSuccess"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "UcUserService.UpdateAgreementFlag",
		Path:    []string{"/v1/ucUser/updateAgreementFlag"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&UcUserService{h}, opts...))
}

type ucUserServiceHandler struct {
	UcUserServiceHandler
}

func (h *ucUserServiceHandler) Create(ctx context.Context, in *UcUser, out *Response) error {
	return h.UcUserServiceHandler.Create(ctx, in, out)
}

func (h *ucUserServiceHandler) Delete(ctx context.Context, in *UcUser, out *Response) error {
	return h.UcUserServiceHandler.Delete(ctx, in, out)
}

func (h *ucUserServiceHandler) DeleteById(ctx context.Context, in *UcUser, out *Response) error {
	return h.UcUserServiceHandler.DeleteById(ctx, in, out)
}

func (h *ucUserServiceHandler) DeleteByIds(ctx context.Context, in *UcUserBatchDeleteRequest, out *Response) error {
	return h.UcUserServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *ucUserServiceHandler) Update(ctx context.Context, in *UcUser, out *Response) error {
	return h.UcUserServiceHandler.Update(ctx, in, out)
}

func (h *ucUserServiceHandler) UpdateAll(ctx context.Context, in *UcUser, out *Response) error {
	return h.UcUserServiceHandler.UpdateAll(ctx, in, out)
}

func (h *ucUserServiceHandler) UpdateFields(ctx context.Context, in *UcUserUpdateFieldsRequest, out *Response) error {
	return h.UcUserServiceHandler.UpdateFields(ctx, in, out)
}

func (h *ucUserServiceHandler) FindById(ctx context.Context, in *UcUserFilter, out *UcUserResponse) error {
	return h.UcUserServiceHandler.FindById(ctx, in, out)
}

func (h *ucUserServiceHandler) Find(ctx context.Context, in *UcUserFilter, out *UcUserResponse) error {
	return h.UcUserServiceHandler.Find(ctx, in, out)
}

func (h *ucUserServiceHandler) Lists(ctx context.Context, in *UcUserListRequest, out *UcUserResponse) error {
	return h.UcUserServiceHandler.Lists(ctx, in, out)
}

func (h *ucUserServiceHandler) Register(ctx context.Context, in *UcUserRegisterRequest, out *UcUserResponse) error {
	return h.UcUserServiceHandler.Register(ctx, in, out)
}

func (h *ucUserServiceHandler) ForgetPassword(ctx context.Context, in *UcForgetPasswordReq, out *UcUserResponse) error {
	return h.UcUserServiceHandler.ForgetPassword(ctx, in, out)
}

func (h *ucUserServiceHandler) HomeList(ctx context.Context, in *UcUser, out *UcUserHomeListResponse) error {
	return h.UcUserServiceHandler.HomeList(ctx, in, out)
}

func (h *ucUserServiceHandler) GetUserByLogin(ctx context.Context, in *UcUserByLoginRequest, out *UcUserResponse) error {
	return h.UcUserServiceHandler.GetUserByLogin(ctx, in, out)
}

func (h *ucUserServiceHandler) LoginSuccess(ctx context.Context, in *UcUserLoginSuccessRequest, out *Response) error {
	return h.UcUserServiceHandler.LoginSuccess(ctx, in, out)
}

func (h *ucUserServiceHandler) UpdateAgreementFlag(ctx context.Context, in *UcUser, out *Response) error {
	return h.UcUserServiceHandler.UpdateAgreementFlag(ctx, in, out)
}
