// Code generated by protoc,2022-11-11 10:46:48. DO NOT EDIT.
// versions: v1.0.0
// 如果确实需要修改,请修改后改文件名,可以移除文件名中的.gen,以防下次生成覆盖

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: opm_product_materials_model.proto

package protosService

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//来源于数据表
type OpmProductMaterials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:主键;comment:主键;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"tenantId" gorm:"default:租户ID;comment:租户ID;size:8;"
	TenantId string `protobuf:"bytes,101,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// @inject_tag: json:"name" gorm:"default:耗材名称;comment:耗材名称;size:128;"
	Name string `protobuf:"bytes,102,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: json:"type" gorm:"default:耗材种类;comment:耗材种类;size:64;"
	Type string `protobuf:"bytes,103,opt,name=type,proto3" json:"type,omitempty"`
	// @inject_tag: json:"imageUrl" gorm:"default:耗材图片链接;comment:耗材图片链接;size:255;"
	ImageUrl string `protobuf:"bytes,104,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	// @inject_tag: json:"productPage" gorm:"default:商品页;comment:商品页;size:255;"
	ProductPage string `protobuf:"bytes,105,opt,name=productPage,proto3" json:"productPage,omitempty"`
	// @inject_tag: json:"count" gorm:"default:点击量;comment:点击量;size:19;"
	Count int64 `protobuf:"varint,106,opt,name=count,proto3" json:"count,omitempty"`
	// @inject_tag: json:"brandCode" gorm:"default:品牌编码;comment:品牌编码;size:8;"
	BrandCode string `protobuf:"bytes,107,opt,name=brandCode,proto3" json:"brandCode,omitempty"`
	// @inject_tag: json:"brandName" gorm:"default:品牌名称;comment:品牌名称;size:64;"
	BrandName string `protobuf:"bytes,108,opt,name=brandName,proto3" json:"brandName,omitempty"`
	// @inject_tag: json:"fragranceCode" gorm:"default:香型编码;comment:香型编码;size:8;"
	FragranceCode string `protobuf:"bytes,109,opt,name=fragranceCode,proto3" json:"fragranceCode,omitempty"`
	// @inject_tag: json:"fragranceName" gorm:"default:香型名称;comment:香型名称;size:64;"
	FragranceName string `protobuf:"bytes,110,opt,name=fragranceName,proto3" json:"fragranceName,omitempty"`
	// @inject_tag: json:"productAddress" gorm:"default:产地;comment:产地;size:255;"
	ProductAddress string `protobuf:"bytes,111,opt,name=productAddress,proto3" json:"productAddress,omitempty"`
	// @inject_tag: json:"variety" gorm:"default:品种;comment:品种;size:64;"
	Variety string `protobuf:"bytes,112,opt,name=variety,proto3" json:"variety,omitempty"`
	// @inject_tag: json:"ingredient" gorm:"default:成分;comment:成分;"
	Ingredient string `protobuf:"bytes,113,opt,name=ingredient,proto3" json:"ingredient,omitempty"`
	// @inject_tag: json:"effect" gorm:"default:功效;comment:功效;"
	Effect string `protobuf:"bytes,114,opt,name=effect,proto3" json:"effect,omitempty"`
	// @inject_tag: json:"description" gorm:"default:描述;comment:描述;"
	Description string `protobuf:"bytes,115,opt,name=description,proto3" json:"description,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:19;"
	CreatedBy int64 `protobuf:"varint,116,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,117,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:19;"
	UpdatedBy int64 `protobuf:"varint,118,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,119,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Lang            string                 `protobuf:"bytes,120,opt,name=lang,proto3" json:"lang,omitempty"`
	MaterialLangId  int64                  `protobuf:"varint,121,opt,name=materialLangId,proto3" json:"materialLangId,omitempty"`
	MaterialTypeId  int64                  `protobuf:"varint,122,opt,name=materialTypeId,proto3" json:"materialTypeId,omitempty"`
	ClassifyId      int64                  `protobuf:"varint,123,opt,name=classifyId,proto3" json:"classifyId,omitempty"`
	ConsumptionRate float32                `protobuf:"fixed32,124,opt,name=consumptionRate,proto3" json:"consumptionRate,omitempty"`
	//提取部位
	ExtractSite string `protobuf:"bytes,125,opt,name=extractSite,proto3" json:"extractSite,omitempty"`
	//最佳混合建议
	BestMixedSug string `protobuf:"bytes,126,opt,name=bestMixedSug,proto3" json:"bestMixedSug,omitempty"`
	//香型
	AromaType string `protobuf:"bytes,127,opt,name=aromaType,proto3" json:"aromaType,omitempty"`
	//配方图片
	RecipePic string `protobuf:"bytes,128,opt,name=recipePic,proto3" json:"recipePic,omitempty"`
	//搭配产品使用
	UseWithProducts string `protobuf:"bytes,129,opt,name=useWithProducts,proto3" json:"useWithProducts,omitempty"`
	//温馨提示
	Reminder string `protobuf:"bytes,130,opt,name=reminder,proto3" json:"reminder,omitempty"`
	//商品页
	ProductPageEn string `protobuf:"bytes,131,opt,name=productPageEn,proto3" json:"productPageEn,omitempty"`
	//耗材状态
	Status int32   `protobuf:"varint,132,opt,name=status,proto3" json:"status,omitempty"`
	Ids    []int64 `protobuf:"varint,133,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	//耗材背景图片
	BackgroudImg string `protobuf:"bytes,134,opt,name=backgroudImg,proto3" json:"backgroudImg,omitempty"`
	//耗材商品图片
	ShopImg string `protobuf:"bytes,135,opt,name=shopImg,proto3" json:"shopImg,omitempty"`
	//耗材分类名称
	ClassifyName string `protobuf:"bytes,136,opt,name=classifyName,proto3" json:"classifyName,omitempty"`
}

func (x *OpmProductMaterials) Reset() {
	*x = OpmProductMaterials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_materials_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmProductMaterials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmProductMaterials) ProtoMessage() {}

func (x *OpmProductMaterials) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_materials_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmProductMaterials.ProtoReflect.Descriptor instead.
func (*OpmProductMaterials) Descriptor() ([]byte, []int) {
	return file_opm_product_materials_model_proto_rawDescGZIP(), []int{0}
}

func (x *OpmProductMaterials) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpmProductMaterials) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OpmProductMaterials) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpmProductMaterials) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OpmProductMaterials) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *OpmProductMaterials) GetProductPage() string {
	if x != nil {
		return x.ProductPage
	}
	return ""
}

func (x *OpmProductMaterials) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *OpmProductMaterials) GetBrandCode() string {
	if x != nil {
		return x.BrandCode
	}
	return ""
}

func (x *OpmProductMaterials) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *OpmProductMaterials) GetFragranceCode() string {
	if x != nil {
		return x.FragranceCode
	}
	return ""
}

func (x *OpmProductMaterials) GetFragranceName() string {
	if x != nil {
		return x.FragranceName
	}
	return ""
}

func (x *OpmProductMaterials) GetProductAddress() string {
	if x != nil {
		return x.ProductAddress
	}
	return ""
}

func (x *OpmProductMaterials) GetVariety() string {
	if x != nil {
		return x.Variety
	}
	return ""
}

func (x *OpmProductMaterials) GetIngredient() string {
	if x != nil {
		return x.Ingredient
	}
	return ""
}

func (x *OpmProductMaterials) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

func (x *OpmProductMaterials) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OpmProductMaterials) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *OpmProductMaterials) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OpmProductMaterials) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *OpmProductMaterials) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OpmProductMaterials) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *OpmProductMaterials) GetMaterialLangId() int64 {
	if x != nil {
		return x.MaterialLangId
	}
	return 0
}

func (x *OpmProductMaterials) GetMaterialTypeId() int64 {
	if x != nil {
		return x.MaterialTypeId
	}
	return 0
}

func (x *OpmProductMaterials) GetClassifyId() int64 {
	if x != nil {
		return x.ClassifyId
	}
	return 0
}

func (x *OpmProductMaterials) GetConsumptionRate() float32 {
	if x != nil {
		return x.ConsumptionRate
	}
	return 0
}

func (x *OpmProductMaterials) GetExtractSite() string {
	if x != nil {
		return x.ExtractSite
	}
	return ""
}

func (x *OpmProductMaterials) GetBestMixedSug() string {
	if x != nil {
		return x.BestMixedSug
	}
	return ""
}

func (x *OpmProductMaterials) GetAromaType() string {
	if x != nil {
		return x.AromaType
	}
	return ""
}

func (x *OpmProductMaterials) GetRecipePic() string {
	if x != nil {
		return x.RecipePic
	}
	return ""
}

func (x *OpmProductMaterials) GetUseWithProducts() string {
	if x != nil {
		return x.UseWithProducts
	}
	return ""
}

func (x *OpmProductMaterials) GetReminder() string {
	if x != nil {
		return x.Reminder
	}
	return ""
}

func (x *OpmProductMaterials) GetProductPageEn() string {
	if x != nil {
		return x.ProductPageEn
	}
	return ""
}

func (x *OpmProductMaterials) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OpmProductMaterials) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *OpmProductMaterials) GetBackgroudImg() string {
	if x != nil {
		return x.BackgroudImg
	}
	return ""
}

func (x *OpmProductMaterials) GetShopImg() string {
	if x != nil {
		return x.ShopImg
	}
	return ""
}

func (x *OpmProductMaterials) GetClassifyName() string {
	if x != nil {
		return x.ClassifyName
	}
	return ""
}

type OpmProductMaterialsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" gorm:"default:主键;comment:主键;size:19;"
	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
	// @inject_tag: json:"tenantId" gorm:"default:租户ID;comment:租户ID;size:8;"
	TenantId string `protobuf:"bytes,101,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
	// @inject_tag: json:"name" gorm:"default:耗材名称;comment:耗材名称;size:128;"
	Name string `protobuf:"bytes,102,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: json:"type" gorm:"default:耗材种类;comment:耗材种类;size:64;"
	Type string `protobuf:"bytes,103,opt,name=type,proto3" json:"type,omitempty"`
	// @inject_tag: json:"imageUrl" gorm:"default:耗材图片链接;comment:耗材图片链接;size:255;"
	ImageUrl string `protobuf:"bytes,104,opt,name=imageUrl,proto3" json:"imageUrl,omitempty"`
	// @inject_tag: json:"productPage" gorm:"default:商品页;comment:商品页;size:255;"
	ProductPage string `protobuf:"bytes,105,opt,name=productPage,proto3" json:"productPage,omitempty"`
	// @inject_tag: json:"count" gorm:"default:点击量;comment:点击量;size:19;"
	Count int64 `protobuf:"varint,106,opt,name=count,proto3" json:"count,omitempty"`
	// @inject_tag: json:"brandCode" gorm:"default:品牌编码;comment:品牌编码;size:8;"
	BrandCode string `protobuf:"bytes,107,opt,name=brandCode,proto3" json:"brandCode,omitempty"`
	// @inject_tag: json:"brandName" gorm:"default:品牌名称;comment:品牌名称;size:64;"
	BrandName string `protobuf:"bytes,108,opt,name=brandName,proto3" json:"brandName,omitempty"`
	// @inject_tag: json:"fragranceCode" gorm:"default:香型编码;comment:香型编码;size:8;"
	FragranceCode string `protobuf:"bytes,109,opt,name=fragranceCode,proto3" json:"fragranceCode,omitempty"`
	// @inject_tag: json:"fragranceName" gorm:"default:香型名称;comment:香型名称;size:64;"
	FragranceName string `protobuf:"bytes,110,opt,name=fragranceName,proto3" json:"fragranceName,omitempty"`
	// @inject_tag: json:"productAddress" gorm:"default:产地;comment:产地;size:255;"
	ProductAddress string `protobuf:"bytes,111,opt,name=productAddress,proto3" json:"productAddress,omitempty"`
	// @inject_tag: json:"variety" gorm:"default:品种;comment:品种;size:64;"
	Variety string `protobuf:"bytes,112,opt,name=variety,proto3" json:"variety,omitempty"`
	// @inject_tag: json:"ingredient" gorm:"default:成分;comment:成分;"
	Ingredient string `protobuf:"bytes,113,opt,name=ingredient,proto3" json:"ingredient,omitempty"`
	// @inject_tag: json:"effect" gorm:"default:功效;comment:功效;"
	Effect string `protobuf:"bytes,114,opt,name=effect,proto3" json:"effect,omitempty"`
	// @inject_tag: json:"description" gorm:"default:描述;comment:描述;"
	Description string `protobuf:"bytes,115,opt,name=description,proto3" json:"description,omitempty"`
	// @inject_tag: json:"createdBy" gorm:"default:创建人;comment:创建人;size:19;"
	CreatedBy int64 `protobuf:"varint,116,opt,name=createdBy,proto3" json:"createdBy,omitempty"`
	// @inject_tag: json:"createdAt" gorm:"default:创建时间;comment:创建时间;"
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,117,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// @inject_tag: json:"updatedBy" gorm:"default:修改人;comment:修改人;size:19;"
	UpdatedBy int64 `protobuf:"varint,118,opt,name=updatedBy,proto3" json:"updatedBy,omitempty"`
	// @inject_tag: json:"updatedAt" gorm:"default:修改时间;comment:修改时间;"
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,119,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Lang            string                 `protobuf:"bytes,120,opt,name=lang,proto3" json:"lang,omitempty"`
	MaterialLangId  int64                  `protobuf:"varint,121,opt,name=materialLangId,proto3" json:"materialLangId,omitempty"`
	MaterialTypeId  int64                  `protobuf:"varint,122,opt,name=materialTypeId,proto3" json:"materialTypeId,omitempty"`
	ClassifyId      int64                  `protobuf:"varint,123,opt,name=classifyId,proto3" json:"classifyId,omitempty"`
	ConsumptionRate float32                `protobuf:"fixed32,124,opt,name=consumptionRate,proto3" json:"consumptionRate,omitempty"`
	//提取部位
	ExtractSite string `protobuf:"bytes,125,opt,name=extractSite,proto3" json:"extractSite,omitempty"`
	//最佳混合建议
	BestMixedSug string `protobuf:"bytes,126,opt,name=bestMixedSug,proto3" json:"bestMixedSug,omitempty"`
	//香型
	AromaType string `protobuf:"bytes,127,opt,name=aromaType,proto3" json:"aromaType,omitempty"`
	//配方图片
	RecipePic string `protobuf:"bytes,128,opt,name=recipePic,proto3" json:"recipePic,omitempty"`
	//搭配产品使用
	UseWithProducts string `protobuf:"bytes,129,opt,name=useWithProducts,proto3" json:"useWithProducts,omitempty"`
	//温馨提示
	Reminder string `protobuf:"bytes,130,opt,name=reminder,proto3" json:"reminder,omitempty"`
	//商品页
	ProductPageEn string `protobuf:"bytes,131,opt,name=productPageEn,proto3" json:"productPageEn,omitempty"`
	//耗材状态
	Status int32 `protobuf:"varint,132,opt,name=status,proto3" json:"status,omitempty"`
	//耗材背景图片
	BackgroudImg string `protobuf:"bytes,134,opt,name=backgroudImg,proto3" json:"backgroudImg,omitempty"`
	//耗材商品图片
	ShopImg string `protobuf:"bytes,135,opt,name=shopImg,proto3" json:"shopImg,omitempty"`
	//耗材分类名称
	ClassifyName string `protobuf:"bytes,136,opt,name=classifyName,proto3" json:"classifyName,omitempty"`
}

func (x *OpmProductMaterialsFilter) Reset() {
	*x = OpmProductMaterialsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_materials_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmProductMaterialsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmProductMaterialsFilter) ProtoMessage() {}

func (x *OpmProductMaterialsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_materials_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmProductMaterialsFilter.ProtoReflect.Descriptor instead.
func (*OpmProductMaterialsFilter) Descriptor() ([]byte, []int) {
	return file_opm_product_materials_model_proto_rawDescGZIP(), []int{1}
}

func (x *OpmProductMaterialsFilter) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OpmProductMaterialsFilter) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetProductPage() string {
	if x != nil {
		return x.ProductPage
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *OpmProductMaterialsFilter) GetBrandCode() string {
	if x != nil {
		return x.BrandCode
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetFragranceCode() string {
	if x != nil {
		return x.FragranceCode
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetFragranceName() string {
	if x != nil {
		return x.FragranceName
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetProductAddress() string {
	if x != nil {
		return x.ProductAddress
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetVariety() string {
	if x != nil {
		return x.Variety
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetIngredient() string {
	if x != nil {
		return x.Ingredient
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetEffect() string {
	if x != nil {
		return x.Effect
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *OpmProductMaterialsFilter) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OpmProductMaterialsFilter) GetUpdatedBy() int64 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

func (x *OpmProductMaterialsFilter) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OpmProductMaterialsFilter) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetMaterialLangId() int64 {
	if x != nil {
		return x.MaterialLangId
	}
	return 0
}

func (x *OpmProductMaterialsFilter) GetMaterialTypeId() int64 {
	if x != nil {
		return x.MaterialTypeId
	}
	return 0
}

func (x *OpmProductMaterialsFilter) GetClassifyId() int64 {
	if x != nil {
		return x.ClassifyId
	}
	return 0
}

func (x *OpmProductMaterialsFilter) GetConsumptionRate() float32 {
	if x != nil {
		return x.ConsumptionRate
	}
	return 0
}

func (x *OpmProductMaterialsFilter) GetExtractSite() string {
	if x != nil {
		return x.ExtractSite
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetBestMixedSug() string {
	if x != nil {
		return x.BestMixedSug
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetAromaType() string {
	if x != nil {
		return x.AromaType
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetRecipePic() string {
	if x != nil {
		return x.RecipePic
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetUseWithProducts() string {
	if x != nil {
		return x.UseWithProducts
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetReminder() string {
	if x != nil {
		return x.Reminder
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetProductPageEn() string {
	if x != nil {
		return x.ProductPageEn
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OpmProductMaterialsFilter) GetBackgroudImg() string {
	if x != nil {
		return x.BackgroudImg
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetShopImg() string {
	if x != nil {
		return x.ShopImg
	}
	return ""
}

func (x *OpmProductMaterialsFilter) GetClassifyName() string {
	if x != nil {
		return x.ClassifyName
	}
	return ""
}

type OpmProductMaterialsListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *OpmProductMaterials `protobuf:"bytes,101,opt,name=query,proto3" json:"query,omitempty"`
	Page      int64                `protobuf:"varint,102,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int64                `protobuf:"varint,103,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderKey  string               `protobuf:"bytes,104,opt,name=orderKey,proto3" json:"orderKey,omitempty"`
	OrderDesc string               `protobuf:"bytes,105,opt,name=orderDesc,proto3" json:"orderDesc,omitempty"`
	SearchKey string               `protobuf:"bytes,106,opt,name=searchKey,proto3" json:"searchKey,omitempty"`
}

func (x *OpmProductMaterialsListRequest) Reset() {
	*x = OpmProductMaterialsListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_materials_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmProductMaterialsListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmProductMaterialsListRequest) ProtoMessage() {}

func (x *OpmProductMaterialsListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_materials_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmProductMaterialsListRequest.ProtoReflect.Descriptor instead.
func (*OpmProductMaterialsListRequest) Descriptor() ([]byte, []int) {
	return file_opm_product_materials_model_proto_rawDescGZIP(), []int{2}
}

func (x *OpmProductMaterialsListRequest) GetQuery() *OpmProductMaterials {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *OpmProductMaterialsListRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *OpmProductMaterialsListRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *OpmProductMaterialsListRequest) GetOrderKey() string {
	if x != nil {
		return x.OrderKey
	}
	return ""
}

func (x *OpmProductMaterialsListRequest) GetOrderDesc() string {
	if x != nil {
		return x.OrderDesc
	}
	return ""
}

func (x *OpmProductMaterialsListRequest) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

type OpmProductMaterialsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32                  `protobuf:"varint,101,opt,name=code,proto3" json:"code,omitempty"`
	Message string                 `protobuf:"bytes,102,opt,name=message,proto3" json:"message,omitempty"`
	Total   int64                  `protobuf:"varint,103,opt,name=total,proto3" json:"total,omitempty"`
	Data    []*OpmProductMaterials `protobuf:"bytes,104,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *OpmProductMaterialsResponse) Reset() {
	*x = OpmProductMaterialsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_materials_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmProductMaterialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmProductMaterialsResponse) ProtoMessage() {}

func (x *OpmProductMaterialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_materials_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmProductMaterialsResponse.ProtoReflect.Descriptor instead.
func (*OpmProductMaterialsResponse) Descriptor() ([]byte, []int) {
	return file_opm_product_materials_model_proto_rawDescGZIP(), []int{3}
}

func (x *OpmProductMaterialsResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *OpmProductMaterialsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OpmProductMaterialsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OpmProductMaterialsResponse) GetData() []*OpmProductMaterials {
	if x != nil {
		return x.Data
	}
	return nil
}

type OpmProductMaterialsUpdateFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []string             `protobuf:"bytes,101,rep,name=fields,proto3" json:"fields,omitempty"`
	Data   *OpmProductMaterials `protobuf:"bytes,102,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *OpmProductMaterialsUpdateFieldsRequest) Reset() {
	*x = OpmProductMaterialsUpdateFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_materials_model_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmProductMaterialsUpdateFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmProductMaterialsUpdateFieldsRequest) ProtoMessage() {}

func (x *OpmProductMaterialsUpdateFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_materials_model_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmProductMaterialsUpdateFieldsRequest.ProtoReflect.Descriptor instead.
func (*OpmProductMaterialsUpdateFieldsRequest) Descriptor() ([]byte, []int) {
	return file_opm_product_materials_model_proto_rawDescGZIP(), []int{4}
}

func (x *OpmProductMaterialsUpdateFieldsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *OpmProductMaterialsUpdateFieldsRequest) GetData() *OpmProductMaterials {
	if x != nil {
		return x.Data
	}
	return nil
}

// 表模型主键，只能是整数或字符串，若生成错误，请检查数据库表主键是否正确。支持组合主键
type OpmProductMaterialsPrimarykey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,100,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OpmProductMaterialsPrimarykey) Reset() {
	*x = OpmProductMaterialsPrimarykey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_materials_model_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmProductMaterialsPrimarykey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmProductMaterialsPrimarykey) ProtoMessage() {}

func (x *OpmProductMaterialsPrimarykey) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_materials_model_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmProductMaterialsPrimarykey.ProtoReflect.Descriptor instead.
func (*OpmProductMaterialsPrimarykey) Descriptor() ([]byte, []int) {
	return file_opm_product_materials_model_proto_rawDescGZIP(), []int{5}
}

func (x *OpmProductMaterialsPrimarykey) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type OpmProductMaterialsBatchDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*OpmProductMaterialsPrimarykey `protobuf:"bytes,101,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *OpmProductMaterialsBatchDeleteRequest) Reset() {
	*x = OpmProductMaterialsBatchDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opm_product_materials_model_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpmProductMaterialsBatchDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpmProductMaterialsBatchDeleteRequest) ProtoMessage() {}

func (x *OpmProductMaterialsBatchDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_opm_product_materials_model_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpmProductMaterialsBatchDeleteRequest.ProtoReflect.Descriptor instead.
func (*OpmProductMaterialsBatchDeleteRequest) Descriptor() ([]byte, []int) {
	return file_opm_product_materials_model_proto_rawDescGZIP(), []int{6}
}

func (x *OpmProductMaterialsBatchDeleteRequest) GetKeys() []*OpmProductMaterialsPrimarykey {
	if x != nil {
		return x.Keys
	}
	return nil
}

var File_opm_product_materials_model_proto protoreflect.FileDescriptor

var file_opm_product_materials_model_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6f, 0x70, 0x6d, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc2, 0x09,
	0x0a, 0x13, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x6a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x66, 0x72, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x73,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x74,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x75, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x76, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x49, 0x64, 0x18, 0x79, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18,
	0x7a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x79, 0x49, 0x64, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x74, 0x65, 0x18, 0x7d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x53, 0x75,
	0x67, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x4d, 0x69, 0x78,
	0x65, 0x64, 0x53, 0x75, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x6f, 0x6d, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x6f, 0x6d, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x69, 0x63,
	0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50,
	0x69, 0x63, 0x12, 0x29, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x08, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x18, 0x83, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x45,
	0x6e, 0x12, 0x17, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x84, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x85, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x23, 0x0a,
	0x0c, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x86, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x64, 0x49,
	0x6d, 0x67, 0x12, 0x19, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x6d, 0x67, 0x18, 0x87, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x6d, 0x67, 0x12, 0x23, 0x0a,
	0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x88, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xb5, 0x09, 0x0a, 0x19, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x61,
	0x67, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72,
	0x61, 0x67, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x67, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x65,
	0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x71, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x18, 0x72, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x74, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x18, 0x76, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67,
	0x49, 0x64, 0x18, 0x79, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x4c, 0x61, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x49, 0x64, 0x18, 0x7b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x74, 0x65, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x62, 0x65, 0x73, 0x74, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x53, 0x75, 0x67, 0x18, 0x7e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x53, 0x75, 0x67,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x6f, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x7f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x6f, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x69, 0x63, 0x18, 0x80, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x69, 0x63, 0x12, 0x29, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x08, 0x72, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x12, 0x17, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f,
	0x75, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x19, 0x0a, 0x07, 0x73, 0x68,
	0x6f, 0x70, 0x49, 0x6d, 0x67, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68,
	0x6f, 0x70, 0x49, 0x6d, 0x67, 0x12, 0x23, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x1e, 0x4f,
	0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x1b, 0x4f, 0x70,
	0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x30, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x68, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x72, 0x0a, 0x26, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x2f, 0x0a, 0x1d, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x6b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x63, 0x0a, 0x25, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x6b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x3b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opm_product_materials_model_proto_rawDescOnce sync.Once
	file_opm_product_materials_model_proto_rawDescData = file_opm_product_materials_model_proto_rawDesc
)

func file_opm_product_materials_model_proto_rawDescGZIP() []byte {
	file_opm_product_materials_model_proto_rawDescOnce.Do(func() {
		file_opm_product_materials_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_opm_product_materials_model_proto_rawDescData)
	})
	return file_opm_product_materials_model_proto_rawDescData
}

var file_opm_product_materials_model_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_opm_product_materials_model_proto_goTypes = []interface{}{
	(*OpmProductMaterials)(nil),                    // 0: service.OpmProductMaterials
	(*OpmProductMaterialsFilter)(nil),              // 1: service.OpmProductMaterialsFilter
	(*OpmProductMaterialsListRequest)(nil),         // 2: service.OpmProductMaterialsListRequest
	(*OpmProductMaterialsResponse)(nil),            // 3: service.OpmProductMaterialsResponse
	(*OpmProductMaterialsUpdateFieldsRequest)(nil), // 4: service.OpmProductMaterialsUpdateFieldsRequest
	(*OpmProductMaterialsPrimarykey)(nil),          // 5: service.OpmProductMaterialsPrimarykey
	(*OpmProductMaterialsBatchDeleteRequest)(nil),  // 6: service.OpmProductMaterialsBatchDeleteRequest
	(*timestamppb.Timestamp)(nil),                  // 7: google.protobuf.Timestamp
}
var file_opm_product_materials_model_proto_depIdxs = []int32{
	7, // 0: service.OpmProductMaterials.createdAt:type_name -> google.protobuf.Timestamp
	7, // 1: service.OpmProductMaterials.updatedAt:type_name -> google.protobuf.Timestamp
	7, // 2: service.OpmProductMaterialsFilter.createdAt:type_name -> google.protobuf.Timestamp
	7, // 3: service.OpmProductMaterialsFilter.updatedAt:type_name -> google.protobuf.Timestamp
	0, // 4: service.OpmProductMaterialsListRequest.query:type_name -> service.OpmProductMaterials
	0, // 5: service.OpmProductMaterialsResponse.data:type_name -> service.OpmProductMaterials
	0, // 6: service.OpmProductMaterialsUpdateFieldsRequest.data:type_name -> service.OpmProductMaterials
	5, // 7: service.OpmProductMaterialsBatchDeleteRequest.keys:type_name -> service.OpmProductMaterialsPrimarykey
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_opm_product_materials_model_proto_init() }
func file_opm_product_materials_model_proto_init() {
	if File_opm_product_materials_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_opm_product_materials_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmProductMaterials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_materials_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmProductMaterialsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_materials_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmProductMaterialsListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_materials_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmProductMaterialsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_materials_model_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmProductMaterialsUpdateFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_materials_model_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmProductMaterialsPrimarykey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opm_product_materials_model_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpmProductMaterialsBatchDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opm_product_materials_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opm_product_materials_model_proto_goTypes,
		DependencyIndexes: file_opm_product_materials_model_proto_depIdxs,
		MessageInfos:      file_opm_product_materials_model_proto_msgTypes,
	}.Build()
	File_opm_product_materials_model_proto = out.File
	file_opm_product_materials_model_proto_rawDesc = nil
	file_opm_product_materials_model_proto_goTypes = nil
	file_opm_product_materials_model_proto_depIdxs = nil
}
