// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: t_pm_product_type.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TPmProductType service

func NewTPmProductTypeEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TPmProductType service

type TPmProductTypeService interface {
	GetByIdTPmProductType(ctx context.Context, in *TPmProductTypeFilterById, opts ...client.CallOption) (*TPmProductTypeResponseObject, error)
	GetTPmProductType(ctx context.Context, in *TPmProductTypeFilter, opts ...client.CallOption) (*TPmProductTypeResponseObject, error)
	ListTPmProductType(ctx context.Context, in *TPmProductTypeFilterPage, opts ...client.CallOption) (*TPmProductTypeResponseList, error)
	CreateTPmProductType(ctx context.Context, in *TPmProductTypeRequest, opts ...client.CallOption) (*TPmProductTypeResponse, error)
	UpdateTPmProductType(ctx context.Context, in *TPmProductTypeRequest, opts ...client.CallOption) (*TPmProductTypeResponse, error)
	DeleteTPmProductType(ctx context.Context, in *TPmProductTypeRequest, opts ...client.CallOption) (*TPmProductTypeResponse, error)
	GetAppProductType(ctx context.Context, in *TPmProductTypeFilterPage, opts ...client.CallOption) (*TPmProductTypeResponseList, error)
}

type tPmProductTypeService struct {
	c    client.Client
	name string
}

func NewTPmProductTypeService(name string, c client.Client) TPmProductTypeService {
	return &tPmProductTypeService{
		c:    c,
		name: name,
	}
}

func (c *tPmProductTypeService) GetByIdTPmProductType(ctx context.Context, in *TPmProductTypeFilterById, opts ...client.CallOption) (*TPmProductTypeResponseObject, error) {
	req := c.c.NewRequest(c.name, "TPmProductType.GetByIdTPmProductType", in)
	out := new(TPmProductTypeResponseObject)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmProductTypeService) GetTPmProductType(ctx context.Context, in *TPmProductTypeFilter, opts ...client.CallOption) (*TPmProductTypeResponseObject, error) {
	req := c.c.NewRequest(c.name, "TPmProductType.GetTPmProductType", in)
	out := new(TPmProductTypeResponseObject)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmProductTypeService) ListTPmProductType(ctx context.Context, in *TPmProductTypeFilterPage, opts ...client.CallOption) (*TPmProductTypeResponseList, error) {
	req := c.c.NewRequest(c.name, "TPmProductType.ListTPmProductType", in)
	out := new(TPmProductTypeResponseList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmProductTypeService) CreateTPmProductType(ctx context.Context, in *TPmProductTypeRequest, opts ...client.CallOption) (*TPmProductTypeResponse, error) {
	req := c.c.NewRequest(c.name, "TPmProductType.CreateTPmProductType", in)
	out := new(TPmProductTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmProductTypeService) UpdateTPmProductType(ctx context.Context, in *TPmProductTypeRequest, opts ...client.CallOption) (*TPmProductTypeResponse, error) {
	req := c.c.NewRequest(c.name, "TPmProductType.UpdateTPmProductType", in)
	out := new(TPmProductTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmProductTypeService) DeleteTPmProductType(ctx context.Context, in *TPmProductTypeRequest, opts ...client.CallOption) (*TPmProductTypeResponse, error) {
	req := c.c.NewRequest(c.name, "TPmProductType.DeleteTPmProductType", in)
	out := new(TPmProductTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tPmProductTypeService) GetAppProductType(ctx context.Context, in *TPmProductTypeFilterPage, opts ...client.CallOption) (*TPmProductTypeResponseList, error) {
	req := c.c.NewRequest(c.name, "TPmProductType.GetAppProductType", in)
	out := new(TPmProductTypeResponseList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TPmProductType service

type TPmProductTypeHandler interface {
	GetByIdTPmProductType(context.Context, *TPmProductTypeFilterById, *TPmProductTypeResponseObject) error
	GetTPmProductType(context.Context, *TPmProductTypeFilter, *TPmProductTypeResponseObject) error
	ListTPmProductType(context.Context, *TPmProductTypeFilterPage, *TPmProductTypeResponseList) error
	CreateTPmProductType(context.Context, *TPmProductTypeRequest, *TPmProductTypeResponse) error
	UpdateTPmProductType(context.Context, *TPmProductTypeRequest, *TPmProductTypeResponse) error
	DeleteTPmProductType(context.Context, *TPmProductTypeRequest, *TPmProductTypeResponse) error
	GetAppProductType(context.Context, *TPmProductTypeFilterPage, *TPmProductTypeResponseList) error
}

func RegisterTPmProductTypeHandler(s server.Server, hdlr TPmProductTypeHandler, opts ...server.HandlerOption) error {
	type tPmProductType interface {
		GetByIdTPmProductType(ctx context.Context, in *TPmProductTypeFilterById, out *TPmProductTypeResponseObject) error
		GetTPmProductType(ctx context.Context, in *TPmProductTypeFilter, out *TPmProductTypeResponseObject) error
		ListTPmProductType(ctx context.Context, in *TPmProductTypeFilterPage, out *TPmProductTypeResponseList) error
		CreateTPmProductType(ctx context.Context, in *TPmProductTypeRequest, out *TPmProductTypeResponse) error
		UpdateTPmProductType(ctx context.Context, in *TPmProductTypeRequest, out *TPmProductTypeResponse) error
		DeleteTPmProductType(ctx context.Context, in *TPmProductTypeRequest, out *TPmProductTypeResponse) error
		GetAppProductType(ctx context.Context, in *TPmProductTypeFilterPage, out *TPmProductTypeResponseList) error
	}
	type TPmProductType struct {
		tPmProductType
	}
	h := &tPmProductTypeHandler{hdlr}
	return s.Handle(s.NewHandler(&TPmProductType{h}, opts...))
}

type tPmProductTypeHandler struct {
	TPmProductTypeHandler
}

func (h *tPmProductTypeHandler) GetByIdTPmProductType(ctx context.Context, in *TPmProductTypeFilterById, out *TPmProductTypeResponseObject) error {
	return h.TPmProductTypeHandler.GetByIdTPmProductType(ctx, in, out)
}

func (h *tPmProductTypeHandler) GetTPmProductType(ctx context.Context, in *TPmProductTypeFilter, out *TPmProductTypeResponseObject) error {
	return h.TPmProductTypeHandler.GetTPmProductType(ctx, in, out)
}

func (h *tPmProductTypeHandler) ListTPmProductType(ctx context.Context, in *TPmProductTypeFilterPage, out *TPmProductTypeResponseList) error {
	return h.TPmProductTypeHandler.ListTPmProductType(ctx, in, out)
}

func (h *tPmProductTypeHandler) CreateTPmProductType(ctx context.Context, in *TPmProductTypeRequest, out *TPmProductTypeResponse) error {
	return h.TPmProductTypeHandler.CreateTPmProductType(ctx, in, out)
}

func (h *tPmProductTypeHandler) UpdateTPmProductType(ctx context.Context, in *TPmProductTypeRequest, out *TPmProductTypeResponse) error {
	return h.TPmProductTypeHandler.UpdateTPmProductType(ctx, in, out)
}

func (h *tPmProductTypeHandler) DeleteTPmProductType(ctx context.Context, in *TPmProductTypeRequest, out *TPmProductTypeResponse) error {
	return h.TPmProductTypeHandler.DeleteTPmProductType(ctx, in, out)
}

func (h *tPmProductTypeHandler) GetAppProductType(ctx context.Context, in *TPmProductTypeFilterPage, out *TPmProductTypeResponseList) error {
	return h.TPmProductTypeHandler.GetAppProductType(ctx, in, out)
}
