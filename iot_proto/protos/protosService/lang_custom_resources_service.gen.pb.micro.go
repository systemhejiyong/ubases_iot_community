// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: lang_custom_resources_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LangCustomResourcesService service

func NewLangCustomResourcesServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "LangCustomResourcesService.Create",
			Path:    []string{"/v1/langCustomResources/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangCustomResourcesService.Delete",
			Path:    []string{"/v1/langCustomResources/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangCustomResourcesService.DeleteById",
			Path:    []string{"/v1/langCustomResources/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangCustomResourcesService.DeleteByIds",
			Path:    []string{"/v1/langCustomResources/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangCustomResourcesService.Update",
			Path:    []string{"/v1/langCustomResources/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangCustomResourcesService.UpdateAll",
			Path:    []string{"/v1/langCustomResources/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangCustomResourcesService.UpdateFields",
			Path:    []string{"/v1/langCustomResources/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangCustomResourcesService.FindById",
			Path:    []string{"/v1/langCustomResources/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangCustomResourcesService.Find",
			Path:    []string{"/v1/langCustomResources/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangCustomResourcesService.Lists",
			Path:    []string{"/v1/langCustomResources/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangCustomResourcesService.ResourceUseRecord",
			Path:    []string{"/v1/langCustomResources/resourceUseRecord"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangCustomResourcesService.ImportCreate",
			Path:    []string{"/v1/langCustomResources/importCreate"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangCustomResourcesService.CreateOpRecord",
			Path:    []string{"/v1/langCustomResources/createRecord"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "LangCustomResourcesService.BatchSaveCustomResources",
			Path:    []string{"/v1/langCustomResources/batchSaveCustomResources"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for LangCustomResourcesService service

type LangCustomResourcesService interface {
	//创建
	Create(ctx context.Context, in *LangCustomResources, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *LangCustomResources, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *LangCustomResources, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *LangCustomResourcesBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *LangCustomResources, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *LangCustomResources, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *LangCustomResourcesUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *LangCustomResourcesFilter, opts ...client.CallOption) (*LangCustomResourcesResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *LangCustomResourcesFilter, opts ...client.CallOption) (*LangCustomResourcesResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *LangCustomResourcesListRequest, opts ...client.CallOption) (*LangCustomResourcesResponse, error)
	//查询自定义资源导入和导出次数和限制
	ResourceUseRecord(ctx context.Context, in *ResourceOperationRecordRequest, opts ...client.CallOption) (*ResourceOperationRecordResponse, error)
	//导入创建
	ImportCreate(ctx context.Context, in *ImportLangCustomResource, opts ...client.CallOption) (*Response, error)
	//创建操作记录
	CreateOpRecord(ctx context.Context, in *CustomerResourceRecord, opts ...client.CallOption) (*Response, error)
	//批量新增资源 BatchSaveCustomResources，通过BelongId和BelongType
	BatchSaveCustomResources(ctx context.Context, in *BatchCustomResourcesRequest, opts ...client.CallOption) (*Response, error)
}

type langCustomResourcesService struct {
	c    client.Client
	name string
}

func NewLangCustomResourcesService(name string, c client.Client) LangCustomResourcesService {
	return &langCustomResourcesService{
		c:    c,
		name: name,
	}
}

func (c *langCustomResourcesService) Create(ctx context.Context, in *LangCustomResources, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangCustomResourcesService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langCustomResourcesService) Delete(ctx context.Context, in *LangCustomResources, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangCustomResourcesService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langCustomResourcesService) DeleteById(ctx context.Context, in *LangCustomResources, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangCustomResourcesService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langCustomResourcesService) DeleteByIds(ctx context.Context, in *LangCustomResourcesBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangCustomResourcesService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langCustomResourcesService) Update(ctx context.Context, in *LangCustomResources, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangCustomResourcesService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langCustomResourcesService) UpdateAll(ctx context.Context, in *LangCustomResources, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangCustomResourcesService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langCustomResourcesService) UpdateFields(ctx context.Context, in *LangCustomResourcesUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangCustomResourcesService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langCustomResourcesService) FindById(ctx context.Context, in *LangCustomResourcesFilter, opts ...client.CallOption) (*LangCustomResourcesResponse, error) {
	req := c.c.NewRequest(c.name, "LangCustomResourcesService.FindById", in)
	out := new(LangCustomResourcesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langCustomResourcesService) Find(ctx context.Context, in *LangCustomResourcesFilter, opts ...client.CallOption) (*LangCustomResourcesResponse, error) {
	req := c.c.NewRequest(c.name, "LangCustomResourcesService.Find", in)
	out := new(LangCustomResourcesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langCustomResourcesService) Lists(ctx context.Context, in *LangCustomResourcesListRequest, opts ...client.CallOption) (*LangCustomResourcesResponse, error) {
	req := c.c.NewRequest(c.name, "LangCustomResourcesService.Lists", in)
	out := new(LangCustomResourcesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langCustomResourcesService) ResourceUseRecord(ctx context.Context, in *ResourceOperationRecordRequest, opts ...client.CallOption) (*ResourceOperationRecordResponse, error) {
	req := c.c.NewRequest(c.name, "LangCustomResourcesService.ResourceUseRecord", in)
	out := new(ResourceOperationRecordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langCustomResourcesService) ImportCreate(ctx context.Context, in *ImportLangCustomResource, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangCustomResourcesService.ImportCreate", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langCustomResourcesService) CreateOpRecord(ctx context.Context, in *CustomerResourceRecord, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangCustomResourcesService.CreateOpRecord", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *langCustomResourcesService) BatchSaveCustomResources(ctx context.Context, in *BatchCustomResourcesRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "LangCustomResourcesService.BatchSaveCustomResources", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LangCustomResourcesService service

type LangCustomResourcesServiceHandler interface {
	//创建
	Create(context.Context, *LangCustomResources, *Response) error
	//匹配多条件删除
	Delete(context.Context, *LangCustomResources, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *LangCustomResources, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *LangCustomResourcesBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *LangCustomResources, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *LangCustomResources, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *LangCustomResourcesUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *LangCustomResourcesFilter, *LangCustomResourcesResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *LangCustomResourcesFilter, *LangCustomResourcesResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *LangCustomResourcesListRequest, *LangCustomResourcesResponse) error
	//查询自定义资源导入和导出次数和限制
	ResourceUseRecord(context.Context, *ResourceOperationRecordRequest, *ResourceOperationRecordResponse) error
	//导入创建
	ImportCreate(context.Context, *ImportLangCustomResource, *Response) error
	//创建操作记录
	CreateOpRecord(context.Context, *CustomerResourceRecord, *Response) error
	//批量新增资源 BatchSaveCustomResources，通过BelongId和BelongType
	BatchSaveCustomResources(context.Context, *BatchCustomResourcesRequest, *Response) error
}

func RegisterLangCustomResourcesServiceHandler(s server.Server, hdlr LangCustomResourcesServiceHandler, opts ...server.HandlerOption) error {
	type langCustomResourcesService interface {
		Create(ctx context.Context, in *LangCustomResources, out *Response) error
		Delete(ctx context.Context, in *LangCustomResources, out *Response) error
		DeleteById(ctx context.Context, in *LangCustomResources, out *Response) error
		DeleteByIds(ctx context.Context, in *LangCustomResourcesBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *LangCustomResources, out *Response) error
		UpdateAll(ctx context.Context, in *LangCustomResources, out *Response) error
		UpdateFields(ctx context.Context, in *LangCustomResourcesUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *LangCustomResourcesFilter, out *LangCustomResourcesResponse) error
		Find(ctx context.Context, in *LangCustomResourcesFilter, out *LangCustomResourcesResponse) error
		Lists(ctx context.Context, in *LangCustomResourcesListRequest, out *LangCustomResourcesResponse) error
		ResourceUseRecord(ctx context.Context, in *ResourceOperationRecordRequest, out *ResourceOperationRecordResponse) error
		ImportCreate(ctx context.Context, in *ImportLangCustomResource, out *Response) error
		CreateOpRecord(ctx context.Context, in *CustomerResourceRecord, out *Response) error
		BatchSaveCustomResources(ctx context.Context, in *BatchCustomResourcesRequest, out *Response) error
	}
	type LangCustomResourcesService struct {
		langCustomResourcesService
	}
	h := &langCustomResourcesServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangCustomResourcesService.Create",
		Path:    []string{"/v1/langCustomResources/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangCustomResourcesService.Delete",
		Path:    []string{"/v1/langCustomResources/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangCustomResourcesService.DeleteById",
		Path:    []string{"/v1/langCustomResources/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangCustomResourcesService.DeleteByIds",
		Path:    []string{"/v1/langCustomResources/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangCustomResourcesService.Update",
		Path:    []string{"/v1/langCustomResources/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangCustomResourcesService.UpdateAll",
		Path:    []string{"/v1/langCustomResources/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangCustomResourcesService.UpdateFields",
		Path:    []string{"/v1/langCustomResources/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangCustomResourcesService.FindById",
		Path:    []string{"/v1/langCustomResources/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangCustomResourcesService.Find",
		Path:    []string{"/v1/langCustomResources/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangCustomResourcesService.Lists",
		Path:    []string{"/v1/langCustomResources/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangCustomResourcesService.ResourceUseRecord",
		Path:    []string{"/v1/langCustomResources/resourceUseRecord"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangCustomResourcesService.ImportCreate",
		Path:    []string{"/v1/langCustomResources/importCreate"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangCustomResourcesService.CreateOpRecord",
		Path:    []string{"/v1/langCustomResources/createRecord"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LangCustomResourcesService.BatchSaveCustomResources",
		Path:    []string{"/v1/langCustomResources/batchSaveCustomResources"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&LangCustomResourcesService{h}, opts...))
}

type langCustomResourcesServiceHandler struct {
	LangCustomResourcesServiceHandler
}

func (h *langCustomResourcesServiceHandler) Create(ctx context.Context, in *LangCustomResources, out *Response) error {
	return h.LangCustomResourcesServiceHandler.Create(ctx, in, out)
}

func (h *langCustomResourcesServiceHandler) Delete(ctx context.Context, in *LangCustomResources, out *Response) error {
	return h.LangCustomResourcesServiceHandler.Delete(ctx, in, out)
}

func (h *langCustomResourcesServiceHandler) DeleteById(ctx context.Context, in *LangCustomResources, out *Response) error {
	return h.LangCustomResourcesServiceHandler.DeleteById(ctx, in, out)
}

func (h *langCustomResourcesServiceHandler) DeleteByIds(ctx context.Context, in *LangCustomResourcesBatchDeleteRequest, out *Response) error {
	return h.LangCustomResourcesServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *langCustomResourcesServiceHandler) Update(ctx context.Context, in *LangCustomResources, out *Response) error {
	return h.LangCustomResourcesServiceHandler.Update(ctx, in, out)
}

func (h *langCustomResourcesServiceHandler) UpdateAll(ctx context.Context, in *LangCustomResources, out *Response) error {
	return h.LangCustomResourcesServiceHandler.UpdateAll(ctx, in, out)
}

func (h *langCustomResourcesServiceHandler) UpdateFields(ctx context.Context, in *LangCustomResourcesUpdateFieldsRequest, out *Response) error {
	return h.LangCustomResourcesServiceHandler.UpdateFields(ctx, in, out)
}

func (h *langCustomResourcesServiceHandler) FindById(ctx context.Context, in *LangCustomResourcesFilter, out *LangCustomResourcesResponse) error {
	return h.LangCustomResourcesServiceHandler.FindById(ctx, in, out)
}

func (h *langCustomResourcesServiceHandler) Find(ctx context.Context, in *LangCustomResourcesFilter, out *LangCustomResourcesResponse) error {
	return h.LangCustomResourcesServiceHandler.Find(ctx, in, out)
}

func (h *langCustomResourcesServiceHandler) Lists(ctx context.Context, in *LangCustomResourcesListRequest, out *LangCustomResourcesResponse) error {
	return h.LangCustomResourcesServiceHandler.Lists(ctx, in, out)
}

func (h *langCustomResourcesServiceHandler) ResourceUseRecord(ctx context.Context, in *ResourceOperationRecordRequest, out *ResourceOperationRecordResponse) error {
	return h.LangCustomResourcesServiceHandler.ResourceUseRecord(ctx, in, out)
}

func (h *langCustomResourcesServiceHandler) ImportCreate(ctx context.Context, in *ImportLangCustomResource, out *Response) error {
	return h.LangCustomResourcesServiceHandler.ImportCreate(ctx, in, out)
}

func (h *langCustomResourcesServiceHandler) CreateOpRecord(ctx context.Context, in *CustomerResourceRecord, out *Response) error {
	return h.LangCustomResourcesServiceHandler.CreateOpRecord(ctx, in, out)
}

func (h *langCustomResourcesServiceHandler) BatchSaveCustomResources(ctx context.Context, in *BatchCustomResourcesRequest, out *Response) error {
	return h.LangCustomResourcesServiceHandler.BatchSaveCustomResources(ctx, in, out)
}
