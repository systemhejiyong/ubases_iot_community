// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: opm_product_firmware_relation_service.gen.proto

package protosService

import (
	
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OpmProductFirmwareRelationService service

func NewOpmProductFirmwareRelationServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		{
			Name:    "OpmProductFirmwareRelationService.Create",
			Path:    []string{"/v1/opmProductFirmwareRelation/create"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductFirmwareRelationService.Delete",
			Path:    []string{"/v1/opmProductFirmwareRelation/delete"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductFirmwareRelationService.DeleteById",
			Path:    []string{"/v1/opmProductFirmwareRelation/deleteById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductFirmwareRelationService.DeleteByIds",
			Path:    []string{"/v1/opmProductFirmwareRelation/DeleteByIds"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductFirmwareRelationService.Update",
			Path:    []string{"/v1/opmProductFirmwareRelation/update"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductFirmwareRelationService.UpdateAll",
			Path:    []string{"/v1/opmProductFirmwareRelation/updateAll"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductFirmwareRelationService.UpdateFields",
			Path:    []string{"/v1/opmProductFirmwareRelation/updateFields"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductFirmwareRelationService.FindById",
			Path:    []string{"/v1/opmProductFirmwareRelation/findById"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductFirmwareRelationService.Find",
			Path:    []string{"/v1/opmProductFirmwareRelation/find"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		{
			Name:    "OpmProductFirmwareRelationService.Lists",
			Path:    []string{"/v1/opmProductFirmwareRelation/lists"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
	}
}

// Client API for OpmProductFirmwareRelationService service

type OpmProductFirmwareRelationService interface {
	//创建
	Create(ctx context.Context, in *OpmProductFirmwareRelation, opts ...client.CallOption) (*Response, error)
	//匹配多条件删除
	Delete(ctx context.Context, in *OpmProductFirmwareRelation, opts ...client.CallOption) (*Response, error)
	//匹配主键删除,一般是Id
	DeleteById(ctx context.Context, in *OpmProductFirmwareRelation, opts ...client.CallOption) (*Response, error)
	//匹配主键批量删除
	DeleteByIds(ctx context.Context, in *OpmProductFirmwareRelationBatchDeleteRequest, opts ...client.CallOption) (*Response, error)
	//根据主键更新非空字段
	Update(ctx context.Context, in *OpmProductFirmwareRelation, opts ...client.CallOption) (*Response, error)
	//根据主键更新所有字段
	UpdateAll(ctx context.Context, in *OpmProductFirmwareRelation, opts ...client.CallOption) (*Response, error)
	//根据主键更新指定列
	UpdateFields(ctx context.Context, in *OpmProductFirmwareRelationUpdateFieldsRequest, opts ...client.CallOption) (*Response, error)
	//根据主键查找,一般是Id,返回单条数据
	FindById(ctx context.Context, in *OpmProductFirmwareRelationFilter, opts ...client.CallOption) (*OpmProductFirmwareRelationResponse, error)
	//多条件查找，返回单条数据
	Find(ctx context.Context, in *OpmProductFirmwareRelationFilter, opts ...client.CallOption) (*OpmProductFirmwareRelationResponse, error)
	//查找，支持分页，可返回多条数据
	Lists(ctx context.Context, in *OpmProductFirmwareRelationListRequest, opts ...client.CallOption) (*OpmProductFirmwareRelationResponse, error)
}

type opmProductFirmwareRelationService struct {
	c    client.Client
	name string
}

func NewOpmProductFirmwareRelationService(name string, c client.Client) OpmProductFirmwareRelationService {
	return &opmProductFirmwareRelationService{
		c:    c,
		name: name,
	}
}

func (c *opmProductFirmwareRelationService) Create(ctx context.Context, in *OpmProductFirmwareRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductFirmwareRelationService.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductFirmwareRelationService) Delete(ctx context.Context, in *OpmProductFirmwareRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductFirmwareRelationService.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductFirmwareRelationService) DeleteById(ctx context.Context, in *OpmProductFirmwareRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductFirmwareRelationService.DeleteById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductFirmwareRelationService) DeleteByIds(ctx context.Context, in *OpmProductFirmwareRelationBatchDeleteRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductFirmwareRelationService.DeleteByIds", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductFirmwareRelationService) Update(ctx context.Context, in *OpmProductFirmwareRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductFirmwareRelationService.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductFirmwareRelationService) UpdateAll(ctx context.Context, in *OpmProductFirmwareRelation, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductFirmwareRelationService.UpdateAll", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductFirmwareRelationService) UpdateFields(ctx context.Context, in *OpmProductFirmwareRelationUpdateFieldsRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "OpmProductFirmwareRelationService.UpdateFields", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductFirmwareRelationService) FindById(ctx context.Context, in *OpmProductFirmwareRelationFilter, opts ...client.CallOption) (*OpmProductFirmwareRelationResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductFirmwareRelationService.FindById", in)
	out := new(OpmProductFirmwareRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductFirmwareRelationService) Find(ctx context.Context, in *OpmProductFirmwareRelationFilter, opts ...client.CallOption) (*OpmProductFirmwareRelationResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductFirmwareRelationService.Find", in)
	out := new(OpmProductFirmwareRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opmProductFirmwareRelationService) Lists(ctx context.Context, in *OpmProductFirmwareRelationListRequest, opts ...client.CallOption) (*OpmProductFirmwareRelationResponse, error) {
	req := c.c.NewRequest(c.name, "OpmProductFirmwareRelationService.Lists", in)
	out := new(OpmProductFirmwareRelationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpmProductFirmwareRelationService service

type OpmProductFirmwareRelationServiceHandler interface {
	//创建
	Create(context.Context, *OpmProductFirmwareRelation, *Response) error
	//匹配多条件删除
	Delete(context.Context, *OpmProductFirmwareRelation, *Response) error
	//匹配主键删除,一般是Id
	DeleteById(context.Context, *OpmProductFirmwareRelation, *Response) error
	//匹配主键批量删除
	DeleteByIds(context.Context, *OpmProductFirmwareRelationBatchDeleteRequest, *Response) error
	//根据主键更新非空字段
	Update(context.Context, *OpmProductFirmwareRelation, *Response) error
	//根据主键更新所有字段
	UpdateAll(context.Context, *OpmProductFirmwareRelation, *Response) error
	//根据主键更新指定列
	UpdateFields(context.Context, *OpmProductFirmwareRelationUpdateFieldsRequest, *Response) error
	//根据主键查找,一般是Id,返回单条数据
	FindById(context.Context, *OpmProductFirmwareRelationFilter, *OpmProductFirmwareRelationResponse) error
	//多条件查找，返回单条数据
	Find(context.Context, *OpmProductFirmwareRelationFilter, *OpmProductFirmwareRelationResponse) error
	//查找，支持分页，可返回多条数据
	Lists(context.Context, *OpmProductFirmwareRelationListRequest, *OpmProductFirmwareRelationResponse) error
}

func RegisterOpmProductFirmwareRelationServiceHandler(s server.Server, hdlr OpmProductFirmwareRelationServiceHandler, opts ...server.HandlerOption) error {
	type opmProductFirmwareRelationService interface {
		Create(ctx context.Context, in *OpmProductFirmwareRelation, out *Response) error
		Delete(ctx context.Context, in *OpmProductFirmwareRelation, out *Response) error
		DeleteById(ctx context.Context, in *OpmProductFirmwareRelation, out *Response) error
		DeleteByIds(ctx context.Context, in *OpmProductFirmwareRelationBatchDeleteRequest, out *Response) error
		Update(ctx context.Context, in *OpmProductFirmwareRelation, out *Response) error
		UpdateAll(ctx context.Context, in *OpmProductFirmwareRelation, out *Response) error
		UpdateFields(ctx context.Context, in *OpmProductFirmwareRelationUpdateFieldsRequest, out *Response) error
		FindById(ctx context.Context, in *OpmProductFirmwareRelationFilter, out *OpmProductFirmwareRelationResponse) error
		Find(ctx context.Context, in *OpmProductFirmwareRelationFilter, out *OpmProductFirmwareRelationResponse) error
		Lists(ctx context.Context, in *OpmProductFirmwareRelationListRequest, out *OpmProductFirmwareRelationResponse) error
	}
	type OpmProductFirmwareRelationService struct {
		opmProductFirmwareRelationService
	}
	h := &opmProductFirmwareRelationServiceHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductFirmwareRelationService.Create",
		Path:    []string{"/v1/opmProductFirmwareRelation/create"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductFirmwareRelationService.Delete",
		Path:    []string{"/v1/opmProductFirmwareRelation/delete"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductFirmwareRelationService.DeleteById",
		Path:    []string{"/v1/opmProductFirmwareRelation/deleteById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductFirmwareRelationService.DeleteByIds",
		Path:    []string{"/v1/opmProductFirmwareRelation/DeleteByIds"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductFirmwareRelationService.Update",
		Path:    []string{"/v1/opmProductFirmwareRelation/update"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductFirmwareRelationService.UpdateAll",
		Path:    []string{"/v1/opmProductFirmwareRelation/updateAll"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductFirmwareRelationService.UpdateFields",
		Path:    []string{"/v1/opmProductFirmwareRelation/updateFields"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductFirmwareRelationService.FindById",
		Path:    []string{"/v1/opmProductFirmwareRelation/findById"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductFirmwareRelationService.Find",
		Path:    []string{"/v1/opmProductFirmwareRelation/find"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "OpmProductFirmwareRelationService.Lists",
		Path:    []string{"/v1/opmProductFirmwareRelation/lists"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&OpmProductFirmwareRelationService{h}, opts...))
}

type opmProductFirmwareRelationServiceHandler struct {
	OpmProductFirmwareRelationServiceHandler
}

func (h *opmProductFirmwareRelationServiceHandler) Create(ctx context.Context, in *OpmProductFirmwareRelation, out *Response) error {
	return h.OpmProductFirmwareRelationServiceHandler.Create(ctx, in, out)
}

func (h *opmProductFirmwareRelationServiceHandler) Delete(ctx context.Context, in *OpmProductFirmwareRelation, out *Response) error {
	return h.OpmProductFirmwareRelationServiceHandler.Delete(ctx, in, out)
}

func (h *opmProductFirmwareRelationServiceHandler) DeleteById(ctx context.Context, in *OpmProductFirmwareRelation, out *Response) error {
	return h.OpmProductFirmwareRelationServiceHandler.DeleteById(ctx, in, out)
}

func (h *opmProductFirmwareRelationServiceHandler) DeleteByIds(ctx context.Context, in *OpmProductFirmwareRelationBatchDeleteRequest, out *Response) error {
	return h.OpmProductFirmwareRelationServiceHandler.DeleteByIds(ctx, in, out)
}

func (h *opmProductFirmwareRelationServiceHandler) Update(ctx context.Context, in *OpmProductFirmwareRelation, out *Response) error {
	return h.OpmProductFirmwareRelationServiceHandler.Update(ctx, in, out)
}

func (h *opmProductFirmwareRelationServiceHandler) UpdateAll(ctx context.Context, in *OpmProductFirmwareRelation, out *Response) error {
	return h.OpmProductFirmwareRelationServiceHandler.UpdateAll(ctx, in, out)
}

func (h *opmProductFirmwareRelationServiceHandler) UpdateFields(ctx context.Context, in *OpmProductFirmwareRelationUpdateFieldsRequest, out *Response) error {
	return h.OpmProductFirmwareRelationServiceHandler.UpdateFields(ctx, in, out)
}

func (h *opmProductFirmwareRelationServiceHandler) FindById(ctx context.Context, in *OpmProductFirmwareRelationFilter, out *OpmProductFirmwareRelationResponse) error {
	return h.OpmProductFirmwareRelationServiceHandler.FindById(ctx, in, out)
}

func (h *opmProductFirmwareRelationServiceHandler) Find(ctx context.Context, in *OpmProductFirmwareRelationFilter, out *OpmProductFirmwareRelationResponse) error {
	return h.OpmProductFirmwareRelationServiceHandler.Find(ctx, in, out)
}

func (h *opmProductFirmwareRelationServiceHandler) Lists(ctx context.Context, in *OpmProductFirmwareRelationListRequest, out *OpmProductFirmwareRelationResponse) error {
	return h.OpmProductFirmwareRelationServiceHandler.Lists(ctx, in, out)
}
