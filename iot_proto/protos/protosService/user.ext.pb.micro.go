// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.ext.proto

package protosService

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AppApiUserExtService service

func NewAppApiUserExtServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AppApiUserExtService service

type AppApiUserExtService interface {
	UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, opts ...client.CallOption) (*UpdateUserPasswordResponse, error)
}

type appApiUserExtService struct {
	c    client.Client
	name string
}

func NewAppApiUserExtService(name string, c client.Client) AppApiUserExtService {
	return &appApiUserExtService{
		c:    c,
		name: name,
	}
}

func (c *appApiUserExtService) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, opts ...client.CallOption) (*UpdateUserPasswordResponse, error) {
	req := c.c.NewRequest(c.name, "AppApiUserExtService.UpdateUserPassword", in)
	out := new(UpdateUserPasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppApiUserExtService service

type AppApiUserExtServiceHandler interface {
	UpdateUserPassword(context.Context, *UpdateUserPasswordReq, *UpdateUserPasswordResponse) error
}

func RegisterAppApiUserExtServiceHandler(s server.Server, hdlr AppApiUserExtServiceHandler, opts ...server.HandlerOption) error {
	type appApiUserExtService interface {
		UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, out *UpdateUserPasswordResponse) error
	}
	type AppApiUserExtService struct {
		appApiUserExtService
	}
	h := &appApiUserExtServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AppApiUserExtService{h}, opts...))
}

type appApiUserExtServiceHandler struct {
	AppApiUserExtServiceHandler
}

func (h *appApiUserExtServiceHandler) UpdateUserPassword(ctx context.Context, in *UpdateUserPasswordReq, out *UpdateUserPasswordResponse) error {
	return h.AppApiUserExtServiceHandler.UpdateUserPassword(ctx, in, out)
}
