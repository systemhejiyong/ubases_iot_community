// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTSysJob(db *gorm.DB) tSysJob {
	_tSysJob := tSysJob{}

	_tSysJob.tSysJobDo.UseDB(db)
	_tSysJob.tSysJobDo.UseModel(&model.TSysJob{})

	tableName := _tSysJob.tSysJobDo.TableName()
	_tSysJob.ALL = field.NewField(tableName, "*")
	_tSysJob.JobId = field.NewInt64(tableName, "job_id")
	_tSysJob.JobName = field.NewString(tableName, "job_name")
	_tSysJob.JobParams = field.NewString(tableName, "job_params")
	_tSysJob.JobGroup = field.NewString(tableName, "job_group")
	_tSysJob.InvokeTarget = field.NewString(tableName, "invoke_target")
	_tSysJob.CronExpression = field.NewString(tableName, "cron_expression")
	_tSysJob.MisfirePolicy = field.NewInt32(tableName, "misfire_policy")
	_tSysJob.Concurrent = field.NewInt32(tableName, "concurrent")
	_tSysJob.Status = field.NewInt32(tableName, "status")
	_tSysJob.CreateBy = field.NewInt64(tableName, "create_by")
	_tSysJob.UpdateBy = field.NewInt64(tableName, "update_by")
	_tSysJob.Remark = field.NewString(tableName, "remark")
	_tSysJob.CreatedAt = field.NewTime(tableName, "created_at")
	_tSysJob.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tSysJob.DeletedAt = field.NewField(tableName, "deleted_at")

	_tSysJob.fillFieldMap()

	return _tSysJob
}

type tSysJob struct {
	tSysJobDo tSysJobDo

	ALL            field.Field
	JobId          field.Int64
	JobName        field.String
	JobParams      field.String
	JobGroup       field.String
	InvokeTarget   field.String
	CronExpression field.String
	MisfirePolicy  field.Int32
	Concurrent     field.Int32
	Status         field.Int32
	CreateBy       field.Int64
	UpdateBy       field.Int64
	Remark         field.String
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field

	fieldMap map[string]field.Expr
}

func (t tSysJob) Table(newTableName string) *tSysJob {
	t.tSysJobDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSysJob) As(alias string) *tSysJob {
	t.tSysJobDo.DO = *(t.tSysJobDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSysJob) updateTableName(table string) *tSysJob {
	t.ALL = field.NewField(table, "*")
	t.JobId = field.NewInt64(table, "job_id")
	t.JobName = field.NewString(table, "job_name")
	t.JobParams = field.NewString(table, "job_params")
	t.JobGroup = field.NewString(table, "job_group")
	t.InvokeTarget = field.NewString(table, "invoke_target")
	t.CronExpression = field.NewString(table, "cron_expression")
	t.MisfirePolicy = field.NewInt32(table, "misfire_policy")
	t.Concurrent = field.NewInt32(table, "concurrent")
	t.Status = field.NewInt32(table, "status")
	t.CreateBy = field.NewInt64(table, "create_by")
	t.UpdateBy = field.NewInt64(table, "update_by")
	t.Remark = field.NewString(table, "remark")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tSysJob) WithContext(ctx context.Context) *tSysJobDo { return t.tSysJobDo.WithContext(ctx) }

func (t tSysJob) TableName() string { return t.tSysJobDo.TableName() }

func (t tSysJob) Alias() string { return t.tSysJobDo.Alias() }

func (t *tSysJob) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSysJob) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 15)
	t.fieldMap["job_id"] = t.JobId
	t.fieldMap["job_name"] = t.JobName
	t.fieldMap["job_params"] = t.JobParams
	t.fieldMap["job_group"] = t.JobGroup
	t.fieldMap["invoke_target"] = t.InvokeTarget
	t.fieldMap["cron_expression"] = t.CronExpression
	t.fieldMap["misfire_policy"] = t.MisfirePolicy
	t.fieldMap["concurrent"] = t.Concurrent
	t.fieldMap["status"] = t.Status
	t.fieldMap["create_by"] = t.CreateBy
	t.fieldMap["update_by"] = t.UpdateBy
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tSysJob) clone(db *gorm.DB) tSysJob {
	t.tSysJobDo.ReplaceDB(db)
	return t
}

type tSysJobDo struct{ gen.DO }

func (t tSysJobDo) Debug() *tSysJobDo {
	return t.withDO(t.DO.Debug())
}

func (t tSysJobDo) WithContext(ctx context.Context) *tSysJobDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSysJobDo) Clauses(conds ...clause.Expression) *tSysJobDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSysJobDo) Returning(value interface{}, columns ...string) *tSysJobDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSysJobDo) Not(conds ...gen.Condition) *tSysJobDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSysJobDo) Or(conds ...gen.Condition) *tSysJobDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSysJobDo) Select(conds ...field.Expr) *tSysJobDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSysJobDo) Where(conds ...gen.Condition) *tSysJobDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSysJobDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tSysJobDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tSysJobDo) Order(conds ...field.Expr) *tSysJobDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSysJobDo) Distinct(cols ...field.Expr) *tSysJobDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSysJobDo) Omit(cols ...field.Expr) *tSysJobDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSysJobDo) Join(table schema.Tabler, on ...field.Expr) *tSysJobDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSysJobDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tSysJobDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSysJobDo) RightJoin(table schema.Tabler, on ...field.Expr) *tSysJobDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSysJobDo) Group(cols ...field.Expr) *tSysJobDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSysJobDo) Having(conds ...gen.Condition) *tSysJobDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSysJobDo) Limit(limit int) *tSysJobDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSysJobDo) Offset(offset int) *tSysJobDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSysJobDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tSysJobDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSysJobDo) Unscoped() *tSysJobDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSysJobDo) Create(values ...*model.TSysJob) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSysJobDo) CreateInBatches(values []*model.TSysJob, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSysJobDo) Save(values ...*model.TSysJob) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSysJobDo) First() (*model.TSysJob, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysJob), nil
	}
}

func (t tSysJobDo) Take() (*model.TSysJob, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysJob), nil
	}
}

func (t tSysJobDo) Last() (*model.TSysJob, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysJob), nil
	}
}

func (t tSysJobDo) Find() ([]*model.TSysJob, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSysJob), err
}

func (t tSysJobDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSysJob, err error) {
	buf := make([]*model.TSysJob, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSysJobDo) FindInBatches(result *[]*model.TSysJob, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSysJobDo) Attrs(attrs ...field.AssignExpr) *tSysJobDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSysJobDo) Assign(attrs ...field.AssignExpr) *tSysJobDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSysJobDo) Joins(field field.RelationField) *tSysJobDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tSysJobDo) Preload(field field.RelationField) *tSysJobDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tSysJobDo) FirstOrInit() (*model.TSysJob, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysJob), nil
	}
}

func (t tSysJobDo) FirstOrCreate() (*model.TSysJob, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysJob), nil
	}
}

func (t tSysJobDo) FindByPage(offset int, limit int) (result []*model.TSysJob, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSysJobDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tSysJobDo) withDO(do gen.Dao) *tSysJobDo {
	t.DO = *do.(*gen.DO)
	return t
}
