// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTDemoGen(db *gorm.DB) tDemoGen {
	_tDemoGen := tDemoGen{}

	_tDemoGen.tDemoGenDo.UseDB(db)
	_tDemoGen.tDemoGenDo.UseModel(&model.TDemoGen{})

	tableName := _tDemoGen.tDemoGenDo.TableName()
	_tDemoGen.ALL = field.NewField(tableName, "*")
	_tDemoGen.Id = field.NewInt32(tableName, "id")
	_tDemoGen.DemoName = field.NewString(tableName, "demo_name")
	_tDemoGen.DemoAge = field.NewInt32(tableName, "demo_age")
	_tDemoGen.Classes = field.NewString(tableName, "classes")
	_tDemoGen.DemoBorn = field.NewTime(tableName, "demo_born")
	_tDemoGen.TDemoGender = field.NewInt32(tableName, "t_demo_gender")
	_tDemoGen.CreatedAt = field.NewTime(tableName, "created_at")
	_tDemoGen.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tDemoGen.DeletedAt = field.NewField(tableName, "deleted_at")
	_tDemoGen.CreatedBy = field.NewInt64(tableName, "created_by")
	_tDemoGen.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tDemoGen.DemoStatus = field.NewInt32(tableName, "demo_status")
	_tDemoGen.DemoCate = field.NewString(tableName, "demo_cate")

	_tDemoGen.fillFieldMap()

	return _tDemoGen
}

type tDemoGen struct {
	tDemoGenDo tDemoGenDo

	ALL         field.Field
	Id          field.Int32
	DemoName    field.String
	DemoAge     field.Int32
	Classes     field.String
	DemoBorn    field.Time
	TDemoGender field.Int32
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	CreatedBy   field.Int64
	UpdatedBy   field.Int64
	DemoStatus  field.Int32
	DemoCate    field.String

	fieldMap map[string]field.Expr
}

func (t tDemoGen) Table(newTableName string) *tDemoGen {
	t.tDemoGenDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tDemoGen) As(alias string) *tDemoGen {
	t.tDemoGenDo.DO = *(t.tDemoGenDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tDemoGen) updateTableName(table string) *tDemoGen {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt32(table, "id")
	t.DemoName = field.NewString(table, "demo_name")
	t.DemoAge = field.NewInt32(table, "demo_age")
	t.Classes = field.NewString(table, "classes")
	t.DemoBorn = field.NewTime(table, "demo_born")
	t.TDemoGender = field.NewInt32(table, "t_demo_gender")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.DemoStatus = field.NewInt32(table, "demo_status")
	t.DemoCate = field.NewString(table, "demo_cate")

	t.fillFieldMap()

	return t
}

func (t *tDemoGen) WithContext(ctx context.Context) *tDemoGenDo { return t.tDemoGenDo.WithContext(ctx) }

func (t tDemoGen) TableName() string { return t.tDemoGenDo.TableName() }

func (t tDemoGen) Alias() string { return t.tDemoGenDo.Alias() }

func (t *tDemoGen) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tDemoGen) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.Id
	t.fieldMap["demo_name"] = t.DemoName
	t.fieldMap["demo_age"] = t.DemoAge
	t.fieldMap["classes"] = t.Classes
	t.fieldMap["demo_born"] = t.DemoBorn
	t.fieldMap["t_demo_gender"] = t.TDemoGender
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["demo_status"] = t.DemoStatus
	t.fieldMap["demo_cate"] = t.DemoCate
}

func (t tDemoGen) clone(db *gorm.DB) tDemoGen {
	t.tDemoGenDo.ReplaceDB(db)
	return t
}

type tDemoGenDo struct{ gen.DO }

func (t tDemoGenDo) Debug() *tDemoGenDo {
	return t.withDO(t.DO.Debug())
}

func (t tDemoGenDo) WithContext(ctx context.Context) *tDemoGenDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tDemoGenDo) Clauses(conds ...clause.Expression) *tDemoGenDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tDemoGenDo) Returning(value interface{}, columns ...string) *tDemoGenDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tDemoGenDo) Not(conds ...gen.Condition) *tDemoGenDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tDemoGenDo) Or(conds ...gen.Condition) *tDemoGenDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tDemoGenDo) Select(conds ...field.Expr) *tDemoGenDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tDemoGenDo) Where(conds ...gen.Condition) *tDemoGenDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tDemoGenDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tDemoGenDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tDemoGenDo) Order(conds ...field.Expr) *tDemoGenDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tDemoGenDo) Distinct(cols ...field.Expr) *tDemoGenDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tDemoGenDo) Omit(cols ...field.Expr) *tDemoGenDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tDemoGenDo) Join(table schema.Tabler, on ...field.Expr) *tDemoGenDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tDemoGenDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tDemoGenDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tDemoGenDo) RightJoin(table schema.Tabler, on ...field.Expr) *tDemoGenDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tDemoGenDo) Group(cols ...field.Expr) *tDemoGenDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tDemoGenDo) Having(conds ...gen.Condition) *tDemoGenDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tDemoGenDo) Limit(limit int) *tDemoGenDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tDemoGenDo) Offset(offset int) *tDemoGenDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tDemoGenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tDemoGenDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tDemoGenDo) Unscoped() *tDemoGenDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tDemoGenDo) Create(values ...*model.TDemoGen) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tDemoGenDo) CreateInBatches(values []*model.TDemoGen, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tDemoGenDo) Save(values ...*model.TDemoGen) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tDemoGenDo) First() (*model.TDemoGen, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDemoGen), nil
	}
}

func (t tDemoGenDo) Take() (*model.TDemoGen, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDemoGen), nil
	}
}

func (t tDemoGenDo) Last() (*model.TDemoGen, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDemoGen), nil
	}
}

func (t tDemoGenDo) Find() ([]*model.TDemoGen, error) {
	result, err := t.DO.Find()
	return result.([]*model.TDemoGen), err
}

func (t tDemoGenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TDemoGen, err error) {
	buf := make([]*model.TDemoGen, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tDemoGenDo) FindInBatches(result *[]*model.TDemoGen, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tDemoGenDo) Attrs(attrs ...field.AssignExpr) *tDemoGenDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tDemoGenDo) Assign(attrs ...field.AssignExpr) *tDemoGenDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tDemoGenDo) Joins(field field.RelationField) *tDemoGenDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tDemoGenDo) Preload(field field.RelationField) *tDemoGenDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tDemoGenDo) FirstOrInit() (*model.TDemoGen, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDemoGen), nil
	}
}

func (t tDemoGenDo) FirstOrCreate() (*model.TDemoGen, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TDemoGen), nil
	}
}

func (t tDemoGenDo) FindByPage(offset int, limit int) (result []*model.TDemoGen, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tDemoGenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tDemoGenDo) withDO(do gen.Dao) *tDemoGenDo {
	t.DO = *do.(*gen.DO)
	return t
}
