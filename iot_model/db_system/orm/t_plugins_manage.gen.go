// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTPluginsManage(db *gorm.DB) tPluginsManage {
	_tPluginsManage := tPluginsManage{}

	_tPluginsManage.tPluginsManageDo.UseDB(db)
	_tPluginsManage.tPluginsManageDo.UseModel(&model.TPluginsManage{})

	tableName := _tPluginsManage.tPluginsManageDo.TableName()
	_tPluginsManage.ALL = field.NewField(tableName, "*")
	_tPluginsManage.Id = field.NewInt32(tableName, "id")
	_tPluginsManage.StoreId = field.NewInt32(tableName, "store_id")
	_tPluginsManage.PName = field.NewString(tableName, "p_name")
	_tPluginsManage.PTitle = field.NewString(tableName, "p_title")
	_tPluginsManage.PDescription = field.NewString(tableName, "p_description")
	_tPluginsManage.PAuth = field.NewString(tableName, "p_auth")
	_tPluginsManage.IsInstall = field.NewInt32(tableName, "is_install")
	_tPluginsManage.Status = field.NewInt32(tableName, "status")
	_tPluginsManage.Version = field.NewString(tableName, "version")
	_tPluginsManage.Price = field.NewInt32(tableName, "price")
	_tPluginsManage.DownloadTimes = field.NewInt32(tableName, "download_times")
	_tPluginsManage.InstallPath = field.NewString(tableName, "install_path")

	_tPluginsManage.fillFieldMap()

	return _tPluginsManage
}

type tPluginsManage struct {
	tPluginsManageDo tPluginsManageDo

	ALL           field.Field
	Id            field.Int32
	StoreId       field.Int32
	PName         field.String
	PTitle        field.String
	PDescription  field.String
	PAuth         field.String
	IsInstall     field.Int32
	Status        field.Int32
	Version       field.String
	Price         field.Int32
	DownloadTimes field.Int32
	InstallPath   field.String

	fieldMap map[string]field.Expr
}

func (t tPluginsManage) Table(newTableName string) *tPluginsManage {
	t.tPluginsManageDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPluginsManage) As(alias string) *tPluginsManage {
	t.tPluginsManageDo.DO = *(t.tPluginsManageDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tPluginsManage) updateTableName(table string) *tPluginsManage {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt32(table, "id")
	t.StoreId = field.NewInt32(table, "store_id")
	t.PName = field.NewString(table, "p_name")
	t.PTitle = field.NewString(table, "p_title")
	t.PDescription = field.NewString(table, "p_description")
	t.PAuth = field.NewString(table, "p_auth")
	t.IsInstall = field.NewInt32(table, "is_install")
	t.Status = field.NewInt32(table, "status")
	t.Version = field.NewString(table, "version")
	t.Price = field.NewInt32(table, "price")
	t.DownloadTimes = field.NewInt32(table, "download_times")
	t.InstallPath = field.NewString(table, "install_path")

	t.fillFieldMap()

	return t
}

func (t *tPluginsManage) WithContext(ctx context.Context) *tPluginsManageDo {
	return t.tPluginsManageDo.WithContext(ctx)
}

func (t tPluginsManage) TableName() string { return t.tPluginsManageDo.TableName() }

func (t tPluginsManage) Alias() string { return t.tPluginsManageDo.Alias() }

func (t *tPluginsManage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPluginsManage) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.Id
	t.fieldMap["store_id"] = t.StoreId
	t.fieldMap["p_name"] = t.PName
	t.fieldMap["p_title"] = t.PTitle
	t.fieldMap["p_description"] = t.PDescription
	t.fieldMap["p_auth"] = t.PAuth
	t.fieldMap["is_install"] = t.IsInstall
	t.fieldMap["status"] = t.Status
	t.fieldMap["version"] = t.Version
	t.fieldMap["price"] = t.Price
	t.fieldMap["download_times"] = t.DownloadTimes
	t.fieldMap["install_path"] = t.InstallPath
}

func (t tPluginsManage) clone(db *gorm.DB) tPluginsManage {
	t.tPluginsManageDo.ReplaceDB(db)
	return t
}

type tPluginsManageDo struct{ gen.DO }

func (t tPluginsManageDo) Debug() *tPluginsManageDo {
	return t.withDO(t.DO.Debug())
}

func (t tPluginsManageDo) WithContext(ctx context.Context) *tPluginsManageDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPluginsManageDo) Clauses(conds ...clause.Expression) *tPluginsManageDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPluginsManageDo) Returning(value interface{}, columns ...string) *tPluginsManageDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPluginsManageDo) Not(conds ...gen.Condition) *tPluginsManageDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPluginsManageDo) Or(conds ...gen.Condition) *tPluginsManageDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPluginsManageDo) Select(conds ...field.Expr) *tPluginsManageDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPluginsManageDo) Where(conds ...gen.Condition) *tPluginsManageDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPluginsManageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tPluginsManageDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tPluginsManageDo) Order(conds ...field.Expr) *tPluginsManageDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPluginsManageDo) Distinct(cols ...field.Expr) *tPluginsManageDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPluginsManageDo) Omit(cols ...field.Expr) *tPluginsManageDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPluginsManageDo) Join(table schema.Tabler, on ...field.Expr) *tPluginsManageDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPluginsManageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tPluginsManageDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPluginsManageDo) RightJoin(table schema.Tabler, on ...field.Expr) *tPluginsManageDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPluginsManageDo) Group(cols ...field.Expr) *tPluginsManageDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPluginsManageDo) Having(conds ...gen.Condition) *tPluginsManageDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPluginsManageDo) Limit(limit int) *tPluginsManageDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPluginsManageDo) Offset(offset int) *tPluginsManageDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPluginsManageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tPluginsManageDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPluginsManageDo) Unscoped() *tPluginsManageDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPluginsManageDo) Create(values ...*model.TPluginsManage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPluginsManageDo) CreateInBatches(values []*model.TPluginsManage, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPluginsManageDo) Save(values ...*model.TPluginsManage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPluginsManageDo) First() (*model.TPluginsManage, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPluginsManage), nil
	}
}

func (t tPluginsManageDo) Take() (*model.TPluginsManage, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPluginsManage), nil
	}
}

func (t tPluginsManageDo) Last() (*model.TPluginsManage, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPluginsManage), nil
	}
}

func (t tPluginsManageDo) Find() ([]*model.TPluginsManage, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPluginsManage), err
}

func (t tPluginsManageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPluginsManage, err error) {
	buf := make([]*model.TPluginsManage, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPluginsManageDo) FindInBatches(result *[]*model.TPluginsManage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPluginsManageDo) Attrs(attrs ...field.AssignExpr) *tPluginsManageDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPluginsManageDo) Assign(attrs ...field.AssignExpr) *tPluginsManageDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPluginsManageDo) Joins(field field.RelationField) *tPluginsManageDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tPluginsManageDo) Preload(field field.RelationField) *tPluginsManageDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tPluginsManageDo) FirstOrInit() (*model.TPluginsManage, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPluginsManage), nil
	}
}

func (t tPluginsManageDo) FirstOrCreate() (*model.TPluginsManage, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPluginsManage), nil
	}
}

func (t tPluginsManageDo) FindByPage(offset int, limit int) (result []*model.TPluginsManage, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPluginsManageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tPluginsManageDo) withDO(do gen.Dao) *tPluginsManageDo {
	t.DO = *do.(*gen.DO)
	return t
}
