// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTToolsGenTableColumn(db *gorm.DB) tToolsGenTableColumn {
	_tToolsGenTableColumn := tToolsGenTableColumn{}

	_tToolsGenTableColumn.tToolsGenTableColumnDo.UseDB(db)
	_tToolsGenTableColumn.tToolsGenTableColumnDo.UseModel(&model.TToolsGenTableColumn{})

	tableName := _tToolsGenTableColumn.tToolsGenTableColumnDo.TableName()
	_tToolsGenTableColumn.ALL = field.NewField(tableName, "*")
	_tToolsGenTableColumn.ColumnId = field.NewInt64(tableName, "column_id")
	_tToolsGenTableColumn.TableId = field.NewInt64(tableName, "table_id")
	_tToolsGenTableColumn.ColumnName = field.NewString(tableName, "column_name")
	_tToolsGenTableColumn.ColumnComment = field.NewString(tableName, "column_comment")
	_tToolsGenTableColumn.ColumnType = field.NewString(tableName, "column_type")
	_tToolsGenTableColumn.GoType = field.NewString(tableName, "go_type")
	_tToolsGenTableColumn.GoField = field.NewString(tableName, "go_field")
	_tToolsGenTableColumn.HtmlField = field.NewString(tableName, "html_field")
	_tToolsGenTableColumn.IsPk = field.NewString(tableName, "is_pk")
	_tToolsGenTableColumn.IsIncrement = field.NewString(tableName, "is_increment")
	_tToolsGenTableColumn.IsRequired = field.NewString(tableName, "is_required")
	_tToolsGenTableColumn.IsInsert = field.NewString(tableName, "is_insert")
	_tToolsGenTableColumn.IsEdit = field.NewString(tableName, "is_edit")
	_tToolsGenTableColumn.IsList = field.NewString(tableName, "is_list")
	_tToolsGenTableColumn.IsQuery = field.NewString(tableName, "is_query")
	_tToolsGenTableColumn.QueryType = field.NewString(tableName, "query_type")
	_tToolsGenTableColumn.HtmlType = field.NewString(tableName, "html_type")
	_tToolsGenTableColumn.DictType = field.NewString(tableName, "dict_type")
	_tToolsGenTableColumn.Sort = field.NewInt32(tableName, "sort")
	_tToolsGenTableColumn.LinkTableName = field.NewString(tableName, "link_table_name")
	_tToolsGenTableColumn.LinkTableClass = field.NewString(tableName, "link_table_class")
	_tToolsGenTableColumn.LinkTablePackage = field.NewString(tableName, "link_table_package")
	_tToolsGenTableColumn.LinkLabelId = field.NewString(tableName, "link_label_id")
	_tToolsGenTableColumn.LinkLabelName = field.NewString(tableName, "link_label_name")

	_tToolsGenTableColumn.fillFieldMap()

	return _tToolsGenTableColumn
}

type tToolsGenTableColumn struct {
	tToolsGenTableColumnDo tToolsGenTableColumnDo

	ALL              field.Field
	ColumnId         field.Int64
	TableId          field.Int64
	ColumnName       field.String
	ColumnComment    field.String
	ColumnType       field.String
	GoType           field.String
	GoField          field.String
	HtmlField        field.String
	IsPk             field.String
	IsIncrement      field.String
	IsRequired       field.String
	IsInsert         field.String
	IsEdit           field.String
	IsList           field.String
	IsQuery          field.String
	QueryType        field.String
	HtmlType         field.String
	DictType         field.String
	Sort             field.Int32
	LinkTableName    field.String
	LinkTableClass   field.String
	LinkTablePackage field.String
	LinkLabelId      field.String
	LinkLabelName    field.String

	fieldMap map[string]field.Expr
}

func (t tToolsGenTableColumn) Table(newTableName string) *tToolsGenTableColumn {
	t.tToolsGenTableColumnDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tToolsGenTableColumn) As(alias string) *tToolsGenTableColumn {
	t.tToolsGenTableColumnDo.DO = *(t.tToolsGenTableColumnDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tToolsGenTableColumn) updateTableName(table string) *tToolsGenTableColumn {
	t.ALL = field.NewField(table, "*")
	t.ColumnId = field.NewInt64(table, "column_id")
	t.TableId = field.NewInt64(table, "table_id")
	t.ColumnName = field.NewString(table, "column_name")
	t.ColumnComment = field.NewString(table, "column_comment")
	t.ColumnType = field.NewString(table, "column_type")
	t.GoType = field.NewString(table, "go_type")
	t.GoField = field.NewString(table, "go_field")
	t.HtmlField = field.NewString(table, "html_field")
	t.IsPk = field.NewString(table, "is_pk")
	t.IsIncrement = field.NewString(table, "is_increment")
	t.IsRequired = field.NewString(table, "is_required")
	t.IsInsert = field.NewString(table, "is_insert")
	t.IsEdit = field.NewString(table, "is_edit")
	t.IsList = field.NewString(table, "is_list")
	t.IsQuery = field.NewString(table, "is_query")
	t.QueryType = field.NewString(table, "query_type")
	t.HtmlType = field.NewString(table, "html_type")
	t.DictType = field.NewString(table, "dict_type")
	t.Sort = field.NewInt32(table, "sort")
	t.LinkTableName = field.NewString(table, "link_table_name")
	t.LinkTableClass = field.NewString(table, "link_table_class")
	t.LinkTablePackage = field.NewString(table, "link_table_package")
	t.LinkLabelId = field.NewString(table, "link_label_id")
	t.LinkLabelName = field.NewString(table, "link_label_name")

	t.fillFieldMap()

	return t
}

func (t *tToolsGenTableColumn) WithContext(ctx context.Context) *tToolsGenTableColumnDo {
	return t.tToolsGenTableColumnDo.WithContext(ctx)
}

func (t tToolsGenTableColumn) TableName() string { return t.tToolsGenTableColumnDo.TableName() }

func (t tToolsGenTableColumn) Alias() string { return t.tToolsGenTableColumnDo.Alias() }

func (t *tToolsGenTableColumn) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tToolsGenTableColumn) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 24)
	t.fieldMap["column_id"] = t.ColumnId
	t.fieldMap["table_id"] = t.TableId
	t.fieldMap["column_name"] = t.ColumnName
	t.fieldMap["column_comment"] = t.ColumnComment
	t.fieldMap["column_type"] = t.ColumnType
	t.fieldMap["go_type"] = t.GoType
	t.fieldMap["go_field"] = t.GoField
	t.fieldMap["html_field"] = t.HtmlField
	t.fieldMap["is_pk"] = t.IsPk
	t.fieldMap["is_increment"] = t.IsIncrement
	t.fieldMap["is_required"] = t.IsRequired
	t.fieldMap["is_insert"] = t.IsInsert
	t.fieldMap["is_edit"] = t.IsEdit
	t.fieldMap["is_list"] = t.IsList
	t.fieldMap["is_query"] = t.IsQuery
	t.fieldMap["query_type"] = t.QueryType
	t.fieldMap["html_type"] = t.HtmlType
	t.fieldMap["dict_type"] = t.DictType
	t.fieldMap["sort"] = t.Sort
	t.fieldMap["link_table_name"] = t.LinkTableName
	t.fieldMap["link_table_class"] = t.LinkTableClass
	t.fieldMap["link_table_package"] = t.LinkTablePackage
	t.fieldMap["link_label_id"] = t.LinkLabelId
	t.fieldMap["link_label_name"] = t.LinkLabelName
}

func (t tToolsGenTableColumn) clone(db *gorm.DB) tToolsGenTableColumn {
	t.tToolsGenTableColumnDo.ReplaceDB(db)
	return t
}

type tToolsGenTableColumnDo struct{ gen.DO }

func (t tToolsGenTableColumnDo) Debug() *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Debug())
}

func (t tToolsGenTableColumnDo) WithContext(ctx context.Context) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tToolsGenTableColumnDo) Clauses(conds ...clause.Expression) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tToolsGenTableColumnDo) Returning(value interface{}, columns ...string) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tToolsGenTableColumnDo) Not(conds ...gen.Condition) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tToolsGenTableColumnDo) Or(conds ...gen.Condition) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tToolsGenTableColumnDo) Select(conds ...field.Expr) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tToolsGenTableColumnDo) Where(conds ...gen.Condition) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tToolsGenTableColumnDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tToolsGenTableColumnDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tToolsGenTableColumnDo) Order(conds ...field.Expr) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tToolsGenTableColumnDo) Distinct(cols ...field.Expr) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tToolsGenTableColumnDo) Omit(cols ...field.Expr) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tToolsGenTableColumnDo) Join(table schema.Tabler, on ...field.Expr) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tToolsGenTableColumnDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tToolsGenTableColumnDo) RightJoin(table schema.Tabler, on ...field.Expr) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tToolsGenTableColumnDo) Group(cols ...field.Expr) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tToolsGenTableColumnDo) Having(conds ...gen.Condition) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tToolsGenTableColumnDo) Limit(limit int) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tToolsGenTableColumnDo) Offset(offset int) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tToolsGenTableColumnDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tToolsGenTableColumnDo) Unscoped() *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tToolsGenTableColumnDo) Create(values ...*model.TToolsGenTableColumn) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tToolsGenTableColumnDo) CreateInBatches(values []*model.TToolsGenTableColumn, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tToolsGenTableColumnDo) Save(values ...*model.TToolsGenTableColumn) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tToolsGenTableColumnDo) First() (*model.TToolsGenTableColumn, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TToolsGenTableColumn), nil
	}
}

func (t tToolsGenTableColumnDo) Take() (*model.TToolsGenTableColumn, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TToolsGenTableColumn), nil
	}
}

func (t tToolsGenTableColumnDo) Last() (*model.TToolsGenTableColumn, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TToolsGenTableColumn), nil
	}
}

func (t tToolsGenTableColumnDo) Find() ([]*model.TToolsGenTableColumn, error) {
	result, err := t.DO.Find()
	return result.([]*model.TToolsGenTableColumn), err
}

func (t tToolsGenTableColumnDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TToolsGenTableColumn, err error) {
	buf := make([]*model.TToolsGenTableColumn, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tToolsGenTableColumnDo) FindInBatches(result *[]*model.TToolsGenTableColumn, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tToolsGenTableColumnDo) Attrs(attrs ...field.AssignExpr) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tToolsGenTableColumnDo) Assign(attrs ...field.AssignExpr) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tToolsGenTableColumnDo) Joins(field field.RelationField) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tToolsGenTableColumnDo) Preload(field field.RelationField) *tToolsGenTableColumnDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tToolsGenTableColumnDo) FirstOrInit() (*model.TToolsGenTableColumn, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TToolsGenTableColumn), nil
	}
}

func (t tToolsGenTableColumnDo) FirstOrCreate() (*model.TToolsGenTableColumn, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TToolsGenTableColumn), nil
	}
}

func (t tToolsGenTableColumnDo) FindByPage(offset int, limit int) (result []*model.TToolsGenTableColumn, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tToolsGenTableColumnDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tToolsGenTableColumnDo) withDO(do gen.Dao) *tToolsGenTableColumnDo {
	t.DO = *do.(*gen.DO)
	return t
}
