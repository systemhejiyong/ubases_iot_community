// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTSysDictData(db *gorm.DB) tSysDictData {
	_tSysDictData := tSysDictData{}

	_tSysDictData.tSysDictDataDo.UseDB(db)
	_tSysDictData.tSysDictDataDo.UseModel(&model.TSysDictData{})

	tableName := _tSysDictData.tSysDictDataDo.TableName()
	_tSysDictData.ALL = field.NewField(tableName, "*")
	_tSysDictData.DictCode = field.NewInt64(tableName, "dict_code")
	_tSysDictData.DictSort = field.NewInt32(tableName, "dict_sort")
	_tSysDictData.DictLabel = field.NewString(tableName, "dict_label")
	_tSysDictData.DictValue = field.NewString(tableName, "dict_value")
	_tSysDictData.DictType = field.NewString(tableName, "dict_type")
	_tSysDictData.CssClass = field.NewString(tableName, "css_class")
	_tSysDictData.ListClass = field.NewString(tableName, "list_class")
	_tSysDictData.IsDefault = field.NewInt32(tableName, "is_default")
	_tSysDictData.Status = field.NewInt32(tableName, "status")
	_tSysDictData.CreateBy = field.NewInt64(tableName, "create_by")
	_tSysDictData.UpdateBy = field.NewInt64(tableName, "update_by")
	_tSysDictData.Remark = field.NewString(tableName, "remark")
	_tSysDictData.CreatedAt = field.NewTime(tableName, "created_at")
	_tSysDictData.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tSysDictData.DeletedAt = field.NewField(tableName, "deleted_at")

	_tSysDictData.fillFieldMap()

	return _tSysDictData
}

type tSysDictData struct {
	tSysDictDataDo tSysDictDataDo

	ALL       field.Field
	DictCode  field.Int64
	DictSort  field.Int32
	DictLabel field.String
	DictValue field.String
	DictType  field.String
	CssClass  field.String
	ListClass field.String
	IsDefault field.Int32
	Status    field.Int32
	CreateBy  field.Int64
	UpdateBy  field.Int64
	Remark    field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (t tSysDictData) Table(newTableName string) *tSysDictData {
	t.tSysDictDataDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSysDictData) As(alias string) *tSysDictData {
	t.tSysDictDataDo.DO = *(t.tSysDictDataDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSysDictData) updateTableName(table string) *tSysDictData {
	t.ALL = field.NewField(table, "*")
	t.DictCode = field.NewInt64(table, "dict_code")
	t.DictSort = field.NewInt32(table, "dict_sort")
	t.DictLabel = field.NewString(table, "dict_label")
	t.DictValue = field.NewString(table, "dict_value")
	t.DictType = field.NewString(table, "dict_type")
	t.CssClass = field.NewString(table, "css_class")
	t.ListClass = field.NewString(table, "list_class")
	t.IsDefault = field.NewInt32(table, "is_default")
	t.Status = field.NewInt32(table, "status")
	t.CreateBy = field.NewInt64(table, "create_by")
	t.UpdateBy = field.NewInt64(table, "update_by")
	t.Remark = field.NewString(table, "remark")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tSysDictData) WithContext(ctx context.Context) *tSysDictDataDo {
	return t.tSysDictDataDo.WithContext(ctx)
}

func (t tSysDictData) TableName() string { return t.tSysDictDataDo.TableName() }

func (t tSysDictData) Alias() string { return t.tSysDictDataDo.Alias() }

func (t *tSysDictData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSysDictData) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 15)
	t.fieldMap["dict_code"] = t.DictCode
	t.fieldMap["dict_sort"] = t.DictSort
	t.fieldMap["dict_label"] = t.DictLabel
	t.fieldMap["dict_value"] = t.DictValue
	t.fieldMap["dict_type"] = t.DictType
	t.fieldMap["css_class"] = t.CssClass
	t.fieldMap["list_class"] = t.ListClass
	t.fieldMap["is_default"] = t.IsDefault
	t.fieldMap["status"] = t.Status
	t.fieldMap["create_by"] = t.CreateBy
	t.fieldMap["update_by"] = t.UpdateBy
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tSysDictData) clone(db *gorm.DB) tSysDictData {
	t.tSysDictDataDo.ReplaceDB(db)
	return t
}

type tSysDictDataDo struct{ gen.DO }

func (t tSysDictDataDo) Debug() *tSysDictDataDo {
	return t.withDO(t.DO.Debug())
}

func (t tSysDictDataDo) WithContext(ctx context.Context) *tSysDictDataDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSysDictDataDo) Clauses(conds ...clause.Expression) *tSysDictDataDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSysDictDataDo) Returning(value interface{}, columns ...string) *tSysDictDataDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSysDictDataDo) Not(conds ...gen.Condition) *tSysDictDataDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSysDictDataDo) Or(conds ...gen.Condition) *tSysDictDataDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSysDictDataDo) Select(conds ...field.Expr) *tSysDictDataDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSysDictDataDo) Where(conds ...gen.Condition) *tSysDictDataDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSysDictDataDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tSysDictDataDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tSysDictDataDo) Order(conds ...field.Expr) *tSysDictDataDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSysDictDataDo) Distinct(cols ...field.Expr) *tSysDictDataDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSysDictDataDo) Omit(cols ...field.Expr) *tSysDictDataDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSysDictDataDo) Join(table schema.Tabler, on ...field.Expr) *tSysDictDataDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSysDictDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tSysDictDataDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSysDictDataDo) RightJoin(table schema.Tabler, on ...field.Expr) *tSysDictDataDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSysDictDataDo) Group(cols ...field.Expr) *tSysDictDataDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSysDictDataDo) Having(conds ...gen.Condition) *tSysDictDataDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSysDictDataDo) Limit(limit int) *tSysDictDataDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSysDictDataDo) Offset(offset int) *tSysDictDataDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSysDictDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tSysDictDataDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSysDictDataDo) Unscoped() *tSysDictDataDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSysDictDataDo) Create(values ...*model.TSysDictData) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSysDictDataDo) CreateInBatches(values []*model.TSysDictData, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSysDictDataDo) Save(values ...*model.TSysDictData) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSysDictDataDo) First() (*model.TSysDictData, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysDictData), nil
	}
}

func (t tSysDictDataDo) Take() (*model.TSysDictData, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysDictData), nil
	}
}

func (t tSysDictDataDo) Last() (*model.TSysDictData, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysDictData), nil
	}
}

func (t tSysDictDataDo) Find() ([]*model.TSysDictData, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSysDictData), err
}

func (t tSysDictDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSysDictData, err error) {
	buf := make([]*model.TSysDictData, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSysDictDataDo) FindInBatches(result *[]*model.TSysDictData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSysDictDataDo) Attrs(attrs ...field.AssignExpr) *tSysDictDataDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSysDictDataDo) Assign(attrs ...field.AssignExpr) *tSysDictDataDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSysDictDataDo) Joins(field field.RelationField) *tSysDictDataDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tSysDictDataDo) Preload(field field.RelationField) *tSysDictDataDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tSysDictDataDo) FirstOrInit() (*model.TSysDictData, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysDictData), nil
	}
}

func (t tSysDictDataDo) FirstOrCreate() (*model.TSysDictData, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysDictData), nil
	}
}

func (t tSysDictDataDo) FindByPage(offset int, limit int) (result []*model.TSysDictData, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSysDictDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tSysDictDataDo) withDO(do gen.Dao) *tSysDictDataDo {
	t.DO = *do.(*gen.DO)
	return t
}
