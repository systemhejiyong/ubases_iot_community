// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		TDemoDataAuth:        newTDemoDataAuth(db),
		TDemoGen:             newTDemoGen(db),
		TDemoGenClass:        newTDemoGenClass(db),
		TDemoGenTree:         newTDemoGenTree(db),
		TOpenCompany:         newTOpenCompany(db),
		TOpenUser:            newTOpenUser(db),
		TPluginsManage:       newTPluginsManage(db),
		TSysApis:             newTSysApis(db),
		TSysAppDocDir:        newTSysAppDocDir(db),
		TSysAppEntry:         newTSysAppEntry(db),
		TSysAppEntrySeting:   newTSysAppEntrySeting(db),
		TSysAppHelpCenter:    newTSysAppHelpCenter(db),
		TSysAttachment:       newTSysAttachment(db),
		TSysAuthRule:         newTSysAuthRule(db),
		TSysCasbinRule:       newTSysCasbinRule(db),
		TSysCasbinRuleBak:    newTSysCasbinRuleBak(db),
		TSysConfig:           newTSysConfig(db),
		TSysDept:             newTSysDept(db),
		TSysDictData:         newTSysDictData(db),
		TSysDictType:         newTSysDictType(db),
		TSysJob:              newTSysJob(db),
		TSysLoginLog:         newTSysLoginLog(db),
		TSysModelInfo:        newTSysModelInfo(db),
		TSysOperLog:          newTSysOperLog(db),
		TSysPlatform:         newTSysPlatform(db),
		TSysPost:             newTSysPost(db),
		TSysRole:             newTSysRole(db),
		TSysRoleDept:         newTSysRoleDept(db),
		TSysUser:             newTSysUser(db),
		TSysUserOnline:       newTSysUserOnline(db),
		TSysUserPost:         newTSysUserPost(db),
		TSysWebSet:           newTSysWebSet(db),
		TToolsGenTable:       newTToolsGenTable(db),
		TToolsGenTableColumn: newTToolsGenTableColumn(db),
	}
}

type Query struct {
	db *gorm.DB

	TDemoDataAuth        tDemoDataAuth
	TDemoGen             tDemoGen
	TDemoGenClass        tDemoGenClass
	TDemoGenTree         tDemoGenTree
	TOpenCompany         tOpenCompany
	TOpenUser            tOpenUser
	TPluginsManage       tPluginsManage
	TSysApis             tSysApis
	TSysAppDocDir        tSysAppDocDir
	TSysAppEntry         tSysAppEntry
	TSysAppEntrySeting   tSysAppEntrySeting
	TSysAppHelpCenter    tSysAppHelpCenter
	TSysAttachment       tSysAttachment
	TSysAuthRule         tSysAuthRule
	TSysCasbinRule       tSysCasbinRule
	TSysCasbinRuleBak    tSysCasbinRuleBak
	TSysConfig           tSysConfig
	TSysDept             tSysDept
	TSysDictData         tSysDictData
	TSysDictType         tSysDictType
	TSysJob              tSysJob
	TSysLoginLog         tSysLoginLog
	TSysModelInfo        tSysModelInfo
	TSysOperLog          tSysOperLog
	TSysPlatform         tSysPlatform
	TSysPost             tSysPost
	TSysRole             tSysRole
	TSysRoleDept         tSysRoleDept
	TSysUser             tSysUser
	TSysUserOnline       tSysUserOnline
	TSysUserPost         tSysUserPost
	TSysWebSet           tSysWebSet
	TToolsGenTable       tToolsGenTable
	TToolsGenTableColumn tToolsGenTableColumn
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		TDemoDataAuth:        q.TDemoDataAuth.clone(db),
		TDemoGen:             q.TDemoGen.clone(db),
		TDemoGenClass:        q.TDemoGenClass.clone(db),
		TDemoGenTree:         q.TDemoGenTree.clone(db),
		TOpenCompany:         q.TOpenCompany.clone(db),
		TOpenUser:            q.TOpenUser.clone(db),
		TPluginsManage:       q.TPluginsManage.clone(db),
		TSysApis:             q.TSysApis.clone(db),
		TSysAppDocDir:        q.TSysAppDocDir.clone(db),
		TSysAppEntry:         q.TSysAppEntry.clone(db),
		TSysAppEntrySeting:   q.TSysAppEntrySeting.clone(db),
		TSysAppHelpCenter:    q.TSysAppHelpCenter.clone(db),
		TSysAttachment:       q.TSysAttachment.clone(db),
		TSysAuthRule:         q.TSysAuthRule.clone(db),
		TSysCasbinRule:       q.TSysCasbinRule.clone(db),
		TSysCasbinRuleBak:    q.TSysCasbinRuleBak.clone(db),
		TSysConfig:           q.TSysConfig.clone(db),
		TSysDept:             q.TSysDept.clone(db),
		TSysDictData:         q.TSysDictData.clone(db),
		TSysDictType:         q.TSysDictType.clone(db),
		TSysJob:              q.TSysJob.clone(db),
		TSysLoginLog:         q.TSysLoginLog.clone(db),
		TSysModelInfo:        q.TSysModelInfo.clone(db),
		TSysOperLog:          q.TSysOperLog.clone(db),
		TSysPlatform:         q.TSysPlatform.clone(db),
		TSysPost:             q.TSysPost.clone(db),
		TSysRole:             q.TSysRole.clone(db),
		TSysRoleDept:         q.TSysRoleDept.clone(db),
		TSysUser:             q.TSysUser.clone(db),
		TSysUserOnline:       q.TSysUserOnline.clone(db),
		TSysUserPost:         q.TSysUserPost.clone(db),
		TSysWebSet:           q.TSysWebSet.clone(db),
		TToolsGenTable:       q.TToolsGenTable.clone(db),
		TToolsGenTableColumn: q.TToolsGenTableColumn.clone(db),
	}
}

type queryCtx struct {
	TDemoDataAuth        tDemoDataAuthDo
	TDemoGen             tDemoGenDo
	TDemoGenClass        tDemoGenClassDo
	TDemoGenTree         tDemoGenTreeDo
	TOpenCompany         tOpenCompanyDo
	TOpenUser            tOpenUserDo
	TPluginsManage       tPluginsManageDo
	TSysApis             tSysApisDo
	TSysAppDocDir        tSysAppDocDirDo
	TSysAppEntry         tSysAppEntryDo
	TSysAppEntrySeting   tSysAppEntrySetingDo
	TSysAppHelpCenter    tSysAppHelpCenterDo
	TSysAttachment       tSysAttachmentDo
	TSysAuthRule         tSysAuthRuleDo
	TSysCasbinRule       tSysCasbinRuleDo
	TSysCasbinRuleBak    tSysCasbinRuleBakDo
	TSysConfig           tSysConfigDo
	TSysDept             tSysDeptDo
	TSysDictData         tSysDictDataDo
	TSysDictType         tSysDictTypeDo
	TSysJob              tSysJobDo
	TSysLoginLog         tSysLoginLogDo
	TSysModelInfo        tSysModelInfoDo
	TSysOperLog          tSysOperLogDo
	TSysPlatform         tSysPlatformDo
	TSysPost             tSysPostDo
	TSysRole             tSysRoleDo
	TSysRoleDept         tSysRoleDeptDo
	TSysUser             tSysUserDo
	TSysUserOnline       tSysUserOnlineDo
	TSysUserPost         tSysUserPostDo
	TSysWebSet           tSysWebSetDo
	TToolsGenTable       tToolsGenTableDo
	TToolsGenTableColumn tToolsGenTableColumnDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		TDemoDataAuth:        *q.TDemoDataAuth.WithContext(ctx),
		TDemoGen:             *q.TDemoGen.WithContext(ctx),
		TDemoGenClass:        *q.TDemoGenClass.WithContext(ctx),
		TDemoGenTree:         *q.TDemoGenTree.WithContext(ctx),
		TOpenCompany:         *q.TOpenCompany.WithContext(ctx),
		TOpenUser:            *q.TOpenUser.WithContext(ctx),
		TPluginsManage:       *q.TPluginsManage.WithContext(ctx),
		TSysApis:             *q.TSysApis.WithContext(ctx),
		TSysAppDocDir:        *q.TSysAppDocDir.WithContext(ctx),
		TSysAppEntry:         *q.TSysAppEntry.WithContext(ctx),
		TSysAppEntrySeting:   *q.TSysAppEntrySeting.WithContext(ctx),
		TSysAppHelpCenter:    *q.TSysAppHelpCenter.WithContext(ctx),
		TSysAttachment:       *q.TSysAttachment.WithContext(ctx),
		TSysAuthRule:         *q.TSysAuthRule.WithContext(ctx),
		TSysCasbinRule:       *q.TSysCasbinRule.WithContext(ctx),
		TSysCasbinRuleBak:    *q.TSysCasbinRuleBak.WithContext(ctx),
		TSysConfig:           *q.TSysConfig.WithContext(ctx),
		TSysDept:             *q.TSysDept.WithContext(ctx),
		TSysDictData:         *q.TSysDictData.WithContext(ctx),
		TSysDictType:         *q.TSysDictType.WithContext(ctx),
		TSysJob:              *q.TSysJob.WithContext(ctx),
		TSysLoginLog:         *q.TSysLoginLog.WithContext(ctx),
		TSysModelInfo:        *q.TSysModelInfo.WithContext(ctx),
		TSysOperLog:          *q.TSysOperLog.WithContext(ctx),
		TSysPlatform:         *q.TSysPlatform.WithContext(ctx),
		TSysPost:             *q.TSysPost.WithContext(ctx),
		TSysRole:             *q.TSysRole.WithContext(ctx),
		TSysRoleDept:         *q.TSysRoleDept.WithContext(ctx),
		TSysUser:             *q.TSysUser.WithContext(ctx),
		TSysUserOnline:       *q.TSysUserOnline.WithContext(ctx),
		TSysUserPost:         *q.TSysUserPost.WithContext(ctx),
		TSysWebSet:           *q.TSysWebSet.WithContext(ctx),
		TToolsGenTable:       *q.TToolsGenTable.WithContext(ctx),
		TToolsGenTableColumn: *q.TToolsGenTableColumn.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
