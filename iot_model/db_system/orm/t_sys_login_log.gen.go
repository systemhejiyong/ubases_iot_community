// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTSysLoginLog(db *gorm.DB) tSysLoginLog {
	_tSysLoginLog := tSysLoginLog{}

	_tSysLoginLog.tSysLoginLogDo.UseDB(db)
	_tSysLoginLog.tSysLoginLogDo.UseModel(&model.TSysLoginLog{})

	tableName := _tSysLoginLog.tSysLoginLogDo.TableName()
	_tSysLoginLog.ALL = field.NewField(tableName, "*")
	_tSysLoginLog.InfoId = field.NewInt64(tableName, "info_id")
	_tSysLoginLog.LoginName = field.NewString(tableName, "login_name")
	_tSysLoginLog.Ipaddr = field.NewString(tableName, "ipaddr")
	_tSysLoginLog.LoginLocation = field.NewString(tableName, "login_location")
	_tSysLoginLog.Browser = field.NewString(tableName, "browser")
	_tSysLoginLog.Os = field.NewString(tableName, "os")
	_tSysLoginLog.Status = field.NewInt32(tableName, "status")
	_tSysLoginLog.Msg = field.NewString(tableName, "msg")
	_tSysLoginLog.LoginTime = field.NewTime(tableName, "login_time")
	_tSysLoginLog.Module = field.NewString(tableName, "module")

	_tSysLoginLog.fillFieldMap()

	return _tSysLoginLog
}

type tSysLoginLog struct {
	tSysLoginLogDo tSysLoginLogDo

	ALL           field.Field
	InfoId        field.Int64
	LoginName     field.String
	Ipaddr        field.String
	LoginLocation field.String
	Browser       field.String
	Os            field.String
	Status        field.Int32
	Msg           field.String
	LoginTime     field.Time
	Module        field.String

	fieldMap map[string]field.Expr
}

func (t tSysLoginLog) Table(newTableName string) *tSysLoginLog {
	t.tSysLoginLogDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSysLoginLog) As(alias string) *tSysLoginLog {
	t.tSysLoginLogDo.DO = *(t.tSysLoginLogDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSysLoginLog) updateTableName(table string) *tSysLoginLog {
	t.ALL = field.NewField(table, "*")
	t.InfoId = field.NewInt64(table, "info_id")
	t.LoginName = field.NewString(table, "login_name")
	t.Ipaddr = field.NewString(table, "ipaddr")
	t.LoginLocation = field.NewString(table, "login_location")
	t.Browser = field.NewString(table, "browser")
	t.Os = field.NewString(table, "os")
	t.Status = field.NewInt32(table, "status")
	t.Msg = field.NewString(table, "msg")
	t.LoginTime = field.NewTime(table, "login_time")
	t.Module = field.NewString(table, "module")

	t.fillFieldMap()

	return t
}

func (t *tSysLoginLog) WithContext(ctx context.Context) *tSysLoginLogDo {
	return t.tSysLoginLogDo.WithContext(ctx)
}

func (t tSysLoginLog) TableName() string { return t.tSysLoginLogDo.TableName() }

func (t tSysLoginLog) Alias() string { return t.tSysLoginLogDo.Alias() }

func (t *tSysLoginLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSysLoginLog) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["info_id"] = t.InfoId
	t.fieldMap["login_name"] = t.LoginName
	t.fieldMap["ipaddr"] = t.Ipaddr
	t.fieldMap["login_location"] = t.LoginLocation
	t.fieldMap["browser"] = t.Browser
	t.fieldMap["os"] = t.Os
	t.fieldMap["status"] = t.Status
	t.fieldMap["msg"] = t.Msg
	t.fieldMap["login_time"] = t.LoginTime
	t.fieldMap["module"] = t.Module
}

func (t tSysLoginLog) clone(db *gorm.DB) tSysLoginLog {
	t.tSysLoginLogDo.ReplaceDB(db)
	return t
}

type tSysLoginLogDo struct{ gen.DO }

func (t tSysLoginLogDo) Debug() *tSysLoginLogDo {
	return t.withDO(t.DO.Debug())
}

func (t tSysLoginLogDo) WithContext(ctx context.Context) *tSysLoginLogDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSysLoginLogDo) Clauses(conds ...clause.Expression) *tSysLoginLogDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSysLoginLogDo) Returning(value interface{}, columns ...string) *tSysLoginLogDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSysLoginLogDo) Not(conds ...gen.Condition) *tSysLoginLogDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSysLoginLogDo) Or(conds ...gen.Condition) *tSysLoginLogDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSysLoginLogDo) Select(conds ...field.Expr) *tSysLoginLogDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSysLoginLogDo) Where(conds ...gen.Condition) *tSysLoginLogDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSysLoginLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tSysLoginLogDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tSysLoginLogDo) Order(conds ...field.Expr) *tSysLoginLogDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSysLoginLogDo) Distinct(cols ...field.Expr) *tSysLoginLogDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSysLoginLogDo) Omit(cols ...field.Expr) *tSysLoginLogDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSysLoginLogDo) Join(table schema.Tabler, on ...field.Expr) *tSysLoginLogDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSysLoginLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tSysLoginLogDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSysLoginLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *tSysLoginLogDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSysLoginLogDo) Group(cols ...field.Expr) *tSysLoginLogDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSysLoginLogDo) Having(conds ...gen.Condition) *tSysLoginLogDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSysLoginLogDo) Limit(limit int) *tSysLoginLogDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSysLoginLogDo) Offset(offset int) *tSysLoginLogDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSysLoginLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tSysLoginLogDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSysLoginLogDo) Unscoped() *tSysLoginLogDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSysLoginLogDo) Create(values ...*model.TSysLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSysLoginLogDo) CreateInBatches(values []*model.TSysLoginLog, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSysLoginLogDo) Save(values ...*model.TSysLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSysLoginLogDo) First() (*model.TSysLoginLog, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysLoginLog), nil
	}
}

func (t tSysLoginLogDo) Take() (*model.TSysLoginLog, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysLoginLog), nil
	}
}

func (t tSysLoginLogDo) Last() (*model.TSysLoginLog, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysLoginLog), nil
	}
}

func (t tSysLoginLogDo) Find() ([]*model.TSysLoginLog, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSysLoginLog), err
}

func (t tSysLoginLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSysLoginLog, err error) {
	buf := make([]*model.TSysLoginLog, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSysLoginLogDo) FindInBatches(result *[]*model.TSysLoginLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSysLoginLogDo) Attrs(attrs ...field.AssignExpr) *tSysLoginLogDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSysLoginLogDo) Assign(attrs ...field.AssignExpr) *tSysLoginLogDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSysLoginLogDo) Joins(field field.RelationField) *tSysLoginLogDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tSysLoginLogDo) Preload(field field.RelationField) *tSysLoginLogDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tSysLoginLogDo) FirstOrInit() (*model.TSysLoginLog, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysLoginLog), nil
	}
}

func (t tSysLoginLogDo) FirstOrCreate() (*model.TSysLoginLog, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysLoginLog), nil
	}
}

func (t tSysLoginLogDo) FindByPage(offset int, limit int) (result []*model.TSysLoginLog, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSysLoginLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tSysLoginLogDo) withDO(do gen.Dao) *tSysLoginLogDo {
	t.DO = *do.(*gen.DO)
	return t
}
