// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTSysPlatform(db *gorm.DB) tSysPlatform {
	_tSysPlatform := tSysPlatform{}

	_tSysPlatform.tSysPlatformDo.UseDB(db)
	_tSysPlatform.tSysPlatformDo.UseModel(&model.TSysPlatform{})

	tableName := _tSysPlatform.tSysPlatformDo.TableName()
	_tSysPlatform.ALL = field.NewField(tableName, "*")
	_tSysPlatform.Id = field.NewInt64(tableName, "id")
	_tSysPlatform.Type = field.NewInt32(tableName, "type")
	_tSysPlatform.Code = field.NewString(tableName, "code")
	_tSysPlatform.Name = field.NewString(tableName, "name")
	_tSysPlatform.PlatformUrl = field.NewString(tableName, "platform_url")
	_tSysPlatform.CompanyName = field.NewString(tableName, "company_name")
	_tSysPlatform.CompanyAddress = field.NewString(tableName, "company_address")
	_tSysPlatform.ContactPerson = field.NewString(tableName, "contact_person")
	_tSysPlatform.ContactPhone = field.NewString(tableName, "contact_phone")
	_tSysPlatform.Describe = field.NewString(tableName, "describe")
	_tSysPlatform.CreatedBy = field.NewInt64(tableName, "created_by")
	_tSysPlatform.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tSysPlatform.Status = field.NewInt32(tableName, "status")
	_tSysPlatform.CreatedAt = field.NewTime(tableName, "created_at")
	_tSysPlatform.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tSysPlatform.DeletedAt = field.NewField(tableName, "deleted_at")

	_tSysPlatform.fillFieldMap()

	return _tSysPlatform
}

type tSysPlatform struct {
	tSysPlatformDo tSysPlatformDo

	ALL            field.Field
	Id             field.Int64
	Type           field.Int32
	Code           field.String
	Name           field.String
	PlatformUrl    field.String
	CompanyName    field.String
	CompanyAddress field.String
	ContactPerson  field.String
	ContactPhone   field.String
	Describe       field.String
	CreatedBy      field.Int64
	UpdatedBy      field.Int64
	Status         field.Int32
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field

	fieldMap map[string]field.Expr
}

func (t tSysPlatform) Table(newTableName string) *tSysPlatform {
	t.tSysPlatformDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSysPlatform) As(alias string) *tSysPlatform {
	t.tSysPlatformDo.DO = *(t.tSysPlatformDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSysPlatform) updateTableName(table string) *tSysPlatform {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Type = field.NewInt32(table, "type")
	t.Code = field.NewString(table, "code")
	t.Name = field.NewString(table, "name")
	t.PlatformUrl = field.NewString(table, "platform_url")
	t.CompanyName = field.NewString(table, "company_name")
	t.CompanyAddress = field.NewString(table, "company_address")
	t.ContactPerson = field.NewString(table, "contact_person")
	t.ContactPhone = field.NewString(table, "contact_phone")
	t.Describe = field.NewString(table, "describe")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.Status = field.NewInt32(table, "status")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tSysPlatform) WithContext(ctx context.Context) *tSysPlatformDo {
	return t.tSysPlatformDo.WithContext(ctx)
}

func (t tSysPlatform) TableName() string { return t.tSysPlatformDo.TableName() }

func (t tSysPlatform) Alias() string { return t.tSysPlatformDo.Alias() }

func (t *tSysPlatform) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSysPlatform) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 16)
	t.fieldMap["id"] = t.Id
	t.fieldMap["type"] = t.Type
	t.fieldMap["code"] = t.Code
	t.fieldMap["name"] = t.Name
	t.fieldMap["platform_url"] = t.PlatformUrl
	t.fieldMap["company_name"] = t.CompanyName
	t.fieldMap["company_address"] = t.CompanyAddress
	t.fieldMap["contact_person"] = t.ContactPerson
	t.fieldMap["contact_phone"] = t.ContactPhone
	t.fieldMap["describe"] = t.Describe
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tSysPlatform) clone(db *gorm.DB) tSysPlatform {
	t.tSysPlatformDo.ReplaceDB(db)
	return t
}

type tSysPlatformDo struct{ gen.DO }

func (t tSysPlatformDo) Debug() *tSysPlatformDo {
	return t.withDO(t.DO.Debug())
}

func (t tSysPlatformDo) WithContext(ctx context.Context) *tSysPlatformDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSysPlatformDo) Clauses(conds ...clause.Expression) *tSysPlatformDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSysPlatformDo) Returning(value interface{}, columns ...string) *tSysPlatformDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSysPlatformDo) Not(conds ...gen.Condition) *tSysPlatformDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSysPlatformDo) Or(conds ...gen.Condition) *tSysPlatformDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSysPlatformDo) Select(conds ...field.Expr) *tSysPlatformDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSysPlatformDo) Where(conds ...gen.Condition) *tSysPlatformDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSysPlatformDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tSysPlatformDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tSysPlatformDo) Order(conds ...field.Expr) *tSysPlatformDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSysPlatformDo) Distinct(cols ...field.Expr) *tSysPlatformDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSysPlatformDo) Omit(cols ...field.Expr) *tSysPlatformDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSysPlatformDo) Join(table schema.Tabler, on ...field.Expr) *tSysPlatformDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSysPlatformDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tSysPlatformDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSysPlatformDo) RightJoin(table schema.Tabler, on ...field.Expr) *tSysPlatformDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSysPlatformDo) Group(cols ...field.Expr) *tSysPlatformDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSysPlatformDo) Having(conds ...gen.Condition) *tSysPlatformDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSysPlatformDo) Limit(limit int) *tSysPlatformDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSysPlatformDo) Offset(offset int) *tSysPlatformDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSysPlatformDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tSysPlatformDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSysPlatformDo) Unscoped() *tSysPlatformDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSysPlatformDo) Create(values ...*model.TSysPlatform) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSysPlatformDo) CreateInBatches(values []*model.TSysPlatform, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSysPlatformDo) Save(values ...*model.TSysPlatform) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSysPlatformDo) First() (*model.TSysPlatform, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysPlatform), nil
	}
}

func (t tSysPlatformDo) Take() (*model.TSysPlatform, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysPlatform), nil
	}
}

func (t tSysPlatformDo) Last() (*model.TSysPlatform, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysPlatform), nil
	}
}

func (t tSysPlatformDo) Find() ([]*model.TSysPlatform, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSysPlatform), err
}

func (t tSysPlatformDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSysPlatform, err error) {
	buf := make([]*model.TSysPlatform, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSysPlatformDo) FindInBatches(result *[]*model.TSysPlatform, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSysPlatformDo) Attrs(attrs ...field.AssignExpr) *tSysPlatformDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSysPlatformDo) Assign(attrs ...field.AssignExpr) *tSysPlatformDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSysPlatformDo) Joins(field field.RelationField) *tSysPlatformDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tSysPlatformDo) Preload(field field.RelationField) *tSysPlatformDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tSysPlatformDo) FirstOrInit() (*model.TSysPlatform, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysPlatform), nil
	}
}

func (t tSysPlatformDo) FirstOrCreate() (*model.TSysPlatform, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysPlatform), nil
	}
}

func (t tSysPlatformDo) FindByPage(offset int, limit int) (result []*model.TSysPlatform, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSysPlatformDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tSysPlatformDo) withDO(do gen.Dao) *tSysPlatformDo {
	t.DO = *do.(*gen.DO)
	return t
}
