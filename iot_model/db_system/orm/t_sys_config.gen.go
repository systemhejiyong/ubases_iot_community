// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTSysConfig(db *gorm.DB) tSysConfig {
	_tSysConfig := tSysConfig{}

	_tSysConfig.tSysConfigDo.UseDB(db)
	_tSysConfig.tSysConfigDo.UseModel(&model.TSysConfig{})

	tableName := _tSysConfig.tSysConfigDo.TableName()
	_tSysConfig.ALL = field.NewField(tableName, "*")
	_tSysConfig.ConfigId = field.NewInt64(tableName, "config_id")
	_tSysConfig.ConfigName = field.NewString(tableName, "config_name")
	_tSysConfig.ConfigKey = field.NewString(tableName, "config_key")
	_tSysConfig.ConfigValue = field.NewString(tableName, "config_value")
	_tSysConfig.ConfigType = field.NewInt32(tableName, "config_type")
	_tSysConfig.CreateBy = field.NewInt32(tableName, "create_by")
	_tSysConfig.UpdateBy = field.NewInt32(tableName, "update_by")
	_tSysConfig.Remark = field.NewString(tableName, "remark")
	_tSysConfig.CreatedAt = field.NewTime(tableName, "created_at")
	_tSysConfig.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tSysConfig.DeletedAt = field.NewField(tableName, "deleted_at")

	_tSysConfig.fillFieldMap()

	return _tSysConfig
}

type tSysConfig struct {
	tSysConfigDo tSysConfigDo

	ALL         field.Field
	ConfigId    field.Int64
	ConfigName  field.String
	ConfigKey   field.String
	ConfigValue field.String
	ConfigType  field.Int32
	CreateBy    field.Int32
	UpdateBy    field.Int32
	Remark      field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (t tSysConfig) Table(newTableName string) *tSysConfig {
	t.tSysConfigDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSysConfig) As(alias string) *tSysConfig {
	t.tSysConfigDo.DO = *(t.tSysConfigDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSysConfig) updateTableName(table string) *tSysConfig {
	t.ALL = field.NewField(table, "*")
	t.ConfigId = field.NewInt64(table, "config_id")
	t.ConfigName = field.NewString(table, "config_name")
	t.ConfigKey = field.NewString(table, "config_key")
	t.ConfigValue = field.NewString(table, "config_value")
	t.ConfigType = field.NewInt32(table, "config_type")
	t.CreateBy = field.NewInt32(table, "create_by")
	t.UpdateBy = field.NewInt32(table, "update_by")
	t.Remark = field.NewString(table, "remark")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tSysConfig) WithContext(ctx context.Context) *tSysConfigDo {
	return t.tSysConfigDo.WithContext(ctx)
}

func (t tSysConfig) TableName() string { return t.tSysConfigDo.TableName() }

func (t tSysConfig) Alias() string { return t.tSysConfigDo.Alias() }

func (t *tSysConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSysConfig) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["config_id"] = t.ConfigId
	t.fieldMap["config_name"] = t.ConfigName
	t.fieldMap["config_key"] = t.ConfigKey
	t.fieldMap["config_value"] = t.ConfigValue
	t.fieldMap["config_type"] = t.ConfigType
	t.fieldMap["create_by"] = t.CreateBy
	t.fieldMap["update_by"] = t.UpdateBy
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tSysConfig) clone(db *gorm.DB) tSysConfig {
	t.tSysConfigDo.ReplaceDB(db)
	return t
}

type tSysConfigDo struct{ gen.DO }

func (t tSysConfigDo) Debug() *tSysConfigDo {
	return t.withDO(t.DO.Debug())
}

func (t tSysConfigDo) WithContext(ctx context.Context) *tSysConfigDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSysConfigDo) Clauses(conds ...clause.Expression) *tSysConfigDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSysConfigDo) Returning(value interface{}, columns ...string) *tSysConfigDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSysConfigDo) Not(conds ...gen.Condition) *tSysConfigDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSysConfigDo) Or(conds ...gen.Condition) *tSysConfigDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSysConfigDo) Select(conds ...field.Expr) *tSysConfigDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSysConfigDo) Where(conds ...gen.Condition) *tSysConfigDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSysConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tSysConfigDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tSysConfigDo) Order(conds ...field.Expr) *tSysConfigDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSysConfigDo) Distinct(cols ...field.Expr) *tSysConfigDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSysConfigDo) Omit(cols ...field.Expr) *tSysConfigDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSysConfigDo) Join(table schema.Tabler, on ...field.Expr) *tSysConfigDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSysConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tSysConfigDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSysConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *tSysConfigDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSysConfigDo) Group(cols ...field.Expr) *tSysConfigDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSysConfigDo) Having(conds ...gen.Condition) *tSysConfigDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSysConfigDo) Limit(limit int) *tSysConfigDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSysConfigDo) Offset(offset int) *tSysConfigDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSysConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tSysConfigDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSysConfigDo) Unscoped() *tSysConfigDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSysConfigDo) Create(values ...*model.TSysConfig) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSysConfigDo) CreateInBatches(values []*model.TSysConfig, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSysConfigDo) Save(values ...*model.TSysConfig) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSysConfigDo) First() (*model.TSysConfig, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysConfig), nil
	}
}

func (t tSysConfigDo) Take() (*model.TSysConfig, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysConfig), nil
	}
}

func (t tSysConfigDo) Last() (*model.TSysConfig, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysConfig), nil
	}
}

func (t tSysConfigDo) Find() ([]*model.TSysConfig, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSysConfig), err
}

func (t tSysConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSysConfig, err error) {
	buf := make([]*model.TSysConfig, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSysConfigDo) FindInBatches(result *[]*model.TSysConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSysConfigDo) Attrs(attrs ...field.AssignExpr) *tSysConfigDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSysConfigDo) Assign(attrs ...field.AssignExpr) *tSysConfigDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSysConfigDo) Joins(field field.RelationField) *tSysConfigDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tSysConfigDo) Preload(field field.RelationField) *tSysConfigDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tSysConfigDo) FirstOrInit() (*model.TSysConfig, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysConfig), nil
	}
}

func (t tSysConfigDo) FirstOrCreate() (*model.TSysConfig, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysConfig), nil
	}
}

func (t tSysConfigDo) FindByPage(offset int, limit int) (result []*model.TSysConfig, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSysConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tSysConfigDo) withDO(do gen.Dao) *tSysConfigDo {
	t.DO = *do.(*gen.DO)
	return t
}
