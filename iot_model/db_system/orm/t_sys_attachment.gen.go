// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTSysAttachment(db *gorm.DB) tSysAttachment {
	_tSysAttachment := tSysAttachment{}

	_tSysAttachment.tSysAttachmentDo.UseDB(db)
	_tSysAttachment.tSysAttachmentDo.UseModel(&model.TSysAttachment{})

	tableName := _tSysAttachment.tSysAttachmentDo.TableName()
	_tSysAttachment.ALL = field.NewField(tableName, "*")
	_tSysAttachment.Id = field.NewInt64(tableName, "id")
	_tSysAttachment.FileName = field.NewString(tableName, "file_name")
	_tSysAttachment.FileSize = field.NewInt32(tableName, "file_size")
	_tSysAttachment.FileType = field.NewString(tableName, "file_type")
	_tSysAttachment.FileUrl = field.NewString(tableName, "file_url")
	_tSysAttachment.FileMd5 = field.NewString(tableName, "file_md5")
	_tSysAttachment.OssPlatform = field.NewString(tableName, "oss_platform")
	_tSysAttachment.SourceTable = field.NewString(tableName, "source_table")
	_tSysAttachment.SourceRowId = field.NewString(tableName, "source_row_id")
	_tSysAttachment.Status = field.NewInt32(tableName, "status")
	_tSysAttachment.AllowClear = field.NewInt32(tableName, "allow_clear")
	_tSysAttachment.CreatedBy = field.NewInt64(tableName, "created_by")
	_tSysAttachment.CreatedAt = field.NewTime(tableName, "created_at")
	_tSysAttachment.DeletedAt = field.NewField(tableName, "deleted_at")

	_tSysAttachment.fillFieldMap()

	return _tSysAttachment
}

type tSysAttachment struct {
	tSysAttachmentDo tSysAttachmentDo

	ALL         field.Field
	Id          field.Int64
	FileName    field.String
	FileSize    field.Int32
	FileType    field.String
	FileUrl     field.String
	FileMd5     field.String
	OssPlatform field.String
	SourceTable field.String
	SourceRowId field.String
	Status      field.Int32
	AllowClear  field.Int32
	CreatedBy   field.Int64
	CreatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (t tSysAttachment) Table(newTableName string) *tSysAttachment {
	t.tSysAttachmentDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSysAttachment) As(alias string) *tSysAttachment {
	t.tSysAttachmentDo.DO = *(t.tSysAttachmentDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSysAttachment) updateTableName(table string) *tSysAttachment {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.FileName = field.NewString(table, "file_name")
	t.FileSize = field.NewInt32(table, "file_size")
	t.FileType = field.NewString(table, "file_type")
	t.FileUrl = field.NewString(table, "file_url")
	t.FileMd5 = field.NewString(table, "file_md5")
	t.OssPlatform = field.NewString(table, "oss_platform")
	t.SourceTable = field.NewString(table, "source_table")
	t.SourceRowId = field.NewString(table, "source_row_id")
	t.Status = field.NewInt32(table, "status")
	t.AllowClear = field.NewInt32(table, "allow_clear")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tSysAttachment) WithContext(ctx context.Context) *tSysAttachmentDo {
	return t.tSysAttachmentDo.WithContext(ctx)
}

func (t tSysAttachment) TableName() string { return t.tSysAttachmentDo.TableName() }

func (t tSysAttachment) Alias() string { return t.tSysAttachmentDo.Alias() }

func (t *tSysAttachment) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSysAttachment) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 14)
	t.fieldMap["id"] = t.Id
	t.fieldMap["file_name"] = t.FileName
	t.fieldMap["file_size"] = t.FileSize
	t.fieldMap["file_type"] = t.FileType
	t.fieldMap["file_url"] = t.FileUrl
	t.fieldMap["file_md5"] = t.FileMd5
	t.fieldMap["oss_platform"] = t.OssPlatform
	t.fieldMap["source_table"] = t.SourceTable
	t.fieldMap["source_row_id"] = t.SourceRowId
	t.fieldMap["status"] = t.Status
	t.fieldMap["allow_clear"] = t.AllowClear
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tSysAttachment) clone(db *gorm.DB) tSysAttachment {
	t.tSysAttachmentDo.ReplaceDB(db)
	return t
}

type tSysAttachmentDo struct{ gen.DO }

func (t tSysAttachmentDo) Debug() *tSysAttachmentDo {
	return t.withDO(t.DO.Debug())
}

func (t tSysAttachmentDo) WithContext(ctx context.Context) *tSysAttachmentDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSysAttachmentDo) Clauses(conds ...clause.Expression) *tSysAttachmentDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSysAttachmentDo) Returning(value interface{}, columns ...string) *tSysAttachmentDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSysAttachmentDo) Not(conds ...gen.Condition) *tSysAttachmentDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSysAttachmentDo) Or(conds ...gen.Condition) *tSysAttachmentDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSysAttachmentDo) Select(conds ...field.Expr) *tSysAttachmentDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSysAttachmentDo) Where(conds ...gen.Condition) *tSysAttachmentDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSysAttachmentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tSysAttachmentDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tSysAttachmentDo) Order(conds ...field.Expr) *tSysAttachmentDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSysAttachmentDo) Distinct(cols ...field.Expr) *tSysAttachmentDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSysAttachmentDo) Omit(cols ...field.Expr) *tSysAttachmentDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSysAttachmentDo) Join(table schema.Tabler, on ...field.Expr) *tSysAttachmentDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSysAttachmentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tSysAttachmentDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSysAttachmentDo) RightJoin(table schema.Tabler, on ...field.Expr) *tSysAttachmentDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSysAttachmentDo) Group(cols ...field.Expr) *tSysAttachmentDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSysAttachmentDo) Having(conds ...gen.Condition) *tSysAttachmentDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSysAttachmentDo) Limit(limit int) *tSysAttachmentDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSysAttachmentDo) Offset(offset int) *tSysAttachmentDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSysAttachmentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tSysAttachmentDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSysAttachmentDo) Unscoped() *tSysAttachmentDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSysAttachmentDo) Create(values ...*model.TSysAttachment) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSysAttachmentDo) CreateInBatches(values []*model.TSysAttachment, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSysAttachmentDo) Save(values ...*model.TSysAttachment) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSysAttachmentDo) First() (*model.TSysAttachment, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysAttachment), nil
	}
}

func (t tSysAttachmentDo) Take() (*model.TSysAttachment, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysAttachment), nil
	}
}

func (t tSysAttachmentDo) Last() (*model.TSysAttachment, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysAttachment), nil
	}
}

func (t tSysAttachmentDo) Find() ([]*model.TSysAttachment, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSysAttachment), err
}

func (t tSysAttachmentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSysAttachment, err error) {
	buf := make([]*model.TSysAttachment, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSysAttachmentDo) FindInBatches(result *[]*model.TSysAttachment, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSysAttachmentDo) Attrs(attrs ...field.AssignExpr) *tSysAttachmentDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSysAttachmentDo) Assign(attrs ...field.AssignExpr) *tSysAttachmentDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSysAttachmentDo) Joins(field field.RelationField) *tSysAttachmentDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tSysAttachmentDo) Preload(field field.RelationField) *tSysAttachmentDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tSysAttachmentDo) FirstOrInit() (*model.TSysAttachment, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysAttachment), nil
	}
}

func (t tSysAttachmentDo) FirstOrCreate() (*model.TSysAttachment, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysAttachment), nil
	}
}

func (t tSysAttachmentDo) FindByPage(offset int, limit int) (result []*model.TSysAttachment, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSysAttachmentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tSysAttachmentDo) withDO(do gen.Dao) *tSysAttachmentDo {
	t.DO = *do.(*gen.DO)
	return t
}
