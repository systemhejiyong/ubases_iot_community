// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTSysDept(db *gorm.DB) tSysDept {
	_tSysDept := tSysDept{}

	_tSysDept.tSysDeptDo.UseDB(db)
	_tSysDept.tSysDeptDo.UseModel(&model.TSysDept{})

	tableName := _tSysDept.tSysDeptDo.TableName()
	_tSysDept.ALL = field.NewField(tableName, "*")
	_tSysDept.DeptId = field.NewInt64(tableName, "dept_id")
	_tSysDept.ParentId = field.NewInt64(tableName, "parent_id")
	_tSysDept.Ancestors = field.NewString(tableName, "ancestors")
	_tSysDept.DeptName = field.NewString(tableName, "dept_name")
	_tSysDept.OrderNum = field.NewInt32(tableName, "order_num")
	_tSysDept.Leader = field.NewString(tableName, "leader")
	_tSysDept.Phone = field.NewString(tableName, "phone")
	_tSysDept.Email = field.NewString(tableName, "email")
	_tSysDept.Status = field.NewString(tableName, "status")
	_tSysDept.CreatedBy = field.NewInt64(tableName, "created_by")
	_tSysDept.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tSysDept.CreatedAt = field.NewTime(tableName, "created_at")
	_tSysDept.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tSysDept.DeletedAt = field.NewField(tableName, "deleted_at")

	_tSysDept.fillFieldMap()

	return _tSysDept
}

type tSysDept struct {
	tSysDeptDo tSysDeptDo

	ALL       field.Field
	DeptId    field.Int64
	ParentId  field.Int64
	Ancestors field.String
	DeptName  field.String
	OrderNum  field.Int32
	Leader    field.String
	Phone     field.String
	Email     field.String
	Status    field.String
	CreatedBy field.Int64
	UpdatedBy field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (t tSysDept) Table(newTableName string) *tSysDept {
	t.tSysDeptDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSysDept) As(alias string) *tSysDept {
	t.tSysDeptDo.DO = *(t.tSysDeptDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSysDept) updateTableName(table string) *tSysDept {
	t.ALL = field.NewField(table, "*")
	t.DeptId = field.NewInt64(table, "dept_id")
	t.ParentId = field.NewInt64(table, "parent_id")
	t.Ancestors = field.NewString(table, "ancestors")
	t.DeptName = field.NewString(table, "dept_name")
	t.OrderNum = field.NewInt32(table, "order_num")
	t.Leader = field.NewString(table, "leader")
	t.Phone = field.NewString(table, "phone")
	t.Email = field.NewString(table, "email")
	t.Status = field.NewString(table, "status")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tSysDept) WithContext(ctx context.Context) *tSysDeptDo { return t.tSysDeptDo.WithContext(ctx) }

func (t tSysDept) TableName() string { return t.tSysDeptDo.TableName() }

func (t tSysDept) Alias() string { return t.tSysDeptDo.Alias() }

func (t *tSysDept) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSysDept) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 14)
	t.fieldMap["dept_id"] = t.DeptId
	t.fieldMap["parent_id"] = t.ParentId
	t.fieldMap["ancestors"] = t.Ancestors
	t.fieldMap["dept_name"] = t.DeptName
	t.fieldMap["order_num"] = t.OrderNum
	t.fieldMap["leader"] = t.Leader
	t.fieldMap["phone"] = t.Phone
	t.fieldMap["email"] = t.Email
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tSysDept) clone(db *gorm.DB) tSysDept {
	t.tSysDeptDo.ReplaceDB(db)
	return t
}

type tSysDeptDo struct{ gen.DO }

func (t tSysDeptDo) Debug() *tSysDeptDo {
	return t.withDO(t.DO.Debug())
}

func (t tSysDeptDo) WithContext(ctx context.Context) *tSysDeptDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSysDeptDo) Clauses(conds ...clause.Expression) *tSysDeptDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSysDeptDo) Returning(value interface{}, columns ...string) *tSysDeptDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSysDeptDo) Not(conds ...gen.Condition) *tSysDeptDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSysDeptDo) Or(conds ...gen.Condition) *tSysDeptDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSysDeptDo) Select(conds ...field.Expr) *tSysDeptDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSysDeptDo) Where(conds ...gen.Condition) *tSysDeptDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSysDeptDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tSysDeptDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tSysDeptDo) Order(conds ...field.Expr) *tSysDeptDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSysDeptDo) Distinct(cols ...field.Expr) *tSysDeptDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSysDeptDo) Omit(cols ...field.Expr) *tSysDeptDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSysDeptDo) Join(table schema.Tabler, on ...field.Expr) *tSysDeptDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSysDeptDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tSysDeptDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSysDeptDo) RightJoin(table schema.Tabler, on ...field.Expr) *tSysDeptDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSysDeptDo) Group(cols ...field.Expr) *tSysDeptDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSysDeptDo) Having(conds ...gen.Condition) *tSysDeptDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSysDeptDo) Limit(limit int) *tSysDeptDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSysDeptDo) Offset(offset int) *tSysDeptDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSysDeptDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tSysDeptDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSysDeptDo) Unscoped() *tSysDeptDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSysDeptDo) Create(values ...*model.TSysDept) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSysDeptDo) CreateInBatches(values []*model.TSysDept, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSysDeptDo) Save(values ...*model.TSysDept) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSysDeptDo) First() (*model.TSysDept, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysDept), nil
	}
}

func (t tSysDeptDo) Take() (*model.TSysDept, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysDept), nil
	}
}

func (t tSysDeptDo) Last() (*model.TSysDept, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysDept), nil
	}
}

func (t tSysDeptDo) Find() ([]*model.TSysDept, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSysDept), err
}

func (t tSysDeptDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSysDept, err error) {
	buf := make([]*model.TSysDept, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSysDeptDo) FindInBatches(result *[]*model.TSysDept, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSysDeptDo) Attrs(attrs ...field.AssignExpr) *tSysDeptDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSysDeptDo) Assign(attrs ...field.AssignExpr) *tSysDeptDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSysDeptDo) Joins(field field.RelationField) *tSysDeptDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tSysDeptDo) Preload(field field.RelationField) *tSysDeptDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tSysDeptDo) FirstOrInit() (*model.TSysDept, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysDept), nil
	}
}

func (t tSysDeptDo) FirstOrCreate() (*model.TSysDept, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysDept), nil
	}
}

func (t tSysDeptDo) FindByPage(offset int, limit int) (result []*model.TSysDept, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSysDeptDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tSysDeptDo) withDO(do gen.Dao) *tSysDeptDo {
	t.DO = *do.(*gen.DO)
	return t
}
