// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTSysPost(db *gorm.DB) tSysPost {
	_tSysPost := tSysPost{}

	_tSysPost.tSysPostDo.UseDB(db)
	_tSysPost.tSysPostDo.UseModel(&model.TSysPost{})

	tableName := _tSysPost.tSysPostDo.TableName()
	_tSysPost.ALL = field.NewField(tableName, "*")
	_tSysPost.PostId = field.NewInt64(tableName, "post_id")
	_tSysPost.PostCode = field.NewString(tableName, "post_code")
	_tSysPost.PostName = field.NewString(tableName, "post_name")
	_tSysPost.PostSort = field.NewInt32(tableName, "post_sort")
	_tSysPost.Status = field.NewString(tableName, "status")
	_tSysPost.Remark = field.NewString(tableName, "remark")
	_tSysPost.CreatedBy = field.NewInt64(tableName, "created_by")
	_tSysPost.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tSysPost.CreatedAt = field.NewTime(tableName, "created_at")
	_tSysPost.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tSysPost.DeletedAt = field.NewField(tableName, "deleted_at")

	_tSysPost.fillFieldMap()

	return _tSysPost
}

type tSysPost struct {
	tSysPostDo tSysPostDo

	ALL       field.Field
	PostId    field.Int64
	PostCode  field.String
	PostName  field.String
	PostSort  field.Int32
	Status    field.String
	Remark    field.String
	CreatedBy field.Int64
	UpdatedBy field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (t tSysPost) Table(newTableName string) *tSysPost {
	t.tSysPostDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSysPost) As(alias string) *tSysPost {
	t.tSysPostDo.DO = *(t.tSysPostDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSysPost) updateTableName(table string) *tSysPost {
	t.ALL = field.NewField(table, "*")
	t.PostId = field.NewInt64(table, "post_id")
	t.PostCode = field.NewString(table, "post_code")
	t.PostName = field.NewString(table, "post_name")
	t.PostSort = field.NewInt32(table, "post_sort")
	t.Status = field.NewString(table, "status")
	t.Remark = field.NewString(table, "remark")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tSysPost) WithContext(ctx context.Context) *tSysPostDo { return t.tSysPostDo.WithContext(ctx) }

func (t tSysPost) TableName() string { return t.tSysPostDo.TableName() }

func (t tSysPost) Alias() string { return t.tSysPostDo.Alias() }

func (t *tSysPost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSysPost) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["post_id"] = t.PostId
	t.fieldMap["post_code"] = t.PostCode
	t.fieldMap["post_name"] = t.PostName
	t.fieldMap["post_sort"] = t.PostSort
	t.fieldMap["status"] = t.Status
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tSysPost) clone(db *gorm.DB) tSysPost {
	t.tSysPostDo.ReplaceDB(db)
	return t
}

type tSysPostDo struct{ gen.DO }

func (t tSysPostDo) Debug() *tSysPostDo {
	return t.withDO(t.DO.Debug())
}

func (t tSysPostDo) WithContext(ctx context.Context) *tSysPostDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSysPostDo) Clauses(conds ...clause.Expression) *tSysPostDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSysPostDo) Returning(value interface{}, columns ...string) *tSysPostDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSysPostDo) Not(conds ...gen.Condition) *tSysPostDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSysPostDo) Or(conds ...gen.Condition) *tSysPostDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSysPostDo) Select(conds ...field.Expr) *tSysPostDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSysPostDo) Where(conds ...gen.Condition) *tSysPostDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSysPostDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tSysPostDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tSysPostDo) Order(conds ...field.Expr) *tSysPostDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSysPostDo) Distinct(cols ...field.Expr) *tSysPostDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSysPostDo) Omit(cols ...field.Expr) *tSysPostDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSysPostDo) Join(table schema.Tabler, on ...field.Expr) *tSysPostDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSysPostDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tSysPostDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSysPostDo) RightJoin(table schema.Tabler, on ...field.Expr) *tSysPostDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSysPostDo) Group(cols ...field.Expr) *tSysPostDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSysPostDo) Having(conds ...gen.Condition) *tSysPostDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSysPostDo) Limit(limit int) *tSysPostDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSysPostDo) Offset(offset int) *tSysPostDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSysPostDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tSysPostDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSysPostDo) Unscoped() *tSysPostDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSysPostDo) Create(values ...*model.TSysPost) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSysPostDo) CreateInBatches(values []*model.TSysPost, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSysPostDo) Save(values ...*model.TSysPost) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSysPostDo) First() (*model.TSysPost, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysPost), nil
	}
}

func (t tSysPostDo) Take() (*model.TSysPost, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysPost), nil
	}
}

func (t tSysPostDo) Last() (*model.TSysPost, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysPost), nil
	}
}

func (t tSysPostDo) Find() ([]*model.TSysPost, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSysPost), err
}

func (t tSysPostDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSysPost, err error) {
	buf := make([]*model.TSysPost, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSysPostDo) FindInBatches(result *[]*model.TSysPost, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSysPostDo) Attrs(attrs ...field.AssignExpr) *tSysPostDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSysPostDo) Assign(attrs ...field.AssignExpr) *tSysPostDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSysPostDo) Joins(field field.RelationField) *tSysPostDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tSysPostDo) Preload(field field.RelationField) *tSysPostDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tSysPostDo) FirstOrInit() (*model.TSysPost, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysPost), nil
	}
}

func (t tSysPostDo) FirstOrCreate() (*model.TSysPost, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysPost), nil
	}
}

func (t tSysPostDo) FindByPage(offset int, limit int) (result []*model.TSysPost, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSysPostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tSysPostDo) withDO(do gen.Dao) *tSysPostDo {
	t.DO = *do.(*gen.DO)
	return t
}
