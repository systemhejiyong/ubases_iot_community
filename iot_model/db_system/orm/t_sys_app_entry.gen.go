// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTSysAppEntry(db *gorm.DB) tSysAppEntry {
	_tSysAppEntry := tSysAppEntry{}

	_tSysAppEntry.tSysAppEntryDo.UseDB(db)
	_tSysAppEntry.tSysAppEntryDo.UseModel(&model.TSysAppEntry{})

	tableName := _tSysAppEntry.tSysAppEntryDo.TableName()
	_tSysAppEntry.ALL = field.NewField(tableName, "*")
	_tSysAppEntry.Id = field.NewInt64(tableName, "id")
	_tSysAppEntry.Lang = field.NewString(tableName, "lang")
	_tSysAppEntry.Title = field.NewString(tableName, "title")
	_tSysAppEntry.Content = field.NewString(tableName, "content")
	_tSysAppEntry.SetingId = field.NewInt64(tableName, "seting_id")
	_tSysAppEntry.UpdatedAt = field.NewTime(tableName, "updated_at")

	_tSysAppEntry.fillFieldMap()

	return _tSysAppEntry
}

type tSysAppEntry struct {
	tSysAppEntryDo tSysAppEntryDo

	ALL       field.Field
	Id        field.Int64
	Lang      field.String
	Title     field.String
	Content   field.String
	SetingId  field.Int64
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (t tSysAppEntry) Table(newTableName string) *tSysAppEntry {
	t.tSysAppEntryDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSysAppEntry) As(alias string) *tSysAppEntry {
	t.tSysAppEntryDo.DO = *(t.tSysAppEntryDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSysAppEntry) updateTableName(table string) *tSysAppEntry {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Lang = field.NewString(table, "lang")
	t.Title = field.NewString(table, "title")
	t.Content = field.NewString(table, "content")
	t.SetingId = field.NewInt64(table, "seting_id")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *tSysAppEntry) WithContext(ctx context.Context) *tSysAppEntryDo {
	return t.tSysAppEntryDo.WithContext(ctx)
}

func (t tSysAppEntry) TableName() string { return t.tSysAppEntryDo.TableName() }

func (t tSysAppEntry) Alias() string { return t.tSysAppEntryDo.Alias() }

func (t *tSysAppEntry) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSysAppEntry) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.Id
	t.fieldMap["lang"] = t.Lang
	t.fieldMap["title"] = t.Title
	t.fieldMap["content"] = t.Content
	t.fieldMap["seting_id"] = t.SetingId
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t tSysAppEntry) clone(db *gorm.DB) tSysAppEntry {
	t.tSysAppEntryDo.ReplaceDB(db)
	return t
}

type tSysAppEntryDo struct{ gen.DO }

func (t tSysAppEntryDo) Debug() *tSysAppEntryDo {
	return t.withDO(t.DO.Debug())
}

func (t tSysAppEntryDo) WithContext(ctx context.Context) *tSysAppEntryDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSysAppEntryDo) Clauses(conds ...clause.Expression) *tSysAppEntryDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSysAppEntryDo) Returning(value interface{}, columns ...string) *tSysAppEntryDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSysAppEntryDo) Not(conds ...gen.Condition) *tSysAppEntryDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSysAppEntryDo) Or(conds ...gen.Condition) *tSysAppEntryDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSysAppEntryDo) Select(conds ...field.Expr) *tSysAppEntryDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSysAppEntryDo) Where(conds ...gen.Condition) *tSysAppEntryDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSysAppEntryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tSysAppEntryDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tSysAppEntryDo) Order(conds ...field.Expr) *tSysAppEntryDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSysAppEntryDo) Distinct(cols ...field.Expr) *tSysAppEntryDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSysAppEntryDo) Omit(cols ...field.Expr) *tSysAppEntryDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSysAppEntryDo) Join(table schema.Tabler, on ...field.Expr) *tSysAppEntryDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSysAppEntryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tSysAppEntryDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSysAppEntryDo) RightJoin(table schema.Tabler, on ...field.Expr) *tSysAppEntryDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSysAppEntryDo) Group(cols ...field.Expr) *tSysAppEntryDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSysAppEntryDo) Having(conds ...gen.Condition) *tSysAppEntryDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSysAppEntryDo) Limit(limit int) *tSysAppEntryDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSysAppEntryDo) Offset(offset int) *tSysAppEntryDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSysAppEntryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tSysAppEntryDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSysAppEntryDo) Unscoped() *tSysAppEntryDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSysAppEntryDo) Create(values ...*model.TSysAppEntry) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSysAppEntryDo) CreateInBatches(values []*model.TSysAppEntry, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSysAppEntryDo) Save(values ...*model.TSysAppEntry) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSysAppEntryDo) First() (*model.TSysAppEntry, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysAppEntry), nil
	}
}

func (t tSysAppEntryDo) Take() (*model.TSysAppEntry, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysAppEntry), nil
	}
}

func (t tSysAppEntryDo) Last() (*model.TSysAppEntry, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysAppEntry), nil
	}
}

func (t tSysAppEntryDo) Find() ([]*model.TSysAppEntry, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSysAppEntry), err
}

func (t tSysAppEntryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSysAppEntry, err error) {
	buf := make([]*model.TSysAppEntry, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSysAppEntryDo) FindInBatches(result *[]*model.TSysAppEntry, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSysAppEntryDo) Attrs(attrs ...field.AssignExpr) *tSysAppEntryDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSysAppEntryDo) Assign(attrs ...field.AssignExpr) *tSysAppEntryDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSysAppEntryDo) Joins(field field.RelationField) *tSysAppEntryDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tSysAppEntryDo) Preload(field field.RelationField) *tSysAppEntryDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tSysAppEntryDo) FirstOrInit() (*model.TSysAppEntry, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysAppEntry), nil
	}
}

func (t tSysAppEntryDo) FirstOrCreate() (*model.TSysAppEntry, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysAppEntry), nil
	}
}

func (t tSysAppEntryDo) FindByPage(offset int, limit int) (result []*model.TSysAppEntry, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSysAppEntryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tSysAppEntryDo) withDO(do gen.Dao) *tSysAppEntryDo {
	t.DO = *do.(*gen.DO)
	return t
}
