// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTPmControlPanels(db *gorm.DB) tPmControlPanels {
	_tPmControlPanels := tPmControlPanels{}

	_tPmControlPanels.tPmControlPanelsDo.UseDB(db)
	_tPmControlPanels.tPmControlPanelsDo.UseModel(&model.TPmControlPanels{})

	tableName := _tPmControlPanels.tPmControlPanelsDo.TableName()
	_tPmControlPanels.ALL = field.NewField(tableName, "*")
	_tPmControlPanels.Id = field.NewInt64(tableName, "id")
	_tPmControlPanels.Name = field.NewString(tableName, "name")
	_tPmControlPanels.NameEn = field.NewString(tableName, "name_en")
	_tPmControlPanels.Lang = field.NewString(tableName, "lang")
	_tPmControlPanels.Desc = field.NewString(tableName, "desc")
	_tPmControlPanels.Url = field.NewString(tableName, "url")
	_tPmControlPanels.UrlName = field.NewString(tableName, "url_name")
	_tPmControlPanels.PanelSize = field.NewInt32(tableName, "panel_size")
	_tPmControlPanels.PanelKey = field.NewString(tableName, "panel_key")
	_tPmControlPanels.PreviewName = field.NewString(tableName, "preview_name")
	_tPmControlPanels.PreviewUrl = field.NewString(tableName, "preview_url")
	_tPmControlPanels.PreviewSize = field.NewInt32(tableName, "preview_size")
	_tPmControlPanels.ProductTypeId = field.NewInt64(tableName, "product_type_id")
	_tPmControlPanels.ProductId = field.NewInt64(tableName, "product_id")
	_tPmControlPanels.Status = field.NewInt32(tableName, "status")
	_tPmControlPanels.CreatedBy = field.NewInt64(tableName, "created_by")
	_tPmControlPanels.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tPmControlPanels.CreatedAt = field.NewTime(tableName, "created_at")
	_tPmControlPanels.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tPmControlPanels.DeletedAt = field.NewField(tableName, "deleted_at")
	_tPmControlPanels.HasLangPackage = field.NewInt32(tableName, "has_lang_package")
	_tPmControlPanels.LangFileName = field.NewString(tableName, "lang_file_name")

	_tPmControlPanels.fillFieldMap()

	return _tPmControlPanels
}

type tPmControlPanels struct {
	tPmControlPanelsDo tPmControlPanelsDo

	ALL            field.Field
	Id             field.Int64
	Name           field.String
	NameEn         field.String
	Lang           field.String
	Desc           field.String
	Url            field.String
	UrlName        field.String
	PanelSize      field.Int32
	PanelKey       field.String
	PreviewName    field.String
	PreviewUrl     field.String
	PreviewSize    field.Int32
	ProductTypeId  field.Int64
	ProductId      field.Int64
	Status         field.Int32
	CreatedBy      field.Int64
	UpdatedBy      field.Int64
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	HasLangPackage field.Int32
	LangFileName   field.String

	fieldMap map[string]field.Expr
}

func (t tPmControlPanels) Table(newTableName string) *tPmControlPanels {
	t.tPmControlPanelsDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPmControlPanels) As(alias string) *tPmControlPanels {
	t.tPmControlPanelsDo.DO = *(t.tPmControlPanelsDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tPmControlPanels) updateTableName(table string) *tPmControlPanels {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.NameEn = field.NewString(table, "name_en")
	t.Lang = field.NewString(table, "lang")
	t.Desc = field.NewString(table, "desc")
	t.Url = field.NewString(table, "url")
	t.UrlName = field.NewString(table, "url_name")
	t.PanelSize = field.NewInt32(table, "panel_size")
	t.PanelKey = field.NewString(table, "panel_key")
	t.PreviewName = field.NewString(table, "preview_name")
	t.PreviewUrl = field.NewString(table, "preview_url")
	t.PreviewSize = field.NewInt32(table, "preview_size")
	t.ProductTypeId = field.NewInt64(table, "product_type_id")
	t.ProductId = field.NewInt64(table, "product_id")
	t.Status = field.NewInt32(table, "status")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.HasLangPackage = field.NewInt32(table, "has_lang_package")
	t.LangFileName = field.NewString(table, "lang_file_name")

	t.fillFieldMap()

	return t
}

func (t *tPmControlPanels) WithContext(ctx context.Context) *tPmControlPanelsDo {
	return t.tPmControlPanelsDo.WithContext(ctx)
}

func (t tPmControlPanels) TableName() string { return t.tPmControlPanelsDo.TableName() }

func (t tPmControlPanels) Alias() string { return t.tPmControlPanelsDo.Alias() }

func (t *tPmControlPanels) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPmControlPanels) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 22)
	t.fieldMap["id"] = t.Id
	t.fieldMap["name"] = t.Name
	t.fieldMap["name_en"] = t.NameEn
	t.fieldMap["lang"] = t.Lang
	t.fieldMap["desc"] = t.Desc
	t.fieldMap["url"] = t.Url
	t.fieldMap["url_name"] = t.UrlName
	t.fieldMap["panel_size"] = t.PanelSize
	t.fieldMap["panel_key"] = t.PanelKey
	t.fieldMap["preview_name"] = t.PreviewName
	t.fieldMap["preview_url"] = t.PreviewUrl
	t.fieldMap["preview_size"] = t.PreviewSize
	t.fieldMap["product_type_id"] = t.ProductTypeId
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["has_lang_package"] = t.HasLangPackage
	t.fieldMap["lang_file_name"] = t.LangFileName
}

func (t tPmControlPanels) clone(db *gorm.DB) tPmControlPanels {
	t.tPmControlPanelsDo.ReplaceDB(db)
	return t
}

type tPmControlPanelsDo struct{ gen.DO }

func (t tPmControlPanelsDo) Debug() *tPmControlPanelsDo {
	return t.withDO(t.DO.Debug())
}

func (t tPmControlPanelsDo) WithContext(ctx context.Context) *tPmControlPanelsDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPmControlPanelsDo) Clauses(conds ...clause.Expression) *tPmControlPanelsDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPmControlPanelsDo) Returning(value interface{}, columns ...string) *tPmControlPanelsDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPmControlPanelsDo) Not(conds ...gen.Condition) *tPmControlPanelsDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPmControlPanelsDo) Or(conds ...gen.Condition) *tPmControlPanelsDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPmControlPanelsDo) Select(conds ...field.Expr) *tPmControlPanelsDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPmControlPanelsDo) Where(conds ...gen.Condition) *tPmControlPanelsDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPmControlPanelsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tPmControlPanelsDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tPmControlPanelsDo) Order(conds ...field.Expr) *tPmControlPanelsDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPmControlPanelsDo) Distinct(cols ...field.Expr) *tPmControlPanelsDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPmControlPanelsDo) Omit(cols ...field.Expr) *tPmControlPanelsDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPmControlPanelsDo) Join(table schema.Tabler, on ...field.Expr) *tPmControlPanelsDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPmControlPanelsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tPmControlPanelsDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPmControlPanelsDo) RightJoin(table schema.Tabler, on ...field.Expr) *tPmControlPanelsDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPmControlPanelsDo) Group(cols ...field.Expr) *tPmControlPanelsDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPmControlPanelsDo) Having(conds ...gen.Condition) *tPmControlPanelsDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPmControlPanelsDo) Limit(limit int) *tPmControlPanelsDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPmControlPanelsDo) Offset(offset int) *tPmControlPanelsDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPmControlPanelsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tPmControlPanelsDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPmControlPanelsDo) Unscoped() *tPmControlPanelsDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPmControlPanelsDo) Create(values ...*model.TPmControlPanels) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPmControlPanelsDo) CreateInBatches(values []*model.TPmControlPanels, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPmControlPanelsDo) Save(values ...*model.TPmControlPanels) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPmControlPanelsDo) First() (*model.TPmControlPanels, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmControlPanels), nil
	}
}

func (t tPmControlPanelsDo) Take() (*model.TPmControlPanels, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmControlPanels), nil
	}
}

func (t tPmControlPanelsDo) Last() (*model.TPmControlPanels, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmControlPanels), nil
	}
}

func (t tPmControlPanelsDo) Find() ([]*model.TPmControlPanels, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPmControlPanels), err
}

func (t tPmControlPanelsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPmControlPanels, err error) {
	buf := make([]*model.TPmControlPanels, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPmControlPanelsDo) FindInBatches(result *[]*model.TPmControlPanels, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPmControlPanelsDo) Attrs(attrs ...field.AssignExpr) *tPmControlPanelsDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPmControlPanelsDo) Assign(attrs ...field.AssignExpr) *tPmControlPanelsDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPmControlPanelsDo) Joins(field field.RelationField) *tPmControlPanelsDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tPmControlPanelsDo) Preload(field field.RelationField) *tPmControlPanelsDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tPmControlPanelsDo) FirstOrInit() (*model.TPmControlPanels, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmControlPanels), nil
	}
}

func (t tPmControlPanelsDo) FirstOrCreate() (*model.TPmControlPanels, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmControlPanels), nil
	}
}

func (t tPmControlPanelsDo) FindByPage(offset int, limit int) (result []*model.TPmControlPanels, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPmControlPanelsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tPmControlPanelsDo) withDO(do gen.Dao) *tPmControlPanelsDo {
	t.DO = *do.(*gen.DO)
	return t
}
