// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmThingModelRule(db *gorm.DB) tOpmThingModelRule {
	_tOpmThingModelRule := tOpmThingModelRule{}

	_tOpmThingModelRule.tOpmThingModelRuleDo.UseDB(db)
	_tOpmThingModelRule.tOpmThingModelRuleDo.UseModel(&model.TOpmThingModelRule{})

	tableName := _tOpmThingModelRule.tOpmThingModelRuleDo.TableName()
	_tOpmThingModelRule.ALL = field.NewField(tableName, "*")
	_tOpmThingModelRule.Id = field.NewInt64(tableName, "id")
	_tOpmThingModelRule.ProductId = field.NewString(tableName, "product_id")
	_tOpmThingModelRule.ProductKey = field.NewString(tableName, "product_key")
	_tOpmThingModelRule.RuleName = field.NewString(tableName, "rule_name")
	_tOpmThingModelRule.Status = field.NewInt32(tableName, "status")
	_tOpmThingModelRule.IfSpecs = field.NewString(tableName, "if_specs")
	_tOpmThingModelRule.ThatSpecs = field.NewString(tableName, "that_specs")
	_tOpmThingModelRule.Desc = field.NewString(tableName, "desc")
	_tOpmThingModelRule.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpmThingModelRule.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmThingModelRule.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOpmThingModelRule.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOpmThingModelRule.DataOrigin = field.NewInt32(tableName, "data_origin")
	_tOpmThingModelRule.ConditionType = field.NewInt32(tableName, "condition_type")

	_tOpmThingModelRule.fillFieldMap()

	return _tOpmThingModelRule
}

type tOpmThingModelRule struct {
	tOpmThingModelRuleDo tOpmThingModelRuleDo

	ALL           field.Field
	Id            field.Int64
	ProductId     field.String
	ProductKey    field.String
	RuleName      field.String
	Status        field.Int32
	IfSpecs       field.String
	ThatSpecs     field.String
	Desc          field.String
	CreatedBy     field.Int64
	CreatedAt     field.Time
	UpdatedBy     field.Int64
	UpdatedAt     field.Time
	DataOrigin    field.Int32
	ConditionType field.Int32

	fieldMap map[string]field.Expr
}

func (t tOpmThingModelRule) Table(newTableName string) *tOpmThingModelRule {
	t.tOpmThingModelRuleDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmThingModelRule) As(alias string) *tOpmThingModelRule {
	t.tOpmThingModelRuleDo.DO = *(t.tOpmThingModelRuleDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmThingModelRule) updateTableName(table string) *tOpmThingModelRule {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ProductId = field.NewString(table, "product_id")
	t.ProductKey = field.NewString(table, "product_key")
	t.RuleName = field.NewString(table, "rule_name")
	t.Status = field.NewInt32(table, "status")
	t.IfSpecs = field.NewString(table, "if_specs")
	t.ThatSpecs = field.NewString(table, "that_specs")
	t.Desc = field.NewString(table, "desc")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DataOrigin = field.NewInt32(table, "data_origin")
	t.ConditionType = field.NewInt32(table, "condition_type")

	t.fillFieldMap()

	return t
}

func (t *tOpmThingModelRule) WithContext(ctx context.Context) *tOpmThingModelRuleDo {
	return t.tOpmThingModelRuleDo.WithContext(ctx)
}

func (t tOpmThingModelRule) TableName() string { return t.tOpmThingModelRuleDo.TableName() }

func (t tOpmThingModelRule) Alias() string { return t.tOpmThingModelRuleDo.Alias() }

func (t *tOpmThingModelRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmThingModelRule) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 14)
	t.fieldMap["id"] = t.Id
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["rule_name"] = t.RuleName
	t.fieldMap["status"] = t.Status
	t.fieldMap["if_specs"] = t.IfSpecs
	t.fieldMap["that_specs"] = t.ThatSpecs
	t.fieldMap["desc"] = t.Desc
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["data_origin"] = t.DataOrigin
	t.fieldMap["condition_type"] = t.ConditionType
}

func (t tOpmThingModelRule) clone(db *gorm.DB) tOpmThingModelRule {
	t.tOpmThingModelRuleDo.ReplaceDB(db)
	return t
}

type tOpmThingModelRuleDo struct{ gen.DO }

func (t tOpmThingModelRuleDo) Debug() *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmThingModelRuleDo) WithContext(ctx context.Context) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmThingModelRuleDo) Clauses(conds ...clause.Expression) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmThingModelRuleDo) Returning(value interface{}, columns ...string) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmThingModelRuleDo) Not(conds ...gen.Condition) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmThingModelRuleDo) Or(conds ...gen.Condition) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmThingModelRuleDo) Select(conds ...field.Expr) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmThingModelRuleDo) Where(conds ...gen.Condition) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmThingModelRuleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmThingModelRuleDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmThingModelRuleDo) Order(conds ...field.Expr) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmThingModelRuleDo) Distinct(cols ...field.Expr) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmThingModelRuleDo) Omit(cols ...field.Expr) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmThingModelRuleDo) Join(table schema.Tabler, on ...field.Expr) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmThingModelRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmThingModelRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmThingModelRuleDo) Group(cols ...field.Expr) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmThingModelRuleDo) Having(conds ...gen.Condition) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmThingModelRuleDo) Limit(limit int) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmThingModelRuleDo) Offset(offset int) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmThingModelRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmThingModelRuleDo) Unscoped() *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmThingModelRuleDo) Create(values ...*model.TOpmThingModelRule) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmThingModelRuleDo) CreateInBatches(values []*model.TOpmThingModelRule, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmThingModelRuleDo) Save(values ...*model.TOpmThingModelRule) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmThingModelRuleDo) First() (*model.TOpmThingModelRule, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmThingModelRule), nil
	}
}

func (t tOpmThingModelRuleDo) Take() (*model.TOpmThingModelRule, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmThingModelRule), nil
	}
}

func (t tOpmThingModelRuleDo) Last() (*model.TOpmThingModelRule, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmThingModelRule), nil
	}
}

func (t tOpmThingModelRuleDo) Find() ([]*model.TOpmThingModelRule, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmThingModelRule), err
}

func (t tOpmThingModelRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmThingModelRule, err error) {
	buf := make([]*model.TOpmThingModelRule, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmThingModelRuleDo) FindInBatches(result *[]*model.TOpmThingModelRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmThingModelRuleDo) Attrs(attrs ...field.AssignExpr) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmThingModelRuleDo) Assign(attrs ...field.AssignExpr) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmThingModelRuleDo) Joins(field field.RelationField) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmThingModelRuleDo) Preload(field field.RelationField) *tOpmThingModelRuleDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmThingModelRuleDo) FirstOrInit() (*model.TOpmThingModelRule, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmThingModelRule), nil
	}
}

func (t tOpmThingModelRuleDo) FirstOrCreate() (*model.TOpmThingModelRule, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmThingModelRule), nil
	}
}

func (t tOpmThingModelRuleDo) FindByPage(offset int, limit int) (result []*model.TOpmThingModelRule, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmThingModelRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmThingModelRuleDo) withDO(do gen.Dao) *tOpmThingModelRuleDo {
	t.DO = *do.(*gen.DO)
	return t
}
