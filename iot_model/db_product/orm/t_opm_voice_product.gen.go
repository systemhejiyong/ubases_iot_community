// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmVoiceProduct(db *gorm.DB) tOpmVoiceProduct {
	_tOpmVoiceProduct := tOpmVoiceProduct{}

	_tOpmVoiceProduct.tOpmVoiceProductDo.UseDB(db)
	_tOpmVoiceProduct.tOpmVoiceProductDo.UseModel(&model.TOpmVoiceProduct{})

	tableName := _tOpmVoiceProduct.tOpmVoiceProductDo.TableName()
	_tOpmVoiceProduct.ALL = field.NewField(tableName, "*")
	_tOpmVoiceProduct.Id = field.NewInt64(tableName, "id")
	_tOpmVoiceProduct.ProductKey = field.NewString(tableName, "product_key")
	_tOpmVoiceProduct.ProductName = field.NewString(tableName, "product_name")
	_tOpmVoiceProduct.VoiceNo = field.NewString(tableName, "voice_no")
	_tOpmVoiceProduct.VoiceName = field.NewString(tableName, "voice_name")
	_tOpmVoiceProduct.Status = field.NewInt32(tableName, "status")
	_tOpmVoiceProduct.VoiceProductType = field.NewString(tableName, "voice_product_type")
	_tOpmVoiceProduct.VoiceOther = field.NewString(tableName, "voice_other")
	_tOpmVoiceProduct.TenantId = field.NewString(tableName, "tenant_id")
	_tOpmVoiceProduct.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmVoiceProduct.ProjectName = field.NewString(tableName, "project_name")
	_tOpmVoiceProduct.ProjectId = field.NewString(tableName, "project_id")
	_tOpmVoiceProduct.Invocation = field.NewString(tableName, "invocation")
	_tOpmVoiceProduct.SecretName = field.NewString(tableName, "secret_name")
	_tOpmVoiceProduct.SecretUrl = field.NewString(tableName, "secret_url")

	_tOpmVoiceProduct.fillFieldMap()

	return _tOpmVoiceProduct
}

type tOpmVoiceProduct struct {
	tOpmVoiceProductDo tOpmVoiceProductDo

	ALL              field.Field
	Id               field.Int64
	ProductKey       field.String
	ProductName      field.String
	VoiceNo          field.String
	VoiceName        field.String
	Status           field.Int32
	VoiceProductType field.String
	VoiceOther       field.String
	TenantId         field.String
	CreatedAt        field.Time
	ProjectName      field.String
	ProjectId        field.String
	Invocation       field.String
	SecretName       field.String
	SecretUrl        field.String

	fieldMap map[string]field.Expr
}

func (t tOpmVoiceProduct) Table(newTableName string) *tOpmVoiceProduct {
	t.tOpmVoiceProductDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmVoiceProduct) As(alias string) *tOpmVoiceProduct {
	t.tOpmVoiceProductDo.DO = *(t.tOpmVoiceProductDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmVoiceProduct) updateTableName(table string) *tOpmVoiceProduct {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ProductKey = field.NewString(table, "product_key")
	t.ProductName = field.NewString(table, "product_name")
	t.VoiceNo = field.NewString(table, "voice_no")
	t.VoiceName = field.NewString(table, "voice_name")
	t.Status = field.NewInt32(table, "status")
	t.VoiceProductType = field.NewString(table, "voice_product_type")
	t.VoiceOther = field.NewString(table, "voice_other")
	t.TenantId = field.NewString(table, "tenant_id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.ProjectName = field.NewString(table, "project_name")
	t.ProjectId = field.NewString(table, "project_id")
	t.Invocation = field.NewString(table, "invocation")
	t.SecretName = field.NewString(table, "secret_name")
	t.SecretUrl = field.NewString(table, "secret_url")

	t.fillFieldMap()

	return t
}

func (t *tOpmVoiceProduct) WithContext(ctx context.Context) *tOpmVoiceProductDo {
	return t.tOpmVoiceProductDo.WithContext(ctx)
}

func (t tOpmVoiceProduct) TableName() string { return t.tOpmVoiceProductDo.TableName() }

func (t tOpmVoiceProduct) Alias() string { return t.tOpmVoiceProductDo.Alias() }

func (t *tOpmVoiceProduct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmVoiceProduct) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 15)
	t.fieldMap["id"] = t.Id
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["product_name"] = t.ProductName
	t.fieldMap["voice_no"] = t.VoiceNo
	t.fieldMap["voice_name"] = t.VoiceName
	t.fieldMap["status"] = t.Status
	t.fieldMap["voice_product_type"] = t.VoiceProductType
	t.fieldMap["voice_other"] = t.VoiceOther
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["project_name"] = t.ProjectName
	t.fieldMap["project_id"] = t.ProjectId
	t.fieldMap["invocation"] = t.Invocation
	t.fieldMap["secret_name"] = t.SecretName
	t.fieldMap["secret_url"] = t.SecretUrl
}

func (t tOpmVoiceProduct) clone(db *gorm.DB) tOpmVoiceProduct {
	t.tOpmVoiceProductDo.ReplaceDB(db)
	return t
}

type tOpmVoiceProductDo struct{ gen.DO }

func (t tOpmVoiceProductDo) Debug() *tOpmVoiceProductDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmVoiceProductDo) WithContext(ctx context.Context) *tOpmVoiceProductDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmVoiceProductDo) Clauses(conds ...clause.Expression) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmVoiceProductDo) Returning(value interface{}, columns ...string) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmVoiceProductDo) Not(conds ...gen.Condition) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmVoiceProductDo) Or(conds ...gen.Condition) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmVoiceProductDo) Select(conds ...field.Expr) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmVoiceProductDo) Where(conds ...gen.Condition) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmVoiceProductDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmVoiceProductDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmVoiceProductDo) Order(conds ...field.Expr) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmVoiceProductDo) Distinct(cols ...field.Expr) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmVoiceProductDo) Omit(cols ...field.Expr) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmVoiceProductDo) Join(table schema.Tabler, on ...field.Expr) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmVoiceProductDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmVoiceProductDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmVoiceProductDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmVoiceProductDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmVoiceProductDo) Group(cols ...field.Expr) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmVoiceProductDo) Having(conds ...gen.Condition) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmVoiceProductDo) Limit(limit int) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmVoiceProductDo) Offset(offset int) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmVoiceProductDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmVoiceProductDo) Unscoped() *tOpmVoiceProductDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmVoiceProductDo) Create(values ...*model.TOpmVoiceProduct) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmVoiceProductDo) CreateInBatches(values []*model.TOpmVoiceProduct, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmVoiceProductDo) Save(values ...*model.TOpmVoiceProduct) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmVoiceProductDo) First() (*model.TOpmVoiceProduct, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoiceProduct), nil
	}
}

func (t tOpmVoiceProductDo) Take() (*model.TOpmVoiceProduct, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoiceProduct), nil
	}
}

func (t tOpmVoiceProductDo) Last() (*model.TOpmVoiceProduct, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoiceProduct), nil
	}
}

func (t tOpmVoiceProductDo) Find() ([]*model.TOpmVoiceProduct, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmVoiceProduct), err
}

func (t tOpmVoiceProductDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmVoiceProduct, err error) {
	buf := make([]*model.TOpmVoiceProduct, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmVoiceProductDo) FindInBatches(result *[]*model.TOpmVoiceProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmVoiceProductDo) Attrs(attrs ...field.AssignExpr) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmVoiceProductDo) Assign(attrs ...field.AssignExpr) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmVoiceProductDo) Joins(field field.RelationField) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmVoiceProductDo) Preload(field field.RelationField) *tOpmVoiceProductDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmVoiceProductDo) FirstOrInit() (*model.TOpmVoiceProduct, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoiceProduct), nil
	}
}

func (t tOpmVoiceProductDo) FirstOrCreate() (*model.TOpmVoiceProduct, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoiceProduct), nil
	}
}

func (t tOpmVoiceProductDo) FindByPage(offset int, limit int) (result []*model.TOpmVoiceProduct, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmVoiceProductDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmVoiceProductDo) withDO(do gen.Dao) *tOpmVoiceProductDo {
	t.DO = *do.(*gen.DO)
	return t
}
