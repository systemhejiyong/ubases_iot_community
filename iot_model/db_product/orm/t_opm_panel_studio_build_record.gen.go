// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmPanelStudioBuildRecord(db *gorm.DB) tOpmPanelStudioBuildRecord {
	_tOpmPanelStudioBuildRecord := tOpmPanelStudioBuildRecord{}

	_tOpmPanelStudioBuildRecord.tOpmPanelStudioBuildRecordDo.UseDB(db)
	_tOpmPanelStudioBuildRecord.tOpmPanelStudioBuildRecordDo.UseModel(&model.TOpmPanelStudioBuildRecord{})

	tableName := _tOpmPanelStudioBuildRecord.tOpmPanelStudioBuildRecordDo.TableName()
	_tOpmPanelStudioBuildRecord.ALL = field.NewField(tableName, "*")
	_tOpmPanelStudioBuildRecord.Id = field.NewInt64(tableName, "id")
	_tOpmPanelStudioBuildRecord.BuildId = field.NewString(tableName, "build_id")
	_tOpmPanelStudioBuildRecord.PanelId = field.NewInt64(tableName, "panel_id")
	_tOpmPanelStudioBuildRecord.PanelType = field.NewInt64(tableName, "panel_type")
	_tOpmPanelStudioBuildRecord.Version = field.NewString(tableName, "version")
	_tOpmPanelStudioBuildRecord.ResUrl = field.NewString(tableName, "res_url")
	_tOpmPanelStudioBuildRecord.ResMd5 = field.NewString(tableName, "res_md5")
	_tOpmPanelStudioBuildRecord.Status = field.NewInt32(tableName, "status")
	_tOpmPanelStudioBuildRecord.CommitId = field.NewString(tableName, "commit_id")
	_tOpmPanelStudioBuildRecord.BuildProgress = field.NewInt32(tableName, "build_progress")
	_tOpmPanelStudioBuildRecord.BuildResult = field.NewInt32(tableName, "build_result")
	_tOpmPanelStudioBuildRecord.BuildResultMsg = field.NewString(tableName, "build_result_msg")
	_tOpmPanelStudioBuildRecord.ZipUrl = field.NewString(tableName, "zip_url")
	_tOpmPanelStudioBuildRecord.StartTime = field.NewTime(tableName, "start_time")
	_tOpmPanelStudioBuildRecord.EndTime = field.NewTime(tableName, "end_time")
	_tOpmPanelStudioBuildRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOpmPanelStudioBuildRecord.OriginType = field.NewInt32(tableName, "origin_type")
	_tOpmPanelStudioBuildRecord.UserAccount = field.NewString(tableName, "user_account")
	_tOpmPanelStudioBuildRecord.AppKey = field.NewString(tableName, "app_key")

	_tOpmPanelStudioBuildRecord.fillFieldMap()

	return _tOpmPanelStudioBuildRecord
}

type tOpmPanelStudioBuildRecord struct {
	tOpmPanelStudioBuildRecordDo tOpmPanelStudioBuildRecordDo

	ALL            field.Field
	Id             field.Int64
	BuildId        field.String
	PanelId        field.Int64
	PanelType      field.Int64
	Version        field.String
	ResUrl         field.String
	ResMd5         field.String
	Status         field.Int32
	CommitId       field.String
	BuildProgress  field.Int32
	BuildResult    field.Int32
	BuildResultMsg field.String
	ZipUrl         field.String
	StartTime      field.Time
	EndTime        field.Time
	UpdatedAt      field.Time
	OriginType     field.Int32
	UserAccount    field.String
	AppKey         field.String

	fieldMap map[string]field.Expr
}

func (t tOpmPanelStudioBuildRecord) Table(newTableName string) *tOpmPanelStudioBuildRecord {
	t.tOpmPanelStudioBuildRecordDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmPanelStudioBuildRecord) As(alias string) *tOpmPanelStudioBuildRecord {
	t.tOpmPanelStudioBuildRecordDo.DO = *(t.tOpmPanelStudioBuildRecordDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmPanelStudioBuildRecord) updateTableName(table string) *tOpmPanelStudioBuildRecord {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.BuildId = field.NewString(table, "build_id")
	t.PanelId = field.NewInt64(table, "panel_id")
	t.PanelType = field.NewInt64(table, "panel_type")
	t.Version = field.NewString(table, "version")
	t.ResUrl = field.NewString(table, "res_url")
	t.ResMd5 = field.NewString(table, "res_md5")
	t.Status = field.NewInt32(table, "status")
	t.CommitId = field.NewString(table, "commit_id")
	t.BuildProgress = field.NewInt32(table, "build_progress")
	t.BuildResult = field.NewInt32(table, "build_result")
	t.BuildResultMsg = field.NewString(table, "build_result_msg")
	t.ZipUrl = field.NewString(table, "zip_url")
	t.StartTime = field.NewTime(table, "start_time")
	t.EndTime = field.NewTime(table, "end_time")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.OriginType = field.NewInt32(table, "origin_type")
	t.UserAccount = field.NewString(table, "user_account")
	t.AppKey = field.NewString(table, "app_key")

	t.fillFieldMap()

	return t
}

func (t *tOpmPanelStudioBuildRecord) WithContext(ctx context.Context) *tOpmPanelStudioBuildRecordDo {
	return t.tOpmPanelStudioBuildRecordDo.WithContext(ctx)
}

func (t tOpmPanelStudioBuildRecord) TableName() string {
	return t.tOpmPanelStudioBuildRecordDo.TableName()
}

func (t tOpmPanelStudioBuildRecord) Alias() string { return t.tOpmPanelStudioBuildRecordDo.Alias() }

func (t *tOpmPanelStudioBuildRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmPanelStudioBuildRecord) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 19)
	t.fieldMap["id"] = t.Id
	t.fieldMap["build_id"] = t.BuildId
	t.fieldMap["panel_id"] = t.PanelId
	t.fieldMap["panel_type"] = t.PanelType
	t.fieldMap["version"] = t.Version
	t.fieldMap["res_url"] = t.ResUrl
	t.fieldMap["res_md5"] = t.ResMd5
	t.fieldMap["status"] = t.Status
	t.fieldMap["commit_id"] = t.CommitId
	t.fieldMap["build_progress"] = t.BuildProgress
	t.fieldMap["build_result"] = t.BuildResult
	t.fieldMap["build_result_msg"] = t.BuildResultMsg
	t.fieldMap["zip_url"] = t.ZipUrl
	t.fieldMap["start_time"] = t.StartTime
	t.fieldMap["end_time"] = t.EndTime
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["origin_type"] = t.OriginType
	t.fieldMap["user_account"] = t.UserAccount
	t.fieldMap["app_key"] = t.AppKey
}

func (t tOpmPanelStudioBuildRecord) clone(db *gorm.DB) tOpmPanelStudioBuildRecord {
	t.tOpmPanelStudioBuildRecordDo.ReplaceDB(db)
	return t
}

type tOpmPanelStudioBuildRecordDo struct{ gen.DO }

func (t tOpmPanelStudioBuildRecordDo) Debug() *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmPanelStudioBuildRecordDo) WithContext(ctx context.Context) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmPanelStudioBuildRecordDo) Clauses(conds ...clause.Expression) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmPanelStudioBuildRecordDo) Returning(value interface{}, columns ...string) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmPanelStudioBuildRecordDo) Not(conds ...gen.Condition) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmPanelStudioBuildRecordDo) Or(conds ...gen.Condition) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmPanelStudioBuildRecordDo) Select(conds ...field.Expr) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmPanelStudioBuildRecordDo) Where(conds ...gen.Condition) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmPanelStudioBuildRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmPanelStudioBuildRecordDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmPanelStudioBuildRecordDo) Order(conds ...field.Expr) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmPanelStudioBuildRecordDo) Distinct(cols ...field.Expr) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmPanelStudioBuildRecordDo) Omit(cols ...field.Expr) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmPanelStudioBuildRecordDo) Join(table schema.Tabler, on ...field.Expr) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmPanelStudioBuildRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmPanelStudioBuildRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmPanelStudioBuildRecordDo) Group(cols ...field.Expr) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmPanelStudioBuildRecordDo) Having(conds ...gen.Condition) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmPanelStudioBuildRecordDo) Limit(limit int) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmPanelStudioBuildRecordDo) Offset(offset int) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmPanelStudioBuildRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmPanelStudioBuildRecordDo) Unscoped() *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmPanelStudioBuildRecordDo) Create(values ...*model.TOpmPanelStudioBuildRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmPanelStudioBuildRecordDo) CreateInBatches(values []*model.TOpmPanelStudioBuildRecord, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmPanelStudioBuildRecordDo) Save(values ...*model.TOpmPanelStudioBuildRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmPanelStudioBuildRecordDo) First() (*model.TOpmPanelStudioBuildRecord, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelStudioBuildRecord), nil
	}
}

func (t tOpmPanelStudioBuildRecordDo) Take() (*model.TOpmPanelStudioBuildRecord, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelStudioBuildRecord), nil
	}
}

func (t tOpmPanelStudioBuildRecordDo) Last() (*model.TOpmPanelStudioBuildRecord, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelStudioBuildRecord), nil
	}
}

func (t tOpmPanelStudioBuildRecordDo) Find() ([]*model.TOpmPanelStudioBuildRecord, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmPanelStudioBuildRecord), err
}

func (t tOpmPanelStudioBuildRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmPanelStudioBuildRecord, err error) {
	buf := make([]*model.TOpmPanelStudioBuildRecord, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmPanelStudioBuildRecordDo) FindInBatches(result *[]*model.TOpmPanelStudioBuildRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmPanelStudioBuildRecordDo) Attrs(attrs ...field.AssignExpr) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmPanelStudioBuildRecordDo) Assign(attrs ...field.AssignExpr) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmPanelStudioBuildRecordDo) Joins(field field.RelationField) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmPanelStudioBuildRecordDo) Preload(field field.RelationField) *tOpmPanelStudioBuildRecordDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmPanelStudioBuildRecordDo) FirstOrInit() (*model.TOpmPanelStudioBuildRecord, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelStudioBuildRecord), nil
	}
}

func (t tOpmPanelStudioBuildRecordDo) FirstOrCreate() (*model.TOpmPanelStudioBuildRecord, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelStudioBuildRecord), nil
	}
}

func (t tOpmPanelStudioBuildRecordDo) FindByPage(offset int, limit int) (result []*model.TOpmPanelStudioBuildRecord, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmPanelStudioBuildRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmPanelStudioBuildRecordDo) withDO(do gen.Dao) *tOpmPanelStudioBuildRecordDo {
	t.DO = *do.(*gen.DO)
	return t
}
