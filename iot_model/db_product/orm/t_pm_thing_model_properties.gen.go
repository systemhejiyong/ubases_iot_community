// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTPmThingModelProperties(db *gorm.DB) tPmThingModelProperties {
	_tPmThingModelProperties := tPmThingModelProperties{}

	_tPmThingModelProperties.tPmThingModelPropertiesDo.UseDB(db)
	_tPmThingModelProperties.tPmThingModelPropertiesDo.UseModel(&model.TPmThingModelProperties{})

	tableName := _tPmThingModelProperties.tPmThingModelPropertiesDo.TableName()
	_tPmThingModelProperties.ALL = field.NewField(tableName, "*")
	_tPmThingModelProperties.Id = field.NewInt64(tableName, "id")
	_tPmThingModelProperties.ModelId = field.NewInt64(tableName, "model_id")
	_tPmThingModelProperties.ProductKey = field.NewString(tableName, "product_key")
	_tPmThingModelProperties.Identifier = field.NewString(tableName, "identifier")
	_tPmThingModelProperties.DataType = field.NewString(tableName, "data_type")
	_tPmThingModelProperties.Name = field.NewString(tableName, "name")
	_tPmThingModelProperties.RwFlag = field.NewString(tableName, "rw_flag")
	_tPmThingModelProperties.DataSpecs = field.NewString(tableName, "data_specs")
	_tPmThingModelProperties.DataSpecsList = field.NewString(tableName, "data_specs_list")
	_tPmThingModelProperties.Required = field.NewInt32(tableName, "required")
	_tPmThingModelProperties.Custom = field.NewInt32(tableName, "custom")
	_tPmThingModelProperties.Extension = field.NewString(tableName, "extension")
	_tPmThingModelProperties.Desc = field.NewString(tableName, "desc")
	_tPmThingModelProperties.TriggerCond = field.NewInt32(tableName, "trigger_cond")
	_tPmThingModelProperties.ExecCond = field.NewInt32(tableName, "exec_cond")
	_tPmThingModelProperties.CreatedBy = field.NewInt64(tableName, "created_by")
	_tPmThingModelProperties.CreatedAt = field.NewTime(tableName, "created_at")
	_tPmThingModelProperties.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tPmThingModelProperties.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tPmThingModelProperties.DeletedAt = field.NewField(tableName, "deleted_at")
	_tPmThingModelProperties.StdId = field.NewInt64(tableName, "std_id")
	_tPmThingModelProperties.Valid = field.NewInt32(tableName, "valid")
	_tPmThingModelProperties.Dpid = field.NewInt32(tableName, "dpid")

	_tPmThingModelProperties.fillFieldMap()

	return _tPmThingModelProperties
}

type tPmThingModelProperties struct {
	tPmThingModelPropertiesDo tPmThingModelPropertiesDo

	ALL           field.Field
	Id            field.Int64
	ModelId       field.Int64
	ProductKey    field.String
	Identifier    field.String
	DataType      field.String
	Name          field.String
	RwFlag        field.String
	DataSpecs     field.String
	DataSpecsList field.String
	Required      field.Int32
	Custom        field.Int32
	Extension     field.String
	Desc          field.String
	TriggerCond   field.Int32
	ExecCond      field.Int32
	CreatedBy     field.Int64
	CreatedAt     field.Time
	UpdatedBy     field.Int64
	UpdatedAt     field.Time
	DeletedAt     field.Field
	StdId         field.Int64
	Valid         field.Int32
	Dpid          field.Int32

	fieldMap map[string]field.Expr
}

func (t tPmThingModelProperties) Table(newTableName string) *tPmThingModelProperties {
	t.tPmThingModelPropertiesDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPmThingModelProperties) As(alias string) *tPmThingModelProperties {
	t.tPmThingModelPropertiesDo.DO = *(t.tPmThingModelPropertiesDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tPmThingModelProperties) updateTableName(table string) *tPmThingModelProperties {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ModelId = field.NewInt64(table, "model_id")
	t.ProductKey = field.NewString(table, "product_key")
	t.Identifier = field.NewString(table, "identifier")
	t.DataType = field.NewString(table, "data_type")
	t.Name = field.NewString(table, "name")
	t.RwFlag = field.NewString(table, "rw_flag")
	t.DataSpecs = field.NewString(table, "data_specs")
	t.DataSpecsList = field.NewString(table, "data_specs_list")
	t.Required = field.NewInt32(table, "required")
	t.Custom = field.NewInt32(table, "custom")
	t.Extension = field.NewString(table, "extension")
	t.Desc = field.NewString(table, "desc")
	t.TriggerCond = field.NewInt32(table, "trigger_cond")
	t.ExecCond = field.NewInt32(table, "exec_cond")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.StdId = field.NewInt64(table, "std_id")
	t.Valid = field.NewInt32(table, "valid")
	t.Dpid = field.NewInt32(table, "dpid")

	t.fillFieldMap()

	return t
}

func (t *tPmThingModelProperties) WithContext(ctx context.Context) *tPmThingModelPropertiesDo {
	return t.tPmThingModelPropertiesDo.WithContext(ctx)
}

func (t tPmThingModelProperties) TableName() string { return t.tPmThingModelPropertiesDo.TableName() }

func (t tPmThingModelProperties) Alias() string { return t.tPmThingModelPropertiesDo.Alias() }

func (t *tPmThingModelProperties) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPmThingModelProperties) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 23)
	t.fieldMap["id"] = t.Id
	t.fieldMap["model_id"] = t.ModelId
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["identifier"] = t.Identifier
	t.fieldMap["data_type"] = t.DataType
	t.fieldMap["name"] = t.Name
	t.fieldMap["rw_flag"] = t.RwFlag
	t.fieldMap["data_specs"] = t.DataSpecs
	t.fieldMap["data_specs_list"] = t.DataSpecsList
	t.fieldMap["required"] = t.Required
	t.fieldMap["custom"] = t.Custom
	t.fieldMap["extension"] = t.Extension
	t.fieldMap["desc"] = t.Desc
	t.fieldMap["trigger_cond"] = t.TriggerCond
	t.fieldMap["exec_cond"] = t.ExecCond
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["std_id"] = t.StdId
	t.fieldMap["valid"] = t.Valid
	t.fieldMap["dpid"] = t.Dpid
}

func (t tPmThingModelProperties) clone(db *gorm.DB) tPmThingModelProperties {
	t.tPmThingModelPropertiesDo.ReplaceDB(db)
	return t
}

type tPmThingModelPropertiesDo struct{ gen.DO }

func (t tPmThingModelPropertiesDo) Debug() *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Debug())
}

func (t tPmThingModelPropertiesDo) WithContext(ctx context.Context) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPmThingModelPropertiesDo) Clauses(conds ...clause.Expression) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPmThingModelPropertiesDo) Returning(value interface{}, columns ...string) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPmThingModelPropertiesDo) Not(conds ...gen.Condition) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPmThingModelPropertiesDo) Or(conds ...gen.Condition) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPmThingModelPropertiesDo) Select(conds ...field.Expr) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPmThingModelPropertiesDo) Where(conds ...gen.Condition) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPmThingModelPropertiesDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tPmThingModelPropertiesDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tPmThingModelPropertiesDo) Order(conds ...field.Expr) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPmThingModelPropertiesDo) Distinct(cols ...field.Expr) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPmThingModelPropertiesDo) Omit(cols ...field.Expr) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPmThingModelPropertiesDo) Join(table schema.Tabler, on ...field.Expr) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPmThingModelPropertiesDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPmThingModelPropertiesDo) RightJoin(table schema.Tabler, on ...field.Expr) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPmThingModelPropertiesDo) Group(cols ...field.Expr) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPmThingModelPropertiesDo) Having(conds ...gen.Condition) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPmThingModelPropertiesDo) Limit(limit int) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPmThingModelPropertiesDo) Offset(offset int) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPmThingModelPropertiesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPmThingModelPropertiesDo) Unscoped() *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPmThingModelPropertiesDo) Create(values ...*model.TPmThingModelProperties) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPmThingModelPropertiesDo) CreateInBatches(values []*model.TPmThingModelProperties, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPmThingModelPropertiesDo) Save(values ...*model.TPmThingModelProperties) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPmThingModelPropertiesDo) First() (*model.TPmThingModelProperties, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmThingModelProperties), nil
	}
}

func (t tPmThingModelPropertiesDo) Take() (*model.TPmThingModelProperties, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmThingModelProperties), nil
	}
}

func (t tPmThingModelPropertiesDo) Last() (*model.TPmThingModelProperties, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmThingModelProperties), nil
	}
}

func (t tPmThingModelPropertiesDo) Find() ([]*model.TPmThingModelProperties, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPmThingModelProperties), err
}

func (t tPmThingModelPropertiesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPmThingModelProperties, err error) {
	buf := make([]*model.TPmThingModelProperties, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPmThingModelPropertiesDo) FindInBatches(result *[]*model.TPmThingModelProperties, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPmThingModelPropertiesDo) Attrs(attrs ...field.AssignExpr) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPmThingModelPropertiesDo) Assign(attrs ...field.AssignExpr) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPmThingModelPropertiesDo) Joins(field field.RelationField) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tPmThingModelPropertiesDo) Preload(field field.RelationField) *tPmThingModelPropertiesDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tPmThingModelPropertiesDo) FirstOrInit() (*model.TPmThingModelProperties, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmThingModelProperties), nil
	}
}

func (t tPmThingModelPropertiesDo) FirstOrCreate() (*model.TPmThingModelProperties, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmThingModelProperties), nil
	}
}

func (t tPmThingModelPropertiesDo) FindByPage(offset int, limit int) (result []*model.TPmThingModelProperties, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPmThingModelPropertiesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tPmThingModelPropertiesDo) withDO(do gen.Dao) *tPmThingModelPropertiesDo {
	t.DO = *do.(*gen.DO)
	return t
}
