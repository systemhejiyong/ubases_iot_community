// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmCommunityProductLanguage(db *gorm.DB) tOpmCommunityProductLanguage {
	_tOpmCommunityProductLanguage := tOpmCommunityProductLanguage{}

	_tOpmCommunityProductLanguage.tOpmCommunityProductLanguageDo.UseDB(db)
	_tOpmCommunityProductLanguage.tOpmCommunityProductLanguageDo.UseModel(&model.TOpmCommunityProductLanguage{})

	tableName := _tOpmCommunityProductLanguage.tOpmCommunityProductLanguageDo.TableName()
	_tOpmCommunityProductLanguage.ALL = field.NewField(tableName, "*")
	_tOpmCommunityProductLanguage.Id = field.NewInt64(tableName, "id")
	_tOpmCommunityProductLanguage.CommunityProductId = field.NewInt64(tableName, "community_product_id")
	_tOpmCommunityProductLanguage.Lang = field.NewString(tableName, "lang")
	_tOpmCommunityProductLanguage.Name = field.NewString(tableName, "name")
	_tOpmCommunityProductLanguage.Description = field.NewString(tableName, "description")

	_tOpmCommunityProductLanguage.fillFieldMap()

	return _tOpmCommunityProductLanguage
}

type tOpmCommunityProductLanguage struct {
	tOpmCommunityProductLanguageDo tOpmCommunityProductLanguageDo

	ALL                field.Field
	Id                 field.Int64
	CommunityProductId field.Int64
	Lang               field.String
	Name               field.String
	Description        field.String

	fieldMap map[string]field.Expr
}

func (t tOpmCommunityProductLanguage) Table(newTableName string) *tOpmCommunityProductLanguage {
	t.tOpmCommunityProductLanguageDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmCommunityProductLanguage) As(alias string) *tOpmCommunityProductLanguage {
	t.tOpmCommunityProductLanguageDo.DO = *(t.tOpmCommunityProductLanguageDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmCommunityProductLanguage) updateTableName(table string) *tOpmCommunityProductLanguage {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.CommunityProductId = field.NewInt64(table, "community_product_id")
	t.Lang = field.NewString(table, "lang")
	t.Name = field.NewString(table, "name")
	t.Description = field.NewString(table, "description")

	t.fillFieldMap()

	return t
}

func (t *tOpmCommunityProductLanguage) WithContext(ctx context.Context) *tOpmCommunityProductLanguageDo {
	return t.tOpmCommunityProductLanguageDo.WithContext(ctx)
}

func (t tOpmCommunityProductLanguage) TableName() string {
	return t.tOpmCommunityProductLanguageDo.TableName()
}

func (t tOpmCommunityProductLanguage) Alias() string { return t.tOpmCommunityProductLanguageDo.Alias() }

func (t *tOpmCommunityProductLanguage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmCommunityProductLanguage) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["id"] = t.Id
	t.fieldMap["community_product_id"] = t.CommunityProductId
	t.fieldMap["lang"] = t.Lang
	t.fieldMap["name"] = t.Name
	t.fieldMap["description"] = t.Description
}

func (t tOpmCommunityProductLanguage) clone(db *gorm.DB) tOpmCommunityProductLanguage {
	t.tOpmCommunityProductLanguageDo.ReplaceDB(db)
	return t
}

type tOpmCommunityProductLanguageDo struct{ gen.DO }

func (t tOpmCommunityProductLanguageDo) Debug() *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmCommunityProductLanguageDo) WithContext(ctx context.Context) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmCommunityProductLanguageDo) Clauses(conds ...clause.Expression) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmCommunityProductLanguageDo) Returning(value interface{}, columns ...string) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmCommunityProductLanguageDo) Not(conds ...gen.Condition) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmCommunityProductLanguageDo) Or(conds ...gen.Condition) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmCommunityProductLanguageDo) Select(conds ...field.Expr) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmCommunityProductLanguageDo) Where(conds ...gen.Condition) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmCommunityProductLanguageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmCommunityProductLanguageDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmCommunityProductLanguageDo) Order(conds ...field.Expr) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmCommunityProductLanguageDo) Distinct(cols ...field.Expr) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmCommunityProductLanguageDo) Omit(cols ...field.Expr) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmCommunityProductLanguageDo) Join(table schema.Tabler, on ...field.Expr) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmCommunityProductLanguageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmCommunityProductLanguageDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmCommunityProductLanguageDo) Group(cols ...field.Expr) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmCommunityProductLanguageDo) Having(conds ...gen.Condition) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmCommunityProductLanguageDo) Limit(limit int) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmCommunityProductLanguageDo) Offset(offset int) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmCommunityProductLanguageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmCommunityProductLanguageDo) Unscoped() *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmCommunityProductLanguageDo) Create(values ...*model.TOpmCommunityProductLanguage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmCommunityProductLanguageDo) CreateInBatches(values []*model.TOpmCommunityProductLanguage, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmCommunityProductLanguageDo) Save(values ...*model.TOpmCommunityProductLanguage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmCommunityProductLanguageDo) First() (*model.TOpmCommunityProductLanguage, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmCommunityProductLanguage), nil
	}
}

func (t tOpmCommunityProductLanguageDo) Take() (*model.TOpmCommunityProductLanguage, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmCommunityProductLanguage), nil
	}
}

func (t tOpmCommunityProductLanguageDo) Last() (*model.TOpmCommunityProductLanguage, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmCommunityProductLanguage), nil
	}
}

func (t tOpmCommunityProductLanguageDo) Find() ([]*model.TOpmCommunityProductLanguage, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmCommunityProductLanguage), err
}

func (t tOpmCommunityProductLanguageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmCommunityProductLanguage, err error) {
	buf := make([]*model.TOpmCommunityProductLanguage, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmCommunityProductLanguageDo) FindInBatches(result *[]*model.TOpmCommunityProductLanguage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmCommunityProductLanguageDo) Attrs(attrs ...field.AssignExpr) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmCommunityProductLanguageDo) Assign(attrs ...field.AssignExpr) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmCommunityProductLanguageDo) Joins(field field.RelationField) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmCommunityProductLanguageDo) Preload(field field.RelationField) *tOpmCommunityProductLanguageDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmCommunityProductLanguageDo) FirstOrInit() (*model.TOpmCommunityProductLanguage, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmCommunityProductLanguage), nil
	}
}

func (t tOpmCommunityProductLanguageDo) FirstOrCreate() (*model.TOpmCommunityProductLanguage, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmCommunityProductLanguage), nil
	}
}

func (t tOpmCommunityProductLanguageDo) FindByPage(offset int, limit int) (result []*model.TOpmCommunityProductLanguage, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmCommunityProductLanguageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmCommunityProductLanguageDo) withDO(do gen.Dao) *tOpmCommunityProductLanguageDo {
	t.DO = *do.(*gen.DO)
	return t
}
