// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTPmThingModel(db *gorm.DB) tPmThingModel {
	_tPmThingModel := tPmThingModel{}

	_tPmThingModel.tPmThingModelDo.UseDB(db)
	_tPmThingModel.tPmThingModelDo.UseModel(&model.TPmThingModel{})

	tableName := _tPmThingModel.tPmThingModelDo.TableName()
	_tPmThingModel.ALL = field.NewField(tableName, "*")
	_tPmThingModel.Id = field.NewInt64(tableName, "id")
	_tPmThingModel.ProductKey = field.NewString(tableName, "product_key")
	_tPmThingModel.ProductTypeId = field.NewInt64(tableName, "product_type_id")
	_tPmThingModel.Standard = field.NewInt32(tableName, "standard")
	_tPmThingModel.Version = field.NewString(tableName, "version")
	_tPmThingModel.Description = field.NewString(tableName, "description")
	_tPmThingModel.CreatedBy = field.NewInt64(tableName, "created_by")
	_tPmThingModel.CreatedAt = field.NewTime(tableName, "created_at")
	_tPmThingModel.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tPmThingModel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tPmThingModel.DeletedAt = field.NewField(tableName, "deleted_at")

	_tPmThingModel.fillFieldMap()

	return _tPmThingModel
}

type tPmThingModel struct {
	tPmThingModelDo tPmThingModelDo

	ALL           field.Field
	Id            field.Int64
	ProductKey    field.String
	ProductTypeId field.Int64
	Standard      field.Int32
	Version       field.String
	Description   field.String
	CreatedBy     field.Int64
	CreatedAt     field.Time
	UpdatedBy     field.Int64
	UpdatedAt     field.Time
	DeletedAt     field.Field

	fieldMap map[string]field.Expr
}

func (t tPmThingModel) Table(newTableName string) *tPmThingModel {
	t.tPmThingModelDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPmThingModel) As(alias string) *tPmThingModel {
	t.tPmThingModelDo.DO = *(t.tPmThingModelDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tPmThingModel) updateTableName(table string) *tPmThingModel {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ProductKey = field.NewString(table, "product_key")
	t.ProductTypeId = field.NewInt64(table, "product_type_id")
	t.Standard = field.NewInt32(table, "standard")
	t.Version = field.NewString(table, "version")
	t.Description = field.NewString(table, "description")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tPmThingModel) WithContext(ctx context.Context) *tPmThingModelDo {
	return t.tPmThingModelDo.WithContext(ctx)
}

func (t tPmThingModel) TableName() string { return t.tPmThingModelDo.TableName() }

func (t tPmThingModel) Alias() string { return t.tPmThingModelDo.Alias() }

func (t *tPmThingModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPmThingModel) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.Id
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["product_type_id"] = t.ProductTypeId
	t.fieldMap["standard"] = t.Standard
	t.fieldMap["version"] = t.Version
	t.fieldMap["description"] = t.Description
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tPmThingModel) clone(db *gorm.DB) tPmThingModel {
	t.tPmThingModelDo.ReplaceDB(db)
	return t
}

type tPmThingModelDo struct{ gen.DO }

func (t tPmThingModelDo) Debug() *tPmThingModelDo {
	return t.withDO(t.DO.Debug())
}

func (t tPmThingModelDo) WithContext(ctx context.Context) *tPmThingModelDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPmThingModelDo) Clauses(conds ...clause.Expression) *tPmThingModelDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPmThingModelDo) Returning(value interface{}, columns ...string) *tPmThingModelDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPmThingModelDo) Not(conds ...gen.Condition) *tPmThingModelDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPmThingModelDo) Or(conds ...gen.Condition) *tPmThingModelDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPmThingModelDo) Select(conds ...field.Expr) *tPmThingModelDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPmThingModelDo) Where(conds ...gen.Condition) *tPmThingModelDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPmThingModelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tPmThingModelDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tPmThingModelDo) Order(conds ...field.Expr) *tPmThingModelDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPmThingModelDo) Distinct(cols ...field.Expr) *tPmThingModelDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPmThingModelDo) Omit(cols ...field.Expr) *tPmThingModelDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPmThingModelDo) Join(table schema.Tabler, on ...field.Expr) *tPmThingModelDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPmThingModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tPmThingModelDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPmThingModelDo) RightJoin(table schema.Tabler, on ...field.Expr) *tPmThingModelDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPmThingModelDo) Group(cols ...field.Expr) *tPmThingModelDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPmThingModelDo) Having(conds ...gen.Condition) *tPmThingModelDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPmThingModelDo) Limit(limit int) *tPmThingModelDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPmThingModelDo) Offset(offset int) *tPmThingModelDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPmThingModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tPmThingModelDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPmThingModelDo) Unscoped() *tPmThingModelDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPmThingModelDo) Create(values ...*model.TPmThingModel) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPmThingModelDo) CreateInBatches(values []*model.TPmThingModel, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPmThingModelDo) Save(values ...*model.TPmThingModel) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPmThingModelDo) First() (*model.TPmThingModel, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmThingModel), nil
	}
}

func (t tPmThingModelDo) Take() (*model.TPmThingModel, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmThingModel), nil
	}
}

func (t tPmThingModelDo) Last() (*model.TPmThingModel, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmThingModel), nil
	}
}

func (t tPmThingModelDo) Find() ([]*model.TPmThingModel, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPmThingModel), err
}

func (t tPmThingModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPmThingModel, err error) {
	buf := make([]*model.TPmThingModel, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPmThingModelDo) FindInBatches(result *[]*model.TPmThingModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPmThingModelDo) Attrs(attrs ...field.AssignExpr) *tPmThingModelDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPmThingModelDo) Assign(attrs ...field.AssignExpr) *tPmThingModelDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPmThingModelDo) Joins(field field.RelationField) *tPmThingModelDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tPmThingModelDo) Preload(field field.RelationField) *tPmThingModelDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tPmThingModelDo) FirstOrInit() (*model.TPmThingModel, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmThingModel), nil
	}
}

func (t tPmThingModelDo) FirstOrCreate() (*model.TPmThingModel, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmThingModel), nil
	}
}

func (t tPmThingModelDo) FindByPage(offset int, limit int) (result []*model.TPmThingModel, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPmThingModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tPmThingModelDo) withDO(do gen.Dao) *tPmThingModelDo {
	t.DO = *do.(*gen.DO)
	return t
}
