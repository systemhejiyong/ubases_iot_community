// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmVoiceProductMapGoogle(db *gorm.DB) tOpmVoiceProductMapGoogle {
	_tOpmVoiceProductMapGoogle := tOpmVoiceProductMapGoogle{}

	_tOpmVoiceProductMapGoogle.tOpmVoiceProductMapGoogleDo.UseDB(db)
	_tOpmVoiceProductMapGoogle.tOpmVoiceProductMapGoogleDo.UseModel(&model.TOpmVoiceProductMapGoogle{})

	tableName := _tOpmVoiceProductMapGoogle.tOpmVoiceProductMapGoogleDo.TableName()
	_tOpmVoiceProductMapGoogle.ALL = field.NewField(tableName, "*")
	_tOpmVoiceProductMapGoogle.Id = field.NewInt64(tableName, "id")
	_tOpmVoiceProductMapGoogle.VoiceCode = field.NewString(tableName, "voice_code")
	_tOpmVoiceProductMapGoogle.VoiceSynonym = field.NewString(tableName, "voice_synonym")
	_tOpmVoiceProductMapGoogle.Trait = field.NewString(tableName, "trait")
	_tOpmVoiceProductMapGoogle.Command = field.NewString(tableName, "command")
	_tOpmVoiceProductMapGoogle.VoiceDemo = field.NewString(tableName, "voice_demo")
	_tOpmVoiceProductMapGoogle.ValueMap = field.NewString(tableName, "value_map")
	_tOpmVoiceProductMapGoogle.DataType = field.NewString(tableName, "data_type")
	_tOpmVoiceProductMapGoogle.VDataType = field.NewString(tableName, "v_data_type")

	_tOpmVoiceProductMapGoogle.fillFieldMap()

	return _tOpmVoiceProductMapGoogle
}

type tOpmVoiceProductMapGoogle struct {
	tOpmVoiceProductMapGoogleDo tOpmVoiceProductMapGoogleDo

	ALL          field.Field
	Id           field.Int64
	VoiceCode    field.String
	VoiceSynonym field.String
	Trait        field.String
	Command      field.String
	VoiceDemo    field.String
	ValueMap     field.String
	DataType     field.String
	VDataType    field.String

	fieldMap map[string]field.Expr
}

func (t tOpmVoiceProductMapGoogle) Table(newTableName string) *tOpmVoiceProductMapGoogle {
	t.tOpmVoiceProductMapGoogleDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmVoiceProductMapGoogle) As(alias string) *tOpmVoiceProductMapGoogle {
	t.tOpmVoiceProductMapGoogleDo.DO = *(t.tOpmVoiceProductMapGoogleDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmVoiceProductMapGoogle) updateTableName(table string) *tOpmVoiceProductMapGoogle {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.VoiceCode = field.NewString(table, "voice_code")
	t.VoiceSynonym = field.NewString(table, "voice_synonym")
	t.Trait = field.NewString(table, "trait")
	t.Command = field.NewString(table, "command")
	t.VoiceDemo = field.NewString(table, "voice_demo")
	t.ValueMap = field.NewString(table, "value_map")
	t.DataType = field.NewString(table, "data_type")
	t.VDataType = field.NewString(table, "v_data_type")

	t.fillFieldMap()

	return t
}

func (t *tOpmVoiceProductMapGoogle) WithContext(ctx context.Context) *tOpmVoiceProductMapGoogleDo {
	return t.tOpmVoiceProductMapGoogleDo.WithContext(ctx)
}

func (t tOpmVoiceProductMapGoogle) TableName() string {
	return t.tOpmVoiceProductMapGoogleDo.TableName()
}

func (t tOpmVoiceProductMapGoogle) Alias() string { return t.tOpmVoiceProductMapGoogleDo.Alias() }

func (t *tOpmVoiceProductMapGoogle) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmVoiceProductMapGoogle) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.Id
	t.fieldMap["voice_code"] = t.VoiceCode
	t.fieldMap["voice_synonym"] = t.VoiceSynonym
	t.fieldMap["trait"] = t.Trait
	t.fieldMap["command"] = t.Command
	t.fieldMap["voice_demo"] = t.VoiceDemo
	t.fieldMap["value_map"] = t.ValueMap
	t.fieldMap["data_type"] = t.DataType
	t.fieldMap["v_data_type"] = t.VDataType
}

func (t tOpmVoiceProductMapGoogle) clone(db *gorm.DB) tOpmVoiceProductMapGoogle {
	t.tOpmVoiceProductMapGoogleDo.ReplaceDB(db)
	return t
}

type tOpmVoiceProductMapGoogleDo struct{ gen.DO }

func (t tOpmVoiceProductMapGoogleDo) Debug() *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmVoiceProductMapGoogleDo) WithContext(ctx context.Context) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmVoiceProductMapGoogleDo) Clauses(conds ...clause.Expression) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmVoiceProductMapGoogleDo) Returning(value interface{}, columns ...string) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmVoiceProductMapGoogleDo) Not(conds ...gen.Condition) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmVoiceProductMapGoogleDo) Or(conds ...gen.Condition) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmVoiceProductMapGoogleDo) Select(conds ...field.Expr) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmVoiceProductMapGoogleDo) Where(conds ...gen.Condition) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmVoiceProductMapGoogleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmVoiceProductMapGoogleDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmVoiceProductMapGoogleDo) Order(conds ...field.Expr) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmVoiceProductMapGoogleDo) Distinct(cols ...field.Expr) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmVoiceProductMapGoogleDo) Omit(cols ...field.Expr) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmVoiceProductMapGoogleDo) Join(table schema.Tabler, on ...field.Expr) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmVoiceProductMapGoogleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmVoiceProductMapGoogleDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmVoiceProductMapGoogleDo) Group(cols ...field.Expr) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmVoiceProductMapGoogleDo) Having(conds ...gen.Condition) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmVoiceProductMapGoogleDo) Limit(limit int) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmVoiceProductMapGoogleDo) Offset(offset int) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmVoiceProductMapGoogleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmVoiceProductMapGoogleDo) Unscoped() *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmVoiceProductMapGoogleDo) Create(values ...*model.TOpmVoiceProductMapGoogle) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmVoiceProductMapGoogleDo) CreateInBatches(values []*model.TOpmVoiceProductMapGoogle, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmVoiceProductMapGoogleDo) Save(values ...*model.TOpmVoiceProductMapGoogle) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmVoiceProductMapGoogleDo) First() (*model.TOpmVoiceProductMapGoogle, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoiceProductMapGoogle), nil
	}
}

func (t tOpmVoiceProductMapGoogleDo) Take() (*model.TOpmVoiceProductMapGoogle, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoiceProductMapGoogle), nil
	}
}

func (t tOpmVoiceProductMapGoogleDo) Last() (*model.TOpmVoiceProductMapGoogle, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoiceProductMapGoogle), nil
	}
}

func (t tOpmVoiceProductMapGoogleDo) Find() ([]*model.TOpmVoiceProductMapGoogle, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmVoiceProductMapGoogle), err
}

func (t tOpmVoiceProductMapGoogleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmVoiceProductMapGoogle, err error) {
	buf := make([]*model.TOpmVoiceProductMapGoogle, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmVoiceProductMapGoogleDo) FindInBatches(result *[]*model.TOpmVoiceProductMapGoogle, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmVoiceProductMapGoogleDo) Attrs(attrs ...field.AssignExpr) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmVoiceProductMapGoogleDo) Assign(attrs ...field.AssignExpr) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmVoiceProductMapGoogleDo) Joins(field field.RelationField) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmVoiceProductMapGoogleDo) Preload(field field.RelationField) *tOpmVoiceProductMapGoogleDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmVoiceProductMapGoogleDo) FirstOrInit() (*model.TOpmVoiceProductMapGoogle, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoiceProductMapGoogle), nil
	}
}

func (t tOpmVoiceProductMapGoogleDo) FirstOrCreate() (*model.TOpmVoiceProductMapGoogle, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoiceProductMapGoogle), nil
	}
}

func (t tOpmVoiceProductMapGoogleDo) FindByPage(offset int, limit int) (result []*model.TOpmVoiceProductMapGoogle, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmVoiceProductMapGoogleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmVoiceProductMapGoogleDo) withDO(do gen.Dao) *tOpmVoiceProductMapGoogleDo {
	t.DO = *do.(*gen.DO)
	return t
}
