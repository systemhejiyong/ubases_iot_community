// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmVoicePublishRecord(db *gorm.DB) tOpmVoicePublishRecord {
	_tOpmVoicePublishRecord := tOpmVoicePublishRecord{}

	_tOpmVoicePublishRecord.tOpmVoicePublishRecordDo.UseDB(db)
	_tOpmVoicePublishRecord.tOpmVoicePublishRecordDo.UseModel(&model.TOpmVoicePublishRecord{})

	tableName := _tOpmVoicePublishRecord.tOpmVoicePublishRecordDo.TableName()
	_tOpmVoicePublishRecord.ALL = field.NewField(tableName, "*")
	_tOpmVoicePublishRecord.Id = field.NewInt64(tableName, "id")
	_tOpmVoicePublishRecord.ProductKey = field.NewString(tableName, "product_key")
	_tOpmVoicePublishRecord.ProductName = field.NewString(tableName, "product_name")
	_tOpmVoicePublishRecord.VoiceName = field.NewString(tableName, "voice_name")
	_tOpmVoicePublishRecord.AttrJson = field.NewString(tableName, "attr_json")
	_tOpmVoicePublishRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmVoicePublishRecord.VoiceNo = field.NewString(tableName, "voice_no")

	_tOpmVoicePublishRecord.fillFieldMap()

	return _tOpmVoicePublishRecord
}

type tOpmVoicePublishRecord struct {
	tOpmVoicePublishRecordDo tOpmVoicePublishRecordDo

	ALL         field.Field
	Id          field.Int64
	ProductKey  field.String
	ProductName field.String
	VoiceName   field.String
	AttrJson    field.String
	CreatedAt   field.Time
	VoiceNo     field.String

	fieldMap map[string]field.Expr
}

func (t tOpmVoicePublishRecord) Table(newTableName string) *tOpmVoicePublishRecord {
	t.tOpmVoicePublishRecordDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmVoicePublishRecord) As(alias string) *tOpmVoicePublishRecord {
	t.tOpmVoicePublishRecordDo.DO = *(t.tOpmVoicePublishRecordDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmVoicePublishRecord) updateTableName(table string) *tOpmVoicePublishRecord {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ProductKey = field.NewString(table, "product_key")
	t.ProductName = field.NewString(table, "product_name")
	t.VoiceName = field.NewString(table, "voice_name")
	t.AttrJson = field.NewString(table, "attr_json")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.VoiceNo = field.NewString(table, "voice_no")

	t.fillFieldMap()

	return t
}

func (t *tOpmVoicePublishRecord) WithContext(ctx context.Context) *tOpmVoicePublishRecordDo {
	return t.tOpmVoicePublishRecordDo.WithContext(ctx)
}

func (t tOpmVoicePublishRecord) TableName() string { return t.tOpmVoicePublishRecordDo.TableName() }

func (t tOpmVoicePublishRecord) Alias() string { return t.tOpmVoicePublishRecordDo.Alias() }

func (t *tOpmVoicePublishRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmVoicePublishRecord) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 7)
	t.fieldMap["id"] = t.Id
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["product_name"] = t.ProductName
	t.fieldMap["voice_name"] = t.VoiceName
	t.fieldMap["attr_json"] = t.AttrJson
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["voice_no"] = t.VoiceNo
}

func (t tOpmVoicePublishRecord) clone(db *gorm.DB) tOpmVoicePublishRecord {
	t.tOpmVoicePublishRecordDo.ReplaceDB(db)
	return t
}

type tOpmVoicePublishRecordDo struct{ gen.DO }

func (t tOpmVoicePublishRecordDo) Debug() *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmVoicePublishRecordDo) WithContext(ctx context.Context) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmVoicePublishRecordDo) Clauses(conds ...clause.Expression) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmVoicePublishRecordDo) Returning(value interface{}, columns ...string) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmVoicePublishRecordDo) Not(conds ...gen.Condition) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmVoicePublishRecordDo) Or(conds ...gen.Condition) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmVoicePublishRecordDo) Select(conds ...field.Expr) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmVoicePublishRecordDo) Where(conds ...gen.Condition) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmVoicePublishRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmVoicePublishRecordDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmVoicePublishRecordDo) Order(conds ...field.Expr) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmVoicePublishRecordDo) Distinct(cols ...field.Expr) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmVoicePublishRecordDo) Omit(cols ...field.Expr) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmVoicePublishRecordDo) Join(table schema.Tabler, on ...field.Expr) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmVoicePublishRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmVoicePublishRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmVoicePublishRecordDo) Group(cols ...field.Expr) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmVoicePublishRecordDo) Having(conds ...gen.Condition) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmVoicePublishRecordDo) Limit(limit int) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmVoicePublishRecordDo) Offset(offset int) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmVoicePublishRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmVoicePublishRecordDo) Unscoped() *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmVoicePublishRecordDo) Create(values ...*model.TOpmVoicePublishRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmVoicePublishRecordDo) CreateInBatches(values []*model.TOpmVoicePublishRecord, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmVoicePublishRecordDo) Save(values ...*model.TOpmVoicePublishRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmVoicePublishRecordDo) First() (*model.TOpmVoicePublishRecord, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoicePublishRecord), nil
	}
}

func (t tOpmVoicePublishRecordDo) Take() (*model.TOpmVoicePublishRecord, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoicePublishRecord), nil
	}
}

func (t tOpmVoicePublishRecordDo) Last() (*model.TOpmVoicePublishRecord, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoicePublishRecord), nil
	}
}

func (t tOpmVoicePublishRecordDo) Find() ([]*model.TOpmVoicePublishRecord, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmVoicePublishRecord), err
}

func (t tOpmVoicePublishRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmVoicePublishRecord, err error) {
	buf := make([]*model.TOpmVoicePublishRecord, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmVoicePublishRecordDo) FindInBatches(result *[]*model.TOpmVoicePublishRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmVoicePublishRecordDo) Attrs(attrs ...field.AssignExpr) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmVoicePublishRecordDo) Assign(attrs ...field.AssignExpr) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmVoicePublishRecordDo) Joins(field field.RelationField) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmVoicePublishRecordDo) Preload(field field.RelationField) *tOpmVoicePublishRecordDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmVoicePublishRecordDo) FirstOrInit() (*model.TOpmVoicePublishRecord, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoicePublishRecord), nil
	}
}

func (t tOpmVoicePublishRecordDo) FirstOrCreate() (*model.TOpmVoicePublishRecord, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoicePublishRecord), nil
	}
}

func (t tOpmVoicePublishRecordDo) FindByPage(offset int, limit int) (result []*model.TOpmVoicePublishRecord, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmVoicePublishRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmVoicePublishRecordDo) withDO(do gen.Dao) *tOpmVoicePublishRecordDo {
	t.DO = *do.(*gen.DO)
	return t
}
