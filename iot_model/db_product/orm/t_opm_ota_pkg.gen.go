// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmOtaPkg(db *gorm.DB) tOpmOtaPkg {
	_tOpmOtaPkg := tOpmOtaPkg{}

	_tOpmOtaPkg.tOpmOtaPkgDo.UseDB(db)
	_tOpmOtaPkg.tOpmOtaPkgDo.UseModel(&model.TOpmOtaPkg{})

	tableName := _tOpmOtaPkg.tOpmOtaPkgDo.TableName()
	_tOpmOtaPkg.ALL = field.NewField(tableName, "*")
	_tOpmOtaPkg.Id = field.NewInt64(tableName, "id")
	_tOpmOtaPkg.ProductId = field.NewInt64(tableName, "product_id")
	_tOpmOtaPkg.ProductKey = field.NewString(tableName, "product_key")
	_tOpmOtaPkg.Type = field.NewInt32(tableName, "type")
	_tOpmOtaPkg.FirmwareId = field.NewInt64(tableName, "firmware_id")
	_tOpmOtaPkg.FirmwareFlag = field.NewString(tableName, "firmware_flag")
	_tOpmOtaPkg.FirmwareType = field.NewInt32(tableName, "firmware_type")
	_tOpmOtaPkg.VersionId = field.NewInt64(tableName, "version_id")
	_tOpmOtaPkg.Version = field.NewString(tableName, "version")
	_tOpmOtaPkg.UpgradeMode = field.NewInt32(tableName, "upgrade_mode")
	_tOpmOtaPkg.Url = field.NewString(tableName, "url")
	_tOpmOtaPkg.Status = field.NewInt32(tableName, "status")
	_tOpmOtaPkg.IsAuto = field.NewInt32(tableName, "is_auto")
	_tOpmOtaPkg.UpgradeDesc = field.NewString(tableName, "upgrade_desc")
	_tOpmOtaPkg.UpgradeDescEn = field.NewString(tableName, "upgrade_desc_en")
	_tOpmOtaPkg.AutoStartAt = field.NewString(tableName, "auto_start_at")
	_tOpmOtaPkg.AutoEndAt = field.NewString(tableName, "auto_end_at")
	_tOpmOtaPkg.SpecifiedVersionMode = field.NewInt32(tableName, "specified_version_mode")
	_tOpmOtaPkg.SpecifiedVersion = field.NewString(tableName, "specified_version")
	_tOpmOtaPkg.SpecifiedAreaMode = field.NewInt32(tableName, "specified_area_mode")
	_tOpmOtaPkg.SpecifiedArea = field.NewString(tableName, "specified_area")
	_tOpmOtaPkg.Md5 = field.NewString(tableName, "md5")
	_tOpmOtaPkg.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpmOtaPkg.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOpmOtaPkg.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmOtaPkg.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOpmOtaPkg.DeletedAt = field.NewField(tableName, "deleted_at")
	_tOpmOtaPkg.TenantId = field.NewString(tableName, "tenant_id")
	_tOpmOtaPkg.UpgradeTimeMode = field.NewInt32(tableName, "upgrade_time_mode")
	_tOpmOtaPkg.IsCustomFirmware = field.NewInt32(tableName, "is_custom_firmware")
	_tOpmOtaPkg.IsMustVersion = field.NewInt32(tableName, "is_must_version")

	_tOpmOtaPkg.fillFieldMap()

	return _tOpmOtaPkg
}

type tOpmOtaPkg struct {
	tOpmOtaPkgDo tOpmOtaPkgDo

	ALL                  field.Field
	Id                   field.Int64
	ProductId            field.Int64
	ProductKey           field.String
	Type                 field.Int32
	FirmwareId           field.Int64
	FirmwareFlag         field.String
	FirmwareType         field.Int32
	VersionId            field.Int64
	Version              field.String
	UpgradeMode          field.Int32
	Url                  field.String
	Status               field.Int32
	IsAuto               field.Int32
	UpgradeDesc          field.String
	UpgradeDescEn        field.String
	AutoStartAt          field.String
	AutoEndAt            field.String
	SpecifiedVersionMode field.Int32
	SpecifiedVersion     field.String
	SpecifiedAreaMode    field.Int32
	SpecifiedArea        field.String
	Md5                  field.String
	CreatedBy            field.Int64
	UpdatedBy            field.Int64
	CreatedAt            field.Time
	UpdatedAt            field.Time
	DeletedAt            field.Field
	TenantId             field.String
	UpgradeTimeMode      field.Int32
	IsCustomFirmware     field.Int32
	IsMustVersion        field.Int32

	fieldMap map[string]field.Expr
}

func (t tOpmOtaPkg) Table(newTableName string) *tOpmOtaPkg {
	t.tOpmOtaPkgDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmOtaPkg) As(alias string) *tOpmOtaPkg {
	t.tOpmOtaPkgDo.DO = *(t.tOpmOtaPkgDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmOtaPkg) updateTableName(table string) *tOpmOtaPkg {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ProductId = field.NewInt64(table, "product_id")
	t.ProductKey = field.NewString(table, "product_key")
	t.Type = field.NewInt32(table, "type")
	t.FirmwareId = field.NewInt64(table, "firmware_id")
	t.FirmwareFlag = field.NewString(table, "firmware_flag")
	t.FirmwareType = field.NewInt32(table, "firmware_type")
	t.VersionId = field.NewInt64(table, "version_id")
	t.Version = field.NewString(table, "version")
	t.UpgradeMode = field.NewInt32(table, "upgrade_mode")
	t.Url = field.NewString(table, "url")
	t.Status = field.NewInt32(table, "status")
	t.IsAuto = field.NewInt32(table, "is_auto")
	t.UpgradeDesc = field.NewString(table, "upgrade_desc")
	t.UpgradeDescEn = field.NewString(table, "upgrade_desc_en")
	t.AutoStartAt = field.NewString(table, "auto_start_at")
	t.AutoEndAt = field.NewString(table, "auto_end_at")
	t.SpecifiedVersionMode = field.NewInt32(table, "specified_version_mode")
	t.SpecifiedVersion = field.NewString(table, "specified_version")
	t.SpecifiedAreaMode = field.NewInt32(table, "specified_area_mode")
	t.SpecifiedArea = field.NewString(table, "specified_area")
	t.Md5 = field.NewString(table, "md5")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.TenantId = field.NewString(table, "tenant_id")
	t.UpgradeTimeMode = field.NewInt32(table, "upgrade_time_mode")
	t.IsCustomFirmware = field.NewInt32(table, "is_custom_firmware")
	t.IsMustVersion = field.NewInt32(table, "is_must_version")

	t.fillFieldMap()

	return t
}

func (t *tOpmOtaPkg) WithContext(ctx context.Context) *tOpmOtaPkgDo {
	return t.tOpmOtaPkgDo.WithContext(ctx)
}

func (t tOpmOtaPkg) TableName() string { return t.tOpmOtaPkgDo.TableName() }

func (t tOpmOtaPkg) Alias() string { return t.tOpmOtaPkgDo.Alias() }

func (t *tOpmOtaPkg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmOtaPkg) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 31)
	t.fieldMap["id"] = t.Id
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["type"] = t.Type
	t.fieldMap["firmware_id"] = t.FirmwareId
	t.fieldMap["firmware_flag"] = t.FirmwareFlag
	t.fieldMap["firmware_type"] = t.FirmwareType
	t.fieldMap["version_id"] = t.VersionId
	t.fieldMap["version"] = t.Version
	t.fieldMap["upgrade_mode"] = t.UpgradeMode
	t.fieldMap["url"] = t.Url
	t.fieldMap["status"] = t.Status
	t.fieldMap["is_auto"] = t.IsAuto
	t.fieldMap["upgrade_desc"] = t.UpgradeDesc
	t.fieldMap["upgrade_desc_en"] = t.UpgradeDescEn
	t.fieldMap["auto_start_at"] = t.AutoStartAt
	t.fieldMap["auto_end_at"] = t.AutoEndAt
	t.fieldMap["specified_version_mode"] = t.SpecifiedVersionMode
	t.fieldMap["specified_version"] = t.SpecifiedVersion
	t.fieldMap["specified_area_mode"] = t.SpecifiedAreaMode
	t.fieldMap["specified_area"] = t.SpecifiedArea
	t.fieldMap["md5"] = t.Md5
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["upgrade_time_mode"] = t.UpgradeTimeMode
	t.fieldMap["is_custom_firmware"] = t.IsCustomFirmware
	t.fieldMap["is_must_version"] = t.IsMustVersion
}

func (t tOpmOtaPkg) clone(db *gorm.DB) tOpmOtaPkg {
	t.tOpmOtaPkgDo.ReplaceDB(db)
	return t
}

type tOpmOtaPkgDo struct{ gen.DO }

func (t tOpmOtaPkgDo) Debug() *tOpmOtaPkgDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmOtaPkgDo) WithContext(ctx context.Context) *tOpmOtaPkgDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmOtaPkgDo) Clauses(conds ...clause.Expression) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmOtaPkgDo) Returning(value interface{}, columns ...string) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmOtaPkgDo) Not(conds ...gen.Condition) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmOtaPkgDo) Or(conds ...gen.Condition) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmOtaPkgDo) Select(conds ...field.Expr) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmOtaPkgDo) Where(conds ...gen.Condition) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmOtaPkgDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmOtaPkgDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmOtaPkgDo) Order(conds ...field.Expr) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmOtaPkgDo) Distinct(cols ...field.Expr) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmOtaPkgDo) Omit(cols ...field.Expr) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmOtaPkgDo) Join(table schema.Tabler, on ...field.Expr) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmOtaPkgDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmOtaPkgDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmOtaPkgDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmOtaPkgDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmOtaPkgDo) Group(cols ...field.Expr) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmOtaPkgDo) Having(conds ...gen.Condition) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmOtaPkgDo) Limit(limit int) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmOtaPkgDo) Offset(offset int) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmOtaPkgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmOtaPkgDo) Unscoped() *tOpmOtaPkgDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmOtaPkgDo) Create(values ...*model.TOpmOtaPkg) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmOtaPkgDo) CreateInBatches(values []*model.TOpmOtaPkg, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmOtaPkgDo) Save(values ...*model.TOpmOtaPkg) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmOtaPkgDo) First() (*model.TOpmOtaPkg, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmOtaPkg), nil
	}
}

func (t tOpmOtaPkgDo) Take() (*model.TOpmOtaPkg, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmOtaPkg), nil
	}
}

func (t tOpmOtaPkgDo) Last() (*model.TOpmOtaPkg, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmOtaPkg), nil
	}
}

func (t tOpmOtaPkgDo) Find() ([]*model.TOpmOtaPkg, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmOtaPkg), err
}

func (t tOpmOtaPkgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmOtaPkg, err error) {
	buf := make([]*model.TOpmOtaPkg, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmOtaPkgDo) FindInBatches(result *[]*model.TOpmOtaPkg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmOtaPkgDo) Attrs(attrs ...field.AssignExpr) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmOtaPkgDo) Assign(attrs ...field.AssignExpr) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmOtaPkgDo) Joins(field field.RelationField) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmOtaPkgDo) Preload(field field.RelationField) *tOpmOtaPkgDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmOtaPkgDo) FirstOrInit() (*model.TOpmOtaPkg, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmOtaPkg), nil
	}
}

func (t tOpmOtaPkgDo) FirstOrCreate() (*model.TOpmOtaPkg, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmOtaPkg), nil
	}
}

func (t tOpmOtaPkgDo) FindByPage(offset int, limit int) (result []*model.TOpmOtaPkg, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmOtaPkgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmOtaPkgDo) withDO(do gen.Dao) *tOpmOtaPkgDo {
	t.DO = *do.(*gen.DO)
	return t
}
