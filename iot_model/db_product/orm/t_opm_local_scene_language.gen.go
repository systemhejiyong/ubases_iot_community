// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmLocalSceneLanguage(db *gorm.DB) tOpmLocalSceneLanguage {
	_tOpmLocalSceneLanguage := tOpmLocalSceneLanguage{}

	_tOpmLocalSceneLanguage.tOpmLocalSceneLanguageDo.UseDB(db)
	_tOpmLocalSceneLanguage.tOpmLocalSceneLanguageDo.UseModel(&model.TOpmLocalSceneLanguage{})

	tableName := _tOpmLocalSceneLanguage.tOpmLocalSceneLanguageDo.TableName()
	_tOpmLocalSceneLanguage.ALL = field.NewField(tableName, "*")
	_tOpmLocalSceneLanguage.Id = field.NewInt64(tableName, "id")
	_tOpmLocalSceneLanguage.SceneId = field.NewInt64(tableName, "scene_id")
	_tOpmLocalSceneLanguage.Lang = field.NewString(tableName, "lang")
	_tOpmLocalSceneLanguage.Title = field.NewString(tableName, "title")
	_tOpmLocalSceneLanguage.SubTitle = field.NewString(tableName, "sub_title")
	_tOpmLocalSceneLanguage.Desc = field.NewString(tableName, "desc")

	_tOpmLocalSceneLanguage.fillFieldMap()

	return _tOpmLocalSceneLanguage
}

type tOpmLocalSceneLanguage struct {
	tOpmLocalSceneLanguageDo tOpmLocalSceneLanguageDo

	ALL      field.Field
	Id       field.Int64
	SceneId  field.Int64
	Lang     field.String
	Title    field.String
	SubTitle field.String
	Desc     field.String

	fieldMap map[string]field.Expr
}

func (t tOpmLocalSceneLanguage) Table(newTableName string) *tOpmLocalSceneLanguage {
	t.tOpmLocalSceneLanguageDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmLocalSceneLanguage) As(alias string) *tOpmLocalSceneLanguage {
	t.tOpmLocalSceneLanguageDo.DO = *(t.tOpmLocalSceneLanguageDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmLocalSceneLanguage) updateTableName(table string) *tOpmLocalSceneLanguage {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.SceneId = field.NewInt64(table, "scene_id")
	t.Lang = field.NewString(table, "lang")
	t.Title = field.NewString(table, "title")
	t.SubTitle = field.NewString(table, "sub_title")
	t.Desc = field.NewString(table, "desc")

	t.fillFieldMap()

	return t
}

func (t *tOpmLocalSceneLanguage) WithContext(ctx context.Context) *tOpmLocalSceneLanguageDo {
	return t.tOpmLocalSceneLanguageDo.WithContext(ctx)
}

func (t tOpmLocalSceneLanguage) TableName() string { return t.tOpmLocalSceneLanguageDo.TableName() }

func (t tOpmLocalSceneLanguage) Alias() string { return t.tOpmLocalSceneLanguageDo.Alias() }

func (t *tOpmLocalSceneLanguage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmLocalSceneLanguage) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.Id
	t.fieldMap["scene_id"] = t.SceneId
	t.fieldMap["lang"] = t.Lang
	t.fieldMap["title"] = t.Title
	t.fieldMap["sub_title"] = t.SubTitle
	t.fieldMap["desc"] = t.Desc
}

func (t tOpmLocalSceneLanguage) clone(db *gorm.DB) tOpmLocalSceneLanguage {
	t.tOpmLocalSceneLanguageDo.ReplaceDB(db)
	return t
}

type tOpmLocalSceneLanguageDo struct{ gen.DO }

func (t tOpmLocalSceneLanguageDo) Debug() *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmLocalSceneLanguageDo) WithContext(ctx context.Context) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmLocalSceneLanguageDo) Clauses(conds ...clause.Expression) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmLocalSceneLanguageDo) Returning(value interface{}, columns ...string) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmLocalSceneLanguageDo) Not(conds ...gen.Condition) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmLocalSceneLanguageDo) Or(conds ...gen.Condition) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmLocalSceneLanguageDo) Select(conds ...field.Expr) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmLocalSceneLanguageDo) Where(conds ...gen.Condition) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmLocalSceneLanguageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmLocalSceneLanguageDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmLocalSceneLanguageDo) Order(conds ...field.Expr) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmLocalSceneLanguageDo) Distinct(cols ...field.Expr) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmLocalSceneLanguageDo) Omit(cols ...field.Expr) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmLocalSceneLanguageDo) Join(table schema.Tabler, on ...field.Expr) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmLocalSceneLanguageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmLocalSceneLanguageDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmLocalSceneLanguageDo) Group(cols ...field.Expr) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmLocalSceneLanguageDo) Having(conds ...gen.Condition) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmLocalSceneLanguageDo) Limit(limit int) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmLocalSceneLanguageDo) Offset(offset int) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmLocalSceneLanguageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmLocalSceneLanguageDo) Unscoped() *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmLocalSceneLanguageDo) Create(values ...*model.TOpmLocalSceneLanguage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmLocalSceneLanguageDo) CreateInBatches(values []*model.TOpmLocalSceneLanguage, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmLocalSceneLanguageDo) Save(values ...*model.TOpmLocalSceneLanguage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmLocalSceneLanguageDo) First() (*model.TOpmLocalSceneLanguage, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmLocalSceneLanguage), nil
	}
}

func (t tOpmLocalSceneLanguageDo) Take() (*model.TOpmLocalSceneLanguage, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmLocalSceneLanguage), nil
	}
}

func (t tOpmLocalSceneLanguageDo) Last() (*model.TOpmLocalSceneLanguage, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmLocalSceneLanguage), nil
	}
}

func (t tOpmLocalSceneLanguageDo) Find() ([]*model.TOpmLocalSceneLanguage, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmLocalSceneLanguage), err
}

func (t tOpmLocalSceneLanguageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmLocalSceneLanguage, err error) {
	buf := make([]*model.TOpmLocalSceneLanguage, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmLocalSceneLanguageDo) FindInBatches(result *[]*model.TOpmLocalSceneLanguage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmLocalSceneLanguageDo) Attrs(attrs ...field.AssignExpr) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmLocalSceneLanguageDo) Assign(attrs ...field.AssignExpr) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmLocalSceneLanguageDo) Joins(field field.RelationField) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmLocalSceneLanguageDo) Preload(field field.RelationField) *tOpmLocalSceneLanguageDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmLocalSceneLanguageDo) FirstOrInit() (*model.TOpmLocalSceneLanguage, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmLocalSceneLanguage), nil
	}
}

func (t tOpmLocalSceneLanguageDo) FirstOrCreate() (*model.TOpmLocalSceneLanguage, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmLocalSceneLanguage), nil
	}
}

func (t tOpmLocalSceneLanguageDo) FindByPage(offset int, limit int) (result []*model.TOpmLocalSceneLanguage, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmLocalSceneLanguageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmLocalSceneLanguageDo) withDO(do gen.Dao) *tOpmLocalSceneLanguageDo {
	t.DO = *do.(*gen.DO)
	return t
}
