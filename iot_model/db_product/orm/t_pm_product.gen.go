// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTPmProduct(db *gorm.DB) tPmProduct {
	_tPmProduct := tPmProduct{}

	_tPmProduct.tPmProductDo.UseDB(db)
	_tPmProduct.tPmProductDo.UseModel(&model.TPmProduct{})

	tableName := _tPmProduct.tPmProductDo.TableName()
	_tPmProduct.ALL = field.NewField(tableName, "*")
	_tPmProduct.Id = field.NewInt64(tableName, "id")
	_tPmProduct.ProductTypeId = field.NewInt64(tableName, "product_type_id")
	_tPmProduct.ProductKey = field.NewString(tableName, "product_key")
	_tPmProduct.Name = field.NewString(tableName, "name")
	_tPmProduct.NameEn = field.NewString(tableName, "name_en")
	_tPmProduct.Identifier = field.NewString(tableName, "identifier")
	_tPmProduct.Model = field.NewString(tableName, "model")
	_tPmProduct.ImageUrl = field.NewString(tableName, "image_url")
	_tPmProduct.WifiFlag = field.NewString(tableName, "wifi_flag")
	_tPmProduct.NetworkType = field.NewInt32(tableName, "network_type")
	_tPmProduct.AttributeType = field.NewInt32(tableName, "attribute_type")
	_tPmProduct.PowerConsumeType = field.NewInt32(tableName, "power_consume_type")
	_tPmProduct.Status = field.NewInt32(tableName, "status")
	_tPmProduct.IsVirtualTest = field.NewInt32(tableName, "is_virtual_test")
	_tPmProduct.Desc = field.NewString(tableName, "desc")
	_tPmProduct.CreatedBy = field.NewInt64(tableName, "created_by")
	_tPmProduct.CreatedAt = field.NewTime(tableName, "created_at")
	_tPmProduct.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tPmProduct.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tPmProduct.DeletedAt = field.NewField(tableName, "deleted_at")
	_tPmProduct.ProductTypeName = field.NewString(tableName, "product_type_name")
	_tPmProduct.ProductTypeIdPath = field.NewString(tableName, "product_type_id_path")

	_tPmProduct.fillFieldMap()

	return _tPmProduct
}

type tPmProduct struct {
	tPmProductDo tPmProductDo

	ALL               field.Field
	Id                field.Int64
	ProductTypeId     field.Int64
	ProductKey        field.String
	Name              field.String
	NameEn            field.String
	Identifier        field.String
	Model             field.String
	ImageUrl          field.String
	WifiFlag          field.String
	NetworkType       field.Int32
	AttributeType     field.Int32
	PowerConsumeType  field.Int32
	Status            field.Int32
	IsVirtualTest     field.Int32
	Desc              field.String
	CreatedBy         field.Int64
	CreatedAt         field.Time
	UpdatedBy         field.Int64
	UpdatedAt         field.Time
	DeletedAt         field.Field
	ProductTypeName   field.String
	ProductTypeIdPath field.String

	fieldMap map[string]field.Expr
}

func (t tPmProduct) Table(newTableName string) *tPmProduct {
	t.tPmProductDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPmProduct) As(alias string) *tPmProduct {
	t.tPmProductDo.DO = *(t.tPmProductDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tPmProduct) updateTableName(table string) *tPmProduct {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ProductTypeId = field.NewInt64(table, "product_type_id")
	t.ProductKey = field.NewString(table, "product_key")
	t.Name = field.NewString(table, "name")
	t.NameEn = field.NewString(table, "name_en")
	t.Identifier = field.NewString(table, "identifier")
	t.Model = field.NewString(table, "model")
	t.ImageUrl = field.NewString(table, "image_url")
	t.WifiFlag = field.NewString(table, "wifi_flag")
	t.NetworkType = field.NewInt32(table, "network_type")
	t.AttributeType = field.NewInt32(table, "attribute_type")
	t.PowerConsumeType = field.NewInt32(table, "power_consume_type")
	t.Status = field.NewInt32(table, "status")
	t.IsVirtualTest = field.NewInt32(table, "is_virtual_test")
	t.Desc = field.NewString(table, "desc")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.ProductTypeName = field.NewString(table, "product_type_name")
	t.ProductTypeIdPath = field.NewString(table, "product_type_id_path")

	t.fillFieldMap()

	return t
}

func (t *tPmProduct) WithContext(ctx context.Context) *tPmProductDo {
	return t.tPmProductDo.WithContext(ctx)
}

func (t tPmProduct) TableName() string { return t.tPmProductDo.TableName() }

func (t tPmProduct) Alias() string { return t.tPmProductDo.Alias() }

func (t *tPmProduct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPmProduct) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 22)
	t.fieldMap["id"] = t.Id
	t.fieldMap["product_type_id"] = t.ProductTypeId
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["name"] = t.Name
	t.fieldMap["name_en"] = t.NameEn
	t.fieldMap["identifier"] = t.Identifier
	t.fieldMap["model"] = t.Model
	t.fieldMap["image_url"] = t.ImageUrl
	t.fieldMap["wifi_flag"] = t.WifiFlag
	t.fieldMap["network_type"] = t.NetworkType
	t.fieldMap["attribute_type"] = t.AttributeType
	t.fieldMap["power_consume_type"] = t.PowerConsumeType
	t.fieldMap["status"] = t.Status
	t.fieldMap["is_virtual_test"] = t.IsVirtualTest
	t.fieldMap["desc"] = t.Desc
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["product_type_name"] = t.ProductTypeName
	t.fieldMap["product_type_id_path"] = t.ProductTypeIdPath
}

func (t tPmProduct) clone(db *gorm.DB) tPmProduct {
	t.tPmProductDo.ReplaceDB(db)
	return t
}

type tPmProductDo struct{ gen.DO }

func (t tPmProductDo) Debug() *tPmProductDo {
	return t.withDO(t.DO.Debug())
}

func (t tPmProductDo) WithContext(ctx context.Context) *tPmProductDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPmProductDo) Clauses(conds ...clause.Expression) *tPmProductDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPmProductDo) Returning(value interface{}, columns ...string) *tPmProductDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPmProductDo) Not(conds ...gen.Condition) *tPmProductDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPmProductDo) Or(conds ...gen.Condition) *tPmProductDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPmProductDo) Select(conds ...field.Expr) *tPmProductDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPmProductDo) Where(conds ...gen.Condition) *tPmProductDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPmProductDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tPmProductDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tPmProductDo) Order(conds ...field.Expr) *tPmProductDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPmProductDo) Distinct(cols ...field.Expr) *tPmProductDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPmProductDo) Omit(cols ...field.Expr) *tPmProductDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPmProductDo) Join(table schema.Tabler, on ...field.Expr) *tPmProductDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPmProductDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tPmProductDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPmProductDo) RightJoin(table schema.Tabler, on ...field.Expr) *tPmProductDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPmProductDo) Group(cols ...field.Expr) *tPmProductDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPmProductDo) Having(conds ...gen.Condition) *tPmProductDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPmProductDo) Limit(limit int) *tPmProductDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPmProductDo) Offset(offset int) *tPmProductDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPmProductDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tPmProductDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPmProductDo) Unscoped() *tPmProductDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPmProductDo) Create(values ...*model.TPmProduct) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPmProductDo) CreateInBatches(values []*model.TPmProduct, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPmProductDo) Save(values ...*model.TPmProduct) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPmProductDo) First() (*model.TPmProduct, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmProduct), nil
	}
}

func (t tPmProductDo) Take() (*model.TPmProduct, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmProduct), nil
	}
}

func (t tPmProductDo) Last() (*model.TPmProduct, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmProduct), nil
	}
}

func (t tPmProductDo) Find() ([]*model.TPmProduct, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPmProduct), err
}

func (t tPmProductDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPmProduct, err error) {
	buf := make([]*model.TPmProduct, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPmProductDo) FindInBatches(result *[]*model.TPmProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPmProductDo) Attrs(attrs ...field.AssignExpr) *tPmProductDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPmProductDo) Assign(attrs ...field.AssignExpr) *tPmProductDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPmProductDo) Joins(field field.RelationField) *tPmProductDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tPmProductDo) Preload(field field.RelationField) *tPmProductDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tPmProductDo) FirstOrInit() (*model.TPmProduct, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmProduct), nil
	}
}

func (t tPmProductDo) FirstOrCreate() (*model.TPmProduct, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmProduct), nil
	}
}

func (t tPmProductDo) FindByPage(offset int, limit int) (result []*model.TPmProduct, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPmProductDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tPmProductDo) withDO(do gen.Dao) *tPmProductDo {
	t.DO = *do.(*gen.DO)
	return t
}
