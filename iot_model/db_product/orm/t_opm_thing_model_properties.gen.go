// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmThingModelProperties(db *gorm.DB) tOpmThingModelProperties {
	_tOpmThingModelProperties := tOpmThingModelProperties{}

	_tOpmThingModelProperties.tOpmThingModelPropertiesDo.UseDB(db)
	_tOpmThingModelProperties.tOpmThingModelPropertiesDo.UseModel(&model.TOpmThingModelProperties{})

	tableName := _tOpmThingModelProperties.tOpmThingModelPropertiesDo.TableName()
	_tOpmThingModelProperties.ALL = field.NewField(tableName, "*")
	_tOpmThingModelProperties.Id = field.NewInt64(tableName, "id")
	_tOpmThingModelProperties.ModelId = field.NewInt64(tableName, "model_id")
	_tOpmThingModelProperties.ProductId = field.NewString(tableName, "product_id")
	_tOpmThingModelProperties.CreateTs = field.NewString(tableName, "create_ts")
	_tOpmThingModelProperties.Identifier = field.NewString(tableName, "identifier")
	_tOpmThingModelProperties.DataType = field.NewString(tableName, "data_type")
	_tOpmThingModelProperties.Name = field.NewString(tableName, "name")
	_tOpmThingModelProperties.RwFlag = field.NewString(tableName, "rw_flag")
	_tOpmThingModelProperties.DataSpecs = field.NewString(tableName, "data_specs")
	_tOpmThingModelProperties.DataSpecsList = field.NewString(tableName, "data_specs_list")
	_tOpmThingModelProperties.Required = field.NewInt32(tableName, "required")
	_tOpmThingModelProperties.Custom = field.NewInt32(tableName, "custom")
	_tOpmThingModelProperties.Extension = field.NewString(tableName, "extension")
	_tOpmThingModelProperties.Desc = field.NewString(tableName, "desc")
	_tOpmThingModelProperties.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpmThingModelProperties.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmThingModelProperties.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOpmThingModelProperties.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOpmThingModelProperties.TenantId = field.NewString(tableName, "tenant_id")
	_tOpmThingModelProperties.StdId = field.NewInt64(tableName, "std_id")
	_tOpmThingModelProperties.Valid = field.NewInt32(tableName, "valid")
	_tOpmThingModelProperties.ProductKey = field.NewString(tableName, "product_key")
	_tOpmThingModelProperties.TriggerCond = field.NewInt32(tableName, "trigger_cond")
	_tOpmThingModelProperties.ExecCond = field.NewInt32(tableName, "exec_cond")
	_tOpmThingModelProperties.Dpid = field.NewInt32(tableName, "dpid")
	_tOpmThingModelProperties.DefaultVal = field.NewString(tableName, "default_val")
	_tOpmThingModelProperties.TriggerCondArgs = field.NewString(tableName, "trigger_cond_args")
	_tOpmThingModelProperties.ExecCondArgs = field.NewString(tableName, "exec_cond_args")
	_tOpmThingModelProperties.AllowAppointment = field.NewInt32(tableName, "allow_appointment")
	_tOpmThingModelProperties.AppointmentArgs = field.NewString(tableName, "appointment_args")
	_tOpmThingModelProperties.IsTop = field.NewInt32(tableName, "is_top")
	_tOpmThingModelProperties.ParentId = field.NewInt64(tableName, "parent_id")
	_tOpmThingModelProperties.Sort = field.NewInt32(tableName, "sort")

	_tOpmThingModelProperties.fillFieldMap()

	return _tOpmThingModelProperties
}

type tOpmThingModelProperties struct {
	tOpmThingModelPropertiesDo tOpmThingModelPropertiesDo

	ALL              field.Field
	Id               field.Int64
	ModelId          field.Int64
	ProductId        field.String
	CreateTs         field.String
	Identifier       field.String
	DataType         field.String
	Name             field.String
	RwFlag           field.String
	DataSpecs        field.String
	DataSpecsList    field.String
	Required         field.Int32
	Custom           field.Int32
	Extension        field.String
	Desc             field.String
	CreatedBy        field.Int64
	CreatedAt        field.Time
	UpdatedBy        field.Int64
	UpdatedAt        field.Time
	TenantId         field.String
	StdId            field.Int64
	Valid            field.Int32
	ProductKey       field.String
	TriggerCond      field.Int32
	ExecCond         field.Int32
	Dpid             field.Int32
	DefaultVal       field.String
	TriggerCondArgs  field.String
	ExecCondArgs     field.String
	AllowAppointment field.Int32
	AppointmentArgs  field.String
	IsTop            field.Int32
	ParentId         field.Int64
	Sort             field.Int32

	fieldMap map[string]field.Expr
}

func (t tOpmThingModelProperties) Table(newTableName string) *tOpmThingModelProperties {
	t.tOpmThingModelPropertiesDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmThingModelProperties) As(alias string) *tOpmThingModelProperties {
	t.tOpmThingModelPropertiesDo.DO = *(t.tOpmThingModelPropertiesDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmThingModelProperties) updateTableName(table string) *tOpmThingModelProperties {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ModelId = field.NewInt64(table, "model_id")
	t.ProductId = field.NewString(table, "product_id")
	t.CreateTs = field.NewString(table, "create_ts")
	t.Identifier = field.NewString(table, "identifier")
	t.DataType = field.NewString(table, "data_type")
	t.Name = field.NewString(table, "name")
	t.RwFlag = field.NewString(table, "rw_flag")
	t.DataSpecs = field.NewString(table, "data_specs")
	t.DataSpecsList = field.NewString(table, "data_specs_list")
	t.Required = field.NewInt32(table, "required")
	t.Custom = field.NewInt32(table, "custom")
	t.Extension = field.NewString(table, "extension")
	t.Desc = field.NewString(table, "desc")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.TenantId = field.NewString(table, "tenant_id")
	t.StdId = field.NewInt64(table, "std_id")
	t.Valid = field.NewInt32(table, "valid")
	t.ProductKey = field.NewString(table, "product_key")
	t.TriggerCond = field.NewInt32(table, "trigger_cond")
	t.ExecCond = field.NewInt32(table, "exec_cond")
	t.Dpid = field.NewInt32(table, "dpid")
	t.DefaultVal = field.NewString(table, "default_val")
	t.TriggerCondArgs = field.NewString(table, "trigger_cond_args")
	t.ExecCondArgs = field.NewString(table, "exec_cond_args")
	t.AllowAppointment = field.NewInt32(table, "allow_appointment")
	t.AppointmentArgs = field.NewString(table, "appointment_args")
	t.IsTop = field.NewInt32(table, "is_top")
	t.ParentId = field.NewInt64(table, "parent_id")
	t.Sort = field.NewInt32(table, "sort")

	t.fillFieldMap()

	return t
}

func (t *tOpmThingModelProperties) WithContext(ctx context.Context) *tOpmThingModelPropertiesDo {
	return t.tOpmThingModelPropertiesDo.WithContext(ctx)
}

func (t tOpmThingModelProperties) TableName() string { return t.tOpmThingModelPropertiesDo.TableName() }

func (t tOpmThingModelProperties) Alias() string { return t.tOpmThingModelPropertiesDo.Alias() }

func (t *tOpmThingModelProperties) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmThingModelProperties) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 33)
	t.fieldMap["id"] = t.Id
	t.fieldMap["model_id"] = t.ModelId
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["create_ts"] = t.CreateTs
	t.fieldMap["identifier"] = t.Identifier
	t.fieldMap["data_type"] = t.DataType
	t.fieldMap["name"] = t.Name
	t.fieldMap["rw_flag"] = t.RwFlag
	t.fieldMap["data_specs"] = t.DataSpecs
	t.fieldMap["data_specs_list"] = t.DataSpecsList
	t.fieldMap["required"] = t.Required
	t.fieldMap["custom"] = t.Custom
	t.fieldMap["extension"] = t.Extension
	t.fieldMap["desc"] = t.Desc
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["std_id"] = t.StdId
	t.fieldMap["valid"] = t.Valid
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["trigger_cond"] = t.TriggerCond
	t.fieldMap["exec_cond"] = t.ExecCond
	t.fieldMap["dpid"] = t.Dpid
	t.fieldMap["default_val"] = t.DefaultVal
	t.fieldMap["trigger_cond_args"] = t.TriggerCondArgs
	t.fieldMap["exec_cond_args"] = t.ExecCondArgs
	t.fieldMap["allow_appointment"] = t.AllowAppointment
	t.fieldMap["appointment_args"] = t.AppointmentArgs
	t.fieldMap["is_top"] = t.IsTop
	t.fieldMap["parent_id"] = t.ParentId
	t.fieldMap["sort"] = t.Sort
}

func (t tOpmThingModelProperties) clone(db *gorm.DB) tOpmThingModelProperties {
	t.tOpmThingModelPropertiesDo.ReplaceDB(db)
	return t
}

type tOpmThingModelPropertiesDo struct{ gen.DO }

func (t tOpmThingModelPropertiesDo) Debug() *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmThingModelPropertiesDo) WithContext(ctx context.Context) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmThingModelPropertiesDo) Clauses(conds ...clause.Expression) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmThingModelPropertiesDo) Returning(value interface{}, columns ...string) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmThingModelPropertiesDo) Not(conds ...gen.Condition) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmThingModelPropertiesDo) Or(conds ...gen.Condition) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmThingModelPropertiesDo) Select(conds ...field.Expr) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmThingModelPropertiesDo) Where(conds ...gen.Condition) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmThingModelPropertiesDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmThingModelPropertiesDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmThingModelPropertiesDo) Order(conds ...field.Expr) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmThingModelPropertiesDo) Distinct(cols ...field.Expr) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmThingModelPropertiesDo) Omit(cols ...field.Expr) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmThingModelPropertiesDo) Join(table schema.Tabler, on ...field.Expr) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmThingModelPropertiesDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmThingModelPropertiesDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmThingModelPropertiesDo) Group(cols ...field.Expr) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmThingModelPropertiesDo) Having(conds ...gen.Condition) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmThingModelPropertiesDo) Limit(limit int) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmThingModelPropertiesDo) Offset(offset int) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmThingModelPropertiesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmThingModelPropertiesDo) Unscoped() *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmThingModelPropertiesDo) Create(values ...*model.TOpmThingModelProperties) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmThingModelPropertiesDo) CreateInBatches(values []*model.TOpmThingModelProperties, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmThingModelPropertiesDo) Save(values ...*model.TOpmThingModelProperties) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmThingModelPropertiesDo) First() (*model.TOpmThingModelProperties, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmThingModelProperties), nil
	}
}

func (t tOpmThingModelPropertiesDo) Take() (*model.TOpmThingModelProperties, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmThingModelProperties), nil
	}
}

func (t tOpmThingModelPropertiesDo) Last() (*model.TOpmThingModelProperties, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmThingModelProperties), nil
	}
}

func (t tOpmThingModelPropertiesDo) Find() ([]*model.TOpmThingModelProperties, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmThingModelProperties), err
}

func (t tOpmThingModelPropertiesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmThingModelProperties, err error) {
	buf := make([]*model.TOpmThingModelProperties, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmThingModelPropertiesDo) FindInBatches(result *[]*model.TOpmThingModelProperties, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmThingModelPropertiesDo) Attrs(attrs ...field.AssignExpr) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmThingModelPropertiesDo) Assign(attrs ...field.AssignExpr) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmThingModelPropertiesDo) Joins(field field.RelationField) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmThingModelPropertiesDo) Preload(field field.RelationField) *tOpmThingModelPropertiesDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmThingModelPropertiesDo) FirstOrInit() (*model.TOpmThingModelProperties, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmThingModelProperties), nil
	}
}

func (t tOpmThingModelPropertiesDo) FirstOrCreate() (*model.TOpmThingModelProperties, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmThingModelProperties), nil
	}
}

func (t tOpmThingModelPropertiesDo) FindByPage(offset int, limit int) (result []*model.TOpmThingModelProperties, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmThingModelPropertiesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmThingModelPropertiesDo) withDO(do gen.Dao) *tOpmThingModelPropertiesDo {
	t.DO = *do.(*gen.DO)
	return t
}
