// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmPanel(db *gorm.DB) tOpmPanel {
	_tOpmPanel := tOpmPanel{}

	_tOpmPanel.tOpmPanelDo.UseDB(db)
	_tOpmPanel.tOpmPanelDo.UseModel(&model.TOpmPanel{})

	tableName := _tOpmPanel.tOpmPanelDo.TableName()
	_tOpmPanel.ALL = field.NewField(tableName, "*")
	_tOpmPanel.Id = field.NewInt64(tableName, "id")
	_tOpmPanel.TenantId = field.NewString(tableName, "tenant_id")
	_tOpmPanel.PanelName = field.NewString(tableName, "panel_name")
	_tOpmPanel.PanelType = field.NewInt32(tableName, "panel_type")
	_tOpmPanel.Status = field.NewInt32(tableName, "status")
	_tOpmPanel.BuildStatus = field.NewInt32(tableName, "build_status")
	_tOpmPanel.BuildDesc = field.NewString(tableName, "build_desc")
	_tOpmPanel.BuildTime = field.NewTime(tableName, "build_time")
	_tOpmPanel.BuildErrStatus = field.NewInt32(tableName, "build_err_status")
	_tOpmPanel.PanelUrl = field.NewString(tableName, "panel_url")
	_tOpmPanel.PanelUrlName = field.NewString(tableName, "panel_url_name")
	_tOpmPanel.PanelSize = field.NewInt32(tableName, "panel_size")
	_tOpmPanel.PanelKey = field.NewString(tableName, "panel_key")
	_tOpmPanel.PreviewName = field.NewString(tableName, "preview_name")
	_tOpmPanel.PreviewUrl = field.NewString(tableName, "preview_url")
	_tOpmPanel.PackageId = field.NewInt64(tableName, "package_id")
	_tOpmPanel.PackageName = field.NewString(tableName, "package_name")
	_tOpmPanel.ModelId = field.NewInt64(tableName, "model_id")
	_tOpmPanel.ModelName = field.NewString(tableName, "model_name")
	_tOpmPanel.Width = field.NewFloat64(tableName, "width")
	_tOpmPanel.Height = field.NewFloat64(tableName, "height")
	_tOpmPanel.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmPanel.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpmPanel.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOpmPanel.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOpmPanel.SourceZip = field.NewString(tableName, "source_zip")
	_tOpmPanel.BaseProductId = field.NewInt64(tableName, "base_product_id")
	_tOpmPanel.ProductId = field.NewInt64(tableName, "product_id")
	_tOpmPanel.ThemeJson = field.NewString(tableName, "theme_json")
	_tOpmPanel.LangFileName = field.NewString(tableName, "lang_file_name")
	_tOpmPanel.Remark = field.NewString(tableName, "remark")
	_tOpmPanel.Code = field.NewString(tableName, "code")

	_tOpmPanel.fillFieldMap()

	return _tOpmPanel
}

type tOpmPanel struct {
	tOpmPanelDo tOpmPanelDo

	ALL            field.Field
	Id             field.Int64
	TenantId       field.String
	PanelName      field.String
	PanelType      field.Int32
	Status         field.Int32
	BuildStatus    field.Int32
	BuildDesc      field.String
	BuildTime      field.Time
	BuildErrStatus field.Int32
	PanelUrl       field.String
	PanelUrlName   field.String
	PanelSize      field.Int32
	PanelKey       field.String
	PreviewName    field.String
	PreviewUrl     field.String
	PackageId      field.Int64
	PackageName    field.String
	ModelId        field.Int64
	ModelName      field.String
	Width          field.Float64
	Height         field.Float64
	CreatedAt      field.Time
	CreatedBy      field.Int64
	UpdatedAt      field.Time
	UpdatedBy      field.Int64
	SourceZip      field.String
	BaseProductId  field.Int64
	ProductId      field.Int64
	ThemeJson      field.String
	LangFileName   field.String
	Remark         field.String
	Code         field.String

	fieldMap map[string]field.Expr
}

func (t tOpmPanel) Table(newTableName string) *tOpmPanel {
	t.tOpmPanelDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmPanel) As(alias string) *tOpmPanel {
	t.tOpmPanelDo.DO = *(t.tOpmPanelDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmPanel) updateTableName(table string) *tOpmPanel {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.TenantId = field.NewString(table, "tenant_id")
	t.PanelName = field.NewString(table, "panel_name")
	t.PanelType = field.NewInt32(table, "panel_type")
	t.Status = field.NewInt32(table, "status")
	t.BuildStatus = field.NewInt32(table, "build_status")
	t.BuildDesc = field.NewString(table, "build_desc")
	t.BuildTime = field.NewTime(table, "build_time")
	t.BuildErrStatus = field.NewInt32(table, "build_err_status")
	t.PanelUrl = field.NewString(table, "panel_url")
	t.PanelUrlName = field.NewString(table, "panel_url_name")
	t.PanelSize = field.NewInt32(table, "panel_size")
	t.PanelKey = field.NewString(table, "panel_key")
	t.PreviewName = field.NewString(table, "preview_name")
	t.PreviewUrl = field.NewString(table, "preview_url")
	t.PackageId = field.NewInt64(table, "package_id")
	t.PackageName = field.NewString(table, "package_name")
	t.ModelId = field.NewInt64(table, "model_id")
	t.ModelName = field.NewString(table, "model_name")
	t.Width = field.NewFloat64(table, "width")
	t.Height = field.NewFloat64(table, "height")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.SourceZip = field.NewString(table, "source_zip")
	t.BaseProductId = field.NewInt64(table, "base_product_id")
	t.ProductId = field.NewInt64(table, "product_id")
	t.ThemeJson = field.NewString(table, "theme_json")
	t.LangFileName = field.NewString(table, "lang_file_name")
	t.Remark = field.NewString(table, "remark")
	t.Code = field.NewString(table, "code")

	t.fillFieldMap()

	return t
}

func (t *tOpmPanel) WithContext(ctx context.Context) *tOpmPanelDo {
	return t.tOpmPanelDo.WithContext(ctx)
}

func (t tOpmPanel) TableName() string { return t.tOpmPanelDo.TableName() }

func (t tOpmPanel) Alias() string { return t.tOpmPanelDo.Alias() }

func (t *tOpmPanel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmPanel) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 31)
	t.fieldMap["id"] = t.Id
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["panel_name"] = t.PanelName
	t.fieldMap["panel_type"] = t.PanelType
	t.fieldMap["status"] = t.Status
	t.fieldMap["build_status"] = t.BuildStatus
	t.fieldMap["build_desc"] = t.BuildDesc
	t.fieldMap["build_time"] = t.BuildTime
	t.fieldMap["build_err_status"] = t.BuildErrStatus
	t.fieldMap["panel_url"] = t.PanelUrl
	t.fieldMap["panel_url_name"] = t.PanelUrlName
	t.fieldMap["panel_size"] = t.PanelSize
	t.fieldMap["panel_key"] = t.PanelKey
	t.fieldMap["preview_name"] = t.PreviewName
	t.fieldMap["preview_url"] = t.PreviewUrl
	t.fieldMap["package_id"] = t.PackageId
	t.fieldMap["package_name"] = t.PackageName
	t.fieldMap["model_id"] = t.ModelId
	t.fieldMap["model_name"] = t.ModelName
	t.fieldMap["width"] = t.Width
	t.fieldMap["height"] = t.Height
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["source_zip"] = t.SourceZip
	t.fieldMap["base_product_id"] = t.BaseProductId
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["theme_json"] = t.ThemeJson
	t.fieldMap["lang_file_name"] = t.LangFileName
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["code"] = t.Code
}

func (t tOpmPanel) clone(db *gorm.DB) tOpmPanel {
	t.tOpmPanelDo.ReplaceDB(db)
	return t
}

type tOpmPanelDo struct{ gen.DO }

func (t tOpmPanelDo) Debug() *tOpmPanelDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmPanelDo) WithContext(ctx context.Context) *tOpmPanelDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmPanelDo) Clauses(conds ...clause.Expression) *tOpmPanelDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmPanelDo) Returning(value interface{}, columns ...string) *tOpmPanelDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmPanelDo) Not(conds ...gen.Condition) *tOpmPanelDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmPanelDo) Or(conds ...gen.Condition) *tOpmPanelDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmPanelDo) Select(conds ...field.Expr) *tOpmPanelDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmPanelDo) Where(conds ...gen.Condition) *tOpmPanelDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmPanelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmPanelDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmPanelDo) Order(conds ...field.Expr) *tOpmPanelDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmPanelDo) Distinct(cols ...field.Expr) *tOpmPanelDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmPanelDo) Omit(cols ...field.Expr) *tOpmPanelDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmPanelDo) Join(table schema.Tabler, on ...field.Expr) *tOpmPanelDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmPanelDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmPanelDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmPanelDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmPanelDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmPanelDo) Group(cols ...field.Expr) *tOpmPanelDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmPanelDo) Having(conds ...gen.Condition) *tOpmPanelDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmPanelDo) Limit(limit int) *tOpmPanelDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmPanelDo) Offset(offset int) *tOpmPanelDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmPanelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmPanelDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmPanelDo) Unscoped() *tOpmPanelDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmPanelDo) Create(values ...*model.TOpmPanel) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmPanelDo) CreateInBatches(values []*model.TOpmPanel, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmPanelDo) Save(values ...*model.TOpmPanel) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmPanelDo) First() (*model.TOpmPanel, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanel), nil
	}
}

func (t tOpmPanelDo) Take() (*model.TOpmPanel, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanel), nil
	}
}

func (t tOpmPanelDo) Last() (*model.TOpmPanel, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanel), nil
	}
}

func (t tOpmPanelDo) Find() ([]*model.TOpmPanel, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmPanel), err
}

func (t tOpmPanelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmPanel, err error) {
	buf := make([]*model.TOpmPanel, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmPanelDo) FindInBatches(result *[]*model.TOpmPanel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmPanelDo) Attrs(attrs ...field.AssignExpr) *tOpmPanelDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmPanelDo) Assign(attrs ...field.AssignExpr) *tOpmPanelDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmPanelDo) Joins(field field.RelationField) *tOpmPanelDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmPanelDo) Preload(field field.RelationField) *tOpmPanelDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmPanelDo) FirstOrInit() (*model.TOpmPanel, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanel), nil
	}
}

func (t tOpmPanelDo) FirstOrCreate() (*model.TOpmPanel, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanel), nil
	}
}

func (t tOpmPanelDo) FindByPage(offset int, limit int) (result []*model.TOpmPanel, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmPanelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmPanelDo) withDO(do gen.Dao) *tOpmPanelDo {
	t.DO = *do.(*gen.DO)
	return t
}
