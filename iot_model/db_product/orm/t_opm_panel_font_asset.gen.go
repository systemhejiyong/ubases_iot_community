// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmPanelFontAsset(db *gorm.DB) tOpmPanelFontAsset {
	_tOpmPanelFontAsset := tOpmPanelFontAsset{}

	_tOpmPanelFontAsset.tOpmPanelFontAssetDo.UseDB(db)
	_tOpmPanelFontAsset.tOpmPanelFontAssetDo.UseModel(&model.TOpmPanelFontAsset{})

	tableName := _tOpmPanelFontAsset.tOpmPanelFontAssetDo.TableName()
	_tOpmPanelFontAsset.ALL = field.NewField(tableName, "*")
	_tOpmPanelFontAsset.Id = field.NewInt64(tableName, "id")
	_tOpmPanelFontAsset.Builtin = field.NewInt32(tableName, "builtin")
	_tOpmPanelFontAsset.FileName = field.NewString(tableName, "file_name")
	_tOpmPanelFontAsset.FontName = field.NewString(tableName, "font_name")
	_tOpmPanelFontAsset.FontKey = field.NewString(tableName, "font_key")
	_tOpmPanelFontAsset.AssetUrl = field.NewString(tableName, "asset_url")
	_tOpmPanelFontAsset.Default = field.NewInt32(tableName, "default")
	_tOpmPanelFontAsset.TenantId = field.NewString(tableName, "tenant_id")
	_tOpmPanelFontAsset.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpmPanelFontAsset.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmPanelFontAsset.DeletedAt = field.NewField(tableName, "deleted_at")

	_tOpmPanelFontAsset.fillFieldMap()

	return _tOpmPanelFontAsset
}

type tOpmPanelFontAsset struct {
	tOpmPanelFontAssetDo tOpmPanelFontAssetDo

	ALL       field.Field
	Id        field.Int64
	Builtin   field.Int32
	FileName  field.String
	FontName  field.String
	FontKey   field.String
	AssetUrl  field.String
	Default   field.Int32
	TenantId  field.String
	CreatedBy field.Int64
	CreatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (t tOpmPanelFontAsset) Table(newTableName string) *tOpmPanelFontAsset {
	t.tOpmPanelFontAssetDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmPanelFontAsset) As(alias string) *tOpmPanelFontAsset {
	t.tOpmPanelFontAssetDo.DO = *(t.tOpmPanelFontAssetDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmPanelFontAsset) updateTableName(table string) *tOpmPanelFontAsset {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Builtin = field.NewInt32(table, "builtin")
	t.FileName = field.NewString(table, "file_name")
	t.FontName = field.NewString(table, "font_name")
	t.FontKey = field.NewString(table, "font_key")
	t.AssetUrl = field.NewString(table, "asset_url")
	t.Default = field.NewInt32(table, "default")
	t.TenantId = field.NewString(table, "tenant_id")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tOpmPanelFontAsset) WithContext(ctx context.Context) *tOpmPanelFontAssetDo {
	return t.tOpmPanelFontAssetDo.WithContext(ctx)
}

func (t tOpmPanelFontAsset) TableName() string { return t.tOpmPanelFontAssetDo.TableName() }

func (t tOpmPanelFontAsset) Alias() string { return t.tOpmPanelFontAssetDo.Alias() }

func (t *tOpmPanelFontAsset) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmPanelFontAsset) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.Id
	t.fieldMap["builtin"] = t.Builtin
	t.fieldMap["file_name"] = t.FileName
	t.fieldMap["font_name"] = t.FontName
	t.fieldMap["font_key"] = t.FontKey
	t.fieldMap["asset_url"] = t.AssetUrl
	t.fieldMap["default"] = t.Default
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tOpmPanelFontAsset) clone(db *gorm.DB) tOpmPanelFontAsset {
	t.tOpmPanelFontAssetDo.ReplaceDB(db)
	return t
}

type tOpmPanelFontAssetDo struct{ gen.DO }

func (t tOpmPanelFontAssetDo) Debug() *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmPanelFontAssetDo) WithContext(ctx context.Context) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmPanelFontAssetDo) Clauses(conds ...clause.Expression) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmPanelFontAssetDo) Returning(value interface{}, columns ...string) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmPanelFontAssetDo) Not(conds ...gen.Condition) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmPanelFontAssetDo) Or(conds ...gen.Condition) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmPanelFontAssetDo) Select(conds ...field.Expr) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmPanelFontAssetDo) Where(conds ...gen.Condition) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmPanelFontAssetDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmPanelFontAssetDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmPanelFontAssetDo) Order(conds ...field.Expr) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmPanelFontAssetDo) Distinct(cols ...field.Expr) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmPanelFontAssetDo) Omit(cols ...field.Expr) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmPanelFontAssetDo) Join(table schema.Tabler, on ...field.Expr) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmPanelFontAssetDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmPanelFontAssetDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmPanelFontAssetDo) Group(cols ...field.Expr) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmPanelFontAssetDo) Having(conds ...gen.Condition) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmPanelFontAssetDo) Limit(limit int) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmPanelFontAssetDo) Offset(offset int) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmPanelFontAssetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmPanelFontAssetDo) Unscoped() *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmPanelFontAssetDo) Create(values ...*model.TOpmPanelFontAsset) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmPanelFontAssetDo) CreateInBatches(values []*model.TOpmPanelFontAsset, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmPanelFontAssetDo) Save(values ...*model.TOpmPanelFontAsset) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmPanelFontAssetDo) First() (*model.TOpmPanelFontAsset, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelFontAsset), nil
	}
}

func (t tOpmPanelFontAssetDo) Take() (*model.TOpmPanelFontAsset, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelFontAsset), nil
	}
}

func (t tOpmPanelFontAssetDo) Last() (*model.TOpmPanelFontAsset, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelFontAsset), nil
	}
}

func (t tOpmPanelFontAssetDo) Find() ([]*model.TOpmPanelFontAsset, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmPanelFontAsset), err
}

func (t tOpmPanelFontAssetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmPanelFontAsset, err error) {
	buf := make([]*model.TOpmPanelFontAsset, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmPanelFontAssetDo) FindInBatches(result *[]*model.TOpmPanelFontAsset, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmPanelFontAssetDo) Attrs(attrs ...field.AssignExpr) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmPanelFontAssetDo) Assign(attrs ...field.AssignExpr) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmPanelFontAssetDo) Joins(field field.RelationField) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmPanelFontAssetDo) Preload(field field.RelationField) *tOpmPanelFontAssetDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmPanelFontAssetDo) FirstOrInit() (*model.TOpmPanelFontAsset, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelFontAsset), nil
	}
}

func (t tOpmPanelFontAssetDo) FirstOrCreate() (*model.TOpmPanelFontAsset, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelFontAsset), nil
	}
}

func (t tOpmPanelFontAssetDo) FindByPage(offset int, limit int) (result []*model.TOpmPanelFontAsset, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmPanelFontAssetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmPanelFontAssetDo) withDO(do gen.Dao) *tOpmPanelFontAssetDo {
	t.DO = *do.(*gen.DO)
	return t
}
