// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmMemberPricing(db *gorm.DB) tOpmMemberPricing {
	_tOpmMemberPricing := tOpmMemberPricing{}

	_tOpmMemberPricing.tOpmMemberPricingDo.UseDB(db)
	_tOpmMemberPricing.tOpmMemberPricingDo.UseModel(&model.TOpmMemberPricing{})

	tableName := _tOpmMemberPricing.tOpmMemberPricingDo.TableName()
	_tOpmMemberPricing.ALL = field.NewField(tableName, "*")
	_tOpmMemberPricing.Id = field.NewInt64(tableName, "id")
	_tOpmMemberPricing.AppKey = field.NewString(tableName, "app_key")
	_tOpmMemberPricing.PayMethod = field.NewInt32(tableName, "pay_method")
	_tOpmMemberPricing.UseModel = field.NewString(tableName, "use_model")
	_tOpmMemberPricing.PriceType = field.NewInt32(tableName, "price_type")
	_tOpmMemberPricing.PriceId = field.NewString(tableName, "price_id")
	_tOpmMemberPricing.Price = field.NewFloat64(tableName, "price")
	_tOpmMemberPricing.Status = field.NewInt32(tableName, "status")
	_tOpmMemberPricing.StartTime = field.NewTime(tableName, "start_time")
	_tOpmMemberPricing.EndTime = field.NewTime(tableName, "end_time")
	_tOpmMemberPricing.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpmMemberPricing.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmMemberPricing.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOpmMemberPricing.UpdatedAt = field.NewTime(tableName, "updated_at")

	_tOpmMemberPricing.fillFieldMap()

	return _tOpmMemberPricing
}

type tOpmMemberPricing struct {
	tOpmMemberPricingDo tOpmMemberPricingDo

	ALL       field.Field
	Id        field.Int64
	AppKey    field.String
	PayMethod field.Int32
	UseModel  field.String
	PriceType field.Int32
	PriceId   field.String
	Price     field.Float64
	Status    field.Int32
	StartTime field.Time
	EndTime   field.Time
	CreatedBy field.Int64
	CreatedAt field.Time
	UpdatedBy field.Int64
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (t tOpmMemberPricing) Table(newTableName string) *tOpmMemberPricing {
	t.tOpmMemberPricingDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmMemberPricing) As(alias string) *tOpmMemberPricing {
	t.tOpmMemberPricingDo.DO = *(t.tOpmMemberPricingDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmMemberPricing) updateTableName(table string) *tOpmMemberPricing {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.AppKey = field.NewString(table, "app_key")
	t.PayMethod = field.NewInt32(table, "pay_method")
	t.UseModel = field.NewString(table, "use_model")
	t.PriceType = field.NewInt32(table, "price_type")
	t.PriceId = field.NewString(table, "price_id")
	t.Price = field.NewFloat64(table, "price")
	t.Status = field.NewInt32(table, "status")
	t.StartTime = field.NewTime(table, "start_time")
	t.EndTime = field.NewTime(table, "end_time")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *tOpmMemberPricing) WithContext(ctx context.Context) *tOpmMemberPricingDo {
	return t.tOpmMemberPricingDo.WithContext(ctx)
}

func (t tOpmMemberPricing) TableName() string { return t.tOpmMemberPricingDo.TableName() }

func (t tOpmMemberPricing) Alias() string { return t.tOpmMemberPricingDo.Alias() }

func (t *tOpmMemberPricing) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmMemberPricing) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 14)
	t.fieldMap["id"] = t.Id
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["pay_method"] = t.PayMethod
	t.fieldMap["use_model"] = t.UseModel
	t.fieldMap["price_type"] = t.PriceType
	t.fieldMap["price_id"] = t.PriceId
	t.fieldMap["price"] = t.Price
	t.fieldMap["status"] = t.Status
	t.fieldMap["start_time"] = t.StartTime
	t.fieldMap["end_time"] = t.EndTime
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t tOpmMemberPricing) clone(db *gorm.DB) tOpmMemberPricing {
	t.tOpmMemberPricingDo.ReplaceDB(db)
	return t
}

type tOpmMemberPricingDo struct{ gen.DO }

func (t tOpmMemberPricingDo) Debug() *tOpmMemberPricingDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmMemberPricingDo) WithContext(ctx context.Context) *tOpmMemberPricingDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmMemberPricingDo) Clauses(conds ...clause.Expression) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmMemberPricingDo) Returning(value interface{}, columns ...string) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmMemberPricingDo) Not(conds ...gen.Condition) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmMemberPricingDo) Or(conds ...gen.Condition) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmMemberPricingDo) Select(conds ...field.Expr) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmMemberPricingDo) Where(conds ...gen.Condition) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmMemberPricingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmMemberPricingDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmMemberPricingDo) Order(conds ...field.Expr) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmMemberPricingDo) Distinct(cols ...field.Expr) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmMemberPricingDo) Omit(cols ...field.Expr) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmMemberPricingDo) Join(table schema.Tabler, on ...field.Expr) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmMemberPricingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmMemberPricingDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmMemberPricingDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmMemberPricingDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmMemberPricingDo) Group(cols ...field.Expr) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmMemberPricingDo) Having(conds ...gen.Condition) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmMemberPricingDo) Limit(limit int) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmMemberPricingDo) Offset(offset int) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmMemberPricingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmMemberPricingDo) Unscoped() *tOpmMemberPricingDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmMemberPricingDo) Create(values ...*model.TOpmMemberPricing) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmMemberPricingDo) CreateInBatches(values []*model.TOpmMemberPricing, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmMemberPricingDo) Save(values ...*model.TOpmMemberPricing) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmMemberPricingDo) First() (*model.TOpmMemberPricing, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmMemberPricing), nil
	}
}

func (t tOpmMemberPricingDo) Take() (*model.TOpmMemberPricing, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmMemberPricing), nil
	}
}

func (t tOpmMemberPricingDo) Last() (*model.TOpmMemberPricing, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmMemberPricing), nil
	}
}

func (t tOpmMemberPricingDo) Find() ([]*model.TOpmMemberPricing, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmMemberPricing), err
}

func (t tOpmMemberPricingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmMemberPricing, err error) {
	buf := make([]*model.TOpmMemberPricing, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmMemberPricingDo) FindInBatches(result *[]*model.TOpmMemberPricing, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmMemberPricingDo) Attrs(attrs ...field.AssignExpr) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmMemberPricingDo) Assign(attrs ...field.AssignExpr) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmMemberPricingDo) Joins(field field.RelationField) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmMemberPricingDo) Preload(field field.RelationField) *tOpmMemberPricingDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmMemberPricingDo) FirstOrInit() (*model.TOpmMemberPricing, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmMemberPricing), nil
	}
}

func (t tOpmMemberPricingDo) FirstOrCreate() (*model.TOpmMemberPricing, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmMemberPricing), nil
	}
}

func (t tOpmMemberPricingDo) FindByPage(offset int, limit int) (result []*model.TOpmMemberPricing, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmMemberPricingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmMemberPricingDo) withDO(do gen.Dao) *tOpmMemberPricingDo {
	t.DO = *do.(*gen.DO)
	return t
}
