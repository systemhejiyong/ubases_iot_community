// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmFirmwareVersion(db *gorm.DB) tOpmFirmwareVersion {
	_tOpmFirmwareVersion := tOpmFirmwareVersion{}

	_tOpmFirmwareVersion.tOpmFirmwareVersionDo.UseDB(db)
	_tOpmFirmwareVersion.tOpmFirmwareVersionDo.UseModel(&model.TOpmFirmwareVersion{})

	tableName := _tOpmFirmwareVersion.tOpmFirmwareVersionDo.TableName()
	_tOpmFirmwareVersion.ALL = field.NewField(tableName, "*")
	_tOpmFirmwareVersion.Id = field.NewInt64(tableName, "id")
	_tOpmFirmwareVersion.FirmwareId = field.NewInt64(tableName, "firmware_id")
	_tOpmFirmwareVersion.TenantId = field.NewString(tableName, "tenant_id")
	_tOpmFirmwareVersion.Version = field.NewString(tableName, "version")
	_tOpmFirmwareVersion.Desc = field.NewString(tableName, "desc")
	_tOpmFirmwareVersion.Status = field.NewInt32(tableName, "status")
	_tOpmFirmwareVersion.IsMust = field.NewInt32(tableName, "is_must")
	_tOpmFirmwareVersion.UpgradeMode = field.NewInt32(tableName, "upgrade_mode")
	_tOpmFirmwareVersion.UpgradeFileName = field.NewString(tableName, "upgrade_file_name")
	_tOpmFirmwareVersion.UpgradeFilePath = field.NewString(tableName, "upgrade_file_path")
	_tOpmFirmwareVersion.UpgradeFileKey = field.NewString(tableName, "upgrade_file_key")
	_tOpmFirmwareVersion.UpgradeFileSize = field.NewInt32(tableName, "upgrade_file_size")
	_tOpmFirmwareVersion.ProdFileName = field.NewString(tableName, "prod_file_name")
	_tOpmFirmwareVersion.ProdFilePath = field.NewString(tableName, "prod_file_path")
	_tOpmFirmwareVersion.ProdFileKey = field.NewString(tableName, "prod_file_key")
	_tOpmFirmwareVersion.ProdFileSize = field.NewInt32(tableName, "prod_file_size")
	_tOpmFirmwareVersion.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmFirmwareVersion.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOpmFirmwareVersion.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOpmFirmwareVersion.DeletedAt = field.NewField(tableName, "deleted_at")

	_tOpmFirmwareVersion.fillFieldMap()

	return _tOpmFirmwareVersion
}

type tOpmFirmwareVersion struct {
	tOpmFirmwareVersionDo tOpmFirmwareVersionDo

	ALL             field.Field
	Id              field.Int64
	FirmwareId      field.Int64
	TenantId        field.String
	Version         field.String
	Desc            field.String
	Status          field.Int32
	IsMust          field.Int32
	UpgradeMode     field.Int32
	UpgradeFileName field.String
	UpgradeFilePath field.String
	UpgradeFileKey  field.String
	UpgradeFileSize field.Int32
	ProdFileName    field.String
	ProdFilePath    field.String
	ProdFileKey     field.String
	ProdFileSize    field.Int32
	CreatedAt       field.Time
	UpdatedBy       field.Int64
	UpdatedAt       field.Time
	DeletedAt       field.Field

	fieldMap map[string]field.Expr
}

func (t tOpmFirmwareVersion) Table(newTableName string) *tOpmFirmwareVersion {
	t.tOpmFirmwareVersionDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmFirmwareVersion) As(alias string) *tOpmFirmwareVersion {
	t.tOpmFirmwareVersionDo.DO = *(t.tOpmFirmwareVersionDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmFirmwareVersion) updateTableName(table string) *tOpmFirmwareVersion {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.FirmwareId = field.NewInt64(table, "firmware_id")
	t.TenantId = field.NewString(table, "tenant_id")
	t.Version = field.NewString(table, "version")
	t.Desc = field.NewString(table, "desc")
	t.Status = field.NewInt32(table, "status")
	t.IsMust = field.NewInt32(table, "is_must")
	t.UpgradeMode = field.NewInt32(table, "upgrade_mode")
	t.UpgradeFileName = field.NewString(table, "upgrade_file_name")
	t.UpgradeFilePath = field.NewString(table, "upgrade_file_path")
	t.UpgradeFileKey = field.NewString(table, "upgrade_file_key")
	t.UpgradeFileSize = field.NewInt32(table, "upgrade_file_size")
	t.ProdFileName = field.NewString(table, "prod_file_name")
	t.ProdFilePath = field.NewString(table, "prod_file_path")
	t.ProdFileKey = field.NewString(table, "prod_file_key")
	t.ProdFileSize = field.NewInt32(table, "prod_file_size")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tOpmFirmwareVersion) WithContext(ctx context.Context) *tOpmFirmwareVersionDo {
	return t.tOpmFirmwareVersionDo.WithContext(ctx)
}

func (t tOpmFirmwareVersion) TableName() string { return t.tOpmFirmwareVersionDo.TableName() }

func (t tOpmFirmwareVersion) Alias() string { return t.tOpmFirmwareVersionDo.Alias() }

func (t *tOpmFirmwareVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmFirmwareVersion) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 20)
	t.fieldMap["id"] = t.Id
	t.fieldMap["firmware_id"] = t.FirmwareId
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["version"] = t.Version
	t.fieldMap["desc"] = t.Desc
	t.fieldMap["status"] = t.Status
	t.fieldMap["is_must"] = t.IsMust
	t.fieldMap["upgrade_mode"] = t.UpgradeMode
	t.fieldMap["upgrade_file_name"] = t.UpgradeFileName
	t.fieldMap["upgrade_file_path"] = t.UpgradeFilePath
	t.fieldMap["upgrade_file_key"] = t.UpgradeFileKey
	t.fieldMap["upgrade_file_size"] = t.UpgradeFileSize
	t.fieldMap["prod_file_name"] = t.ProdFileName
	t.fieldMap["prod_file_path"] = t.ProdFilePath
	t.fieldMap["prod_file_key"] = t.ProdFileKey
	t.fieldMap["prod_file_size"] = t.ProdFileSize
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tOpmFirmwareVersion) clone(db *gorm.DB) tOpmFirmwareVersion {
	t.tOpmFirmwareVersionDo.ReplaceDB(db)
	return t
}

type tOpmFirmwareVersionDo struct{ gen.DO }

func (t tOpmFirmwareVersionDo) Debug() *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmFirmwareVersionDo) WithContext(ctx context.Context) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmFirmwareVersionDo) Clauses(conds ...clause.Expression) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmFirmwareVersionDo) Returning(value interface{}, columns ...string) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmFirmwareVersionDo) Not(conds ...gen.Condition) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmFirmwareVersionDo) Or(conds ...gen.Condition) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmFirmwareVersionDo) Select(conds ...field.Expr) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmFirmwareVersionDo) Where(conds ...gen.Condition) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmFirmwareVersionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmFirmwareVersionDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmFirmwareVersionDo) Order(conds ...field.Expr) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmFirmwareVersionDo) Distinct(cols ...field.Expr) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmFirmwareVersionDo) Omit(cols ...field.Expr) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmFirmwareVersionDo) Join(table schema.Tabler, on ...field.Expr) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmFirmwareVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmFirmwareVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmFirmwareVersionDo) Group(cols ...field.Expr) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmFirmwareVersionDo) Having(conds ...gen.Condition) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmFirmwareVersionDo) Limit(limit int) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmFirmwareVersionDo) Offset(offset int) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmFirmwareVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmFirmwareVersionDo) Unscoped() *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmFirmwareVersionDo) Create(values ...*model.TOpmFirmwareVersion) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmFirmwareVersionDo) CreateInBatches(values []*model.TOpmFirmwareVersion, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmFirmwareVersionDo) Save(values ...*model.TOpmFirmwareVersion) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmFirmwareVersionDo) First() (*model.TOpmFirmwareVersion, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmFirmwareVersion), nil
	}
}

func (t tOpmFirmwareVersionDo) Take() (*model.TOpmFirmwareVersion, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmFirmwareVersion), nil
	}
}

func (t tOpmFirmwareVersionDo) Last() (*model.TOpmFirmwareVersion, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmFirmwareVersion), nil
	}
}

func (t tOpmFirmwareVersionDo) Find() ([]*model.TOpmFirmwareVersion, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmFirmwareVersion), err
}

func (t tOpmFirmwareVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmFirmwareVersion, err error) {
	buf := make([]*model.TOpmFirmwareVersion, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmFirmwareVersionDo) FindInBatches(result *[]*model.TOpmFirmwareVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmFirmwareVersionDo) Attrs(attrs ...field.AssignExpr) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmFirmwareVersionDo) Assign(attrs ...field.AssignExpr) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmFirmwareVersionDo) Joins(field field.RelationField) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmFirmwareVersionDo) Preload(field field.RelationField) *tOpmFirmwareVersionDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmFirmwareVersionDo) FirstOrInit() (*model.TOpmFirmwareVersion, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmFirmwareVersion), nil
	}
}

func (t tOpmFirmwareVersionDo) FirstOrCreate() (*model.TOpmFirmwareVersion, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmFirmwareVersion), nil
	}
}

func (t tOpmFirmwareVersionDo) FindByPage(offset int, limit int) (result []*model.TOpmFirmwareVersion, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmFirmwareVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmFirmwareVersionDo) withDO(do gen.Dao) *tOpmFirmwareVersionDo {
	t.DO = *do.(*gen.DO)
	return t
}
