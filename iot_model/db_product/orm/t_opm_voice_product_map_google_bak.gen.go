// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmVoiceProductMapGoogleBak(db *gorm.DB) tOpmVoiceProductMapGoogleBak {
	_tOpmVoiceProductMapGoogleBak := tOpmVoiceProductMapGoogleBak{}

	_tOpmVoiceProductMapGoogleBak.tOpmVoiceProductMapGoogleBakDo.UseDB(db)
	_tOpmVoiceProductMapGoogleBak.tOpmVoiceProductMapGoogleBakDo.UseModel(&model.TOpmVoiceProductMapGoogleBak{})

	tableName := _tOpmVoiceProductMapGoogleBak.tOpmVoiceProductMapGoogleBakDo.TableName()
	_tOpmVoiceProductMapGoogleBak.ALL = field.NewField(tableName, "*")
	_tOpmVoiceProductMapGoogleBak.Id = field.NewInt64(tableName, "id")
	_tOpmVoiceProductMapGoogleBak.VoiceProductId = field.NewInt64(tableName, "voice_product_id")
	_tOpmVoiceProductMapGoogleBak.FunName = field.NewString(tableName, "fun_name")
	_tOpmVoiceProductMapGoogleBak.AttrDpid = field.NewInt32(tableName, "attr_dpid")
	_tOpmVoiceProductMapGoogleBak.AttrCode = field.NewString(tableName, "attr_code")
	_tOpmVoiceProductMapGoogleBak.VoiceCode = field.NewString(tableName, "voice_code")
	_tOpmVoiceProductMapGoogleBak.VoiceSynonym = field.NewString(tableName, "voice_synonym")
	_tOpmVoiceProductMapGoogleBak.Trait = field.NewString(tableName, "trait")
	_tOpmVoiceProductMapGoogleBak.Command = field.NewString(tableName, "command")
	_tOpmVoiceProductMapGoogleBak.VoiceDemo = field.NewString(tableName, "voice_demo")
	_tOpmVoiceProductMapGoogleBak.ValueMap = field.NewString(tableName, "value_map")
	_tOpmVoiceProductMapGoogleBak.DataType = field.NewString(tableName, "data_type")
	_tOpmVoiceProductMapGoogleBak.VDataType = field.NewString(tableName, "v_data_type")

	_tOpmVoiceProductMapGoogleBak.fillFieldMap()

	return _tOpmVoiceProductMapGoogleBak
}

type tOpmVoiceProductMapGoogleBak struct {
	tOpmVoiceProductMapGoogleBakDo tOpmVoiceProductMapGoogleBakDo

	ALL            field.Field
	Id             field.Int64
	VoiceProductId field.Int64
	FunName        field.String
	AttrDpid       field.Int32
	AttrCode       field.String
	VoiceCode      field.String
	VoiceSynonym   field.String
	Trait          field.String
	Command        field.String
	VoiceDemo      field.String
	ValueMap       field.String
	DataType       field.String
	VDataType      field.String

	fieldMap map[string]field.Expr
}

func (t tOpmVoiceProductMapGoogleBak) Table(newTableName string) *tOpmVoiceProductMapGoogleBak {
	t.tOpmVoiceProductMapGoogleBakDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmVoiceProductMapGoogleBak) As(alias string) *tOpmVoiceProductMapGoogleBak {
	t.tOpmVoiceProductMapGoogleBakDo.DO = *(t.tOpmVoiceProductMapGoogleBakDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmVoiceProductMapGoogleBak) updateTableName(table string) *tOpmVoiceProductMapGoogleBak {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.VoiceProductId = field.NewInt64(table, "voice_product_id")
	t.FunName = field.NewString(table, "fun_name")
	t.AttrDpid = field.NewInt32(table, "attr_dpid")
	t.AttrCode = field.NewString(table, "attr_code")
	t.VoiceCode = field.NewString(table, "voice_code")
	t.VoiceSynonym = field.NewString(table, "voice_synonym")
	t.Trait = field.NewString(table, "trait")
	t.Command = field.NewString(table, "command")
	t.VoiceDemo = field.NewString(table, "voice_demo")
	t.ValueMap = field.NewString(table, "value_map")
	t.DataType = field.NewString(table, "data_type")
	t.VDataType = field.NewString(table, "v_data_type")

	t.fillFieldMap()

	return t
}

func (t *tOpmVoiceProductMapGoogleBak) WithContext(ctx context.Context) *tOpmVoiceProductMapGoogleBakDo {
	return t.tOpmVoiceProductMapGoogleBakDo.WithContext(ctx)
}

func (t tOpmVoiceProductMapGoogleBak) TableName() string {
	return t.tOpmVoiceProductMapGoogleBakDo.TableName()
}

func (t tOpmVoiceProductMapGoogleBak) Alias() string { return t.tOpmVoiceProductMapGoogleBakDo.Alias() }

func (t *tOpmVoiceProductMapGoogleBak) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmVoiceProductMapGoogleBak) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.Id
	t.fieldMap["voice_product_id"] = t.VoiceProductId
	t.fieldMap["fun_name"] = t.FunName
	t.fieldMap["attr_dpid"] = t.AttrDpid
	t.fieldMap["attr_code"] = t.AttrCode
	t.fieldMap["voice_code"] = t.VoiceCode
	t.fieldMap["voice_synonym"] = t.VoiceSynonym
	t.fieldMap["trait"] = t.Trait
	t.fieldMap["command"] = t.Command
	t.fieldMap["voice_demo"] = t.VoiceDemo
	t.fieldMap["value_map"] = t.ValueMap
	t.fieldMap["data_type"] = t.DataType
	t.fieldMap["v_data_type"] = t.VDataType
}

func (t tOpmVoiceProductMapGoogleBak) clone(db *gorm.DB) tOpmVoiceProductMapGoogleBak {
	t.tOpmVoiceProductMapGoogleBakDo.ReplaceDB(db)
	return t
}

type tOpmVoiceProductMapGoogleBakDo struct{ gen.DO }

func (t tOpmVoiceProductMapGoogleBakDo) Debug() *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmVoiceProductMapGoogleBakDo) WithContext(ctx context.Context) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmVoiceProductMapGoogleBakDo) Clauses(conds ...clause.Expression) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmVoiceProductMapGoogleBakDo) Returning(value interface{}, columns ...string) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmVoiceProductMapGoogleBakDo) Not(conds ...gen.Condition) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmVoiceProductMapGoogleBakDo) Or(conds ...gen.Condition) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmVoiceProductMapGoogleBakDo) Select(conds ...field.Expr) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmVoiceProductMapGoogleBakDo) Where(conds ...gen.Condition) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmVoiceProductMapGoogleBakDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmVoiceProductMapGoogleBakDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmVoiceProductMapGoogleBakDo) Order(conds ...field.Expr) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmVoiceProductMapGoogleBakDo) Distinct(cols ...field.Expr) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmVoiceProductMapGoogleBakDo) Omit(cols ...field.Expr) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmVoiceProductMapGoogleBakDo) Join(table schema.Tabler, on ...field.Expr) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmVoiceProductMapGoogleBakDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmVoiceProductMapGoogleBakDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmVoiceProductMapGoogleBakDo) Group(cols ...field.Expr) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmVoiceProductMapGoogleBakDo) Having(conds ...gen.Condition) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmVoiceProductMapGoogleBakDo) Limit(limit int) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmVoiceProductMapGoogleBakDo) Offset(offset int) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmVoiceProductMapGoogleBakDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmVoiceProductMapGoogleBakDo) Unscoped() *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmVoiceProductMapGoogleBakDo) Create(values ...*model.TOpmVoiceProductMapGoogleBak) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmVoiceProductMapGoogleBakDo) CreateInBatches(values []*model.TOpmVoiceProductMapGoogleBak, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmVoiceProductMapGoogleBakDo) Save(values ...*model.TOpmVoiceProductMapGoogleBak) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmVoiceProductMapGoogleBakDo) First() (*model.TOpmVoiceProductMapGoogleBak, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoiceProductMapGoogleBak), nil
	}
}

func (t tOpmVoiceProductMapGoogleBakDo) Take() (*model.TOpmVoiceProductMapGoogleBak, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoiceProductMapGoogleBak), nil
	}
}

func (t tOpmVoiceProductMapGoogleBakDo) Last() (*model.TOpmVoiceProductMapGoogleBak, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoiceProductMapGoogleBak), nil
	}
}

func (t tOpmVoiceProductMapGoogleBakDo) Find() ([]*model.TOpmVoiceProductMapGoogleBak, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmVoiceProductMapGoogleBak), err
}

func (t tOpmVoiceProductMapGoogleBakDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmVoiceProductMapGoogleBak, err error) {
	buf := make([]*model.TOpmVoiceProductMapGoogleBak, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmVoiceProductMapGoogleBakDo) FindInBatches(result *[]*model.TOpmVoiceProductMapGoogleBak, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmVoiceProductMapGoogleBakDo) Attrs(attrs ...field.AssignExpr) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmVoiceProductMapGoogleBakDo) Assign(attrs ...field.AssignExpr) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmVoiceProductMapGoogleBakDo) Joins(field field.RelationField) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmVoiceProductMapGoogleBakDo) Preload(field field.RelationField) *tOpmVoiceProductMapGoogleBakDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmVoiceProductMapGoogleBakDo) FirstOrInit() (*model.TOpmVoiceProductMapGoogleBak, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoiceProductMapGoogleBak), nil
	}
}

func (t tOpmVoiceProductMapGoogleBakDo) FirstOrCreate() (*model.TOpmVoiceProductMapGoogleBak, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmVoiceProductMapGoogleBak), nil
	}
}

func (t tOpmVoiceProductMapGoogleBakDo) FindByPage(offset int, limit int) (result []*model.TOpmVoiceProductMapGoogleBak, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmVoiceProductMapGoogleBakDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmVoiceProductMapGoogleBakDo) withDO(do gen.Dao) *tOpmVoiceProductMapGoogleBakDo {
	t.DO = *do.(*gen.DO)
	return t
}
