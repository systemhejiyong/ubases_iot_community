// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmProductMaterials(db *gorm.DB) tOpmProductMaterials {
	_tOpmProductMaterials := tOpmProductMaterials{}

	_tOpmProductMaterials.tOpmProductMaterialsDo.UseDB(db)
	_tOpmProductMaterials.tOpmProductMaterialsDo.UseModel(&model.TOpmProductMaterials{})

	tableName := _tOpmProductMaterials.tOpmProductMaterialsDo.TableName()
	_tOpmProductMaterials.ALL = field.NewField(tableName, "*")
	_tOpmProductMaterials.Id = field.NewInt64(tableName, "id")
	_tOpmProductMaterials.TenantId = field.NewString(tableName, "tenant_id")
	_tOpmProductMaterials.MaterialTypeId = field.NewInt64(tableName, "material_type_id")
	_tOpmProductMaterials.ImageUrl = field.NewString(tableName, "image_url")
	_tOpmProductMaterials.ProductPage = field.NewString(tableName, "product_page")
	_tOpmProductMaterials.Count = field.NewInt64(tableName, "count")
	_tOpmProductMaterials.BrandCode = field.NewString(tableName, "brand_code")
	_tOpmProductMaterials.FragranceCode = field.NewString(tableName, "fragrance_code")
	_tOpmProductMaterials.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpmProductMaterials.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmProductMaterials.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOpmProductMaterials.UpdatedAt = field.NewTime(tableName, "updated_at")

	_tOpmProductMaterials.fillFieldMap()

	return _tOpmProductMaterials
}

type tOpmProductMaterials struct {
	tOpmProductMaterialsDo tOpmProductMaterialsDo

	ALL            field.Field
	Id             field.Int64
	TenantId       field.String
	MaterialTypeId field.Int64
	ImageUrl       field.String
	ProductPage    field.String
	Count          field.Int64
	BrandCode      field.String
	FragranceCode  field.String
	CreatedBy      field.Int64
	CreatedAt      field.Time
	UpdatedBy      field.Int64
	UpdatedAt      field.Time

	fieldMap map[string]field.Expr
}

func (t tOpmProductMaterials) Table(newTableName string) *tOpmProductMaterials {
	t.tOpmProductMaterialsDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmProductMaterials) As(alias string) *tOpmProductMaterials {
	t.tOpmProductMaterialsDo.DO = *(t.tOpmProductMaterialsDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmProductMaterials) updateTableName(table string) *tOpmProductMaterials {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.TenantId = field.NewString(table, "tenant_id")
	t.MaterialTypeId = field.NewInt64(table, "material_type_id")
	t.ImageUrl = field.NewString(table, "image_url")
	t.ProductPage = field.NewString(table, "product_page")
	t.Count = field.NewInt64(table, "count")
	t.BrandCode = field.NewString(table, "brand_code")
	t.FragranceCode = field.NewString(table, "fragrance_code")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *tOpmProductMaterials) WithContext(ctx context.Context) *tOpmProductMaterialsDo {
	return t.tOpmProductMaterialsDo.WithContext(ctx)
}

func (t tOpmProductMaterials) TableName() string { return t.tOpmProductMaterialsDo.TableName() }

func (t tOpmProductMaterials) Alias() string { return t.tOpmProductMaterialsDo.Alias() }

func (t *tOpmProductMaterials) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmProductMaterials) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.Id
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["material_type_id"] = t.MaterialTypeId
	t.fieldMap["image_url"] = t.ImageUrl
	t.fieldMap["product_page"] = t.ProductPage
	t.fieldMap["count"] = t.Count
	t.fieldMap["brand_code"] = t.BrandCode
	t.fieldMap["fragrance_code"] = t.FragranceCode
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t tOpmProductMaterials) clone(db *gorm.DB) tOpmProductMaterials {
	t.tOpmProductMaterialsDo.ReplaceDB(db)
	return t
}

type tOpmProductMaterialsDo struct{ gen.DO }

func (t tOpmProductMaterialsDo) Debug() *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmProductMaterialsDo) WithContext(ctx context.Context) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmProductMaterialsDo) Clauses(conds ...clause.Expression) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmProductMaterialsDo) Returning(value interface{}, columns ...string) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmProductMaterialsDo) Not(conds ...gen.Condition) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmProductMaterialsDo) Or(conds ...gen.Condition) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmProductMaterialsDo) Select(conds ...field.Expr) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmProductMaterialsDo) Where(conds ...gen.Condition) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmProductMaterialsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmProductMaterialsDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmProductMaterialsDo) Order(conds ...field.Expr) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmProductMaterialsDo) Distinct(cols ...field.Expr) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmProductMaterialsDo) Omit(cols ...field.Expr) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmProductMaterialsDo) Join(table schema.Tabler, on ...field.Expr) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmProductMaterialsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmProductMaterialsDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmProductMaterialsDo) Group(cols ...field.Expr) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmProductMaterialsDo) Having(conds ...gen.Condition) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmProductMaterialsDo) Limit(limit int) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmProductMaterialsDo) Offset(offset int) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmProductMaterialsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmProductMaterialsDo) Unscoped() *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmProductMaterialsDo) Create(values ...*model.TOpmProductMaterials) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmProductMaterialsDo) CreateInBatches(values []*model.TOpmProductMaterials, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmProductMaterialsDo) Save(values ...*model.TOpmProductMaterials) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmProductMaterialsDo) First() (*model.TOpmProductMaterials, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductMaterials), nil
	}
}

func (t tOpmProductMaterialsDo) Take() (*model.TOpmProductMaterials, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductMaterials), nil
	}
}

func (t tOpmProductMaterialsDo) Last() (*model.TOpmProductMaterials, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductMaterials), nil
	}
}

func (t tOpmProductMaterialsDo) Find() ([]*model.TOpmProductMaterials, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmProductMaterials), err
}

func (t tOpmProductMaterialsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmProductMaterials, err error) {
	buf := make([]*model.TOpmProductMaterials, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmProductMaterialsDo) FindInBatches(result *[]*model.TOpmProductMaterials, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmProductMaterialsDo) Attrs(attrs ...field.AssignExpr) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmProductMaterialsDo) Assign(attrs ...field.AssignExpr) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmProductMaterialsDo) Joins(field field.RelationField) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmProductMaterialsDo) Preload(field field.RelationField) *tOpmProductMaterialsDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmProductMaterialsDo) FirstOrInit() (*model.TOpmProductMaterials, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductMaterials), nil
	}
}

func (t tOpmProductMaterialsDo) FirstOrCreate() (*model.TOpmProductMaterials, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductMaterials), nil
	}
}

func (t tOpmProductMaterialsDo) FindByPage(offset int, limit int) (result []*model.TOpmProductMaterials, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmProductMaterialsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmProductMaterialsDo) withDO(do gen.Dao) *tOpmProductMaterialsDo {
	t.DO = *do.(*gen.DO)
	return t
}
