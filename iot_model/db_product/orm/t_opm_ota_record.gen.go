// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmOtaRecord(db *gorm.DB) tOpmOtaRecord {
	_tOpmOtaRecord := tOpmOtaRecord{}

	_tOpmOtaRecord.tOpmOtaRecordDo.UseDB(db)
	_tOpmOtaRecord.tOpmOtaRecordDo.UseModel(&model.TOpmOtaRecord{})

	tableName := _tOpmOtaRecord.tOpmOtaRecordDo.TableName()
	_tOpmOtaRecord.ALL = field.NewField(tableName, "*")
	_tOpmOtaRecord.Id = field.NewInt64(tableName, "id")
	_tOpmOtaRecord.PkgId = field.NewInt64(tableName, "pkg_id")
	_tOpmOtaRecord.PoductName = field.NewString(tableName, "poduct_name")
	_tOpmOtaRecord.Type = field.NewInt32(tableName, "type")
	_tOpmOtaRecord.Name = field.NewString(tableName, "name")
	_tOpmOtaRecord.Version = field.NewString(tableName, "version")
	_tOpmOtaRecord.IsGray = field.NewInt32(tableName, "is_gray")
	_tOpmOtaRecord.GrayType = field.NewInt32(tableName, "gray_type")
	_tOpmOtaRecord.GrayScale = field.NewInt32(tableName, "gray_scale")
	_tOpmOtaRecord.OperateAt = field.NewTime(tableName, "operate_at")
	_tOpmOtaRecord.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpmOtaRecord.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOpmOtaRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmOtaRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOpmOtaRecord.DeletedAt = field.NewField(tableName, "deleted_at")
	_tOpmOtaRecord.TenantId = field.NewString(tableName, "tenant_id")

	_tOpmOtaRecord.fillFieldMap()

	return _tOpmOtaRecord
}

type tOpmOtaRecord struct {
	tOpmOtaRecordDo tOpmOtaRecordDo

	ALL        field.Field
	Id         field.Int64
	PkgId      field.Int64
	PoductName field.String
	Type       field.Int32
	Name       field.String
	Version    field.String
	IsGray     field.Int32
	GrayType   field.Int32
	GrayScale  field.Int32
	OperateAt  field.Time
	CreatedBy  field.Int64
	UpdatedBy  field.Int64
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	TenantId   field.String

	fieldMap map[string]field.Expr
}

func (t tOpmOtaRecord) Table(newTableName string) *tOpmOtaRecord {
	t.tOpmOtaRecordDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmOtaRecord) As(alias string) *tOpmOtaRecord {
	t.tOpmOtaRecordDo.DO = *(t.tOpmOtaRecordDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmOtaRecord) updateTableName(table string) *tOpmOtaRecord {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.PkgId = field.NewInt64(table, "pkg_id")
	t.PoductName = field.NewString(table, "poduct_name")
	t.Type = field.NewInt32(table, "type")
	t.Name = field.NewString(table, "name")
	t.Version = field.NewString(table, "version")
	t.IsGray = field.NewInt32(table, "is_gray")
	t.GrayType = field.NewInt32(table, "gray_type")
	t.GrayScale = field.NewInt32(table, "gray_scale")
	t.OperateAt = field.NewTime(table, "operate_at")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.TenantId = field.NewString(table, "tenant_id")

	t.fillFieldMap()

	return t
}

func (t *tOpmOtaRecord) WithContext(ctx context.Context) *tOpmOtaRecordDo {
	return t.tOpmOtaRecordDo.WithContext(ctx)
}

func (t tOpmOtaRecord) TableName() string { return t.tOpmOtaRecordDo.TableName() }

func (t tOpmOtaRecord) Alias() string { return t.tOpmOtaRecordDo.Alias() }

func (t *tOpmOtaRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmOtaRecord) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 16)
	t.fieldMap["id"] = t.Id
	t.fieldMap["pkg_id"] = t.PkgId
	t.fieldMap["poduct_name"] = t.PoductName
	t.fieldMap["type"] = t.Type
	t.fieldMap["name"] = t.Name
	t.fieldMap["version"] = t.Version
	t.fieldMap["is_gray"] = t.IsGray
	t.fieldMap["gray_type"] = t.GrayType
	t.fieldMap["gray_scale"] = t.GrayScale
	t.fieldMap["operate_at"] = t.OperateAt
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["tenant_id"] = t.TenantId
}

func (t tOpmOtaRecord) clone(db *gorm.DB) tOpmOtaRecord {
	t.tOpmOtaRecordDo.ReplaceDB(db)
	return t
}

type tOpmOtaRecordDo struct{ gen.DO }

func (t tOpmOtaRecordDo) Debug() *tOpmOtaRecordDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmOtaRecordDo) WithContext(ctx context.Context) *tOpmOtaRecordDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmOtaRecordDo) Clauses(conds ...clause.Expression) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmOtaRecordDo) Returning(value interface{}, columns ...string) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmOtaRecordDo) Not(conds ...gen.Condition) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmOtaRecordDo) Or(conds ...gen.Condition) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmOtaRecordDo) Select(conds ...field.Expr) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmOtaRecordDo) Where(conds ...gen.Condition) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmOtaRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmOtaRecordDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmOtaRecordDo) Order(conds ...field.Expr) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmOtaRecordDo) Distinct(cols ...field.Expr) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmOtaRecordDo) Omit(cols ...field.Expr) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmOtaRecordDo) Join(table schema.Tabler, on ...field.Expr) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmOtaRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmOtaRecordDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmOtaRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmOtaRecordDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmOtaRecordDo) Group(cols ...field.Expr) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmOtaRecordDo) Having(conds ...gen.Condition) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmOtaRecordDo) Limit(limit int) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmOtaRecordDo) Offset(offset int) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmOtaRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmOtaRecordDo) Unscoped() *tOpmOtaRecordDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmOtaRecordDo) Create(values ...*model.TOpmOtaRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmOtaRecordDo) CreateInBatches(values []*model.TOpmOtaRecord, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmOtaRecordDo) Save(values ...*model.TOpmOtaRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmOtaRecordDo) First() (*model.TOpmOtaRecord, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmOtaRecord), nil
	}
}

func (t tOpmOtaRecordDo) Take() (*model.TOpmOtaRecord, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmOtaRecord), nil
	}
}

func (t tOpmOtaRecordDo) Last() (*model.TOpmOtaRecord, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmOtaRecord), nil
	}
}

func (t tOpmOtaRecordDo) Find() ([]*model.TOpmOtaRecord, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmOtaRecord), err
}

func (t tOpmOtaRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmOtaRecord, err error) {
	buf := make([]*model.TOpmOtaRecord, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmOtaRecordDo) FindInBatches(result *[]*model.TOpmOtaRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmOtaRecordDo) Attrs(attrs ...field.AssignExpr) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmOtaRecordDo) Assign(attrs ...field.AssignExpr) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmOtaRecordDo) Joins(field field.RelationField) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmOtaRecordDo) Preload(field field.RelationField) *tOpmOtaRecordDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmOtaRecordDo) FirstOrInit() (*model.TOpmOtaRecord, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmOtaRecord), nil
	}
}

func (t tOpmOtaRecordDo) FirstOrCreate() (*model.TOpmOtaRecord, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmOtaRecord), nil
	}
}

func (t tOpmOtaRecordDo) FindByPage(offset int, limit int) (result []*model.TOpmOtaRecord, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmOtaRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmOtaRecordDo) withDO(do gen.Dao) *tOpmOtaRecordDo {
	t.DO = *do.(*gen.DO)
	return t
}
