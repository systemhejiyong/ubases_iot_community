// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmDocuments(db *gorm.DB) tOpmDocuments {
	_tOpmDocuments := tOpmDocuments{}

	_tOpmDocuments.tOpmDocumentsDo.UseDB(db)
	_tOpmDocuments.tOpmDocumentsDo.UseModel(&model.TOpmDocuments{})

	tableName := _tOpmDocuments.tOpmDocumentsDo.TableName()
	_tOpmDocuments.ALL = field.NewField(tableName, "*")
	_tOpmDocuments.Id = field.NewInt64(tableName, "id")
	_tOpmDocuments.DataOrigin = field.NewInt32(tableName, "data_origin")
	_tOpmDocuments.OriginId = field.NewInt64(tableName, "origin_id")
	_tOpmDocuments.OriginKey = field.NewString(tableName, "origin_key")
	_tOpmDocuments.DocCode = field.NewString(tableName, "doc_code")
	_tOpmDocuments.DocName = field.NewString(tableName, "doc_name")
	_tOpmDocuments.Remark = field.NewString(tableName, "remark")
	_tOpmDocuments.FilePath = field.NewString(tableName, "file_path")
	_tOpmDocuments.FileName = field.NewString(tableName, "file_name")
	_tOpmDocuments.FileSize = field.NewInt32(tableName, "file_size")
	_tOpmDocuments.FileKey = field.NewString(tableName, "file_key")
	_tOpmDocuments.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpmDocuments.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOpmDocuments.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmDocuments.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOpmDocuments.DeletedAt = field.NewField(tableName, "deleted_at")

	_tOpmDocuments.fillFieldMap()

	return _tOpmDocuments
}

type tOpmDocuments struct {
	tOpmDocumentsDo tOpmDocumentsDo

	ALL        field.Field
	Id         field.Int64
	DataOrigin field.Int32
	OriginId   field.Int64
	OriginKey  field.String
	DocCode    field.String
	DocName    field.String
	Remark     field.String
	FilePath   field.String
	FileName   field.String
	FileSize   field.Int32
	FileKey    field.String
	CreatedBy  field.Int64
	UpdatedBy  field.Int64
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field

	fieldMap map[string]field.Expr
}

func (t tOpmDocuments) Table(newTableName string) *tOpmDocuments {
	t.tOpmDocumentsDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmDocuments) As(alias string) *tOpmDocuments {
	t.tOpmDocumentsDo.DO = *(t.tOpmDocumentsDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmDocuments) updateTableName(table string) *tOpmDocuments {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.DataOrigin = field.NewInt32(table, "data_origin")
	t.OriginId = field.NewInt64(table, "origin_id")
	t.OriginKey = field.NewString(table, "origin_key")
	t.DocCode = field.NewString(table, "doc_code")
	t.DocName = field.NewString(table, "doc_name")
	t.Remark = field.NewString(table, "remark")
	t.FilePath = field.NewString(table, "file_path")
	t.FileName = field.NewString(table, "file_name")
	t.FileSize = field.NewInt32(table, "file_size")
	t.FileKey = field.NewString(table, "file_key")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tOpmDocuments) WithContext(ctx context.Context) *tOpmDocumentsDo {
	return t.tOpmDocumentsDo.WithContext(ctx)
}

func (t tOpmDocuments) TableName() string { return t.tOpmDocumentsDo.TableName() }

func (t tOpmDocuments) Alias() string { return t.tOpmDocumentsDo.Alias() }

func (t *tOpmDocuments) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmDocuments) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 16)
	t.fieldMap["id"] = t.Id
	t.fieldMap["data_origin"] = t.DataOrigin
	t.fieldMap["origin_id"] = t.OriginId
	t.fieldMap["origin_key"] = t.OriginKey
	t.fieldMap["doc_code"] = t.DocCode
	t.fieldMap["doc_name"] = t.DocName
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["file_path"] = t.FilePath
	t.fieldMap["file_name"] = t.FileName
	t.fieldMap["file_size"] = t.FileSize
	t.fieldMap["file_key"] = t.FileKey
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tOpmDocuments) clone(db *gorm.DB) tOpmDocuments {
	t.tOpmDocumentsDo.ReplaceDB(db)
	return t
}

type tOpmDocumentsDo struct{ gen.DO }

func (t tOpmDocumentsDo) Debug() *tOpmDocumentsDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmDocumentsDo) WithContext(ctx context.Context) *tOpmDocumentsDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmDocumentsDo) Clauses(conds ...clause.Expression) *tOpmDocumentsDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmDocumentsDo) Returning(value interface{}, columns ...string) *tOpmDocumentsDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmDocumentsDo) Not(conds ...gen.Condition) *tOpmDocumentsDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmDocumentsDo) Or(conds ...gen.Condition) *tOpmDocumentsDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmDocumentsDo) Select(conds ...field.Expr) *tOpmDocumentsDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmDocumentsDo) Where(conds ...gen.Condition) *tOpmDocumentsDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmDocumentsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmDocumentsDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmDocumentsDo) Order(conds ...field.Expr) *tOpmDocumentsDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmDocumentsDo) Distinct(cols ...field.Expr) *tOpmDocumentsDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmDocumentsDo) Omit(cols ...field.Expr) *tOpmDocumentsDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmDocumentsDo) Join(table schema.Tabler, on ...field.Expr) *tOpmDocumentsDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmDocumentsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmDocumentsDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmDocumentsDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmDocumentsDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmDocumentsDo) Group(cols ...field.Expr) *tOpmDocumentsDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmDocumentsDo) Having(conds ...gen.Condition) *tOpmDocumentsDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmDocumentsDo) Limit(limit int) *tOpmDocumentsDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmDocumentsDo) Offset(offset int) *tOpmDocumentsDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmDocumentsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmDocumentsDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmDocumentsDo) Unscoped() *tOpmDocumentsDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmDocumentsDo) Create(values ...*model.TOpmDocuments) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmDocumentsDo) CreateInBatches(values []*model.TOpmDocuments, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmDocumentsDo) Save(values ...*model.TOpmDocuments) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmDocumentsDo) First() (*model.TOpmDocuments, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmDocuments), nil
	}
}

func (t tOpmDocumentsDo) Take() (*model.TOpmDocuments, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmDocuments), nil
	}
}

func (t tOpmDocumentsDo) Last() (*model.TOpmDocuments, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmDocuments), nil
	}
}

func (t tOpmDocumentsDo) Find() ([]*model.TOpmDocuments, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmDocuments), err
}

func (t tOpmDocumentsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmDocuments, err error) {
	buf := make([]*model.TOpmDocuments, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmDocumentsDo) FindInBatches(result *[]*model.TOpmDocuments, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmDocumentsDo) Attrs(attrs ...field.AssignExpr) *tOpmDocumentsDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmDocumentsDo) Assign(attrs ...field.AssignExpr) *tOpmDocumentsDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmDocumentsDo) Joins(field field.RelationField) *tOpmDocumentsDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmDocumentsDo) Preload(field field.RelationField) *tOpmDocumentsDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmDocumentsDo) FirstOrInit() (*model.TOpmDocuments, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmDocuments), nil
	}
}

func (t tOpmDocumentsDo) FirstOrCreate() (*model.TOpmDocuments, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmDocuments), nil
	}
}

func (t tOpmDocumentsDo) FindByPage(offset int, limit int) (result []*model.TOpmDocuments, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmDocumentsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmDocumentsDo) withDO(do gen.Dao) *tOpmDocumentsDo {
	t.DO = *do.(*gen.DO)
	return t
}
