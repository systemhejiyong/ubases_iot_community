// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmProductPanelRelation(db *gorm.DB) tOpmProductPanelRelation {
	_tOpmProductPanelRelation := tOpmProductPanelRelation{}

	_tOpmProductPanelRelation.tOpmProductPanelRelationDo.UseDB(db)
	_tOpmProductPanelRelation.tOpmProductPanelRelationDo.UseModel(&model.TOpmProductPanelRelation{})

	tableName := _tOpmProductPanelRelation.tOpmProductPanelRelationDo.TableName()
	_tOpmProductPanelRelation.ALL = field.NewField(tableName, "*")
	_tOpmProductPanelRelation.Id = field.NewInt64(tableName, "id")
	_tOpmProductPanelRelation.ProductId = field.NewInt64(tableName, "product_id")
	_tOpmProductPanelRelation.ControlPanelId = field.NewInt64(tableName, "control_panel_id")
	_tOpmProductPanelRelation.PanelUrl = field.NewString(tableName, "panel_url")
	_tOpmProductPanelRelation.PanelSize = field.NewInt32(tableName, "panel_size")
	_tOpmProductPanelRelation.PanelKey = field.NewString(tableName, "panel_key")
	_tOpmProductPanelRelation.PreviewName = field.NewString(tableName, "preview_name")
	_tOpmProductPanelRelation.PreviewUrl = field.NewString(tableName, "preview_url")
	_tOpmProductPanelRelation.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpmProductPanelRelation.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmProductPanelRelation.DeletedAt = field.NewField(tableName, "deleted_at")
	_tOpmProductPanelRelation.AppPanelType = field.NewInt32(tableName, "app_panel_type")

	_tOpmProductPanelRelation.fillFieldMap()

	return _tOpmProductPanelRelation
}

type tOpmProductPanelRelation struct {
	tOpmProductPanelRelationDo tOpmProductPanelRelationDo

	ALL            field.Field
	Id             field.Int64
	ProductId      field.Int64
	ControlPanelId field.Int64
	PanelUrl       field.String
	PanelSize      field.Int32
	PanelKey       field.String
	PreviewName    field.String
	PreviewUrl     field.String
	CreatedBy      field.Int64
	CreatedAt      field.Time
	DeletedAt      field.Field
	AppPanelType   field.Int32

	fieldMap map[string]field.Expr
}

func (t tOpmProductPanelRelation) Table(newTableName string) *tOpmProductPanelRelation {
	t.tOpmProductPanelRelationDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmProductPanelRelation) As(alias string) *tOpmProductPanelRelation {
	t.tOpmProductPanelRelationDo.DO = *(t.tOpmProductPanelRelationDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmProductPanelRelation) updateTableName(table string) *tOpmProductPanelRelation {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ProductId = field.NewInt64(table, "product_id")
	t.ControlPanelId = field.NewInt64(table, "control_panel_id")
	t.PanelUrl = field.NewString(table, "panel_url")
	t.PanelSize = field.NewInt32(table, "panel_size")
	t.PanelKey = field.NewString(table, "panel_key")
	t.PreviewName = field.NewString(table, "preview_name")
	t.PreviewUrl = field.NewString(table, "preview_url")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.AppPanelType = field.NewInt32(table, "app_panel_type")

	t.fillFieldMap()

	return t
}

func (t *tOpmProductPanelRelation) WithContext(ctx context.Context) *tOpmProductPanelRelationDo {
	return t.tOpmProductPanelRelationDo.WithContext(ctx)
}

func (t tOpmProductPanelRelation) TableName() string { return t.tOpmProductPanelRelationDo.TableName() }

func (t tOpmProductPanelRelation) Alias() string { return t.tOpmProductPanelRelationDo.Alias() }

func (t *tOpmProductPanelRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmProductPanelRelation) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.Id
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["control_panel_id"] = t.ControlPanelId
	t.fieldMap["panel_url"] = t.PanelUrl
	t.fieldMap["panel_size"] = t.PanelSize
	t.fieldMap["panel_key"] = t.PanelKey
	t.fieldMap["preview_name"] = t.PreviewName
	t.fieldMap["preview_url"] = t.PreviewUrl
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["app_panel_type"] = t.AppPanelType
}

func (t tOpmProductPanelRelation) clone(db *gorm.DB) tOpmProductPanelRelation {
	t.tOpmProductPanelRelationDo.ReplaceDB(db)
	return t
}

type tOpmProductPanelRelationDo struct{ gen.DO }

func (t tOpmProductPanelRelationDo) Debug() *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmProductPanelRelationDo) WithContext(ctx context.Context) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmProductPanelRelationDo) Clauses(conds ...clause.Expression) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmProductPanelRelationDo) Returning(value interface{}, columns ...string) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmProductPanelRelationDo) Not(conds ...gen.Condition) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmProductPanelRelationDo) Or(conds ...gen.Condition) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmProductPanelRelationDo) Select(conds ...field.Expr) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmProductPanelRelationDo) Where(conds ...gen.Condition) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmProductPanelRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmProductPanelRelationDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmProductPanelRelationDo) Order(conds ...field.Expr) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmProductPanelRelationDo) Distinct(cols ...field.Expr) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmProductPanelRelationDo) Omit(cols ...field.Expr) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmProductPanelRelationDo) Join(table schema.Tabler, on ...field.Expr) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmProductPanelRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmProductPanelRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmProductPanelRelationDo) Group(cols ...field.Expr) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmProductPanelRelationDo) Having(conds ...gen.Condition) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmProductPanelRelationDo) Limit(limit int) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmProductPanelRelationDo) Offset(offset int) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmProductPanelRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmProductPanelRelationDo) Unscoped() *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmProductPanelRelationDo) Create(values ...*model.TOpmProductPanelRelation) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmProductPanelRelationDo) CreateInBatches(values []*model.TOpmProductPanelRelation, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmProductPanelRelationDo) Save(values ...*model.TOpmProductPanelRelation) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmProductPanelRelationDo) First() (*model.TOpmProductPanelRelation, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductPanelRelation), nil
	}
}

func (t tOpmProductPanelRelationDo) Take() (*model.TOpmProductPanelRelation, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductPanelRelation), nil
	}
}

func (t tOpmProductPanelRelationDo) Last() (*model.TOpmProductPanelRelation, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductPanelRelation), nil
	}
}

func (t tOpmProductPanelRelationDo) Find() ([]*model.TOpmProductPanelRelation, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmProductPanelRelation), err
}

func (t tOpmProductPanelRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmProductPanelRelation, err error) {
	buf := make([]*model.TOpmProductPanelRelation, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmProductPanelRelationDo) FindInBatches(result *[]*model.TOpmProductPanelRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmProductPanelRelationDo) Attrs(attrs ...field.AssignExpr) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmProductPanelRelationDo) Assign(attrs ...field.AssignExpr) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmProductPanelRelationDo) Joins(field field.RelationField) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmProductPanelRelationDo) Preload(field field.RelationField) *tOpmProductPanelRelationDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmProductPanelRelationDo) FirstOrInit() (*model.TOpmProductPanelRelation, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductPanelRelation), nil
	}
}

func (t tOpmProductPanelRelationDo) FirstOrCreate() (*model.TOpmProductPanelRelation, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductPanelRelation), nil
	}
}

func (t tOpmProductPanelRelationDo) FindByPage(offset int, limit int) (result []*model.TOpmProductPanelRelation, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmProductPanelRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmProductPanelRelationDo) withDO(do gen.Dao) *tOpmProductPanelRelationDo {
	t.DO = *do.(*gen.DO)
	return t
}
