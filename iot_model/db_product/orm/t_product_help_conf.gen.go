// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTProductHelpConf(db *gorm.DB) tProductHelpConf {
	_tProductHelpConf := tProductHelpConf{}

	_tProductHelpConf.tProductHelpConfDo.UseDB(db)
	_tProductHelpConf.tProductHelpConfDo.UseModel(&model.TProductHelpConf{})

	tableName := _tProductHelpConf.tProductHelpConfDo.TableName()
	_tProductHelpConf.ALL = field.NewField(tableName, "*")
	_tProductHelpConf.Id = field.NewInt64(tableName, "id")
	_tProductHelpConf.TenantId = field.NewString(tableName, "tenant_id")
	_tProductHelpConf.ProductName = field.NewString(tableName, "product_name")
	_tProductHelpConf.ProductKey = field.NewString(tableName, "product_key")
	_tProductHelpConf.ProductTypeId = field.NewInt64(tableName, "product_type_id")
	_tProductHelpConf.Langs = field.NewString(tableName, "langs")
	_tProductHelpConf.RemainLang = field.NewString(tableName, "remain_lang")
	_tProductHelpConf.Status = field.NewInt32(tableName, "status")
	_tProductHelpConf.CreatedBy = field.NewInt64(tableName, "created_by")
	_tProductHelpConf.CreatedAt = field.NewTime(tableName, "created_at")
	_tProductHelpConf.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tProductHelpConf.UpdatedAt = field.NewTime(tableName, "updated_at")

	_tProductHelpConf.fillFieldMap()

	return _tProductHelpConf
}

type tProductHelpConf struct {
	tProductHelpConfDo tProductHelpConfDo

	ALL           field.Field
	Id            field.Int64
	TenantId      field.String
	ProductName   field.String
	ProductKey    field.String
	ProductTypeId field.Int64
	Langs         field.String
	RemainLang    field.String
	Status        field.Int32
	CreatedBy     field.Int64
	CreatedAt     field.Time
	UpdatedBy     field.Int64
	UpdatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (t tProductHelpConf) Table(newTableName string) *tProductHelpConf {
	t.tProductHelpConfDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tProductHelpConf) As(alias string) *tProductHelpConf {
	t.tProductHelpConfDo.DO = *(t.tProductHelpConfDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tProductHelpConf) updateTableName(table string) *tProductHelpConf {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.TenantId = field.NewString(table, "tenant_id")
	t.ProductName = field.NewString(table, "product_name")
	t.ProductKey = field.NewString(table, "product_key")
	t.ProductTypeId = field.NewInt64(table, "product_type_id")
	t.Langs = field.NewString(table, "langs")
	t.RemainLang = field.NewString(table, "remain_lang")
	t.Status = field.NewInt32(table, "status")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *tProductHelpConf) WithContext(ctx context.Context) *tProductHelpConfDo {
	return t.tProductHelpConfDo.WithContext(ctx)
}

func (t tProductHelpConf) TableName() string { return t.tProductHelpConfDo.TableName() }

func (t tProductHelpConf) Alias() string { return t.tProductHelpConfDo.Alias() }

func (t *tProductHelpConf) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tProductHelpConf) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.Id
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["product_name"] = t.ProductName
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["product_type_id"] = t.ProductTypeId
	t.fieldMap["langs"] = t.Langs
	t.fieldMap["remain_lang"] = t.RemainLang
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t tProductHelpConf) clone(db *gorm.DB) tProductHelpConf {
	t.tProductHelpConfDo.ReplaceDB(db)
	return t
}

type tProductHelpConfDo struct{ gen.DO }

func (t tProductHelpConfDo) Debug() *tProductHelpConfDo {
	return t.withDO(t.DO.Debug())
}

func (t tProductHelpConfDo) WithContext(ctx context.Context) *tProductHelpConfDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tProductHelpConfDo) Clauses(conds ...clause.Expression) *tProductHelpConfDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tProductHelpConfDo) Returning(value interface{}, columns ...string) *tProductHelpConfDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tProductHelpConfDo) Not(conds ...gen.Condition) *tProductHelpConfDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tProductHelpConfDo) Or(conds ...gen.Condition) *tProductHelpConfDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tProductHelpConfDo) Select(conds ...field.Expr) *tProductHelpConfDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tProductHelpConfDo) Where(conds ...gen.Condition) *tProductHelpConfDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tProductHelpConfDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tProductHelpConfDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tProductHelpConfDo) Order(conds ...field.Expr) *tProductHelpConfDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tProductHelpConfDo) Distinct(cols ...field.Expr) *tProductHelpConfDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tProductHelpConfDo) Omit(cols ...field.Expr) *tProductHelpConfDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tProductHelpConfDo) Join(table schema.Tabler, on ...field.Expr) *tProductHelpConfDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tProductHelpConfDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tProductHelpConfDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tProductHelpConfDo) RightJoin(table schema.Tabler, on ...field.Expr) *tProductHelpConfDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tProductHelpConfDo) Group(cols ...field.Expr) *tProductHelpConfDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tProductHelpConfDo) Having(conds ...gen.Condition) *tProductHelpConfDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tProductHelpConfDo) Limit(limit int) *tProductHelpConfDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tProductHelpConfDo) Offset(offset int) *tProductHelpConfDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tProductHelpConfDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tProductHelpConfDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tProductHelpConfDo) Unscoped() *tProductHelpConfDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tProductHelpConfDo) Create(values ...*model.TProductHelpConf) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tProductHelpConfDo) CreateInBatches(values []*model.TProductHelpConf, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tProductHelpConfDo) Save(values ...*model.TProductHelpConf) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tProductHelpConfDo) First() (*model.TProductHelpConf, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TProductHelpConf), nil
	}
}

func (t tProductHelpConfDo) Take() (*model.TProductHelpConf, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TProductHelpConf), nil
	}
}

func (t tProductHelpConfDo) Last() (*model.TProductHelpConf, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TProductHelpConf), nil
	}
}

func (t tProductHelpConfDo) Find() ([]*model.TProductHelpConf, error) {
	result, err := t.DO.Find()
	return result.([]*model.TProductHelpConf), err
}

func (t tProductHelpConfDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TProductHelpConf, err error) {
	buf := make([]*model.TProductHelpConf, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tProductHelpConfDo) FindInBatches(result *[]*model.TProductHelpConf, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tProductHelpConfDo) Attrs(attrs ...field.AssignExpr) *tProductHelpConfDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tProductHelpConfDo) Assign(attrs ...field.AssignExpr) *tProductHelpConfDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tProductHelpConfDo) Joins(field field.RelationField) *tProductHelpConfDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tProductHelpConfDo) Preload(field field.RelationField) *tProductHelpConfDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tProductHelpConfDo) FirstOrInit() (*model.TProductHelpConf, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TProductHelpConf), nil
	}
}

func (t tProductHelpConfDo) FirstOrCreate() (*model.TProductHelpConf, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TProductHelpConf), nil
	}
}

func (t tProductHelpConfDo) FindByPage(offset int, limit int) (result []*model.TProductHelpConf, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tProductHelpConfDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tProductHelpConfDo) withDO(do gen.Dao) *tProductHelpConfDo {
	t.DO = *do.(*gen.DO)
	return t
}
