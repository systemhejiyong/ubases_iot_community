// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTPmProductFirmwareRelation(db *gorm.DB) tPmProductFirmwareRelation {
	_tPmProductFirmwareRelation := tPmProductFirmwareRelation{}

	_tPmProductFirmwareRelation.tPmProductFirmwareRelationDo.UseDB(db)
	_tPmProductFirmwareRelation.tPmProductFirmwareRelationDo.UseModel(&model.TPmProductFirmwareRelation{})

	tableName := _tPmProductFirmwareRelation.tPmProductFirmwareRelationDo.TableName()
	_tPmProductFirmwareRelation.ALL = field.NewField(tableName, "*")
	_tPmProductFirmwareRelation.Id = field.NewInt64(tableName, "id")
	_tPmProductFirmwareRelation.ProductId = field.NewInt64(tableName, "product_id")
	_tPmProductFirmwareRelation.FirmwareId = field.NewInt64(tableName, "firmware_id")

	_tPmProductFirmwareRelation.fillFieldMap()

	return _tPmProductFirmwareRelation
}

type tPmProductFirmwareRelation struct {
	tPmProductFirmwareRelationDo tPmProductFirmwareRelationDo

	ALL        field.Field
	Id         field.Int64
	ProductId  field.Int64
	FirmwareId field.Int64

	fieldMap map[string]field.Expr
}

func (t tPmProductFirmwareRelation) Table(newTableName string) *tPmProductFirmwareRelation {
	t.tPmProductFirmwareRelationDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPmProductFirmwareRelation) As(alias string) *tPmProductFirmwareRelation {
	t.tPmProductFirmwareRelationDo.DO = *(t.tPmProductFirmwareRelationDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tPmProductFirmwareRelation) updateTableName(table string) *tPmProductFirmwareRelation {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ProductId = field.NewInt64(table, "product_id")
	t.FirmwareId = field.NewInt64(table, "firmware_id")

	t.fillFieldMap()

	return t
}

func (t *tPmProductFirmwareRelation) WithContext(ctx context.Context) *tPmProductFirmwareRelationDo {
	return t.tPmProductFirmwareRelationDo.WithContext(ctx)
}

func (t tPmProductFirmwareRelation) TableName() string {
	return t.tPmProductFirmwareRelationDo.TableName()
}

func (t tPmProductFirmwareRelation) Alias() string { return t.tPmProductFirmwareRelationDo.Alias() }

func (t *tPmProductFirmwareRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPmProductFirmwareRelation) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.Id
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["firmware_id"] = t.FirmwareId
}

func (t tPmProductFirmwareRelation) clone(db *gorm.DB) tPmProductFirmwareRelation {
	t.tPmProductFirmwareRelationDo.ReplaceDB(db)
	return t
}

type tPmProductFirmwareRelationDo struct{ gen.DO }

func (t tPmProductFirmwareRelationDo) Debug() *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Debug())
}

func (t tPmProductFirmwareRelationDo) WithContext(ctx context.Context) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPmProductFirmwareRelationDo) Clauses(conds ...clause.Expression) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPmProductFirmwareRelationDo) Returning(value interface{}, columns ...string) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPmProductFirmwareRelationDo) Not(conds ...gen.Condition) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPmProductFirmwareRelationDo) Or(conds ...gen.Condition) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPmProductFirmwareRelationDo) Select(conds ...field.Expr) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPmProductFirmwareRelationDo) Where(conds ...gen.Condition) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPmProductFirmwareRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tPmProductFirmwareRelationDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tPmProductFirmwareRelationDo) Order(conds ...field.Expr) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPmProductFirmwareRelationDo) Distinct(cols ...field.Expr) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPmProductFirmwareRelationDo) Omit(cols ...field.Expr) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPmProductFirmwareRelationDo) Join(table schema.Tabler, on ...field.Expr) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPmProductFirmwareRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPmProductFirmwareRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPmProductFirmwareRelationDo) Group(cols ...field.Expr) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPmProductFirmwareRelationDo) Having(conds ...gen.Condition) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPmProductFirmwareRelationDo) Limit(limit int) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPmProductFirmwareRelationDo) Offset(offset int) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPmProductFirmwareRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPmProductFirmwareRelationDo) Unscoped() *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPmProductFirmwareRelationDo) Create(values ...*model.TPmProductFirmwareRelation) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPmProductFirmwareRelationDo) CreateInBatches(values []*model.TPmProductFirmwareRelation, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPmProductFirmwareRelationDo) Save(values ...*model.TPmProductFirmwareRelation) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPmProductFirmwareRelationDo) First() (*model.TPmProductFirmwareRelation, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmProductFirmwareRelation), nil
	}
}

func (t tPmProductFirmwareRelationDo) Take() (*model.TPmProductFirmwareRelation, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmProductFirmwareRelation), nil
	}
}

func (t tPmProductFirmwareRelationDo) Last() (*model.TPmProductFirmwareRelation, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmProductFirmwareRelation), nil
	}
}

func (t tPmProductFirmwareRelationDo) Find() ([]*model.TPmProductFirmwareRelation, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPmProductFirmwareRelation), err
}

func (t tPmProductFirmwareRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPmProductFirmwareRelation, err error) {
	buf := make([]*model.TPmProductFirmwareRelation, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPmProductFirmwareRelationDo) FindInBatches(result *[]*model.TPmProductFirmwareRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPmProductFirmwareRelationDo) Attrs(attrs ...field.AssignExpr) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPmProductFirmwareRelationDo) Assign(attrs ...field.AssignExpr) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPmProductFirmwareRelationDo) Joins(field field.RelationField) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tPmProductFirmwareRelationDo) Preload(field field.RelationField) *tPmProductFirmwareRelationDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tPmProductFirmwareRelationDo) FirstOrInit() (*model.TPmProductFirmwareRelation, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmProductFirmwareRelation), nil
	}
}

func (t tPmProductFirmwareRelationDo) FirstOrCreate() (*model.TPmProductFirmwareRelation, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmProductFirmwareRelation), nil
	}
}

func (t tPmProductFirmwareRelationDo) FindByPage(offset int, limit int) (result []*model.TPmProductFirmwareRelation, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPmProductFirmwareRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tPmProductFirmwareRelationDo) withDO(do gen.Dao) *tPmProductFirmwareRelationDo {
	t.DO = *do.(*gen.DO)
	return t
}
