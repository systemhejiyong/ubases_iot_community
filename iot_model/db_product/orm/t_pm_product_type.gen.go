// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTPmProductType(db *gorm.DB) tPmProductType {
	_tPmProductType := tPmProductType{}

	_tPmProductType.tPmProductTypeDo.UseDB(db)
	_tPmProductType.tPmProductTypeDo.UseModel(&model.TPmProductType{})

	tableName := _tPmProductType.tPmProductTypeDo.TableName()
	_tPmProductType.ALL = field.NewField(tableName, "*")
	_tPmProductType.Id = field.NewInt64(tableName, "id")
	_tPmProductType.ParentId = field.NewInt64(tableName, "parent_id")
	_tPmProductType.Name = field.NewString(tableName, "name")
	_tPmProductType.NameEn = field.NewString(tableName, "name_en")
	_tPmProductType.Identifier = field.NewString(tableName, "identifier")
	_tPmProductType.Sort = field.NewInt32(tableName, "sort")
	_tPmProductType.Standard = field.NewInt32(tableName, "standard")
	_tPmProductType.Desc = field.NewString(tableName, "desc")
	_tPmProductType.ImgSize = field.NewInt64(tableName, "img_size")
	_tPmProductType.ImgPath = field.NewString(tableName, "img_path")
	_tPmProductType.ImgFullPath = field.NewString(tableName, "img_full_path")
	_tPmProductType.ImgName = field.NewString(tableName, "img_name")
	_tPmProductType.ImgKey = field.NewString(tableName, "img_key")
	_tPmProductType.CreatedBy = field.NewInt64(tableName, "created_by")
	_tPmProductType.CreatedAt = field.NewTime(tableName, "created_at")
	_tPmProductType.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tPmProductType.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tPmProductType.DeletedAt = field.NewField(tableName, "deleted_at")

	_tPmProductType.fillFieldMap()

	return _tPmProductType
}

type tPmProductType struct {
	tPmProductTypeDo tPmProductTypeDo

	ALL         field.Field
	Id          field.Int64
	ParentId    field.Int64
	Name        field.String
	NameEn      field.String
	Identifier  field.String
	Sort        field.Int32
	Standard    field.Int32
	Desc        field.String
	ImgSize     field.Int64
	ImgPath     field.String
	ImgFullPath field.String
	ImgName     field.String
	ImgKey      field.String
	CreatedBy   field.Int64
	CreatedAt   field.Time
	UpdatedBy   field.Int64
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (t tPmProductType) Table(newTableName string) *tPmProductType {
	t.tPmProductTypeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPmProductType) As(alias string) *tPmProductType {
	t.tPmProductTypeDo.DO = *(t.tPmProductTypeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tPmProductType) updateTableName(table string) *tPmProductType {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ParentId = field.NewInt64(table, "parent_id")
	t.Name = field.NewString(table, "name")
	t.NameEn = field.NewString(table, "name_en")
	t.Identifier = field.NewString(table, "identifier")
	t.Sort = field.NewInt32(table, "sort")
	t.Standard = field.NewInt32(table, "standard")
	t.Desc = field.NewString(table, "desc")
	t.ImgSize = field.NewInt64(table, "img_size")
	t.ImgPath = field.NewString(table, "img_path")
	t.ImgFullPath = field.NewString(table, "img_full_path")
	t.ImgName = field.NewString(table, "img_name")
	t.ImgKey = field.NewString(table, "img_key")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tPmProductType) WithContext(ctx context.Context) *tPmProductTypeDo {
	return t.tPmProductTypeDo.WithContext(ctx)
}

func (t tPmProductType) TableName() string { return t.tPmProductTypeDo.TableName() }

func (t tPmProductType) Alias() string { return t.tPmProductTypeDo.Alias() }

func (t *tPmProductType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPmProductType) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 18)
	t.fieldMap["id"] = t.Id
	t.fieldMap["parent_id"] = t.ParentId
	t.fieldMap["name"] = t.Name
	t.fieldMap["name_en"] = t.NameEn
	t.fieldMap["identifier"] = t.Identifier
	t.fieldMap["sort"] = t.Sort
	t.fieldMap["standard"] = t.Standard
	t.fieldMap["desc"] = t.Desc
	t.fieldMap["img_size"] = t.ImgSize
	t.fieldMap["img_path"] = t.ImgPath
	t.fieldMap["img_full_path"] = t.ImgFullPath
	t.fieldMap["img_name"] = t.ImgName
	t.fieldMap["img_key"] = t.ImgKey
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tPmProductType) clone(db *gorm.DB) tPmProductType {
	t.tPmProductTypeDo.ReplaceDB(db)
	return t
}

type tPmProductTypeDo struct{ gen.DO }

func (t tPmProductTypeDo) Debug() *tPmProductTypeDo {
	return t.withDO(t.DO.Debug())
}

func (t tPmProductTypeDo) WithContext(ctx context.Context) *tPmProductTypeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPmProductTypeDo) Clauses(conds ...clause.Expression) *tPmProductTypeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPmProductTypeDo) Returning(value interface{}, columns ...string) *tPmProductTypeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPmProductTypeDo) Not(conds ...gen.Condition) *tPmProductTypeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPmProductTypeDo) Or(conds ...gen.Condition) *tPmProductTypeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPmProductTypeDo) Select(conds ...field.Expr) *tPmProductTypeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPmProductTypeDo) Where(conds ...gen.Condition) *tPmProductTypeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPmProductTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tPmProductTypeDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tPmProductTypeDo) Order(conds ...field.Expr) *tPmProductTypeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPmProductTypeDo) Distinct(cols ...field.Expr) *tPmProductTypeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPmProductTypeDo) Omit(cols ...field.Expr) *tPmProductTypeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPmProductTypeDo) Join(table schema.Tabler, on ...field.Expr) *tPmProductTypeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPmProductTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tPmProductTypeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPmProductTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) *tPmProductTypeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPmProductTypeDo) Group(cols ...field.Expr) *tPmProductTypeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPmProductTypeDo) Having(conds ...gen.Condition) *tPmProductTypeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPmProductTypeDo) Limit(limit int) *tPmProductTypeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPmProductTypeDo) Offset(offset int) *tPmProductTypeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPmProductTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tPmProductTypeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPmProductTypeDo) Unscoped() *tPmProductTypeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPmProductTypeDo) Create(values ...*model.TPmProductType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPmProductTypeDo) CreateInBatches(values []*model.TPmProductType, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPmProductTypeDo) Save(values ...*model.TPmProductType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPmProductTypeDo) First() (*model.TPmProductType, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmProductType), nil
	}
}

func (t tPmProductTypeDo) Take() (*model.TPmProductType, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmProductType), nil
	}
}

func (t tPmProductTypeDo) Last() (*model.TPmProductType, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmProductType), nil
	}
}

func (t tPmProductTypeDo) Find() ([]*model.TPmProductType, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPmProductType), err
}

func (t tPmProductTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPmProductType, err error) {
	buf := make([]*model.TPmProductType, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPmProductTypeDo) FindInBatches(result *[]*model.TPmProductType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPmProductTypeDo) Attrs(attrs ...field.AssignExpr) *tPmProductTypeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPmProductTypeDo) Assign(attrs ...field.AssignExpr) *tPmProductTypeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPmProductTypeDo) Joins(field field.RelationField) *tPmProductTypeDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tPmProductTypeDo) Preload(field field.RelationField) *tPmProductTypeDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tPmProductTypeDo) FirstOrInit() (*model.TPmProductType, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmProductType), nil
	}
}

func (t tPmProductTypeDo) FirstOrCreate() (*model.TPmProductType, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmProductType), nil
	}
}

func (t tPmProductTypeDo) FindByPage(offset int, limit int) (result []*model.TPmProductType, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPmProductTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tPmProductTypeDo) withDO(do gen.Dao) *tPmProductTypeDo {
	t.DO = *do.(*gen.DO)
	return t
}
