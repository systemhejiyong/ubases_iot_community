// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTTplTestcaseTemplate(db *gorm.DB) tTplTestcaseTemplate {
	_tTplTestcaseTemplate := tTplTestcaseTemplate{}

	_tTplTestcaseTemplate.tTplTestcaseTemplateDo.UseDB(db)
	_tTplTestcaseTemplate.tTplTestcaseTemplateDo.UseModel(&model.TTplTestcaseTemplate{})

	tableName := _tTplTestcaseTemplate.tTplTestcaseTemplateDo.TableName()
	_tTplTestcaseTemplate.ALL = field.NewField(tableName, "*")
	_tTplTestcaseTemplate.Id = field.NewInt64(tableName, "id")
	_tTplTestcaseTemplate.ProductTypeId = field.NewInt64(tableName, "product_type_id")
	_tTplTestcaseTemplate.ProductId = field.NewInt64(tableName, "product_id")
	_tTplTestcaseTemplate.Lang = field.NewString(tableName, "lang")
	_tTplTestcaseTemplate.TplCode = field.NewString(tableName, "tpl_code")
	_tTplTestcaseTemplate.TplName = field.NewString(tableName, "tpl_name")
	_tTplTestcaseTemplate.TplFile = field.NewString(tableName, "tpl_file")
	_tTplTestcaseTemplate.TplFileName = field.NewString(tableName, "tpl_file_name")
	_tTplTestcaseTemplate.TplFileSize = field.NewInt32(tableName, "tpl_file_size")
	_tTplTestcaseTemplate.TplDesc = field.NewString(tableName, "tpl_desc")
	_tTplTestcaseTemplate.Version = field.NewString(tableName, "version")
	_tTplTestcaseTemplate.Status = field.NewInt32(tableName, "status")
	_tTplTestcaseTemplate.CreatedBy = field.NewInt64(tableName, "created_by")
	_tTplTestcaseTemplate.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tTplTestcaseTemplate.CreatedAt = field.NewTime(tableName, "created_at")
	_tTplTestcaseTemplate.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tTplTestcaseTemplate.DeletedAt = field.NewField(tableName, "deleted_at")

	_tTplTestcaseTemplate.fillFieldMap()

	return _tTplTestcaseTemplate
}

type tTplTestcaseTemplate struct {
	tTplTestcaseTemplateDo tTplTestcaseTemplateDo

	ALL           field.Field
	Id            field.Int64
	ProductTypeId field.Int64
	ProductId     field.Int64
	Lang          field.String
	TplCode       field.String
	TplName       field.String
	TplFile       field.String
	TplFileName   field.String
	TplFileSize   field.Int32
	TplDesc       field.String
	Version       field.String
	Status        field.Int32
	CreatedBy     field.Int64
	UpdatedBy     field.Int64
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field

	fieldMap map[string]field.Expr
}

func (t tTplTestcaseTemplate) Table(newTableName string) *tTplTestcaseTemplate {
	t.tTplTestcaseTemplateDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tTplTestcaseTemplate) As(alias string) *tTplTestcaseTemplate {
	t.tTplTestcaseTemplateDo.DO = *(t.tTplTestcaseTemplateDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tTplTestcaseTemplate) updateTableName(table string) *tTplTestcaseTemplate {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ProductTypeId = field.NewInt64(table, "product_type_id")
	t.ProductId = field.NewInt64(table, "product_id")
	t.Lang = field.NewString(table, "lang")
	t.TplCode = field.NewString(table, "tpl_code")
	t.TplName = field.NewString(table, "tpl_name")
	t.TplFile = field.NewString(table, "tpl_file")
	t.TplFileName = field.NewString(table, "tpl_file_name")
	t.TplFileSize = field.NewInt32(table, "tpl_file_size")
	t.TplDesc = field.NewString(table, "tpl_desc")
	t.Version = field.NewString(table, "version")
	t.Status = field.NewInt32(table, "status")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tTplTestcaseTemplate) WithContext(ctx context.Context) *tTplTestcaseTemplateDo {
	return t.tTplTestcaseTemplateDo.WithContext(ctx)
}

func (t tTplTestcaseTemplate) TableName() string { return t.tTplTestcaseTemplateDo.TableName() }

func (t tTplTestcaseTemplate) Alias() string { return t.tTplTestcaseTemplateDo.Alias() }

func (t *tTplTestcaseTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tTplTestcaseTemplate) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 17)
	t.fieldMap["id"] = t.Id
	t.fieldMap["product_type_id"] = t.ProductTypeId
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["lang"] = t.Lang
	t.fieldMap["tpl_code"] = t.TplCode
	t.fieldMap["tpl_name"] = t.TplName
	t.fieldMap["tpl_file"] = t.TplFile
	t.fieldMap["tpl_file_name"] = t.TplFileName
	t.fieldMap["tpl_file_size"] = t.TplFileSize
	t.fieldMap["tpl_desc"] = t.TplDesc
	t.fieldMap["version"] = t.Version
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tTplTestcaseTemplate) clone(db *gorm.DB) tTplTestcaseTemplate {
	t.tTplTestcaseTemplateDo.ReplaceDB(db)
	return t
}

type tTplTestcaseTemplateDo struct{ gen.DO }

func (t tTplTestcaseTemplateDo) Debug() *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Debug())
}

func (t tTplTestcaseTemplateDo) WithContext(ctx context.Context) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tTplTestcaseTemplateDo) Clauses(conds ...clause.Expression) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tTplTestcaseTemplateDo) Returning(value interface{}, columns ...string) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tTplTestcaseTemplateDo) Not(conds ...gen.Condition) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tTplTestcaseTemplateDo) Or(conds ...gen.Condition) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tTplTestcaseTemplateDo) Select(conds ...field.Expr) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tTplTestcaseTemplateDo) Where(conds ...gen.Condition) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tTplTestcaseTemplateDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tTplTestcaseTemplateDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tTplTestcaseTemplateDo) Order(conds ...field.Expr) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tTplTestcaseTemplateDo) Distinct(cols ...field.Expr) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tTplTestcaseTemplateDo) Omit(cols ...field.Expr) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tTplTestcaseTemplateDo) Join(table schema.Tabler, on ...field.Expr) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tTplTestcaseTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tTplTestcaseTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tTplTestcaseTemplateDo) Group(cols ...field.Expr) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tTplTestcaseTemplateDo) Having(conds ...gen.Condition) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tTplTestcaseTemplateDo) Limit(limit int) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tTplTestcaseTemplateDo) Offset(offset int) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tTplTestcaseTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tTplTestcaseTemplateDo) Unscoped() *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tTplTestcaseTemplateDo) Create(values ...*model.TTplTestcaseTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tTplTestcaseTemplateDo) CreateInBatches(values []*model.TTplTestcaseTemplate, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tTplTestcaseTemplateDo) Save(values ...*model.TTplTestcaseTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tTplTestcaseTemplateDo) First() (*model.TTplTestcaseTemplate, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTplTestcaseTemplate), nil
	}
}

func (t tTplTestcaseTemplateDo) Take() (*model.TTplTestcaseTemplate, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTplTestcaseTemplate), nil
	}
}

func (t tTplTestcaseTemplateDo) Last() (*model.TTplTestcaseTemplate, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTplTestcaseTemplate), nil
	}
}

func (t tTplTestcaseTemplateDo) Find() ([]*model.TTplTestcaseTemplate, error) {
	result, err := t.DO.Find()
	return result.([]*model.TTplTestcaseTemplate), err
}

func (t tTplTestcaseTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TTplTestcaseTemplate, err error) {
	buf := make([]*model.TTplTestcaseTemplate, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tTplTestcaseTemplateDo) FindInBatches(result *[]*model.TTplTestcaseTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tTplTestcaseTemplateDo) Attrs(attrs ...field.AssignExpr) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tTplTestcaseTemplateDo) Assign(attrs ...field.AssignExpr) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tTplTestcaseTemplateDo) Joins(field field.RelationField) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tTplTestcaseTemplateDo) Preload(field field.RelationField) *tTplTestcaseTemplateDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tTplTestcaseTemplateDo) FirstOrInit() (*model.TTplTestcaseTemplate, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTplTestcaseTemplate), nil
	}
}

func (t tTplTestcaseTemplateDo) FirstOrCreate() (*model.TTplTestcaseTemplate, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TTplTestcaseTemplate), nil
	}
}

func (t tTplTestcaseTemplateDo) FindByPage(offset int, limit int) (result []*model.TTplTestcaseTemplate, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tTplTestcaseTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tTplTestcaseTemplateDo) withDO(do gen.Dao) *tTplTestcaseTemplateDo {
	t.DO = *do.(*gen.DO)
	return t
}
