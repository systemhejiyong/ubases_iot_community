// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmProductFirmwareRelation(db *gorm.DB) tOpmProductFirmwareRelation {
	_tOpmProductFirmwareRelation := tOpmProductFirmwareRelation{}

	_tOpmProductFirmwareRelation.tOpmProductFirmwareRelationDo.UseDB(db)
	_tOpmProductFirmwareRelation.tOpmProductFirmwareRelationDo.UseModel(&model.TOpmProductFirmwareRelation{})

	tableName := _tOpmProductFirmwareRelation.tOpmProductFirmwareRelationDo.TableName()
	_tOpmProductFirmwareRelation.ALL = field.NewField(tableName, "*")
	_tOpmProductFirmwareRelation.Id = field.NewInt64(tableName, "id")
	_tOpmProductFirmwareRelation.ProductId = field.NewInt64(tableName, "product_id")
	_tOpmProductFirmwareRelation.FirmwareId = field.NewInt64(tableName, "firmware_id")
	_tOpmProductFirmwareRelation.IsCustom = field.NewInt32(tableName, "is_custom")
	_tOpmProductFirmwareRelation.FirmwareVersionId = field.NewInt64(tableName, "firmware_version_id")
	_tOpmProductFirmwareRelation.FirmwareVersion = field.NewString(tableName, "firmware_version")
	_tOpmProductFirmwareRelation.FirmwareKey = field.NewString(tableName, "firmware_key")
	_tOpmProductFirmwareRelation.FirmwareType = field.NewInt32(tableName, "firmware_type")

	_tOpmProductFirmwareRelation.fillFieldMap()

	return _tOpmProductFirmwareRelation
}

type tOpmProductFirmwareRelation struct {
	tOpmProductFirmwareRelationDo tOpmProductFirmwareRelationDo

	ALL               field.Field
	Id                field.Int64
	ProductId         field.Int64
	FirmwareId        field.Int64
	IsCustom          field.Int32
	FirmwareVersionId field.Int64
	FirmwareVersion   field.String
	FirmwareKey       field.String
	FirmwareType      field.Int32

	fieldMap map[string]field.Expr
}

func (t tOpmProductFirmwareRelation) Table(newTableName string) *tOpmProductFirmwareRelation {
	t.tOpmProductFirmwareRelationDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmProductFirmwareRelation) As(alias string) *tOpmProductFirmwareRelation {
	t.tOpmProductFirmwareRelationDo.DO = *(t.tOpmProductFirmwareRelationDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmProductFirmwareRelation) updateTableName(table string) *tOpmProductFirmwareRelation {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ProductId = field.NewInt64(table, "product_id")
	t.FirmwareId = field.NewInt64(table, "firmware_id")
	t.IsCustom = field.NewInt32(table, "is_custom")
	t.FirmwareVersionId = field.NewInt64(table, "firmware_version_id")
	t.FirmwareVersion = field.NewString(table, "firmware_version")
	t.FirmwareKey = field.NewString(table, "firmware_key")
	t.FirmwareType = field.NewInt32(table, "firmware_type")

	t.fillFieldMap()

	return t
}

func (t *tOpmProductFirmwareRelation) WithContext(ctx context.Context) *tOpmProductFirmwareRelationDo {
	return t.tOpmProductFirmwareRelationDo.WithContext(ctx)
}

func (t tOpmProductFirmwareRelation) TableName() string {
	return t.tOpmProductFirmwareRelationDo.TableName()
}

func (t tOpmProductFirmwareRelation) Alias() string { return t.tOpmProductFirmwareRelationDo.Alias() }

func (t *tOpmProductFirmwareRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmProductFirmwareRelation) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.Id
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["firmware_id"] = t.FirmwareId
	t.fieldMap["is_custom"] = t.IsCustom
	t.fieldMap["firmware_version_id"] = t.FirmwareVersionId
	t.fieldMap["firmware_version"] = t.FirmwareVersion
	t.fieldMap["firmware_key"] = t.FirmwareKey
	t.fieldMap["firmware_type"] = t.FirmwareType
}

func (t tOpmProductFirmwareRelation) clone(db *gorm.DB) tOpmProductFirmwareRelation {
	t.tOpmProductFirmwareRelationDo.ReplaceDB(db)
	return t
}

type tOpmProductFirmwareRelationDo struct{ gen.DO }

func (t tOpmProductFirmwareRelationDo) Debug() *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmProductFirmwareRelationDo) WithContext(ctx context.Context) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmProductFirmwareRelationDo) Clauses(conds ...clause.Expression) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmProductFirmwareRelationDo) Returning(value interface{}, columns ...string) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmProductFirmwareRelationDo) Not(conds ...gen.Condition) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmProductFirmwareRelationDo) Or(conds ...gen.Condition) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmProductFirmwareRelationDo) Select(conds ...field.Expr) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmProductFirmwareRelationDo) Where(conds ...gen.Condition) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmProductFirmwareRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmProductFirmwareRelationDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmProductFirmwareRelationDo) Order(conds ...field.Expr) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmProductFirmwareRelationDo) Distinct(cols ...field.Expr) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmProductFirmwareRelationDo) Omit(cols ...field.Expr) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmProductFirmwareRelationDo) Join(table schema.Tabler, on ...field.Expr) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmProductFirmwareRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmProductFirmwareRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmProductFirmwareRelationDo) Group(cols ...field.Expr) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmProductFirmwareRelationDo) Having(conds ...gen.Condition) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmProductFirmwareRelationDo) Limit(limit int) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmProductFirmwareRelationDo) Offset(offset int) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmProductFirmwareRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmProductFirmwareRelationDo) Unscoped() *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmProductFirmwareRelationDo) Create(values ...*model.TOpmProductFirmwareRelation) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmProductFirmwareRelationDo) CreateInBatches(values []*model.TOpmProductFirmwareRelation, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmProductFirmwareRelationDo) Save(values ...*model.TOpmProductFirmwareRelation) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmProductFirmwareRelationDo) First() (*model.TOpmProductFirmwareRelation, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductFirmwareRelation), nil
	}
}

func (t tOpmProductFirmwareRelationDo) Take() (*model.TOpmProductFirmwareRelation, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductFirmwareRelation), nil
	}
}

func (t tOpmProductFirmwareRelationDo) Last() (*model.TOpmProductFirmwareRelation, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductFirmwareRelation), nil
	}
}

func (t tOpmProductFirmwareRelationDo) Find() ([]*model.TOpmProductFirmwareRelation, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmProductFirmwareRelation), err
}

func (t tOpmProductFirmwareRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmProductFirmwareRelation, err error) {
	buf := make([]*model.TOpmProductFirmwareRelation, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmProductFirmwareRelationDo) FindInBatches(result *[]*model.TOpmProductFirmwareRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmProductFirmwareRelationDo) Attrs(attrs ...field.AssignExpr) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmProductFirmwareRelationDo) Assign(attrs ...field.AssignExpr) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmProductFirmwareRelationDo) Joins(field field.RelationField) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmProductFirmwareRelationDo) Preload(field field.RelationField) *tOpmProductFirmwareRelationDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmProductFirmwareRelationDo) FirstOrInit() (*model.TOpmProductFirmwareRelation, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductFirmwareRelation), nil
	}
}

func (t tOpmProductFirmwareRelationDo) FirstOrCreate() (*model.TOpmProductFirmwareRelation, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductFirmwareRelation), nil
	}
}

func (t tOpmProductFirmwareRelationDo) FindByPage(offset int, limit int) (result []*model.TOpmProductFirmwareRelation, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmProductFirmwareRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmProductFirmwareRelationDo) withDO(do gen.Dao) *tOpmProductFirmwareRelationDo {
	t.DO = *do.(*gen.DO)
	return t
}
