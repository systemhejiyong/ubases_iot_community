// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmProductMaterialLanguage(db *gorm.DB) tOpmProductMaterialLanguage {
	_tOpmProductMaterialLanguage := tOpmProductMaterialLanguage{}

	_tOpmProductMaterialLanguage.tOpmProductMaterialLanguageDo.UseDB(db)
	_tOpmProductMaterialLanguage.tOpmProductMaterialLanguageDo.UseModel(&model.TOpmProductMaterialLanguage{})

	tableName := _tOpmProductMaterialLanguage.tOpmProductMaterialLanguageDo.TableName()
	_tOpmProductMaterialLanguage.ALL = field.NewField(tableName, "*")
	_tOpmProductMaterialLanguage.Id = field.NewInt64(tableName, "id")
	_tOpmProductMaterialLanguage.MaterialId = field.NewInt64(tableName, "material_id")
	_tOpmProductMaterialLanguage.Lang = field.NewString(tableName, "lang")
	_tOpmProductMaterialLanguage.Name = field.NewString(tableName, "name")
	_tOpmProductMaterialLanguage.BrandName = field.NewString(tableName, "brand_name")
	_tOpmProductMaterialLanguage.FragranceName = field.NewString(tableName, "fragrance_name")
	_tOpmProductMaterialLanguage.ProductAddress = field.NewString(tableName, "product_address")
	_tOpmProductMaterialLanguage.Variety = field.NewString(tableName, "variety")
	_tOpmProductMaterialLanguage.Ingredient = field.NewString(tableName, "ingredient")
	_tOpmProductMaterialLanguage.Effect = field.NewString(tableName, "effect")
	_tOpmProductMaterialLanguage.Description = field.NewString(tableName, "description")

	_tOpmProductMaterialLanguage.fillFieldMap()

	return _tOpmProductMaterialLanguage
}

type tOpmProductMaterialLanguage struct {
	tOpmProductMaterialLanguageDo tOpmProductMaterialLanguageDo

	ALL            field.Field
	Id             field.Int64
	MaterialId     field.Int64
	Lang           field.String
	Name           field.String
	BrandName      field.String
	FragranceName  field.String
	ProductAddress field.String
	Variety        field.String
	Ingredient     field.String
	Effect         field.String
	Description    field.String

	fieldMap map[string]field.Expr
}

func (t tOpmProductMaterialLanguage) Table(newTableName string) *tOpmProductMaterialLanguage {
	t.tOpmProductMaterialLanguageDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmProductMaterialLanguage) As(alias string) *tOpmProductMaterialLanguage {
	t.tOpmProductMaterialLanguageDo.DO = *(t.tOpmProductMaterialLanguageDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmProductMaterialLanguage) updateTableName(table string) *tOpmProductMaterialLanguage {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.MaterialId = field.NewInt64(table, "material_id")
	t.Lang = field.NewString(table, "lang")
	t.Name = field.NewString(table, "name")
	t.BrandName = field.NewString(table, "brand_name")
	t.FragranceName = field.NewString(table, "fragrance_name")
	t.ProductAddress = field.NewString(table, "product_address")
	t.Variety = field.NewString(table, "variety")
	t.Ingredient = field.NewString(table, "ingredient")
	t.Effect = field.NewString(table, "effect")
	t.Description = field.NewString(table, "description")

	t.fillFieldMap()

	return t
}

func (t *tOpmProductMaterialLanguage) WithContext(ctx context.Context) *tOpmProductMaterialLanguageDo {
	return t.tOpmProductMaterialLanguageDo.WithContext(ctx)
}

func (t tOpmProductMaterialLanguage) TableName() string {
	return t.tOpmProductMaterialLanguageDo.TableName()
}

func (t tOpmProductMaterialLanguage) Alias() string { return t.tOpmProductMaterialLanguageDo.Alias() }

func (t *tOpmProductMaterialLanguage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmProductMaterialLanguage) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.Id
	t.fieldMap["material_id"] = t.MaterialId
	t.fieldMap["lang"] = t.Lang
	t.fieldMap["name"] = t.Name
	t.fieldMap["brand_name"] = t.BrandName
	t.fieldMap["fragrance_name"] = t.FragranceName
	t.fieldMap["product_address"] = t.ProductAddress
	t.fieldMap["variety"] = t.Variety
	t.fieldMap["ingredient"] = t.Ingredient
	t.fieldMap["effect"] = t.Effect
	t.fieldMap["description"] = t.Description
}

func (t tOpmProductMaterialLanguage) clone(db *gorm.DB) tOpmProductMaterialLanguage {
	t.tOpmProductMaterialLanguageDo.ReplaceDB(db)
	return t
}

type tOpmProductMaterialLanguageDo struct{ gen.DO }

func (t tOpmProductMaterialLanguageDo) Debug() *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmProductMaterialLanguageDo) WithContext(ctx context.Context) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmProductMaterialLanguageDo) Clauses(conds ...clause.Expression) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmProductMaterialLanguageDo) Returning(value interface{}, columns ...string) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmProductMaterialLanguageDo) Not(conds ...gen.Condition) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmProductMaterialLanguageDo) Or(conds ...gen.Condition) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmProductMaterialLanguageDo) Select(conds ...field.Expr) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmProductMaterialLanguageDo) Where(conds ...gen.Condition) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmProductMaterialLanguageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmProductMaterialLanguageDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmProductMaterialLanguageDo) Order(conds ...field.Expr) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmProductMaterialLanguageDo) Distinct(cols ...field.Expr) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmProductMaterialLanguageDo) Omit(cols ...field.Expr) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmProductMaterialLanguageDo) Join(table schema.Tabler, on ...field.Expr) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmProductMaterialLanguageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmProductMaterialLanguageDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmProductMaterialLanguageDo) Group(cols ...field.Expr) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmProductMaterialLanguageDo) Having(conds ...gen.Condition) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmProductMaterialLanguageDo) Limit(limit int) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmProductMaterialLanguageDo) Offset(offset int) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmProductMaterialLanguageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmProductMaterialLanguageDo) Unscoped() *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmProductMaterialLanguageDo) Create(values ...*model.TOpmProductMaterialLanguage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmProductMaterialLanguageDo) CreateInBatches(values []*model.TOpmProductMaterialLanguage, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmProductMaterialLanguageDo) Save(values ...*model.TOpmProductMaterialLanguage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmProductMaterialLanguageDo) First() (*model.TOpmProductMaterialLanguage, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductMaterialLanguage), nil
	}
}

func (t tOpmProductMaterialLanguageDo) Take() (*model.TOpmProductMaterialLanguage, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductMaterialLanguage), nil
	}
}

func (t tOpmProductMaterialLanguageDo) Last() (*model.TOpmProductMaterialLanguage, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductMaterialLanguage), nil
	}
}

func (t tOpmProductMaterialLanguageDo) Find() ([]*model.TOpmProductMaterialLanguage, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmProductMaterialLanguage), err
}

func (t tOpmProductMaterialLanguageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmProductMaterialLanguage, err error) {
	buf := make([]*model.TOpmProductMaterialLanguage, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmProductMaterialLanguageDo) FindInBatches(result *[]*model.TOpmProductMaterialLanguage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmProductMaterialLanguageDo) Attrs(attrs ...field.AssignExpr) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmProductMaterialLanguageDo) Assign(attrs ...field.AssignExpr) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmProductMaterialLanguageDo) Joins(field field.RelationField) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmProductMaterialLanguageDo) Preload(field field.RelationField) *tOpmProductMaterialLanguageDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmProductMaterialLanguageDo) FirstOrInit() (*model.TOpmProductMaterialLanguage, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductMaterialLanguage), nil
	}
}

func (t tOpmProductMaterialLanguageDo) FirstOrCreate() (*model.TOpmProductMaterialLanguage, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductMaterialLanguage), nil
	}
}

func (t tOpmProductMaterialLanguageDo) FindByPage(offset int, limit int) (result []*model.TOpmProductMaterialLanguage, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmProductMaterialLanguageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmProductMaterialLanguageDo) withDO(do gen.Dao) *tOpmProductMaterialLanguageDo {
	t.DO = *do.(*gen.DO)
	return t
}
