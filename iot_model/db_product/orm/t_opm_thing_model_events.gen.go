// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmThingModelEvents(db *gorm.DB) tOpmThingModelEvents {
	_tOpmThingModelEvents := tOpmThingModelEvents{}

	_tOpmThingModelEvents.tOpmThingModelEventsDo.UseDB(db)
	_tOpmThingModelEvents.tOpmThingModelEventsDo.UseModel(&model.TOpmThingModelEvents{})

	tableName := _tOpmThingModelEvents.tOpmThingModelEventsDo.TableName()
	_tOpmThingModelEvents.ALL = field.NewField(tableName, "*")
	_tOpmThingModelEvents.Id = field.NewInt64(tableName, "id")
	_tOpmThingModelEvents.ModelId = field.NewInt64(tableName, "model_id")
	_tOpmThingModelEvents.ProductId = field.NewString(tableName, "product_id")
	_tOpmThingModelEvents.CreateTs = field.NewString(tableName, "create_ts")
	_tOpmThingModelEvents.Identifier = field.NewString(tableName, "identifier")
	_tOpmThingModelEvents.EventName = field.NewString(tableName, "event_name")
	_tOpmThingModelEvents.EventType = field.NewString(tableName, "event_type")
	_tOpmThingModelEvents.Outputdata = field.NewString(tableName, "outputdata")
	_tOpmThingModelEvents.Required = field.NewInt32(tableName, "required")
	_tOpmThingModelEvents.Custom = field.NewInt32(tableName, "custom")
	_tOpmThingModelEvents.Extension = field.NewString(tableName, "extension")
	_tOpmThingModelEvents.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpmThingModelEvents.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmThingModelEvents.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOpmThingModelEvents.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOpmThingModelEvents.TenantId = field.NewString(tableName, "tenant_id")
	_tOpmThingModelEvents.StdId = field.NewInt64(tableName, "std_id")
	_tOpmThingModelEvents.Valid = field.NewInt32(tableName, "valid")
	_tOpmThingModelEvents.ProductKey = field.NewString(tableName, "product_key")
	_tOpmThingModelEvents.TriggerCond = field.NewInt32(tableName, "trigger_cond")
	_tOpmThingModelEvents.ExecCond = field.NewInt32(tableName, "exec_cond")
	_tOpmThingModelEvents.Desc = field.NewString(tableName, "desc")
	_tOpmThingModelEvents.Dpid = field.NewInt32(tableName, "dpid")

	_tOpmThingModelEvents.fillFieldMap()

	return _tOpmThingModelEvents
}

type tOpmThingModelEvents struct {
	tOpmThingModelEventsDo tOpmThingModelEventsDo

	ALL         field.Field
	Id          field.Int64
	ModelId     field.Int64
	ProductId   field.String
	CreateTs    field.String
	Identifier  field.String
	EventName   field.String
	EventType   field.String
	Outputdata  field.String
	Required    field.Int32
	Custom      field.Int32
	Extension   field.String
	CreatedBy   field.Int64
	CreatedAt   field.Time
	UpdatedBy   field.Int64
	UpdatedAt   field.Time
	TenantId    field.String
	StdId       field.Int64
	Valid       field.Int32
	ProductKey  field.String
	TriggerCond field.Int32
	ExecCond    field.Int32
	Desc        field.String
	Dpid        field.Int32

	fieldMap map[string]field.Expr
}

func (t tOpmThingModelEvents) Table(newTableName string) *tOpmThingModelEvents {
	t.tOpmThingModelEventsDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmThingModelEvents) As(alias string) *tOpmThingModelEvents {
	t.tOpmThingModelEventsDo.DO = *(t.tOpmThingModelEventsDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmThingModelEvents) updateTableName(table string) *tOpmThingModelEvents {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ModelId = field.NewInt64(table, "model_id")
	t.ProductId = field.NewString(table, "product_id")
	t.CreateTs = field.NewString(table, "create_ts")
	t.Identifier = field.NewString(table, "identifier")
	t.EventName = field.NewString(table, "event_name")
	t.EventType = field.NewString(table, "event_type")
	t.Outputdata = field.NewString(table, "outputdata")
	t.Required = field.NewInt32(table, "required")
	t.Custom = field.NewInt32(table, "custom")
	t.Extension = field.NewString(table, "extension")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.TenantId = field.NewString(table, "tenant_id")
	t.StdId = field.NewInt64(table, "std_id")
	t.Valid = field.NewInt32(table, "valid")
	t.ProductKey = field.NewString(table, "product_key")
	t.TriggerCond = field.NewInt32(table, "trigger_cond")
	t.ExecCond = field.NewInt32(table, "exec_cond")
	t.Desc = field.NewString(table, "desc")
	t.Dpid = field.NewInt32(table, "dpid")

	t.fillFieldMap()

	return t
}

func (t *tOpmThingModelEvents) WithContext(ctx context.Context) *tOpmThingModelEventsDo {
	return t.tOpmThingModelEventsDo.WithContext(ctx)
}

func (t tOpmThingModelEvents) TableName() string { return t.tOpmThingModelEventsDo.TableName() }

func (t tOpmThingModelEvents) Alias() string { return t.tOpmThingModelEventsDo.Alias() }

func (t *tOpmThingModelEvents) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmThingModelEvents) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 23)
	t.fieldMap["id"] = t.Id
	t.fieldMap["model_id"] = t.ModelId
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["create_ts"] = t.CreateTs
	t.fieldMap["identifier"] = t.Identifier
	t.fieldMap["event_name"] = t.EventName
	t.fieldMap["event_type"] = t.EventType
	t.fieldMap["outputdata"] = t.Outputdata
	t.fieldMap["required"] = t.Required
	t.fieldMap["custom"] = t.Custom
	t.fieldMap["extension"] = t.Extension
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["std_id"] = t.StdId
	t.fieldMap["valid"] = t.Valid
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["trigger_cond"] = t.TriggerCond
	t.fieldMap["exec_cond"] = t.ExecCond
	t.fieldMap["desc"] = t.Desc
	t.fieldMap["dpid"] = t.Dpid
}

func (t tOpmThingModelEvents) clone(db *gorm.DB) tOpmThingModelEvents {
	t.tOpmThingModelEventsDo.ReplaceDB(db)
	return t
}

type tOpmThingModelEventsDo struct{ gen.DO }

func (t tOpmThingModelEventsDo) Debug() *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmThingModelEventsDo) WithContext(ctx context.Context) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmThingModelEventsDo) Clauses(conds ...clause.Expression) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmThingModelEventsDo) Returning(value interface{}, columns ...string) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmThingModelEventsDo) Not(conds ...gen.Condition) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmThingModelEventsDo) Or(conds ...gen.Condition) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmThingModelEventsDo) Select(conds ...field.Expr) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmThingModelEventsDo) Where(conds ...gen.Condition) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmThingModelEventsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmThingModelEventsDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmThingModelEventsDo) Order(conds ...field.Expr) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmThingModelEventsDo) Distinct(cols ...field.Expr) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmThingModelEventsDo) Omit(cols ...field.Expr) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmThingModelEventsDo) Join(table schema.Tabler, on ...field.Expr) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmThingModelEventsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmThingModelEventsDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmThingModelEventsDo) Group(cols ...field.Expr) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmThingModelEventsDo) Having(conds ...gen.Condition) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmThingModelEventsDo) Limit(limit int) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmThingModelEventsDo) Offset(offset int) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmThingModelEventsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmThingModelEventsDo) Unscoped() *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmThingModelEventsDo) Create(values ...*model.TOpmThingModelEvents) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmThingModelEventsDo) CreateInBatches(values []*model.TOpmThingModelEvents, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmThingModelEventsDo) Save(values ...*model.TOpmThingModelEvents) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmThingModelEventsDo) First() (*model.TOpmThingModelEvents, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmThingModelEvents), nil
	}
}

func (t tOpmThingModelEventsDo) Take() (*model.TOpmThingModelEvents, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmThingModelEvents), nil
	}
}

func (t tOpmThingModelEventsDo) Last() (*model.TOpmThingModelEvents, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmThingModelEvents), nil
	}
}

func (t tOpmThingModelEventsDo) Find() ([]*model.TOpmThingModelEvents, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmThingModelEvents), err
}

func (t tOpmThingModelEventsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmThingModelEvents, err error) {
	buf := make([]*model.TOpmThingModelEvents, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmThingModelEventsDo) FindInBatches(result *[]*model.TOpmThingModelEvents, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmThingModelEventsDo) Attrs(attrs ...field.AssignExpr) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmThingModelEventsDo) Assign(attrs ...field.AssignExpr) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmThingModelEventsDo) Joins(field field.RelationField) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmThingModelEventsDo) Preload(field field.RelationField) *tOpmThingModelEventsDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmThingModelEventsDo) FirstOrInit() (*model.TOpmThingModelEvents, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmThingModelEvents), nil
	}
}

func (t tOpmThingModelEventsDo) FirstOrCreate() (*model.TOpmThingModelEvents, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmThingModelEvents), nil
	}
}

func (t tOpmThingModelEventsDo) FindByPage(offset int, limit int) (result []*model.TOpmThingModelEvents, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmThingModelEventsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmThingModelEventsDo) withDO(do gen.Dao) *tOpmThingModelEventsDo {
	t.DO = *do.(*gen.DO)
	return t
}
