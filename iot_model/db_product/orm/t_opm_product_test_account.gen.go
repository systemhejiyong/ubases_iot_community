// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmProductTestAccount(db *gorm.DB) tOpmProductTestAccount {
	_tOpmProductTestAccount := tOpmProductTestAccount{}

	_tOpmProductTestAccount.tOpmProductTestAccountDo.UseDB(db)
	_tOpmProductTestAccount.tOpmProductTestAccountDo.UseModel(&model.TOpmProductTestAccount{})

	tableName := _tOpmProductTestAccount.tOpmProductTestAccountDo.TableName()
	_tOpmProductTestAccount.ALL = field.NewField(tableName, "*")
	_tOpmProductTestAccount.Id = field.NewInt64(tableName, "id")
	_tOpmProductTestAccount.ProductId = field.NewInt64(tableName, "product_id")
	_tOpmProductTestAccount.Account = field.NewString(tableName, "account")
	_tOpmProductTestAccount.AppKey = field.NewString(tableName, "app_key")
	_tOpmProductTestAccount.UserId = field.NewInt64(tableName, "user_id")
	_tOpmProductTestAccount.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpmProductTestAccount.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmProductTestAccount.RegionServerId = field.NewInt64(tableName, "region_server_id")
	_tOpmProductTestAccount.TenantId = field.NewString(tableName, "tenant_id")

	_tOpmProductTestAccount.fillFieldMap()

	return _tOpmProductTestAccount
}

type tOpmProductTestAccount struct {
	tOpmProductTestAccountDo tOpmProductTestAccountDo

	ALL            field.Field
	Id             field.Int64
	ProductId      field.Int64
	Account        field.String
	AppKey         field.String
	UserId         field.Int64
	CreatedBy      field.Int64
	CreatedAt      field.Time
	RegionServerId field.Int64
	TenantId       field.String

	fieldMap map[string]field.Expr
}

func (t tOpmProductTestAccount) Table(newTableName string) *tOpmProductTestAccount {
	t.tOpmProductTestAccountDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmProductTestAccount) As(alias string) *tOpmProductTestAccount {
	t.tOpmProductTestAccountDo.DO = *(t.tOpmProductTestAccountDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmProductTestAccount) updateTableName(table string) *tOpmProductTestAccount {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ProductId = field.NewInt64(table, "product_id")
	t.Account = field.NewString(table, "account")
	t.AppKey = field.NewString(table, "app_key")
	t.UserId = field.NewInt64(table, "user_id")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.RegionServerId = field.NewInt64(table, "region_server_id")
	t.TenantId = field.NewString(table, "tenant_id")

	t.fillFieldMap()

	return t
}

func (t *tOpmProductTestAccount) WithContext(ctx context.Context) *tOpmProductTestAccountDo {
	return t.tOpmProductTestAccountDo.WithContext(ctx)
}

func (t tOpmProductTestAccount) TableName() string { return t.tOpmProductTestAccountDo.TableName() }

func (t tOpmProductTestAccount) Alias() string { return t.tOpmProductTestAccountDo.Alias() }

func (t *tOpmProductTestAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmProductTestAccount) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 9)
	t.fieldMap["id"] = t.Id
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["account"] = t.Account
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["user_id"] = t.UserId
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["region_server_id"] = t.RegionServerId
	t.fieldMap["tenant_id"] = t.TenantId
}

func (t tOpmProductTestAccount) clone(db *gorm.DB) tOpmProductTestAccount {
	t.tOpmProductTestAccountDo.ReplaceDB(db)
	return t
}

type tOpmProductTestAccountDo struct{ gen.DO }

func (t tOpmProductTestAccountDo) Debug() *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmProductTestAccountDo) WithContext(ctx context.Context) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmProductTestAccountDo) Clauses(conds ...clause.Expression) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmProductTestAccountDo) Returning(value interface{}, columns ...string) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmProductTestAccountDo) Not(conds ...gen.Condition) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmProductTestAccountDo) Or(conds ...gen.Condition) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmProductTestAccountDo) Select(conds ...field.Expr) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmProductTestAccountDo) Where(conds ...gen.Condition) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmProductTestAccountDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmProductTestAccountDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmProductTestAccountDo) Order(conds ...field.Expr) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmProductTestAccountDo) Distinct(cols ...field.Expr) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmProductTestAccountDo) Omit(cols ...field.Expr) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmProductTestAccountDo) Join(table schema.Tabler, on ...field.Expr) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmProductTestAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmProductTestAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmProductTestAccountDo) Group(cols ...field.Expr) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmProductTestAccountDo) Having(conds ...gen.Condition) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmProductTestAccountDo) Limit(limit int) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmProductTestAccountDo) Offset(offset int) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmProductTestAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmProductTestAccountDo) Unscoped() *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmProductTestAccountDo) Create(values ...*model.TOpmProductTestAccount) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmProductTestAccountDo) CreateInBatches(values []*model.TOpmProductTestAccount, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmProductTestAccountDo) Save(values ...*model.TOpmProductTestAccount) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmProductTestAccountDo) First() (*model.TOpmProductTestAccount, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductTestAccount), nil
	}
}

func (t tOpmProductTestAccountDo) Take() (*model.TOpmProductTestAccount, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductTestAccount), nil
	}
}

func (t tOpmProductTestAccountDo) Last() (*model.TOpmProductTestAccount, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductTestAccount), nil
	}
}

func (t tOpmProductTestAccountDo) Find() ([]*model.TOpmProductTestAccount, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmProductTestAccount), err
}

func (t tOpmProductTestAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmProductTestAccount, err error) {
	buf := make([]*model.TOpmProductTestAccount, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmProductTestAccountDo) FindInBatches(result *[]*model.TOpmProductTestAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmProductTestAccountDo) Attrs(attrs ...field.AssignExpr) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmProductTestAccountDo) Assign(attrs ...field.AssignExpr) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmProductTestAccountDo) Joins(field field.RelationField) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmProductTestAccountDo) Preload(field field.RelationField) *tOpmProductTestAccountDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmProductTestAccountDo) FirstOrInit() (*model.TOpmProductTestAccount, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductTestAccount), nil
	}
}

func (t tOpmProductTestAccountDo) FirstOrCreate() (*model.TOpmProductTestAccount, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductTestAccount), nil
	}
}

func (t tOpmProductTestAccountDo) FindByPage(offset int, limit int) (result []*model.TOpmProductTestAccount, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmProductTestAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmProductTestAccountDo) withDO(do gen.Dao) *tOpmProductTestAccountDo {
	t.DO = *do.(*gen.DO)
	return t
}
