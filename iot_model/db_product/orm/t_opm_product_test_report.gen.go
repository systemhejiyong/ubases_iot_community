// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmProductTestReport(db *gorm.DB) tOpmProductTestReport {
	_tOpmProductTestReport := tOpmProductTestReport{}

	_tOpmProductTestReport.tOpmProductTestReportDo.UseDB(db)
	_tOpmProductTestReport.tOpmProductTestReportDo.UseModel(&model.TOpmProductTestReport{})

	tableName := _tOpmProductTestReport.tOpmProductTestReportDo.TableName()
	_tOpmProductTestReport.ALL = field.NewField(tableName, "*")
	_tOpmProductTestReport.Id = field.NewInt64(tableName, "id")
	_tOpmProductTestReport.ProductId = field.NewInt64(tableName, "product_id")
	_tOpmProductTestReport.TestType = field.NewInt32(tableName, "test_type")
	_tOpmProductTestReport.IsValid = field.NewInt32(tableName, "is_valid")
	_tOpmProductTestReport.FilePath = field.NewString(tableName, "file_path")
	_tOpmProductTestReport.FileName = field.NewString(tableName, "file_name")
	_tOpmProductTestReport.FileSize = field.NewInt32(tableName, "file_size")
	_tOpmProductTestReport.FileKey = field.NewString(tableName, "file_key")
	_tOpmProductTestReport.TestOrigin = field.NewInt32(tableName, "test_origin")
	_tOpmProductTestReport.TestResult = field.NewInt32(tableName, "test_result")
	_tOpmProductTestReport.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpmProductTestReport.CreatedAt = field.NewTime(tableName, "created_at")

	_tOpmProductTestReport.fillFieldMap()

	return _tOpmProductTestReport
}

type tOpmProductTestReport struct {
	tOpmProductTestReportDo tOpmProductTestReportDo

	ALL        field.Field
	Id         field.Int64
	ProductId  field.Int64
	TestType   field.Int32
	IsValid    field.Int32
	FilePath   field.String
	FileName   field.String
	FileSize   field.Int32
	FileKey    field.String
	TestOrigin field.Int32
	TestResult field.Int32
	CreatedBy  field.Int64
	CreatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (t tOpmProductTestReport) Table(newTableName string) *tOpmProductTestReport {
	t.tOpmProductTestReportDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmProductTestReport) As(alias string) *tOpmProductTestReport {
	t.tOpmProductTestReportDo.DO = *(t.tOpmProductTestReportDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmProductTestReport) updateTableName(table string) *tOpmProductTestReport {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ProductId = field.NewInt64(table, "product_id")
	t.TestType = field.NewInt32(table, "test_type")
	t.IsValid = field.NewInt32(table, "is_valid")
	t.FilePath = field.NewString(table, "file_path")
	t.FileName = field.NewString(table, "file_name")
	t.FileSize = field.NewInt32(table, "file_size")
	t.FileKey = field.NewString(table, "file_key")
	t.TestOrigin = field.NewInt32(table, "test_origin")
	t.TestResult = field.NewInt32(table, "test_result")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")

	t.fillFieldMap()

	return t
}

func (t *tOpmProductTestReport) WithContext(ctx context.Context) *tOpmProductTestReportDo {
	return t.tOpmProductTestReportDo.WithContext(ctx)
}

func (t tOpmProductTestReport) TableName() string { return t.tOpmProductTestReportDo.TableName() }

func (t tOpmProductTestReport) Alias() string { return t.tOpmProductTestReportDo.Alias() }

func (t *tOpmProductTestReport) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmProductTestReport) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.Id
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["test_type"] = t.TestType
	t.fieldMap["is_valid"] = t.IsValid
	t.fieldMap["file_path"] = t.FilePath
	t.fieldMap["file_name"] = t.FileName
	t.fieldMap["file_size"] = t.FileSize
	t.fieldMap["file_key"] = t.FileKey
	t.fieldMap["test_origin"] = t.TestOrigin
	t.fieldMap["test_result"] = t.TestResult
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
}

func (t tOpmProductTestReport) clone(db *gorm.DB) tOpmProductTestReport {
	t.tOpmProductTestReportDo.ReplaceDB(db)
	return t
}

type tOpmProductTestReportDo struct{ gen.DO }

func (t tOpmProductTestReportDo) Debug() *tOpmProductTestReportDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmProductTestReportDo) WithContext(ctx context.Context) *tOpmProductTestReportDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmProductTestReportDo) Clauses(conds ...clause.Expression) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmProductTestReportDo) Returning(value interface{}, columns ...string) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmProductTestReportDo) Not(conds ...gen.Condition) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmProductTestReportDo) Or(conds ...gen.Condition) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmProductTestReportDo) Select(conds ...field.Expr) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmProductTestReportDo) Where(conds ...gen.Condition) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmProductTestReportDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmProductTestReportDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmProductTestReportDo) Order(conds ...field.Expr) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmProductTestReportDo) Distinct(cols ...field.Expr) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmProductTestReportDo) Omit(cols ...field.Expr) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmProductTestReportDo) Join(table schema.Tabler, on ...field.Expr) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmProductTestReportDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmProductTestReportDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmProductTestReportDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmProductTestReportDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmProductTestReportDo) Group(cols ...field.Expr) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmProductTestReportDo) Having(conds ...gen.Condition) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmProductTestReportDo) Limit(limit int) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmProductTestReportDo) Offset(offset int) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmProductTestReportDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmProductTestReportDo) Unscoped() *tOpmProductTestReportDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmProductTestReportDo) Create(values ...*model.TOpmProductTestReport) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmProductTestReportDo) CreateInBatches(values []*model.TOpmProductTestReport, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmProductTestReportDo) Save(values ...*model.TOpmProductTestReport) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmProductTestReportDo) First() (*model.TOpmProductTestReport, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductTestReport), nil
	}
}

func (t tOpmProductTestReportDo) Take() (*model.TOpmProductTestReport, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductTestReport), nil
	}
}

func (t tOpmProductTestReportDo) Last() (*model.TOpmProductTestReport, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductTestReport), nil
	}
}

func (t tOpmProductTestReportDo) Find() ([]*model.TOpmProductTestReport, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmProductTestReport), err
}

func (t tOpmProductTestReportDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmProductTestReport, err error) {
	buf := make([]*model.TOpmProductTestReport, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmProductTestReportDo) FindInBatches(result *[]*model.TOpmProductTestReport, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmProductTestReportDo) Attrs(attrs ...field.AssignExpr) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmProductTestReportDo) Assign(attrs ...field.AssignExpr) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmProductTestReportDo) Joins(field field.RelationField) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmProductTestReportDo) Preload(field field.RelationField) *tOpmProductTestReportDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmProductTestReportDo) FirstOrInit() (*model.TOpmProductTestReport, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductTestReport), nil
	}
}

func (t tOpmProductTestReportDo) FirstOrCreate() (*model.TOpmProductTestReport, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductTestReport), nil
	}
}

func (t tOpmProductTestReportDo) FindByPage(offset int, limit int) (result []*model.TOpmProductTestReport, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmProductTestReportDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmProductTestReportDo) withDO(do gen.Dao) *tOpmProductTestReportDo {
	t.DO = *do.(*gen.DO)
	return t
}
