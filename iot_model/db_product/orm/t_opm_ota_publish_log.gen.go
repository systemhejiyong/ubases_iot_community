// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmOtaPublishLog(db *gorm.DB) tOpmOtaPublishLog {
	_tOpmOtaPublishLog := tOpmOtaPublishLog{}

	_tOpmOtaPublishLog.tOpmOtaPublishLogDo.UseDB(db)
	_tOpmOtaPublishLog.tOpmOtaPublishLogDo.UseModel(&model.TOpmOtaPublishLog{})

	tableName := _tOpmOtaPublishLog.tOpmOtaPublishLogDo.TableName()
	_tOpmOtaPublishLog.ALL = field.NewField(tableName, "*")
	_tOpmOtaPublishLog.Id = field.NewInt64(tableName, "id")
	_tOpmOtaPublishLog.ProductId = field.NewInt64(tableName, "product_id")
	_tOpmOtaPublishLog.FirmwareId = field.NewInt64(tableName, "firmware_id")
	_tOpmOtaPublishLog.PkgId = field.NewInt64(tableName, "pkg_id")
	_tOpmOtaPublishLog.IsGray = field.NewInt32(tableName, "is_gray")
	_tOpmOtaPublishLog.GrayType = field.NewInt32(tableName, "gray_type")
	_tOpmOtaPublishLog.GrayScale = field.NewInt32(tableName, "gray_scale")
	_tOpmOtaPublishLog.Type = field.NewInt32(tableName, "type")
	_tOpmOtaPublishLog.Version = field.NewString(tableName, "version")
	_tOpmOtaPublishLog.Did = field.NewString(tableName, "did")
	_tOpmOtaPublishLog.Status = field.NewInt32(tableName, "status")
	_tOpmOtaPublishLog.DeviceLog = field.NewString(tableName, "device_log")
	_tOpmOtaPublishLog.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpmOtaPublishLog.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOpmOtaPublishLog.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmOtaPublishLog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOpmOtaPublishLog.DeletedAt = field.NewField(tableName, "deleted_at")
	_tOpmOtaPublishLog.TenantId = field.NewString(tableName, "tenant_id")

	_tOpmOtaPublishLog.fillFieldMap()

	return _tOpmOtaPublishLog
}

type tOpmOtaPublishLog struct {
	tOpmOtaPublishLogDo tOpmOtaPublishLogDo

	ALL        field.Field
	Id         field.Int64
	ProductId  field.Int64
	FirmwareId field.Int64
	PkgId      field.Int64
	IsGray     field.Int32
	GrayType   field.Int32
	GrayScale  field.Int32
	Type       field.Int32
	Version    field.String
	Did        field.String
	Status     field.Int32
	DeviceLog  field.String
	CreatedBy  field.Int64
	UpdatedBy  field.Int64
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	TenantId   field.String

	fieldMap map[string]field.Expr
}

func (t tOpmOtaPublishLog) Table(newTableName string) *tOpmOtaPublishLog {
	t.tOpmOtaPublishLogDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmOtaPublishLog) As(alias string) *tOpmOtaPublishLog {
	t.tOpmOtaPublishLogDo.DO = *(t.tOpmOtaPublishLogDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmOtaPublishLog) updateTableName(table string) *tOpmOtaPublishLog {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ProductId = field.NewInt64(table, "product_id")
	t.FirmwareId = field.NewInt64(table, "firmware_id")
	t.PkgId = field.NewInt64(table, "pkg_id")
	t.IsGray = field.NewInt32(table, "is_gray")
	t.GrayType = field.NewInt32(table, "gray_type")
	t.GrayScale = field.NewInt32(table, "gray_scale")
	t.Type = field.NewInt32(table, "type")
	t.Version = field.NewString(table, "version")
	t.Did = field.NewString(table, "did")
	t.Status = field.NewInt32(table, "status")
	t.DeviceLog = field.NewString(table, "device_log")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.TenantId = field.NewString(table, "tenant_id")

	t.fillFieldMap()

	return t
}

func (t *tOpmOtaPublishLog) WithContext(ctx context.Context) *tOpmOtaPublishLogDo {
	return t.tOpmOtaPublishLogDo.WithContext(ctx)
}

func (t tOpmOtaPublishLog) TableName() string { return t.tOpmOtaPublishLogDo.TableName() }

func (t tOpmOtaPublishLog) Alias() string { return t.tOpmOtaPublishLogDo.Alias() }

func (t *tOpmOtaPublishLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmOtaPublishLog) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 18)
	t.fieldMap["id"] = t.Id
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["firmware_id"] = t.FirmwareId
	t.fieldMap["pkg_id"] = t.PkgId
	t.fieldMap["is_gray"] = t.IsGray
	t.fieldMap["gray_type"] = t.GrayType
	t.fieldMap["gray_scale"] = t.GrayScale
	t.fieldMap["type"] = t.Type
	t.fieldMap["version"] = t.Version
	t.fieldMap["did"] = t.Did
	t.fieldMap["status"] = t.Status
	t.fieldMap["device_log"] = t.DeviceLog
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["tenant_id"] = t.TenantId
}

func (t tOpmOtaPublishLog) clone(db *gorm.DB) tOpmOtaPublishLog {
	t.tOpmOtaPublishLogDo.ReplaceDB(db)
	return t
}

type tOpmOtaPublishLogDo struct{ gen.DO }

func (t tOpmOtaPublishLogDo) Debug() *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmOtaPublishLogDo) WithContext(ctx context.Context) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmOtaPublishLogDo) Clauses(conds ...clause.Expression) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmOtaPublishLogDo) Returning(value interface{}, columns ...string) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmOtaPublishLogDo) Not(conds ...gen.Condition) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmOtaPublishLogDo) Or(conds ...gen.Condition) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmOtaPublishLogDo) Select(conds ...field.Expr) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmOtaPublishLogDo) Where(conds ...gen.Condition) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmOtaPublishLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmOtaPublishLogDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmOtaPublishLogDo) Order(conds ...field.Expr) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmOtaPublishLogDo) Distinct(cols ...field.Expr) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmOtaPublishLogDo) Omit(cols ...field.Expr) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmOtaPublishLogDo) Join(table schema.Tabler, on ...field.Expr) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmOtaPublishLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmOtaPublishLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmOtaPublishLogDo) Group(cols ...field.Expr) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmOtaPublishLogDo) Having(conds ...gen.Condition) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmOtaPublishLogDo) Limit(limit int) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmOtaPublishLogDo) Offset(offset int) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmOtaPublishLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmOtaPublishLogDo) Unscoped() *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmOtaPublishLogDo) Create(values ...*model.TOpmOtaPublishLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmOtaPublishLogDo) CreateInBatches(values []*model.TOpmOtaPublishLog, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmOtaPublishLogDo) Save(values ...*model.TOpmOtaPublishLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmOtaPublishLogDo) First() (*model.TOpmOtaPublishLog, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmOtaPublishLog), nil
	}
}

func (t tOpmOtaPublishLogDo) Take() (*model.TOpmOtaPublishLog, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmOtaPublishLog), nil
	}
}

func (t tOpmOtaPublishLogDo) Last() (*model.TOpmOtaPublishLog, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmOtaPublishLog), nil
	}
}

func (t tOpmOtaPublishLogDo) Find() ([]*model.TOpmOtaPublishLog, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmOtaPublishLog), err
}

func (t tOpmOtaPublishLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmOtaPublishLog, err error) {
	buf := make([]*model.TOpmOtaPublishLog, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmOtaPublishLogDo) FindInBatches(result *[]*model.TOpmOtaPublishLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmOtaPublishLogDo) Attrs(attrs ...field.AssignExpr) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmOtaPublishLogDo) Assign(attrs ...field.AssignExpr) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmOtaPublishLogDo) Joins(field field.RelationField) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmOtaPublishLogDo) Preload(field field.RelationField) *tOpmOtaPublishLogDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmOtaPublishLogDo) FirstOrInit() (*model.TOpmOtaPublishLog, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmOtaPublishLog), nil
	}
}

func (t tOpmOtaPublishLogDo) FirstOrCreate() (*model.TOpmOtaPublishLog, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmOtaPublishLog), nil
	}
}

func (t tOpmOtaPublishLogDo) FindByPage(offset int, limit int) (result []*model.TOpmOtaPublishLog, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmOtaPublishLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmOtaPublishLogDo) withDO(do gen.Dao) *tOpmOtaPublishLogDo {
	t.DO = *do.(*gen.DO)
	return t
}
