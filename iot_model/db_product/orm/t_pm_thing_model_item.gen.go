// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTPmThingModelItem(db *gorm.DB) tPmThingModelItem {
	_tPmThingModelItem := tPmThingModelItem{}

	_tPmThingModelItem.tPmThingModelItemDo.UseDB(db)
	_tPmThingModelItem.tPmThingModelItemDo.UseModel(&model.TPmThingModelItem{})

	tableName := _tPmThingModelItem.tPmThingModelItemDo.TableName()
	_tPmThingModelItem.ALL = field.NewField(tableName, "*")
	_tPmThingModelItem.Id = field.NewInt64(tableName, "id")
	_tPmThingModelItem.ProductTypeId = field.NewInt64(tableName, "product_type_id")
	_tPmThingModelItem.Dpid = field.NewInt32(tableName, "dpid")
	_tPmThingModelItem.Identifier = field.NewString(tableName, "identifier")
	_tPmThingModelItem.Name = field.NewString(tableName, "name")
	_tPmThingModelItem.RwFlag = field.NewString(tableName, "rw_flag")
	_tPmThingModelItem.DataType = field.NewString(tableName, "data_type")
	_tPmThingModelItem.Properties = field.NewString(tableName, "properties")
	_tPmThingModelItem.Mark = field.NewString(tableName, "mark")
	_tPmThingModelItem.Required = field.NewInt32(tableName, "required")

	_tPmThingModelItem.fillFieldMap()

	return _tPmThingModelItem
}

type tPmThingModelItem struct {
	tPmThingModelItemDo tPmThingModelItemDo

	ALL           field.Field
	Id            field.Int64
	ProductTypeId field.Int64
	Dpid          field.Int32
	Identifier    field.String
	Name          field.String
	RwFlag        field.String
	DataType      field.String
	Properties    field.String
	Mark          field.String
	Required      field.Int32

	fieldMap map[string]field.Expr
}

func (t tPmThingModelItem) Table(newTableName string) *tPmThingModelItem {
	t.tPmThingModelItemDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPmThingModelItem) As(alias string) *tPmThingModelItem {
	t.tPmThingModelItemDo.DO = *(t.tPmThingModelItemDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tPmThingModelItem) updateTableName(table string) *tPmThingModelItem {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ProductTypeId = field.NewInt64(table, "product_type_id")
	t.Dpid = field.NewInt32(table, "dpid")
	t.Identifier = field.NewString(table, "identifier")
	t.Name = field.NewString(table, "name")
	t.RwFlag = field.NewString(table, "rw_flag")
	t.DataType = field.NewString(table, "data_type")
	t.Properties = field.NewString(table, "properties")
	t.Mark = field.NewString(table, "mark")
	t.Required = field.NewInt32(table, "required")

	t.fillFieldMap()

	return t
}

func (t *tPmThingModelItem) WithContext(ctx context.Context) *tPmThingModelItemDo {
	return t.tPmThingModelItemDo.WithContext(ctx)
}

func (t tPmThingModelItem) TableName() string { return t.tPmThingModelItemDo.TableName() }

func (t tPmThingModelItem) Alias() string { return t.tPmThingModelItemDo.Alias() }

func (t *tPmThingModelItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPmThingModelItem) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.Id
	t.fieldMap["product_type_id"] = t.ProductTypeId
	t.fieldMap["dpid"] = t.Dpid
	t.fieldMap["identifier"] = t.Identifier
	t.fieldMap["name"] = t.Name
	t.fieldMap["rw_flag"] = t.RwFlag
	t.fieldMap["data_type"] = t.DataType
	t.fieldMap["properties"] = t.Properties
	t.fieldMap["mark"] = t.Mark
	t.fieldMap["required"] = t.Required
}

func (t tPmThingModelItem) clone(db *gorm.DB) tPmThingModelItem {
	t.tPmThingModelItemDo.ReplaceDB(db)
	return t
}

type tPmThingModelItemDo struct{ gen.DO }

func (t tPmThingModelItemDo) Debug() *tPmThingModelItemDo {
	return t.withDO(t.DO.Debug())
}

func (t tPmThingModelItemDo) WithContext(ctx context.Context) *tPmThingModelItemDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPmThingModelItemDo) Clauses(conds ...clause.Expression) *tPmThingModelItemDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPmThingModelItemDo) Returning(value interface{}, columns ...string) *tPmThingModelItemDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPmThingModelItemDo) Not(conds ...gen.Condition) *tPmThingModelItemDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPmThingModelItemDo) Or(conds ...gen.Condition) *tPmThingModelItemDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPmThingModelItemDo) Select(conds ...field.Expr) *tPmThingModelItemDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPmThingModelItemDo) Where(conds ...gen.Condition) *tPmThingModelItemDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPmThingModelItemDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tPmThingModelItemDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tPmThingModelItemDo) Order(conds ...field.Expr) *tPmThingModelItemDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPmThingModelItemDo) Distinct(cols ...field.Expr) *tPmThingModelItemDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPmThingModelItemDo) Omit(cols ...field.Expr) *tPmThingModelItemDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPmThingModelItemDo) Join(table schema.Tabler, on ...field.Expr) *tPmThingModelItemDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPmThingModelItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tPmThingModelItemDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPmThingModelItemDo) RightJoin(table schema.Tabler, on ...field.Expr) *tPmThingModelItemDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPmThingModelItemDo) Group(cols ...field.Expr) *tPmThingModelItemDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPmThingModelItemDo) Having(conds ...gen.Condition) *tPmThingModelItemDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPmThingModelItemDo) Limit(limit int) *tPmThingModelItemDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPmThingModelItemDo) Offset(offset int) *tPmThingModelItemDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPmThingModelItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tPmThingModelItemDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPmThingModelItemDo) Unscoped() *tPmThingModelItemDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPmThingModelItemDo) Create(values ...*model.TPmThingModelItem) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPmThingModelItemDo) CreateInBatches(values []*model.TPmThingModelItem, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPmThingModelItemDo) Save(values ...*model.TPmThingModelItem) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPmThingModelItemDo) First() (*model.TPmThingModelItem, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmThingModelItem), nil
	}
}

func (t tPmThingModelItemDo) Take() (*model.TPmThingModelItem, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmThingModelItem), nil
	}
}

func (t tPmThingModelItemDo) Last() (*model.TPmThingModelItem, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmThingModelItem), nil
	}
}

func (t tPmThingModelItemDo) Find() ([]*model.TPmThingModelItem, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPmThingModelItem), err
}

func (t tPmThingModelItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPmThingModelItem, err error) {
	buf := make([]*model.TPmThingModelItem, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPmThingModelItemDo) FindInBatches(result *[]*model.TPmThingModelItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPmThingModelItemDo) Attrs(attrs ...field.AssignExpr) *tPmThingModelItemDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPmThingModelItemDo) Assign(attrs ...field.AssignExpr) *tPmThingModelItemDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPmThingModelItemDo) Joins(field field.RelationField) *tPmThingModelItemDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tPmThingModelItemDo) Preload(field field.RelationField) *tPmThingModelItemDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tPmThingModelItemDo) FirstOrInit() (*model.TPmThingModelItem, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmThingModelItem), nil
	}
}

func (t tPmThingModelItemDo) FirstOrCreate() (*model.TPmThingModelItem, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmThingModelItem), nil
	}
}

func (t tPmThingModelItemDo) FindByPage(offset int, limit int) (result []*model.TPmThingModelItem, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPmThingModelItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tPmThingModelItemDo) withDO(do gen.Dao) *tPmThingModelItemDo {
	t.DO = *do.(*gen.DO)
	return t
}
