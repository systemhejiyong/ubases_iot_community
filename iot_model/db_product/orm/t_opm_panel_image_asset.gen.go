// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmPanelImageAsset(db *gorm.DB) tOpmPanelImageAsset {
	_tOpmPanelImageAsset := tOpmPanelImageAsset{}

	_tOpmPanelImageAsset.tOpmPanelImageAssetDo.UseDB(db)
	_tOpmPanelImageAsset.tOpmPanelImageAssetDo.UseModel(&model.TOpmPanelImageAsset{})

	tableName := _tOpmPanelImageAsset.tOpmPanelImageAssetDo.TableName()
	_tOpmPanelImageAsset.ALL = field.NewField(tableName, "*")
	_tOpmPanelImageAsset.Id = field.NewInt64(tableName, "id")
	_tOpmPanelImageAsset.Resolution = field.NewString(tableName, "resolution")
	_tOpmPanelImageAsset.AssetFormat = field.NewString(tableName, "asset_format")
	_tOpmPanelImageAsset.Size = field.NewInt64(tableName, "size")
	_tOpmPanelImageAsset.AssetType = field.NewInt32(tableName, "asset_type")
	_tOpmPanelImageAsset.Builtin = field.NewInt32(tableName, "builtin")
	_tOpmPanelImageAsset.IconType = field.NewInt32(tableName, "icon_type")
	_tOpmPanelImageAsset.IconSubType = field.NewInt32(tableName, "icon_sub_type")
	_tOpmPanelImageAsset.AssetName = field.NewString(tableName, "asset_name")
	_tOpmPanelImageAsset.Thumbnail = field.NewString(tableName, "thumbnail")
	_tOpmPanelImageAsset.AssetUrl = field.NewString(tableName, "asset_url")
	_tOpmPanelImageAsset.TenantId = field.NewString(tableName, "tenant_id")
	_tOpmPanelImageAsset.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpmPanelImageAsset.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmPanelImageAsset.DeletedAt = field.NewField(tableName, "deleted_at")

	_tOpmPanelImageAsset.fillFieldMap()

	return _tOpmPanelImageAsset
}

type tOpmPanelImageAsset struct {
	tOpmPanelImageAssetDo tOpmPanelImageAssetDo

	ALL         field.Field
	Id          field.Int64
	Resolution  field.String
	AssetFormat field.String
	Size        field.Int64
	AssetType   field.Int32
	Builtin     field.Int32
	IconType    field.Int32
	IconSubType field.Int32
	AssetName   field.String
	Thumbnail   field.String
	AssetUrl    field.String
	TenantId    field.String
	CreatedBy   field.Int64
	CreatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (t tOpmPanelImageAsset) Table(newTableName string) *tOpmPanelImageAsset {
	t.tOpmPanelImageAssetDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmPanelImageAsset) As(alias string) *tOpmPanelImageAsset {
	t.tOpmPanelImageAssetDo.DO = *(t.tOpmPanelImageAssetDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmPanelImageAsset) updateTableName(table string) *tOpmPanelImageAsset {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Resolution = field.NewString(table, "resolution")
	t.AssetFormat = field.NewString(table, "asset_format")
	t.Size = field.NewInt64(table, "size")
	t.AssetType = field.NewInt32(table, "asset_type")
	t.Builtin = field.NewInt32(table, "builtin")
	t.IconType = field.NewInt32(table, "icon_type")
	t.IconSubType = field.NewInt32(table, "icon_sub_type")
	t.AssetName = field.NewString(table, "asset_name")
	t.Thumbnail = field.NewString(table, "thumbnail")
	t.AssetUrl = field.NewString(table, "asset_url")
	t.TenantId = field.NewString(table, "tenant_id")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tOpmPanelImageAsset) WithContext(ctx context.Context) *tOpmPanelImageAssetDo {
	return t.tOpmPanelImageAssetDo.WithContext(ctx)
}

func (t tOpmPanelImageAsset) TableName() string { return t.tOpmPanelImageAssetDo.TableName() }

func (t tOpmPanelImageAsset) Alias() string { return t.tOpmPanelImageAssetDo.Alias() }

func (t *tOpmPanelImageAsset) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmPanelImageAsset) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 15)
	t.fieldMap["id"] = t.Id
	t.fieldMap["resolution"] = t.Resolution
	t.fieldMap["asset_format"] = t.AssetFormat
	t.fieldMap["size"] = t.Size
	t.fieldMap["asset_type"] = t.AssetType
	t.fieldMap["builtin"] = t.Builtin
	t.fieldMap["icon_type"] = t.IconType
	t.fieldMap["icon_sub_type"] = t.IconSubType
	t.fieldMap["asset_name"] = t.AssetName
	t.fieldMap["thumbnail"] = t.Thumbnail
	t.fieldMap["asset_url"] = t.AssetUrl
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tOpmPanelImageAsset) clone(db *gorm.DB) tOpmPanelImageAsset {
	t.tOpmPanelImageAssetDo.ReplaceDB(db)
	return t
}

type tOpmPanelImageAssetDo struct{ gen.DO }

func (t tOpmPanelImageAssetDo) Debug() *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmPanelImageAssetDo) WithContext(ctx context.Context) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmPanelImageAssetDo) Clauses(conds ...clause.Expression) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmPanelImageAssetDo) Returning(value interface{}, columns ...string) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmPanelImageAssetDo) Not(conds ...gen.Condition) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmPanelImageAssetDo) Or(conds ...gen.Condition) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmPanelImageAssetDo) Select(conds ...field.Expr) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmPanelImageAssetDo) Where(conds ...gen.Condition) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmPanelImageAssetDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmPanelImageAssetDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmPanelImageAssetDo) Order(conds ...field.Expr) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmPanelImageAssetDo) Distinct(cols ...field.Expr) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmPanelImageAssetDo) Omit(cols ...field.Expr) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmPanelImageAssetDo) Join(table schema.Tabler, on ...field.Expr) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmPanelImageAssetDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmPanelImageAssetDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmPanelImageAssetDo) Group(cols ...field.Expr) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmPanelImageAssetDo) Having(conds ...gen.Condition) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmPanelImageAssetDo) Limit(limit int) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmPanelImageAssetDo) Offset(offset int) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmPanelImageAssetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmPanelImageAssetDo) Unscoped() *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmPanelImageAssetDo) Create(values ...*model.TOpmPanelImageAsset) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmPanelImageAssetDo) CreateInBatches(values []*model.TOpmPanelImageAsset, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmPanelImageAssetDo) Save(values ...*model.TOpmPanelImageAsset) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmPanelImageAssetDo) First() (*model.TOpmPanelImageAsset, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelImageAsset), nil
	}
}

func (t tOpmPanelImageAssetDo) Take() (*model.TOpmPanelImageAsset, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelImageAsset), nil
	}
}

func (t tOpmPanelImageAssetDo) Last() (*model.TOpmPanelImageAsset, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelImageAsset), nil
	}
}

func (t tOpmPanelImageAssetDo) Find() ([]*model.TOpmPanelImageAsset, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmPanelImageAsset), err
}

func (t tOpmPanelImageAssetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmPanelImageAsset, err error) {
	buf := make([]*model.TOpmPanelImageAsset, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmPanelImageAssetDo) FindInBatches(result *[]*model.TOpmPanelImageAsset, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmPanelImageAssetDo) Attrs(attrs ...field.AssignExpr) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmPanelImageAssetDo) Assign(attrs ...field.AssignExpr) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmPanelImageAssetDo) Joins(field field.RelationField) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmPanelImageAssetDo) Preload(field field.RelationField) *tOpmPanelImageAssetDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmPanelImageAssetDo) FirstOrInit() (*model.TOpmPanelImageAsset, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelImageAsset), nil
	}
}

func (t tOpmPanelImageAssetDo) FirstOrCreate() (*model.TOpmPanelImageAsset, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelImageAsset), nil
	}
}

func (t tOpmPanelImageAssetDo) FindByPage(offset int, limit int) (result []*model.TOpmPanelImageAsset, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmPanelImageAssetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmPanelImageAssetDo) withDO(do gen.Dao) *tOpmPanelImageAssetDo {
	t.DO = *do.(*gen.DO)
	return t
}
