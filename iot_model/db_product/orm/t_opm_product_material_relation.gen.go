// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmProductMaterialRelation(db *gorm.DB) tOpmProductMaterialRelation {
	_tOpmProductMaterialRelation := tOpmProductMaterialRelation{}

	_tOpmProductMaterialRelation.tOpmProductMaterialRelationDo.UseDB(db)
	_tOpmProductMaterialRelation.tOpmProductMaterialRelationDo.UseModel(&model.TOpmProductMaterialRelation{})

	tableName := _tOpmProductMaterialRelation.tOpmProductMaterialRelationDo.TableName()
	_tOpmProductMaterialRelation.ALL = field.NewField(tableName, "*")
	_tOpmProductMaterialRelation.Id = field.NewInt64(tableName, "id")
	_tOpmProductMaterialRelation.MaterialId = field.NewInt64(tableName, "material_id")
	_tOpmProductMaterialRelation.ProductId = field.NewInt64(tableName, "product_id")

	_tOpmProductMaterialRelation.fillFieldMap()

	return _tOpmProductMaterialRelation
}

type tOpmProductMaterialRelation struct {
	tOpmProductMaterialRelationDo tOpmProductMaterialRelationDo

	ALL        field.Field
	Id         field.Int64
	MaterialId field.Int64
	ProductId  field.Int64

	fieldMap map[string]field.Expr
}

func (t tOpmProductMaterialRelation) Table(newTableName string) *tOpmProductMaterialRelation {
	t.tOpmProductMaterialRelationDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmProductMaterialRelation) As(alias string) *tOpmProductMaterialRelation {
	t.tOpmProductMaterialRelationDo.DO = *(t.tOpmProductMaterialRelationDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmProductMaterialRelation) updateTableName(table string) *tOpmProductMaterialRelation {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.MaterialId = field.NewInt64(table, "material_id")
	t.ProductId = field.NewInt64(table, "product_id")

	t.fillFieldMap()

	return t
}

func (t *tOpmProductMaterialRelation) WithContext(ctx context.Context) *tOpmProductMaterialRelationDo {
	return t.tOpmProductMaterialRelationDo.WithContext(ctx)
}

func (t tOpmProductMaterialRelation) TableName() string {
	return t.tOpmProductMaterialRelationDo.TableName()
}

func (t tOpmProductMaterialRelation) Alias() string { return t.tOpmProductMaterialRelationDo.Alias() }

func (t *tOpmProductMaterialRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmProductMaterialRelation) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.Id
	t.fieldMap["material_id"] = t.MaterialId
	t.fieldMap["product_id"] = t.ProductId
}

func (t tOpmProductMaterialRelation) clone(db *gorm.DB) tOpmProductMaterialRelation {
	t.tOpmProductMaterialRelationDo.ReplaceDB(db)
	return t
}

type tOpmProductMaterialRelationDo struct{ gen.DO }

func (t tOpmProductMaterialRelationDo) Debug() *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmProductMaterialRelationDo) WithContext(ctx context.Context) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmProductMaterialRelationDo) Clauses(conds ...clause.Expression) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmProductMaterialRelationDo) Returning(value interface{}, columns ...string) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmProductMaterialRelationDo) Not(conds ...gen.Condition) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmProductMaterialRelationDo) Or(conds ...gen.Condition) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmProductMaterialRelationDo) Select(conds ...field.Expr) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmProductMaterialRelationDo) Where(conds ...gen.Condition) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmProductMaterialRelationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmProductMaterialRelationDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmProductMaterialRelationDo) Order(conds ...field.Expr) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmProductMaterialRelationDo) Distinct(cols ...field.Expr) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmProductMaterialRelationDo) Omit(cols ...field.Expr) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmProductMaterialRelationDo) Join(table schema.Tabler, on ...field.Expr) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmProductMaterialRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmProductMaterialRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmProductMaterialRelationDo) Group(cols ...field.Expr) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmProductMaterialRelationDo) Having(conds ...gen.Condition) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmProductMaterialRelationDo) Limit(limit int) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmProductMaterialRelationDo) Offset(offset int) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmProductMaterialRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmProductMaterialRelationDo) Unscoped() *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmProductMaterialRelationDo) Create(values ...*model.TOpmProductMaterialRelation) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmProductMaterialRelationDo) CreateInBatches(values []*model.TOpmProductMaterialRelation, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmProductMaterialRelationDo) Save(values ...*model.TOpmProductMaterialRelation) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmProductMaterialRelationDo) First() (*model.TOpmProductMaterialRelation, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductMaterialRelation), nil
	}
}

func (t tOpmProductMaterialRelationDo) Take() (*model.TOpmProductMaterialRelation, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductMaterialRelation), nil
	}
}

func (t tOpmProductMaterialRelationDo) Last() (*model.TOpmProductMaterialRelation, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductMaterialRelation), nil
	}
}

func (t tOpmProductMaterialRelationDo) Find() ([]*model.TOpmProductMaterialRelation, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmProductMaterialRelation), err
}

func (t tOpmProductMaterialRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmProductMaterialRelation, err error) {
	buf := make([]*model.TOpmProductMaterialRelation, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmProductMaterialRelationDo) FindInBatches(result *[]*model.TOpmProductMaterialRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmProductMaterialRelationDo) Attrs(attrs ...field.AssignExpr) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmProductMaterialRelationDo) Assign(attrs ...field.AssignExpr) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmProductMaterialRelationDo) Joins(field field.RelationField) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmProductMaterialRelationDo) Preload(field field.RelationField) *tOpmProductMaterialRelationDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmProductMaterialRelationDo) FirstOrInit() (*model.TOpmProductMaterialRelation, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductMaterialRelation), nil
	}
}

func (t tOpmProductMaterialRelationDo) FirstOrCreate() (*model.TOpmProductMaterialRelation, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmProductMaterialRelation), nil
	}
}

func (t tOpmProductMaterialRelationDo) FindByPage(offset int, limit int) (result []*model.TOpmProductMaterialRelation, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmProductMaterialRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmProductMaterialRelationDo) withDO(do gen.Dao) *tOpmProductMaterialRelationDo {
	t.DO = *do.(*gen.DO)
	return t
}
