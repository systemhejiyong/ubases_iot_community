// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmLocalSceneProduct(db *gorm.DB) tOpmLocalSceneProduct {
	_tOpmLocalSceneProduct := tOpmLocalSceneProduct{}

	_tOpmLocalSceneProduct.tOpmLocalSceneProductDo.UseDB(db)
	_tOpmLocalSceneProduct.tOpmLocalSceneProductDo.UseModel(&model.TOpmLocalSceneProduct{})

	tableName := _tOpmLocalSceneProduct.tOpmLocalSceneProductDo.TableName()
	_tOpmLocalSceneProduct.ALL = field.NewField(tableName, "*")
	_tOpmLocalSceneProduct.Id = field.NewInt64(tableName, "id")
	_tOpmLocalSceneProduct.SceneId = field.NewInt64(tableName, "scene_id")
	_tOpmLocalSceneProduct.ProductKey = field.NewString(tableName, "product_key")
	_tOpmLocalSceneProduct.RuleJson = field.NewString(tableName, "rule_json")
	_tOpmLocalSceneProduct.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpmLocalSceneProduct.CreatedAt = field.NewTime(tableName, "created_at")

	_tOpmLocalSceneProduct.fillFieldMap()

	return _tOpmLocalSceneProduct
}

type tOpmLocalSceneProduct struct {
	tOpmLocalSceneProductDo tOpmLocalSceneProductDo

	ALL        field.Field
	Id         field.Int64
	SceneId    field.Int64
	ProductKey field.String
	RuleJson   field.String
	CreatedBy  field.Int64
	CreatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (t tOpmLocalSceneProduct) Table(newTableName string) *tOpmLocalSceneProduct {
	t.tOpmLocalSceneProductDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmLocalSceneProduct) As(alias string) *tOpmLocalSceneProduct {
	t.tOpmLocalSceneProductDo.DO = *(t.tOpmLocalSceneProductDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmLocalSceneProduct) updateTableName(table string) *tOpmLocalSceneProduct {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.SceneId = field.NewInt64(table, "scene_id")
	t.ProductKey = field.NewString(table, "product_key")
	t.RuleJson = field.NewString(table, "rule_json")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")

	t.fillFieldMap()

	return t
}

func (t *tOpmLocalSceneProduct) WithContext(ctx context.Context) *tOpmLocalSceneProductDo {
	return t.tOpmLocalSceneProductDo.WithContext(ctx)
}

func (t tOpmLocalSceneProduct) TableName() string { return t.tOpmLocalSceneProductDo.TableName() }

func (t tOpmLocalSceneProduct) Alias() string { return t.tOpmLocalSceneProductDo.Alias() }

func (t *tOpmLocalSceneProduct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmLocalSceneProduct) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["id"] = t.Id
	t.fieldMap["scene_id"] = t.SceneId
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["rule_json"] = t.RuleJson
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
}

func (t tOpmLocalSceneProduct) clone(db *gorm.DB) tOpmLocalSceneProduct {
	t.tOpmLocalSceneProductDo.ReplaceDB(db)
	return t
}

type tOpmLocalSceneProductDo struct{ gen.DO }

func (t tOpmLocalSceneProductDo) Debug() *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmLocalSceneProductDo) WithContext(ctx context.Context) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmLocalSceneProductDo) Clauses(conds ...clause.Expression) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmLocalSceneProductDo) Returning(value interface{}, columns ...string) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmLocalSceneProductDo) Not(conds ...gen.Condition) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmLocalSceneProductDo) Or(conds ...gen.Condition) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmLocalSceneProductDo) Select(conds ...field.Expr) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmLocalSceneProductDo) Where(conds ...gen.Condition) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmLocalSceneProductDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmLocalSceneProductDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmLocalSceneProductDo) Order(conds ...field.Expr) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmLocalSceneProductDo) Distinct(cols ...field.Expr) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmLocalSceneProductDo) Omit(cols ...field.Expr) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmLocalSceneProductDo) Join(table schema.Tabler, on ...field.Expr) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmLocalSceneProductDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmLocalSceneProductDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmLocalSceneProductDo) Group(cols ...field.Expr) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmLocalSceneProductDo) Having(conds ...gen.Condition) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmLocalSceneProductDo) Limit(limit int) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmLocalSceneProductDo) Offset(offset int) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmLocalSceneProductDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmLocalSceneProductDo) Unscoped() *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmLocalSceneProductDo) Create(values ...*model.TOpmLocalSceneProduct) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmLocalSceneProductDo) CreateInBatches(values []*model.TOpmLocalSceneProduct, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmLocalSceneProductDo) Save(values ...*model.TOpmLocalSceneProduct) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmLocalSceneProductDo) First() (*model.TOpmLocalSceneProduct, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmLocalSceneProduct), nil
	}
}

func (t tOpmLocalSceneProductDo) Take() (*model.TOpmLocalSceneProduct, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmLocalSceneProduct), nil
	}
}

func (t tOpmLocalSceneProductDo) Last() (*model.TOpmLocalSceneProduct, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmLocalSceneProduct), nil
	}
}

func (t tOpmLocalSceneProductDo) Find() ([]*model.TOpmLocalSceneProduct, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmLocalSceneProduct), err
}

func (t tOpmLocalSceneProductDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmLocalSceneProduct, err error) {
	buf := make([]*model.TOpmLocalSceneProduct, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmLocalSceneProductDo) FindInBatches(result *[]*model.TOpmLocalSceneProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmLocalSceneProductDo) Attrs(attrs ...field.AssignExpr) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmLocalSceneProductDo) Assign(attrs ...field.AssignExpr) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmLocalSceneProductDo) Joins(field field.RelationField) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmLocalSceneProductDo) Preload(field field.RelationField) *tOpmLocalSceneProductDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmLocalSceneProductDo) FirstOrInit() (*model.TOpmLocalSceneProduct, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmLocalSceneProduct), nil
	}
}

func (t tOpmLocalSceneProductDo) FirstOrCreate() (*model.TOpmLocalSceneProduct, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmLocalSceneProduct), nil
	}
}

func (t tOpmLocalSceneProductDo) FindByPage(offset int, limit int) (result []*model.TOpmLocalSceneProduct, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmLocalSceneProductDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmLocalSceneProductDo) withDO(do gen.Dao) *tOpmLocalSceneProductDo {
	t.DO = *do.(*gen.DO)
	return t
}
