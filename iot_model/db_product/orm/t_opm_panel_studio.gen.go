// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpmPanelStudio(db *gorm.DB) tOpmPanelStudio {
	_tOpmPanelStudio := tOpmPanelStudio{}

	_tOpmPanelStudio.tOpmPanelStudioDo.UseDB(db)
	_tOpmPanelStudio.tOpmPanelStudioDo.UseModel(&model.TOpmPanelStudio{})

	tableName := _tOpmPanelStudio.tOpmPanelStudioDo.TableName()
	_tOpmPanelStudio.ALL = field.NewField(tableName, "*")
	_tOpmPanelStudio.Id = field.NewInt64(tableName, "id")
	_tOpmPanelStudio.PanelId = field.NewInt64(tableName, "panel_id")
	_tOpmPanelStudio.PageName = field.NewString(tableName, "page_name")
	_tOpmPanelStudio.PageIdentify = field.NewString(tableName, "page_identify")
	_tOpmPanelStudio.JsonContent = field.NewString(tableName, "json_content")
	_tOpmPanelStudio.PopupContent = field.NewString(tableName, "popup_content")
	_tOpmPanelStudio.VueContent = field.NewString(tableName, "vue_content")
	_tOpmPanelStudio.StyleContent = field.NewString(tableName, "style_content")
	_tOpmPanelStudio.IsHome = field.NewInt32(tableName, "is_home")
	_tOpmPanelStudio.Sort = field.NewInt32(tableName, "sort")
	_tOpmPanelStudio.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpmPanelStudio.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOpmPanelStudio.UpdatedBy = field.NewInt64(tableName, "updated_by")

	_tOpmPanelStudio.fillFieldMap()

	return _tOpmPanelStudio
}

type tOpmPanelStudio struct {
	tOpmPanelStudioDo tOpmPanelStudioDo

	ALL          field.Field
	Id           field.Int64
	PanelId      field.Int64
	PageName     field.String
	PageIdentify field.String
	JsonContent  field.String
	PopupContent field.String
	VueContent   field.String
	StyleContent field.String
	IsHome       field.Int32
	Sort         field.Int32
	CreatedAt    field.Time
	UpdatedAt    field.Time
	UpdatedBy    field.Int64

	fieldMap map[string]field.Expr
}

func (t tOpmPanelStudio) Table(newTableName string) *tOpmPanelStudio {
	t.tOpmPanelStudioDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpmPanelStudio) As(alias string) *tOpmPanelStudio {
	t.tOpmPanelStudioDo.DO = *(t.tOpmPanelStudioDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpmPanelStudio) updateTableName(table string) *tOpmPanelStudio {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.PanelId = field.NewInt64(table, "panel_id")
	t.PageName = field.NewString(table, "page_name")
	t.PageIdentify = field.NewString(table, "page_identify")
	t.JsonContent = field.NewString(table, "json_content")
	t.PopupContent = field.NewString(table, "popup_content")
	t.VueContent = field.NewString(table, "vue_content")
	t.StyleContent = field.NewString(table, "style_content")
	t.IsHome = field.NewInt32(table, "is_home")
	t.Sort = field.NewInt32(table, "sort")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")

	t.fillFieldMap()

	return t
}

func (t *tOpmPanelStudio) WithContext(ctx context.Context) *tOpmPanelStudioDo {
	return t.tOpmPanelStudioDo.WithContext(ctx)
}

func (t tOpmPanelStudio) TableName() string { return t.tOpmPanelStudioDo.TableName() }

func (t tOpmPanelStudio) Alias() string { return t.tOpmPanelStudioDo.Alias() }

func (t *tOpmPanelStudio) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpmPanelStudio) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.Id
	t.fieldMap["panel_id"] = t.PanelId
	t.fieldMap["page_name"] = t.PageName
	t.fieldMap["page_identify"] = t.PageIdentify
	t.fieldMap["json_content"] = t.JsonContent
	t.fieldMap["popup_content"] = t.PopupContent
	t.fieldMap["vue_content"] = t.VueContent
	t.fieldMap["style_content"] = t.StyleContent
	t.fieldMap["is_home"] = t.IsHome
	t.fieldMap["sort"] = t.Sort
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
}

func (t tOpmPanelStudio) clone(db *gorm.DB) tOpmPanelStudio {
	t.tOpmPanelStudioDo.ReplaceDB(db)
	return t
}

type tOpmPanelStudioDo struct{ gen.DO }

func (t tOpmPanelStudioDo) Debug() *tOpmPanelStudioDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpmPanelStudioDo) WithContext(ctx context.Context) *tOpmPanelStudioDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpmPanelStudioDo) Clauses(conds ...clause.Expression) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpmPanelStudioDo) Returning(value interface{}, columns ...string) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpmPanelStudioDo) Not(conds ...gen.Condition) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpmPanelStudioDo) Or(conds ...gen.Condition) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpmPanelStudioDo) Select(conds ...field.Expr) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpmPanelStudioDo) Where(conds ...gen.Condition) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpmPanelStudioDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpmPanelStudioDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpmPanelStudioDo) Order(conds ...field.Expr) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpmPanelStudioDo) Distinct(cols ...field.Expr) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpmPanelStudioDo) Omit(cols ...field.Expr) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpmPanelStudioDo) Join(table schema.Tabler, on ...field.Expr) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpmPanelStudioDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpmPanelStudioDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpmPanelStudioDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpmPanelStudioDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpmPanelStudioDo) Group(cols ...field.Expr) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpmPanelStudioDo) Having(conds ...gen.Condition) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpmPanelStudioDo) Limit(limit int) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpmPanelStudioDo) Offset(offset int) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpmPanelStudioDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpmPanelStudioDo) Unscoped() *tOpmPanelStudioDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpmPanelStudioDo) Create(values ...*model.TOpmPanelStudio) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpmPanelStudioDo) CreateInBatches(values []*model.TOpmPanelStudio, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpmPanelStudioDo) Save(values ...*model.TOpmPanelStudio) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpmPanelStudioDo) First() (*model.TOpmPanelStudio, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelStudio), nil
	}
}

func (t tOpmPanelStudioDo) Take() (*model.TOpmPanelStudio, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelStudio), nil
	}
}

func (t tOpmPanelStudioDo) Last() (*model.TOpmPanelStudio, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelStudio), nil
	}
}

func (t tOpmPanelStudioDo) Find() ([]*model.TOpmPanelStudio, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpmPanelStudio), err
}

func (t tOpmPanelStudioDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpmPanelStudio, err error) {
	buf := make([]*model.TOpmPanelStudio, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpmPanelStudioDo) FindInBatches(result *[]*model.TOpmPanelStudio, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpmPanelStudioDo) Attrs(attrs ...field.AssignExpr) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpmPanelStudioDo) Assign(attrs ...field.AssignExpr) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpmPanelStudioDo) Joins(field field.RelationField) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpmPanelStudioDo) Preload(field field.RelationField) *tOpmPanelStudioDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpmPanelStudioDo) FirstOrInit() (*model.TOpmPanelStudio, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelStudio), nil
	}
}

func (t tOpmPanelStudioDo) FirstOrCreate() (*model.TOpmPanelStudio, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpmPanelStudio), nil
	}
}

func (t tOpmPanelStudioDo) FindByPage(offset int, limit int) (result []*model.TOpmPanelStudio, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpmPanelStudioDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpmPanelStudioDo) withDO(do gen.Dao) *tOpmPanelStudioDo {
	t.DO = *do.(*gen.DO)
	return t
}
