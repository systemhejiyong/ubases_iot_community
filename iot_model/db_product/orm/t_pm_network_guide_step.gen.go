// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTPmNetworkGuideStep(db *gorm.DB) tPmNetworkGuideStep {
	_tPmNetworkGuideStep := tPmNetworkGuideStep{}

	_tPmNetworkGuideStep.tPmNetworkGuideStepDo.UseDB(db)
	_tPmNetworkGuideStep.tPmNetworkGuideStepDo.UseModel(&model.TPmNetworkGuideStep{})

	tableName := _tPmNetworkGuideStep.tPmNetworkGuideStepDo.TableName()
	_tPmNetworkGuideStep.ALL = field.NewField(tableName, "*")
	_tPmNetworkGuideStep.Id = field.NewInt64(tableName, "id")
	_tPmNetworkGuideStep.NetworkGuideId = field.NewInt64(tableName, "network_guide_id")
	_tPmNetworkGuideStep.Instruction = field.NewString(tableName, "instruction")
	_tPmNetworkGuideStep.InstructionEn = field.NewString(tableName, "instruction_en")
	_tPmNetworkGuideStep.ImageUrl = field.NewString(tableName, "image_url")
	_tPmNetworkGuideStep.VideoUrl = field.NewString(tableName, "video_url")
	_tPmNetworkGuideStep.Sort = field.NewInt32(tableName, "sort")
	_tPmNetworkGuideStep.CreatedBy = field.NewInt64(tableName, "created_by")
	_tPmNetworkGuideStep.CreatedAt = field.NewTime(tableName, "created_at")
	_tPmNetworkGuideStep.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tPmNetworkGuideStep.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tPmNetworkGuideStep.DeletedAt = field.NewField(tableName, "deleted_at")

	_tPmNetworkGuideStep.fillFieldMap()

	return _tPmNetworkGuideStep
}

type tPmNetworkGuideStep struct {
	tPmNetworkGuideStepDo tPmNetworkGuideStepDo

	ALL            field.Field
	Id             field.Int64
	NetworkGuideId field.Int64
	Instruction    field.String
	InstructionEn  field.String
	ImageUrl       field.String
	VideoUrl       field.String
	Sort           field.Int32
	CreatedBy      field.Int64
	CreatedAt      field.Time
	UpdatedBy      field.Int64
	UpdatedAt      field.Time
	DeletedAt      field.Field

	fieldMap map[string]field.Expr
}

func (t tPmNetworkGuideStep) Table(newTableName string) *tPmNetworkGuideStep {
	t.tPmNetworkGuideStepDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPmNetworkGuideStep) As(alias string) *tPmNetworkGuideStep {
	t.tPmNetworkGuideStepDo.DO = *(t.tPmNetworkGuideStepDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tPmNetworkGuideStep) updateTableName(table string) *tPmNetworkGuideStep {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.NetworkGuideId = field.NewInt64(table, "network_guide_id")
	t.Instruction = field.NewString(table, "instruction")
	t.InstructionEn = field.NewString(table, "instruction_en")
	t.ImageUrl = field.NewString(table, "image_url")
	t.VideoUrl = field.NewString(table, "video_url")
	t.Sort = field.NewInt32(table, "sort")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tPmNetworkGuideStep) WithContext(ctx context.Context) *tPmNetworkGuideStepDo {
	return t.tPmNetworkGuideStepDo.WithContext(ctx)
}

func (t tPmNetworkGuideStep) TableName() string { return t.tPmNetworkGuideStepDo.TableName() }

func (t tPmNetworkGuideStep) Alias() string { return t.tPmNetworkGuideStepDo.Alias() }

func (t *tPmNetworkGuideStep) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPmNetworkGuideStep) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.Id
	t.fieldMap["network_guide_id"] = t.NetworkGuideId
	t.fieldMap["instruction"] = t.Instruction
	t.fieldMap["instruction_en"] = t.InstructionEn
	t.fieldMap["image_url"] = t.ImageUrl
	t.fieldMap["video_url"] = t.VideoUrl
	t.fieldMap["sort"] = t.Sort
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tPmNetworkGuideStep) clone(db *gorm.DB) tPmNetworkGuideStep {
	t.tPmNetworkGuideStepDo.ReplaceDB(db)
	return t
}

type tPmNetworkGuideStepDo struct{ gen.DO }

func (t tPmNetworkGuideStepDo) Debug() *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Debug())
}

func (t tPmNetworkGuideStepDo) WithContext(ctx context.Context) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPmNetworkGuideStepDo) Clauses(conds ...clause.Expression) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPmNetworkGuideStepDo) Returning(value interface{}, columns ...string) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPmNetworkGuideStepDo) Not(conds ...gen.Condition) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPmNetworkGuideStepDo) Or(conds ...gen.Condition) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPmNetworkGuideStepDo) Select(conds ...field.Expr) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPmNetworkGuideStepDo) Where(conds ...gen.Condition) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPmNetworkGuideStepDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tPmNetworkGuideStepDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tPmNetworkGuideStepDo) Order(conds ...field.Expr) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPmNetworkGuideStepDo) Distinct(cols ...field.Expr) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPmNetworkGuideStepDo) Omit(cols ...field.Expr) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPmNetworkGuideStepDo) Join(table schema.Tabler, on ...field.Expr) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPmNetworkGuideStepDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPmNetworkGuideStepDo) RightJoin(table schema.Tabler, on ...field.Expr) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPmNetworkGuideStepDo) Group(cols ...field.Expr) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPmNetworkGuideStepDo) Having(conds ...gen.Condition) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPmNetworkGuideStepDo) Limit(limit int) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPmNetworkGuideStepDo) Offset(offset int) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPmNetworkGuideStepDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPmNetworkGuideStepDo) Unscoped() *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPmNetworkGuideStepDo) Create(values ...*model.TPmNetworkGuideStep) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPmNetworkGuideStepDo) CreateInBatches(values []*model.TPmNetworkGuideStep, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPmNetworkGuideStepDo) Save(values ...*model.TPmNetworkGuideStep) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPmNetworkGuideStepDo) First() (*model.TPmNetworkGuideStep, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmNetworkGuideStep), nil
	}
}

func (t tPmNetworkGuideStepDo) Take() (*model.TPmNetworkGuideStep, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmNetworkGuideStep), nil
	}
}

func (t tPmNetworkGuideStepDo) Last() (*model.TPmNetworkGuideStep, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmNetworkGuideStep), nil
	}
}

func (t tPmNetworkGuideStepDo) Find() ([]*model.TPmNetworkGuideStep, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPmNetworkGuideStep), err
}

func (t tPmNetworkGuideStepDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPmNetworkGuideStep, err error) {
	buf := make([]*model.TPmNetworkGuideStep, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPmNetworkGuideStepDo) FindInBatches(result *[]*model.TPmNetworkGuideStep, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPmNetworkGuideStepDo) Attrs(attrs ...field.AssignExpr) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPmNetworkGuideStepDo) Assign(attrs ...field.AssignExpr) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPmNetworkGuideStepDo) Joins(field field.RelationField) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tPmNetworkGuideStepDo) Preload(field field.RelationField) *tPmNetworkGuideStepDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tPmNetworkGuideStepDo) FirstOrInit() (*model.TPmNetworkGuideStep, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmNetworkGuideStep), nil
	}
}

func (t tPmNetworkGuideStepDo) FirstOrCreate() (*model.TPmNetworkGuideStep, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmNetworkGuideStep), nil
	}
}

func (t tPmNetworkGuideStepDo) FindByPage(offset int, limit int) (result []*model.TPmNetworkGuideStep, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPmNetworkGuideStepDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tPmNetworkGuideStepDo) withDO(do gen.Dao) *tPmNetworkGuideStepDo {
	t.DO = *do.(*gen.DO)
	return t
}
