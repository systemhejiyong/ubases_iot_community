// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_product/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTPmFirmwareVersion(db *gorm.DB) tPmFirmwareVersion {
	_tPmFirmwareVersion := tPmFirmwareVersion{}

	_tPmFirmwareVersion.tPmFirmwareVersionDo.UseDB(db)
	_tPmFirmwareVersion.tPmFirmwareVersionDo.UseModel(&model.TPmFirmwareVersion{})

	tableName := _tPmFirmwareVersion.tPmFirmwareVersionDo.TableName()
	_tPmFirmwareVersion.ALL = field.NewField(tableName, "*")
	_tPmFirmwareVersion.Id = field.NewInt64(tableName, "id")
	_tPmFirmwareVersion.FirmwareId = field.NewInt64(tableName, "firmware_id")
	_tPmFirmwareVersion.Version = field.NewString(tableName, "version")
	_tPmFirmwareVersion.Desc = field.NewString(tableName, "desc")
	_tPmFirmwareVersion.Status = field.NewInt32(tableName, "status")
	_tPmFirmwareVersion.FileName = field.NewString(tableName, "file_name")
	_tPmFirmwareVersion.FilePath = field.NewString(tableName, "file_path")
	_tPmFirmwareVersion.FileKey = field.NewString(tableName, "file_key")
	_tPmFirmwareVersion.FileSize = field.NewInt32(tableName, "file_size")
	_tPmFirmwareVersion.CreatedAt = field.NewTime(tableName, "created_at")
	_tPmFirmwareVersion.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tPmFirmwareVersion.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tPmFirmwareVersion.DeletedAt = field.NewField(tableName, "deleted_at")
	_tPmFirmwareVersion.ZipFileName = field.NewString(tableName, "zip_file_name")
	_tPmFirmwareVersion.ZipFilePath = field.NewString(tableName, "zip_file_path")
	_tPmFirmwareVersion.ZipFileKey = field.NewString(tableName, "zip_file_key")
	_tPmFirmwareVersion.ZipFileSize = field.NewInt32(tableName, "zip_file_size")
	_tPmFirmwareVersion.IsMust = field.NewInt32(tableName, "is_must")

	_tPmFirmwareVersion.fillFieldMap()

	return _tPmFirmwareVersion
}

type tPmFirmwareVersion struct {
	tPmFirmwareVersionDo tPmFirmwareVersionDo

	ALL         field.Field
	Id          field.Int64
	FirmwareId  field.Int64
	Version     field.String
	Desc        field.String
	Status      field.Int32
	FileName    field.String
	FilePath    field.String
	FileKey     field.String
	FileSize    field.Int32
	CreatedAt   field.Time
	UpdatedBy   field.Int64
	UpdatedAt   field.Time
	DeletedAt   field.Field
	ZipFileName field.String
	ZipFilePath field.String
	ZipFileKey  field.String
	ZipFileSize field.Int32
	IsMust      field.Int32

	fieldMap map[string]field.Expr
}

func (t tPmFirmwareVersion) Table(newTableName string) *tPmFirmwareVersion {
	t.tPmFirmwareVersionDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPmFirmwareVersion) As(alias string) *tPmFirmwareVersion {
	t.tPmFirmwareVersionDo.DO = *(t.tPmFirmwareVersionDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tPmFirmwareVersion) updateTableName(table string) *tPmFirmwareVersion {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.FirmwareId = field.NewInt64(table, "firmware_id")
	t.Version = field.NewString(table, "version")
	t.Desc = field.NewString(table, "desc")
	t.Status = field.NewInt32(table, "status")
	t.FileName = field.NewString(table, "file_name")
	t.FilePath = field.NewString(table, "file_path")
	t.FileKey = field.NewString(table, "file_key")
	t.FileSize = field.NewInt32(table, "file_size")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.ZipFileName = field.NewString(table, "zip_file_name")
	t.ZipFilePath = field.NewString(table, "zip_file_path")
	t.ZipFileKey = field.NewString(table, "zip_file_key")
	t.ZipFileSize = field.NewInt32(table, "zip_file_size")
	t.IsMust = field.NewInt32(table, "is_must")

	t.fillFieldMap()

	return t
}

func (t *tPmFirmwareVersion) WithContext(ctx context.Context) *tPmFirmwareVersionDo {
	return t.tPmFirmwareVersionDo.WithContext(ctx)
}

func (t tPmFirmwareVersion) TableName() string { return t.tPmFirmwareVersionDo.TableName() }

func (t tPmFirmwareVersion) Alias() string { return t.tPmFirmwareVersionDo.Alias() }

func (t *tPmFirmwareVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPmFirmwareVersion) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 18)
	t.fieldMap["id"] = t.Id
	t.fieldMap["firmware_id"] = t.FirmwareId
	t.fieldMap["version"] = t.Version
	t.fieldMap["desc"] = t.Desc
	t.fieldMap["status"] = t.Status
	t.fieldMap["file_name"] = t.FileName
	t.fieldMap["file_path"] = t.FilePath
	t.fieldMap["file_key"] = t.FileKey
	t.fieldMap["file_size"] = t.FileSize
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["zip_file_name"] = t.ZipFileName
	t.fieldMap["zip_file_path"] = t.ZipFilePath
	t.fieldMap["zip_file_key"] = t.ZipFileKey
	t.fieldMap["zip_file_size"] = t.ZipFileSize
	t.fieldMap["is_must"] = t.IsMust
}

func (t tPmFirmwareVersion) clone(db *gorm.DB) tPmFirmwareVersion {
	t.tPmFirmwareVersionDo.ReplaceDB(db)
	return t
}

type tPmFirmwareVersionDo struct{ gen.DO }

func (t tPmFirmwareVersionDo) Debug() *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Debug())
}

func (t tPmFirmwareVersionDo) WithContext(ctx context.Context) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPmFirmwareVersionDo) Clauses(conds ...clause.Expression) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPmFirmwareVersionDo) Returning(value interface{}, columns ...string) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPmFirmwareVersionDo) Not(conds ...gen.Condition) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPmFirmwareVersionDo) Or(conds ...gen.Condition) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPmFirmwareVersionDo) Select(conds ...field.Expr) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPmFirmwareVersionDo) Where(conds ...gen.Condition) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPmFirmwareVersionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tPmFirmwareVersionDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tPmFirmwareVersionDo) Order(conds ...field.Expr) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPmFirmwareVersionDo) Distinct(cols ...field.Expr) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPmFirmwareVersionDo) Omit(cols ...field.Expr) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPmFirmwareVersionDo) Join(table schema.Tabler, on ...field.Expr) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPmFirmwareVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPmFirmwareVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPmFirmwareVersionDo) Group(cols ...field.Expr) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPmFirmwareVersionDo) Having(conds ...gen.Condition) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPmFirmwareVersionDo) Limit(limit int) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPmFirmwareVersionDo) Offset(offset int) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPmFirmwareVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPmFirmwareVersionDo) Unscoped() *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPmFirmwareVersionDo) Create(values ...*model.TPmFirmwareVersion) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPmFirmwareVersionDo) CreateInBatches(values []*model.TPmFirmwareVersion, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPmFirmwareVersionDo) Save(values ...*model.TPmFirmwareVersion) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPmFirmwareVersionDo) First() (*model.TPmFirmwareVersion, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmFirmwareVersion), nil
	}
}

func (t tPmFirmwareVersionDo) Take() (*model.TPmFirmwareVersion, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmFirmwareVersion), nil
	}
}

func (t tPmFirmwareVersionDo) Last() (*model.TPmFirmwareVersion, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmFirmwareVersion), nil
	}
}

func (t tPmFirmwareVersionDo) Find() ([]*model.TPmFirmwareVersion, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPmFirmwareVersion), err
}

func (t tPmFirmwareVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPmFirmwareVersion, err error) {
	buf := make([]*model.TPmFirmwareVersion, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPmFirmwareVersionDo) FindInBatches(result *[]*model.TPmFirmwareVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPmFirmwareVersionDo) Attrs(attrs ...field.AssignExpr) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPmFirmwareVersionDo) Assign(attrs ...field.AssignExpr) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPmFirmwareVersionDo) Joins(field field.RelationField) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tPmFirmwareVersionDo) Preload(field field.RelationField) *tPmFirmwareVersionDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tPmFirmwareVersionDo) FirstOrInit() (*model.TPmFirmwareVersion, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmFirmwareVersion), nil
	}
}

func (t tPmFirmwareVersionDo) FirstOrCreate() (*model.TPmFirmwareVersion, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmFirmwareVersion), nil
	}
}

func (t tPmFirmwareVersionDo) FindByPage(offset int, limit int) (result []*model.TPmFirmwareVersion, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPmFirmwareVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tPmFirmwareVersionDo) withDO(do gen.Dao) *tPmFirmwareVersionDo {
	t.DO = *do.(*gen.DO)
	return t
}
