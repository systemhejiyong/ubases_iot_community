// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_open_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpenUser(db *gorm.DB) tOpenUser {
	_tOpenUser := tOpenUser{}

	_tOpenUser.tOpenUserDo.UseDB(db)
	_tOpenUser.tOpenUserDo.UseModel(&model.TOpenUser{})

	tableName := _tOpenUser.tOpenUserDo.TableName()
	_tOpenUser.ALL = field.NewField(tableName, "*")
	_tOpenUser.Id = field.NewInt64(tableName, "id")
	_tOpenUser.UserName = field.NewString(tableName, "user_name")
	_tOpenUser.Mobile = field.NewString(tableName, "mobile")
	_tOpenUser.UserNickname = field.NewString(tableName, "user_nickname")
	_tOpenUser.Birthday = field.NewInt32(tableName, "birthday")
	_tOpenUser.UserPassword = field.NewString(tableName, "user_password")
	_tOpenUser.UserSalt = field.NewString(tableName, "user_salt")
	_tOpenUser.UserStatus = field.NewInt32(tableName, "user_status")
	_tOpenUser.UserEmail = field.NewString(tableName, "user_email")
	_tOpenUser.Sex = field.NewInt32(tableName, "sex")
	_tOpenUser.Avatar = field.NewString(tableName, "avatar")
	_tOpenUser.Remark = field.NewString(tableName, "remark")
	_tOpenUser.Address = field.NewString(tableName, "address")
	_tOpenUser.Describe = field.NewString(tableName, "describe")
	_tOpenUser.LastLoginIp = field.NewString(tableName, "last_login_ip")
	_tOpenUser.LastLoginTime = field.NewTime(tableName, "last_login_time")
	_tOpenUser.AccountType = field.NewInt32(tableName, "account_type")
	_tOpenUser.AccountOrigin = field.NewInt32(tableName, "account_origin")
	_tOpenUser.CompanyName = field.NewString(tableName, "company_name")
	_tOpenUser.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpenUser.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpenUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOpenUser.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOpenUser.DeletedAt = field.NewField(tableName, "deleted_at")
	_tOpenUser.HasGuided = field.NewInt32(tableName, "has_guided")

	_tOpenUser.fillFieldMap()

	return _tOpenUser
}

type tOpenUser struct {
	tOpenUserDo tOpenUserDo

	ALL           field.Field
	Id            field.Int64
	UserName      field.String
	Mobile        field.String
	UserNickname  field.String
	Birthday      field.Int32
	UserPassword  field.String
	UserSalt      field.String
	UserStatus    field.Int32
	UserEmail     field.String
	Sex           field.Int32
	Avatar        field.String
	Remark        field.String
	Address       field.String
	Describe      field.String
	LastLoginIp   field.String
	LastLoginTime field.Time
	AccountType   field.Int32
	AccountOrigin field.Int32
	CompanyName   field.String
	CreatedAt     field.Time
	CreatedBy     field.Int64
	UpdatedAt     field.Time
	UpdatedBy     field.Int64
	DeletedAt     field.Field
	HasGuided     field.Int32

	fieldMap map[string]field.Expr
}

func (t tOpenUser) Table(newTableName string) *tOpenUser {
	t.tOpenUserDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpenUser) As(alias string) *tOpenUser {
	t.tOpenUserDo.DO = *(t.tOpenUserDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpenUser) updateTableName(table string) *tOpenUser {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.UserName = field.NewString(table, "user_name")
	t.Mobile = field.NewString(table, "mobile")
	t.UserNickname = field.NewString(table, "user_nickname")
	t.Birthday = field.NewInt32(table, "birthday")
	t.UserPassword = field.NewString(table, "user_password")
	t.UserSalt = field.NewString(table, "user_salt")
	t.UserStatus = field.NewInt32(table, "user_status")
	t.UserEmail = field.NewString(table, "user_email")
	t.Sex = field.NewInt32(table, "sex")
	t.Avatar = field.NewString(table, "avatar")
	t.Remark = field.NewString(table, "remark")
	t.Address = field.NewString(table, "address")
	t.Describe = field.NewString(table, "describe")
	t.LastLoginIp = field.NewString(table, "last_login_ip")
	t.LastLoginTime = field.NewTime(table, "last_login_time")
	t.AccountType = field.NewInt32(table, "account_type")
	t.AccountOrigin = field.NewInt32(table, "account_origin")
	t.CompanyName = field.NewString(table, "company_name")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.HasGuided = field.NewInt32(table, "has_guided")

	t.fillFieldMap()

	return t
}

func (t *tOpenUser) WithContext(ctx context.Context) *tOpenUserDo {
	return t.tOpenUserDo.WithContext(ctx)
}

func (t tOpenUser) TableName() string { return t.tOpenUserDo.TableName() }

func (t tOpenUser) Alias() string { return t.tOpenUserDo.Alias() }

func (t *tOpenUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpenUser) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 24)
	t.fieldMap["id"] = t.Id
	t.fieldMap["user_name"] = t.UserName
	t.fieldMap["mobile"] = t.Mobile
	t.fieldMap["user_nickname"] = t.UserNickname
	t.fieldMap["birthday"] = t.Birthday
	t.fieldMap["user_password"] = t.UserPassword
	t.fieldMap["user_salt"] = t.UserSalt
	t.fieldMap["user_status"] = t.UserStatus
	t.fieldMap["user_email"] = t.UserEmail
	t.fieldMap["sex"] = t.Sex
	t.fieldMap["avatar"] = t.Avatar
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["address"] = t.Address
	t.fieldMap["describe"] = t.Describe
	t.fieldMap["last_login_ip"] = t.LastLoginIp
	t.fieldMap["last_login_time"] = t.LastLoginTime
	t.fieldMap["account_type"] = t.AccountType
	t.fieldMap["account_origin"] = t.AccountOrigin
	t.fieldMap["company_name"] = t.CompanyName
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["has_guided"] = t.HasGuided
}

func (t tOpenUser) clone(db *gorm.DB) tOpenUser {
	t.tOpenUserDo.ReplaceDB(db)
	return t
}

type tOpenUserDo struct{ gen.DO }

func (t tOpenUserDo) Debug() *tOpenUserDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpenUserDo) WithContext(ctx context.Context) *tOpenUserDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpenUserDo) Clauses(conds ...clause.Expression) *tOpenUserDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpenUserDo) Returning(value interface{}, columns ...string) *tOpenUserDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpenUserDo) Not(conds ...gen.Condition) *tOpenUserDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpenUserDo) Or(conds ...gen.Condition) *tOpenUserDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpenUserDo) Select(conds ...field.Expr) *tOpenUserDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpenUserDo) Where(conds ...gen.Condition) *tOpenUserDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpenUserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpenUserDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpenUserDo) Order(conds ...field.Expr) *tOpenUserDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpenUserDo) Distinct(cols ...field.Expr) *tOpenUserDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpenUserDo) Omit(cols ...field.Expr) *tOpenUserDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpenUserDo) Join(table schema.Tabler, on ...field.Expr) *tOpenUserDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpenUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpenUserDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpenUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpenUserDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpenUserDo) Group(cols ...field.Expr) *tOpenUserDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpenUserDo) Having(conds ...gen.Condition) *tOpenUserDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpenUserDo) Limit(limit int) *tOpenUserDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpenUserDo) Offset(offset int) *tOpenUserDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpenUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpenUserDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpenUserDo) Unscoped() *tOpenUserDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpenUserDo) Create(values ...*model.TOpenUser) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpenUserDo) CreateInBatches(values []*model.TOpenUser, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpenUserDo) Save(values ...*model.TOpenUser) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpenUserDo) First() (*model.TOpenUser, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenUser), nil
	}
}

func (t tOpenUserDo) Take() (*model.TOpenUser, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenUser), nil
	}
}

func (t tOpenUserDo) Last() (*model.TOpenUser, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenUser), nil
	}
}

func (t tOpenUserDo) Find() ([]*model.TOpenUser, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpenUser), err
}

func (t tOpenUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpenUser, err error) {
	buf := make([]*model.TOpenUser, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpenUserDo) FindInBatches(result *[]*model.TOpenUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpenUserDo) Attrs(attrs ...field.AssignExpr) *tOpenUserDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpenUserDo) Assign(attrs ...field.AssignExpr) *tOpenUserDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpenUserDo) Joins(field field.RelationField) *tOpenUserDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpenUserDo) Preload(field field.RelationField) *tOpenUserDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpenUserDo) FirstOrInit() (*model.TOpenUser, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenUser), nil
	}
}

func (t tOpenUserDo) FirstOrCreate() (*model.TOpenUser, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenUser), nil
	}
}

func (t tOpenUserDo) FindByPage(offset int, limit int) (result []*model.TOpenUser, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpenUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpenUserDo) withDO(do gen.Dao) *tOpenUserDo {
	t.DO = *do.(*gen.DO)
	return t
}
