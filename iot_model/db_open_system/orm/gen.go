// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		TOpenAuthQuantity:    newTOpenAuthQuantity(db),
		TOpenAuthRule:        newTOpenAuthRule(db),
		TOpenCasbinRule:      newTOpenCasbinRule(db),
		TOpenCompany:         newTOpenCompany(db),
		TOpenCompanyAuthLogs: newTOpenCompanyAuthLogs(db),
		TOpenCompanyConnect:  newTOpenCompanyConnect(db),
		TOpenConfig:          newTOpenConfig(db),
		TOpenLoginLog:        newTOpenLoginLog(db),
		TOpenModelInfo:       newTOpenModelInfo(db),
		TOpenOperLog:         newTOpenOperLog(db),
		TOpenRole:            newTOpenRole(db),
		TOpenUser:            newTOpenUser(db),
		TOpenUserCompany:     newTOpenUserCompany(db),
		TOpenUserOnline:      newTOpenUserOnline(db),
	}
}

type Query struct {
	db *gorm.DB

	TOpenAuthQuantity    tOpenAuthQuantity
	TOpenAuthRule        tOpenAuthRule
	TOpenCasbinRule      tOpenCasbinRule
	TOpenCompany         tOpenCompany
	TOpenCompanyAuthLogs tOpenCompanyAuthLogs
	TOpenCompanyConnect  tOpenCompanyConnect
	TOpenConfig          tOpenConfig
	TOpenLoginLog        tOpenLoginLog
	TOpenModelInfo       tOpenModelInfo
	TOpenOperLog         tOpenOperLog
	TOpenRole            tOpenRole
	TOpenUser            tOpenUser
	TOpenUserCompany     tOpenUserCompany
	TOpenUserOnline      tOpenUserOnline
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                   db,
		TOpenAuthQuantity:    q.TOpenAuthQuantity.clone(db),
		TOpenAuthRule:        q.TOpenAuthRule.clone(db),
		TOpenCasbinRule:      q.TOpenCasbinRule.clone(db),
		TOpenCompany:         q.TOpenCompany.clone(db),
		TOpenCompanyAuthLogs: q.TOpenCompanyAuthLogs.clone(db),
		TOpenCompanyConnect:  q.TOpenCompanyConnect.clone(db),
		TOpenConfig:          q.TOpenConfig.clone(db),
		TOpenLoginLog:        q.TOpenLoginLog.clone(db),
		TOpenModelInfo:       q.TOpenModelInfo.clone(db),
		TOpenOperLog:         q.TOpenOperLog.clone(db),
		TOpenRole:            q.TOpenRole.clone(db),
		TOpenUser:            q.TOpenUser.clone(db),
		TOpenUserCompany:     q.TOpenUserCompany.clone(db),
		TOpenUserOnline:      q.TOpenUserOnline.clone(db),
	}
}

type queryCtx struct {
	TOpenAuthQuantity    tOpenAuthQuantityDo
	TOpenAuthRule        tOpenAuthRuleDo
	TOpenCasbinRule      tOpenCasbinRuleDo
	TOpenCompany         tOpenCompanyDo
	TOpenCompanyAuthLogs tOpenCompanyAuthLogsDo
	TOpenCompanyConnect  tOpenCompanyConnectDo
	TOpenConfig          tOpenConfigDo
	TOpenLoginLog        tOpenLoginLogDo
	TOpenModelInfo       tOpenModelInfoDo
	TOpenOperLog         tOpenOperLogDo
	TOpenRole            tOpenRoleDo
	TOpenUser            tOpenUserDo
	TOpenUserCompany     tOpenUserCompanyDo
	TOpenUserOnline      tOpenUserOnlineDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		TOpenAuthQuantity:    *q.TOpenAuthQuantity.WithContext(ctx),
		TOpenAuthRule:        *q.TOpenAuthRule.WithContext(ctx),
		TOpenCasbinRule:      *q.TOpenCasbinRule.WithContext(ctx),
		TOpenCompany:         *q.TOpenCompany.WithContext(ctx),
		TOpenCompanyAuthLogs: *q.TOpenCompanyAuthLogs.WithContext(ctx),
		TOpenCompanyConnect:  *q.TOpenCompanyConnect.WithContext(ctx),
		TOpenConfig:          *q.TOpenConfig.WithContext(ctx),
		TOpenLoginLog:        *q.TOpenLoginLog.WithContext(ctx),
		TOpenModelInfo:       *q.TOpenModelInfo.WithContext(ctx),
		TOpenOperLog:         *q.TOpenOperLog.WithContext(ctx),
		TOpenRole:            *q.TOpenRole.WithContext(ctx),
		TOpenUser:            *q.TOpenUser.WithContext(ctx),
		TOpenUserCompany:     *q.TOpenUserCompany.WithContext(ctx),
		TOpenUserOnline:      *q.TOpenUserOnline.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
