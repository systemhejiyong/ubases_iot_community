// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_open_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpenAuthRule(db *gorm.DB) tOpenAuthRule {
	_tOpenAuthRule := tOpenAuthRule{}

	_tOpenAuthRule.tOpenAuthRuleDo.UseDB(db)
	_tOpenAuthRule.tOpenAuthRuleDo.UseModel(&model.TOpenAuthRule{})

	tableName := _tOpenAuthRule.tOpenAuthRuleDo.TableName()
	_tOpenAuthRule.ALL = field.NewField(tableName, "*")
	_tOpenAuthRule.Id = field.NewInt64(tableName, "id")
	_tOpenAuthRule.Pid = field.NewInt64(tableName, "pid")
	_tOpenAuthRule.Name = field.NewString(tableName, "name")
	_tOpenAuthRule.Title = field.NewString(tableName, "title")
	_tOpenAuthRule.Icon = field.NewString(tableName, "icon")
	_tOpenAuthRule.Condition = field.NewString(tableName, "condition")
	_tOpenAuthRule.Remark = field.NewString(tableName, "remark")
	_tOpenAuthRule.MenuType = field.NewInt32(tableName, "menu_type")
	_tOpenAuthRule.Weigh = field.NewInt32(tableName, "weigh")
	_tOpenAuthRule.Status = field.NewInt32(tableName, "status")
	_tOpenAuthRule.AlwaysShow = field.NewInt32(tableName, "always_show")
	_tOpenAuthRule.Path = field.NewString(tableName, "path")
	_tOpenAuthRule.JumpPath = field.NewString(tableName, "jump_path")
	_tOpenAuthRule.Component = field.NewString(tableName, "component")
	_tOpenAuthRule.IsFrame = field.NewInt32(tableName, "is_frame")
	_tOpenAuthRule.ModuleType = field.NewString(tableName, "module_type")
	_tOpenAuthRule.ModelId = field.NewInt64(tableName, "model_id")
	_tOpenAuthRule.IsCache = field.NewInt32(tableName, "is_cache")
	_tOpenAuthRule.IsHideChildMenu = field.NewInt32(tableName, "is_hide_child_menu")
	_tOpenAuthRule.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpenAuthRule.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOpenAuthRule.DeletedAt = field.NewField(tableName, "deleted_at")
	_tOpenAuthRule.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpenAuthRule.UpdatedBy = field.NewInt64(tableName, "updated_by")

	_tOpenAuthRule.fillFieldMap()

	return _tOpenAuthRule
}

type tOpenAuthRule struct {
	tOpenAuthRuleDo tOpenAuthRuleDo

	ALL             field.Field
	Id              field.Int64
	Pid             field.Int64
	Name            field.String
	Title           field.String
	Icon            field.String
	Condition       field.String
	Remark          field.String
	MenuType        field.Int32
	Weigh           field.Int32
	Status          field.Int32
	AlwaysShow      field.Int32
	Path            field.String
	JumpPath        field.String
	Component       field.String
	IsFrame         field.Int32
	ModuleType      field.String
	ModelId         field.Int64
	IsCache         field.Int32
	IsHideChildMenu field.Int32
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	CreatedBy       field.Int64
	UpdatedBy       field.Int64

	fieldMap map[string]field.Expr
}

func (t tOpenAuthRule) Table(newTableName string) *tOpenAuthRule {
	t.tOpenAuthRuleDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpenAuthRule) As(alias string) *tOpenAuthRule {
	t.tOpenAuthRuleDo.DO = *(t.tOpenAuthRuleDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpenAuthRule) updateTableName(table string) *tOpenAuthRule {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Pid = field.NewInt64(table, "pid")
	t.Name = field.NewString(table, "name")
	t.Title = field.NewString(table, "title")
	t.Icon = field.NewString(table, "icon")
	t.Condition = field.NewString(table, "condition")
	t.Remark = field.NewString(table, "remark")
	t.MenuType = field.NewInt32(table, "menu_type")
	t.Weigh = field.NewInt32(table, "weigh")
	t.Status = field.NewInt32(table, "status")
	t.AlwaysShow = field.NewInt32(table, "always_show")
	t.Path = field.NewString(table, "path")
	t.JumpPath = field.NewString(table, "jump_path")
	t.Component = field.NewString(table, "component")
	t.IsFrame = field.NewInt32(table, "is_frame")
	t.ModuleType = field.NewString(table, "module_type")
	t.ModelId = field.NewInt64(table, "model_id")
	t.IsCache = field.NewInt32(table, "is_cache")
	t.IsHideChildMenu = field.NewInt32(table, "is_hide_child_menu")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")

	t.fillFieldMap()

	return t
}

func (t *tOpenAuthRule) WithContext(ctx context.Context) *tOpenAuthRuleDo {
	return t.tOpenAuthRuleDo.WithContext(ctx)
}

func (t tOpenAuthRule) TableName() string { return t.tOpenAuthRuleDo.TableName() }

func (t tOpenAuthRule) Alias() string { return t.tOpenAuthRuleDo.Alias() }

func (t *tOpenAuthRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpenAuthRule) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 24)
	t.fieldMap["id"] = t.Id
	t.fieldMap["pid"] = t.Pid
	t.fieldMap["name"] = t.Name
	t.fieldMap["title"] = t.Title
	t.fieldMap["icon"] = t.Icon
	t.fieldMap["condition"] = t.Condition
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["menu_type"] = t.MenuType
	t.fieldMap["weigh"] = t.Weigh
	t.fieldMap["status"] = t.Status
	t.fieldMap["always_show"] = t.AlwaysShow
	t.fieldMap["path"] = t.Path
	t.fieldMap["jump_path"] = t.JumpPath
	t.fieldMap["component"] = t.Component
	t.fieldMap["is_frame"] = t.IsFrame
	t.fieldMap["module_type"] = t.ModuleType
	t.fieldMap["model_id"] = t.ModelId
	t.fieldMap["is_cache"] = t.IsCache
	t.fieldMap["is_hide_child_menu"] = t.IsHideChildMenu
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
}

func (t tOpenAuthRule) clone(db *gorm.DB) tOpenAuthRule {
	t.tOpenAuthRuleDo.ReplaceDB(db)
	return t
}

type tOpenAuthRuleDo struct{ gen.DO }

func (t tOpenAuthRuleDo) Debug() *tOpenAuthRuleDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpenAuthRuleDo) WithContext(ctx context.Context) *tOpenAuthRuleDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpenAuthRuleDo) Clauses(conds ...clause.Expression) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpenAuthRuleDo) Returning(value interface{}, columns ...string) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpenAuthRuleDo) Not(conds ...gen.Condition) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpenAuthRuleDo) Or(conds ...gen.Condition) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpenAuthRuleDo) Select(conds ...field.Expr) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpenAuthRuleDo) Where(conds ...gen.Condition) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpenAuthRuleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpenAuthRuleDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpenAuthRuleDo) Order(conds ...field.Expr) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpenAuthRuleDo) Distinct(cols ...field.Expr) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpenAuthRuleDo) Omit(cols ...field.Expr) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpenAuthRuleDo) Join(table schema.Tabler, on ...field.Expr) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpenAuthRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpenAuthRuleDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpenAuthRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpenAuthRuleDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpenAuthRuleDo) Group(cols ...field.Expr) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpenAuthRuleDo) Having(conds ...gen.Condition) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpenAuthRuleDo) Limit(limit int) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpenAuthRuleDo) Offset(offset int) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpenAuthRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpenAuthRuleDo) Unscoped() *tOpenAuthRuleDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpenAuthRuleDo) Create(values ...*model.TOpenAuthRule) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpenAuthRuleDo) CreateInBatches(values []*model.TOpenAuthRule, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpenAuthRuleDo) Save(values ...*model.TOpenAuthRule) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpenAuthRuleDo) First() (*model.TOpenAuthRule, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenAuthRule), nil
	}
}

func (t tOpenAuthRuleDo) Take() (*model.TOpenAuthRule, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenAuthRule), nil
	}
}

func (t tOpenAuthRuleDo) Last() (*model.TOpenAuthRule, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenAuthRule), nil
	}
}

func (t tOpenAuthRuleDo) Find() ([]*model.TOpenAuthRule, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpenAuthRule), err
}

func (t tOpenAuthRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpenAuthRule, err error) {
	buf := make([]*model.TOpenAuthRule, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpenAuthRuleDo) FindInBatches(result *[]*model.TOpenAuthRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpenAuthRuleDo) Attrs(attrs ...field.AssignExpr) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpenAuthRuleDo) Assign(attrs ...field.AssignExpr) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpenAuthRuleDo) Joins(field field.RelationField) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpenAuthRuleDo) Preload(field field.RelationField) *tOpenAuthRuleDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpenAuthRuleDo) FirstOrInit() (*model.TOpenAuthRule, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenAuthRule), nil
	}
}

func (t tOpenAuthRuleDo) FirstOrCreate() (*model.TOpenAuthRule, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenAuthRule), nil
	}
}

func (t tOpenAuthRuleDo) FindByPage(offset int, limit int) (result []*model.TOpenAuthRule, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpenAuthRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpenAuthRuleDo) withDO(do gen.Dao) *tOpenAuthRuleDo {
	t.DO = *do.(*gen.DO)
	return t
}
