// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_open_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpenCompanyConnect(db *gorm.DB) tOpenCompanyConnect {
	_tOpenCompanyConnect := tOpenCompanyConnect{}

	_tOpenCompanyConnect.tOpenCompanyConnectDo.UseDB(db)
	_tOpenCompanyConnect.tOpenCompanyConnectDo.UseModel(&model.TOpenCompanyConnect{})

	tableName := _tOpenCompanyConnect.tOpenCompanyConnectDo.TableName()
	_tOpenCompanyConnect.ALL = field.NewField(tableName, "*")
	_tOpenCompanyConnect.Id = field.NewInt64(tableName, "id")
	_tOpenCompanyConnect.TenantId = field.NewString(tableName, "tenant_id")
	_tOpenCompanyConnect.AccountType = field.NewInt32(tableName, "account_type")
	_tOpenCompanyConnect.Name = field.NewString(tableName, "name")
	_tOpenCompanyConnect.UserId = field.NewInt64(tableName, "user_id")
	_tOpenCompanyConnect.Account = field.NewString(tableName, "account")
	_tOpenCompanyConnect.Phone = field.NewString(tableName, "phone")
	_tOpenCompanyConnect.Address = field.NewString(tableName, "address")
	_tOpenCompanyConnect.Job = field.NewString(tableName, "job")
	_tOpenCompanyConnect.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpenCompanyConnect.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpenCompanyConnect.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOpenCompanyConnect.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOpenCompanyConnect.DeletedAt = field.NewField(tableName, "deleted_at")

	_tOpenCompanyConnect.fillFieldMap()

	return _tOpenCompanyConnect
}

type tOpenCompanyConnect struct {
	tOpenCompanyConnectDo tOpenCompanyConnectDo

	ALL         field.Field
	Id          field.Int64
	TenantId    field.String
	AccountType field.Int32
	Name        field.String
	UserId      field.Int64
	Account     field.String
	Phone       field.String
	Address     field.String
	Job         field.String
	CreatedBy   field.Int64
	CreatedAt   field.Time
	UpdatedBy   field.Int64
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (t tOpenCompanyConnect) Table(newTableName string) *tOpenCompanyConnect {
	t.tOpenCompanyConnectDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpenCompanyConnect) As(alias string) *tOpenCompanyConnect {
	t.tOpenCompanyConnectDo.DO = *(t.tOpenCompanyConnectDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpenCompanyConnect) updateTableName(table string) *tOpenCompanyConnect {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.TenantId = field.NewString(table, "tenant_id")
	t.AccountType = field.NewInt32(table, "account_type")
	t.Name = field.NewString(table, "name")
	t.UserId = field.NewInt64(table, "user_id")
	t.Account = field.NewString(table, "account")
	t.Phone = field.NewString(table, "phone")
	t.Address = field.NewString(table, "address")
	t.Job = field.NewString(table, "job")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tOpenCompanyConnect) WithContext(ctx context.Context) *tOpenCompanyConnectDo {
	return t.tOpenCompanyConnectDo.WithContext(ctx)
}

func (t tOpenCompanyConnect) TableName() string { return t.tOpenCompanyConnectDo.TableName() }

func (t tOpenCompanyConnect) Alias() string { return t.tOpenCompanyConnectDo.Alias() }

func (t *tOpenCompanyConnect) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpenCompanyConnect) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 14)
	t.fieldMap["id"] = t.Id
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["account_type"] = t.AccountType
	t.fieldMap["name"] = t.Name
	t.fieldMap["user_id"] = t.UserId
	t.fieldMap["account"] = t.Account
	t.fieldMap["phone"] = t.Phone
	t.fieldMap["address"] = t.Address
	t.fieldMap["job"] = t.Job
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tOpenCompanyConnect) clone(db *gorm.DB) tOpenCompanyConnect {
	t.tOpenCompanyConnectDo.ReplaceDB(db)
	return t
}

type tOpenCompanyConnectDo struct{ gen.DO }

func (t tOpenCompanyConnectDo) Debug() *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpenCompanyConnectDo) WithContext(ctx context.Context) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpenCompanyConnectDo) Clauses(conds ...clause.Expression) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpenCompanyConnectDo) Returning(value interface{}, columns ...string) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpenCompanyConnectDo) Not(conds ...gen.Condition) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpenCompanyConnectDo) Or(conds ...gen.Condition) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpenCompanyConnectDo) Select(conds ...field.Expr) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpenCompanyConnectDo) Where(conds ...gen.Condition) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpenCompanyConnectDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpenCompanyConnectDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpenCompanyConnectDo) Order(conds ...field.Expr) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpenCompanyConnectDo) Distinct(cols ...field.Expr) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpenCompanyConnectDo) Omit(cols ...field.Expr) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpenCompanyConnectDo) Join(table schema.Tabler, on ...field.Expr) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpenCompanyConnectDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpenCompanyConnectDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpenCompanyConnectDo) Group(cols ...field.Expr) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpenCompanyConnectDo) Having(conds ...gen.Condition) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpenCompanyConnectDo) Limit(limit int) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpenCompanyConnectDo) Offset(offset int) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpenCompanyConnectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpenCompanyConnectDo) Unscoped() *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpenCompanyConnectDo) Create(values ...*model.TOpenCompanyConnect) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpenCompanyConnectDo) CreateInBatches(values []*model.TOpenCompanyConnect, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpenCompanyConnectDo) Save(values ...*model.TOpenCompanyConnect) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpenCompanyConnectDo) First() (*model.TOpenCompanyConnect, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenCompanyConnect), nil
	}
}

func (t tOpenCompanyConnectDo) Take() (*model.TOpenCompanyConnect, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenCompanyConnect), nil
	}
}

func (t tOpenCompanyConnectDo) Last() (*model.TOpenCompanyConnect, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenCompanyConnect), nil
	}
}

func (t tOpenCompanyConnectDo) Find() ([]*model.TOpenCompanyConnect, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpenCompanyConnect), err
}

func (t tOpenCompanyConnectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpenCompanyConnect, err error) {
	buf := make([]*model.TOpenCompanyConnect, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpenCompanyConnectDo) FindInBatches(result *[]*model.TOpenCompanyConnect, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpenCompanyConnectDo) Attrs(attrs ...field.AssignExpr) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpenCompanyConnectDo) Assign(attrs ...field.AssignExpr) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpenCompanyConnectDo) Joins(field field.RelationField) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpenCompanyConnectDo) Preload(field field.RelationField) *tOpenCompanyConnectDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpenCompanyConnectDo) FirstOrInit() (*model.TOpenCompanyConnect, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenCompanyConnect), nil
	}
}

func (t tOpenCompanyConnectDo) FirstOrCreate() (*model.TOpenCompanyConnect, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenCompanyConnect), nil
	}
}

func (t tOpenCompanyConnectDo) FindByPage(offset int, limit int) (result []*model.TOpenCompanyConnect, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpenCompanyConnectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpenCompanyConnectDo) withDO(do gen.Dao) *tOpenCompanyConnectDo {
	t.DO = *do.(*gen.DO)
	return t
}
