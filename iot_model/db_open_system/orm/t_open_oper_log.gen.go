// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_open_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpenOperLog(db *gorm.DB) tOpenOperLog {
	_tOpenOperLog := tOpenOperLog{}

	_tOpenOperLog.tOpenOperLogDo.UseDB(db)
	_tOpenOperLog.tOpenOperLogDo.UseModel(&model.TOpenOperLog{})

	tableName := _tOpenOperLog.tOpenOperLogDo.TableName()
	_tOpenOperLog.ALL = field.NewField(tableName, "*")
	_tOpenOperLog.OperId = field.NewInt64(tableName, "oper_id")
	_tOpenOperLog.Title = field.NewString(tableName, "title")
	_tOpenOperLog.BusinessType = field.NewInt32(tableName, "business_type")
	_tOpenOperLog.Method = field.NewString(tableName, "method")
	_tOpenOperLog.RequestMethod = field.NewString(tableName, "request_method")
	_tOpenOperLog.OperatorType = field.NewInt32(tableName, "operator_type")
	_tOpenOperLog.OperName = field.NewString(tableName, "oper_name")
	_tOpenOperLog.DeptName = field.NewString(tableName, "dept_name")
	_tOpenOperLog.OperUrl = field.NewString(tableName, "oper_url")
	_tOpenOperLog.OperIp = field.NewString(tableName, "oper_ip")
	_tOpenOperLog.OperLocation = field.NewString(tableName, "oper_location")
	_tOpenOperLog.OperParam = field.NewString(tableName, "oper_param")
	_tOpenOperLog.JsonResult = field.NewString(tableName, "json_result")
	_tOpenOperLog.Status = field.NewInt32(tableName, "status")
	_tOpenOperLog.ErrorMsg = field.NewString(tableName, "error_msg")
	_tOpenOperLog.OperTime = field.NewTime(tableName, "oper_time")

	_tOpenOperLog.fillFieldMap()

	return _tOpenOperLog
}

type tOpenOperLog struct {
	tOpenOperLogDo tOpenOperLogDo

	ALL           field.Field
	OperId        field.Int64
	Title         field.String
	BusinessType  field.Int32
	Method        field.String
	RequestMethod field.String
	OperatorType  field.Int32
	OperName      field.String
	DeptName      field.String
	OperUrl       field.String
	OperIp        field.String
	OperLocation  field.String
	OperParam     field.String
	JsonResult    field.String
	Status        field.Int32
	ErrorMsg      field.String
	OperTime      field.Time

	fieldMap map[string]field.Expr
}

func (t tOpenOperLog) Table(newTableName string) *tOpenOperLog {
	t.tOpenOperLogDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpenOperLog) As(alias string) *tOpenOperLog {
	t.tOpenOperLogDo.DO = *(t.tOpenOperLogDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpenOperLog) updateTableName(table string) *tOpenOperLog {
	t.ALL = field.NewField(table, "*")
	t.OperId = field.NewInt64(table, "oper_id")
	t.Title = field.NewString(table, "title")
	t.BusinessType = field.NewInt32(table, "business_type")
	t.Method = field.NewString(table, "method")
	t.RequestMethod = field.NewString(table, "request_method")
	t.OperatorType = field.NewInt32(table, "operator_type")
	t.OperName = field.NewString(table, "oper_name")
	t.DeptName = field.NewString(table, "dept_name")
	t.OperUrl = field.NewString(table, "oper_url")
	t.OperIp = field.NewString(table, "oper_ip")
	t.OperLocation = field.NewString(table, "oper_location")
	t.OperParam = field.NewString(table, "oper_param")
	t.JsonResult = field.NewString(table, "json_result")
	t.Status = field.NewInt32(table, "status")
	t.ErrorMsg = field.NewString(table, "error_msg")
	t.OperTime = field.NewTime(table, "oper_time")

	t.fillFieldMap()

	return t
}

func (t *tOpenOperLog) WithContext(ctx context.Context) *tOpenOperLogDo {
	return t.tOpenOperLogDo.WithContext(ctx)
}

func (t tOpenOperLog) TableName() string { return t.tOpenOperLogDo.TableName() }

func (t tOpenOperLog) Alias() string { return t.tOpenOperLogDo.Alias() }

func (t *tOpenOperLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpenOperLog) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 16)
	t.fieldMap["oper_id"] = t.OperId
	t.fieldMap["title"] = t.Title
	t.fieldMap["business_type"] = t.BusinessType
	t.fieldMap["method"] = t.Method
	t.fieldMap["request_method"] = t.RequestMethod
	t.fieldMap["operator_type"] = t.OperatorType
	t.fieldMap["oper_name"] = t.OperName
	t.fieldMap["dept_name"] = t.DeptName
	t.fieldMap["oper_url"] = t.OperUrl
	t.fieldMap["oper_ip"] = t.OperIp
	t.fieldMap["oper_location"] = t.OperLocation
	t.fieldMap["oper_param"] = t.OperParam
	t.fieldMap["json_result"] = t.JsonResult
	t.fieldMap["status"] = t.Status
	t.fieldMap["error_msg"] = t.ErrorMsg
	t.fieldMap["oper_time"] = t.OperTime
}

func (t tOpenOperLog) clone(db *gorm.DB) tOpenOperLog {
	t.tOpenOperLogDo.ReplaceDB(db)
	return t
}

type tOpenOperLogDo struct{ gen.DO }

func (t tOpenOperLogDo) Debug() *tOpenOperLogDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpenOperLogDo) WithContext(ctx context.Context) *tOpenOperLogDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpenOperLogDo) Clauses(conds ...clause.Expression) *tOpenOperLogDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpenOperLogDo) Returning(value interface{}, columns ...string) *tOpenOperLogDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpenOperLogDo) Not(conds ...gen.Condition) *tOpenOperLogDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpenOperLogDo) Or(conds ...gen.Condition) *tOpenOperLogDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpenOperLogDo) Select(conds ...field.Expr) *tOpenOperLogDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpenOperLogDo) Where(conds ...gen.Condition) *tOpenOperLogDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpenOperLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpenOperLogDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpenOperLogDo) Order(conds ...field.Expr) *tOpenOperLogDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpenOperLogDo) Distinct(cols ...field.Expr) *tOpenOperLogDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpenOperLogDo) Omit(cols ...field.Expr) *tOpenOperLogDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpenOperLogDo) Join(table schema.Tabler, on ...field.Expr) *tOpenOperLogDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpenOperLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpenOperLogDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpenOperLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpenOperLogDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpenOperLogDo) Group(cols ...field.Expr) *tOpenOperLogDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpenOperLogDo) Having(conds ...gen.Condition) *tOpenOperLogDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpenOperLogDo) Limit(limit int) *tOpenOperLogDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpenOperLogDo) Offset(offset int) *tOpenOperLogDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpenOperLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpenOperLogDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpenOperLogDo) Unscoped() *tOpenOperLogDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpenOperLogDo) Create(values ...*model.TOpenOperLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpenOperLogDo) CreateInBatches(values []*model.TOpenOperLog, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpenOperLogDo) Save(values ...*model.TOpenOperLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpenOperLogDo) First() (*model.TOpenOperLog, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenOperLog), nil
	}
}

func (t tOpenOperLogDo) Take() (*model.TOpenOperLog, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenOperLog), nil
	}
}

func (t tOpenOperLogDo) Last() (*model.TOpenOperLog, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenOperLog), nil
	}
}

func (t tOpenOperLogDo) Find() ([]*model.TOpenOperLog, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpenOperLog), err
}

func (t tOpenOperLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpenOperLog, err error) {
	buf := make([]*model.TOpenOperLog, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpenOperLogDo) FindInBatches(result *[]*model.TOpenOperLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpenOperLogDo) Attrs(attrs ...field.AssignExpr) *tOpenOperLogDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpenOperLogDo) Assign(attrs ...field.AssignExpr) *tOpenOperLogDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpenOperLogDo) Joins(field field.RelationField) *tOpenOperLogDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpenOperLogDo) Preload(field field.RelationField) *tOpenOperLogDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpenOperLogDo) FirstOrInit() (*model.TOpenOperLog, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenOperLog), nil
	}
}

func (t tOpenOperLogDo) FirstOrCreate() (*model.TOpenOperLog, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenOperLog), nil
	}
}

func (t tOpenOperLogDo) FindByPage(offset int, limit int) (result []*model.TOpenOperLog, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpenOperLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpenOperLogDo) withDO(do gen.Dao) *tOpenOperLogDo {
	t.DO = *do.(*gen.DO)
	return t
}
