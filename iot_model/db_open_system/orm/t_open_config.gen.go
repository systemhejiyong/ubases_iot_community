// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_open_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpenConfig(db *gorm.DB) tOpenConfig {
	_tOpenConfig := tOpenConfig{}

	_tOpenConfig.tOpenConfigDo.UseDB(db)
	_tOpenConfig.tOpenConfigDo.UseModel(&model.TOpenConfig{})

	tableName := _tOpenConfig.tOpenConfigDo.TableName()
	_tOpenConfig.ALL = field.NewField(tableName, "*")
	_tOpenConfig.ConfigId = field.NewInt64(tableName, "config_id")
	_tOpenConfig.ConfigName = field.NewString(tableName, "config_name")
	_tOpenConfig.ConfigKey = field.NewString(tableName, "config_key")
	_tOpenConfig.ConfigValue = field.NewString(tableName, "config_value")
	_tOpenConfig.ConfigType = field.NewInt32(tableName, "config_type")
	_tOpenConfig.CreateBy = field.NewInt32(tableName, "create_by")
	_tOpenConfig.UpdateBy = field.NewInt32(tableName, "update_by")
	_tOpenConfig.Remark = field.NewString(tableName, "remark")
	_tOpenConfig.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpenConfig.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOpenConfig.DeletedAt = field.NewField(tableName, "deleted_at")
	_tOpenConfig.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpenConfig.UpdatedBy = field.NewInt64(tableName, "updated_by")

	_tOpenConfig.fillFieldMap()

	return _tOpenConfig
}

type tOpenConfig struct {
	tOpenConfigDo tOpenConfigDo

	ALL         field.Field
	ConfigId    field.Int64
	ConfigName  field.String
	ConfigKey   field.String
	ConfigValue field.String
	ConfigType  field.Int32
	CreateBy    field.Int32
	UpdateBy    field.Int32
	Remark      field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	CreatedBy   field.Int64
	UpdatedBy   field.Int64

	fieldMap map[string]field.Expr
}

func (t tOpenConfig) Table(newTableName string) *tOpenConfig {
	t.tOpenConfigDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpenConfig) As(alias string) *tOpenConfig {
	t.tOpenConfigDo.DO = *(t.tOpenConfigDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpenConfig) updateTableName(table string) *tOpenConfig {
	t.ALL = field.NewField(table, "*")
	t.ConfigId = field.NewInt64(table, "config_id")
	t.ConfigName = field.NewString(table, "config_name")
	t.ConfigKey = field.NewString(table, "config_key")
	t.ConfigValue = field.NewString(table, "config_value")
	t.ConfigType = field.NewInt32(table, "config_type")
	t.CreateBy = field.NewInt32(table, "create_by")
	t.UpdateBy = field.NewInt32(table, "update_by")
	t.Remark = field.NewString(table, "remark")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")

	t.fillFieldMap()

	return t
}

func (t *tOpenConfig) WithContext(ctx context.Context) *tOpenConfigDo {
	return t.tOpenConfigDo.WithContext(ctx)
}

func (t tOpenConfig) TableName() string { return t.tOpenConfigDo.TableName() }

func (t tOpenConfig) Alias() string { return t.tOpenConfigDo.Alias() }

func (t *tOpenConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpenConfig) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["config_id"] = t.ConfigId
	t.fieldMap["config_name"] = t.ConfigName
	t.fieldMap["config_key"] = t.ConfigKey
	t.fieldMap["config_value"] = t.ConfigValue
	t.fieldMap["config_type"] = t.ConfigType
	t.fieldMap["create_by"] = t.CreateBy
	t.fieldMap["update_by"] = t.UpdateBy
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
}

func (t tOpenConfig) clone(db *gorm.DB) tOpenConfig {
	t.tOpenConfigDo.ReplaceDB(db)
	return t
}

type tOpenConfigDo struct{ gen.DO }

func (t tOpenConfigDo) Debug() *tOpenConfigDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpenConfigDo) WithContext(ctx context.Context) *tOpenConfigDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpenConfigDo) Clauses(conds ...clause.Expression) *tOpenConfigDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpenConfigDo) Returning(value interface{}, columns ...string) *tOpenConfigDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpenConfigDo) Not(conds ...gen.Condition) *tOpenConfigDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpenConfigDo) Or(conds ...gen.Condition) *tOpenConfigDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpenConfigDo) Select(conds ...field.Expr) *tOpenConfigDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpenConfigDo) Where(conds ...gen.Condition) *tOpenConfigDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpenConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpenConfigDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpenConfigDo) Order(conds ...field.Expr) *tOpenConfigDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpenConfigDo) Distinct(cols ...field.Expr) *tOpenConfigDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpenConfigDo) Omit(cols ...field.Expr) *tOpenConfigDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpenConfigDo) Join(table schema.Tabler, on ...field.Expr) *tOpenConfigDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpenConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpenConfigDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpenConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpenConfigDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpenConfigDo) Group(cols ...field.Expr) *tOpenConfigDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpenConfigDo) Having(conds ...gen.Condition) *tOpenConfigDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpenConfigDo) Limit(limit int) *tOpenConfigDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpenConfigDo) Offset(offset int) *tOpenConfigDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpenConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpenConfigDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpenConfigDo) Unscoped() *tOpenConfigDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpenConfigDo) Create(values ...*model.TOpenConfig) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpenConfigDo) CreateInBatches(values []*model.TOpenConfig, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpenConfigDo) Save(values ...*model.TOpenConfig) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpenConfigDo) First() (*model.TOpenConfig, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenConfig), nil
	}
}

func (t tOpenConfigDo) Take() (*model.TOpenConfig, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenConfig), nil
	}
}

func (t tOpenConfigDo) Last() (*model.TOpenConfig, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenConfig), nil
	}
}

func (t tOpenConfigDo) Find() ([]*model.TOpenConfig, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpenConfig), err
}

func (t tOpenConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpenConfig, err error) {
	buf := make([]*model.TOpenConfig, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpenConfigDo) FindInBatches(result *[]*model.TOpenConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpenConfigDo) Attrs(attrs ...field.AssignExpr) *tOpenConfigDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpenConfigDo) Assign(attrs ...field.AssignExpr) *tOpenConfigDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpenConfigDo) Joins(field field.RelationField) *tOpenConfigDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpenConfigDo) Preload(field field.RelationField) *tOpenConfigDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpenConfigDo) FirstOrInit() (*model.TOpenConfig, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenConfig), nil
	}
}

func (t tOpenConfigDo) FirstOrCreate() (*model.TOpenConfig, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenConfig), nil
	}
}

func (t tOpenConfigDo) FindByPage(offset int, limit int) (result []*model.TOpenConfig, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpenConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpenConfigDo) withDO(do gen.Dao) *tOpenConfigDo {
	t.DO = *do.(*gen.DO)
	return t
}
