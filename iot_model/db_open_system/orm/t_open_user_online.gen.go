// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_open_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpenUserOnline(db *gorm.DB) tOpenUserOnline {
	_tOpenUserOnline := tOpenUserOnline{}

	_tOpenUserOnline.tOpenUserOnlineDo.UseDB(db)
	_tOpenUserOnline.tOpenUserOnlineDo.UseModel(&model.TOpenUserOnline{})

	tableName := _tOpenUserOnline.tOpenUserOnlineDo.TableName()
	_tOpenUserOnline.ALL = field.NewField(tableName, "*")
	_tOpenUserOnline.Id = field.NewInt64(tableName, "id")
	_tOpenUserOnline.Uuid = field.NewString(tableName, "uuid")
	_tOpenUserOnline.Token = field.NewString(tableName, "token")
	_tOpenUserOnline.CreateTime = field.NewTime(tableName, "create_time")
	_tOpenUserOnline.UserName = field.NewString(tableName, "user_name")
	_tOpenUserOnline.Ip = field.NewString(tableName, "ip")
	_tOpenUserOnline.Explorer = field.NewString(tableName, "explorer")
	_tOpenUserOnline.Os = field.NewString(tableName, "os")

	_tOpenUserOnline.fillFieldMap()

	return _tOpenUserOnline
}

type tOpenUserOnline struct {
	tOpenUserOnlineDo tOpenUserOnlineDo

	ALL        field.Field
	Id         field.Int64
	Uuid       field.String
	Token      field.String
	CreateTime field.Time
	UserName   field.String
	Ip         field.String
	Explorer   field.String
	Os         field.String

	fieldMap map[string]field.Expr
}

func (t tOpenUserOnline) Table(newTableName string) *tOpenUserOnline {
	t.tOpenUserOnlineDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpenUserOnline) As(alias string) *tOpenUserOnline {
	t.tOpenUserOnlineDo.DO = *(t.tOpenUserOnlineDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpenUserOnline) updateTableName(table string) *tOpenUserOnline {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Uuid = field.NewString(table, "uuid")
	t.Token = field.NewString(table, "token")
	t.CreateTime = field.NewTime(table, "create_time")
	t.UserName = field.NewString(table, "user_name")
	t.Ip = field.NewString(table, "ip")
	t.Explorer = field.NewString(table, "explorer")
	t.Os = field.NewString(table, "os")

	t.fillFieldMap()

	return t
}

func (t *tOpenUserOnline) WithContext(ctx context.Context) *tOpenUserOnlineDo {
	return t.tOpenUserOnlineDo.WithContext(ctx)
}

func (t tOpenUserOnline) TableName() string { return t.tOpenUserOnlineDo.TableName() }

func (t tOpenUserOnline) Alias() string { return t.tOpenUserOnlineDo.Alias() }

func (t *tOpenUserOnline) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpenUserOnline) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.Id
	t.fieldMap["uuid"] = t.Uuid
	t.fieldMap["token"] = t.Token
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["user_name"] = t.UserName
	t.fieldMap["ip"] = t.Ip
	t.fieldMap["explorer"] = t.Explorer
	t.fieldMap["os"] = t.Os
}

func (t tOpenUserOnline) clone(db *gorm.DB) tOpenUserOnline {
	t.tOpenUserOnlineDo.ReplaceDB(db)
	return t
}

type tOpenUserOnlineDo struct{ gen.DO }

func (t tOpenUserOnlineDo) Debug() *tOpenUserOnlineDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpenUserOnlineDo) WithContext(ctx context.Context) *tOpenUserOnlineDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpenUserOnlineDo) Clauses(conds ...clause.Expression) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpenUserOnlineDo) Returning(value interface{}, columns ...string) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpenUserOnlineDo) Not(conds ...gen.Condition) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpenUserOnlineDo) Or(conds ...gen.Condition) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpenUserOnlineDo) Select(conds ...field.Expr) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpenUserOnlineDo) Where(conds ...gen.Condition) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpenUserOnlineDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpenUserOnlineDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpenUserOnlineDo) Order(conds ...field.Expr) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpenUserOnlineDo) Distinct(cols ...field.Expr) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpenUserOnlineDo) Omit(cols ...field.Expr) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpenUserOnlineDo) Join(table schema.Tabler, on ...field.Expr) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpenUserOnlineDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpenUserOnlineDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpenUserOnlineDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpenUserOnlineDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpenUserOnlineDo) Group(cols ...field.Expr) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpenUserOnlineDo) Having(conds ...gen.Condition) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpenUserOnlineDo) Limit(limit int) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpenUserOnlineDo) Offset(offset int) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpenUserOnlineDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpenUserOnlineDo) Unscoped() *tOpenUserOnlineDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpenUserOnlineDo) Create(values ...*model.TOpenUserOnline) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpenUserOnlineDo) CreateInBatches(values []*model.TOpenUserOnline, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpenUserOnlineDo) Save(values ...*model.TOpenUserOnline) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpenUserOnlineDo) First() (*model.TOpenUserOnline, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenUserOnline), nil
	}
}

func (t tOpenUserOnlineDo) Take() (*model.TOpenUserOnline, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenUserOnline), nil
	}
}

func (t tOpenUserOnlineDo) Last() (*model.TOpenUserOnline, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenUserOnline), nil
	}
}

func (t tOpenUserOnlineDo) Find() ([]*model.TOpenUserOnline, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpenUserOnline), err
}

func (t tOpenUserOnlineDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpenUserOnline, err error) {
	buf := make([]*model.TOpenUserOnline, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpenUserOnlineDo) FindInBatches(result *[]*model.TOpenUserOnline, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpenUserOnlineDo) Attrs(attrs ...field.AssignExpr) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpenUserOnlineDo) Assign(attrs ...field.AssignExpr) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpenUserOnlineDo) Joins(field field.RelationField) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpenUserOnlineDo) Preload(field field.RelationField) *tOpenUserOnlineDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpenUserOnlineDo) FirstOrInit() (*model.TOpenUserOnline, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenUserOnline), nil
	}
}

func (t tOpenUserOnlineDo) FirstOrCreate() (*model.TOpenUserOnline, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenUserOnline), nil
	}
}

func (t tOpenUserOnlineDo) FindByPage(offset int, limit int) (result []*model.TOpenUserOnline, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpenUserOnlineDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpenUserOnlineDo) withDO(do gen.Dao) *tOpenUserOnlineDo {
	t.DO = *do.(*gen.DO)
	return t
}
