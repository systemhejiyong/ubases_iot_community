// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_open_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpenCasbinRule(db *gorm.DB) tOpenCasbinRule {
	_tOpenCasbinRule := tOpenCasbinRule{}

	_tOpenCasbinRule.tOpenCasbinRuleDo.UseDB(db)
	_tOpenCasbinRule.tOpenCasbinRuleDo.UseModel(&model.TOpenCasbinRule{})

	tableName := _tOpenCasbinRule.tOpenCasbinRuleDo.TableName()
	_tOpenCasbinRule.ALL = field.NewField(tableName, "*")
	_tOpenCasbinRule.Id = field.NewInt64(tableName, "id")
	_tOpenCasbinRule.Ptype = field.NewString(tableName, "ptype")
	_tOpenCasbinRule.V0 = field.NewString(tableName, "v0")
	_tOpenCasbinRule.V1 = field.NewString(tableName, "v1")
	_tOpenCasbinRule.V2 = field.NewString(tableName, "v2")
	_tOpenCasbinRule.V3 = field.NewString(tableName, "v3")
	_tOpenCasbinRule.V4 = field.NewString(tableName, "v4")
	_tOpenCasbinRule.V5 = field.NewString(tableName, "v5")
	_tOpenCasbinRule.V6 = field.NewString(tableName, "v6")
	_tOpenCasbinRule.V7 = field.NewString(tableName, "v7")

	_tOpenCasbinRule.fillFieldMap()

	return _tOpenCasbinRule
}

type tOpenCasbinRule struct {
	tOpenCasbinRuleDo tOpenCasbinRuleDo

	ALL   field.Field
	Id    field.Int64
	Ptype field.String
	V0    field.String
	V1    field.String
	V2    field.String
	V3    field.String
	V4    field.String
	V5    field.String
	V6    field.String
	V7    field.String

	fieldMap map[string]field.Expr
}

func (t tOpenCasbinRule) Table(newTableName string) *tOpenCasbinRule {
	t.tOpenCasbinRuleDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpenCasbinRule) As(alias string) *tOpenCasbinRule {
	t.tOpenCasbinRuleDo.DO = *(t.tOpenCasbinRuleDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpenCasbinRule) updateTableName(table string) *tOpenCasbinRule {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Ptype = field.NewString(table, "ptype")
	t.V0 = field.NewString(table, "v0")
	t.V1 = field.NewString(table, "v1")
	t.V2 = field.NewString(table, "v2")
	t.V3 = field.NewString(table, "v3")
	t.V4 = field.NewString(table, "v4")
	t.V5 = field.NewString(table, "v5")
	t.V6 = field.NewString(table, "v6")
	t.V7 = field.NewString(table, "v7")

	t.fillFieldMap()

	return t
}

func (t *tOpenCasbinRule) WithContext(ctx context.Context) *tOpenCasbinRuleDo {
	return t.tOpenCasbinRuleDo.WithContext(ctx)
}

func (t tOpenCasbinRule) TableName() string { return t.tOpenCasbinRuleDo.TableName() }

func (t tOpenCasbinRule) Alias() string { return t.tOpenCasbinRuleDo.Alias() }

func (t *tOpenCasbinRule) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpenCasbinRule) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.Id
	t.fieldMap["ptype"] = t.Ptype
	t.fieldMap["v0"] = t.V0
	t.fieldMap["v1"] = t.V1
	t.fieldMap["v2"] = t.V2
	t.fieldMap["v3"] = t.V3
	t.fieldMap["v4"] = t.V4
	t.fieldMap["v5"] = t.V5
	t.fieldMap["v6"] = t.V6
	t.fieldMap["v7"] = t.V7
}

func (t tOpenCasbinRule) clone(db *gorm.DB) tOpenCasbinRule {
	t.tOpenCasbinRuleDo.ReplaceDB(db)
	return t
}

type tOpenCasbinRuleDo struct{ gen.DO }

func (t tOpenCasbinRuleDo) Debug() *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpenCasbinRuleDo) WithContext(ctx context.Context) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpenCasbinRuleDo) Clauses(conds ...clause.Expression) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpenCasbinRuleDo) Returning(value interface{}, columns ...string) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpenCasbinRuleDo) Not(conds ...gen.Condition) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpenCasbinRuleDo) Or(conds ...gen.Condition) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpenCasbinRuleDo) Select(conds ...field.Expr) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpenCasbinRuleDo) Where(conds ...gen.Condition) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpenCasbinRuleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpenCasbinRuleDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpenCasbinRuleDo) Order(conds ...field.Expr) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpenCasbinRuleDo) Distinct(cols ...field.Expr) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpenCasbinRuleDo) Omit(cols ...field.Expr) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpenCasbinRuleDo) Join(table schema.Tabler, on ...field.Expr) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpenCasbinRuleDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpenCasbinRuleDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpenCasbinRuleDo) Group(cols ...field.Expr) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpenCasbinRuleDo) Having(conds ...gen.Condition) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpenCasbinRuleDo) Limit(limit int) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpenCasbinRuleDo) Offset(offset int) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpenCasbinRuleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpenCasbinRuleDo) Unscoped() *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpenCasbinRuleDo) Create(values ...*model.TOpenCasbinRule) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpenCasbinRuleDo) CreateInBatches(values []*model.TOpenCasbinRule, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpenCasbinRuleDo) Save(values ...*model.TOpenCasbinRule) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpenCasbinRuleDo) First() (*model.TOpenCasbinRule, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenCasbinRule), nil
	}
}

func (t tOpenCasbinRuleDo) Take() (*model.TOpenCasbinRule, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenCasbinRule), nil
	}
}

func (t tOpenCasbinRuleDo) Last() (*model.TOpenCasbinRule, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenCasbinRule), nil
	}
}

func (t tOpenCasbinRuleDo) Find() ([]*model.TOpenCasbinRule, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpenCasbinRule), err
}

func (t tOpenCasbinRuleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpenCasbinRule, err error) {
	buf := make([]*model.TOpenCasbinRule, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpenCasbinRuleDo) FindInBatches(result *[]*model.TOpenCasbinRule, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpenCasbinRuleDo) Attrs(attrs ...field.AssignExpr) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpenCasbinRuleDo) Assign(attrs ...field.AssignExpr) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpenCasbinRuleDo) Joins(field field.RelationField) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpenCasbinRuleDo) Preload(field field.RelationField) *tOpenCasbinRuleDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpenCasbinRuleDo) FirstOrInit() (*model.TOpenCasbinRule, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenCasbinRule), nil
	}
}

func (t tOpenCasbinRuleDo) FirstOrCreate() (*model.TOpenCasbinRule, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenCasbinRule), nil
	}
}

func (t tOpenCasbinRuleDo) FindByPage(offset int, limit int) (result []*model.TOpenCasbinRule, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpenCasbinRuleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpenCasbinRuleDo) withDO(do gen.Dao) *tOpenCasbinRuleDo {
	t.DO = *do.(*gen.DO)
	return t
}
