// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_open_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpenModelInfo(db *gorm.DB) tOpenModelInfo {
	_tOpenModelInfo := tOpenModelInfo{}

	_tOpenModelInfo.tOpenModelInfoDo.UseDB(db)
	_tOpenModelInfo.tOpenModelInfoDo.UseModel(&model.TOpenModelInfo{})

	tableName := _tOpenModelInfo.tOpenModelInfoDo.TableName()
	_tOpenModelInfo.ALL = field.NewField(tableName, "*")
	_tOpenModelInfo.ModelId = field.NewInt64(tableName, "model_id")
	_tOpenModelInfo.ModelCategoryId = field.NewInt64(tableName, "model_category_id")
	_tOpenModelInfo.ModelName = field.NewString(tableName, "model_name")
	_tOpenModelInfo.ModelTitle = field.NewString(tableName, "model_title")
	_tOpenModelInfo.ModelPk = field.NewString(tableName, "model_pk")
	_tOpenModelInfo.ModelOrder = field.NewString(tableName, "model_order")
	_tOpenModelInfo.ModelSort = field.NewString(tableName, "model_sort")
	_tOpenModelInfo.ModelList = field.NewString(tableName, "model_list")
	_tOpenModelInfo.ModelEdit = field.NewString(tableName, "model_edit")
	_tOpenModelInfo.ModelIndexes = field.NewString(tableName, "model_indexes")
	_tOpenModelInfo.SearchList = field.NewString(tableName, "search_list")
	_tOpenModelInfo.CreateTime = field.NewInt64(tableName, "create_time")
	_tOpenModelInfo.UpdateTime = field.NewInt64(tableName, "update_time")
	_tOpenModelInfo.ModelStatus = field.NewInt32(tableName, "model_status")
	_tOpenModelInfo.ModelEngine = field.NewString(tableName, "model_engine")
	_tOpenModelInfo.CreateBy = field.NewInt64(tableName, "create_by")
	_tOpenModelInfo.UpdateBy = field.NewInt64(tableName, "update_by")
	_tOpenModelInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpenModelInfo.UpdatedAt = field.NewTime(tableName, "updated_at")

	_tOpenModelInfo.fillFieldMap()

	return _tOpenModelInfo
}

type tOpenModelInfo struct {
	tOpenModelInfoDo tOpenModelInfoDo

	ALL             field.Field
	ModelId         field.Int64
	ModelCategoryId field.Int64
	ModelName       field.String
	ModelTitle      field.String
	ModelPk         field.String
	ModelOrder      field.String
	ModelSort       field.String
	ModelList       field.String
	ModelEdit       field.String
	ModelIndexes    field.String
	SearchList      field.String
	CreateTime      field.Int64
	UpdateTime      field.Int64
	ModelStatus     field.Int32
	ModelEngine     field.String
	CreateBy        field.Int64
	UpdateBy        field.Int64
	CreatedAt       field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (t tOpenModelInfo) Table(newTableName string) *tOpenModelInfo {
	t.tOpenModelInfoDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpenModelInfo) As(alias string) *tOpenModelInfo {
	t.tOpenModelInfoDo.DO = *(t.tOpenModelInfoDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpenModelInfo) updateTableName(table string) *tOpenModelInfo {
	t.ALL = field.NewField(table, "*")
	t.ModelId = field.NewInt64(table, "model_id")
	t.ModelCategoryId = field.NewInt64(table, "model_category_id")
	t.ModelName = field.NewString(table, "model_name")
	t.ModelTitle = field.NewString(table, "model_title")
	t.ModelPk = field.NewString(table, "model_pk")
	t.ModelOrder = field.NewString(table, "model_order")
	t.ModelSort = field.NewString(table, "model_sort")
	t.ModelList = field.NewString(table, "model_list")
	t.ModelEdit = field.NewString(table, "model_edit")
	t.ModelIndexes = field.NewString(table, "model_indexes")
	t.SearchList = field.NewString(table, "search_list")
	t.CreateTime = field.NewInt64(table, "create_time")
	t.UpdateTime = field.NewInt64(table, "update_time")
	t.ModelStatus = field.NewInt32(table, "model_status")
	t.ModelEngine = field.NewString(table, "model_engine")
	t.CreateBy = field.NewInt64(table, "create_by")
	t.UpdateBy = field.NewInt64(table, "update_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *tOpenModelInfo) WithContext(ctx context.Context) *tOpenModelInfoDo {
	return t.tOpenModelInfoDo.WithContext(ctx)
}

func (t tOpenModelInfo) TableName() string { return t.tOpenModelInfoDo.TableName() }

func (t tOpenModelInfo) Alias() string { return t.tOpenModelInfoDo.Alias() }

func (t *tOpenModelInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpenModelInfo) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 19)
	t.fieldMap["model_id"] = t.ModelId
	t.fieldMap["model_category_id"] = t.ModelCategoryId
	t.fieldMap["model_name"] = t.ModelName
	t.fieldMap["model_title"] = t.ModelTitle
	t.fieldMap["model_pk"] = t.ModelPk
	t.fieldMap["model_order"] = t.ModelOrder
	t.fieldMap["model_sort"] = t.ModelSort
	t.fieldMap["model_list"] = t.ModelList
	t.fieldMap["model_edit"] = t.ModelEdit
	t.fieldMap["model_indexes"] = t.ModelIndexes
	t.fieldMap["search_list"] = t.SearchList
	t.fieldMap["create_time"] = t.CreateTime
	t.fieldMap["update_time"] = t.UpdateTime
	t.fieldMap["model_status"] = t.ModelStatus
	t.fieldMap["model_engine"] = t.ModelEngine
	t.fieldMap["create_by"] = t.CreateBy
	t.fieldMap["update_by"] = t.UpdateBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t tOpenModelInfo) clone(db *gorm.DB) tOpenModelInfo {
	t.tOpenModelInfoDo.ReplaceDB(db)
	return t
}

type tOpenModelInfoDo struct{ gen.DO }

func (t tOpenModelInfoDo) Debug() *tOpenModelInfoDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpenModelInfoDo) WithContext(ctx context.Context) *tOpenModelInfoDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpenModelInfoDo) Clauses(conds ...clause.Expression) *tOpenModelInfoDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpenModelInfoDo) Returning(value interface{}, columns ...string) *tOpenModelInfoDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpenModelInfoDo) Not(conds ...gen.Condition) *tOpenModelInfoDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpenModelInfoDo) Or(conds ...gen.Condition) *tOpenModelInfoDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpenModelInfoDo) Select(conds ...field.Expr) *tOpenModelInfoDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpenModelInfoDo) Where(conds ...gen.Condition) *tOpenModelInfoDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpenModelInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpenModelInfoDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpenModelInfoDo) Order(conds ...field.Expr) *tOpenModelInfoDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpenModelInfoDo) Distinct(cols ...field.Expr) *tOpenModelInfoDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpenModelInfoDo) Omit(cols ...field.Expr) *tOpenModelInfoDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpenModelInfoDo) Join(table schema.Tabler, on ...field.Expr) *tOpenModelInfoDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpenModelInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpenModelInfoDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpenModelInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpenModelInfoDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpenModelInfoDo) Group(cols ...field.Expr) *tOpenModelInfoDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpenModelInfoDo) Having(conds ...gen.Condition) *tOpenModelInfoDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpenModelInfoDo) Limit(limit int) *tOpenModelInfoDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpenModelInfoDo) Offset(offset int) *tOpenModelInfoDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpenModelInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpenModelInfoDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpenModelInfoDo) Unscoped() *tOpenModelInfoDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpenModelInfoDo) Create(values ...*model.TOpenModelInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpenModelInfoDo) CreateInBatches(values []*model.TOpenModelInfo, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpenModelInfoDo) Save(values ...*model.TOpenModelInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpenModelInfoDo) First() (*model.TOpenModelInfo, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenModelInfo), nil
	}
}

func (t tOpenModelInfoDo) Take() (*model.TOpenModelInfo, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenModelInfo), nil
	}
}

func (t tOpenModelInfoDo) Last() (*model.TOpenModelInfo, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenModelInfo), nil
	}
}

func (t tOpenModelInfoDo) Find() ([]*model.TOpenModelInfo, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpenModelInfo), err
}

func (t tOpenModelInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpenModelInfo, err error) {
	buf := make([]*model.TOpenModelInfo, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpenModelInfoDo) FindInBatches(result *[]*model.TOpenModelInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpenModelInfoDo) Attrs(attrs ...field.AssignExpr) *tOpenModelInfoDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpenModelInfoDo) Assign(attrs ...field.AssignExpr) *tOpenModelInfoDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpenModelInfoDo) Joins(field field.RelationField) *tOpenModelInfoDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpenModelInfoDo) Preload(field field.RelationField) *tOpenModelInfoDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpenModelInfoDo) FirstOrInit() (*model.TOpenModelInfo, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenModelInfo), nil
	}
}

func (t tOpenModelInfoDo) FirstOrCreate() (*model.TOpenModelInfo, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenModelInfo), nil
	}
}

func (t tOpenModelInfoDo) FindByPage(offset int, limit int) (result []*model.TOpenModelInfo, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpenModelInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpenModelInfoDo) withDO(do gen.Dao) *tOpenModelInfoDo {
	t.DO = *do.(*gen.DO)
	return t
}
