// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_open_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpenAuthQuantity(db *gorm.DB) tOpenAuthQuantity {
	_tOpenAuthQuantity := tOpenAuthQuantity{}

	_tOpenAuthQuantity.tOpenAuthQuantityDo.UseDB(db)
	_tOpenAuthQuantity.tOpenAuthQuantityDo.UseModel(&model.TOpenAuthQuantity{})

	tableName := _tOpenAuthQuantity.tOpenAuthQuantityDo.TableName()
	_tOpenAuthQuantity.ALL = field.NewField(tableName, "*")
	_tOpenAuthQuantity.Id = field.NewInt64(tableName, "id")
	_tOpenAuthQuantity.UserId = field.NewInt64(tableName, "user_id")
	_tOpenAuthQuantity.CompanyId = field.NewInt64(tableName, "company_id")
	_tOpenAuthQuantity.TenantId = field.NewString(tableName, "tenant_id")
	_tOpenAuthQuantity.AuthCode = field.NewString(tableName, "auth_code")
	_tOpenAuthQuantity.AuthQuantity = field.NewInt32(tableName, "auth_quantity")
	_tOpenAuthQuantity.AuthDate = field.NewTime(tableName, "auth_date")
	_tOpenAuthQuantity.Status = field.NewInt32(tableName, "status")
	_tOpenAuthQuantity.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpenAuthQuantity.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpenAuthQuantity.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOpenAuthQuantity.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOpenAuthQuantity.DeletedAt = field.NewField(tableName, "deleted_at")

	_tOpenAuthQuantity.fillFieldMap()

	return _tOpenAuthQuantity
}

type tOpenAuthQuantity struct {
	tOpenAuthQuantityDo tOpenAuthQuantityDo

	ALL          field.Field
	Id           field.Int64
	UserId       field.Int64
	CompanyId    field.Int64
	TenantId     field.String
	AuthCode     field.String
	AuthQuantity field.Int32
	AuthDate     field.Time
	Status       field.Int32
	CreatedBy    field.Int64
	CreatedAt    field.Time
	UpdatedBy    field.Int64
	UpdatedAt    field.Time
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (t tOpenAuthQuantity) Table(newTableName string) *tOpenAuthQuantity {
	t.tOpenAuthQuantityDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpenAuthQuantity) As(alias string) *tOpenAuthQuantity {
	t.tOpenAuthQuantityDo.DO = *(t.tOpenAuthQuantityDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpenAuthQuantity) updateTableName(table string) *tOpenAuthQuantity {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.UserId = field.NewInt64(table, "user_id")
	t.CompanyId = field.NewInt64(table, "company_id")
	t.TenantId = field.NewString(table, "tenant_id")
	t.AuthCode = field.NewString(table, "auth_code")
	t.AuthQuantity = field.NewInt32(table, "auth_quantity")
	t.AuthDate = field.NewTime(table, "auth_date")
	t.Status = field.NewInt32(table, "status")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tOpenAuthQuantity) WithContext(ctx context.Context) *tOpenAuthQuantityDo {
	return t.tOpenAuthQuantityDo.WithContext(ctx)
}

func (t tOpenAuthQuantity) TableName() string { return t.tOpenAuthQuantityDo.TableName() }

func (t tOpenAuthQuantity) Alias() string { return t.tOpenAuthQuantityDo.Alias() }

func (t *tOpenAuthQuantity) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpenAuthQuantity) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.Id
	t.fieldMap["user_id"] = t.UserId
	t.fieldMap["company_id"] = t.CompanyId
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["auth_code"] = t.AuthCode
	t.fieldMap["auth_quantity"] = t.AuthQuantity
	t.fieldMap["auth_date"] = t.AuthDate
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tOpenAuthQuantity) clone(db *gorm.DB) tOpenAuthQuantity {
	t.tOpenAuthQuantityDo.ReplaceDB(db)
	return t
}

type tOpenAuthQuantityDo struct{ gen.DO }

func (t tOpenAuthQuantityDo) Debug() *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpenAuthQuantityDo) WithContext(ctx context.Context) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpenAuthQuantityDo) Clauses(conds ...clause.Expression) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpenAuthQuantityDo) Returning(value interface{}, columns ...string) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpenAuthQuantityDo) Not(conds ...gen.Condition) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpenAuthQuantityDo) Or(conds ...gen.Condition) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpenAuthQuantityDo) Select(conds ...field.Expr) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpenAuthQuantityDo) Where(conds ...gen.Condition) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpenAuthQuantityDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpenAuthQuantityDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpenAuthQuantityDo) Order(conds ...field.Expr) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpenAuthQuantityDo) Distinct(cols ...field.Expr) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpenAuthQuantityDo) Omit(cols ...field.Expr) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpenAuthQuantityDo) Join(table schema.Tabler, on ...field.Expr) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpenAuthQuantityDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpenAuthQuantityDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpenAuthQuantityDo) Group(cols ...field.Expr) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpenAuthQuantityDo) Having(conds ...gen.Condition) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpenAuthQuantityDo) Limit(limit int) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpenAuthQuantityDo) Offset(offset int) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpenAuthQuantityDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpenAuthQuantityDo) Unscoped() *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpenAuthQuantityDo) Create(values ...*model.TOpenAuthQuantity) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpenAuthQuantityDo) CreateInBatches(values []*model.TOpenAuthQuantity, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpenAuthQuantityDo) Save(values ...*model.TOpenAuthQuantity) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpenAuthQuantityDo) First() (*model.TOpenAuthQuantity, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenAuthQuantity), nil
	}
}

func (t tOpenAuthQuantityDo) Take() (*model.TOpenAuthQuantity, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenAuthQuantity), nil
	}
}

func (t tOpenAuthQuantityDo) Last() (*model.TOpenAuthQuantity, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenAuthQuantity), nil
	}
}

func (t tOpenAuthQuantityDo) Find() ([]*model.TOpenAuthQuantity, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpenAuthQuantity), err
}

func (t tOpenAuthQuantityDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpenAuthQuantity, err error) {
	buf := make([]*model.TOpenAuthQuantity, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpenAuthQuantityDo) FindInBatches(result *[]*model.TOpenAuthQuantity, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpenAuthQuantityDo) Attrs(attrs ...field.AssignExpr) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpenAuthQuantityDo) Assign(attrs ...field.AssignExpr) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpenAuthQuantityDo) Joins(field field.RelationField) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpenAuthQuantityDo) Preload(field field.RelationField) *tOpenAuthQuantityDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpenAuthQuantityDo) FirstOrInit() (*model.TOpenAuthQuantity, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenAuthQuantity), nil
	}
}

func (t tOpenAuthQuantityDo) FirstOrCreate() (*model.TOpenAuthQuantity, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenAuthQuantity), nil
	}
}

func (t tOpenAuthQuantityDo) FindByPage(offset int, limit int) (result []*model.TOpenAuthQuantity, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpenAuthQuantityDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpenAuthQuantityDo) withDO(do gen.Dao) *tOpenAuthQuantityDo {
	t.DO = *do.(*gen.DO)
	return t
}
