// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_open_system/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOpenCompany(db *gorm.DB) tOpenCompany {
	_tOpenCompany := tOpenCompany{}

	_tOpenCompany.tOpenCompanyDo.UseDB(db)
	_tOpenCompany.tOpenCompanyDo.UseModel(&model.TOpenCompany{})

	tableName := _tOpenCompany.tOpenCompanyDo.TableName()
	_tOpenCompany.ALL = field.NewField(tableName, "*")
	_tOpenCompany.Id = field.NewInt64(tableName, "id")
	_tOpenCompany.TenantId = field.NewString(tableName, "tenant_id")
	_tOpenCompany.UserId = field.NewInt64(tableName, "user_id")
	_tOpenCompany.Name = field.NewString(tableName, "name")
	_tOpenCompany.Nature = field.NewString(tableName, "nature")
	_tOpenCompany.LicenseNo = field.NewString(tableName, "license_no")
	_tOpenCompany.License = field.NewString(tableName, "license")
	_tOpenCompany.LegalPerson = field.NewString(tableName, "legal_person")
	_tOpenCompany.ApplyPerson = field.NewString(tableName, "apply_person")
	_tOpenCompany.Idcard = field.NewString(tableName, "idcard")
	_tOpenCompany.IdcardFrontImg = field.NewString(tableName, "idcard_front_img")
	_tOpenCompany.IdcardAfterImg = field.NewString(tableName, "idcard_after_img")
	_tOpenCompany.Address = field.NewString(tableName, "address")
	_tOpenCompany.Status = field.NewInt32(tableName, "status")
	_tOpenCompany.AccountType = field.NewInt32(tableName, "account_type")
	_tOpenCompany.CaseRemak = field.NewString(tableName, "case_remak")
	_tOpenCompany.Email = field.NewString(tableName, "email")
	_tOpenCompany.IsRealName = field.NewInt32(tableName, "is_real_name")
	_tOpenCompany.Phone = field.NewString(tableName, "phone")
	_tOpenCompany.RequestAuthAt = field.NewTime(tableName, "request_auth_at")
	_tOpenCompany.Region = field.NewString(tableName, "region")
	_tOpenCompany.UserName = field.NewString(tableName, "user_name")
	_tOpenCompany.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOpenCompany.CreatedAt = field.NewTime(tableName, "created_at")
	_tOpenCompany.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOpenCompany.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOpenCompany.DeletedAt = field.NewField(tableName, "deleted_at")

	_tOpenCompany.fillFieldMap()

	return _tOpenCompany
}

type tOpenCompany struct {
	tOpenCompanyDo tOpenCompanyDo

	ALL            field.Field
	Id             field.Int64
	TenantId       field.String
	UserId         field.Int64
	Name           field.String
	Nature         field.String
	LicenseNo      field.String
	License        field.String
	LegalPerson    field.String
	ApplyPerson    field.String
	Idcard         field.String
	IdcardFrontImg field.String
	IdcardAfterImg field.String
	Address        field.String
	Status         field.Int32
	AccountType    field.Int32
	CaseRemak      field.String
	Email          field.String
	IsRealName     field.Int32
	Phone          field.String
	RequestAuthAt  field.Time
	Region         field.String
	UserName       field.String
	CreatedBy      field.Int64
	CreatedAt      field.Time
	UpdatedBy      field.Int64
	UpdatedAt      field.Time
	DeletedAt      field.Field

	fieldMap map[string]field.Expr
}

func (t tOpenCompany) Table(newTableName string) *tOpenCompany {
	t.tOpenCompanyDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOpenCompany) As(alias string) *tOpenCompany {
	t.tOpenCompanyDo.DO = *(t.tOpenCompanyDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOpenCompany) updateTableName(table string) *tOpenCompany {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.TenantId = field.NewString(table, "tenant_id")
	t.UserId = field.NewInt64(table, "user_id")
	t.Name = field.NewString(table, "name")
	t.Nature = field.NewString(table, "nature")
	t.LicenseNo = field.NewString(table, "license_no")
	t.License = field.NewString(table, "license")
	t.LegalPerson = field.NewString(table, "legal_person")
	t.ApplyPerson = field.NewString(table, "apply_person")
	t.Idcard = field.NewString(table, "idcard")
	t.IdcardFrontImg = field.NewString(table, "idcard_front_img")
	t.IdcardAfterImg = field.NewString(table, "idcard_after_img")
	t.Address = field.NewString(table, "address")
	t.Status = field.NewInt32(table, "status")
	t.AccountType = field.NewInt32(table, "account_type")
	t.CaseRemak = field.NewString(table, "case_remak")
	t.Email = field.NewString(table, "email")
	t.IsRealName = field.NewInt32(table, "is_real_name")
	t.Phone = field.NewString(table, "phone")
	t.RequestAuthAt = field.NewTime(table, "request_auth_at")
	t.Region = field.NewString(table, "region")
	t.UserName = field.NewString(table, "user_name")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tOpenCompany) WithContext(ctx context.Context) *tOpenCompanyDo {
	return t.tOpenCompanyDo.WithContext(ctx)
}

func (t tOpenCompany) TableName() string { return t.tOpenCompanyDo.TableName() }

func (t tOpenCompany) Alias() string { return t.tOpenCompanyDo.Alias() }

func (t *tOpenCompany) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOpenCompany) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 27)
	t.fieldMap["id"] = t.Id
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["user_id"] = t.UserId
	t.fieldMap["name"] = t.Name
	t.fieldMap["nature"] = t.Nature
	t.fieldMap["license_no"] = t.LicenseNo
	t.fieldMap["license"] = t.License
	t.fieldMap["legal_person"] = t.LegalPerson
	t.fieldMap["apply_person"] = t.ApplyPerson
	t.fieldMap["idcard"] = t.Idcard
	t.fieldMap["idcard_front_img"] = t.IdcardFrontImg
	t.fieldMap["idcard_after_img"] = t.IdcardAfterImg
	t.fieldMap["address"] = t.Address
	t.fieldMap["status"] = t.Status
	t.fieldMap["account_type"] = t.AccountType
	t.fieldMap["case_remak"] = t.CaseRemak
	t.fieldMap["email"] = t.Email
	t.fieldMap["is_real_name"] = t.IsRealName
	t.fieldMap["phone"] = t.Phone
	t.fieldMap["request_auth_at"] = t.RequestAuthAt
	t.fieldMap["region"] = t.Region
	t.fieldMap["user_name"] = t.UserName
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tOpenCompany) clone(db *gorm.DB) tOpenCompany {
	t.tOpenCompanyDo.ReplaceDB(db)
	return t
}

type tOpenCompanyDo struct{ gen.DO }

func (t tOpenCompanyDo) Debug() *tOpenCompanyDo {
	return t.withDO(t.DO.Debug())
}

func (t tOpenCompanyDo) WithContext(ctx context.Context) *tOpenCompanyDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOpenCompanyDo) Clauses(conds ...clause.Expression) *tOpenCompanyDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOpenCompanyDo) Returning(value interface{}, columns ...string) *tOpenCompanyDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOpenCompanyDo) Not(conds ...gen.Condition) *tOpenCompanyDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOpenCompanyDo) Or(conds ...gen.Condition) *tOpenCompanyDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOpenCompanyDo) Select(conds ...field.Expr) *tOpenCompanyDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOpenCompanyDo) Where(conds ...gen.Condition) *tOpenCompanyDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOpenCompanyDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOpenCompanyDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOpenCompanyDo) Order(conds ...field.Expr) *tOpenCompanyDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOpenCompanyDo) Distinct(cols ...field.Expr) *tOpenCompanyDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOpenCompanyDo) Omit(cols ...field.Expr) *tOpenCompanyDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOpenCompanyDo) Join(table schema.Tabler, on ...field.Expr) *tOpenCompanyDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOpenCompanyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOpenCompanyDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOpenCompanyDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOpenCompanyDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOpenCompanyDo) Group(cols ...field.Expr) *tOpenCompanyDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOpenCompanyDo) Having(conds ...gen.Condition) *tOpenCompanyDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOpenCompanyDo) Limit(limit int) *tOpenCompanyDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOpenCompanyDo) Offset(offset int) *tOpenCompanyDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOpenCompanyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOpenCompanyDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOpenCompanyDo) Unscoped() *tOpenCompanyDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOpenCompanyDo) Create(values ...*model.TOpenCompany) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOpenCompanyDo) CreateInBatches(values []*model.TOpenCompany, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOpenCompanyDo) Save(values ...*model.TOpenCompany) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOpenCompanyDo) First() (*model.TOpenCompany, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenCompany), nil
	}
}

func (t tOpenCompanyDo) Take() (*model.TOpenCompany, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenCompany), nil
	}
}

func (t tOpenCompanyDo) Last() (*model.TOpenCompany, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenCompany), nil
	}
}

func (t tOpenCompanyDo) Find() ([]*model.TOpenCompany, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOpenCompany), err
}

func (t tOpenCompanyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOpenCompany, err error) {
	buf := make([]*model.TOpenCompany, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOpenCompanyDo) FindInBatches(result *[]*model.TOpenCompany, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOpenCompanyDo) Attrs(attrs ...field.AssignExpr) *tOpenCompanyDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOpenCompanyDo) Assign(attrs ...field.AssignExpr) *tOpenCompanyDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOpenCompanyDo) Joins(field field.RelationField) *tOpenCompanyDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOpenCompanyDo) Preload(field field.RelationField) *tOpenCompanyDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOpenCompanyDo) FirstOrInit() (*model.TOpenCompany, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenCompany), nil
	}
}

func (t tOpenCompanyDo) FirstOrCreate() (*model.TOpenCompany, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOpenCompany), nil
	}
}

func (t tOpenCompanyDo) FindByPage(offset int, limit int) (result []*model.TOpenCompany, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOpenCompanyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOpenCompanyDo) withDO(do gen.Dao) *tOpenCompanyDo {
	t.DO = *do.(*gen.DO)
	return t
}
