// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_statistics/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTPmAppData(db *gorm.DB) tPmAppData {
	_tPmAppData := tPmAppData{}

	_tPmAppData.tPmAppDataDo.UseDB(db)
	_tPmAppData.tPmAppDataDo.UseModel(&model.TPmAppData{})

	tableName := _tPmAppData.tPmAppDataDo.TableName()
	_tPmAppData.ALL = field.NewField(tableName, "*")
	_tPmAppData.AppId = field.NewInt64(tableName, "app_id")
	_tPmAppData.AppKey = field.NewString(tableName, "app_key")
	_tPmAppData.AppName = field.NewString(tableName, "app_name")
	_tPmAppData.LastVersion = field.NewString(tableName, "last_version")
	_tPmAppData.DevAccount = field.NewString(tableName, "dev_account")
	_tPmAppData.RegisterUserSum = field.NewInt64(tableName, "register_user_sum")
	_tPmAppData.ActiveUserSum = field.NewInt64(tableName, "active_user_sum")
	_tPmAppData.VersionSum = field.NewInt64(tableName, "version_sum")
	_tPmAppData.FeedbackSum = field.NewInt64(tableName, "feedback_sum")
	_tPmAppData.UpdatedAt = field.NewTime(tableName, "updated_at")

	_tPmAppData.fillFieldMap()

	return _tPmAppData
}

type tPmAppData struct {
	tPmAppDataDo tPmAppDataDo

	ALL             field.Field
	AppId           field.Int64
	AppKey          field.String
	AppName         field.String
	LastVersion     field.String
	DevAccount      field.String
	RegisterUserSum field.Int64
	ActiveUserSum   field.Int64
	VersionSum      field.Int64
	FeedbackSum     field.Int64
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (t tPmAppData) Table(newTableName string) *tPmAppData {
	t.tPmAppDataDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tPmAppData) As(alias string) *tPmAppData {
	t.tPmAppDataDo.DO = *(t.tPmAppDataDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tPmAppData) updateTableName(table string) *tPmAppData {
	t.ALL = field.NewField(table, "*")
	t.AppId = field.NewInt64(table, "app_id")
	t.AppKey = field.NewString(table, "app_key")
	t.AppName = field.NewString(table, "app_name")
	t.LastVersion = field.NewString(table, "last_version")
	t.DevAccount = field.NewString(table, "dev_account")
	t.RegisterUserSum = field.NewInt64(table, "register_user_sum")
	t.ActiveUserSum = field.NewInt64(table, "active_user_sum")
	t.VersionSum = field.NewInt64(table, "version_sum")
	t.FeedbackSum = field.NewInt64(table, "feedback_sum")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *tPmAppData) WithContext(ctx context.Context) *tPmAppDataDo {
	return t.tPmAppDataDo.WithContext(ctx)
}

func (t tPmAppData) TableName() string { return t.tPmAppDataDo.TableName() }

func (t tPmAppData) Alias() string { return t.tPmAppDataDo.Alias() }

func (t *tPmAppData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tPmAppData) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["app_id"] = t.AppId
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["app_name"] = t.AppName
	t.fieldMap["last_version"] = t.LastVersion
	t.fieldMap["dev_account"] = t.DevAccount
	t.fieldMap["register_user_sum"] = t.RegisterUserSum
	t.fieldMap["active_user_sum"] = t.ActiveUserSum
	t.fieldMap["version_sum"] = t.VersionSum
	t.fieldMap["feedback_sum"] = t.FeedbackSum
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t tPmAppData) clone(db *gorm.DB) tPmAppData {
	t.tPmAppDataDo.ReplaceDB(db)
	return t
}

type tPmAppDataDo struct{ gen.DO }

func (t tPmAppDataDo) Debug() *tPmAppDataDo {
	return t.withDO(t.DO.Debug())
}

func (t tPmAppDataDo) WithContext(ctx context.Context) *tPmAppDataDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tPmAppDataDo) Clauses(conds ...clause.Expression) *tPmAppDataDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tPmAppDataDo) Returning(value interface{}, columns ...string) *tPmAppDataDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tPmAppDataDo) Not(conds ...gen.Condition) *tPmAppDataDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tPmAppDataDo) Or(conds ...gen.Condition) *tPmAppDataDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tPmAppDataDo) Select(conds ...field.Expr) *tPmAppDataDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tPmAppDataDo) Where(conds ...gen.Condition) *tPmAppDataDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tPmAppDataDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tPmAppDataDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tPmAppDataDo) Order(conds ...field.Expr) *tPmAppDataDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tPmAppDataDo) Distinct(cols ...field.Expr) *tPmAppDataDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tPmAppDataDo) Omit(cols ...field.Expr) *tPmAppDataDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tPmAppDataDo) Join(table schema.Tabler, on ...field.Expr) *tPmAppDataDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tPmAppDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tPmAppDataDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tPmAppDataDo) RightJoin(table schema.Tabler, on ...field.Expr) *tPmAppDataDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tPmAppDataDo) Group(cols ...field.Expr) *tPmAppDataDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tPmAppDataDo) Having(conds ...gen.Condition) *tPmAppDataDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tPmAppDataDo) Limit(limit int) *tPmAppDataDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tPmAppDataDo) Offset(offset int) *tPmAppDataDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tPmAppDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tPmAppDataDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tPmAppDataDo) Unscoped() *tPmAppDataDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tPmAppDataDo) Create(values ...*model.TPmAppData) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tPmAppDataDo) CreateInBatches(values []*model.TPmAppData, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tPmAppDataDo) Save(values ...*model.TPmAppData) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tPmAppDataDo) First() (*model.TPmAppData, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmAppData), nil
	}
}

func (t tPmAppDataDo) Take() (*model.TPmAppData, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmAppData), nil
	}
}

func (t tPmAppDataDo) Last() (*model.TPmAppData, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmAppData), nil
	}
}

func (t tPmAppDataDo) Find() ([]*model.TPmAppData, error) {
	result, err := t.DO.Find()
	return result.([]*model.TPmAppData), err
}

func (t tPmAppDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TPmAppData, err error) {
	buf := make([]*model.TPmAppData, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tPmAppDataDo) FindInBatches(result *[]*model.TPmAppData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tPmAppDataDo) Attrs(attrs ...field.AssignExpr) *tPmAppDataDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tPmAppDataDo) Assign(attrs ...field.AssignExpr) *tPmAppDataDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tPmAppDataDo) Joins(field field.RelationField) *tPmAppDataDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tPmAppDataDo) Preload(field field.RelationField) *tPmAppDataDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tPmAppDataDo) FirstOrInit() (*model.TPmAppData, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmAppData), nil
	}
}

func (t tPmAppDataDo) FirstOrCreate() (*model.TPmAppData, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TPmAppData), nil
	}
}

func (t tPmAppDataDo) FindByPage(offset int, limit int) (result []*model.TPmAppData, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tPmAppDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tPmAppDataDo) withDO(do gen.Dao) *tPmAppDataDo {
	t.DO = *do.(*gen.DO)
	return t
}
