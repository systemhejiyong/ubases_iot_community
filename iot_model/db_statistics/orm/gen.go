// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		TAppUserActive30day: newTAppUserActive30day(db),
		TAppUserActiveDay:   newTAppUserActiveDay(db),
		TAppUserMonth:       newTAppUserMonth(db),
		TAppUserSum:         newTAppUserSum(db),
		TDataOverviewHour:   newTDataOverviewHour(db),
		TDataOverviewMonth:  newTDataOverviewMonth(db),
		TDeveloperSum:       newTDeveloperSum(db),
		TDeviceActiveDay:    newTDeviceActiveDay(db),
		TDeviceActiveHour:   newTDeviceActiveHour(db),
		TDeviceActiveMonth:  newTDeviceActiveMonth(db),
		TDeviceDataSum:      newTDeviceDataSum(db),
		TPmAppData:          newTPmAppData(db),
		TPmDevelopData:      newTPmDevelopData(db),
		TProductFaultMonth:  newTProductFaultMonth(db),
		TProductFaultType:   newTProductFaultType(db),
	}
}

type Query struct {
	db *gorm.DB

	TAppUserActive30day tAppUserActive30day
	TAppUserActiveDay   tAppUserActiveDay
	TAppUserMonth       tAppUserMonth
	TAppUserSum         tAppUserSum
	TDataOverviewHour   tDataOverviewHour
	TDataOverviewMonth  tDataOverviewMonth
	TDeveloperSum       tDeveloperSum
	TDeviceActiveDay    tDeviceActiveDay
	TDeviceActiveHour   tDeviceActiveHour
	TDeviceActiveMonth  tDeviceActiveMonth
	TDeviceDataSum      tDeviceDataSum
	TPmAppData          tPmAppData
	TPmDevelopData      tPmDevelopData
	TProductFaultMonth  tProductFaultMonth
	TProductFaultType   tProductFaultType
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                  db,
		TAppUserActive30day: q.TAppUserActive30day.clone(db),
		TAppUserActiveDay:   q.TAppUserActiveDay.clone(db),
		TAppUserMonth:       q.TAppUserMonth.clone(db),
		TAppUserSum:         q.TAppUserSum.clone(db),
		TDataOverviewHour:   q.TDataOverviewHour.clone(db),
		TDataOverviewMonth:  q.TDataOverviewMonth.clone(db),
		TDeveloperSum:       q.TDeveloperSum.clone(db),
		TDeviceActiveDay:    q.TDeviceActiveDay.clone(db),
		TDeviceActiveHour:   q.TDeviceActiveHour.clone(db),
		TDeviceActiveMonth:  q.TDeviceActiveMonth.clone(db),
		TDeviceDataSum:      q.TDeviceDataSum.clone(db),
		TPmAppData:          q.TPmAppData.clone(db),
		TPmDevelopData:      q.TPmDevelopData.clone(db),
		TProductFaultMonth:  q.TProductFaultMonth.clone(db),
		TProductFaultType:   q.TProductFaultType.clone(db),
	}
}

type queryCtx struct {
	TAppUserActive30day tAppUserActive30dayDo
	TAppUserActiveDay   tAppUserActiveDayDo
	TAppUserMonth       tAppUserMonthDo
	TAppUserSum         tAppUserSumDo
	TDataOverviewHour   tDataOverviewHourDo
	TDataOverviewMonth  tDataOverviewMonthDo
	TDeveloperSum       tDeveloperSumDo
	TDeviceActiveDay    tDeviceActiveDayDo
	TDeviceActiveHour   tDeviceActiveHourDo
	TDeviceActiveMonth  tDeviceActiveMonthDo
	TDeviceDataSum      tDeviceDataSumDo
	TPmAppData          tPmAppDataDo
	TPmDevelopData      tPmDevelopDataDo
	TProductFaultMonth  tProductFaultMonthDo
	TProductFaultType   tProductFaultTypeDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		TAppUserActive30day: *q.TAppUserActive30day.WithContext(ctx),
		TAppUserActiveDay:   *q.TAppUserActiveDay.WithContext(ctx),
		TAppUserMonth:       *q.TAppUserMonth.WithContext(ctx),
		TAppUserSum:         *q.TAppUserSum.WithContext(ctx),
		TDataOverviewHour:   *q.TDataOverviewHour.WithContext(ctx),
		TDataOverviewMonth:  *q.TDataOverviewMonth.WithContext(ctx),
		TDeveloperSum:       *q.TDeveloperSum.WithContext(ctx),
		TDeviceActiveDay:    *q.TDeviceActiveDay.WithContext(ctx),
		TDeviceActiveHour:   *q.TDeviceActiveHour.WithContext(ctx),
		TDeviceActiveMonth:  *q.TDeviceActiveMonth.WithContext(ctx),
		TDeviceDataSum:      *q.TDeviceDataSum.WithContext(ctx),
		TPmAppData:          *q.TPmAppData.WithContext(ctx),
		TPmDevelopData:      *q.TPmDevelopData.WithContext(ctx),
		TProductFaultMonth:  *q.TProductFaultMonth.WithContext(ctx),
		TProductFaultType:   *q.TProductFaultType.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
