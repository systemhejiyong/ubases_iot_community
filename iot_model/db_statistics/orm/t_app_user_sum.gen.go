// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_statistics/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTAppUserSum(db *gorm.DB) tAppUserSum {
	_tAppUserSum := tAppUserSum{}

	_tAppUserSum.tAppUserSumDo.UseDB(db)
	_tAppUserSum.tAppUserSumDo.UseModel(&model.TAppUserSum{})

	tableName := _tAppUserSum.tAppUserSumDo.TableName()
	_tAppUserSum.ALL = field.NewField(tableName, "*")
	_tAppUserSum.TenantId = field.NewString(tableName, "tenant_id")
	_tAppUserSum.AppKey = field.NewString(tableName, "app_key")
	_tAppUserSum.RegisterSum = field.NewInt64(tableName, "register_sum")
	_tAppUserSum.UpdatedAt = field.NewTime(tableName, "updated_at")

	_tAppUserSum.fillFieldMap()

	return _tAppUserSum
}

type tAppUserSum struct {
	tAppUserSumDo tAppUserSumDo

	ALL         field.Field
	TenantId    field.String
	AppKey      field.String
	RegisterSum field.Int64
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (t tAppUserSum) Table(newTableName string) *tAppUserSum {
	t.tAppUserSumDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tAppUserSum) As(alias string) *tAppUserSum {
	t.tAppUserSumDo.DO = *(t.tAppUserSumDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tAppUserSum) updateTableName(table string) *tAppUserSum {
	t.ALL = field.NewField(table, "*")
	t.TenantId = field.NewString(table, "tenant_id")
	t.AppKey = field.NewString(table, "app_key")
	t.RegisterSum = field.NewInt64(table, "register_sum")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *tAppUserSum) WithContext(ctx context.Context) *tAppUserSumDo {
	return t.tAppUserSumDo.WithContext(ctx)
}

func (t tAppUserSum) TableName() string { return t.tAppUserSumDo.TableName() }

func (t tAppUserSum) Alias() string { return t.tAppUserSumDo.Alias() }

func (t *tAppUserSum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tAppUserSum) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["register_sum"] = t.RegisterSum
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t tAppUserSum) clone(db *gorm.DB) tAppUserSum {
	t.tAppUserSumDo.ReplaceDB(db)
	return t
}

type tAppUserSumDo struct{ gen.DO }

func (t tAppUserSumDo) Debug() *tAppUserSumDo {
	return t.withDO(t.DO.Debug())
}

func (t tAppUserSumDo) WithContext(ctx context.Context) *tAppUserSumDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tAppUserSumDo) Clauses(conds ...clause.Expression) *tAppUserSumDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tAppUserSumDo) Returning(value interface{}, columns ...string) *tAppUserSumDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tAppUserSumDo) Not(conds ...gen.Condition) *tAppUserSumDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tAppUserSumDo) Or(conds ...gen.Condition) *tAppUserSumDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tAppUserSumDo) Select(conds ...field.Expr) *tAppUserSumDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tAppUserSumDo) Where(conds ...gen.Condition) *tAppUserSumDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tAppUserSumDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tAppUserSumDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tAppUserSumDo) Order(conds ...field.Expr) *tAppUserSumDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tAppUserSumDo) Distinct(cols ...field.Expr) *tAppUserSumDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tAppUserSumDo) Omit(cols ...field.Expr) *tAppUserSumDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tAppUserSumDo) Join(table schema.Tabler, on ...field.Expr) *tAppUserSumDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tAppUserSumDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tAppUserSumDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tAppUserSumDo) RightJoin(table schema.Tabler, on ...field.Expr) *tAppUserSumDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tAppUserSumDo) Group(cols ...field.Expr) *tAppUserSumDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tAppUserSumDo) Having(conds ...gen.Condition) *tAppUserSumDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tAppUserSumDo) Limit(limit int) *tAppUserSumDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tAppUserSumDo) Offset(offset int) *tAppUserSumDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tAppUserSumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tAppUserSumDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tAppUserSumDo) Unscoped() *tAppUserSumDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tAppUserSumDo) Create(values ...*model.TAppUserSum) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tAppUserSumDo) CreateInBatches(values []*model.TAppUserSum, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tAppUserSumDo) Save(values ...*model.TAppUserSum) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tAppUserSumDo) First() (*model.TAppUserSum, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppUserSum), nil
	}
}

func (t tAppUserSumDo) Take() (*model.TAppUserSum, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppUserSum), nil
	}
}

func (t tAppUserSumDo) Last() (*model.TAppUserSum, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppUserSum), nil
	}
}

func (t tAppUserSumDo) Find() ([]*model.TAppUserSum, error) {
	result, err := t.DO.Find()
	return result.([]*model.TAppUserSum), err
}

func (t tAppUserSumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAppUserSum, err error) {
	buf := make([]*model.TAppUserSum, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tAppUserSumDo) FindInBatches(result *[]*model.TAppUserSum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tAppUserSumDo) Attrs(attrs ...field.AssignExpr) *tAppUserSumDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tAppUserSumDo) Assign(attrs ...field.AssignExpr) *tAppUserSumDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tAppUserSumDo) Joins(field field.RelationField) *tAppUserSumDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tAppUserSumDo) Preload(field field.RelationField) *tAppUserSumDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tAppUserSumDo) FirstOrInit() (*model.TAppUserSum, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppUserSum), nil
	}
}

func (t tAppUserSumDo) FirstOrCreate() (*model.TAppUserSum, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppUserSum), nil
	}
}

func (t tAppUserSumDo) FindByPage(offset int, limit int) (result []*model.TAppUserSum, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tAppUserSumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tAppUserSumDo) withDO(do gen.Dao) *tAppUserSumDo {
	t.DO = *do.(*gen.DO)
	return t
}
