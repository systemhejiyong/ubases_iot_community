// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_device/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTIotDeviceTriad(db *gorm.DB) tIotDeviceTriad {
	_tIotDeviceTriad := tIotDeviceTriad{}

	_tIotDeviceTriad.tIotDeviceTriadDo.UseDB(db)
	_tIotDeviceTriad.tIotDeviceTriadDo.UseModel(&model.TIotDeviceTriad{})

	tableName := _tIotDeviceTriad.tIotDeviceTriadDo.TableName()
	_tIotDeviceTriad.ALL = field.NewField(tableName, "*")
	_tIotDeviceTriad.Id = field.NewInt64(tableName, "id")
	_tIotDeviceTriad.TenantId = field.NewString(tableName, "tenant_id")
	_tIotDeviceTriad.SerialNumber = field.NewString(tableName, "serial_number")
	_tIotDeviceTriad.UserId = field.NewInt64(tableName, "user_id")
	_tIotDeviceTriad.Did = field.NewString(tableName, "did")
	_tIotDeviceTriad.ProductKey = field.NewString(tableName, "product_key")
	_tIotDeviceTriad.UserName = field.NewString(tableName, "user_name")
	_tIotDeviceTriad.Passward = field.NewString(tableName, "passward")
	_tIotDeviceTriad.Status = field.NewInt32(tableName, "status")
	_tIotDeviceTriad.Salt = field.NewString(tableName, "salt")
	_tIotDeviceTriad.DeviceSecret = field.NewString(tableName, "device_secret")
	_tIotDeviceTriad.CreatedBy = field.NewInt64(tableName, "created_by")
	_tIotDeviceTriad.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tIotDeviceTriad.CreatedAt = field.NewTime(tableName, "created_at")
	_tIotDeviceTriad.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tIotDeviceTriad.DeletedAt = field.NewField(tableName, "deleted_at")
	_tIotDeviceTriad.UseType = field.NewInt32(tableName, "use_type")
	_tIotDeviceTriad.ProductId = field.NewInt64(tableName, "product_id")
	_tIotDeviceTriad.DeviceNatureKey = field.NewInt32(tableName, "device_nature_key")
	_tIotDeviceTriad.IsTest = field.NewInt32(tableName, "is_test")
	_tIotDeviceTriad.AppName = field.NewString(tableName, "app_name")
	_tIotDeviceTriad.UserAccount = field.NewString(tableName, "user_account")
	_tIotDeviceTriad.BatchId = field.NewInt32(tableName, "batch_id")
	_tIotDeviceTriad.AppKey = field.NewString(tableName, "app_key")
	_tIotDeviceTriad.FirstActiveTime = field.NewTime(tableName, "first_active_time")
	_tIotDeviceTriad.ExportCount = field.NewInt32(tableName, "export_count")
	_tIotDeviceTriad.ExportTime = field.NewTime(tableName, "export_time")

	_tIotDeviceTriad.fillFieldMap()

	return _tIotDeviceTriad
}

type tIotDeviceTriad struct {
	tIotDeviceTriadDo tIotDeviceTriadDo

	ALL             field.Field
	Id              field.Int64
	TenantId        field.String
	SerialNumber    field.String
	UserId          field.Int64
	Did             field.String
	ProductKey      field.String
	UserName        field.String
	Passward        field.String
	Status          field.Int32
	Salt            field.String
	DeviceSecret    field.String
	CreatedBy       field.Int64
	UpdatedBy       field.Int64
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	UseType         field.Int32
	ProductId       field.Int64
	DeviceNatureKey field.Int32
	IsTest          field.Int32
	AppName         field.String
	UserAccount     field.String
	BatchId         field.Int32
	AppKey          field.String
	FirstActiveTime field.Time
	ExportCount     field.Int32
	ExportTime      field.Time

	fieldMap map[string]field.Expr
}

func (t tIotDeviceTriad) Table(newTableName string) *tIotDeviceTriad {
	t.tIotDeviceTriadDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tIotDeviceTriad) As(alias string) *tIotDeviceTriad {
	t.tIotDeviceTriadDo.DO = *(t.tIotDeviceTriadDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tIotDeviceTriad) updateTableName(table string) *tIotDeviceTriad {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.TenantId = field.NewString(table, "tenant_id")
	t.SerialNumber = field.NewString(table, "serial_number")
	t.UserId = field.NewInt64(table, "user_id")
	t.Did = field.NewString(table, "did")
	t.ProductKey = field.NewString(table, "product_key")
	t.UserName = field.NewString(table, "user_name")
	t.Passward = field.NewString(table, "passward")
	t.Status = field.NewInt32(table, "status")
	t.Salt = field.NewString(table, "salt")
	t.DeviceSecret = field.NewString(table, "device_secret")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.UseType = field.NewInt32(table, "use_type")
	t.ProductId = field.NewInt64(table, "product_id")
	t.DeviceNatureKey = field.NewInt32(table, "device_nature_key")
	t.IsTest = field.NewInt32(table, "is_test")
	t.AppName = field.NewString(table, "app_name")
	t.UserAccount = field.NewString(table, "user_account")
	t.BatchId = field.NewInt32(table, "batch_id")
	t.AppKey = field.NewString(table, "app_key")
	t.FirstActiveTime = field.NewTime(table, "first_active_time")
	t.ExportCount = field.NewInt32(table, "export_count")
	t.ExportTime = field.NewTime(table, "export_time")

	t.fillFieldMap()

	return t
}

func (t *tIotDeviceTriad) WithContext(ctx context.Context) *tIotDeviceTriadDo {
	return t.tIotDeviceTriadDo.WithContext(ctx)
}

func (t tIotDeviceTriad) TableName() string { return t.tIotDeviceTriadDo.TableName() }

func (t tIotDeviceTriad) Alias() string { return t.tIotDeviceTriadDo.Alias() }

func (t *tIotDeviceTriad) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tIotDeviceTriad) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 27)
	t.fieldMap["id"] = t.Id
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["serial_number"] = t.SerialNumber
	t.fieldMap["user_id"] = t.UserId
	t.fieldMap["did"] = t.Did
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["user_name"] = t.UserName
	t.fieldMap["passward"] = t.Passward
	t.fieldMap["status"] = t.Status
	t.fieldMap["salt"] = t.Salt
	t.fieldMap["device_secret"] = t.DeviceSecret
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["use_type"] = t.UseType
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["device_nature_key"] = t.DeviceNatureKey
	t.fieldMap["is_test"] = t.IsTest
	t.fieldMap["app_name"] = t.AppName
	t.fieldMap["user_account"] = t.UserAccount
	t.fieldMap["batch_id"] = t.BatchId
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["first_active_time"] = t.FirstActiveTime
	t.fieldMap["export_count"] = t.ExportCount
	t.fieldMap["export_time"] = t.ExportTime
}

func (t tIotDeviceTriad) clone(db *gorm.DB) tIotDeviceTriad {
	t.tIotDeviceTriadDo.ReplaceDB(db)
	return t
}

type tIotDeviceTriadDo struct{ gen.DO }

func (t tIotDeviceTriadDo) Debug() *tIotDeviceTriadDo {
	return t.withDO(t.DO.Debug())
}

func (t tIotDeviceTriadDo) WithContext(ctx context.Context) *tIotDeviceTriadDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tIotDeviceTriadDo) Clauses(conds ...clause.Expression) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tIotDeviceTriadDo) Returning(value interface{}, columns ...string) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tIotDeviceTriadDo) Not(conds ...gen.Condition) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tIotDeviceTriadDo) Or(conds ...gen.Condition) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tIotDeviceTriadDo) Select(conds ...field.Expr) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tIotDeviceTriadDo) Where(conds ...gen.Condition) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tIotDeviceTriadDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tIotDeviceTriadDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tIotDeviceTriadDo) Order(conds ...field.Expr) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tIotDeviceTriadDo) Distinct(cols ...field.Expr) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tIotDeviceTriadDo) Omit(cols ...field.Expr) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tIotDeviceTriadDo) Join(table schema.Tabler, on ...field.Expr) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tIotDeviceTriadDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tIotDeviceTriadDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tIotDeviceTriadDo) RightJoin(table schema.Tabler, on ...field.Expr) *tIotDeviceTriadDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tIotDeviceTriadDo) Group(cols ...field.Expr) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tIotDeviceTriadDo) Having(conds ...gen.Condition) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tIotDeviceTriadDo) Limit(limit int) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tIotDeviceTriadDo) Offset(offset int) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tIotDeviceTriadDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tIotDeviceTriadDo) Unscoped() *tIotDeviceTriadDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tIotDeviceTriadDo) Create(values ...*model.TIotDeviceTriad) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tIotDeviceTriadDo) CreateInBatches(values []*model.TIotDeviceTriad, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tIotDeviceTriadDo) Save(values ...*model.TIotDeviceTriad) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tIotDeviceTriadDo) First() (*model.TIotDeviceTriad, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceTriad), nil
	}
}

func (t tIotDeviceTriadDo) Take() (*model.TIotDeviceTriad, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceTriad), nil
	}
}

func (t tIotDeviceTriadDo) Last() (*model.TIotDeviceTriad, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceTriad), nil
	}
}

func (t tIotDeviceTriadDo) Find() ([]*model.TIotDeviceTriad, error) {
	result, err := t.DO.Find()
	return result.([]*model.TIotDeviceTriad), err
}

func (t tIotDeviceTriadDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TIotDeviceTriad, err error) {
	buf := make([]*model.TIotDeviceTriad, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tIotDeviceTriadDo) FindInBatches(result *[]*model.TIotDeviceTriad, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tIotDeviceTriadDo) Attrs(attrs ...field.AssignExpr) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tIotDeviceTriadDo) Assign(attrs ...field.AssignExpr) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tIotDeviceTriadDo) Joins(field field.RelationField) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tIotDeviceTriadDo) Preload(field field.RelationField) *tIotDeviceTriadDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tIotDeviceTriadDo) FirstOrInit() (*model.TIotDeviceTriad, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceTriad), nil
	}
}

func (t tIotDeviceTriadDo) FirstOrCreate() (*model.TIotDeviceTriad, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceTriad), nil
	}
}

func (t tIotDeviceTriadDo) FindByPage(offset int, limit int) (result []*model.TIotDeviceTriad, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tIotDeviceTriadDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tIotDeviceTriadDo) withDO(do gen.Dao) *tIotDeviceTriadDo {
	t.DO = *do.(*gen.DO)
	return t
}
