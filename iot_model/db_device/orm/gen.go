// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                           db,
		TIotDeviceCountdown:          newTIotDeviceCountdown(db),
		TIotDeviceFault:              newTIotDeviceFault(db),
		TIotDeviceFunctionSet:        newTIotDeviceFunctionSet(db),
		TIotDeviceGroup:              newTIotDeviceGroup(db),
		TIotDeviceGroupList:          newTIotDeviceGroupList(db),
		TIotDeviceHome:               newTIotDeviceHome(db),
		TIotDeviceInfo:               newTIotDeviceInfo(db),
		TIotDeviceLog:                newTIotDeviceLog(db),
		TIotDeviceOperationFailLog:   newTIotDeviceOperationFailLog(db),
		TIotDeviceShareReceive:       newTIotDeviceShareReceive(db),
		TIotDeviceShared:             newTIotDeviceShared(db),
		TIotDeviceTimer:              newTIotDeviceTimer(db),
		TIotDeviceTriad:              newTIotDeviceTriad(db),
		TIotJob:                      newTIotJob(db),
		TIotOtaPkg:                   newTIotOtaPkg(db),
		TIotOtaVersion:               newTIotOtaVersion(db),
		TIotOtaVersionPublish:        newTIotOtaVersionPublish(db),
		TIotOtaVersionVerify:         newTIotOtaVersionVerify(db),
		TIotOtaWhite:                 newTIotOtaWhite(db),
		TIotOtaWhiteGroup:            newTIotOtaWhiteGroup(db),
		TSceneIntelligence:           newTSceneIntelligence(db),
		TSceneIntelligenceCondition:  newTSceneIntelligenceCondition(db),
		TSceneIntelligenceLog:        newTSceneIntelligenceLog(db),
		TSceneIntelligenceResult:     newTSceneIntelligenceResult(db),
		TSceneIntelligenceResultTask: newTSceneIntelligenceResultTask(db),
		TSceneIntelligenceTask:       newTSceneIntelligenceTask(db),
		TSceneTemplate:               newTSceneTemplate(db),
		TSceneTemplateAppRelation:    newTSceneTemplateAppRelation(db),
		TSceneTemplateCondition:      newTSceneTemplateCondition(db),
		TSceneTemplateTask:           newTSceneTemplateTask(db),
	}
}

type Query struct {
	db *gorm.DB

	TIotDeviceCountdown          tIotDeviceCountdown
	TIotDeviceFault              tIotDeviceFault
	TIotDeviceFunctionSet        tIotDeviceFunctionSet
	TIotDeviceGroup              tIotDeviceGroup
	TIotDeviceGroupList          tIotDeviceGroupList
	TIotDeviceHome               tIotDeviceHome
	TIotDeviceInfo               tIotDeviceInfo
	TIotDeviceLog                tIotDeviceLog
	TIotDeviceOperationFailLog   tIotDeviceOperationFailLog
	TIotDeviceShareReceive       tIotDeviceShareReceive
	TIotDeviceShared             tIotDeviceShared
	TIotDeviceTimer              tIotDeviceTimer
	TIotDeviceTriad              tIotDeviceTriad
	TIotJob                      tIotJob
	TIotOtaPkg                   tIotOtaPkg
	TIotOtaVersion               tIotOtaVersion
	TIotOtaVersionPublish        tIotOtaVersionPublish
	TIotOtaVersionVerify         tIotOtaVersionVerify
	TIotOtaWhite                 tIotOtaWhite
	TIotOtaWhiteGroup            tIotOtaWhiteGroup
	TSceneIntelligence           tSceneIntelligence
	TSceneIntelligenceCondition  tSceneIntelligenceCondition
	TSceneIntelligenceLog        tSceneIntelligenceLog
	TSceneIntelligenceResult     tSceneIntelligenceResult
	TSceneIntelligenceResultTask tSceneIntelligenceResultTask
	TSceneIntelligenceTask       tSceneIntelligenceTask
	TSceneTemplate               tSceneTemplate
	TSceneTemplateAppRelation    tSceneTemplateAppRelation
	TSceneTemplateCondition      tSceneTemplateCondition
	TSceneTemplateTask           tSceneTemplateTask
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                           db,
		TIotDeviceCountdown:          q.TIotDeviceCountdown.clone(db),
		TIotDeviceFault:              q.TIotDeviceFault.clone(db),
		TIotDeviceFunctionSet:        q.TIotDeviceFunctionSet.clone(db),
		TIotDeviceGroup:              q.TIotDeviceGroup.clone(db),
		TIotDeviceGroupList:          q.TIotDeviceGroupList.clone(db),
		TIotDeviceHome:               q.TIotDeviceHome.clone(db),
		TIotDeviceInfo:               q.TIotDeviceInfo.clone(db),
		TIotDeviceLog:                q.TIotDeviceLog.clone(db),
		TIotDeviceOperationFailLog:   q.TIotDeviceOperationFailLog.clone(db),
		TIotDeviceShareReceive:       q.TIotDeviceShareReceive.clone(db),
		TIotDeviceShared:             q.TIotDeviceShared.clone(db),
		TIotDeviceTimer:              q.TIotDeviceTimer.clone(db),
		TIotDeviceTriad:              q.TIotDeviceTriad.clone(db),
		TIotJob:                      q.TIotJob.clone(db),
		TIotOtaPkg:                   q.TIotOtaPkg.clone(db),
		TIotOtaVersion:               q.TIotOtaVersion.clone(db),
		TIotOtaVersionPublish:        q.TIotOtaVersionPublish.clone(db),
		TIotOtaVersionVerify:         q.TIotOtaVersionVerify.clone(db),
		TIotOtaWhite:                 q.TIotOtaWhite.clone(db),
		TIotOtaWhiteGroup:            q.TIotOtaWhiteGroup.clone(db),
		TSceneIntelligence:           q.TSceneIntelligence.clone(db),
		TSceneIntelligenceCondition:  q.TSceneIntelligenceCondition.clone(db),
		TSceneIntelligenceLog:        q.TSceneIntelligenceLog.clone(db),
		TSceneIntelligenceResult:     q.TSceneIntelligenceResult.clone(db),
		TSceneIntelligenceResultTask: q.TSceneIntelligenceResultTask.clone(db),
		TSceneIntelligenceTask:       q.TSceneIntelligenceTask.clone(db),
		TSceneTemplate:               q.TSceneTemplate.clone(db),
		TSceneTemplateAppRelation:    q.TSceneTemplateAppRelation.clone(db),
		TSceneTemplateCondition:      q.TSceneTemplateCondition.clone(db),
		TSceneTemplateTask:           q.TSceneTemplateTask.clone(db),
	}
}

type queryCtx struct {
	TIotDeviceCountdown          tIotDeviceCountdownDo
	TIotDeviceFault              tIotDeviceFaultDo
	TIotDeviceFunctionSet        tIotDeviceFunctionSetDo
	TIotDeviceGroup              tIotDeviceGroupDo
	TIotDeviceGroupList          tIotDeviceGroupListDo
	TIotDeviceHome               tIotDeviceHomeDo
	TIotDeviceInfo               tIotDeviceInfoDo
	TIotDeviceLog                tIotDeviceLogDo
	TIotDeviceOperationFailLog   tIotDeviceOperationFailLogDo
	TIotDeviceShareReceive       tIotDeviceShareReceiveDo
	TIotDeviceShared             tIotDeviceSharedDo
	TIotDeviceTimer              tIotDeviceTimerDo
	TIotDeviceTriad              tIotDeviceTriadDo
	TIotJob                      tIotJobDo
	TIotOtaPkg                   tIotOtaPkgDo
	TIotOtaVersion               tIotOtaVersionDo
	TIotOtaVersionPublish        tIotOtaVersionPublishDo
	TIotOtaVersionVerify         tIotOtaVersionVerifyDo
	TIotOtaWhite                 tIotOtaWhiteDo
	TIotOtaWhiteGroup            tIotOtaWhiteGroupDo
	TSceneIntelligence           tSceneIntelligenceDo
	TSceneIntelligenceCondition  tSceneIntelligenceConditionDo
	TSceneIntelligenceLog        tSceneIntelligenceLogDo
	TSceneIntelligenceResult     tSceneIntelligenceResultDo
	TSceneIntelligenceResultTask tSceneIntelligenceResultTaskDo
	TSceneIntelligenceTask       tSceneIntelligenceTaskDo
	TSceneTemplate               tSceneTemplateDo
	TSceneTemplateAppRelation    tSceneTemplateAppRelationDo
	TSceneTemplateCondition      tSceneTemplateConditionDo
	TSceneTemplateTask           tSceneTemplateTaskDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		TIotDeviceCountdown:          *q.TIotDeviceCountdown.WithContext(ctx),
		TIotDeviceFault:              *q.TIotDeviceFault.WithContext(ctx),
		TIotDeviceFunctionSet:        *q.TIotDeviceFunctionSet.WithContext(ctx),
		TIotDeviceGroup:              *q.TIotDeviceGroup.WithContext(ctx),
		TIotDeviceGroupList:          *q.TIotDeviceGroupList.WithContext(ctx),
		TIotDeviceHome:               *q.TIotDeviceHome.WithContext(ctx),
		TIotDeviceInfo:               *q.TIotDeviceInfo.WithContext(ctx),
		TIotDeviceLog:                *q.TIotDeviceLog.WithContext(ctx),
		TIotDeviceOperationFailLog:   *q.TIotDeviceOperationFailLog.WithContext(ctx),
		TIotDeviceShareReceive:       *q.TIotDeviceShareReceive.WithContext(ctx),
		TIotDeviceShared:             *q.TIotDeviceShared.WithContext(ctx),
		TIotDeviceTimer:              *q.TIotDeviceTimer.WithContext(ctx),
		TIotDeviceTriad:              *q.TIotDeviceTriad.WithContext(ctx),
		TIotJob:                      *q.TIotJob.WithContext(ctx),
		TIotOtaPkg:                   *q.TIotOtaPkg.WithContext(ctx),
		TIotOtaVersion:               *q.TIotOtaVersion.WithContext(ctx),
		TIotOtaVersionPublish:        *q.TIotOtaVersionPublish.WithContext(ctx),
		TIotOtaVersionVerify:         *q.TIotOtaVersionVerify.WithContext(ctx),
		TIotOtaWhite:                 *q.TIotOtaWhite.WithContext(ctx),
		TIotOtaWhiteGroup:            *q.TIotOtaWhiteGroup.WithContext(ctx),
		TSceneIntelligence:           *q.TSceneIntelligence.WithContext(ctx),
		TSceneIntelligenceCondition:  *q.TSceneIntelligenceCondition.WithContext(ctx),
		TSceneIntelligenceLog:        *q.TSceneIntelligenceLog.WithContext(ctx),
		TSceneIntelligenceResult:     *q.TSceneIntelligenceResult.WithContext(ctx),
		TSceneIntelligenceResultTask: *q.TSceneIntelligenceResultTask.WithContext(ctx),
		TSceneIntelligenceTask:       *q.TSceneIntelligenceTask.WithContext(ctx),
		TSceneTemplate:               *q.TSceneTemplate.WithContext(ctx),
		TSceneTemplateAppRelation:    *q.TSceneTemplateAppRelation.WithContext(ctx),
		TSceneTemplateCondition:      *q.TSceneTemplateCondition.WithContext(ctx),
		TSceneTemplateTask:           *q.TSceneTemplateTask.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
