// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_device/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTIotOtaVersion(db *gorm.DB) tIotOtaVersion {
	_tIotOtaVersion := tIotOtaVersion{}

	_tIotOtaVersion.tIotOtaVersionDo.UseDB(db)
	_tIotOtaVersion.tIotOtaVersionDo.UseModel(&model.TIotOtaVersion{})

	tableName := _tIotOtaVersion.tIotOtaVersionDo.TableName()
	_tIotOtaVersion.ALL = field.NewField(tableName, "*")
	_tIotOtaVersion.Id = field.NewInt64(tableName, "id")
	_tIotOtaVersion.DeviceVersion = field.NewString(tableName, "device_version")
	_tIotOtaVersion.McuPkgId = field.NewInt64(tableName, "mcu_pkg_id")
	_tIotOtaVersion.EcuPkgId = field.NewInt64(tableName, "ecu_pkg_id")
	_tIotOtaVersion.UpgradeMode = field.NewInt32(tableName, "upgrade_mode")
	_tIotOtaVersion.Status = field.NewInt32(tableName, "status")
	_tIotOtaVersion.CreatedBy = field.NewInt64(tableName, "created_by")
	_tIotOtaVersion.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tIotOtaVersion.CreatedAt = field.NewTime(tableName, "created_at")
	_tIotOtaVersion.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tIotOtaVersion.DeletedAt = field.NewField(tableName, "deleted_at")

	_tIotOtaVersion.fillFieldMap()

	return _tIotOtaVersion
}

type tIotOtaVersion struct {
	tIotOtaVersionDo tIotOtaVersionDo

	ALL           field.Field
	Id            field.Int64
	DeviceVersion field.String
	McuPkgId      field.Int64
	EcuPkgId      field.Int64
	UpgradeMode   field.Int32
	Status        field.Int32
	CreatedBy     field.Int64
	UpdatedBy     field.Int64
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field

	fieldMap map[string]field.Expr
}

func (t tIotOtaVersion) Table(newTableName string) *tIotOtaVersion {
	t.tIotOtaVersionDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tIotOtaVersion) As(alias string) *tIotOtaVersion {
	t.tIotOtaVersionDo.DO = *(t.tIotOtaVersionDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tIotOtaVersion) updateTableName(table string) *tIotOtaVersion {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.DeviceVersion = field.NewString(table, "device_version")
	t.McuPkgId = field.NewInt64(table, "mcu_pkg_id")
	t.EcuPkgId = field.NewInt64(table, "ecu_pkg_id")
	t.UpgradeMode = field.NewInt32(table, "upgrade_mode")
	t.Status = field.NewInt32(table, "status")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tIotOtaVersion) WithContext(ctx context.Context) *tIotOtaVersionDo {
	return t.tIotOtaVersionDo.WithContext(ctx)
}

func (t tIotOtaVersion) TableName() string { return t.tIotOtaVersionDo.TableName() }

func (t tIotOtaVersion) Alias() string { return t.tIotOtaVersionDo.Alias() }

func (t *tIotOtaVersion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tIotOtaVersion) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.Id
	t.fieldMap["device_version"] = t.DeviceVersion
	t.fieldMap["mcu_pkg_id"] = t.McuPkgId
	t.fieldMap["ecu_pkg_id"] = t.EcuPkgId
	t.fieldMap["upgrade_mode"] = t.UpgradeMode
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tIotOtaVersion) clone(db *gorm.DB) tIotOtaVersion {
	t.tIotOtaVersionDo.ReplaceDB(db)
	return t
}

type tIotOtaVersionDo struct{ gen.DO }

func (t tIotOtaVersionDo) Debug() *tIotOtaVersionDo {
	return t.withDO(t.DO.Debug())
}

func (t tIotOtaVersionDo) WithContext(ctx context.Context) *tIotOtaVersionDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tIotOtaVersionDo) Clauses(conds ...clause.Expression) *tIotOtaVersionDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tIotOtaVersionDo) Returning(value interface{}, columns ...string) *tIotOtaVersionDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tIotOtaVersionDo) Not(conds ...gen.Condition) *tIotOtaVersionDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tIotOtaVersionDo) Or(conds ...gen.Condition) *tIotOtaVersionDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tIotOtaVersionDo) Select(conds ...field.Expr) *tIotOtaVersionDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tIotOtaVersionDo) Where(conds ...gen.Condition) *tIotOtaVersionDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tIotOtaVersionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tIotOtaVersionDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tIotOtaVersionDo) Order(conds ...field.Expr) *tIotOtaVersionDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tIotOtaVersionDo) Distinct(cols ...field.Expr) *tIotOtaVersionDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tIotOtaVersionDo) Omit(cols ...field.Expr) *tIotOtaVersionDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tIotOtaVersionDo) Join(table schema.Tabler, on ...field.Expr) *tIotOtaVersionDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tIotOtaVersionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tIotOtaVersionDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tIotOtaVersionDo) RightJoin(table schema.Tabler, on ...field.Expr) *tIotOtaVersionDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tIotOtaVersionDo) Group(cols ...field.Expr) *tIotOtaVersionDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tIotOtaVersionDo) Having(conds ...gen.Condition) *tIotOtaVersionDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tIotOtaVersionDo) Limit(limit int) *tIotOtaVersionDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tIotOtaVersionDo) Offset(offset int) *tIotOtaVersionDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tIotOtaVersionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tIotOtaVersionDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tIotOtaVersionDo) Unscoped() *tIotOtaVersionDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tIotOtaVersionDo) Create(values ...*model.TIotOtaVersion) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tIotOtaVersionDo) CreateInBatches(values []*model.TIotOtaVersion, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tIotOtaVersionDo) Save(values ...*model.TIotOtaVersion) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tIotOtaVersionDo) First() (*model.TIotOtaVersion, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotOtaVersion), nil
	}
}

func (t tIotOtaVersionDo) Take() (*model.TIotOtaVersion, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotOtaVersion), nil
	}
}

func (t tIotOtaVersionDo) Last() (*model.TIotOtaVersion, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotOtaVersion), nil
	}
}

func (t tIotOtaVersionDo) Find() ([]*model.TIotOtaVersion, error) {
	result, err := t.DO.Find()
	return result.([]*model.TIotOtaVersion), err
}

func (t tIotOtaVersionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TIotOtaVersion, err error) {
	buf := make([]*model.TIotOtaVersion, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tIotOtaVersionDo) FindInBatches(result *[]*model.TIotOtaVersion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tIotOtaVersionDo) Attrs(attrs ...field.AssignExpr) *tIotOtaVersionDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tIotOtaVersionDo) Assign(attrs ...field.AssignExpr) *tIotOtaVersionDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tIotOtaVersionDo) Joins(field field.RelationField) *tIotOtaVersionDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tIotOtaVersionDo) Preload(field field.RelationField) *tIotOtaVersionDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tIotOtaVersionDo) FirstOrInit() (*model.TIotOtaVersion, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotOtaVersion), nil
	}
}

func (t tIotOtaVersionDo) FirstOrCreate() (*model.TIotOtaVersion, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotOtaVersion), nil
	}
}

func (t tIotOtaVersionDo) FindByPage(offset int, limit int) (result []*model.TIotOtaVersion, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tIotOtaVersionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tIotOtaVersionDo) withDO(do gen.Dao) *tIotOtaVersionDo {
	t.DO = *do.(*gen.DO)
	return t
}
