// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_device/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTIotOtaWhite(db *gorm.DB) tIotOtaWhite {
	_tIotOtaWhite := tIotOtaWhite{}

	_tIotOtaWhite.tIotOtaWhiteDo.UseDB(db)
	_tIotOtaWhite.tIotOtaWhiteDo.UseModel(&model.TIotOtaWhite{})

	tableName := _tIotOtaWhite.tIotOtaWhiteDo.TableName()
	_tIotOtaWhite.ALL = field.NewField(tableName, "*")
	_tIotOtaWhite.Id = field.NewInt64(tableName, "id")
	_tIotOtaWhite.PkgId = field.NewInt64(tableName, "pkg_id")
	_tIotOtaWhite.ProductId = field.NewInt64(tableName, "product_id")
	_tIotOtaWhite.GroupId = field.NewInt64(tableName, "group_id")
	_tIotOtaWhite.Did = field.NewString(tableName, "did")
	_tIotOtaWhite.DeviceId = field.NewInt64(tableName, "device_id")
	_tIotOtaWhite.BelongType = field.NewString(tableName, "belong_type")
	_tIotOtaWhite.BelongId = field.NewInt64(tableName, "belong_id")
	_tIotOtaWhite.CreatedBy = field.NewInt64(tableName, "created_by")
	_tIotOtaWhite.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tIotOtaWhite.CreatedAt = field.NewTime(tableName, "created_at")
	_tIotOtaWhite.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tIotOtaWhite.DeletedAt = field.NewField(tableName, "deleted_at")

	_tIotOtaWhite.fillFieldMap()

	return _tIotOtaWhite
}

type tIotOtaWhite struct {
	tIotOtaWhiteDo tIotOtaWhiteDo

	ALL        field.Field
	Id         field.Int64
	PkgId      field.Int64
	ProductId  field.Int64
	GroupId    field.Int64
	Did        field.String
	DeviceId   field.Int64
	BelongType field.String
	BelongId   field.Int64
	CreatedBy  field.Int64
	UpdatedBy  field.Int64
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field

	fieldMap map[string]field.Expr
}

func (t tIotOtaWhite) Table(newTableName string) *tIotOtaWhite {
	t.tIotOtaWhiteDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tIotOtaWhite) As(alias string) *tIotOtaWhite {
	t.tIotOtaWhiteDo.DO = *(t.tIotOtaWhiteDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tIotOtaWhite) updateTableName(table string) *tIotOtaWhite {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.PkgId = field.NewInt64(table, "pkg_id")
	t.ProductId = field.NewInt64(table, "product_id")
	t.GroupId = field.NewInt64(table, "group_id")
	t.Did = field.NewString(table, "did")
	t.DeviceId = field.NewInt64(table, "device_id")
	t.BelongType = field.NewString(table, "belong_type")
	t.BelongId = field.NewInt64(table, "belong_id")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tIotOtaWhite) WithContext(ctx context.Context) *tIotOtaWhiteDo {
	return t.tIotOtaWhiteDo.WithContext(ctx)
}

func (t tIotOtaWhite) TableName() string { return t.tIotOtaWhiteDo.TableName() }

func (t tIotOtaWhite) Alias() string { return t.tIotOtaWhiteDo.Alias() }

func (t *tIotOtaWhite) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tIotOtaWhite) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.Id
	t.fieldMap["pkg_id"] = t.PkgId
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["group_id"] = t.GroupId
	t.fieldMap["did"] = t.Did
	t.fieldMap["device_id"] = t.DeviceId
	t.fieldMap["belong_type"] = t.BelongType
	t.fieldMap["belong_id"] = t.BelongId
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tIotOtaWhite) clone(db *gorm.DB) tIotOtaWhite {
	t.tIotOtaWhiteDo.ReplaceDB(db)
	return t
}

type tIotOtaWhiteDo struct{ gen.DO }

func (t tIotOtaWhiteDo) Debug() *tIotOtaWhiteDo {
	return t.withDO(t.DO.Debug())
}

func (t tIotOtaWhiteDo) WithContext(ctx context.Context) *tIotOtaWhiteDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tIotOtaWhiteDo) Clauses(conds ...clause.Expression) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tIotOtaWhiteDo) Returning(value interface{}, columns ...string) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tIotOtaWhiteDo) Not(conds ...gen.Condition) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tIotOtaWhiteDo) Or(conds ...gen.Condition) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tIotOtaWhiteDo) Select(conds ...field.Expr) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tIotOtaWhiteDo) Where(conds ...gen.Condition) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tIotOtaWhiteDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tIotOtaWhiteDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tIotOtaWhiteDo) Order(conds ...field.Expr) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tIotOtaWhiteDo) Distinct(cols ...field.Expr) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tIotOtaWhiteDo) Omit(cols ...field.Expr) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tIotOtaWhiteDo) Join(table schema.Tabler, on ...field.Expr) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tIotOtaWhiteDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tIotOtaWhiteDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tIotOtaWhiteDo) RightJoin(table schema.Tabler, on ...field.Expr) *tIotOtaWhiteDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tIotOtaWhiteDo) Group(cols ...field.Expr) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tIotOtaWhiteDo) Having(conds ...gen.Condition) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tIotOtaWhiteDo) Limit(limit int) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tIotOtaWhiteDo) Offset(offset int) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tIotOtaWhiteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tIotOtaWhiteDo) Unscoped() *tIotOtaWhiteDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tIotOtaWhiteDo) Create(values ...*model.TIotOtaWhite) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tIotOtaWhiteDo) CreateInBatches(values []*model.TIotOtaWhite, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tIotOtaWhiteDo) Save(values ...*model.TIotOtaWhite) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tIotOtaWhiteDo) First() (*model.TIotOtaWhite, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotOtaWhite), nil
	}
}

func (t tIotOtaWhiteDo) Take() (*model.TIotOtaWhite, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotOtaWhite), nil
	}
}

func (t tIotOtaWhiteDo) Last() (*model.TIotOtaWhite, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotOtaWhite), nil
	}
}

func (t tIotOtaWhiteDo) Find() ([]*model.TIotOtaWhite, error) {
	result, err := t.DO.Find()
	return result.([]*model.TIotOtaWhite), err
}

func (t tIotOtaWhiteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TIotOtaWhite, err error) {
	buf := make([]*model.TIotOtaWhite, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tIotOtaWhiteDo) FindInBatches(result *[]*model.TIotOtaWhite, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tIotOtaWhiteDo) Attrs(attrs ...field.AssignExpr) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tIotOtaWhiteDo) Assign(attrs ...field.AssignExpr) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tIotOtaWhiteDo) Joins(field field.RelationField) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tIotOtaWhiteDo) Preload(field field.RelationField) *tIotOtaWhiteDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tIotOtaWhiteDo) FirstOrInit() (*model.TIotOtaWhite, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotOtaWhite), nil
	}
}

func (t tIotOtaWhiteDo) FirstOrCreate() (*model.TIotOtaWhite, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotOtaWhite), nil
	}
}

func (t tIotOtaWhiteDo) FindByPage(offset int, limit int) (result []*model.TIotOtaWhite, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tIotOtaWhiteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tIotOtaWhiteDo) withDO(do gen.Dao) *tIotOtaWhiteDo {
	t.DO = *do.(*gen.DO)
	return t
}
