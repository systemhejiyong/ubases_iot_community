// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_device/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTSceneTemplateCondition(db *gorm.DB) tSceneTemplateCondition {
	_tSceneTemplateCondition := tSceneTemplateCondition{}

	_tSceneTemplateCondition.tSceneTemplateConditionDo.UseDB(db)
	_tSceneTemplateCondition.tSceneTemplateConditionDo.UseModel(&model.TSceneTemplateCondition{})

	tableName := _tSceneTemplateCondition.tSceneTemplateConditionDo.TableName()
	_tSceneTemplateCondition.ALL = field.NewField(tableName, "*")
	_tSceneTemplateCondition.Id = field.NewInt64(tableName, "id")
	_tSceneTemplateCondition.SceneTemplateId = field.NewInt64(tableName, "scene_template_id")
	_tSceneTemplateCondition.ConditionType = field.NewInt32(tableName, "condition_type")
	_tSceneTemplateCondition.Desc = field.NewString(tableName, "desc")
	_tSceneTemplateCondition.WeatherType = field.NewInt32(tableName, "weather_type")
	_tSceneTemplateCondition.WeatherValue = field.NewString(tableName, "weather_value")
	_tSceneTemplateCondition.WeatherCompare = field.NewInt32(tableName, "weather_compare")
	_tSceneTemplateCondition.TimerWeeks = field.NewString(tableName, "timer_weeks")
	_tSceneTemplateCondition.TimerValue = field.NewString(tableName, "timer_value")
	_tSceneTemplateCondition.ProductId = field.NewInt64(tableName, "product_id")
	_tSceneTemplateCondition.ProductKey = field.NewString(tableName, "product_key")
	_tSceneTemplateCondition.Functions = field.NewString(tableName, "functions")
	_tSceneTemplateCondition.FuncKey = field.NewString(tableName, "func_key")
	_tSceneTemplateCondition.FuncCompare = field.NewInt32(tableName, "func_compare")
	_tSceneTemplateCondition.FuncValue = field.NewString(tableName, "func_value")
	_tSceneTemplateCondition.Sort = field.NewInt32(tableName, "sort")
	_tSceneTemplateCondition.CreatedBy = field.NewInt64(tableName, "created_by")
	_tSceneTemplateCondition.CreatedAt = field.NewTime(tableName, "created_at")
	_tSceneTemplateCondition.FuncDesc = field.NewString(tableName, "func_desc")
	_tSceneTemplateCondition.FuncIdentifier = field.NewString(tableName, "func_identifier")

	_tSceneTemplateCondition.fillFieldMap()

	return _tSceneTemplateCondition
}

type tSceneTemplateCondition struct {
	tSceneTemplateConditionDo tSceneTemplateConditionDo

	ALL             field.Field
	Id              field.Int64
	SceneTemplateId field.Int64
	ConditionType   field.Int32
	Desc            field.String
	WeatherType     field.Int32
	WeatherValue    field.String
	WeatherCompare  field.Int32
	TimerWeeks      field.String
	TimerValue      field.String
	ProductId       field.Int64
	ProductKey      field.String
	Functions       field.String
	FuncKey         field.String
	FuncCompare     field.Int32
	FuncValue       field.String
	Sort            field.Int32
	CreatedBy       field.Int64
	CreatedAt       field.Time
	FuncDesc        field.String
	FuncIdentifier  field.String

	fieldMap map[string]field.Expr
}

func (t tSceneTemplateCondition) Table(newTableName string) *tSceneTemplateCondition {
	t.tSceneTemplateConditionDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSceneTemplateCondition) As(alias string) *tSceneTemplateCondition {
	t.tSceneTemplateConditionDo.DO = *(t.tSceneTemplateConditionDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSceneTemplateCondition) updateTableName(table string) *tSceneTemplateCondition {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.SceneTemplateId = field.NewInt64(table, "scene_template_id")
	t.ConditionType = field.NewInt32(table, "condition_type")
	t.Desc = field.NewString(table, "desc")
	t.WeatherType = field.NewInt32(table, "weather_type")
	t.WeatherValue = field.NewString(table, "weather_value")
	t.WeatherCompare = field.NewInt32(table, "weather_compare")
	t.TimerWeeks = field.NewString(table, "timer_weeks")
	t.TimerValue = field.NewString(table, "timer_value")
	t.ProductId = field.NewInt64(table, "product_id")
	t.ProductKey = field.NewString(table, "product_key")
	t.Functions = field.NewString(table, "functions")
	t.FuncKey = field.NewString(table, "func_key")
	t.FuncCompare = field.NewInt32(table, "func_compare")
	t.FuncValue = field.NewString(table, "func_value")
	t.Sort = field.NewInt32(table, "sort")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.FuncDesc = field.NewString(table, "func_desc")
	t.FuncIdentifier = field.NewString(table, "func_identifier")

	t.fillFieldMap()

	return t
}

func (t *tSceneTemplateCondition) WithContext(ctx context.Context) *tSceneTemplateConditionDo {
	return t.tSceneTemplateConditionDo.WithContext(ctx)
}

func (t tSceneTemplateCondition) TableName() string { return t.tSceneTemplateConditionDo.TableName() }

func (t tSceneTemplateCondition) Alias() string { return t.tSceneTemplateConditionDo.Alias() }

func (t *tSceneTemplateCondition) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSceneTemplateCondition) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 20)
	t.fieldMap["id"] = t.Id
	t.fieldMap["scene_template_id"] = t.SceneTemplateId
	t.fieldMap["condition_type"] = t.ConditionType
	t.fieldMap["desc"] = t.Desc
	t.fieldMap["weather_type"] = t.WeatherType
	t.fieldMap["weather_value"] = t.WeatherValue
	t.fieldMap["weather_compare"] = t.WeatherCompare
	t.fieldMap["timer_weeks"] = t.TimerWeeks
	t.fieldMap["timer_value"] = t.TimerValue
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["functions"] = t.Functions
	t.fieldMap["func_key"] = t.FuncKey
	t.fieldMap["func_compare"] = t.FuncCompare
	t.fieldMap["func_value"] = t.FuncValue
	t.fieldMap["sort"] = t.Sort
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["func_desc"] = t.FuncDesc
	t.fieldMap["func_identifier"] = t.FuncIdentifier
}

func (t tSceneTemplateCondition) clone(db *gorm.DB) tSceneTemplateCondition {
	t.tSceneTemplateConditionDo.ReplaceDB(db)
	return t
}

type tSceneTemplateConditionDo struct{ gen.DO }

func (t tSceneTemplateConditionDo) Debug() *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Debug())
}

func (t tSceneTemplateConditionDo) WithContext(ctx context.Context) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSceneTemplateConditionDo) Clauses(conds ...clause.Expression) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSceneTemplateConditionDo) Returning(value interface{}, columns ...string) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSceneTemplateConditionDo) Not(conds ...gen.Condition) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSceneTemplateConditionDo) Or(conds ...gen.Condition) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSceneTemplateConditionDo) Select(conds ...field.Expr) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSceneTemplateConditionDo) Where(conds ...gen.Condition) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSceneTemplateConditionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tSceneTemplateConditionDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tSceneTemplateConditionDo) Order(conds ...field.Expr) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSceneTemplateConditionDo) Distinct(cols ...field.Expr) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSceneTemplateConditionDo) Omit(cols ...field.Expr) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSceneTemplateConditionDo) Join(table schema.Tabler, on ...field.Expr) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSceneTemplateConditionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSceneTemplateConditionDo) RightJoin(table schema.Tabler, on ...field.Expr) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSceneTemplateConditionDo) Group(cols ...field.Expr) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSceneTemplateConditionDo) Having(conds ...gen.Condition) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSceneTemplateConditionDo) Limit(limit int) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSceneTemplateConditionDo) Offset(offset int) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSceneTemplateConditionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSceneTemplateConditionDo) Unscoped() *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSceneTemplateConditionDo) Create(values ...*model.TSceneTemplateCondition) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSceneTemplateConditionDo) CreateInBatches(values []*model.TSceneTemplateCondition, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSceneTemplateConditionDo) Save(values ...*model.TSceneTemplateCondition) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSceneTemplateConditionDo) First() (*model.TSceneTemplateCondition, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneTemplateCondition), nil
	}
}

func (t tSceneTemplateConditionDo) Take() (*model.TSceneTemplateCondition, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneTemplateCondition), nil
	}
}

func (t tSceneTemplateConditionDo) Last() (*model.TSceneTemplateCondition, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneTemplateCondition), nil
	}
}

func (t tSceneTemplateConditionDo) Find() ([]*model.TSceneTemplateCondition, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSceneTemplateCondition), err
}

func (t tSceneTemplateConditionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSceneTemplateCondition, err error) {
	buf := make([]*model.TSceneTemplateCondition, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSceneTemplateConditionDo) FindInBatches(result *[]*model.TSceneTemplateCondition, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSceneTemplateConditionDo) Attrs(attrs ...field.AssignExpr) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSceneTemplateConditionDo) Assign(attrs ...field.AssignExpr) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSceneTemplateConditionDo) Joins(field field.RelationField) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tSceneTemplateConditionDo) Preload(field field.RelationField) *tSceneTemplateConditionDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tSceneTemplateConditionDo) FirstOrInit() (*model.TSceneTemplateCondition, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneTemplateCondition), nil
	}
}

func (t tSceneTemplateConditionDo) FirstOrCreate() (*model.TSceneTemplateCondition, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneTemplateCondition), nil
	}
}

func (t tSceneTemplateConditionDo) FindByPage(offset int, limit int) (result []*model.TSceneTemplateCondition, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSceneTemplateConditionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tSceneTemplateConditionDo) withDO(do gen.Dao) *tSceneTemplateConditionDo {
	t.DO = *do.(*gen.DO)
	return t
}
