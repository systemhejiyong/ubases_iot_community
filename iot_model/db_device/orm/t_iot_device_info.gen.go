// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_device/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTIotDeviceInfo(db *gorm.DB) tIotDeviceInfo {
	_tIotDeviceInfo := tIotDeviceInfo{}

	_tIotDeviceInfo.tIotDeviceInfoDo.UseDB(db)
	_tIotDeviceInfo.tIotDeviceInfoDo.UseModel(&model.TIotDeviceInfo{})

	tableName := _tIotDeviceInfo.tIotDeviceInfoDo.TableName()
	_tIotDeviceInfo.ALL = field.NewField(tableName, "*")
	_tIotDeviceInfo.Id = field.NewInt64(tableName, "id")
	_tIotDeviceInfo.Did = field.NewString(tableName, "did")
	_tIotDeviceInfo.ProductId = field.NewInt64(tableName, "product_id")
	_tIotDeviceInfo.ProductKey = field.NewString(tableName, "product_key")
	_tIotDeviceInfo.OnlineStatus = field.NewInt32(tableName, "online_status")
	_tIotDeviceInfo.DeviceName = field.NewString(tableName, "device_name")
	_tIotDeviceInfo.DeviceNature = field.NewString(tableName, "device_nature")
	_tIotDeviceInfo.Sn = field.NewString(tableName, "sn")
	_tIotDeviceInfo.BatchId = field.NewInt64(tableName, "batch_id")
	_tIotDeviceInfo.GroupId = field.NewInt64(tableName, "group_id")
	_tIotDeviceInfo.DeviceModel = field.NewString(tableName, "device_model")
	_tIotDeviceInfo.UserName = field.NewString(tableName, "user_name")
	_tIotDeviceInfo.Passward = field.NewString(tableName, "passward")
	_tIotDeviceInfo.Salt = field.NewString(tableName, "salt")
	_tIotDeviceInfo.DeviceSecretHttp = field.NewString(tableName, "device_secret_http")
	_tIotDeviceInfo.DeviceSecretMqtt = field.NewString(tableName, "device_secret_mqtt")
	_tIotDeviceInfo.IpAddress = field.NewString(tableName, "ip_address")
	_tIotDeviceInfo.Lat = field.NewFloat64(tableName, "lat")
	_tIotDeviceInfo.Lng = field.NewFloat64(tableName, "lng")
	_tIotDeviceInfo.Country = field.NewString(tableName, "country")
	_tIotDeviceInfo.Province = field.NewString(tableName, "province")
	_tIotDeviceInfo.City = field.NewString(tableName, "city")
	_tIotDeviceInfo.District = field.NewString(tableName, "district")
	_tIotDeviceInfo.LastActivatedTime = field.NewTime(tableName, "last_activated_time")
	_tIotDeviceInfo.ActivatedTime = field.NewTime(tableName, "activated_time")
	_tIotDeviceInfo.MacAddress = field.NewString(tableName, "mac_address")
	_tIotDeviceInfo.DeviceVersion = field.NewString(tableName, "device_version")
	_tIotDeviceInfo.ActiveStatus = field.NewString(tableName, "active_status")
	_tIotDeviceInfo.CreatedBy = field.NewInt64(tableName, "created_by")
	_tIotDeviceInfo.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tIotDeviceInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_tIotDeviceInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tIotDeviceInfo.DeletedAt = field.NewField(tableName, "deleted_at")
	_tIotDeviceInfo.ActiveUserId = field.NewInt64(tableName, "active_user_id")
	_tIotDeviceInfo.ActiveUserName = field.NewString(tableName, "active_user_name")
	_tIotDeviceInfo.TenantId = field.NewString(tableName, "tenant_id")
	_tIotDeviceInfo.AppKey = field.NewString(tableName, "app_key")
	_tIotDeviceInfo.ActiveChannel = field.NewInt32(tableName, "active_channel")
	_tIotDeviceInfo.ModuleVersion = field.NewString(tableName, "module_version")
	_tIotDeviceInfo.Sid = field.NewInt64(tableName, "sid")
	_tIotDeviceInfo.UseType = field.NewInt32(tableName, "use_type")
	_tIotDeviceInfo.RegionServerId = field.NewString(tableName, "region_server_id")

	_tIotDeviceInfo.fillFieldMap()

	return _tIotDeviceInfo
}

type tIotDeviceInfo struct {
	tIotDeviceInfoDo tIotDeviceInfoDo

	ALL               field.Field
	Id                field.Int64
	Did               field.String
	ProductId         field.Int64
	ProductKey        field.String
	OnlineStatus      field.Int32
	DeviceName        field.String
	DeviceNature      field.String
	Sn                field.String
	BatchId           field.Int64
	GroupId           field.Int64
	DeviceModel       field.String
	UserName          field.String
	Passward          field.String
	Salt              field.String
	DeviceSecretHttp  field.String
	DeviceSecretMqtt  field.String
	IpAddress         field.String
	Lat               field.Float64
	Lng               field.Float64
	Country           field.String
	Province          field.String
	City              field.String
	District          field.String
	LastActivatedTime field.Time
	ActivatedTime     field.Time
	MacAddress        field.String
	DeviceVersion     field.String
	ActiveStatus      field.String
	CreatedBy         field.Int64
	UpdatedBy         field.Int64
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field
	ActiveUserId      field.Int64
	ActiveUserName    field.String
	TenantId          field.String
	AppKey            field.String
	ActiveChannel     field.Int32
	ModuleVersion     field.String
	Sid               field.Int64
	UseType           field.Int32
	RegionServerId    field.String

	fieldMap map[string]field.Expr
}

func (t tIotDeviceInfo) Table(newTableName string) *tIotDeviceInfo {
	t.tIotDeviceInfoDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tIotDeviceInfo) As(alias string) *tIotDeviceInfo {
	t.tIotDeviceInfoDo.DO = *(t.tIotDeviceInfoDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tIotDeviceInfo) updateTableName(table string) *tIotDeviceInfo {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Did = field.NewString(table, "did")
	t.ProductId = field.NewInt64(table, "product_id")
	t.ProductKey = field.NewString(table, "product_key")
	t.OnlineStatus = field.NewInt32(table, "online_status")
	t.DeviceName = field.NewString(table, "device_name")
	t.DeviceNature = field.NewString(table, "device_nature")
	t.Sn = field.NewString(table, "sn")
	t.BatchId = field.NewInt64(table, "batch_id")
	t.GroupId = field.NewInt64(table, "group_id")
	t.DeviceModel = field.NewString(table, "device_model")
	t.UserName = field.NewString(table, "user_name")
	t.Passward = field.NewString(table, "passward")
	t.Salt = field.NewString(table, "salt")
	t.DeviceSecretHttp = field.NewString(table, "device_secret_http")
	t.DeviceSecretMqtt = field.NewString(table, "device_secret_mqtt")
	t.IpAddress = field.NewString(table, "ip_address")
	t.Lat = field.NewFloat64(table, "lat")
	t.Lng = field.NewFloat64(table, "lng")
	t.Country = field.NewString(table, "country")
	t.Province = field.NewString(table, "province")
	t.City = field.NewString(table, "city")
	t.District = field.NewString(table, "district")
	t.LastActivatedTime = field.NewTime(table, "last_activated_time")
	t.ActivatedTime = field.NewTime(table, "activated_time")
	t.MacAddress = field.NewString(table, "mac_address")
	t.DeviceVersion = field.NewString(table, "device_version")
	t.ActiveStatus = field.NewString(table, "active_status")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.ActiveUserId = field.NewInt64(table, "active_user_id")
	t.ActiveUserName = field.NewString(table, "active_user_name")
	t.TenantId = field.NewString(table, "tenant_id")
	t.AppKey = field.NewString(table, "app_key")
	t.ActiveChannel = field.NewInt32(table, "active_channel")
	t.ModuleVersion = field.NewString(table, "module_version")
	t.Sid = field.NewInt64(table, "sid")
	t.UseType = field.NewInt32(table, "use_type")
	t.RegionServerId = field.NewString(table, "region_server_id")

	t.fillFieldMap()

	return t
}

func (t *tIotDeviceInfo) WithContext(ctx context.Context) *tIotDeviceInfoDo {
	return t.tIotDeviceInfoDo.WithContext(ctx)
}

func (t tIotDeviceInfo) TableName() string { return t.tIotDeviceInfoDo.TableName() }

func (t tIotDeviceInfo) Alias() string { return t.tIotDeviceInfoDo.Alias() }

func (t *tIotDeviceInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tIotDeviceInfo) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 42)
	t.fieldMap["id"] = t.Id
	t.fieldMap["did"] = t.Did
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["online_status"] = t.OnlineStatus
	t.fieldMap["device_name"] = t.DeviceName
	t.fieldMap["device_nature"] = t.DeviceNature
	t.fieldMap["sn"] = t.Sn
	t.fieldMap["batch_id"] = t.BatchId
	t.fieldMap["group_id"] = t.GroupId
	t.fieldMap["device_model"] = t.DeviceModel
	t.fieldMap["user_name"] = t.UserName
	t.fieldMap["passward"] = t.Passward
	t.fieldMap["salt"] = t.Salt
	t.fieldMap["device_secret_http"] = t.DeviceSecretHttp
	t.fieldMap["device_secret_mqtt"] = t.DeviceSecretMqtt
	t.fieldMap["ip_address"] = t.IpAddress
	t.fieldMap["lat"] = t.Lat
	t.fieldMap["lng"] = t.Lng
	t.fieldMap["country"] = t.Country
	t.fieldMap["province"] = t.Province
	t.fieldMap["city"] = t.City
	t.fieldMap["district"] = t.District
	t.fieldMap["last_activated_time"] = t.LastActivatedTime
	t.fieldMap["activated_time"] = t.ActivatedTime
	t.fieldMap["mac_address"] = t.MacAddress
	t.fieldMap["device_version"] = t.DeviceVersion
	t.fieldMap["active_status"] = t.ActiveStatus
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["active_user_id"] = t.ActiveUserId
	t.fieldMap["active_user_name"] = t.ActiveUserName
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["active_channel"] = t.ActiveChannel
	t.fieldMap["module_version"] = t.ModuleVersion
	t.fieldMap["sid"] = t.Sid
	t.fieldMap["use_type"] = t.UseType
	t.fieldMap["region_server_id"] = t.RegionServerId
}

func (t tIotDeviceInfo) clone(db *gorm.DB) tIotDeviceInfo {
	t.tIotDeviceInfoDo.ReplaceDB(db)
	return t
}

type tIotDeviceInfoDo struct{ gen.DO }

func (t tIotDeviceInfoDo) Debug() *tIotDeviceInfoDo {
	return t.withDO(t.DO.Debug())
}

func (t tIotDeviceInfoDo) WithContext(ctx context.Context) *tIotDeviceInfoDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tIotDeviceInfoDo) Clauses(conds ...clause.Expression) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tIotDeviceInfoDo) Returning(value interface{}, columns ...string) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tIotDeviceInfoDo) Not(conds ...gen.Condition) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tIotDeviceInfoDo) Or(conds ...gen.Condition) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tIotDeviceInfoDo) Select(conds ...field.Expr) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tIotDeviceInfoDo) Where(conds ...gen.Condition) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tIotDeviceInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tIotDeviceInfoDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tIotDeviceInfoDo) Order(conds ...field.Expr) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tIotDeviceInfoDo) Distinct(cols ...field.Expr) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tIotDeviceInfoDo) Omit(cols ...field.Expr) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tIotDeviceInfoDo) Join(table schema.Tabler, on ...field.Expr) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tIotDeviceInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tIotDeviceInfoDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tIotDeviceInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *tIotDeviceInfoDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tIotDeviceInfoDo) Group(cols ...field.Expr) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tIotDeviceInfoDo) Having(conds ...gen.Condition) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tIotDeviceInfoDo) Limit(limit int) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tIotDeviceInfoDo) Offset(offset int) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tIotDeviceInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tIotDeviceInfoDo) Unscoped() *tIotDeviceInfoDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tIotDeviceInfoDo) Create(values ...*model.TIotDeviceInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tIotDeviceInfoDo) CreateInBatches(values []*model.TIotDeviceInfo, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tIotDeviceInfoDo) Save(values ...*model.TIotDeviceInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tIotDeviceInfoDo) First() (*model.TIotDeviceInfo, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceInfo), nil
	}
}

func (t tIotDeviceInfoDo) Take() (*model.TIotDeviceInfo, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceInfo), nil
	}
}

func (t tIotDeviceInfoDo) Last() (*model.TIotDeviceInfo, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceInfo), nil
	}
}

func (t tIotDeviceInfoDo) Find() ([]*model.TIotDeviceInfo, error) {
	result, err := t.DO.Find()
	return result.([]*model.TIotDeviceInfo), err
}

func (t tIotDeviceInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TIotDeviceInfo, err error) {
	buf := make([]*model.TIotDeviceInfo, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tIotDeviceInfoDo) FindInBatches(result *[]*model.TIotDeviceInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tIotDeviceInfoDo) Attrs(attrs ...field.AssignExpr) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tIotDeviceInfoDo) Assign(attrs ...field.AssignExpr) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tIotDeviceInfoDo) Joins(field field.RelationField) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tIotDeviceInfoDo) Preload(field field.RelationField) *tIotDeviceInfoDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tIotDeviceInfoDo) FirstOrInit() (*model.TIotDeviceInfo, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceInfo), nil
	}
}

func (t tIotDeviceInfoDo) FirstOrCreate() (*model.TIotDeviceInfo, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceInfo), nil
	}
}

func (t tIotDeviceInfoDo) FindByPage(offset int, limit int) (result []*model.TIotDeviceInfo, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tIotDeviceInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tIotDeviceInfoDo) withDO(do gen.Dao) *tIotDeviceInfoDo {
	t.DO = *do.(*gen.DO)
	return t
}
