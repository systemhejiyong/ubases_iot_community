// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_device/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTIotDeviceShared(db *gorm.DB) tIotDeviceShared {
	_tIotDeviceShared := tIotDeviceShared{}

	_tIotDeviceShared.tIotDeviceSharedDo.UseDB(db)
	_tIotDeviceShared.tIotDeviceSharedDo.UseModel(&model.TIotDeviceShared{})

	tableName := _tIotDeviceShared.tIotDeviceSharedDo.TableName()
	_tIotDeviceShared.ALL = field.NewField(tableName, "*")
	_tIotDeviceShared.Id = field.NewInt64(tableName, "id")
	_tIotDeviceShared.CustomName = field.NewString(tableName, "custom_name")
	_tIotDeviceShared.UserId = field.NewInt64(tableName, "user_id")
	_tIotDeviceShared.UserName = field.NewString(tableName, "user_name")
	_tIotDeviceShared.Phone = field.NewString(tableName, "phone")
	_tIotDeviceShared.Email = field.NewString(tableName, "email")
	_tIotDeviceShared.DeviceId = field.NewString(tableName, "device_id")
	_tIotDeviceShared.HomeId = field.NewInt64(tableName, "home_id")
	_tIotDeviceShared.Photo = field.NewString(tableName, "photo")
	_tIotDeviceShared.Sid = field.NewInt64(tableName, "sid")
	_tIotDeviceShared.BelongUserId = field.NewInt64(tableName, "belong_user_id")
	_tIotDeviceShared.BelongUserName = field.NewString(tableName, "belong_user_name")
	_tIotDeviceShared.ProductId = field.NewInt64(tableName, "product_id")
	_tIotDeviceShared.ProductKey = field.NewString(tableName, "product_key")
	_tIotDeviceShared.ProductPic = field.NewString(tableName, "product_pic")
	_tIotDeviceShared.SharedTime = field.NewTime(tableName, "shared_time")
	_tIotDeviceShared.CreatedAt = field.NewTime(tableName, "created_at")
	_tIotDeviceShared.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tIotDeviceShared.DeletedAt = field.NewField(tableName, "deleted_at")

	_tIotDeviceShared.fillFieldMap()

	return _tIotDeviceShared
}

type tIotDeviceShared struct {
	tIotDeviceSharedDo tIotDeviceSharedDo

	ALL            field.Field
	Id             field.Int64
	CustomName     field.String
	UserId         field.Int64
	UserName       field.String
	Phone          field.String
	Email          field.String
	DeviceId       field.String
	HomeId         field.Int64
	Photo          field.String
	Sid            field.Int64
	BelongUserId   field.Int64
	BelongUserName field.String
	ProductId      field.Int64
	ProductKey     field.String
	ProductPic     field.String
	SharedTime     field.Time
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field

	fieldMap map[string]field.Expr
}

func (t tIotDeviceShared) Table(newTableName string) *tIotDeviceShared {
	t.tIotDeviceSharedDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tIotDeviceShared) As(alias string) *tIotDeviceShared {
	t.tIotDeviceSharedDo.DO = *(t.tIotDeviceSharedDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tIotDeviceShared) updateTableName(table string) *tIotDeviceShared {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.CustomName = field.NewString(table, "custom_name")
	t.UserId = field.NewInt64(table, "user_id")
	t.UserName = field.NewString(table, "user_name")
	t.Phone = field.NewString(table, "phone")
	t.Email = field.NewString(table, "email")
	t.DeviceId = field.NewString(table, "device_id")
	t.HomeId = field.NewInt64(table, "home_id")
	t.Photo = field.NewString(table, "photo")
	t.Sid = field.NewInt64(table, "sid")
	t.BelongUserId = field.NewInt64(table, "belong_user_id")
	t.BelongUserName = field.NewString(table, "belong_user_name")
	t.ProductId = field.NewInt64(table, "product_id")
	t.ProductKey = field.NewString(table, "product_key")
	t.ProductPic = field.NewString(table, "product_pic")
	t.SharedTime = field.NewTime(table, "shared_time")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tIotDeviceShared) WithContext(ctx context.Context) *tIotDeviceSharedDo {
	return t.tIotDeviceSharedDo.WithContext(ctx)
}

func (t tIotDeviceShared) TableName() string { return t.tIotDeviceSharedDo.TableName() }

func (t tIotDeviceShared) Alias() string { return t.tIotDeviceSharedDo.Alias() }

func (t *tIotDeviceShared) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tIotDeviceShared) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 19)
	t.fieldMap["id"] = t.Id
	t.fieldMap["custom_name"] = t.CustomName
	t.fieldMap["user_id"] = t.UserId
	t.fieldMap["user_name"] = t.UserName
	t.fieldMap["phone"] = t.Phone
	t.fieldMap["email"] = t.Email
	t.fieldMap["device_id"] = t.DeviceId
	t.fieldMap["home_id"] = t.HomeId
	t.fieldMap["photo"] = t.Photo
	t.fieldMap["sid"] = t.Sid
	t.fieldMap["belong_user_id"] = t.BelongUserId
	t.fieldMap["belong_user_name"] = t.BelongUserName
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["product_pic"] = t.ProductPic
	t.fieldMap["shared_time"] = t.SharedTime
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tIotDeviceShared) clone(db *gorm.DB) tIotDeviceShared {
	t.tIotDeviceSharedDo.ReplaceDB(db)
	return t
}

type tIotDeviceSharedDo struct{ gen.DO }

func (t tIotDeviceSharedDo) Debug() *tIotDeviceSharedDo {
	return t.withDO(t.DO.Debug())
}

func (t tIotDeviceSharedDo) WithContext(ctx context.Context) *tIotDeviceSharedDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tIotDeviceSharedDo) Clauses(conds ...clause.Expression) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tIotDeviceSharedDo) Returning(value interface{}, columns ...string) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tIotDeviceSharedDo) Not(conds ...gen.Condition) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tIotDeviceSharedDo) Or(conds ...gen.Condition) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tIotDeviceSharedDo) Select(conds ...field.Expr) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tIotDeviceSharedDo) Where(conds ...gen.Condition) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tIotDeviceSharedDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tIotDeviceSharedDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tIotDeviceSharedDo) Order(conds ...field.Expr) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tIotDeviceSharedDo) Distinct(cols ...field.Expr) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tIotDeviceSharedDo) Omit(cols ...field.Expr) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tIotDeviceSharedDo) Join(table schema.Tabler, on ...field.Expr) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tIotDeviceSharedDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tIotDeviceSharedDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tIotDeviceSharedDo) RightJoin(table schema.Tabler, on ...field.Expr) *tIotDeviceSharedDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tIotDeviceSharedDo) Group(cols ...field.Expr) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tIotDeviceSharedDo) Having(conds ...gen.Condition) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tIotDeviceSharedDo) Limit(limit int) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tIotDeviceSharedDo) Offset(offset int) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tIotDeviceSharedDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tIotDeviceSharedDo) Unscoped() *tIotDeviceSharedDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tIotDeviceSharedDo) Create(values ...*model.TIotDeviceShared) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tIotDeviceSharedDo) CreateInBatches(values []*model.TIotDeviceShared, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tIotDeviceSharedDo) Save(values ...*model.TIotDeviceShared) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tIotDeviceSharedDo) First() (*model.TIotDeviceShared, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceShared), nil
	}
}

func (t tIotDeviceSharedDo) Take() (*model.TIotDeviceShared, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceShared), nil
	}
}

func (t tIotDeviceSharedDo) Last() (*model.TIotDeviceShared, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceShared), nil
	}
}

func (t tIotDeviceSharedDo) Find() ([]*model.TIotDeviceShared, error) {
	result, err := t.DO.Find()
	return result.([]*model.TIotDeviceShared), err
}

func (t tIotDeviceSharedDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TIotDeviceShared, err error) {
	buf := make([]*model.TIotDeviceShared, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tIotDeviceSharedDo) FindInBatches(result *[]*model.TIotDeviceShared, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tIotDeviceSharedDo) Attrs(attrs ...field.AssignExpr) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tIotDeviceSharedDo) Assign(attrs ...field.AssignExpr) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tIotDeviceSharedDo) Joins(field field.RelationField) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tIotDeviceSharedDo) Preload(field field.RelationField) *tIotDeviceSharedDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tIotDeviceSharedDo) FirstOrInit() (*model.TIotDeviceShared, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceShared), nil
	}
}

func (t tIotDeviceSharedDo) FirstOrCreate() (*model.TIotDeviceShared, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceShared), nil
	}
}

func (t tIotDeviceSharedDo) FindByPage(offset int, limit int) (result []*model.TIotDeviceShared, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tIotDeviceSharedDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tIotDeviceSharedDo) withDO(do gen.Dao) *tIotDeviceSharedDo {
	t.DO = *do.(*gen.DO)
	return t
}
