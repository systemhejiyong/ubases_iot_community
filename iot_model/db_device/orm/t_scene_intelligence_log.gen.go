// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_device/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTSceneIntelligenceLog(db *gorm.DB) tSceneIntelligenceLog {
	_tSceneIntelligenceLog := tSceneIntelligenceLog{}

	_tSceneIntelligenceLog.tSceneIntelligenceLogDo.UseDB(db)
	_tSceneIntelligenceLog.tSceneIntelligenceLogDo.UseModel(&model.TSceneIntelligenceLog{})

	tableName := _tSceneIntelligenceLog.tSceneIntelligenceLogDo.TableName()
	_tSceneIntelligenceLog.ALL = field.NewField(tableName, "*")
	_tSceneIntelligenceLog.Id = field.NewInt64(tableName, "id")
	_tSceneIntelligenceLog.ObjectId = field.NewInt64(tableName, "object_id")
	_tSceneIntelligenceLog.HomeId = field.NewInt64(tableName, "home_id")
	_tSceneIntelligenceLog.UserId = field.NewInt64(tableName, "user_id")
	_tSceneIntelligenceLog.Content = field.NewString(tableName, "content")
	_tSceneIntelligenceLog.ResultId = field.NewInt64(tableName, "result_id")
	_tSceneIntelligenceLog.IsSuccess = field.NewInt32(tableName, "is_success")
	_tSceneIntelligenceLog.SceneType = field.NewInt32(tableName, "scene_type")
	_tSceneIntelligenceLog.CreatedAt = field.NewTime(tableName, "created_at")
	_tSceneIntelligenceLog.IntelligenceId = field.NewInt64(tableName, "intelligence_id")
	_tSceneIntelligenceLog.IntelligenceTitle = field.NewString(tableName, "intelligence_title")

	_tSceneIntelligenceLog.fillFieldMap()

	return _tSceneIntelligenceLog
}

type tSceneIntelligenceLog struct {
	tSceneIntelligenceLogDo tSceneIntelligenceLogDo

	ALL               field.Field
	Id                field.Int64
	ObjectId          field.Int64
	HomeId            field.Int64
	UserId            field.Int64
	Content           field.String
	ResultId          field.Int64
	IsSuccess         field.Int32
	SceneType         field.Int32
	CreatedAt         field.Time
	IntelligenceId    field.Int64
	IntelligenceTitle field.String

	fieldMap map[string]field.Expr
}

func (t tSceneIntelligenceLog) Table(newTableName string) *tSceneIntelligenceLog {
	t.tSceneIntelligenceLogDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSceneIntelligenceLog) As(alias string) *tSceneIntelligenceLog {
	t.tSceneIntelligenceLogDo.DO = *(t.tSceneIntelligenceLogDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSceneIntelligenceLog) updateTableName(table string) *tSceneIntelligenceLog {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ObjectId = field.NewInt64(table, "object_id")
	t.HomeId = field.NewInt64(table, "home_id")
	t.UserId = field.NewInt64(table, "user_id")
	t.Content = field.NewString(table, "content")
	t.ResultId = field.NewInt64(table, "result_id")
	t.IsSuccess = field.NewInt32(table, "is_success")
	t.SceneType = field.NewInt32(table, "scene_type")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.IntelligenceId = field.NewInt64(table, "intelligence_id")
	t.IntelligenceTitle = field.NewString(table, "intelligence_title")

	t.fillFieldMap()

	return t
}

func (t *tSceneIntelligenceLog) WithContext(ctx context.Context) *tSceneIntelligenceLogDo {
	return t.tSceneIntelligenceLogDo.WithContext(ctx)
}

func (t tSceneIntelligenceLog) TableName() string { return t.tSceneIntelligenceLogDo.TableName() }

func (t tSceneIntelligenceLog) Alias() string { return t.tSceneIntelligenceLogDo.Alias() }

func (t *tSceneIntelligenceLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSceneIntelligenceLog) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.Id
	t.fieldMap["object_id"] = t.ObjectId
	t.fieldMap["home_id"] = t.HomeId
	t.fieldMap["user_id"] = t.UserId
	t.fieldMap["content"] = t.Content
	t.fieldMap["result_id"] = t.ResultId
	t.fieldMap["is_success"] = t.IsSuccess
	t.fieldMap["scene_type"] = t.SceneType
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["intelligence_id"] = t.IntelligenceId
	t.fieldMap["intelligence_title"] = t.IntelligenceTitle
}

func (t tSceneIntelligenceLog) clone(db *gorm.DB) tSceneIntelligenceLog {
	t.tSceneIntelligenceLogDo.ReplaceDB(db)
	return t
}

type tSceneIntelligenceLogDo struct{ gen.DO }

func (t tSceneIntelligenceLogDo) Debug() *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Debug())
}

func (t tSceneIntelligenceLogDo) WithContext(ctx context.Context) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSceneIntelligenceLogDo) Clauses(conds ...clause.Expression) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSceneIntelligenceLogDo) Returning(value interface{}, columns ...string) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSceneIntelligenceLogDo) Not(conds ...gen.Condition) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSceneIntelligenceLogDo) Or(conds ...gen.Condition) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSceneIntelligenceLogDo) Select(conds ...field.Expr) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSceneIntelligenceLogDo) Where(conds ...gen.Condition) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSceneIntelligenceLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tSceneIntelligenceLogDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tSceneIntelligenceLogDo) Order(conds ...field.Expr) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSceneIntelligenceLogDo) Distinct(cols ...field.Expr) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSceneIntelligenceLogDo) Omit(cols ...field.Expr) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSceneIntelligenceLogDo) Join(table schema.Tabler, on ...field.Expr) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSceneIntelligenceLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSceneIntelligenceLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSceneIntelligenceLogDo) Group(cols ...field.Expr) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSceneIntelligenceLogDo) Having(conds ...gen.Condition) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSceneIntelligenceLogDo) Limit(limit int) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSceneIntelligenceLogDo) Offset(offset int) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSceneIntelligenceLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSceneIntelligenceLogDo) Unscoped() *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSceneIntelligenceLogDo) Create(values ...*model.TSceneIntelligenceLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSceneIntelligenceLogDo) CreateInBatches(values []*model.TSceneIntelligenceLog, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSceneIntelligenceLogDo) Save(values ...*model.TSceneIntelligenceLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSceneIntelligenceLogDo) First() (*model.TSceneIntelligenceLog, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneIntelligenceLog), nil
	}
}

func (t tSceneIntelligenceLogDo) Take() (*model.TSceneIntelligenceLog, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneIntelligenceLog), nil
	}
}

func (t tSceneIntelligenceLogDo) Last() (*model.TSceneIntelligenceLog, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneIntelligenceLog), nil
	}
}

func (t tSceneIntelligenceLogDo) Find() ([]*model.TSceneIntelligenceLog, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSceneIntelligenceLog), err
}

func (t tSceneIntelligenceLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSceneIntelligenceLog, err error) {
	buf := make([]*model.TSceneIntelligenceLog, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSceneIntelligenceLogDo) FindInBatches(result *[]*model.TSceneIntelligenceLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSceneIntelligenceLogDo) Attrs(attrs ...field.AssignExpr) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSceneIntelligenceLogDo) Assign(attrs ...field.AssignExpr) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSceneIntelligenceLogDo) Joins(field field.RelationField) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tSceneIntelligenceLogDo) Preload(field field.RelationField) *tSceneIntelligenceLogDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tSceneIntelligenceLogDo) FirstOrInit() (*model.TSceneIntelligenceLog, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneIntelligenceLog), nil
	}
}

func (t tSceneIntelligenceLogDo) FirstOrCreate() (*model.TSceneIntelligenceLog, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneIntelligenceLog), nil
	}
}

func (t tSceneIntelligenceLogDo) FindByPage(offset int, limit int) (result []*model.TSceneIntelligenceLog, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSceneIntelligenceLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tSceneIntelligenceLogDo) withDO(do gen.Dao) *tSceneIntelligenceLogDo {
	t.DO = *do.(*gen.DO)
	return t
}
