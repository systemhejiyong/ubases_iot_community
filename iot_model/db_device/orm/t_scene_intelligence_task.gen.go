// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_device/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTSceneIntelligenceTask(db *gorm.DB) tSceneIntelligenceTask {
	_tSceneIntelligenceTask := tSceneIntelligenceTask{}

	_tSceneIntelligenceTask.tSceneIntelligenceTaskDo.UseDB(db)
	_tSceneIntelligenceTask.tSceneIntelligenceTaskDo.UseModel(&model.TSceneIntelligenceTask{})

	tableName := _tSceneIntelligenceTask.tSceneIntelligenceTaskDo.TableName()
	_tSceneIntelligenceTask.ALL = field.NewField(tableName, "*")
	_tSceneIntelligenceTask.Id = field.NewInt64(tableName, "id")
	_tSceneIntelligenceTask.IntelligenceId = field.NewInt64(tableName, "intelligence_id")
	_tSceneIntelligenceTask.TaskImg = field.NewString(tableName, "task_img")
	_tSceneIntelligenceTask.TaskDesc = field.NewString(tableName, "task_desc")
	_tSceneIntelligenceTask.TaskType = field.NewInt32(tableName, "task_type")
	_tSceneIntelligenceTask.ObjectId = field.NewString(tableName, "object_id")
	_tSceneIntelligenceTask.ObjectDesc = field.NewString(tableName, "object_desc")
	_tSceneIntelligenceTask.Functions = field.NewString(tableName, "functions")
	_tSceneIntelligenceTask.FuncKey = field.NewString(tableName, "func_key")
	_tSceneIntelligenceTask.FuncDesc = field.NewString(tableName, "func_desc")
	_tSceneIntelligenceTask.FuncValue = field.NewString(tableName, "func_value")
	_tSceneIntelligenceTask.Delayed = field.NewString(tableName, "delayed")
	_tSceneIntelligenceTask.ProductId = field.NewInt64(tableName, "product_id")
	_tSceneIntelligenceTask.ProductKey = field.NewString(tableName, "product_key")
	_tSceneIntelligenceTask.Sort = field.NewInt32(tableName, "sort")
	_tSceneIntelligenceTask.FuncIdentifier = field.NewString(tableName, "func_identifier")

	_tSceneIntelligenceTask.fillFieldMap()

	return _tSceneIntelligenceTask
}

type tSceneIntelligenceTask struct {
	tSceneIntelligenceTaskDo tSceneIntelligenceTaskDo

	ALL            field.Field
	Id             field.Int64
	IntelligenceId field.Int64
	TaskImg        field.String
	TaskDesc       field.String
	TaskType       field.Int32
	ObjectId       field.String
	ObjectDesc     field.String
	Functions      field.String
	FuncKey        field.String
	FuncDesc       field.String
	FuncValue      field.String
	Delayed        field.String
	ProductId      field.Int64
	ProductKey     field.String
	Sort           field.Int32
	FuncIdentifier field.String

	fieldMap map[string]field.Expr
}

func (t tSceneIntelligenceTask) Table(newTableName string) *tSceneIntelligenceTask {
	t.tSceneIntelligenceTaskDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSceneIntelligenceTask) As(alias string) *tSceneIntelligenceTask {
	t.tSceneIntelligenceTaskDo.DO = *(t.tSceneIntelligenceTaskDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSceneIntelligenceTask) updateTableName(table string) *tSceneIntelligenceTask {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.IntelligenceId = field.NewInt64(table, "intelligence_id")
	t.TaskImg = field.NewString(table, "task_img")
	t.TaskDesc = field.NewString(table, "task_desc")
	t.TaskType = field.NewInt32(table, "task_type")
	t.ObjectId = field.NewString(table, "object_id")
	t.ObjectDesc = field.NewString(table, "object_desc")
	t.Functions = field.NewString(table, "functions")
	t.FuncKey = field.NewString(table, "func_key")
	t.FuncDesc = field.NewString(table, "func_desc")
	t.FuncValue = field.NewString(table, "func_value")
	t.Delayed = field.NewString(table, "delayed")
	t.ProductId = field.NewInt64(table, "product_id")
	t.ProductKey = field.NewString(table, "product_key")
	t.Sort = field.NewInt32(table, "sort")
	t.FuncIdentifier = field.NewString(table, "func_identifier")

	t.fillFieldMap()

	return t
}

func (t *tSceneIntelligenceTask) WithContext(ctx context.Context) *tSceneIntelligenceTaskDo {
	return t.tSceneIntelligenceTaskDo.WithContext(ctx)
}

func (t tSceneIntelligenceTask) TableName() string { return t.tSceneIntelligenceTaskDo.TableName() }

func (t tSceneIntelligenceTask) Alias() string { return t.tSceneIntelligenceTaskDo.Alias() }

func (t *tSceneIntelligenceTask) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSceneIntelligenceTask) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 16)
	t.fieldMap["id"] = t.Id
	t.fieldMap["intelligence_id"] = t.IntelligenceId
	t.fieldMap["task_img"] = t.TaskImg
	t.fieldMap["task_desc"] = t.TaskDesc
	t.fieldMap["task_type"] = t.TaskType
	t.fieldMap["object_id"] = t.ObjectId
	t.fieldMap["object_desc"] = t.ObjectDesc
	t.fieldMap["functions"] = t.Functions
	t.fieldMap["func_key"] = t.FuncKey
	t.fieldMap["func_desc"] = t.FuncDesc
	t.fieldMap["func_value"] = t.FuncValue
	t.fieldMap["delayed"] = t.Delayed
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["sort"] = t.Sort
	t.fieldMap["func_identifier"] = t.FuncIdentifier
}

func (t tSceneIntelligenceTask) clone(db *gorm.DB) tSceneIntelligenceTask {
	t.tSceneIntelligenceTaskDo.ReplaceDB(db)
	return t
}

type tSceneIntelligenceTaskDo struct{ gen.DO }

func (t tSceneIntelligenceTaskDo) Debug() *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Debug())
}

func (t tSceneIntelligenceTaskDo) WithContext(ctx context.Context) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSceneIntelligenceTaskDo) Clauses(conds ...clause.Expression) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSceneIntelligenceTaskDo) Returning(value interface{}, columns ...string) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSceneIntelligenceTaskDo) Not(conds ...gen.Condition) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSceneIntelligenceTaskDo) Or(conds ...gen.Condition) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSceneIntelligenceTaskDo) Select(conds ...field.Expr) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSceneIntelligenceTaskDo) Where(conds ...gen.Condition) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSceneIntelligenceTaskDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tSceneIntelligenceTaskDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tSceneIntelligenceTaskDo) Order(conds ...field.Expr) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSceneIntelligenceTaskDo) Distinct(cols ...field.Expr) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSceneIntelligenceTaskDo) Omit(cols ...field.Expr) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSceneIntelligenceTaskDo) Join(table schema.Tabler, on ...field.Expr) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSceneIntelligenceTaskDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSceneIntelligenceTaskDo) RightJoin(table schema.Tabler, on ...field.Expr) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSceneIntelligenceTaskDo) Group(cols ...field.Expr) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSceneIntelligenceTaskDo) Having(conds ...gen.Condition) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSceneIntelligenceTaskDo) Limit(limit int) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSceneIntelligenceTaskDo) Offset(offset int) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSceneIntelligenceTaskDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSceneIntelligenceTaskDo) Unscoped() *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSceneIntelligenceTaskDo) Create(values ...*model.TSceneIntelligenceTask) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSceneIntelligenceTaskDo) CreateInBatches(values []*model.TSceneIntelligenceTask, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSceneIntelligenceTaskDo) Save(values ...*model.TSceneIntelligenceTask) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSceneIntelligenceTaskDo) First() (*model.TSceneIntelligenceTask, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneIntelligenceTask), nil
	}
}

func (t tSceneIntelligenceTaskDo) Take() (*model.TSceneIntelligenceTask, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneIntelligenceTask), nil
	}
}

func (t tSceneIntelligenceTaskDo) Last() (*model.TSceneIntelligenceTask, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneIntelligenceTask), nil
	}
}

func (t tSceneIntelligenceTaskDo) Find() ([]*model.TSceneIntelligenceTask, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSceneIntelligenceTask), err
}

func (t tSceneIntelligenceTaskDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSceneIntelligenceTask, err error) {
	buf := make([]*model.TSceneIntelligenceTask, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSceneIntelligenceTaskDo) FindInBatches(result *[]*model.TSceneIntelligenceTask, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSceneIntelligenceTaskDo) Attrs(attrs ...field.AssignExpr) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSceneIntelligenceTaskDo) Assign(attrs ...field.AssignExpr) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSceneIntelligenceTaskDo) Joins(field field.RelationField) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tSceneIntelligenceTaskDo) Preload(field field.RelationField) *tSceneIntelligenceTaskDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tSceneIntelligenceTaskDo) FirstOrInit() (*model.TSceneIntelligenceTask, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneIntelligenceTask), nil
	}
}

func (t tSceneIntelligenceTaskDo) FirstOrCreate() (*model.TSceneIntelligenceTask, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneIntelligenceTask), nil
	}
}

func (t tSceneIntelligenceTaskDo) FindByPage(offset int, limit int) (result []*model.TSceneIntelligenceTask, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSceneIntelligenceTaskDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tSceneIntelligenceTaskDo) withDO(do gen.Dao) *tSceneIntelligenceTaskDo {
	t.DO = *do.(*gen.DO)
	return t
}
