// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_device/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTIotDeviceTimer(db *gorm.DB) tIotDeviceTimer {
	_tIotDeviceTimer := tIotDeviceTimer{}

	_tIotDeviceTimer.tIotDeviceTimerDo.UseDB(db)
	_tIotDeviceTimer.tIotDeviceTimerDo.UseModel(&model.TIotDeviceTimer{})

	tableName := _tIotDeviceTimer.tIotDeviceTimerDo.TableName()
	_tIotDeviceTimer.ALL = field.NewField(tableName, "*")
	_tIotDeviceTimer.Id = field.NewInt64(tableName, "id")
	_tIotDeviceTimer.Hour = field.NewString(tableName, "hour")
	_tIotDeviceTimer.Minute = field.NewString(tableName, "minute")
	_tIotDeviceTimer.DaysMode = field.NewInt32(tableName, "days_mode")
	_tIotDeviceTimer.Weeks = field.NewString(tableName, "weeks")
	_tIotDeviceTimer.Remark = field.NewString(tableName, "remark")
	_tIotDeviceTimer.FuncKey = field.NewString(tableName, "func_key")
	_tIotDeviceTimer.FuncValue = field.NewString(tableName, "func_value")
	_tIotDeviceTimer.UserId = field.NewInt64(tableName, "user_id")
	_tIotDeviceTimer.DeviceId = field.NewString(tableName, "device_id")
	_tIotDeviceTimer.Enabled = field.NewInt32(tableName, "enabled")
	_tIotDeviceTimer.FirstTime = field.NewTime(tableName, "first_time")
	_tIotDeviceTimer.Cron = field.NewString(tableName, "cron")
	_tIotDeviceTimer.TaskId = field.NewString(tableName, "task_id")
	_tIotDeviceTimer.CreatedBy = field.NewInt64(tableName, "created_by")
	_tIotDeviceTimer.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tIotDeviceTimer.CreatedAt = field.NewTime(tableName, "created_at")
	_tIotDeviceTimer.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tIotDeviceTimer.Functions = field.NewString(tableName, "functions")
	_tIotDeviceTimer.Name = field.NewString(tableName, "name")
	_tIotDeviceTimer.EndHour = field.NewString(tableName, "end_hour")
	_tIotDeviceTimer.EndMinute = field.NewString(tableName, "end_minute")
	_tIotDeviceTimer.EndCron = field.NewString(tableName, "end_cron")
	_tIotDeviceTimer.Timezone = field.NewString(tableName, "timezone")
	_tIotDeviceTimer.RegionServerId = field.NewInt64(tableName, "region_server_id")

	_tIotDeviceTimer.fillFieldMap()

	return _tIotDeviceTimer
}

type tIotDeviceTimer struct {
	tIotDeviceTimerDo tIotDeviceTimerDo

	ALL            field.Field
	Id             field.Int64
	Hour           field.String
	Minute         field.String
	DaysMode       field.Int32
	Weeks          field.String
	Remark         field.String
	FuncKey        field.String
	FuncValue      field.String
	UserId         field.Int64
	DeviceId       field.String
	Enabled        field.Int32
	FirstTime      field.Time
	Cron           field.String
	TaskId         field.String
	CreatedBy      field.Int64
	UpdatedBy      field.Int64
	CreatedAt      field.Time
	UpdatedAt      field.Time
	Functions      field.String
	Name           field.String
	EndHour        field.String
	EndMinute      field.String
	EndCron        field.String
	Timezone       field.String
	RegionServerId field.Int64

	fieldMap map[string]field.Expr
}

func (t tIotDeviceTimer) Table(newTableName string) *tIotDeviceTimer {
	t.tIotDeviceTimerDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tIotDeviceTimer) As(alias string) *tIotDeviceTimer {
	t.tIotDeviceTimerDo.DO = *(t.tIotDeviceTimerDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tIotDeviceTimer) updateTableName(table string) *tIotDeviceTimer {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Hour = field.NewString(table, "hour")
	t.Minute = field.NewString(table, "minute")
	t.DaysMode = field.NewInt32(table, "days_mode")
	t.Weeks = field.NewString(table, "weeks")
	t.Remark = field.NewString(table, "remark")
	t.FuncKey = field.NewString(table, "func_key")
	t.FuncValue = field.NewString(table, "func_value")
	t.UserId = field.NewInt64(table, "user_id")
	t.DeviceId = field.NewString(table, "device_id")
	t.Enabled = field.NewInt32(table, "enabled")
	t.FirstTime = field.NewTime(table, "first_time")
	t.Cron = field.NewString(table, "cron")
	t.TaskId = field.NewString(table, "task_id")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.Functions = field.NewString(table, "functions")
	t.Name = field.NewString(table, "name")
	t.EndHour = field.NewString(table, "end_hour")
	t.EndMinute = field.NewString(table, "end_minute")
	t.EndCron = field.NewString(table, "end_cron")
	t.Timezone = field.NewString(table, "timezone")
	t.RegionServerId = field.NewInt64(table, "region_server_id")

	t.fillFieldMap()

	return t
}

func (t *tIotDeviceTimer) WithContext(ctx context.Context) *tIotDeviceTimerDo {
	return t.tIotDeviceTimerDo.WithContext(ctx)
}

func (t tIotDeviceTimer) TableName() string { return t.tIotDeviceTimerDo.TableName() }

func (t tIotDeviceTimer) Alias() string { return t.tIotDeviceTimerDo.Alias() }

func (t *tIotDeviceTimer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tIotDeviceTimer) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 25)
	t.fieldMap["id"] = t.Id
	t.fieldMap["hour"] = t.Hour
	t.fieldMap["minute"] = t.Minute
	t.fieldMap["days_mode"] = t.DaysMode
	t.fieldMap["weeks"] = t.Weeks
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["func_key"] = t.FuncKey
	t.fieldMap["func_value"] = t.FuncValue
	t.fieldMap["user_id"] = t.UserId
	t.fieldMap["device_id"] = t.DeviceId
	t.fieldMap["enabled"] = t.Enabled
	t.fieldMap["first_time"] = t.FirstTime
	t.fieldMap["cron"] = t.Cron
	t.fieldMap["task_id"] = t.TaskId
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["functions"] = t.Functions
	t.fieldMap["name"] = t.Name
	t.fieldMap["end_hour"] = t.EndHour
	t.fieldMap["end_minute"] = t.EndMinute
	t.fieldMap["end_cron"] = t.EndCron
	t.fieldMap["timezone"] = t.Timezone
	t.fieldMap["region_server_id"] = t.RegionServerId
}

func (t tIotDeviceTimer) clone(db *gorm.DB) tIotDeviceTimer {
	t.tIotDeviceTimerDo.ReplaceDB(db)
	return t
}

type tIotDeviceTimerDo struct{ gen.DO }

func (t tIotDeviceTimerDo) Debug() *tIotDeviceTimerDo {
	return t.withDO(t.DO.Debug())
}

func (t tIotDeviceTimerDo) WithContext(ctx context.Context) *tIotDeviceTimerDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tIotDeviceTimerDo) Clauses(conds ...clause.Expression) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tIotDeviceTimerDo) Returning(value interface{}, columns ...string) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tIotDeviceTimerDo) Not(conds ...gen.Condition) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tIotDeviceTimerDo) Or(conds ...gen.Condition) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tIotDeviceTimerDo) Select(conds ...field.Expr) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tIotDeviceTimerDo) Where(conds ...gen.Condition) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tIotDeviceTimerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tIotDeviceTimerDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tIotDeviceTimerDo) Order(conds ...field.Expr) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tIotDeviceTimerDo) Distinct(cols ...field.Expr) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tIotDeviceTimerDo) Omit(cols ...field.Expr) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tIotDeviceTimerDo) Join(table schema.Tabler, on ...field.Expr) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tIotDeviceTimerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tIotDeviceTimerDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tIotDeviceTimerDo) RightJoin(table schema.Tabler, on ...field.Expr) *tIotDeviceTimerDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tIotDeviceTimerDo) Group(cols ...field.Expr) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tIotDeviceTimerDo) Having(conds ...gen.Condition) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tIotDeviceTimerDo) Limit(limit int) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tIotDeviceTimerDo) Offset(offset int) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tIotDeviceTimerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tIotDeviceTimerDo) Unscoped() *tIotDeviceTimerDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tIotDeviceTimerDo) Create(values ...*model.TIotDeviceTimer) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tIotDeviceTimerDo) CreateInBatches(values []*model.TIotDeviceTimer, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tIotDeviceTimerDo) Save(values ...*model.TIotDeviceTimer) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tIotDeviceTimerDo) First() (*model.TIotDeviceTimer, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceTimer), nil
	}
}

func (t tIotDeviceTimerDo) Take() (*model.TIotDeviceTimer, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceTimer), nil
	}
}

func (t tIotDeviceTimerDo) Last() (*model.TIotDeviceTimer, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceTimer), nil
	}
}

func (t tIotDeviceTimerDo) Find() ([]*model.TIotDeviceTimer, error) {
	result, err := t.DO.Find()
	return result.([]*model.TIotDeviceTimer), err
}

func (t tIotDeviceTimerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TIotDeviceTimer, err error) {
	buf := make([]*model.TIotDeviceTimer, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tIotDeviceTimerDo) FindInBatches(result *[]*model.TIotDeviceTimer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tIotDeviceTimerDo) Attrs(attrs ...field.AssignExpr) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tIotDeviceTimerDo) Assign(attrs ...field.AssignExpr) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tIotDeviceTimerDo) Joins(field field.RelationField) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tIotDeviceTimerDo) Preload(field field.RelationField) *tIotDeviceTimerDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tIotDeviceTimerDo) FirstOrInit() (*model.TIotDeviceTimer, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceTimer), nil
	}
}

func (t tIotDeviceTimerDo) FirstOrCreate() (*model.TIotDeviceTimer, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceTimer), nil
	}
}

func (t tIotDeviceTimerDo) FindByPage(offset int, limit int) (result []*model.TIotDeviceTimer, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tIotDeviceTimerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tIotDeviceTimerDo) withDO(do gen.Dao) *tIotDeviceTimerDo {
	t.DO = *do.(*gen.DO)
	return t
}
