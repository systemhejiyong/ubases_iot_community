// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_device/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTSceneIntelligence(db *gorm.DB) tSceneIntelligence {
	_tSceneIntelligence := tSceneIntelligence{}

	_tSceneIntelligence.tSceneIntelligenceDo.UseDB(db)
	_tSceneIntelligence.tSceneIntelligenceDo.UseModel(&model.TSceneIntelligence{})

	tableName := _tSceneIntelligence.tSceneIntelligenceDo.TableName()
	_tSceneIntelligence.ALL = field.NewField(tableName, "*")
	_tSceneIntelligence.Id = field.NewInt64(tableName, "id")
	_tSceneIntelligence.Type = field.NewInt32(tableName, "type")
	_tSceneIntelligence.Title = field.NewString(tableName, "title")
	_tSceneIntelligence.SortNo = field.NewInt32(tableName, "sort_no")
	_tSceneIntelligence.EnableDisplay = field.NewInt32(tableName, "enable_display")
	_tSceneIntelligence.Status = field.NewInt32(tableName, "status")
	_tSceneIntelligence.RunStatus = field.NewInt32(tableName, "run_status")
	_tSceneIntelligence.RunTime = field.NewTime(tableName, "run_time")
	_tSceneIntelligence.UserId = field.NewInt64(tableName, "user_id")
	_tSceneIntelligence.HomeId = field.NewInt64(tableName, "home_id")
	_tSceneIntelligence.ConditionMode = field.NewInt32(tableName, "condition_mode")
	_tSceneIntelligence.StyleIcon = field.NewString(tableName, "style_icon")
	_tSceneIntelligence.StyleColor = field.NewString(tableName, "style_color")
	_tSceneIntelligence.StyleImg = field.NewString(tableName, "style_img")
	_tSceneIntelligence.EffectTimeSwitch = field.NewInt32(tableName, "effect_time_switch")
	_tSceneIntelligence.EffectTimeDesc = field.NewString(tableName, "effect_time_desc")
	_tSceneIntelligence.EffectTimeWeeks = field.NewString(tableName, "effect_time_weeks")
	_tSceneIntelligence.EffectTimeStart = field.NewString(tableName, "effect_time_start")
	_tSceneIntelligence.EffectTimeEnd = field.NewString(tableName, "effect_time_end")
	_tSceneIntelligence.CreatedBy = field.NewInt64(tableName, "created_by")
	_tSceneIntelligence.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tSceneIntelligence.CreatedAt = field.NewTime(tableName, "created_at")
	_tSceneIntelligence.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tSceneIntelligence.DeletedAt = field.NewField(tableName, "deleted_at")
	_tSceneIntelligence.AppKey = field.NewString(tableName, "app_key")
	_tSceneIntelligence.TenantId = field.NewString(tableName, "tenant_id")
	_tSceneIntelligence.Timezone = field.NewString(tableName, "timezone")
	_tSceneIntelligence.RegionServerId = field.NewInt64(tableName, "region_server_id")

	_tSceneIntelligence.fillFieldMap()

	return _tSceneIntelligence
}

type tSceneIntelligence struct {
	tSceneIntelligenceDo tSceneIntelligenceDo

	ALL              field.Field
	Id               field.Int64
	Type             field.Int32
	Title            field.String
	SortNo           field.Int32
	EnableDisplay    field.Int32
	Status           field.Int32
	RunStatus        field.Int32
	RunTime          field.Time
	UserId           field.Int64
	HomeId           field.Int64
	ConditionMode    field.Int32
	StyleIcon        field.String
	StyleColor       field.String
	StyleImg         field.String
	EffectTimeSwitch field.Int32
	EffectTimeDesc   field.String
	EffectTimeWeeks  field.String
	EffectTimeStart  field.String
	EffectTimeEnd    field.String
	CreatedBy        field.Int64
	UpdatedBy        field.Int64
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	AppKey           field.String
	TenantId         field.String
	Timezone         field.String
	RegionServerId   field.Int64

	fieldMap map[string]field.Expr
}

func (t tSceneIntelligence) Table(newTableName string) *tSceneIntelligence {
	t.tSceneIntelligenceDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSceneIntelligence) As(alias string) *tSceneIntelligence {
	t.tSceneIntelligenceDo.DO = *(t.tSceneIntelligenceDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSceneIntelligence) updateTableName(table string) *tSceneIntelligence {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Type = field.NewInt32(table, "type")
	t.Title = field.NewString(table, "title")
	t.SortNo = field.NewInt32(table, "sort_no")
	t.EnableDisplay = field.NewInt32(table, "enable_display")
	t.Status = field.NewInt32(table, "status")
	t.RunStatus = field.NewInt32(table, "run_status")
	t.RunTime = field.NewTime(table, "run_time")
	t.UserId = field.NewInt64(table, "user_id")
	t.HomeId = field.NewInt64(table, "home_id")
	t.ConditionMode = field.NewInt32(table, "condition_mode")
	t.StyleIcon = field.NewString(table, "style_icon")
	t.StyleColor = field.NewString(table, "style_color")
	t.StyleImg = field.NewString(table, "style_img")
	t.EffectTimeSwitch = field.NewInt32(table, "effect_time_switch")
	t.EffectTimeDesc = field.NewString(table, "effect_time_desc")
	t.EffectTimeWeeks = field.NewString(table, "effect_time_weeks")
	t.EffectTimeStart = field.NewString(table, "effect_time_start")
	t.EffectTimeEnd = field.NewString(table, "effect_time_end")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.AppKey = field.NewString(table, "app_key")
	t.TenantId = field.NewString(table, "tenant_id")
	t.Timezone = field.NewString(table, "timezone")
	t.RegionServerId = field.NewInt64(table, "region_server_id")

	t.fillFieldMap()

	return t
}

func (t *tSceneIntelligence) WithContext(ctx context.Context) *tSceneIntelligenceDo {
	return t.tSceneIntelligenceDo.WithContext(ctx)
}

func (t tSceneIntelligence) TableName() string { return t.tSceneIntelligenceDo.TableName() }

func (t tSceneIntelligence) Alias() string { return t.tSceneIntelligenceDo.Alias() }

func (t *tSceneIntelligence) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSceneIntelligence) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 28)
	t.fieldMap["id"] = t.Id
	t.fieldMap["type"] = t.Type
	t.fieldMap["title"] = t.Title
	t.fieldMap["sort_no"] = t.SortNo
	t.fieldMap["enable_display"] = t.EnableDisplay
	t.fieldMap["status"] = t.Status
	t.fieldMap["run_status"] = t.RunStatus
	t.fieldMap["run_time"] = t.RunTime
	t.fieldMap["user_id"] = t.UserId
	t.fieldMap["home_id"] = t.HomeId
	t.fieldMap["condition_mode"] = t.ConditionMode
	t.fieldMap["style_icon"] = t.StyleIcon
	t.fieldMap["style_color"] = t.StyleColor
	t.fieldMap["style_img"] = t.StyleImg
	t.fieldMap["effect_time_switch"] = t.EffectTimeSwitch
	t.fieldMap["effect_time_desc"] = t.EffectTimeDesc
	t.fieldMap["effect_time_weeks"] = t.EffectTimeWeeks
	t.fieldMap["effect_time_start"] = t.EffectTimeStart
	t.fieldMap["effect_time_end"] = t.EffectTimeEnd
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["timezone"] = t.Timezone
	t.fieldMap["region_server_id"] = t.RegionServerId
}

func (t tSceneIntelligence) clone(db *gorm.DB) tSceneIntelligence {
	t.tSceneIntelligenceDo.ReplaceDB(db)
	return t
}

type tSceneIntelligenceDo struct{ gen.DO }

func (t tSceneIntelligenceDo) Debug() *tSceneIntelligenceDo {
	return t.withDO(t.DO.Debug())
}

func (t tSceneIntelligenceDo) WithContext(ctx context.Context) *tSceneIntelligenceDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSceneIntelligenceDo) Clauses(conds ...clause.Expression) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSceneIntelligenceDo) Returning(value interface{}, columns ...string) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSceneIntelligenceDo) Not(conds ...gen.Condition) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSceneIntelligenceDo) Or(conds ...gen.Condition) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSceneIntelligenceDo) Select(conds ...field.Expr) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSceneIntelligenceDo) Where(conds ...gen.Condition) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSceneIntelligenceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tSceneIntelligenceDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tSceneIntelligenceDo) Order(conds ...field.Expr) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSceneIntelligenceDo) Distinct(cols ...field.Expr) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSceneIntelligenceDo) Omit(cols ...field.Expr) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSceneIntelligenceDo) Join(table schema.Tabler, on ...field.Expr) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSceneIntelligenceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tSceneIntelligenceDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSceneIntelligenceDo) RightJoin(table schema.Tabler, on ...field.Expr) *tSceneIntelligenceDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSceneIntelligenceDo) Group(cols ...field.Expr) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSceneIntelligenceDo) Having(conds ...gen.Condition) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSceneIntelligenceDo) Limit(limit int) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSceneIntelligenceDo) Offset(offset int) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSceneIntelligenceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSceneIntelligenceDo) Unscoped() *tSceneIntelligenceDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSceneIntelligenceDo) Create(values ...*model.TSceneIntelligence) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSceneIntelligenceDo) CreateInBatches(values []*model.TSceneIntelligence, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSceneIntelligenceDo) Save(values ...*model.TSceneIntelligence) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSceneIntelligenceDo) First() (*model.TSceneIntelligence, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneIntelligence), nil
	}
}

func (t tSceneIntelligenceDo) Take() (*model.TSceneIntelligence, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneIntelligence), nil
	}
}

func (t tSceneIntelligenceDo) Last() (*model.TSceneIntelligence, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneIntelligence), nil
	}
}

func (t tSceneIntelligenceDo) Find() ([]*model.TSceneIntelligence, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSceneIntelligence), err
}

func (t tSceneIntelligenceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSceneIntelligence, err error) {
	buf := make([]*model.TSceneIntelligence, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSceneIntelligenceDo) FindInBatches(result *[]*model.TSceneIntelligence, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSceneIntelligenceDo) Attrs(attrs ...field.AssignExpr) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSceneIntelligenceDo) Assign(attrs ...field.AssignExpr) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSceneIntelligenceDo) Joins(field field.RelationField) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tSceneIntelligenceDo) Preload(field field.RelationField) *tSceneIntelligenceDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tSceneIntelligenceDo) FirstOrInit() (*model.TSceneIntelligence, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneIntelligence), nil
	}
}

func (t tSceneIntelligenceDo) FirstOrCreate() (*model.TSceneIntelligence, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneIntelligence), nil
	}
}

func (t tSceneIntelligenceDo) FindByPage(offset int, limit int) (result []*model.TSceneIntelligence, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSceneIntelligenceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tSceneIntelligenceDo) withDO(do gen.Dao) *tSceneIntelligenceDo {
	t.DO = *do.(*gen.DO)
	return t
}
