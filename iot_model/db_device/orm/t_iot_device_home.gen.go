// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_device/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTIotDeviceHome(db *gorm.DB) tIotDeviceHome {
	_tIotDeviceHome := tIotDeviceHome{}

	_tIotDeviceHome.tIotDeviceHomeDo.UseDB(db)
	_tIotDeviceHome.tIotDeviceHomeDo.UseModel(&model.TIotDeviceHome{})

	tableName := _tIotDeviceHome.tIotDeviceHomeDo.TableName()
	_tIotDeviceHome.ALL = field.NewField(tableName, "*")
	_tIotDeviceHome.Id = field.NewInt64(tableName, "id")
	_tIotDeviceHome.HomeId = field.NewInt64(tableName, "home_id")
	_tIotDeviceHome.DeviceId = field.NewString(tableName, "device_id")
	_tIotDeviceHome.RoomId = field.NewInt64(tableName, "room_id")
	_tIotDeviceHome.ProductId = field.NewInt64(tableName, "product_id")
	_tIotDeviceHome.ProductKey = field.NewString(tableName, "product_key")
	_tIotDeviceHome.CustomName = field.NewString(tableName, "custom_name")
	_tIotDeviceHome.BindTime = field.NewTime(tableName, "bind_time")
	_tIotDeviceHome.CustomPic = field.NewString(tableName, "custom_pic")
	_tIotDeviceHome.Secrtkey = field.NewString(tableName, "secrtkey")
	_tIotDeviceHome.AddMethod = field.NewInt32(tableName, "add_method")
	_tIotDeviceHome.Sort = field.NewInt32(tableName, "sort")
	_tIotDeviceHome.CreatedBy = field.NewInt64(tableName, "created_by")
	_tIotDeviceHome.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tIotDeviceHome.CreatedAt = field.NewTime(tableName, "created_at")
	_tIotDeviceHome.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tIotDeviceHome.DeletedAt = field.NewField(tableName, "deleted_at")
	_tIotDeviceHome.PanelId = field.NewInt64(tableName, "panel_id")
	_tIotDeviceHome.AppPanelType = field.NewInt32(tableName, "app_panel_type")

	_tIotDeviceHome.fillFieldMap()

	return _tIotDeviceHome
}

type tIotDeviceHome struct {
	tIotDeviceHomeDo tIotDeviceHomeDo

	ALL          field.Field
	Id           field.Int64
	HomeId       field.Int64
	DeviceId     field.String
	RoomId       field.Int64
	ProductId    field.Int64
	ProductKey   field.String
	CustomName   field.String
	BindTime     field.Time
	CustomPic    field.String
	Secrtkey     field.String
	AddMethod    field.Int32
	Sort         field.Int32
	CreatedBy    field.Int64
	UpdatedBy    field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field
	PanelId      field.Int64
	AppPanelType field.Int32

	fieldMap map[string]field.Expr
}

func (t tIotDeviceHome) Table(newTableName string) *tIotDeviceHome {
	t.tIotDeviceHomeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tIotDeviceHome) As(alias string) *tIotDeviceHome {
	t.tIotDeviceHomeDo.DO = *(t.tIotDeviceHomeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tIotDeviceHome) updateTableName(table string) *tIotDeviceHome {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.HomeId = field.NewInt64(table, "home_id")
	t.DeviceId = field.NewString(table, "device_id")
	t.RoomId = field.NewInt64(table, "room_id")
	t.ProductId = field.NewInt64(table, "product_id")
	t.ProductKey = field.NewString(table, "product_key")
	t.CustomName = field.NewString(table, "custom_name")
	t.BindTime = field.NewTime(table, "bind_time")
	t.CustomPic = field.NewString(table, "custom_pic")
	t.Secrtkey = field.NewString(table, "secrtkey")
	t.AddMethod = field.NewInt32(table, "add_method")
	t.Sort = field.NewInt32(table, "sort")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.PanelId = field.NewInt64(table, "panel_id")
	t.AppPanelType = field.NewInt32(table, "app_panel_type")

	t.fillFieldMap()

	return t
}

func (t *tIotDeviceHome) WithContext(ctx context.Context) *tIotDeviceHomeDo {
	return t.tIotDeviceHomeDo.WithContext(ctx)
}

func (t tIotDeviceHome) TableName() string { return t.tIotDeviceHomeDo.TableName() }

func (t tIotDeviceHome) Alias() string { return t.tIotDeviceHomeDo.Alias() }

func (t *tIotDeviceHome) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tIotDeviceHome) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 19)
	t.fieldMap["id"] = t.Id
	t.fieldMap["home_id"] = t.HomeId
	t.fieldMap["device_id"] = t.DeviceId
	t.fieldMap["room_id"] = t.RoomId
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["custom_name"] = t.CustomName
	t.fieldMap["bind_time"] = t.BindTime
	t.fieldMap["custom_pic"] = t.CustomPic
	t.fieldMap["secrtkey"] = t.Secrtkey
	t.fieldMap["add_method"] = t.AddMethod
	t.fieldMap["sort"] = t.Sort
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["panel_id"] = t.PanelId
	t.fieldMap["app_panel_type"] = t.AppPanelType
}

func (t tIotDeviceHome) clone(db *gorm.DB) tIotDeviceHome {
	t.tIotDeviceHomeDo.ReplaceDB(db)
	return t
}

type tIotDeviceHomeDo struct{ gen.DO }

func (t tIotDeviceHomeDo) Debug() *tIotDeviceHomeDo {
	return t.withDO(t.DO.Debug())
}

func (t tIotDeviceHomeDo) WithContext(ctx context.Context) *tIotDeviceHomeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tIotDeviceHomeDo) Clauses(conds ...clause.Expression) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tIotDeviceHomeDo) Returning(value interface{}, columns ...string) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tIotDeviceHomeDo) Not(conds ...gen.Condition) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tIotDeviceHomeDo) Or(conds ...gen.Condition) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tIotDeviceHomeDo) Select(conds ...field.Expr) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tIotDeviceHomeDo) Where(conds ...gen.Condition) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tIotDeviceHomeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tIotDeviceHomeDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tIotDeviceHomeDo) Order(conds ...field.Expr) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tIotDeviceHomeDo) Distinct(cols ...field.Expr) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tIotDeviceHomeDo) Omit(cols ...field.Expr) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tIotDeviceHomeDo) Join(table schema.Tabler, on ...field.Expr) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tIotDeviceHomeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tIotDeviceHomeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tIotDeviceHomeDo) RightJoin(table schema.Tabler, on ...field.Expr) *tIotDeviceHomeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tIotDeviceHomeDo) Group(cols ...field.Expr) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tIotDeviceHomeDo) Having(conds ...gen.Condition) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tIotDeviceHomeDo) Limit(limit int) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tIotDeviceHomeDo) Offset(offset int) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tIotDeviceHomeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tIotDeviceHomeDo) Unscoped() *tIotDeviceHomeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tIotDeviceHomeDo) Create(values ...*model.TIotDeviceHome) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tIotDeviceHomeDo) CreateInBatches(values []*model.TIotDeviceHome, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tIotDeviceHomeDo) Save(values ...*model.TIotDeviceHome) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tIotDeviceHomeDo) First() (*model.TIotDeviceHome, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceHome), nil
	}
}

func (t tIotDeviceHomeDo) Take() (*model.TIotDeviceHome, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceHome), nil
	}
}

func (t tIotDeviceHomeDo) Last() (*model.TIotDeviceHome, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceHome), nil
	}
}

func (t tIotDeviceHomeDo) Find() ([]*model.TIotDeviceHome, error) {
	result, err := t.DO.Find()
	return result.([]*model.TIotDeviceHome), err
}

func (t tIotDeviceHomeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TIotDeviceHome, err error) {
	buf := make([]*model.TIotDeviceHome, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tIotDeviceHomeDo) FindInBatches(result *[]*model.TIotDeviceHome, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tIotDeviceHomeDo) Attrs(attrs ...field.AssignExpr) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tIotDeviceHomeDo) Assign(attrs ...field.AssignExpr) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tIotDeviceHomeDo) Joins(field field.RelationField) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tIotDeviceHomeDo) Preload(field field.RelationField) *tIotDeviceHomeDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tIotDeviceHomeDo) FirstOrInit() (*model.TIotDeviceHome, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceHome), nil
	}
}

func (t tIotDeviceHomeDo) FirstOrCreate() (*model.TIotDeviceHome, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceHome), nil
	}
}

func (t tIotDeviceHomeDo) FindByPage(offset int, limit int) (result []*model.TIotDeviceHome, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tIotDeviceHomeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tIotDeviceHomeDo) withDO(do gen.Dao) *tIotDeviceHomeDo {
	t.DO = *do.(*gen.DO)
	return t
}
