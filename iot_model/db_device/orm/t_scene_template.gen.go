// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_device/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTSceneTemplate(db *gorm.DB) tSceneTemplate {
	_tSceneTemplate := tSceneTemplate{}

	_tSceneTemplate.tSceneTemplateDo.UseDB(db)
	_tSceneTemplate.tSceneTemplateDo.UseModel(&model.TSceneTemplate{})

	tableName := _tSceneTemplate.tSceneTemplateDo.TableName()
	_tSceneTemplate.ALL = field.NewField(tableName, "*")
	_tSceneTemplate.Id = field.NewInt64(tableName, "id")
	_tSceneTemplate.Type = field.NewInt32(tableName, "type")
	_tSceneTemplate.Title = field.NewString(tableName, "title")
	_tSceneTemplate.TitleEn = field.NewString(tableName, "title_en")
	_tSceneTemplate.Desc = field.NewString(tableName, "desc")
	_tSceneTemplate.DescEn = field.NewString(tableName, "desc_en")
	_tSceneTemplate.SortNo = field.NewInt32(tableName, "sort_no")
	_tSceneTemplate.Status = field.NewInt32(tableName, "status")
	_tSceneTemplate.ConditionMode = field.NewInt32(tableName, "condition_mode")
	_tSceneTemplate.Icon = field.NewString(tableName, "icon")
	_tSceneTemplate.UseCount = field.NewInt32(tableName, "use_count")
	_tSceneTemplate.CreatedBy = field.NewInt64(tableName, "created_by")
	_tSceneTemplate.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tSceneTemplate.CreatedAt = field.NewTime(tableName, "created_at")
	_tSceneTemplate.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tSceneTemplate.DeletedAt = field.NewField(tableName, "deleted_at")
	_tSceneTemplate.IsSpecifyApp = field.NewInt32(tableName, "is_specify_app")
	_tSceneTemplate.TenantId = field.NewString(tableName, "tenant_id")

	_tSceneTemplate.fillFieldMap()

	return _tSceneTemplate
}

type tSceneTemplate struct {
	tSceneTemplateDo tSceneTemplateDo

	ALL           field.Field
	Id            field.Int64
	Type          field.Int32
	Title         field.String
	TitleEn       field.String
	Desc          field.String
	DescEn        field.String
	SortNo        field.Int32
	Status        field.Int32
	ConditionMode field.Int32
	Icon          field.String
	UseCount      field.Int32
	CreatedBy     field.Int64
	UpdatedBy     field.Int64
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	IsSpecifyApp  field.Int32
	TenantId      field.String

	fieldMap map[string]field.Expr
}

func (t tSceneTemplate) Table(newTableName string) *tSceneTemplate {
	t.tSceneTemplateDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSceneTemplate) As(alias string) *tSceneTemplate {
	t.tSceneTemplateDo.DO = *(t.tSceneTemplateDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSceneTemplate) updateTableName(table string) *tSceneTemplate {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Type = field.NewInt32(table, "type")
	t.Title = field.NewString(table, "title")
	t.TitleEn = field.NewString(table, "title_en")
	t.Desc = field.NewString(table, "desc")
	t.DescEn = field.NewString(table, "desc_en")
	t.SortNo = field.NewInt32(table, "sort_no")
	t.Status = field.NewInt32(table, "status")
	t.ConditionMode = field.NewInt32(table, "condition_mode")
	t.Icon = field.NewString(table, "icon")
	t.UseCount = field.NewInt32(table, "use_count")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.IsSpecifyApp = field.NewInt32(table, "is_specify_app")
	t.TenantId = field.NewString(table, "tenant_id")

	t.fillFieldMap()

	return t
}

func (t *tSceneTemplate) WithContext(ctx context.Context) *tSceneTemplateDo {
	return t.tSceneTemplateDo.WithContext(ctx)
}

func (t tSceneTemplate) TableName() string { return t.tSceneTemplateDo.TableName() }

func (t tSceneTemplate) Alias() string { return t.tSceneTemplateDo.Alias() }

func (t *tSceneTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSceneTemplate) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 18)
	t.fieldMap["id"] = t.Id
	t.fieldMap["type"] = t.Type
	t.fieldMap["title"] = t.Title
	t.fieldMap["title_en"] = t.TitleEn
	t.fieldMap["desc"] = t.Desc
	t.fieldMap["desc_en"] = t.DescEn
	t.fieldMap["sort_no"] = t.SortNo
	t.fieldMap["status"] = t.Status
	t.fieldMap["condition_mode"] = t.ConditionMode
	t.fieldMap["icon"] = t.Icon
	t.fieldMap["use_count"] = t.UseCount
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["is_specify_app"] = t.IsSpecifyApp
	t.fieldMap["tenant_id"] = t.TenantId
}

func (t tSceneTemplate) clone(db *gorm.DB) tSceneTemplate {
	t.tSceneTemplateDo.ReplaceDB(db)
	return t
}

type tSceneTemplateDo struct{ gen.DO }

func (t tSceneTemplateDo) Debug() *tSceneTemplateDo {
	return t.withDO(t.DO.Debug())
}

func (t tSceneTemplateDo) WithContext(ctx context.Context) *tSceneTemplateDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSceneTemplateDo) Clauses(conds ...clause.Expression) *tSceneTemplateDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSceneTemplateDo) Returning(value interface{}, columns ...string) *tSceneTemplateDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSceneTemplateDo) Not(conds ...gen.Condition) *tSceneTemplateDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSceneTemplateDo) Or(conds ...gen.Condition) *tSceneTemplateDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSceneTemplateDo) Select(conds ...field.Expr) *tSceneTemplateDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSceneTemplateDo) Where(conds ...gen.Condition) *tSceneTemplateDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSceneTemplateDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tSceneTemplateDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tSceneTemplateDo) Order(conds ...field.Expr) *tSceneTemplateDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSceneTemplateDo) Distinct(cols ...field.Expr) *tSceneTemplateDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSceneTemplateDo) Omit(cols ...field.Expr) *tSceneTemplateDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSceneTemplateDo) Join(table schema.Tabler, on ...field.Expr) *tSceneTemplateDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSceneTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tSceneTemplateDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSceneTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) *tSceneTemplateDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSceneTemplateDo) Group(cols ...field.Expr) *tSceneTemplateDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSceneTemplateDo) Having(conds ...gen.Condition) *tSceneTemplateDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSceneTemplateDo) Limit(limit int) *tSceneTemplateDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSceneTemplateDo) Offset(offset int) *tSceneTemplateDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSceneTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tSceneTemplateDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSceneTemplateDo) Unscoped() *tSceneTemplateDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSceneTemplateDo) Create(values ...*model.TSceneTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSceneTemplateDo) CreateInBatches(values []*model.TSceneTemplate, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSceneTemplateDo) Save(values ...*model.TSceneTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSceneTemplateDo) First() (*model.TSceneTemplate, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneTemplate), nil
	}
}

func (t tSceneTemplateDo) Take() (*model.TSceneTemplate, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneTemplate), nil
	}
}

func (t tSceneTemplateDo) Last() (*model.TSceneTemplate, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneTemplate), nil
	}
}

func (t tSceneTemplateDo) Find() ([]*model.TSceneTemplate, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSceneTemplate), err
}

func (t tSceneTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSceneTemplate, err error) {
	buf := make([]*model.TSceneTemplate, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSceneTemplateDo) FindInBatches(result *[]*model.TSceneTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSceneTemplateDo) Attrs(attrs ...field.AssignExpr) *tSceneTemplateDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSceneTemplateDo) Assign(attrs ...field.AssignExpr) *tSceneTemplateDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSceneTemplateDo) Joins(field field.RelationField) *tSceneTemplateDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tSceneTemplateDo) Preload(field field.RelationField) *tSceneTemplateDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tSceneTemplateDo) FirstOrInit() (*model.TSceneTemplate, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneTemplate), nil
	}
}

func (t tSceneTemplateDo) FirstOrCreate() (*model.TSceneTemplate, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSceneTemplate), nil
	}
}

func (t tSceneTemplateDo) FindByPage(offset int, limit int) (result []*model.TSceneTemplate, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSceneTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tSceneTemplateDo) withDO(do gen.Dao) *tSceneTemplateDo {
	t.DO = *do.(*gen.DO)
	return t
}
