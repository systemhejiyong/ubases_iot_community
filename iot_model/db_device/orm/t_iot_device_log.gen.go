// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_device/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTIotDeviceLog(db *gorm.DB) tIotDeviceLog {
	_tIotDeviceLog := tIotDeviceLog{}

	_tIotDeviceLog.tIotDeviceLogDo.UseDB(db)
	_tIotDeviceLog.tIotDeviceLogDo.UseModel(&model.TIotDeviceLog{})

	tableName := _tIotDeviceLog.tIotDeviceLogDo.TableName()
	_tIotDeviceLog.ALL = field.NewField(tableName, "*")
	_tIotDeviceLog.Id = field.NewInt64(tableName, "id")
	_tIotDeviceLog.Did = field.NewString(tableName, "did")
	_tIotDeviceLog.ReportTime = field.NewTime(tableName, "report_time")
	_tIotDeviceLog.EventType = field.NewInt32(tableName, "event_type")
	_tIotDeviceLog.FuncKey = field.NewString(tableName, "func_key")
	_tIotDeviceLog.FuncValue = field.NewString(tableName, "func_value")
	_tIotDeviceLog.FuncDesc = field.NewString(tableName, "func_desc")
	_tIotDeviceLog.OriginType = field.NewInt32(tableName, "origin_type")
	_tIotDeviceLog.OriginDetail = field.NewString(tableName, "origin_detail")
	_tIotDeviceLog.CreatedAt = field.NewTime(tableName, "created_at")

	_tIotDeviceLog.fillFieldMap()

	return _tIotDeviceLog
}

type tIotDeviceLog struct {
	tIotDeviceLogDo tIotDeviceLogDo

	ALL          field.Field
	Id           field.Int64
	Did          field.String
	ReportTime   field.Time
	EventType    field.Int32
	FuncKey      field.String
	FuncValue    field.String
	FuncDesc     field.String
	OriginType   field.Int32
	OriginDetail field.String
	CreatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (t tIotDeviceLog) Table(newTableName string) *tIotDeviceLog {
	t.tIotDeviceLogDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tIotDeviceLog) As(alias string) *tIotDeviceLog {
	t.tIotDeviceLogDo.DO = *(t.tIotDeviceLogDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tIotDeviceLog) updateTableName(table string) *tIotDeviceLog {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Did = field.NewString(table, "did")
	t.ReportTime = field.NewTime(table, "report_time")
	t.EventType = field.NewInt32(table, "event_type")
	t.FuncKey = field.NewString(table, "func_key")
	t.FuncValue = field.NewString(table, "func_value")
	t.FuncDesc = field.NewString(table, "func_desc")
	t.OriginType = field.NewInt32(table, "origin_type")
	t.OriginDetail = field.NewString(table, "origin_detail")
	t.CreatedAt = field.NewTime(table, "created_at")

	t.fillFieldMap()

	return t
}

func (t *tIotDeviceLog) WithContext(ctx context.Context) *tIotDeviceLogDo {
	return t.tIotDeviceLogDo.WithContext(ctx)
}

func (t tIotDeviceLog) TableName() string { return t.tIotDeviceLogDo.TableName() }

func (t tIotDeviceLog) Alias() string { return t.tIotDeviceLogDo.Alias() }

func (t *tIotDeviceLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tIotDeviceLog) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.Id
	t.fieldMap["did"] = t.Did
	t.fieldMap["report_time"] = t.ReportTime
	t.fieldMap["event_type"] = t.EventType
	t.fieldMap["func_key"] = t.FuncKey
	t.fieldMap["func_value"] = t.FuncValue
	t.fieldMap["func_desc"] = t.FuncDesc
	t.fieldMap["origin_type"] = t.OriginType
	t.fieldMap["origin_detail"] = t.OriginDetail
	t.fieldMap["created_at"] = t.CreatedAt
}

func (t tIotDeviceLog) clone(db *gorm.DB) tIotDeviceLog {
	t.tIotDeviceLogDo.ReplaceDB(db)
	return t
}

type tIotDeviceLogDo struct{ gen.DO }

func (t tIotDeviceLogDo) Debug() *tIotDeviceLogDo {
	return t.withDO(t.DO.Debug())
}

func (t tIotDeviceLogDo) WithContext(ctx context.Context) *tIotDeviceLogDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tIotDeviceLogDo) Clauses(conds ...clause.Expression) *tIotDeviceLogDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tIotDeviceLogDo) Returning(value interface{}, columns ...string) *tIotDeviceLogDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tIotDeviceLogDo) Not(conds ...gen.Condition) *tIotDeviceLogDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tIotDeviceLogDo) Or(conds ...gen.Condition) *tIotDeviceLogDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tIotDeviceLogDo) Select(conds ...field.Expr) *tIotDeviceLogDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tIotDeviceLogDo) Where(conds ...gen.Condition) *tIotDeviceLogDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tIotDeviceLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tIotDeviceLogDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tIotDeviceLogDo) Order(conds ...field.Expr) *tIotDeviceLogDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tIotDeviceLogDo) Distinct(cols ...field.Expr) *tIotDeviceLogDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tIotDeviceLogDo) Omit(cols ...field.Expr) *tIotDeviceLogDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tIotDeviceLogDo) Join(table schema.Tabler, on ...field.Expr) *tIotDeviceLogDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tIotDeviceLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tIotDeviceLogDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tIotDeviceLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *tIotDeviceLogDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tIotDeviceLogDo) Group(cols ...field.Expr) *tIotDeviceLogDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tIotDeviceLogDo) Having(conds ...gen.Condition) *tIotDeviceLogDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tIotDeviceLogDo) Limit(limit int) *tIotDeviceLogDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tIotDeviceLogDo) Offset(offset int) *tIotDeviceLogDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tIotDeviceLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tIotDeviceLogDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tIotDeviceLogDo) Unscoped() *tIotDeviceLogDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tIotDeviceLogDo) Create(values ...*model.TIotDeviceLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tIotDeviceLogDo) CreateInBatches(values []*model.TIotDeviceLog, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tIotDeviceLogDo) Save(values ...*model.TIotDeviceLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tIotDeviceLogDo) First() (*model.TIotDeviceLog, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceLog), nil
	}
}

func (t tIotDeviceLogDo) Take() (*model.TIotDeviceLog, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceLog), nil
	}
}

func (t tIotDeviceLogDo) Last() (*model.TIotDeviceLog, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceLog), nil
	}
}

func (t tIotDeviceLogDo) Find() ([]*model.TIotDeviceLog, error) {
	result, err := t.DO.Find()
	return result.([]*model.TIotDeviceLog), err
}

func (t tIotDeviceLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TIotDeviceLog, err error) {
	buf := make([]*model.TIotDeviceLog, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tIotDeviceLogDo) FindInBatches(result *[]*model.TIotDeviceLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tIotDeviceLogDo) Attrs(attrs ...field.AssignExpr) *tIotDeviceLogDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tIotDeviceLogDo) Assign(attrs ...field.AssignExpr) *tIotDeviceLogDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tIotDeviceLogDo) Joins(field field.RelationField) *tIotDeviceLogDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tIotDeviceLogDo) Preload(field field.RelationField) *tIotDeviceLogDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tIotDeviceLogDo) FirstOrInit() (*model.TIotDeviceLog, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceLog), nil
	}
}

func (t tIotDeviceLogDo) FirstOrCreate() (*model.TIotDeviceLog, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotDeviceLog), nil
	}
}

func (t tIotDeviceLogDo) FindByPage(offset int, limit int) (result []*model.TIotDeviceLog, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tIotDeviceLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tIotDeviceLogDo) withDO(do gen.Dao) *tIotDeviceLogDo {
	t.DO = *do.(*gen.DO)
	return t
}
