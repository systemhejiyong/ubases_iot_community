// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"cloud_platform/iot_model/db_device/clickhouse/model"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTIotOtaUpgradeRecord(db *gorm.DB) tIotOtaUpgradeRecord {
	_tIotOtaUpgradeRecord := tIotOtaUpgradeRecord{}

	_tIotOtaUpgradeRecord.tIotOtaUpgradeRecordDo.UseDB(db)
	_tIotOtaUpgradeRecord.tIotOtaUpgradeRecordDo.UseModel(&model.TIotOtaUpgradeRecord{})

	tableName := _tIotOtaUpgradeRecord.tIotOtaUpgradeRecordDo.TableName()
	_tIotOtaUpgradeRecord.ALL = field.NewField(tableName, "*")
	_tIotOtaUpgradeRecord.Id = field.NewInt64(tableName, "id")
	_tIotOtaUpgradeRecord.Version = field.NewString(tableName, "version")
	_tIotOtaUpgradeRecord.PublishId = field.NewInt64(tableName, "publish_id")
	_tIotOtaUpgradeRecord.ProductKey = field.NewString(tableName, "product_key")
	_tIotOtaUpgradeRecord.DeviceId = field.NewString(tableName, "device_id")
	_tIotOtaUpgradeRecord.OriginalVersion = field.NewString(tableName, "original_version")
	_tIotOtaUpgradeRecord.Status = field.NewInt32(tableName, "status")
	_tIotOtaUpgradeRecord.IsGray = field.NewInt32(tableName, "is_gray")
	_tIotOtaUpgradeRecord.TenantId = field.NewString(tableName, "tenant_id")
	_tIotOtaUpgradeRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_tIotOtaUpgradeRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tIotOtaUpgradeRecord.OtaState = field.NewString(tableName, "ota_state")
	_tIotOtaUpgradeRecord.OtaCode = field.NewInt32(tableName, "ota_code")
	_tIotOtaUpgradeRecord.OtaProgress = field.NewInt32(tableName, "ota_progress")
	_tIotOtaUpgradeRecord.Area = field.NewString(tableName, "area")
	_tIotOtaUpgradeRecord.FwVer = field.NewString(tableName, "fw_ver")
	_tIotOtaUpgradeRecord.IsAutoUpgrade = field.NewInt32(tableName, "is_auto_upgrade")

	_tIotOtaUpgradeRecord.fillFieldMap()

	return _tIotOtaUpgradeRecord
}

type tIotOtaUpgradeRecord struct {
	tIotOtaUpgradeRecordDo tIotOtaUpgradeRecordDo

	ALL             field.Field
	Id              field.Int64
	Version         field.String
	PublishId       field.Int64
	ProductKey      field.String
	DeviceId        field.String
	OriginalVersion field.String
	Status          field.Int32
	IsGray          field.Int32
	TenantId        field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time
	OtaState        field.String
	OtaCode         field.Int32
	OtaProgress     field.Int32
	Area            field.String
	FwVer           field.String
	IsAutoUpgrade   field.Int32

	fieldMap map[string]field.Expr
}

func (t tIotOtaUpgradeRecord) Table(newTableName string) *tIotOtaUpgradeRecord {
	t.tIotOtaUpgradeRecordDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tIotOtaUpgradeRecord) As(alias string) *tIotOtaUpgradeRecord {
	t.tIotOtaUpgradeRecordDo.DO = *(t.tIotOtaUpgradeRecordDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tIotOtaUpgradeRecord) updateTableName(table string) *tIotOtaUpgradeRecord {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Version = field.NewString(table, "version")
	t.PublishId = field.NewInt64(table, "publish_id")
	t.ProductKey = field.NewString(table, "product_key")
	t.DeviceId = field.NewString(table, "device_id")
	t.OriginalVersion = field.NewString(table, "original_version")
	t.Status = field.NewInt32(table, "status")
	t.IsGray = field.NewInt32(table, "is_gray")
	t.TenantId = field.NewString(table, "tenant_id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.OtaState = field.NewString(table, "ota_state")
	t.OtaCode = field.NewInt32(table, "ota_code")
	t.OtaProgress = field.NewInt32(table, "ota_progress")
	t.Area = field.NewString(table, "area")
	t.FwVer = field.NewString(table, "fw_ver")
	t.IsAutoUpgrade = field.NewInt32(table, "is_auto_upgrade")

	t.fillFieldMap()

	return t
}

func (t *tIotOtaUpgradeRecord) WithContext(ctx context.Context) *tIotOtaUpgradeRecordDo {
	return t.tIotOtaUpgradeRecordDo.WithContext(ctx)
}

func (t tIotOtaUpgradeRecord) TableName() string { return t.tIotOtaUpgradeRecordDo.TableName() }

func (t tIotOtaUpgradeRecord) Alias() string { return t.tIotOtaUpgradeRecordDo.Alias() }

func (t *tIotOtaUpgradeRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tIotOtaUpgradeRecord) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 17)
	t.fieldMap["id"] = t.Id
	t.fieldMap["version"] = t.Version
	t.fieldMap["publish_id"] = t.PublishId
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["device_id"] = t.DeviceId
	t.fieldMap["original_version"] = t.OriginalVersion
	t.fieldMap["status"] = t.Status
	t.fieldMap["is_gray"] = t.IsGray
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["ota_state"] = t.OtaState
	t.fieldMap["ota_code"] = t.OtaCode
	t.fieldMap["ota_progress"] = t.OtaProgress
	t.fieldMap["area"] = t.Area
	t.fieldMap["fw_ver"] = t.FwVer
	t.fieldMap["is_auto_upgrade"] = t.IsAutoUpgrade
}

func (t tIotOtaUpgradeRecord) clone(db *gorm.DB) tIotOtaUpgradeRecord {
	t.tIotOtaUpgradeRecordDo.ReplaceDB(db)
	return t
}

type tIotOtaUpgradeRecordDo struct{ gen.DO }

func (t tIotOtaUpgradeRecordDo) Debug() *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Debug())
}

func (t tIotOtaUpgradeRecordDo) WithContext(ctx context.Context) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tIotOtaUpgradeRecordDo) Clauses(conds ...clause.Expression) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tIotOtaUpgradeRecordDo) Returning(value interface{}, columns ...string) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tIotOtaUpgradeRecordDo) Not(conds ...gen.Condition) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tIotOtaUpgradeRecordDo) Or(conds ...gen.Condition) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tIotOtaUpgradeRecordDo) Select(conds ...field.Expr) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tIotOtaUpgradeRecordDo) Where(conds ...gen.Condition) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tIotOtaUpgradeRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tIotOtaUpgradeRecordDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tIotOtaUpgradeRecordDo) Order(conds ...field.Expr) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tIotOtaUpgradeRecordDo) Distinct(cols ...field.Expr) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tIotOtaUpgradeRecordDo) Omit(cols ...field.Expr) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tIotOtaUpgradeRecordDo) Join(table schema.Tabler, on ...field.Expr) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tIotOtaUpgradeRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tIotOtaUpgradeRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tIotOtaUpgradeRecordDo) Group(cols ...field.Expr) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tIotOtaUpgradeRecordDo) Having(conds ...gen.Condition) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tIotOtaUpgradeRecordDo) Limit(limit int) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tIotOtaUpgradeRecordDo) Offset(offset int) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tIotOtaUpgradeRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tIotOtaUpgradeRecordDo) Unscoped() *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tIotOtaUpgradeRecordDo) Create(values ...*model.TIotOtaUpgradeRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tIotOtaUpgradeRecordDo) CreateInBatches(values []*model.TIotOtaUpgradeRecord, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tIotOtaUpgradeRecordDo) Save(values ...*model.TIotOtaUpgradeRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tIotOtaUpgradeRecordDo) First() (*model.TIotOtaUpgradeRecord, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotOtaUpgradeRecord), nil
	}
}

func (t tIotOtaUpgradeRecordDo) Take() (*model.TIotOtaUpgradeRecord, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotOtaUpgradeRecord), nil
	}
}

func (t tIotOtaUpgradeRecordDo) Last() (*model.TIotOtaUpgradeRecord, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotOtaUpgradeRecord), nil
	}
}

func (t tIotOtaUpgradeRecordDo) Find() ([]*model.TIotOtaUpgradeRecord, error) {
	result, err := t.DO.Find()
	return result.([]*model.TIotOtaUpgradeRecord), err
}

func (t tIotOtaUpgradeRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TIotOtaUpgradeRecord, err error) {
	buf := make([]*model.TIotOtaUpgradeRecord, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tIotOtaUpgradeRecordDo) FindInBatches(result *[]*model.TIotOtaUpgradeRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tIotOtaUpgradeRecordDo) Attrs(attrs ...field.AssignExpr) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tIotOtaUpgradeRecordDo) Assign(attrs ...field.AssignExpr) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tIotOtaUpgradeRecordDo) Joins(field field.RelationField) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tIotOtaUpgradeRecordDo) Preload(field field.RelationField) *tIotOtaUpgradeRecordDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tIotOtaUpgradeRecordDo) FirstOrInit() (*model.TIotOtaUpgradeRecord, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotOtaUpgradeRecord), nil
	}
}

func (t tIotOtaUpgradeRecordDo) FirstOrCreate() (*model.TIotOtaUpgradeRecord, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TIotOtaUpgradeRecord), nil
	}
}

func (t tIotOtaUpgradeRecordDo) FindByPage(offset int, limit int) (result []*model.TIotOtaUpgradeRecord, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tIotOtaUpgradeRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tIotOtaUpgradeRecordDo) withDO(do gen.Dao) *tIotOtaUpgradeRecordDo {
	t.DO = *do.(*gen.DO)
	return t
}
