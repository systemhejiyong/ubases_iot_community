// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"cloud_platform/iot_model/db_config/model"
	"context"

	"gorm.io/gen/field"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
)

func newTConfigOss(db *gorm.DB) tConfigOss {
	_tConfigOss := tConfigOss{}

	_tConfigOss.tConfigOssDo.UseDB(db)
	_tConfigOss.tConfigOssDo.UseModel(&model.TConfigOss{})

	tableName := _tConfigOss.tConfigOssDo.TableName()
	_tConfigOss.ALL = field.NewField(tableName, "*")
	_tConfigOss.Id = field.NewInt64(tableName, "id")
	_tConfigOss.RegionId = field.NewInt64(tableName, "region_id")
	_tConfigOss.AccessKeyId = field.NewString(tableName, "access_key_id")
	_tConfigOss.AccessKeySecret = field.NewString(tableName, "access_key_secret")
	_tConfigOss.RoleArn = field.NewString(tableName, "role_arn")
	_tConfigOss.RoleSessionName = field.NewString(tableName, "role_session_name")
	_tConfigOss.Bucket = field.NewString(tableName, "bucket")
	_tConfigOss.Endpoint = field.NewString(tableName, "endpoint")
	_tConfigOss.OssName = field.NewString(tableName, "oss_name")
	_tConfigOss.Remark = field.NewString(tableName, "remark")
	_tConfigOss.Status = field.NewInt32(tableName, "status")
	_tConfigOss.CreatedBy = field.NewInt64(tableName, "created_by")
	_tConfigOss.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tConfigOss.CreatedAt = field.NewTime(tableName, "created_at")
	_tConfigOss.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tConfigOss.DeletedAt = field.NewField(tableName, "deleted_at")

	_tConfigOss.fillFieldMap()

	return _tConfigOss
}

type tConfigOss struct {
	tConfigOssDo tConfigOssDo

	ALL             field.Field
	Id              field.Int64
	RegionId        field.Int64
	AccessKeyId     field.String
	AccessKeySecret field.String
	RoleArn         field.String
	RoleSessionName field.String
	Bucket          field.String
	Endpoint        field.String
	OssName         field.String
	Remark          field.String
	Status          field.Int32
	CreatedBy       field.Int64
	UpdatedBy       field.Int64
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field

	fieldMap map[string]field.Expr
}

func (t tConfigOss) Table(newTableName string) *tConfigOss {
	t.tConfigOssDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tConfigOss) As(alias string) *tConfigOss {
	t.tConfigOssDo.DO = *(t.tConfigOssDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tConfigOss) updateTableName(table string) *tConfigOss {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.RegionId = field.NewInt64(table, "region_id")
	t.AccessKeyId = field.NewString(table, "access_key_id")
	t.AccessKeySecret = field.NewString(table, "access_key_secret")
	t.RoleArn = field.NewString(table, "role_arn")
	t.RoleSessionName = field.NewString(table, "role_session_name")
	t.Bucket = field.NewString(table, "bucket")
	t.Endpoint = field.NewString(table, "endpoint")
	t.OssName = field.NewString(table, "oss_name")
	t.Remark = field.NewString(table, "remark")
	t.Status = field.NewInt32(table, "status")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tConfigOss) WithContext(ctx context.Context) *tConfigOssDo {
	return t.tConfigOssDo.WithContext(ctx)
}

func (t tConfigOss) TableName() string { return t.tConfigOssDo.TableName() }

func (t tConfigOss) Alias() string { return t.tConfigOssDo.Alias() }

func (t *tConfigOss) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tConfigOss) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 16)
	t.fieldMap["id"] = t.Id
	t.fieldMap["region_id"] = t.RegionId
	t.fieldMap["access_key_id"] = t.AccessKeyId
	t.fieldMap["access_key_secret"] = t.AccessKeySecret
	t.fieldMap["role_arn"] = t.RoleArn
	t.fieldMap["role_session_name"] = t.RoleSessionName
	t.fieldMap["bucket"] = t.Bucket
	t.fieldMap["endpoint"] = t.Endpoint
	t.fieldMap["oss_name"] = t.OssName
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tConfigOss) clone(db *gorm.DB) tConfigOss {
	t.tConfigOssDo.ReplaceDB(db)
	return t
}

type tConfigOssDo struct{ gen.DO }

func (t tConfigOssDo) Debug() *tConfigOssDo {
	return t.withDO(t.DO.Debug())
}

func (t tConfigOssDo) WithContext(ctx context.Context) *tConfigOssDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tConfigOssDo) Clauses(conds ...clause.Expression) *tConfigOssDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tConfigOssDo) Returning(value interface{}, columns ...string) *tConfigOssDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tConfigOssDo) Not(conds ...gen.Condition) *tConfigOssDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tConfigOssDo) Or(conds ...gen.Condition) *tConfigOssDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tConfigOssDo) Select(conds ...field.Expr) *tConfigOssDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tConfigOssDo) Where(conds ...gen.Condition) *tConfigOssDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tConfigOssDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tConfigOssDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tConfigOssDo) Order(conds ...field.Expr) *tConfigOssDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tConfigOssDo) Distinct(cols ...field.Expr) *tConfigOssDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tConfigOssDo) Omit(cols ...field.Expr) *tConfigOssDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tConfigOssDo) Join(table schema.Tabler, on ...field.Expr) *tConfigOssDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tConfigOssDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tConfigOssDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tConfigOssDo) RightJoin(table schema.Tabler, on ...field.Expr) *tConfigOssDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tConfigOssDo) Group(cols ...field.Expr) *tConfigOssDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tConfigOssDo) Having(conds ...gen.Condition) *tConfigOssDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tConfigOssDo) Limit(limit int) *tConfigOssDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tConfigOssDo) Offset(offset int) *tConfigOssDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tConfigOssDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tConfigOssDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tConfigOssDo) Unscoped() *tConfigOssDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tConfigOssDo) Create(values ...*model.TConfigOss) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tConfigOssDo) CreateInBatches(values []*model.TConfigOss, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tConfigOssDo) Save(values ...*model.TConfigOss) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tConfigOssDo) First() (*model.TConfigOss, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigOss), nil
	}
}

func (t tConfigOssDo) Take() (*model.TConfigOss, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigOss), nil
	}
}

func (t tConfigOssDo) Last() (*model.TConfigOss, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigOss), nil
	}
}

func (t tConfigOssDo) Find() ([]*model.TConfigOss, error) {
	result, err := t.DO.Find()
	return result.([]*model.TConfigOss), err
}

func (t tConfigOssDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TConfigOss, err error) {
	buf := make([]*model.TConfigOss, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tConfigOssDo) FindInBatches(result *[]*model.TConfigOss, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tConfigOssDo) Attrs(attrs ...field.AssignExpr) *tConfigOssDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tConfigOssDo) Assign(attrs ...field.AssignExpr) *tConfigOssDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tConfigOssDo) Joins(field field.RelationField) *tConfigOssDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tConfigOssDo) Preload(field field.RelationField) *tConfigOssDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tConfigOssDo) FirstOrInit() (*model.TConfigOss, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigOss), nil
	}
}

func (t tConfigOssDo) FirstOrCreate() (*model.TConfigOss, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigOss), nil
	}
}

func (t tConfigOssDo) FindByPage(offset int, limit int) (result []*model.TConfigOss, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tConfigOssDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tConfigOssDo) withDO(do gen.Dao) *tConfigOssDo {
	t.DO = *do.(*gen.DO)
	return t
}
