// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"cloud_platform/iot_model/db_config/model"
	"context"

	"gorm.io/gen/field"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
)

func newTSysRegion(db *gorm.DB) tSysRegion {
	_tSysRegion := tSysRegion{}

	_tSysRegion.tSysRegionDo.UseDB(db)
	_tSysRegion.tSysRegionDo.UseModel(&model.TSysRegion{})

	tableName := _tSysRegion.tSysRegionDo.TableName()
	_tSysRegion.ALL = field.NewField(tableName, "*")
	_tSysRegion.Id = field.NewInt64(tableName, "id")
	_tSysRegion.Code = field.NewString(tableName, "code")
	_tSysRegion.Name = field.NewString(tableName, "name")
	_tSysRegion.Level = field.NewInt32(tableName, "level")
	_tSysRegion.ParentId = field.NewInt64(tableName, "parent_id")
	_tSysRegion.Lat = field.NewFloat64(tableName, "lat")
	_tSysRegion.Lng = field.NewFloat64(tableName, "lng")
	_tSysRegion.Sid = field.NewInt64(tableName, "sid")
	_tSysRegion.CreatedBy = field.NewInt64(tableName, "created_by")
	_tSysRegion.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tSysRegion.CreatedAt = field.NewTime(tableName, "created_at")
	_tSysRegion.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tSysRegion.DeletedAt = field.NewField(tableName, "deleted_at")

	_tSysRegion.fillFieldMap()

	return _tSysRegion
}

type tSysRegion struct {
	tSysRegionDo tSysRegionDo

	ALL       field.Field
	Id        field.Int64
	Code      field.String
	Name      field.String
	Level     field.Int32
	ParentId  field.Int64
	Lat       field.Float64
	Lng       field.Float64
	Sid       field.Int64
	CreatedBy field.Int64
	UpdatedBy field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (t tSysRegion) Table(newTableName string) *tSysRegion {
	t.tSysRegionDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSysRegion) As(alias string) *tSysRegion {
	t.tSysRegionDo.DO = *(t.tSysRegionDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSysRegion) updateTableName(table string) *tSysRegion {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Code = field.NewString(table, "code")
	t.Name = field.NewString(table, "name")
	t.Level = field.NewInt32(table, "level")
	t.ParentId = field.NewInt64(table, "parent_id")
	t.Lat = field.NewFloat64(table, "lat")
	t.Lng = field.NewFloat64(table, "lng")
	t.Sid = field.NewInt64(table, "sid")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tSysRegion) WithContext(ctx context.Context) *tSysRegionDo {
	return t.tSysRegionDo.WithContext(ctx)
}

func (t tSysRegion) TableName() string { return t.tSysRegionDo.TableName() }

func (t tSysRegion) Alias() string { return t.tSysRegionDo.Alias() }

func (t *tSysRegion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSysRegion) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.Id
	t.fieldMap["code"] = t.Code
	t.fieldMap["name"] = t.Name
	t.fieldMap["level"] = t.Level
	t.fieldMap["parent_id"] = t.ParentId
	t.fieldMap["lat"] = t.Lat
	t.fieldMap["lng"] = t.Lng
	t.fieldMap["sid"] = t.Sid
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tSysRegion) clone(db *gorm.DB) tSysRegion {
	t.tSysRegionDo.ReplaceDB(db)
	return t
}

type tSysRegionDo struct{ gen.DO }

func (t tSysRegionDo) Debug() *tSysRegionDo {
	return t.withDO(t.DO.Debug())
}

func (t tSysRegionDo) WithContext(ctx context.Context) *tSysRegionDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSysRegionDo) Clauses(conds ...clause.Expression) *tSysRegionDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSysRegionDo) Returning(value interface{}, columns ...string) *tSysRegionDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSysRegionDo) Not(conds ...gen.Condition) *tSysRegionDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSysRegionDo) Or(conds ...gen.Condition) *tSysRegionDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSysRegionDo) Select(conds ...field.Expr) *tSysRegionDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSysRegionDo) Where(conds ...gen.Condition) *tSysRegionDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSysRegionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tSysRegionDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tSysRegionDo) Order(conds ...field.Expr) *tSysRegionDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSysRegionDo) Distinct(cols ...field.Expr) *tSysRegionDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSysRegionDo) Omit(cols ...field.Expr) *tSysRegionDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSysRegionDo) Join(table schema.Tabler, on ...field.Expr) *tSysRegionDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSysRegionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tSysRegionDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSysRegionDo) RightJoin(table schema.Tabler, on ...field.Expr) *tSysRegionDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSysRegionDo) Group(cols ...field.Expr) *tSysRegionDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSysRegionDo) Having(conds ...gen.Condition) *tSysRegionDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSysRegionDo) Limit(limit int) *tSysRegionDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSysRegionDo) Offset(offset int) *tSysRegionDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSysRegionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tSysRegionDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSysRegionDo) Unscoped() *tSysRegionDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSysRegionDo) Create(values ...*model.TSysRegion) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSysRegionDo) CreateInBatches(values []*model.TSysRegion, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSysRegionDo) Save(values ...*model.TSysRegion) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSysRegionDo) First() (*model.TSysRegion, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysRegion), nil
	}
}

func (t tSysRegionDo) Take() (*model.TSysRegion, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysRegion), nil
	}
}

func (t tSysRegionDo) Last() (*model.TSysRegion, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysRegion), nil
	}
}

func (t tSysRegionDo) Find() ([]*model.TSysRegion, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSysRegion), err
}

func (t tSysRegionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSysRegion, err error) {
	buf := make([]*model.TSysRegion, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSysRegionDo) FindInBatches(result *[]*model.TSysRegion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSysRegionDo) Attrs(attrs ...field.AssignExpr) *tSysRegionDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSysRegionDo) Assign(attrs ...field.AssignExpr) *tSysRegionDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSysRegionDo) Joins(field field.RelationField) *tSysRegionDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tSysRegionDo) Preload(field field.RelationField) *tSysRegionDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tSysRegionDo) FirstOrInit() (*model.TSysRegion, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysRegion), nil
	}
}

func (t tSysRegionDo) FirstOrCreate() (*model.TSysRegion, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysRegion), nil
	}
}

func (t tSysRegionDo) FindByPage(offset int, limit int) (result []*model.TSysRegion, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSysRegionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tSysRegionDo) withDO(do gen.Dao) *tSysRegionDo {
	t.DO = *do.(*gen.DO)
	return t
}
