// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"cloud_platform/iot_model/db_config/model"
	"context"

	"gorm.io/gen/field"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
)

func newTSysArea(db *gorm.DB) tSysArea {
	_tSysArea := tSysArea{}

	_tSysArea.tSysAreaDo.UseDB(db)
	_tSysArea.tSysAreaDo.UseModel(&model.TSysArea{})

	tableName := _tSysArea.tSysAreaDo.TableName()
	_tSysArea.ALL = field.NewField(tableName, "*")
	_tSysArea.Id = field.NewInt64(tableName, "id")
	_tSysArea.Pid = field.NewInt64(tableName, "pid")
	_tSysArea.Level = field.NewInt32(tableName, "level")
	_tSysArea.Path = field.NewString(tableName, "path")
	_tSysArea.Code = field.NewString(tableName, "code")
	_tSysArea.AreaNumber = field.NewString(tableName, "area_number")
	_tSysArea.AreaPhoneNumber = field.NewString(tableName, "area_phone_number")
	_tSysArea.Abbreviation = field.NewString(tableName, "abbreviation")
	_tSysArea.Iso = field.NewString(tableName, "iso")
	_tSysArea.ChineseName = field.NewString(tableName, "chinese_name")
	_tSysArea.EnglishName = field.NewString(tableName, "english_name")
	_tSysArea.Pinyin = field.NewString(tableName, "pinyin")

	_tSysArea.fillFieldMap()

	return _tSysArea
}

type tSysArea struct {
	tSysAreaDo tSysAreaDo

	ALL             field.Field
	Id              field.Int64
	Pid             field.Int64
	Level           field.Int32
	Path            field.String
	Code            field.String
	AreaNumber      field.String
	AreaPhoneNumber field.String
	Abbreviation    field.String
	Iso             field.String
	ChineseName     field.String
	EnglishName     field.String
	Pinyin          field.String

	fieldMap map[string]field.Expr
}

func (t tSysArea) Table(newTableName string) *tSysArea {
	t.tSysAreaDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSysArea) As(alias string) *tSysArea {
	t.tSysAreaDo.DO = *(t.tSysAreaDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSysArea) updateTableName(table string) *tSysArea {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Pid = field.NewInt64(table, "pid")
	t.Level = field.NewInt32(table, "level")
	t.Path = field.NewString(table, "path")
	t.Code = field.NewString(table, "code")
	t.AreaNumber = field.NewString(table, "area_number")
	t.AreaPhoneNumber = field.NewString(table, "area_phone_number")
	t.Abbreviation = field.NewString(table, "abbreviation")
	t.Iso = field.NewString(table, "iso")
	t.ChineseName = field.NewString(table, "chinese_name")
	t.EnglishName = field.NewString(table, "english_name")
	t.Pinyin = field.NewString(table, "pinyin")

	t.fillFieldMap()

	return t
}

func (t *tSysArea) WithContext(ctx context.Context) *tSysAreaDo { return t.tSysAreaDo.WithContext(ctx) }

func (t tSysArea) TableName() string { return t.tSysAreaDo.TableName() }

func (t tSysArea) Alias() string { return t.tSysAreaDo.Alias() }

func (t *tSysArea) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSysArea) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.Id
	t.fieldMap["pid"] = t.Pid
	t.fieldMap["level"] = t.Level
	t.fieldMap["path"] = t.Path
	t.fieldMap["code"] = t.Code
	t.fieldMap["area_number"] = t.AreaNumber
	t.fieldMap["area_phone_number"] = t.AreaPhoneNumber
	t.fieldMap["abbreviation"] = t.Abbreviation
	t.fieldMap["iso"] = t.Iso
	t.fieldMap["chinese_name"] = t.ChineseName
	t.fieldMap["english_name"] = t.EnglishName
	t.fieldMap["pinyin"] = t.Pinyin
}

func (t tSysArea) clone(db *gorm.DB) tSysArea {
	t.tSysAreaDo.ReplaceDB(db)
	return t
}

type tSysAreaDo struct{ gen.DO }

func (t tSysAreaDo) Debug() *tSysAreaDo {
	return t.withDO(t.DO.Debug())
}

func (t tSysAreaDo) WithContext(ctx context.Context) *tSysAreaDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSysAreaDo) Clauses(conds ...clause.Expression) *tSysAreaDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSysAreaDo) Returning(value interface{}, columns ...string) *tSysAreaDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSysAreaDo) Not(conds ...gen.Condition) *tSysAreaDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSysAreaDo) Or(conds ...gen.Condition) *tSysAreaDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSysAreaDo) Select(conds ...field.Expr) *tSysAreaDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSysAreaDo) Where(conds ...gen.Condition) *tSysAreaDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSysAreaDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tSysAreaDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tSysAreaDo) Order(conds ...field.Expr) *tSysAreaDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSysAreaDo) Distinct(cols ...field.Expr) *tSysAreaDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSysAreaDo) Omit(cols ...field.Expr) *tSysAreaDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSysAreaDo) Join(table schema.Tabler, on ...field.Expr) *tSysAreaDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSysAreaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tSysAreaDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSysAreaDo) RightJoin(table schema.Tabler, on ...field.Expr) *tSysAreaDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSysAreaDo) Group(cols ...field.Expr) *tSysAreaDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSysAreaDo) Having(conds ...gen.Condition) *tSysAreaDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSysAreaDo) Limit(limit int) *tSysAreaDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSysAreaDo) Offset(offset int) *tSysAreaDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSysAreaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tSysAreaDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSysAreaDo) Unscoped() *tSysAreaDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSysAreaDo) Create(values ...*model.TSysArea) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSysAreaDo) CreateInBatches(values []*model.TSysArea, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSysAreaDo) Save(values ...*model.TSysArea) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSysAreaDo) First() (*model.TSysArea, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysArea), nil
	}
}

func (t tSysAreaDo) Take() (*model.TSysArea, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysArea), nil
	}
}

func (t tSysAreaDo) Last() (*model.TSysArea, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysArea), nil
	}
}

func (t tSysAreaDo) Find() ([]*model.TSysArea, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSysArea), err
}

func (t tSysAreaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSysArea, err error) {
	buf := make([]*model.TSysArea, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSysAreaDo) FindInBatches(result *[]*model.TSysArea, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSysAreaDo) Attrs(attrs ...field.AssignExpr) *tSysAreaDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSysAreaDo) Assign(attrs ...field.AssignExpr) *tSysAreaDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSysAreaDo) Joins(field field.RelationField) *tSysAreaDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tSysAreaDo) Preload(field field.RelationField) *tSysAreaDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tSysAreaDo) FirstOrInit() (*model.TSysArea, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysArea), nil
	}
}

func (t tSysAreaDo) FirstOrCreate() (*model.TSysArea, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysArea), nil
	}
}

func (t tSysAreaDo) FindByPage(offset int, limit int) (result []*model.TSysArea, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSysAreaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tSysAreaDo) withDO(do gen.Dao) *tSysAreaDo {
	t.DO = *do.(*gen.DO)
	return t
}
