// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"cloud_platform/iot_model/db_config/model"
	"context"

	"gorm.io/gen/field"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
)

func newTConfigLicense(db *gorm.DB) tConfigLicense {
	_tConfigLicense := tConfigLicense{}

	_tConfigLicense.tConfigLicenseDo.UseDB(db)
	_tConfigLicense.tConfigLicenseDo.UseModel(&model.TConfigLicense{})

	tableName := _tConfigLicense.tConfigLicenseDo.TableName()
	_tConfigLicense.ALL = field.NewField(tableName, "*")
	_tConfigLicense.Id = field.NewInt64(tableName, "id")
	_tConfigLicense.BelongType = field.NewInt32(tableName, "belong_type")
	_tConfigLicense.BelongId = field.NewInt64(tableName, "belong_id")
	_tConfigLicense.MachineId = field.NewString(tableName, "machine_id")
	_tConfigLicense.License = field.NewString(tableName, "license")
	_tConfigLicense.LicenseType = field.NewInt32(tableName, "license_type")
	_tConfigLicense.AgentNumber = field.NewInt32(tableName, "agent_number")
	_tConfigLicense.SurplusagentNumber = field.NewInt32(tableName, "surplusagent_number")
	_tConfigLicense.Type = field.NewInt32(tableName, "type")
	_tConfigLicense.Timeout = field.NewTime(tableName, "timeout")
	_tConfigLicense.CreatedBy = field.NewInt64(tableName, "created_by")
	_tConfigLicense.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tConfigLicense.CreatedAt = field.NewTime(tableName, "created_at")
	_tConfigLicense.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tConfigLicense.DeletedAt = field.NewField(tableName, "deleted_at")

	_tConfigLicense.fillFieldMap()

	return _tConfigLicense
}

type tConfigLicense struct {
	tConfigLicenseDo tConfigLicenseDo

	ALL                field.Field
	Id                 field.Int64
	BelongType         field.Int32
	BelongId           field.Int64
	MachineId          field.String
	License            field.String
	LicenseType        field.Int32
	AgentNumber        field.Int32
	SurplusagentNumber field.Int32
	Type               field.Int32
	Timeout            field.Time
	CreatedBy          field.Int64
	UpdatedBy          field.Int64
	CreatedAt          field.Time
	UpdatedAt          field.Time
	DeletedAt          field.Field

	fieldMap map[string]field.Expr
}

func (t tConfigLicense) Table(newTableName string) *tConfigLicense {
	t.tConfigLicenseDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tConfigLicense) As(alias string) *tConfigLicense {
	t.tConfigLicenseDo.DO = *(t.tConfigLicenseDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tConfigLicense) updateTableName(table string) *tConfigLicense {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.BelongType = field.NewInt32(table, "belong_type")
	t.BelongId = field.NewInt64(table, "belong_id")
	t.MachineId = field.NewString(table, "machine_id")
	t.License = field.NewString(table, "license")
	t.LicenseType = field.NewInt32(table, "license_type")
	t.AgentNumber = field.NewInt32(table, "agent_number")
	t.SurplusagentNumber = field.NewInt32(table, "surplusagent_number")
	t.Type = field.NewInt32(table, "type")
	t.Timeout = field.NewTime(table, "timeout")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tConfigLicense) WithContext(ctx context.Context) *tConfigLicenseDo {
	return t.tConfigLicenseDo.WithContext(ctx)
}

func (t tConfigLicense) TableName() string { return t.tConfigLicenseDo.TableName() }

func (t tConfigLicense) Alias() string { return t.tConfigLicenseDo.Alias() }

func (t *tConfigLicense) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tConfigLicense) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 15)
	t.fieldMap["id"] = t.Id
	t.fieldMap["belong_type"] = t.BelongType
	t.fieldMap["belong_id"] = t.BelongId
	t.fieldMap["machine_id"] = t.MachineId
	t.fieldMap["license"] = t.License
	t.fieldMap["license_type"] = t.LicenseType
	t.fieldMap["agent_number"] = t.AgentNumber
	t.fieldMap["surplusagent_number"] = t.SurplusagentNumber
	t.fieldMap["type"] = t.Type
	t.fieldMap["timeout"] = t.Timeout
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tConfigLicense) clone(db *gorm.DB) tConfigLicense {
	t.tConfigLicenseDo.ReplaceDB(db)
	return t
}

type tConfigLicenseDo struct{ gen.DO }

func (t tConfigLicenseDo) Debug() *tConfigLicenseDo {
	return t.withDO(t.DO.Debug())
}

func (t tConfigLicenseDo) WithContext(ctx context.Context) *tConfigLicenseDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tConfigLicenseDo) Clauses(conds ...clause.Expression) *tConfigLicenseDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tConfigLicenseDo) Returning(value interface{}, columns ...string) *tConfigLicenseDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tConfigLicenseDo) Not(conds ...gen.Condition) *tConfigLicenseDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tConfigLicenseDo) Or(conds ...gen.Condition) *tConfigLicenseDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tConfigLicenseDo) Select(conds ...field.Expr) *tConfigLicenseDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tConfigLicenseDo) Where(conds ...gen.Condition) *tConfigLicenseDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tConfigLicenseDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tConfigLicenseDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tConfigLicenseDo) Order(conds ...field.Expr) *tConfigLicenseDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tConfigLicenseDo) Distinct(cols ...field.Expr) *tConfigLicenseDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tConfigLicenseDo) Omit(cols ...field.Expr) *tConfigLicenseDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tConfigLicenseDo) Join(table schema.Tabler, on ...field.Expr) *tConfigLicenseDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tConfigLicenseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tConfigLicenseDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tConfigLicenseDo) RightJoin(table schema.Tabler, on ...field.Expr) *tConfigLicenseDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tConfigLicenseDo) Group(cols ...field.Expr) *tConfigLicenseDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tConfigLicenseDo) Having(conds ...gen.Condition) *tConfigLicenseDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tConfigLicenseDo) Limit(limit int) *tConfigLicenseDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tConfigLicenseDo) Offset(offset int) *tConfigLicenseDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tConfigLicenseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tConfigLicenseDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tConfigLicenseDo) Unscoped() *tConfigLicenseDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tConfigLicenseDo) Create(values ...*model.TConfigLicense) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tConfigLicenseDo) CreateInBatches(values []*model.TConfigLicense, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tConfigLicenseDo) Save(values ...*model.TConfigLicense) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tConfigLicenseDo) First() (*model.TConfigLicense, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigLicense), nil
	}
}

func (t tConfigLicenseDo) Take() (*model.TConfigLicense, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigLicense), nil
	}
}

func (t tConfigLicenseDo) Last() (*model.TConfigLicense, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigLicense), nil
	}
}

func (t tConfigLicenseDo) Find() ([]*model.TConfigLicense, error) {
	result, err := t.DO.Find()
	return result.([]*model.TConfigLicense), err
}

func (t tConfigLicenseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TConfigLicense, err error) {
	buf := make([]*model.TConfigLicense, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tConfigLicenseDo) FindInBatches(result *[]*model.TConfigLicense, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tConfigLicenseDo) Attrs(attrs ...field.AssignExpr) *tConfigLicenseDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tConfigLicenseDo) Assign(attrs ...field.AssignExpr) *tConfigLicenseDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tConfigLicenseDo) Joins(field field.RelationField) *tConfigLicenseDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tConfigLicenseDo) Preload(field field.RelationField) *tConfigLicenseDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tConfigLicenseDo) FirstOrInit() (*model.TConfigLicense, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigLicense), nil
	}
}

func (t tConfigLicenseDo) FirstOrCreate() (*model.TConfigLicense, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigLicense), nil
	}
}

func (t tConfigLicenseDo) FindByPage(offset int, limit int) (result []*model.TConfigLicense, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tConfigLicenseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tConfigLicenseDo) withDO(do gen.Dao) *tConfigLicenseDo {
	t.DO = *do.(*gen.DO)
	return t
}
