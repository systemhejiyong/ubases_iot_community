// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_config/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTLangTranslate(db *gorm.DB) tLangTranslate {
	_tLangTranslate := tLangTranslate{}

	_tLangTranslate.tLangTranslateDo.UseDB(db)
	_tLangTranslate.tLangTranslateDo.UseModel(&model.TLangTranslate{})

	tableName := _tLangTranslate.tLangTranslateDo.TableName()
	_tLangTranslate.ALL = field.NewField(tableName, "*")
	_tLangTranslate.Id = field.NewInt64(tableName, "id")
	_tLangTranslate.SourceTable = field.NewString(tableName, "source_table")
	_tLangTranslate.SourceRowId = field.NewString(tableName, "source_row_id")
	_tLangTranslate.Lang = field.NewString(tableName, "lang")
	_tLangTranslate.FieldName = field.NewString(tableName, "field_name")
	_tLangTranslate.FieldType = field.NewInt32(tableName, "field_type")
	_tLangTranslate.FieldValue = field.NewString(tableName, "field_value")
	_tLangTranslate.CreatedBy = field.NewInt64(tableName, "created_by")
	_tLangTranslate.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tLangTranslate.CreatedAt = field.NewTime(tableName, "created_at")
	_tLangTranslate.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tLangTranslate.PlatformType = field.NewInt32(tableName, "platform_type")
	_tLangTranslate.TenantId = field.NewString(tableName, "tenant_id")

	_tLangTranslate.fillFieldMap()

	return _tLangTranslate
}

type tLangTranslate struct {
	tLangTranslateDo tLangTranslateDo

	ALL          field.Field
	Id           field.Int64
	SourceTable  field.String
	SourceRowId  field.String
	Lang         field.String
	FieldName    field.String
	FieldType    field.Int32
	FieldValue   field.String
	CreatedBy    field.Int64
	UpdatedBy    field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	PlatformType field.Int32
	TenantId     field.String

	fieldMap map[string]field.Expr
}

func (t tLangTranslate) Table(newTableName string) *tLangTranslate {
	t.tLangTranslateDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tLangTranslate) As(alias string) *tLangTranslate {
	t.tLangTranslateDo.DO = *(t.tLangTranslateDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tLangTranslate) updateTableName(table string) *tLangTranslate {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.SourceTable = field.NewString(table, "source_table")
	t.SourceRowId = field.NewString(table, "source_row_id")
	t.Lang = field.NewString(table, "lang")
	t.FieldName = field.NewString(table, "field_name")
	t.FieldType = field.NewInt32(table, "field_type")
	t.FieldValue = field.NewString(table, "field_value")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.PlatformType = field.NewInt32(table, "platform_type")
	t.TenantId = field.NewString(table, "tenant_id")

	t.fillFieldMap()

	return t
}

func (t *tLangTranslate) WithContext(ctx context.Context) *tLangTranslateDo {
	return t.tLangTranslateDo.WithContext(ctx)
}

func (t tLangTranslate) TableName() string { return t.tLangTranslateDo.TableName() }

func (t tLangTranslate) Alias() string { return t.tLangTranslateDo.Alias() }

func (t *tLangTranslate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tLangTranslate) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.Id
	t.fieldMap["source_table"] = t.SourceTable
	t.fieldMap["source_row_id"] = t.SourceRowId
	t.fieldMap["lang"] = t.Lang
	t.fieldMap["field_name"] = t.FieldName
	t.fieldMap["field_type"] = t.FieldType
	t.fieldMap["field_value"] = t.FieldValue
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["platform_type"] = t.PlatformType
	t.fieldMap["tenant_id"] = t.TenantId
}

func (t tLangTranslate) clone(db *gorm.DB) tLangTranslate {
	t.tLangTranslateDo.ReplaceDB(db)
	return t
}

type tLangTranslateDo struct{ gen.DO }

func (t tLangTranslateDo) Debug() *tLangTranslateDo {
	return t.withDO(t.DO.Debug())
}

func (t tLangTranslateDo) WithContext(ctx context.Context) *tLangTranslateDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tLangTranslateDo) Clauses(conds ...clause.Expression) *tLangTranslateDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tLangTranslateDo) Returning(value interface{}, columns ...string) *tLangTranslateDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tLangTranslateDo) Not(conds ...gen.Condition) *tLangTranslateDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tLangTranslateDo) Or(conds ...gen.Condition) *tLangTranslateDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tLangTranslateDo) Select(conds ...field.Expr) *tLangTranslateDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tLangTranslateDo) Where(conds ...gen.Condition) *tLangTranslateDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tLangTranslateDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tLangTranslateDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tLangTranslateDo) Order(conds ...field.Expr) *tLangTranslateDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tLangTranslateDo) Distinct(cols ...field.Expr) *tLangTranslateDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tLangTranslateDo) Omit(cols ...field.Expr) *tLangTranslateDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tLangTranslateDo) Join(table schema.Tabler, on ...field.Expr) *tLangTranslateDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tLangTranslateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tLangTranslateDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tLangTranslateDo) RightJoin(table schema.Tabler, on ...field.Expr) *tLangTranslateDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tLangTranslateDo) Group(cols ...field.Expr) *tLangTranslateDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tLangTranslateDo) Having(conds ...gen.Condition) *tLangTranslateDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tLangTranslateDo) Limit(limit int) *tLangTranslateDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tLangTranslateDo) Offset(offset int) *tLangTranslateDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tLangTranslateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tLangTranslateDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tLangTranslateDo) Unscoped() *tLangTranslateDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tLangTranslateDo) Create(values ...*model.TLangTranslate) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tLangTranslateDo) CreateInBatches(values []*model.TLangTranslate, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tLangTranslateDo) Save(values ...*model.TLangTranslate) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tLangTranslateDo) First() (*model.TLangTranslate, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangTranslate), nil
	}
}

func (t tLangTranslateDo) Take() (*model.TLangTranslate, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangTranslate), nil
	}
}

func (t tLangTranslateDo) Last() (*model.TLangTranslate, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangTranslate), nil
	}
}

func (t tLangTranslateDo) Find() ([]*model.TLangTranslate, error) {
	result, err := t.DO.Find()
	return result.([]*model.TLangTranslate), err
}

func (t tLangTranslateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLangTranslate, err error) {
	buf := make([]*model.TLangTranslate, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tLangTranslateDo) FindInBatches(result *[]*model.TLangTranslate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tLangTranslateDo) Attrs(attrs ...field.AssignExpr) *tLangTranslateDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tLangTranslateDo) Assign(attrs ...field.AssignExpr) *tLangTranslateDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tLangTranslateDo) Joins(field field.RelationField) *tLangTranslateDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tLangTranslateDo) Preload(field field.RelationField) *tLangTranslateDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tLangTranslateDo) FirstOrInit() (*model.TLangTranslate, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangTranslate), nil
	}
}

func (t tLangTranslateDo) FirstOrCreate() (*model.TLangTranslate, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangTranslate), nil
	}
}

func (t tLangTranslateDo) FindByPage(offset int, limit int) (result []*model.TLangTranslate, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tLangTranslateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tLangTranslateDo) withDO(do gen.Dao) *tLangTranslateDo {
	t.DO = *do.(*gen.DO)
	return t
}
