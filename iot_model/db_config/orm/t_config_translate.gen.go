// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"cloud_platform/iot_model/db_config/model"
	"context"

	"gorm.io/gen/field"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
)

func newTConfigTranslate(db *gorm.DB) tConfigTranslate {
	_tConfigTranslate := tConfigTranslate{}

	_tConfigTranslate.tConfigTranslateDo.UseDB(db)
	_tConfigTranslate.tConfigTranslateDo.UseModel(&model.TConfigTranslate{})

	tableName := _tConfigTranslate.tConfigTranslateDo.TableName()
	_tConfigTranslate.ALL = field.NewField(tableName, "*")
	_tConfigTranslate.Id = field.NewInt64(tableName, "id")
	_tConfigTranslate.Code = field.NewString(tableName, "code")
	_tConfigTranslate.En = field.NewString(tableName, "en")
	_tConfigTranslate.Zh = field.NewString(tableName, "zh")
	_tConfigTranslate.Jp = field.NewString(tableName, "jp")
	_tConfigTranslate.CreatedBy = field.NewInt64(tableName, "created_by")
	_tConfigTranslate.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tConfigTranslate.CreatedAt = field.NewTime(tableName, "created_at")
	_tConfigTranslate.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tConfigTranslate.DeletedAt = field.NewField(tableName, "deleted_at")

	_tConfigTranslate.fillFieldMap()

	return _tConfigTranslate
}

type tConfigTranslate struct {
	tConfigTranslateDo tConfigTranslateDo

	ALL       field.Field
	Id        field.Int64
	Code      field.String
	En        field.String
	Zh        field.String
	Jp        field.String
	CreatedBy field.Int64
	UpdatedBy field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (t tConfigTranslate) Table(newTableName string) *tConfigTranslate {
	t.tConfigTranslateDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tConfigTranslate) As(alias string) *tConfigTranslate {
	t.tConfigTranslateDo.DO = *(t.tConfigTranslateDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tConfigTranslate) updateTableName(table string) *tConfigTranslate {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Code = field.NewString(table, "code")
	t.En = field.NewString(table, "en")
	t.Zh = field.NewString(table, "zh")
	t.Jp = field.NewString(table, "jp")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tConfigTranslate) WithContext(ctx context.Context) *tConfigTranslateDo {
	return t.tConfigTranslateDo.WithContext(ctx)
}

func (t tConfigTranslate) TableName() string { return t.tConfigTranslateDo.TableName() }

func (t tConfigTranslate) Alias() string { return t.tConfigTranslateDo.Alias() }

func (t *tConfigTranslate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tConfigTranslate) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 10)
	t.fieldMap["id"] = t.Id
	t.fieldMap["code"] = t.Code
	t.fieldMap["en"] = t.En
	t.fieldMap["zh"] = t.Zh
	t.fieldMap["jp"] = t.Jp
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tConfigTranslate) clone(db *gorm.DB) tConfigTranslate {
	t.tConfigTranslateDo.ReplaceDB(db)
	return t
}

type tConfigTranslateDo struct{ gen.DO }

func (t tConfigTranslateDo) Debug() *tConfigTranslateDo {
	return t.withDO(t.DO.Debug())
}

func (t tConfigTranslateDo) WithContext(ctx context.Context) *tConfigTranslateDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tConfigTranslateDo) Clauses(conds ...clause.Expression) *tConfigTranslateDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tConfigTranslateDo) Returning(value interface{}, columns ...string) *tConfigTranslateDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tConfigTranslateDo) Not(conds ...gen.Condition) *tConfigTranslateDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tConfigTranslateDo) Or(conds ...gen.Condition) *tConfigTranslateDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tConfigTranslateDo) Select(conds ...field.Expr) *tConfigTranslateDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tConfigTranslateDo) Where(conds ...gen.Condition) *tConfigTranslateDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tConfigTranslateDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tConfigTranslateDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tConfigTranslateDo) Order(conds ...field.Expr) *tConfigTranslateDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tConfigTranslateDo) Distinct(cols ...field.Expr) *tConfigTranslateDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tConfigTranslateDo) Omit(cols ...field.Expr) *tConfigTranslateDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tConfigTranslateDo) Join(table schema.Tabler, on ...field.Expr) *tConfigTranslateDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tConfigTranslateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tConfigTranslateDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tConfigTranslateDo) RightJoin(table schema.Tabler, on ...field.Expr) *tConfigTranslateDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tConfigTranslateDo) Group(cols ...field.Expr) *tConfigTranslateDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tConfigTranslateDo) Having(conds ...gen.Condition) *tConfigTranslateDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tConfigTranslateDo) Limit(limit int) *tConfigTranslateDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tConfigTranslateDo) Offset(offset int) *tConfigTranslateDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tConfigTranslateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tConfigTranslateDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tConfigTranslateDo) Unscoped() *tConfigTranslateDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tConfigTranslateDo) Create(values ...*model.TConfigTranslate) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tConfigTranslateDo) CreateInBatches(values []*model.TConfigTranslate, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tConfigTranslateDo) Save(values ...*model.TConfigTranslate) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tConfigTranslateDo) First() (*model.TConfigTranslate, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigTranslate), nil
	}
}

func (t tConfigTranslateDo) Take() (*model.TConfigTranslate, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigTranslate), nil
	}
}

func (t tConfigTranslateDo) Last() (*model.TConfigTranslate, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigTranslate), nil
	}
}

func (t tConfigTranslateDo) Find() ([]*model.TConfigTranslate, error) {
	result, err := t.DO.Find()
	return result.([]*model.TConfigTranslate), err
}

func (t tConfigTranslateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TConfigTranslate, err error) {
	buf := make([]*model.TConfigTranslate, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tConfigTranslateDo) FindInBatches(result *[]*model.TConfigTranslate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tConfigTranslateDo) Attrs(attrs ...field.AssignExpr) *tConfigTranslateDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tConfigTranslateDo) Assign(attrs ...field.AssignExpr) *tConfigTranslateDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tConfigTranslateDo) Joins(field field.RelationField) *tConfigTranslateDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tConfigTranslateDo) Preload(field field.RelationField) *tConfigTranslateDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tConfigTranslateDo) FirstOrInit() (*model.TConfigTranslate, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigTranslate), nil
	}
}

func (t tConfigTranslateDo) FirstOrCreate() (*model.TConfigTranslate, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigTranslate), nil
	}
}

func (t tConfigTranslateDo) FindByPage(offset int, limit int) (result []*model.TConfigTranslate, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tConfigTranslateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tConfigTranslateDo) withDO(do gen.Dao) *tConfigTranslateDo {
	t.DO = *do.(*gen.DO)
	return t
}
