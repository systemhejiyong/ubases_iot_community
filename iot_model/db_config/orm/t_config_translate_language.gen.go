// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"cloud_platform/iot_model/db_config/model"
	"context"

	"gorm.io/gen/field"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
)

func newTConfigTranslateLanguage(db *gorm.DB) tConfigTranslateLanguage {
	_tConfigTranslateLanguage := tConfigTranslateLanguage{}

	_tConfigTranslateLanguage.tConfigTranslateLanguageDo.UseDB(db)
	_tConfigTranslateLanguage.tConfigTranslateLanguageDo.UseModel(&model.TConfigTranslateLanguage{})

	tableName := _tConfigTranslateLanguage.tConfigTranslateLanguageDo.TableName()
	_tConfigTranslateLanguage.ALL = field.NewField(tableName, "*")
	_tConfigTranslateLanguage.Id = field.NewInt64(tableName, "id")
	_tConfigTranslateLanguage.Title = field.NewString(tableName, "title")
	_tConfigTranslateLanguage.Value = field.NewString(tableName, "value")

	_tConfigTranslateLanguage.fillFieldMap()

	return _tConfigTranslateLanguage
}

type tConfigTranslateLanguage struct {
	tConfigTranslateLanguageDo tConfigTranslateLanguageDo

	ALL   field.Field
	Id    field.Int64
	Title field.String
	Value field.String

	fieldMap map[string]field.Expr
}

func (t tConfigTranslateLanguage) Table(newTableName string) *tConfigTranslateLanguage {
	t.tConfigTranslateLanguageDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tConfigTranslateLanguage) As(alias string) *tConfigTranslateLanguage {
	t.tConfigTranslateLanguageDo.DO = *(t.tConfigTranslateLanguageDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tConfigTranslateLanguage) updateTableName(table string) *tConfigTranslateLanguage {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Title = field.NewString(table, "title")
	t.Value = field.NewString(table, "value")

	t.fillFieldMap()

	return t
}

func (t *tConfigTranslateLanguage) WithContext(ctx context.Context) *tConfigTranslateLanguageDo {
	return t.tConfigTranslateLanguageDo.WithContext(ctx)
}

func (t tConfigTranslateLanguage) TableName() string { return t.tConfigTranslateLanguageDo.TableName() }

func (t tConfigTranslateLanguage) Alias() string { return t.tConfigTranslateLanguageDo.Alias() }

func (t *tConfigTranslateLanguage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tConfigTranslateLanguage) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.Id
	t.fieldMap["title"] = t.Title
	t.fieldMap["value"] = t.Value
}

func (t tConfigTranslateLanguage) clone(db *gorm.DB) tConfigTranslateLanguage {
	t.tConfigTranslateLanguageDo.ReplaceDB(db)
	return t
}

type tConfigTranslateLanguageDo struct{ gen.DO }

func (t tConfigTranslateLanguageDo) Debug() *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Debug())
}

func (t tConfigTranslateLanguageDo) WithContext(ctx context.Context) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tConfigTranslateLanguageDo) Clauses(conds ...clause.Expression) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tConfigTranslateLanguageDo) Returning(value interface{}, columns ...string) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tConfigTranslateLanguageDo) Not(conds ...gen.Condition) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tConfigTranslateLanguageDo) Or(conds ...gen.Condition) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tConfigTranslateLanguageDo) Select(conds ...field.Expr) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tConfigTranslateLanguageDo) Where(conds ...gen.Condition) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tConfigTranslateLanguageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tConfigTranslateLanguageDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tConfigTranslateLanguageDo) Order(conds ...field.Expr) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tConfigTranslateLanguageDo) Distinct(cols ...field.Expr) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tConfigTranslateLanguageDo) Omit(cols ...field.Expr) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tConfigTranslateLanguageDo) Join(table schema.Tabler, on ...field.Expr) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tConfigTranslateLanguageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tConfigTranslateLanguageDo) RightJoin(table schema.Tabler, on ...field.Expr) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tConfigTranslateLanguageDo) Group(cols ...field.Expr) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tConfigTranslateLanguageDo) Having(conds ...gen.Condition) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tConfigTranslateLanguageDo) Limit(limit int) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tConfigTranslateLanguageDo) Offset(offset int) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tConfigTranslateLanguageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tConfigTranslateLanguageDo) Unscoped() *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tConfigTranslateLanguageDo) Create(values ...*model.TConfigTranslateLanguage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tConfigTranslateLanguageDo) CreateInBatches(values []*model.TConfigTranslateLanguage, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tConfigTranslateLanguageDo) Save(values ...*model.TConfigTranslateLanguage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tConfigTranslateLanguageDo) First() (*model.TConfigTranslateLanguage, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigTranslateLanguage), nil
	}
}

func (t tConfigTranslateLanguageDo) Take() (*model.TConfigTranslateLanguage, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigTranslateLanguage), nil
	}
}

func (t tConfigTranslateLanguageDo) Last() (*model.TConfigTranslateLanguage, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigTranslateLanguage), nil
	}
}

func (t tConfigTranslateLanguageDo) Find() ([]*model.TConfigTranslateLanguage, error) {
	result, err := t.DO.Find()
	return result.([]*model.TConfigTranslateLanguage), err
}

func (t tConfigTranslateLanguageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TConfigTranslateLanguage, err error) {
	buf := make([]*model.TConfigTranslateLanguage, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tConfigTranslateLanguageDo) FindInBatches(result *[]*model.TConfigTranslateLanguage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tConfigTranslateLanguageDo) Attrs(attrs ...field.AssignExpr) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tConfigTranslateLanguageDo) Assign(attrs ...field.AssignExpr) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tConfigTranslateLanguageDo) Joins(field field.RelationField) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tConfigTranslateLanguageDo) Preload(field field.RelationField) *tConfigTranslateLanguageDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tConfigTranslateLanguageDo) FirstOrInit() (*model.TConfigTranslateLanguage, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigTranslateLanguage), nil
	}
}

func (t tConfigTranslateLanguageDo) FirstOrCreate() (*model.TConfigTranslateLanguage, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigTranslateLanguage), nil
	}
}

func (t tConfigTranslateLanguageDo) FindByPage(offset int, limit int) (result []*model.TConfigTranslateLanguage, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tConfigTranslateLanguageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tConfigTranslateLanguageDo) withDO(do gen.Dao) *tConfigTranslateLanguageDo {
	t.DO = *do.(*gen.DO)
	return t
}
