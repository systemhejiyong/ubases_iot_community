// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_config/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTLangResourcePackage(db *gorm.DB) tLangResourcePackage {
	_tLangResourcePackage := tLangResourcePackage{}

	_tLangResourcePackage.tLangResourcePackageDo.UseDB(db)
	_tLangResourcePackage.tLangResourcePackageDo.UseModel(&model.TLangResourcePackage{})

	tableName := _tLangResourcePackage.tLangResourcePackageDo.TableName()
	_tLangResourcePackage.ALL = field.NewField(tableName, "*")
	_tLangResourcePackage.Id = field.NewInt64(tableName, "id")
	_tLangResourcePackage.BelongType = field.NewInt32(tableName, "belong_type")
	_tLangResourcePackage.PackageName = field.NewString(tableName, "package_name")
	_tLangResourcePackage.CreatedBy = field.NewInt64(tableName, "created_by")
	_tLangResourcePackage.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tLangResourcePackage.CreatedAt = field.NewTime(tableName, "created_at")
	_tLangResourcePackage.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tLangResourcePackage.BelongId = field.NewInt64(tableName, "belong_id")
	_tLangResourcePackage.AppTemplateId = field.NewInt64(tableName, "app_template_id")
	_tLangResourcePackage.AppTemplateType = field.NewInt32(tableName, "app_template_type")
	_tLangResourcePackage.FileSize = field.NewInt64(tableName, "file_size")
	_tLangResourcePackage.FileName = field.NewString(tableName, "file_name")

	_tLangResourcePackage.fillFieldMap()

	return _tLangResourcePackage
}

type tLangResourcePackage struct {
	tLangResourcePackageDo tLangResourcePackageDo

	ALL             field.Field
	Id              field.Int64
	BelongType      field.Int32
	PackageName     field.String
	CreatedBy       field.Int64
	UpdatedBy       field.Int64
	CreatedAt       field.Time
	UpdatedAt       field.Time
	BelongId        field.Int64
	AppTemplateId   field.Int64
	AppTemplateType field.Int32
	FileSize        field.Int64
	FileName        field.String

	fieldMap map[string]field.Expr
}

func (t tLangResourcePackage) Table(newTableName string) *tLangResourcePackage {
	t.tLangResourcePackageDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tLangResourcePackage) As(alias string) *tLangResourcePackage {
	t.tLangResourcePackageDo.DO = *(t.tLangResourcePackageDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tLangResourcePackage) updateTableName(table string) *tLangResourcePackage {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.BelongType = field.NewInt32(table, "belong_type")
	t.PackageName = field.NewString(table, "package_name")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.BelongId = field.NewInt64(table, "belong_id")
	t.AppTemplateId = field.NewInt64(table, "app_template_id")
	t.AppTemplateType = field.NewInt32(table, "app_template_type")
	t.FileSize = field.NewInt64(table, "file_size")
	t.FileName = field.NewString(table, "file_name")

	t.fillFieldMap()

	return t
}

func (t *tLangResourcePackage) WithContext(ctx context.Context) *tLangResourcePackageDo {
	return t.tLangResourcePackageDo.WithContext(ctx)
}

func (t tLangResourcePackage) TableName() string { return t.tLangResourcePackageDo.TableName() }

func (t tLangResourcePackage) Alias() string { return t.tLangResourcePackageDo.Alias() }

func (t *tLangResourcePackage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tLangResourcePackage) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.Id
	t.fieldMap["belong_type"] = t.BelongType
	t.fieldMap["package_name"] = t.PackageName
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["belong_id"] = t.BelongId
	t.fieldMap["app_template_id"] = t.AppTemplateId
	t.fieldMap["app_template_type"] = t.AppTemplateType
	t.fieldMap["file_size"] = t.FileSize
	t.fieldMap["file_name"] = t.FileName
}

func (t tLangResourcePackage) clone(db *gorm.DB) tLangResourcePackage {
	t.tLangResourcePackageDo.ReplaceDB(db)
	return t
}

type tLangResourcePackageDo struct{ gen.DO }

func (t tLangResourcePackageDo) Debug() *tLangResourcePackageDo {
	return t.withDO(t.DO.Debug())
}

func (t tLangResourcePackageDo) WithContext(ctx context.Context) *tLangResourcePackageDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tLangResourcePackageDo) Clauses(conds ...clause.Expression) *tLangResourcePackageDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tLangResourcePackageDo) Returning(value interface{}, columns ...string) *tLangResourcePackageDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tLangResourcePackageDo) Not(conds ...gen.Condition) *tLangResourcePackageDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tLangResourcePackageDo) Or(conds ...gen.Condition) *tLangResourcePackageDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tLangResourcePackageDo) Select(conds ...field.Expr) *tLangResourcePackageDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tLangResourcePackageDo) Where(conds ...gen.Condition) *tLangResourcePackageDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tLangResourcePackageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tLangResourcePackageDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tLangResourcePackageDo) Order(conds ...field.Expr) *tLangResourcePackageDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tLangResourcePackageDo) Distinct(cols ...field.Expr) *tLangResourcePackageDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tLangResourcePackageDo) Omit(cols ...field.Expr) *tLangResourcePackageDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tLangResourcePackageDo) Join(table schema.Tabler, on ...field.Expr) *tLangResourcePackageDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tLangResourcePackageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tLangResourcePackageDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tLangResourcePackageDo) RightJoin(table schema.Tabler, on ...field.Expr) *tLangResourcePackageDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tLangResourcePackageDo) Group(cols ...field.Expr) *tLangResourcePackageDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tLangResourcePackageDo) Having(conds ...gen.Condition) *tLangResourcePackageDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tLangResourcePackageDo) Limit(limit int) *tLangResourcePackageDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tLangResourcePackageDo) Offset(offset int) *tLangResourcePackageDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tLangResourcePackageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tLangResourcePackageDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tLangResourcePackageDo) Unscoped() *tLangResourcePackageDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tLangResourcePackageDo) Create(values ...*model.TLangResourcePackage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tLangResourcePackageDo) CreateInBatches(values []*model.TLangResourcePackage, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tLangResourcePackageDo) Save(values ...*model.TLangResourcePackage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tLangResourcePackageDo) First() (*model.TLangResourcePackage, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangResourcePackage), nil
	}
}

func (t tLangResourcePackageDo) Take() (*model.TLangResourcePackage, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangResourcePackage), nil
	}
}

func (t tLangResourcePackageDo) Last() (*model.TLangResourcePackage, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangResourcePackage), nil
	}
}

func (t tLangResourcePackageDo) Find() ([]*model.TLangResourcePackage, error) {
	result, err := t.DO.Find()
	return result.([]*model.TLangResourcePackage), err
}

func (t tLangResourcePackageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLangResourcePackage, err error) {
	buf := make([]*model.TLangResourcePackage, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tLangResourcePackageDo) FindInBatches(result *[]*model.TLangResourcePackage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tLangResourcePackageDo) Attrs(attrs ...field.AssignExpr) *tLangResourcePackageDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tLangResourcePackageDo) Assign(attrs ...field.AssignExpr) *tLangResourcePackageDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tLangResourcePackageDo) Joins(field field.RelationField) *tLangResourcePackageDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tLangResourcePackageDo) Preload(field field.RelationField) *tLangResourcePackageDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tLangResourcePackageDo) FirstOrInit() (*model.TLangResourcePackage, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangResourcePackage), nil
	}
}

func (t tLangResourcePackageDo) FirstOrCreate() (*model.TLangResourcePackage, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangResourcePackage), nil
	}
}

func (t tLangResourcePackageDo) FindByPage(offset int, limit int) (result []*model.TLangResourcePackage, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tLangResourcePackageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tLangResourcePackageDo) withDO(do gen.Dao) *tLangResourcePackageDo {
	t.DO = *do.(*gen.DO)
	return t
}
