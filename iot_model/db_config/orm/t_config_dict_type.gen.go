// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"cloud_platform/iot_model/db_config/model"
	"context"

	"gorm.io/gen/field"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
)

func newTConfigDictType(db *gorm.DB) tConfigDictType {
	_tConfigDictType := tConfigDictType{}

	_tConfigDictType.tConfigDictTypeDo.UseDB(db)
	_tConfigDictType.tConfigDictTypeDo.UseModel(&model.TConfigDictType{})

	tableName := _tConfigDictType.tConfigDictTypeDo.TableName()
	_tConfigDictType.ALL = field.NewField(tableName, "*")
	_tConfigDictType.DictId = field.NewInt64(tableName, "dict_id")
	_tConfigDictType.DictName = field.NewString(tableName, "dict_name")
	_tConfigDictType.DictType = field.NewString(tableName, "dict_type")
	_tConfigDictType.Status = field.NewInt32(tableName, "status")
	_tConfigDictType.ValueType = field.NewInt32(tableName, "value_type")
	_tConfigDictType.Remark = field.NewString(tableName, "remark")
	_tConfigDictType.CreatedBy = field.NewInt64(tableName, "created_by")
	_tConfigDictType.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tConfigDictType.CreatedAt = field.NewTime(tableName, "created_at")
	_tConfigDictType.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tConfigDictType.DeletedAt = field.NewField(tableName, "deleted_at")
	_tConfigDictType.IsSystem = field.NewInt32(tableName, "is_system")

	_tConfigDictType.fillFieldMap()

	return _tConfigDictType
}

type tConfigDictType struct {
	tConfigDictTypeDo tConfigDictTypeDo

	ALL       field.Field
	DictId    field.Int64
	DictName  field.String
	DictType  field.String
	Status    field.Int32
	ValueType field.Int32
	Remark    field.String
	CreatedBy field.Int64
	UpdatedBy field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	IsSystem  field.Int32

	fieldMap map[string]field.Expr
}

func (t tConfigDictType) Table(newTableName string) *tConfigDictType {
	t.tConfigDictTypeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tConfigDictType) As(alias string) *tConfigDictType {
	t.tConfigDictTypeDo.DO = *(t.tConfigDictTypeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tConfigDictType) updateTableName(table string) *tConfigDictType {
	t.ALL = field.NewField(table, "*")
	t.DictId = field.NewInt64(table, "dict_id")
	t.DictName = field.NewString(table, "dict_name")
	t.DictType = field.NewString(table, "dict_type")
	t.Status = field.NewInt32(table, "status")
	t.ValueType = field.NewInt32(table, "value_type")
	t.Remark = field.NewString(table, "remark")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.IsSystem = field.NewInt32(table, "is_system")

	t.fillFieldMap()

	return t
}

func (t *tConfigDictType) WithContext(ctx context.Context) *tConfigDictTypeDo {
	return t.tConfigDictTypeDo.WithContext(ctx)
}

func (t tConfigDictType) TableName() string { return t.tConfigDictTypeDo.TableName() }

func (t tConfigDictType) Alias() string { return t.tConfigDictTypeDo.Alias() }

func (t *tConfigDictType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tConfigDictType) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["dict_id"] = t.DictId
	t.fieldMap["dict_name"] = t.DictName
	t.fieldMap["dict_type"] = t.DictType
	t.fieldMap["status"] = t.Status
	t.fieldMap["value_type"] = t.ValueType
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["is_system"] = t.IsSystem
}

func (t tConfigDictType) clone(db *gorm.DB) tConfigDictType {
	t.tConfigDictTypeDo.ReplaceDB(db)
	return t
}

type tConfigDictTypeDo struct{ gen.DO }

func (t tConfigDictTypeDo) Debug() *tConfigDictTypeDo {
	return t.withDO(t.DO.Debug())
}

func (t tConfigDictTypeDo) WithContext(ctx context.Context) *tConfigDictTypeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tConfigDictTypeDo) Clauses(conds ...clause.Expression) *tConfigDictTypeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tConfigDictTypeDo) Returning(value interface{}, columns ...string) *tConfigDictTypeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tConfigDictTypeDo) Not(conds ...gen.Condition) *tConfigDictTypeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tConfigDictTypeDo) Or(conds ...gen.Condition) *tConfigDictTypeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tConfigDictTypeDo) Select(conds ...field.Expr) *tConfigDictTypeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tConfigDictTypeDo) Where(conds ...gen.Condition) *tConfigDictTypeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tConfigDictTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tConfigDictTypeDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tConfigDictTypeDo) Order(conds ...field.Expr) *tConfigDictTypeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tConfigDictTypeDo) Distinct(cols ...field.Expr) *tConfigDictTypeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tConfigDictTypeDo) Omit(cols ...field.Expr) *tConfigDictTypeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tConfigDictTypeDo) Join(table schema.Tabler, on ...field.Expr) *tConfigDictTypeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tConfigDictTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tConfigDictTypeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tConfigDictTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) *tConfigDictTypeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tConfigDictTypeDo) Group(cols ...field.Expr) *tConfigDictTypeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tConfigDictTypeDo) Having(conds ...gen.Condition) *tConfigDictTypeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tConfigDictTypeDo) Limit(limit int) *tConfigDictTypeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tConfigDictTypeDo) Offset(offset int) *tConfigDictTypeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tConfigDictTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tConfigDictTypeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tConfigDictTypeDo) Unscoped() *tConfigDictTypeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tConfigDictTypeDo) Create(values ...*model.TConfigDictType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tConfigDictTypeDo) CreateInBatches(values []*model.TConfigDictType, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tConfigDictTypeDo) Save(values ...*model.TConfigDictType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tConfigDictTypeDo) First() (*model.TConfigDictType, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigDictType), nil
	}
}

func (t tConfigDictTypeDo) Take() (*model.TConfigDictType, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigDictType), nil
	}
}

func (t tConfigDictTypeDo) Last() (*model.TConfigDictType, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigDictType), nil
	}
}

func (t tConfigDictTypeDo) Find() ([]*model.TConfigDictType, error) {
	result, err := t.DO.Find()
	return result.([]*model.TConfigDictType), err
}

func (t tConfigDictTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TConfigDictType, err error) {
	buf := make([]*model.TConfigDictType, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tConfigDictTypeDo) FindInBatches(result *[]*model.TConfigDictType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tConfigDictTypeDo) Attrs(attrs ...field.AssignExpr) *tConfigDictTypeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tConfigDictTypeDo) Assign(attrs ...field.AssignExpr) *tConfigDictTypeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tConfigDictTypeDo) Joins(field field.RelationField) *tConfigDictTypeDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tConfigDictTypeDo) Preload(field field.RelationField) *tConfigDictTypeDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tConfigDictTypeDo) FirstOrInit() (*model.TConfigDictType, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigDictType), nil
	}
}

func (t tConfigDictTypeDo) FirstOrCreate() (*model.TConfigDictType, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigDictType), nil
	}
}

func (t tConfigDictTypeDo) FindByPage(offset int, limit int) (result []*model.TConfigDictType, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tConfigDictTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tConfigDictTypeDo) withDO(do gen.Dao) *tConfigDictTypeDo {
	t.DO = *do.(*gen.DO)
	return t
}
