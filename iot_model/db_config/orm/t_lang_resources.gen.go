// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_config/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTLangResources(db *gorm.DB) tLangResources {
	_tLangResources := tLangResources{}

	_tLangResources.tLangResourcesDo.UseDB(db)
	_tLangResources.tLangResourcesDo.UseModel(&model.TLangResources{})

	tableName := _tLangResources.tLangResourcesDo.TableName()
	_tLangResources.ALL = field.NewField(tableName, "*")
	_tLangResources.Id = field.NewInt64(tableName, "id")
	_tLangResources.BelongType = field.NewInt32(tableName, "belong_type")
	_tLangResources.Lang = field.NewString(tableName, "lang")
	_tLangResources.Code = field.NewString(tableName, "code")
	_tLangResources.Value = field.NewString(tableName, "value")
	_tLangResources.CreatedBy = field.NewInt64(tableName, "created_by")
	_tLangResources.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tLangResources.CreatedAt = field.NewTime(tableName, "created_at")
	_tLangResources.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tLangResources.BelongId = field.NewInt64(tableName, "belong_id")
	_tLangResources.PackageId = field.NewInt64(tableName, "package_id")

	_tLangResources.fillFieldMap()

	return _tLangResources
}

type tLangResources struct {
	tLangResourcesDo tLangResourcesDo

	ALL        field.Field
	Id         field.Int64
	BelongType field.Int32
	Lang       field.String
	Code       field.String
	Value      field.String
	CreatedBy  field.Int64
	UpdatedBy  field.Int64
	CreatedAt  field.Time
	UpdatedAt  field.Time
	BelongId   field.Int64
	PackageId  field.Int64

	fieldMap map[string]field.Expr
}

func (t tLangResources) Table(newTableName string) *tLangResources {
	t.tLangResourcesDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tLangResources) As(alias string) *tLangResources {
	t.tLangResourcesDo.DO = *(t.tLangResourcesDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tLangResources) updateTableName(table string) *tLangResources {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.BelongType = field.NewInt32(table, "belong_type")
	t.Lang = field.NewString(table, "lang")
	t.Code = field.NewString(table, "code")
	t.Value = field.NewString(table, "value")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.BelongId = field.NewInt64(table, "belong_id")
	t.PackageId = field.NewInt64(table, "package_id")

	t.fillFieldMap()

	return t
}

func (t *tLangResources) WithContext(ctx context.Context) *tLangResourcesDo {
	return t.tLangResourcesDo.WithContext(ctx)
}

func (t tLangResources) TableName() string { return t.tLangResourcesDo.TableName() }

func (t tLangResources) Alias() string { return t.tLangResourcesDo.Alias() }

func (t *tLangResources) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tLangResources) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.Id
	t.fieldMap["belong_type"] = t.BelongType
	t.fieldMap["lang"] = t.Lang
	t.fieldMap["code"] = t.Code
	t.fieldMap["value"] = t.Value
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["belong_id"] = t.BelongId
	t.fieldMap["package_id"] = t.PackageId
}

func (t tLangResources) clone(db *gorm.DB) tLangResources {
	t.tLangResourcesDo.ReplaceDB(db)
	return t
}

type tLangResourcesDo struct{ gen.DO }

func (t tLangResourcesDo) Debug() *tLangResourcesDo {
	return t.withDO(t.DO.Debug())
}

func (t tLangResourcesDo) WithContext(ctx context.Context) *tLangResourcesDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tLangResourcesDo) Clauses(conds ...clause.Expression) *tLangResourcesDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tLangResourcesDo) Returning(value interface{}, columns ...string) *tLangResourcesDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tLangResourcesDo) Not(conds ...gen.Condition) *tLangResourcesDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tLangResourcesDo) Or(conds ...gen.Condition) *tLangResourcesDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tLangResourcesDo) Select(conds ...field.Expr) *tLangResourcesDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tLangResourcesDo) Where(conds ...gen.Condition) *tLangResourcesDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tLangResourcesDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tLangResourcesDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tLangResourcesDo) Order(conds ...field.Expr) *tLangResourcesDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tLangResourcesDo) Distinct(cols ...field.Expr) *tLangResourcesDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tLangResourcesDo) Omit(cols ...field.Expr) *tLangResourcesDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tLangResourcesDo) Join(table schema.Tabler, on ...field.Expr) *tLangResourcesDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tLangResourcesDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tLangResourcesDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tLangResourcesDo) RightJoin(table schema.Tabler, on ...field.Expr) *tLangResourcesDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tLangResourcesDo) Group(cols ...field.Expr) *tLangResourcesDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tLangResourcesDo) Having(conds ...gen.Condition) *tLangResourcesDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tLangResourcesDo) Limit(limit int) *tLangResourcesDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tLangResourcesDo) Offset(offset int) *tLangResourcesDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tLangResourcesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tLangResourcesDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tLangResourcesDo) Unscoped() *tLangResourcesDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tLangResourcesDo) Create(values ...*model.TLangResources) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tLangResourcesDo) CreateInBatches(values []*model.TLangResources, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tLangResourcesDo) Save(values ...*model.TLangResources) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tLangResourcesDo) First() (*model.TLangResources, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangResources), nil
	}
}

func (t tLangResourcesDo) Take() (*model.TLangResources, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangResources), nil
	}
}

func (t tLangResourcesDo) Last() (*model.TLangResources, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangResources), nil
	}
}

func (t tLangResourcesDo) Find() ([]*model.TLangResources, error) {
	result, err := t.DO.Find()
	return result.([]*model.TLangResources), err
}

func (t tLangResourcesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLangResources, err error) {
	buf := make([]*model.TLangResources, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tLangResourcesDo) FindInBatches(result *[]*model.TLangResources, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tLangResourcesDo) Attrs(attrs ...field.AssignExpr) *tLangResourcesDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tLangResourcesDo) Assign(attrs ...field.AssignExpr) *tLangResourcesDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tLangResourcesDo) Joins(field field.RelationField) *tLangResourcesDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tLangResourcesDo) Preload(field field.RelationField) *tLangResourcesDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tLangResourcesDo) FirstOrInit() (*model.TLangResources, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangResources), nil
	}
}

func (t tLangResourcesDo) FirstOrCreate() (*model.TLangResources, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangResources), nil
	}
}

func (t tLangResourcesDo) FindByPage(offset int, limit int) (result []*model.TLangResources, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tLangResourcesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tLangResourcesDo) withDO(do gen.Dao) *tLangResourcesDo {
	t.DO = *do.(*gen.DO)
	return t
}
