// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"cloud_platform/iot_model/db_config/model"
	"context"

	"gorm.io/gen/field"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
)

func newTConfigDictData(db *gorm.DB) tConfigDictData {
	_tConfigDictData := tConfigDictData{}

	_tConfigDictData.tConfigDictDataDo.UseDB(db)
	_tConfigDictData.tConfigDictDataDo.UseModel(&model.TConfigDictData{})

	tableName := _tConfigDictData.tConfigDictDataDo.TableName()
	_tConfigDictData.ALL = field.NewField(tableName, "*")
	_tConfigDictData.DictCode = field.NewInt64(tableName, "dict_code")
	_tConfigDictData.DictSort = field.NewInt32(tableName, "dict_sort")
	_tConfigDictData.DictLabel = field.NewString(tableName, "dict_label")
	_tConfigDictData.DictValue = field.NewString(tableName, "dict_value")
	_tConfigDictData.DictType = field.NewString(tableName, "dict_type")
	_tConfigDictData.CssClass = field.NewString(tableName, "css_class")
	_tConfigDictData.ListClass = field.NewString(tableName, "list_class")
	_tConfigDictData.IsDefault = field.NewInt32(tableName, "is_default")
	_tConfigDictData.Status = field.NewInt32(tableName, "status")
	_tConfigDictData.Remark = field.NewString(tableName, "remark")
	_tConfigDictData.Pinyin = field.NewString(tableName, "pinyin")
	_tConfigDictData.Firstletter = field.NewString(tableName, "firstletter")
	_tConfigDictData.Listimg = field.NewString(tableName, "listimg")
	_tConfigDictData.CreatedBy = field.NewInt64(tableName, "created_by")
	_tConfigDictData.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tConfigDictData.CreatedAt = field.NewTime(tableName, "created_at")
	_tConfigDictData.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tConfigDictData.DeletedAt = field.NewField(tableName, "deleted_at")

	_tConfigDictData.fillFieldMap()

	return _tConfigDictData
}

type tConfigDictData struct {
	tConfigDictDataDo tConfigDictDataDo

	ALL         field.Field
	DictCode    field.Int64
	DictSort    field.Int32
	DictLabel   field.String
	DictValue   field.String
	DictType    field.String
	CssClass    field.String
	ListClass   field.String
	IsDefault   field.Int32
	Status      field.Int32
	Remark      field.String
	Pinyin      field.String
	Firstletter field.String
	Listimg     field.String
	CreatedBy   field.Int64
	UpdatedBy   field.Int64
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (t tConfigDictData) Table(newTableName string) *tConfigDictData {
	t.tConfigDictDataDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tConfigDictData) As(alias string) *tConfigDictData {
	t.tConfigDictDataDo.DO = *(t.tConfigDictDataDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tConfigDictData) updateTableName(table string) *tConfigDictData {
	t.ALL = field.NewField(table, "*")
	t.DictCode = field.NewInt64(table, "dict_code")
	t.DictSort = field.NewInt32(table, "dict_sort")
	t.DictLabel = field.NewString(table, "dict_label")
	t.DictValue = field.NewString(table, "dict_value")
	t.DictType = field.NewString(table, "dict_type")
	t.CssClass = field.NewString(table, "css_class")
	t.ListClass = field.NewString(table, "list_class")
	t.IsDefault = field.NewInt32(table, "is_default")
	t.Status = field.NewInt32(table, "status")
	t.Remark = field.NewString(table, "remark")
	t.Pinyin = field.NewString(table, "pinyin")
	t.Firstletter = field.NewString(table, "firstletter")
	t.Listimg = field.NewString(table, "listimg")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tConfigDictData) WithContext(ctx context.Context) *tConfigDictDataDo {
	return t.tConfigDictDataDo.WithContext(ctx)
}

func (t tConfigDictData) TableName() string { return t.tConfigDictDataDo.TableName() }

func (t tConfigDictData) Alias() string { return t.tConfigDictDataDo.Alias() }

func (t *tConfigDictData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tConfigDictData) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 18)
	t.fieldMap["dict_code"] = t.DictCode
	t.fieldMap["dict_sort"] = t.DictSort
	t.fieldMap["dict_label"] = t.DictLabel
	t.fieldMap["dict_value"] = t.DictValue
	t.fieldMap["dict_type"] = t.DictType
	t.fieldMap["css_class"] = t.CssClass
	t.fieldMap["list_class"] = t.ListClass
	t.fieldMap["is_default"] = t.IsDefault
	t.fieldMap["status"] = t.Status
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["pinyin"] = t.Pinyin
	t.fieldMap["firstletter"] = t.Firstletter
	t.fieldMap["listimg"] = t.Listimg
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tConfigDictData) clone(db *gorm.DB) tConfigDictData {
	t.tConfigDictDataDo.ReplaceDB(db)
	return t
}

type tConfigDictDataDo struct{ gen.DO }

func (t tConfigDictDataDo) Debug() *tConfigDictDataDo {
	return t.withDO(t.DO.Debug())
}

func (t tConfigDictDataDo) WithContext(ctx context.Context) *tConfigDictDataDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tConfigDictDataDo) Clauses(conds ...clause.Expression) *tConfigDictDataDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tConfigDictDataDo) Returning(value interface{}, columns ...string) *tConfigDictDataDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tConfigDictDataDo) Not(conds ...gen.Condition) *tConfigDictDataDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tConfigDictDataDo) Or(conds ...gen.Condition) *tConfigDictDataDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tConfigDictDataDo) Select(conds ...field.Expr) *tConfigDictDataDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tConfigDictDataDo) Where(conds ...gen.Condition) *tConfigDictDataDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tConfigDictDataDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tConfigDictDataDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tConfigDictDataDo) Order(conds ...field.Expr) *tConfigDictDataDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tConfigDictDataDo) Distinct(cols ...field.Expr) *tConfigDictDataDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tConfigDictDataDo) Omit(cols ...field.Expr) *tConfigDictDataDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tConfigDictDataDo) Join(table schema.Tabler, on ...field.Expr) *tConfigDictDataDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tConfigDictDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tConfigDictDataDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tConfigDictDataDo) RightJoin(table schema.Tabler, on ...field.Expr) *tConfigDictDataDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tConfigDictDataDo) Group(cols ...field.Expr) *tConfigDictDataDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tConfigDictDataDo) Having(conds ...gen.Condition) *tConfigDictDataDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tConfigDictDataDo) Limit(limit int) *tConfigDictDataDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tConfigDictDataDo) Offset(offset int) *tConfigDictDataDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tConfigDictDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tConfigDictDataDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tConfigDictDataDo) Unscoped() *tConfigDictDataDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tConfigDictDataDo) Create(values ...*model.TConfigDictData) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tConfigDictDataDo) CreateInBatches(values []*model.TConfigDictData, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tConfigDictDataDo) Save(values ...*model.TConfigDictData) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tConfigDictDataDo) First() (*model.TConfigDictData, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigDictData), nil
	}
}

func (t tConfigDictDataDo) Take() (*model.TConfigDictData, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigDictData), nil
	}
}

func (t tConfigDictDataDo) Last() (*model.TConfigDictData, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigDictData), nil
	}
}

func (t tConfigDictDataDo) Find() ([]*model.TConfigDictData, error) {
	result, err := t.DO.Find()
	return result.([]*model.TConfigDictData), err
}

func (t tConfigDictDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TConfigDictData, err error) {
	buf := make([]*model.TConfigDictData, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tConfigDictDataDo) FindInBatches(result *[]*model.TConfigDictData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tConfigDictDataDo) Attrs(attrs ...field.AssignExpr) *tConfigDictDataDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tConfigDictDataDo) Assign(attrs ...field.AssignExpr) *tConfigDictDataDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tConfigDictDataDo) Joins(field field.RelationField) *tConfigDictDataDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tConfigDictDataDo) Preload(field field.RelationField) *tConfigDictDataDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tConfigDictDataDo) FirstOrInit() (*model.TConfigDictData, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigDictData), nil
	}
}

func (t tConfigDictDataDo) FirstOrCreate() (*model.TConfigDictData, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TConfigDictData), nil
	}
}

func (t tConfigDictDataDo) FindByPage(offset int, limit int) (result []*model.TConfigDictData, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tConfigDictDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tConfigDictDataDo) withDO(do gen.Dao) *tConfigDictDataDo {
	t.DO = *do.(*gen.DO)
	return t
}
