// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"cloud_platform/iot_model/db_config/model"
	"context"

	"gorm.io/gen/field"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
)

func newTSysRegionServer(db *gorm.DB) tSysRegionServer {
	_tSysRegionServer := tSysRegionServer{}

	_tSysRegionServer.tSysRegionServerDo.UseDB(db)
	_tSysRegionServer.tSysRegionServerDo.UseModel(&model.TSysRegionServer{})

	tableName := _tSysRegionServer.tSysRegionServerDo.TableName()
	_tSysRegionServer.ALL = field.NewField(tableName, "*")
	_tSysRegionServer.Id = field.NewInt64(tableName, "id")
	_tSysRegionServer.Sid = field.NewString(tableName, "sid")
	_tSysRegionServer.LimitedCount = field.NewInt32(tableName, "limited_count")
	_tSysRegionServer.BindedCount = field.NewInt32(tableName, "binded_count")
	_tSysRegionServer.MqttServer = field.NewString(tableName, "mqtt_server")
	_tSysRegionServer.HttpServer = field.NewString(tableName, "http_server")
	_tSysRegionServer.Describe = field.NewString(tableName, "describe")
	_tSysRegionServer.EnDescribe = field.NewString(tableName, "en_describe")
	_tSysRegionServer.Enabled = field.NewInt32(tableName, "enabled")
	_tSysRegionServer.Lat = field.NewFloat64(tableName, "lat")
	_tSysRegionServer.Lng = field.NewFloat64(tableName, "lng")
	_tSysRegionServer.Country = field.NewString(tableName, "country")
	_tSysRegionServer.Province = field.NewString(tableName, "province")
	_tSysRegionServer.City = field.NewString(tableName, "city")
	_tSysRegionServer.District = field.NewString(tableName, "district")
	_tSysRegionServer.CreatedBy = field.NewInt64(tableName, "created_by")
	_tSysRegionServer.AreaPhoneNumber = field.NewString(tableName, "area_phone_number")
	_tSysRegionServer.WebsocketServer = field.NewString(tableName, "websocket_server")
	_tSysRegionServer.MqttPort = field.NewInt32(tableName, "mqtt_port")

	_tSysRegionServer.fillFieldMap()

	return _tSysRegionServer
}

type tSysRegionServer struct {
	tSysRegionServerDo tSysRegionServerDo

	ALL             field.Field
	Id              field.Int64
	Sid             field.String
	LimitedCount    field.Int32
	BindedCount     field.Int32
	MqttServer      field.String
	HttpServer      field.String
	Describe        field.String
	EnDescribe      field.String
	Enabled         field.Int32
	Lat             field.Float64
	Lng             field.Float64
	Country         field.String
	Province        field.String
	City            field.String
	District        field.String
	CreatedBy       field.Int64
	AreaPhoneNumber field.String
	WebsocketServer field.String
	MqttPort        field.Int32

	fieldMap map[string]field.Expr
}

func (t tSysRegionServer) Table(newTableName string) *tSysRegionServer {
	t.tSysRegionServerDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tSysRegionServer) As(alias string) *tSysRegionServer {
	t.tSysRegionServerDo.DO = *(t.tSysRegionServerDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tSysRegionServer) updateTableName(table string) *tSysRegionServer {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Sid = field.NewString(table, "sid")
	t.LimitedCount = field.NewInt32(table, "limited_count")
	t.BindedCount = field.NewInt32(table, "binded_count")
	t.MqttServer = field.NewString(table, "mqtt_server")
	t.HttpServer = field.NewString(table, "http_server")
	t.Describe = field.NewString(table, "describe")
	t.EnDescribe = field.NewString(table, "en_describe")
	t.Enabled = field.NewInt32(table, "enabled")
	t.Lat = field.NewFloat64(table, "lat")
	t.Lng = field.NewFloat64(table, "lng")
	t.Country = field.NewString(table, "country")
	t.Province = field.NewString(table, "province")
	t.City = field.NewString(table, "city")
	t.District = field.NewString(table, "district")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.AreaPhoneNumber = field.NewString(table, "area_phone_number")
	t.WebsocketServer = field.NewString(table, "websocket_server")
	t.MqttPort = field.NewInt32(table, "mqtt_port")

	t.fillFieldMap()

	return t
}

func (t *tSysRegionServer) WithContext(ctx context.Context) *tSysRegionServerDo {
	return t.tSysRegionServerDo.WithContext(ctx)
}

func (t tSysRegionServer) TableName() string { return t.tSysRegionServerDo.TableName() }

func (t tSysRegionServer) Alias() string { return t.tSysRegionServerDo.Alias() }

func (t *tSysRegionServer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tSysRegionServer) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 19)
	t.fieldMap["id"] = t.Id
	t.fieldMap["sid"] = t.Sid
	t.fieldMap["limited_count"] = t.LimitedCount
	t.fieldMap["binded_count"] = t.BindedCount
	t.fieldMap["mqtt_server"] = t.MqttServer
	t.fieldMap["http_server"] = t.HttpServer
	t.fieldMap["describe"] = t.Describe
	t.fieldMap["en_describe"] = t.EnDescribe
	t.fieldMap["enabled"] = t.Enabled
	t.fieldMap["lat"] = t.Lat
	t.fieldMap["lng"] = t.Lng
	t.fieldMap["country"] = t.Country
	t.fieldMap["province"] = t.Province
	t.fieldMap["city"] = t.City
	t.fieldMap["district"] = t.District
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["area_phone_number"] = t.AreaPhoneNumber
	t.fieldMap["websocket_server"] = t.WebsocketServer
	t.fieldMap["mqtt_port"] = t.MqttPort
}

func (t tSysRegionServer) clone(db *gorm.DB) tSysRegionServer {
	t.tSysRegionServerDo.ReplaceDB(db)
	return t
}

type tSysRegionServerDo struct{ gen.DO }

func (t tSysRegionServerDo) Debug() *tSysRegionServerDo {
	return t.withDO(t.DO.Debug())
}

func (t tSysRegionServerDo) WithContext(ctx context.Context) *tSysRegionServerDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tSysRegionServerDo) Clauses(conds ...clause.Expression) *tSysRegionServerDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tSysRegionServerDo) Returning(value interface{}, columns ...string) *tSysRegionServerDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tSysRegionServerDo) Not(conds ...gen.Condition) *tSysRegionServerDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tSysRegionServerDo) Or(conds ...gen.Condition) *tSysRegionServerDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tSysRegionServerDo) Select(conds ...field.Expr) *tSysRegionServerDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tSysRegionServerDo) Where(conds ...gen.Condition) *tSysRegionServerDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tSysRegionServerDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tSysRegionServerDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tSysRegionServerDo) Order(conds ...field.Expr) *tSysRegionServerDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tSysRegionServerDo) Distinct(cols ...field.Expr) *tSysRegionServerDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tSysRegionServerDo) Omit(cols ...field.Expr) *tSysRegionServerDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tSysRegionServerDo) Join(table schema.Tabler, on ...field.Expr) *tSysRegionServerDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tSysRegionServerDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tSysRegionServerDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tSysRegionServerDo) RightJoin(table schema.Tabler, on ...field.Expr) *tSysRegionServerDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tSysRegionServerDo) Group(cols ...field.Expr) *tSysRegionServerDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tSysRegionServerDo) Having(conds ...gen.Condition) *tSysRegionServerDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tSysRegionServerDo) Limit(limit int) *tSysRegionServerDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tSysRegionServerDo) Offset(offset int) *tSysRegionServerDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tSysRegionServerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tSysRegionServerDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tSysRegionServerDo) Unscoped() *tSysRegionServerDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tSysRegionServerDo) Create(values ...*model.TSysRegionServer) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tSysRegionServerDo) CreateInBatches(values []*model.TSysRegionServer, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tSysRegionServerDo) Save(values ...*model.TSysRegionServer) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tSysRegionServerDo) First() (*model.TSysRegionServer, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysRegionServer), nil
	}
}

func (t tSysRegionServerDo) Take() (*model.TSysRegionServer, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysRegionServer), nil
	}
}

func (t tSysRegionServerDo) Last() (*model.TSysRegionServer, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysRegionServer), nil
	}
}

func (t tSysRegionServerDo) Find() ([]*model.TSysRegionServer, error) {
	result, err := t.DO.Find()
	return result.([]*model.TSysRegionServer), err
}

func (t tSysRegionServerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TSysRegionServer, err error) {
	buf := make([]*model.TSysRegionServer, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tSysRegionServerDo) FindInBatches(result *[]*model.TSysRegionServer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tSysRegionServerDo) Attrs(attrs ...field.AssignExpr) *tSysRegionServerDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tSysRegionServerDo) Assign(attrs ...field.AssignExpr) *tSysRegionServerDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tSysRegionServerDo) Joins(field field.RelationField) *tSysRegionServerDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tSysRegionServerDo) Preload(field field.RelationField) *tSysRegionServerDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tSysRegionServerDo) FirstOrInit() (*model.TSysRegionServer, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysRegionServer), nil
	}
}

func (t tSysRegionServerDo) FirstOrCreate() (*model.TSysRegionServer, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TSysRegionServer), nil
	}
}

func (t tSysRegionServerDo) FindByPage(offset int, limit int) (result []*model.TSysRegionServer, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tSysRegionServerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tSysRegionServerDo) withDO(do gen.Dao) *tSysRegionServerDo {
	t.DO = *do.(*gen.DO)
	return t
}
