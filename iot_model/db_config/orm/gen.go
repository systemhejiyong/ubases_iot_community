// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                        db,
		TConfigDictData:           newTConfigDictData(db),
		TConfigDictType:           newTConfigDictType(db),
		TConfigLicense:            newTConfigLicense(db),
		TConfigOss:                newTConfigOss(db),
		TConfigPlatform:           newTConfigPlatform(db),
		TConfigTranslate:          newTConfigTranslate(db),
		TConfigTranslateLanguage:  newTConfigTranslateLanguage(db),
		TSysArea:                  newTSysArea(db),
		TSysRegion:                newTSysRegion(db),
		TSysRegionServer:          newTSysRegionServer(db),
		TLangCustomResourceRecord: newTLangCustomResourceRecord(db),
		TLangCustomResources:      newTLangCustomResources(db),
		TLangResourcePackage:      newTLangResourcePackage(db),
		TLangResources:            newTLangResources(db),
		TLangTranslate:            newTLangTranslate(db),
		TLangTranslateType:        newTLangTranslateType(db),
	}
}

type Query struct {
	db *gorm.DB

	TConfigDictData           tConfigDictData
	TConfigDictType           tConfigDictType
	TConfigLicense            tConfigLicense
	TConfigOss                tConfigOss
	TConfigPlatform           tConfigPlatform
	TConfigTranslate          tConfigTranslate
	TConfigTranslateLanguage  tConfigTranslateLanguage
	TSysArea                  tSysArea
	TSysRegion                tSysRegion
	TSysRegionServer          tSysRegionServer
	TLangCustomResourceRecord tLangCustomResourceRecord
	TLangCustomResources      tLangCustomResources
	TLangResourcePackage      tLangResourcePackage
	TLangResources            tLangResources
	TLangTranslate            tLangTranslate
	TLangTranslateType        tLangTranslateType
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                        db,
		TConfigDictData:           q.TConfigDictData.clone(db),
		TConfigDictType:           q.TConfigDictType.clone(db),
		TConfigLicense:            q.TConfigLicense.clone(db),
		TConfigOss:                q.TConfigOss.clone(db),
		TConfigPlatform:           q.TConfigPlatform.clone(db),
		TConfigTranslate:          q.TConfigTranslate.clone(db),
		TConfigTranslateLanguage:  q.TConfigTranslateLanguage.clone(db),
		TSysArea:                  q.TSysArea.clone(db),
		TSysRegion:                q.TSysRegion.clone(db),
		TSysRegionServer:          q.TSysRegionServer.clone(db),
		TLangCustomResourceRecord: q.TLangCustomResourceRecord.clone(db),
		TLangCustomResources:      q.TLangCustomResources.clone(db),
		TLangResourcePackage:      q.TLangResourcePackage.clone(db),
		TLangResources:            q.TLangResources.clone(db),
		TLangTranslate:            q.TLangTranslate.clone(db),
		TLangTranslateType:        q.TLangTranslateType.clone(db),
	}
}

type queryCtx struct {
	TConfigDictData           tConfigDictDataDo
	TConfigDictType           tConfigDictTypeDo
	TConfigLicense            tConfigLicenseDo
	TConfigOss                tConfigOssDo
	TConfigPlatform           tConfigPlatformDo
	TConfigTranslate          tConfigTranslateDo
	TConfigTranslateLanguage  tConfigTranslateLanguageDo
	TSysArea                  tSysAreaDo
	TSysRegion                tSysRegionDo
	TSysRegionServer          tSysRegionServerDo
	TLangCustomResourceRecord tLangCustomResourceRecordDo
	TLangCustomResources      tLangCustomResourcesDo
	TLangResourcePackage      tLangResourcePackageDo
	TLangResources            tLangResourcesDo
	TLangTranslate            tLangTranslateDo
	TLangTranslateType        tLangTranslateTypeDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		TConfigDictData:           *q.TConfigDictData.WithContext(ctx),
		TConfigDictType:           *q.TConfigDictType.WithContext(ctx),
		TConfigLicense:            *q.TConfigLicense.WithContext(ctx),
		TConfigOss:                *q.TConfigOss.WithContext(ctx),
		TConfigPlatform:           *q.TConfigPlatform.WithContext(ctx),
		TConfigTranslate:          *q.TConfigTranslate.WithContext(ctx),
		TConfigTranslateLanguage:  *q.TConfigTranslateLanguage.WithContext(ctx),
		TSysArea:                  *q.TSysArea.WithContext(ctx),
		TSysRegion:                *q.TSysRegion.WithContext(ctx),
		TSysRegionServer:          *q.TSysRegionServer.WithContext(ctx),
		TLangCustomResourceRecord: *q.TLangCustomResourceRecord.WithContext(ctx),
		TLangCustomResources:      *q.TLangCustomResources.WithContext(ctx),
		TLangResourcePackage:      *q.TLangResourcePackage.WithContext(ctx),
		TLangResources:            *q.TLangResources.WithContext(ctx),
		TLangTranslate:            *q.TLangTranslate.WithContext(ctx),
		TLangTranslateType:        *q.TLangTranslateType.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
