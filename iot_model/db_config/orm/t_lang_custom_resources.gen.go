// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_config/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTLangCustomResources(db *gorm.DB) tLangCustomResources {
	_tLangCustomResources := tLangCustomResources{}

	_tLangCustomResources.tLangCustomResourcesDo.UseDB(db)
	_tLangCustomResources.tLangCustomResourcesDo.UseModel(&model.TLangCustomResources{})

	tableName := _tLangCustomResources.tLangCustomResourcesDo.TableName()
	_tLangCustomResources.ALL = field.NewField(tableName, "*")
	_tLangCustomResources.Id = field.NewInt64(tableName, "id")
	_tLangCustomResources.TenantId = field.NewString(tableName, "tenant_id")
	_tLangCustomResources.AppId = field.NewInt64(tableName, "app_id")
	_tLangCustomResources.AppKey = field.NewString(tableName, "app_key")
	_tLangCustomResources.Lang = field.NewString(tableName, "lang")
	_tLangCustomResources.Code = field.NewString(tableName, "code")
	_tLangCustomResources.Value = field.NewString(tableName, "value")
	_tLangCustomResources.CreatedBy = field.NewInt64(tableName, "created_by")
	_tLangCustomResources.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tLangCustomResources.CreatedAt = field.NewTime(tableName, "created_at")
	_tLangCustomResources.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tLangCustomResources.BelongType = field.NewInt32(tableName, "belong_type")
	_tLangCustomResources.BelongId = field.NewInt64(tableName, "belong_id")
	_tLangCustomResources.ProductKey = field.NewString(tableName, "product_key")

	_tLangCustomResources.fillFieldMap()

	return _tLangCustomResources
}

type tLangCustomResources struct {
	tLangCustomResourcesDo tLangCustomResourcesDo

	ALL        field.Field
	Id         field.Int64
	TenantId   field.String
	AppId      field.Int64
	AppKey     field.String
	Lang       field.String
	Code       field.String
	Value      field.String
	CreatedBy  field.Int64
	UpdatedBy  field.Int64
	CreatedAt  field.Time
	UpdatedAt  field.Time
	BelongType field.Int32
	BelongId   field.Int64
	ProductKey field.String

	fieldMap map[string]field.Expr
}

func (t tLangCustomResources) Table(newTableName string) *tLangCustomResources {
	t.tLangCustomResourcesDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tLangCustomResources) As(alias string) *tLangCustomResources {
	t.tLangCustomResourcesDo.DO = *(t.tLangCustomResourcesDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tLangCustomResources) updateTableName(table string) *tLangCustomResources {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.TenantId = field.NewString(table, "tenant_id")
	t.AppId = field.NewInt64(table, "app_id")
	t.AppKey = field.NewString(table, "app_key")
	t.Lang = field.NewString(table, "lang")
	t.Code = field.NewString(table, "code")
	t.Value = field.NewString(table, "value")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.BelongType = field.NewInt32(table, "belong_type")
	t.BelongId = field.NewInt64(table, "belong_id")
	t.ProductKey = field.NewString(table, "product_key")

	t.fillFieldMap()

	return t
}

func (t *tLangCustomResources) WithContext(ctx context.Context) *tLangCustomResourcesDo {
	return t.tLangCustomResourcesDo.WithContext(ctx)
}

func (t tLangCustomResources) TableName() string { return t.tLangCustomResourcesDo.TableName() }

func (t tLangCustomResources) Alias() string { return t.tLangCustomResourcesDo.Alias() }

func (t *tLangCustomResources) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tLangCustomResources) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 14)
	t.fieldMap["id"] = t.Id
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["app_id"] = t.AppId
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["lang"] = t.Lang
	t.fieldMap["code"] = t.Code
	t.fieldMap["value"] = t.Value
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["belong_type"] = t.BelongType
	t.fieldMap["belong_id"] = t.BelongId
	t.fieldMap["product_key"] = t.ProductKey
}

func (t tLangCustomResources) clone(db *gorm.DB) tLangCustomResources {
	t.tLangCustomResourcesDo.ReplaceDB(db)
	return t
}

type tLangCustomResourcesDo struct{ gen.DO }

func (t tLangCustomResourcesDo) Debug() *tLangCustomResourcesDo {
	return t.withDO(t.DO.Debug())
}

func (t tLangCustomResourcesDo) WithContext(ctx context.Context) *tLangCustomResourcesDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tLangCustomResourcesDo) Clauses(conds ...clause.Expression) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tLangCustomResourcesDo) Returning(value interface{}, columns ...string) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tLangCustomResourcesDo) Not(conds ...gen.Condition) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tLangCustomResourcesDo) Or(conds ...gen.Condition) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tLangCustomResourcesDo) Select(conds ...field.Expr) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tLangCustomResourcesDo) Where(conds ...gen.Condition) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tLangCustomResourcesDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tLangCustomResourcesDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tLangCustomResourcesDo) Order(conds ...field.Expr) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tLangCustomResourcesDo) Distinct(cols ...field.Expr) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tLangCustomResourcesDo) Omit(cols ...field.Expr) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tLangCustomResourcesDo) Join(table schema.Tabler, on ...field.Expr) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tLangCustomResourcesDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tLangCustomResourcesDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tLangCustomResourcesDo) RightJoin(table schema.Tabler, on ...field.Expr) *tLangCustomResourcesDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tLangCustomResourcesDo) Group(cols ...field.Expr) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tLangCustomResourcesDo) Having(conds ...gen.Condition) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tLangCustomResourcesDo) Limit(limit int) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tLangCustomResourcesDo) Offset(offset int) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tLangCustomResourcesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tLangCustomResourcesDo) Unscoped() *tLangCustomResourcesDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tLangCustomResourcesDo) Create(values ...*model.TLangCustomResources) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tLangCustomResourcesDo) CreateInBatches(values []*model.TLangCustomResources, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tLangCustomResourcesDo) Save(values ...*model.TLangCustomResources) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tLangCustomResourcesDo) First() (*model.TLangCustomResources, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangCustomResources), nil
	}
}

func (t tLangCustomResourcesDo) Take() (*model.TLangCustomResources, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangCustomResources), nil
	}
}

func (t tLangCustomResourcesDo) Last() (*model.TLangCustomResources, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangCustomResources), nil
	}
}

func (t tLangCustomResourcesDo) Find() ([]*model.TLangCustomResources, error) {
	result, err := t.DO.Find()
	return result.([]*model.TLangCustomResources), err
}

func (t tLangCustomResourcesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TLangCustomResources, err error) {
	buf := make([]*model.TLangCustomResources, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tLangCustomResourcesDo) FindInBatches(result *[]*model.TLangCustomResources, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tLangCustomResourcesDo) Attrs(attrs ...field.AssignExpr) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tLangCustomResourcesDo) Assign(attrs ...field.AssignExpr) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tLangCustomResourcesDo) Joins(field field.RelationField) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tLangCustomResourcesDo) Preload(field field.RelationField) *tLangCustomResourcesDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tLangCustomResourcesDo) FirstOrInit() (*model.TLangCustomResources, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangCustomResources), nil
	}
}

func (t tLangCustomResourcesDo) FirstOrCreate() (*model.TLangCustomResources, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TLangCustomResources), nil
	}
}

func (t tLangCustomResourcesDo) FindByPage(offset int, limit int) (result []*model.TLangCustomResources, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tLangCustomResourcesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tLangCustomResourcesDo) withDO(do gen.Dao) *tLangCustomResourcesDo {
	t.DO = *do.(*gen.DO)
	return t
}
