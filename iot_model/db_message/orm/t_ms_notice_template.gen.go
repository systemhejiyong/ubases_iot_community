// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_message/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTMsNoticeTemplate(db *gorm.DB) tMsNoticeTemplate {
	_tMsNoticeTemplate := tMsNoticeTemplate{}

	_tMsNoticeTemplate.tMsNoticeTemplateDo.UseDB(db)
	_tMsNoticeTemplate.tMsNoticeTemplateDo.UseModel(&model.TMsNoticeTemplate{})

	tableName := _tMsNoticeTemplate.tMsNoticeTemplateDo.TableName()
	_tMsNoticeTemplate.ALL = field.NewField(tableName, "*")
	_tMsNoticeTemplate.Id = field.NewInt64(tableName, "id")
	_tMsNoticeTemplate.TplSubject = field.NewString(tableName, "tpl_subject")
	_tMsNoticeTemplate.TplCode = field.NewString(tableName, "tpl_code")
	_tMsNoticeTemplate.TplName = field.NewString(tableName, "tpl_name")
	_tMsNoticeTemplate.TplContent = field.NewString(tableName, "tpl_content")
	_tMsNoticeTemplate.TplParams = field.NewString(tableName, "tpl_params")
	_tMsNoticeTemplate.ThirdparyCode = field.NewString(tableName, "thirdpary_code")
	_tMsNoticeTemplate.SmsSupplier = field.NewInt32(tableName, "sms_supplier")
	_tMsNoticeTemplate.Method = field.NewInt32(tableName, "method")
	_tMsNoticeTemplate.Lang = field.NewString(tableName, "lang")
	_tMsNoticeTemplate.TplType = field.NewInt32(tableName, "tpl_type")
	_tMsNoticeTemplate.CreatedBy = field.NewInt64(tableName, "created_by")
	_tMsNoticeTemplate.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tMsNoticeTemplate.CreatedAt = field.NewTime(tableName, "created_at")
	_tMsNoticeTemplate.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tMsNoticeTemplate.DeletedAt = field.NewField(tableName, "deleted_at")

	_tMsNoticeTemplate.fillFieldMap()

	return _tMsNoticeTemplate
}

type tMsNoticeTemplate struct {
	tMsNoticeTemplateDo tMsNoticeTemplateDo

	ALL           field.Field
	Id            field.Int64
	TplSubject    field.String
	TplCode       field.String
	TplName       field.String
	TplContent    field.String
	TplParams     field.String
	ThirdparyCode field.String
	SmsSupplier   field.Int32
	Method        field.Int32
	Lang          field.String
	TplType       field.Int32
	CreatedBy     field.Int64
	UpdatedBy     field.Int64
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field

	fieldMap map[string]field.Expr
}

func (t tMsNoticeTemplate) Table(newTableName string) *tMsNoticeTemplate {
	t.tMsNoticeTemplateDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tMsNoticeTemplate) As(alias string) *tMsNoticeTemplate {
	t.tMsNoticeTemplateDo.DO = *(t.tMsNoticeTemplateDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tMsNoticeTemplate) updateTableName(table string) *tMsNoticeTemplate {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.TplSubject = field.NewString(table, "tpl_subject")
	t.TplCode = field.NewString(table, "tpl_code")
	t.TplName = field.NewString(table, "tpl_name")
	t.TplContent = field.NewString(table, "tpl_content")
	t.TplParams = field.NewString(table, "tpl_params")
	t.ThirdparyCode = field.NewString(table, "thirdpary_code")
	t.SmsSupplier = field.NewInt32(table, "sms_supplier")
	t.Method = field.NewInt32(table, "method")
	t.Lang = field.NewString(table, "lang")
	t.TplType = field.NewInt32(table, "tpl_type")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tMsNoticeTemplate) WithContext(ctx context.Context) *tMsNoticeTemplateDo {
	return t.tMsNoticeTemplateDo.WithContext(ctx)
}

func (t tMsNoticeTemplate) TableName() string { return t.tMsNoticeTemplateDo.TableName() }

func (t tMsNoticeTemplate) Alias() string { return t.tMsNoticeTemplateDo.Alias() }

func (t *tMsNoticeTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tMsNoticeTemplate) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 16)
	t.fieldMap["id"] = t.Id
	t.fieldMap["tpl_subject"] = t.TplSubject
	t.fieldMap["tpl_code"] = t.TplCode
	t.fieldMap["tpl_name"] = t.TplName
	t.fieldMap["tpl_content"] = t.TplContent
	t.fieldMap["tpl_params"] = t.TplParams
	t.fieldMap["thirdpary_code"] = t.ThirdparyCode
	t.fieldMap["sms_supplier"] = t.SmsSupplier
	t.fieldMap["method"] = t.Method
	t.fieldMap["lang"] = t.Lang
	t.fieldMap["tpl_type"] = t.TplType
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tMsNoticeTemplate) clone(db *gorm.DB) tMsNoticeTemplate {
	t.tMsNoticeTemplateDo.ReplaceDB(db)
	return t
}

type tMsNoticeTemplateDo struct{ gen.DO }

func (t tMsNoticeTemplateDo) Debug() *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Debug())
}

func (t tMsNoticeTemplateDo) WithContext(ctx context.Context) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tMsNoticeTemplateDo) Clauses(conds ...clause.Expression) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tMsNoticeTemplateDo) Returning(value interface{}, columns ...string) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tMsNoticeTemplateDo) Not(conds ...gen.Condition) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tMsNoticeTemplateDo) Or(conds ...gen.Condition) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tMsNoticeTemplateDo) Select(conds ...field.Expr) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tMsNoticeTemplateDo) Where(conds ...gen.Condition) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tMsNoticeTemplateDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tMsNoticeTemplateDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tMsNoticeTemplateDo) Order(conds ...field.Expr) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tMsNoticeTemplateDo) Distinct(cols ...field.Expr) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tMsNoticeTemplateDo) Omit(cols ...field.Expr) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tMsNoticeTemplateDo) Join(table schema.Tabler, on ...field.Expr) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tMsNoticeTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tMsNoticeTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tMsNoticeTemplateDo) Group(cols ...field.Expr) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tMsNoticeTemplateDo) Having(conds ...gen.Condition) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tMsNoticeTemplateDo) Limit(limit int) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tMsNoticeTemplateDo) Offset(offset int) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tMsNoticeTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tMsNoticeTemplateDo) Unscoped() *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tMsNoticeTemplateDo) Create(values ...*model.TMsNoticeTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tMsNoticeTemplateDo) CreateInBatches(values []*model.TMsNoticeTemplate, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tMsNoticeTemplateDo) Save(values ...*model.TMsNoticeTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tMsNoticeTemplateDo) First() (*model.TMsNoticeTemplate, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMsNoticeTemplate), nil
	}
}

func (t tMsNoticeTemplateDo) Take() (*model.TMsNoticeTemplate, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMsNoticeTemplate), nil
	}
}

func (t tMsNoticeTemplateDo) Last() (*model.TMsNoticeTemplate, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMsNoticeTemplate), nil
	}
}

func (t tMsNoticeTemplateDo) Find() ([]*model.TMsNoticeTemplate, error) {
	result, err := t.DO.Find()
	return result.([]*model.TMsNoticeTemplate), err
}

func (t tMsNoticeTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TMsNoticeTemplate, err error) {
	buf := make([]*model.TMsNoticeTemplate, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tMsNoticeTemplateDo) FindInBatches(result *[]*model.TMsNoticeTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tMsNoticeTemplateDo) Attrs(attrs ...field.AssignExpr) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tMsNoticeTemplateDo) Assign(attrs ...field.AssignExpr) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tMsNoticeTemplateDo) Joins(field field.RelationField) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tMsNoticeTemplateDo) Preload(field field.RelationField) *tMsNoticeTemplateDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tMsNoticeTemplateDo) FirstOrInit() (*model.TMsNoticeTemplate, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMsNoticeTemplate), nil
	}
}

func (t tMsNoticeTemplateDo) FirstOrCreate() (*model.TMsNoticeTemplate, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMsNoticeTemplate), nil
	}
}

func (t tMsNoticeTemplateDo) FindByPage(offset int, limit int) (result []*model.TMsNoticeTemplate, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tMsNoticeTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tMsNoticeTemplateDo) withDO(do gen.Dao) *tMsNoticeTemplateDo {
	t.DO = *do.(*gen.DO)
	return t
}
