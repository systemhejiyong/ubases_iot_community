// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		TAppPushToken:      newTAppPushToken(db),
		TAppPushTokenUser:  newTAppPushTokenUser(db),
		TMpMessage:         newTMpMessage(db),
		TMpMessageBlack:    newTMpMessageBlack(db),
		TMpMessageRedDot:   newTMpMessageRedDot(db),
		TMpMessageTemplate: newTMpMessageTemplate(db),
		TMpMessageUserIn:   newTMpMessageUserIn(db),
		TMpMessageUserOut:  newTMpMessageUserOut(db),
		TMsNoticeTemplate:  newTMsNoticeTemplate(db),
	}
}

type Query struct {
	db *gorm.DB

	TAppPushToken      tAppPushToken
	TAppPushTokenUser  tAppPushTokenUser
	TMpMessage         tMpMessage
	TMpMessageBlack    tMpMessageBlack
	TMpMessageRedDot   tMpMessageRedDot
	TMpMessageTemplate tMpMessageTemplate
	TMpMessageUserIn   tMpMessageUserIn
	TMpMessageUserOut  tMpMessageUserOut
	TMsNoticeTemplate  tMsNoticeTemplate
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                 db,
		TAppPushToken:      q.TAppPushToken.clone(db),
		TAppPushTokenUser:  q.TAppPushTokenUser.clone(db),
		TMpMessage:         q.TMpMessage.clone(db),
		TMpMessageBlack:    q.TMpMessageBlack.clone(db),
		TMpMessageRedDot:   q.TMpMessageRedDot.clone(db),
		TMpMessageTemplate: q.TMpMessageTemplate.clone(db),
		TMpMessageUserIn:   q.TMpMessageUserIn.clone(db),
		TMpMessageUserOut:  q.TMpMessageUserOut.clone(db),
		TMsNoticeTemplate:  q.TMsNoticeTemplate.clone(db),
	}
}

type queryCtx struct {
	TAppPushToken      tAppPushTokenDo
	TAppPushTokenUser  tAppPushTokenUserDo
	TMpMessage         tMpMessageDo
	TMpMessageBlack    tMpMessageBlackDo
	TMpMessageRedDot   tMpMessageRedDotDo
	TMpMessageTemplate tMpMessageTemplateDo
	TMpMessageUserIn   tMpMessageUserInDo
	TMpMessageUserOut  tMpMessageUserOutDo
	TMsNoticeTemplate  tMsNoticeTemplateDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		TAppPushToken:      *q.TAppPushToken.WithContext(ctx),
		TAppPushTokenUser:  *q.TAppPushTokenUser.WithContext(ctx),
		TMpMessage:         *q.TMpMessage.WithContext(ctx),
		TMpMessageBlack:    *q.TMpMessageBlack.WithContext(ctx),
		TMpMessageRedDot:   *q.TMpMessageRedDot.WithContext(ctx),
		TMpMessageTemplate: *q.TMpMessageTemplate.WithContext(ctx),
		TMpMessageUserIn:   *q.TMpMessageUserIn.WithContext(ctx),
		TMpMessageUserOut:  *q.TMpMessageUserOut.WithContext(ctx),
		TMsNoticeTemplate:  *q.TMsNoticeTemplate.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
