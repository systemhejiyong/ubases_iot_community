// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_message/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTMpMessageUserIn(db *gorm.DB) tMpMessageUserIn {
	_tMpMessageUserIn := tMpMessageUserIn{}

	_tMpMessageUserIn.tMpMessageUserInDo.UseDB(db)
	_tMpMessageUserIn.tMpMessageUserInDo.UseModel(&model.TMpMessageUserIn{})

	tableName := _tMpMessageUserIn.tMpMessageUserInDo.TableName()
	_tMpMessageUserIn.ALL = field.NewField(tableName, "*")
	_tMpMessageUserIn.Id = field.NewInt64(tableName, "id")
	_tMpMessageUserIn.Lang = field.NewString(tableName, "lang")
	_tMpMessageUserIn.MessageType = field.NewInt32(tableName, "message_type")
	_tMpMessageUserIn.ChildType = field.NewString(tableName, "child_type")
	_tMpMessageUserIn.ActionType = field.NewInt32(tableName, "action_type")
	_tMpMessageUserIn.PushMode = field.NewInt32(tableName, "push_mode")
	_tMpMessageUserIn.TplCode = field.NewString(tableName, "tpl_code")
	_tMpMessageUserIn.MessageId = field.NewInt64(tableName, "message_id")
	_tMpMessageUserIn.IsPublic = field.NewInt32(tableName, "is_public")
	_tMpMessageUserIn.Did = field.NewString(tableName, "did")
	_tMpMessageUserIn.ProductKey = field.NewString(tableName, "product_key")
	_tMpMessageUserIn.UserId = field.NewInt64(tableName, "user_id")
	_tMpMessageUserIn.HomeId = field.NewInt64(tableName, "home_id")
	_tMpMessageUserIn.MsgTag = field.NewString(tableName, "msg_tag")
	_tMpMessageUserIn.IconUrl = field.NewString(tableName, "icon_url")
	_tMpMessageUserIn.PushTitle = field.NewString(tableName, "push_title")
	_tMpMessageUserIn.PushContent = field.NewString(tableName, "push_content")
	_tMpMessageUserIn.ReadFlag = field.NewInt32(tableName, "read_flag")
	_tMpMessageUserIn.UnSetExpire = field.NewInt32(tableName, "un_set_expire")
	_tMpMessageUserIn.CreatedBy = field.NewInt64(tableName, "created_by")
	_tMpMessageUserIn.CreatedAt = field.NewTime(tableName, "created_at")
	_tMpMessageUserIn.SourceTable = field.NewString(tableName, "source_table")
	_tMpMessageUserIn.SourceRowId = field.NewString(tableName, "source_row_id")
	_tMpMessageUserIn.Url = field.NewString(tableName, "url")
	_tMpMessageUserIn.AppKey = field.NewString(tableName, "app_key")
	_tMpMessageUserIn.TenantId = field.NewString(tableName, "tenant_id")
	_tMpMessageUserIn.Params = field.NewString(tableName, "params")

	_tMpMessageUserIn.fillFieldMap()

	return _tMpMessageUserIn
}

type tMpMessageUserIn struct {
	tMpMessageUserInDo tMpMessageUserInDo

	ALL         field.Field
	Id          field.Int64
	Lang        field.String
	MessageType field.Int32
	ChildType   field.String
	ActionType  field.Int32
	PushMode    field.Int32
	TplCode     field.String
	MessageId   field.Int64
	IsPublic    field.Int32
	Did         field.String
	ProductKey  field.String
	UserId      field.Int64
	HomeId      field.Int64
	MsgTag      field.String
	IconUrl     field.String
	PushTitle   field.String
	PushContent field.String
	ReadFlag    field.Int32
	UnSetExpire field.Int32
	CreatedBy   field.Int64
	CreatedAt   field.Time
	SourceTable field.String
	SourceRowId field.String
	Url         field.String
	AppKey      field.String
	TenantId    field.String
	Params      field.String

	fieldMap map[string]field.Expr
}

func (t tMpMessageUserIn) Table(newTableName string) *tMpMessageUserIn {
	t.tMpMessageUserInDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tMpMessageUserIn) As(alias string) *tMpMessageUserIn {
	t.tMpMessageUserInDo.DO = *(t.tMpMessageUserInDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tMpMessageUserIn) updateTableName(table string) *tMpMessageUserIn {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Lang = field.NewString(table, "lang")
	t.MessageType = field.NewInt32(table, "message_type")
	t.ChildType = field.NewString(table, "child_type")
	t.ActionType = field.NewInt32(table, "action_type")
	t.PushMode = field.NewInt32(table, "push_mode")
	t.TplCode = field.NewString(table, "tpl_code")
	t.MessageId = field.NewInt64(table, "message_id")
	t.IsPublic = field.NewInt32(table, "is_public")
	t.Did = field.NewString(table, "did")
	t.ProductKey = field.NewString(table, "product_key")
	t.UserId = field.NewInt64(table, "user_id")
	t.HomeId = field.NewInt64(table, "home_id")
	t.MsgTag = field.NewString(table, "msg_tag")
	t.IconUrl = field.NewString(table, "icon_url")
	t.PushTitle = field.NewString(table, "push_title")
	t.PushContent = field.NewString(table, "push_content")
	t.ReadFlag = field.NewInt32(table, "read_flag")
	t.UnSetExpire = field.NewInt32(table, "un_set_expire")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.SourceTable = field.NewString(table, "source_table")
	t.SourceRowId = field.NewString(table, "source_row_id")
	t.Url = field.NewString(table, "url")
	t.AppKey = field.NewString(table, "app_key")
	t.TenantId = field.NewString(table, "tenant_id")
	t.Params = field.NewString(table, "params")

	t.fillFieldMap()

	return t
}

func (t *tMpMessageUserIn) WithContext(ctx context.Context) *tMpMessageUserInDo {
	return t.tMpMessageUserInDo.WithContext(ctx)
}

func (t tMpMessageUserIn) TableName() string { return t.tMpMessageUserInDo.TableName() }

func (t tMpMessageUserIn) Alias() string { return t.tMpMessageUserInDo.Alias() }

func (t *tMpMessageUserIn) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tMpMessageUserIn) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 27)
	t.fieldMap["id"] = t.Id
	t.fieldMap["lang"] = t.Lang
	t.fieldMap["message_type"] = t.MessageType
	t.fieldMap["child_type"] = t.ChildType
	t.fieldMap["action_type"] = t.ActionType
	t.fieldMap["push_mode"] = t.PushMode
	t.fieldMap["tpl_code"] = t.TplCode
	t.fieldMap["message_id"] = t.MessageId
	t.fieldMap["is_public"] = t.IsPublic
	t.fieldMap["did"] = t.Did
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["user_id"] = t.UserId
	t.fieldMap["home_id"] = t.HomeId
	t.fieldMap["msg_tag"] = t.MsgTag
	t.fieldMap["icon_url"] = t.IconUrl
	t.fieldMap["push_title"] = t.PushTitle
	t.fieldMap["push_content"] = t.PushContent
	t.fieldMap["read_flag"] = t.ReadFlag
	t.fieldMap["un_set_expire"] = t.UnSetExpire
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["source_table"] = t.SourceTable
	t.fieldMap["source_row_id"] = t.SourceRowId
	t.fieldMap["url"] = t.Url
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["params"] = t.Params
}

func (t tMpMessageUserIn) clone(db *gorm.DB) tMpMessageUserIn {
	t.tMpMessageUserInDo.ReplaceDB(db)
	return t
}

type tMpMessageUserInDo struct{ gen.DO }

func (t tMpMessageUserInDo) Debug() *tMpMessageUserInDo {
	return t.withDO(t.DO.Debug())
}

func (t tMpMessageUserInDo) WithContext(ctx context.Context) *tMpMessageUserInDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tMpMessageUserInDo) Clauses(conds ...clause.Expression) *tMpMessageUserInDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tMpMessageUserInDo) Returning(value interface{}, columns ...string) *tMpMessageUserInDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tMpMessageUserInDo) Not(conds ...gen.Condition) *tMpMessageUserInDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tMpMessageUserInDo) Or(conds ...gen.Condition) *tMpMessageUserInDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tMpMessageUserInDo) Select(conds ...field.Expr) *tMpMessageUserInDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tMpMessageUserInDo) Where(conds ...gen.Condition) *tMpMessageUserInDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tMpMessageUserInDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tMpMessageUserInDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tMpMessageUserInDo) Order(conds ...field.Expr) *tMpMessageUserInDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tMpMessageUserInDo) Distinct(cols ...field.Expr) *tMpMessageUserInDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tMpMessageUserInDo) Omit(cols ...field.Expr) *tMpMessageUserInDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tMpMessageUserInDo) Join(table schema.Tabler, on ...field.Expr) *tMpMessageUserInDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tMpMessageUserInDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tMpMessageUserInDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tMpMessageUserInDo) RightJoin(table schema.Tabler, on ...field.Expr) *tMpMessageUserInDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tMpMessageUserInDo) Group(cols ...field.Expr) *tMpMessageUserInDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tMpMessageUserInDo) Having(conds ...gen.Condition) *tMpMessageUserInDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tMpMessageUserInDo) Limit(limit int) *tMpMessageUserInDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tMpMessageUserInDo) Offset(offset int) *tMpMessageUserInDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tMpMessageUserInDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tMpMessageUserInDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tMpMessageUserInDo) Unscoped() *tMpMessageUserInDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tMpMessageUserInDo) Create(values ...*model.TMpMessageUserIn) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tMpMessageUserInDo) CreateInBatches(values []*model.TMpMessageUserIn, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tMpMessageUserInDo) Save(values ...*model.TMpMessageUserIn) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tMpMessageUserInDo) First() (*model.TMpMessageUserIn, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessageUserIn), nil
	}
}

func (t tMpMessageUserInDo) Take() (*model.TMpMessageUserIn, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessageUserIn), nil
	}
}

func (t tMpMessageUserInDo) Last() (*model.TMpMessageUserIn, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessageUserIn), nil
	}
}

func (t tMpMessageUserInDo) Find() ([]*model.TMpMessageUserIn, error) {
	result, err := t.DO.Find()
	return result.([]*model.TMpMessageUserIn), err
}

func (t tMpMessageUserInDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TMpMessageUserIn, err error) {
	buf := make([]*model.TMpMessageUserIn, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tMpMessageUserInDo) FindInBatches(result *[]*model.TMpMessageUserIn, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tMpMessageUserInDo) Attrs(attrs ...field.AssignExpr) *tMpMessageUserInDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tMpMessageUserInDo) Assign(attrs ...field.AssignExpr) *tMpMessageUserInDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tMpMessageUserInDo) Joins(field field.RelationField) *tMpMessageUserInDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tMpMessageUserInDo) Preload(field field.RelationField) *tMpMessageUserInDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tMpMessageUserInDo) FirstOrInit() (*model.TMpMessageUserIn, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessageUserIn), nil
	}
}

func (t tMpMessageUserInDo) FirstOrCreate() (*model.TMpMessageUserIn, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessageUserIn), nil
	}
}

func (t tMpMessageUserInDo) FindByPage(offset int, limit int) (result []*model.TMpMessageUserIn, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tMpMessageUserInDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tMpMessageUserInDo) withDO(do gen.Dao) *tMpMessageUserInDo {
	t.DO = *do.(*gen.DO)
	return t
}
