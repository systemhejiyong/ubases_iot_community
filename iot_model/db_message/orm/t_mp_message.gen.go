// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_message/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTMpMessage(db *gorm.DB) tMpMessage {
	_tMpMessage := tMpMessage{}

	_tMpMessage.tMpMessageDo.UseDB(db)
	_tMpMessage.tMpMessageDo.UseModel(&model.TMpMessage{})

	tableName := _tMpMessage.tMpMessageDo.TableName()
	_tMpMessage.ALL = field.NewField(tableName, "*")
	_tMpMessage.Id = field.NewInt64(tableName, "id")
	_tMpMessage.PushType = field.NewInt32(tableName, "push_type")
	_tMpMessage.MessageType = field.NewInt32(tableName, "message_type")
	_tMpMessage.PushTo = field.NewString(tableName, "push_to")
	_tMpMessage.PushMode = field.NewInt32(tableName, "push_mode")
	_tMpMessage.PushStatus = field.NewInt32(tableName, "push_status")
	_tMpMessage.AgentType = field.NewInt32(tableName, "agent_type")
	_tMpMessage.PushTime = field.NewTime(tableName, "push_time")
	_tMpMessage.ExpireHour = field.NewInt32(tableName, "expire_hour")
	_tMpMessage.ActionType = field.NewInt32(tableName, "action_type")
	_tMpMessage.TplCode = field.NewString(tableName, "tpl_code")
	_tMpMessage.PushParams = field.NewString(tableName, "push_params")
	_tMpMessage.TargetIds = field.NewString(tableName, "target_ids")
	_tMpMessage.Did = field.NewString(tableName, "did")
	_tMpMessage.ProductKey = field.NewString(tableName, "product_key")
	_tMpMessage.Content = field.NewString(tableName, "content")
	_tMpMessage.CreatedBy = field.NewInt64(tableName, "created_by")
	_tMpMessage.CreatedAt = field.NewTime(tableName, "created_at")

	_tMpMessage.fillFieldMap()

	return _tMpMessage
}

type tMpMessage struct {
	tMpMessageDo tMpMessageDo

	ALL         field.Field
	Id          field.Int64
	PushType    field.Int32
	MessageType field.Int32
	PushTo      field.String
	PushMode    field.Int32
	PushStatus  field.Int32
	AgentType   field.Int32
	PushTime    field.Time
	ExpireHour  field.Int32
	ActionType  field.Int32
	TplCode     field.String
	PushParams  field.String
	TargetIds   field.String
	Did         field.String
	ProductKey  field.String
	Content     field.String
	CreatedBy   field.Int64
	CreatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (t tMpMessage) Table(newTableName string) *tMpMessage {
	t.tMpMessageDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tMpMessage) As(alias string) *tMpMessage {
	t.tMpMessageDo.DO = *(t.tMpMessageDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tMpMessage) updateTableName(table string) *tMpMessage {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.PushType = field.NewInt32(table, "push_type")
	t.MessageType = field.NewInt32(table, "message_type")
	t.PushTo = field.NewString(table, "push_to")
	t.PushMode = field.NewInt32(table, "push_mode")
	t.PushStatus = field.NewInt32(table, "push_status")
	t.AgentType = field.NewInt32(table, "agent_type")
	t.PushTime = field.NewTime(table, "push_time")
	t.ExpireHour = field.NewInt32(table, "expire_hour")
	t.ActionType = field.NewInt32(table, "action_type")
	t.TplCode = field.NewString(table, "tpl_code")
	t.PushParams = field.NewString(table, "push_params")
	t.TargetIds = field.NewString(table, "target_ids")
	t.Did = field.NewString(table, "did")
	t.ProductKey = field.NewString(table, "product_key")
	t.Content = field.NewString(table, "content")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")

	t.fillFieldMap()

	return t
}

func (t *tMpMessage) WithContext(ctx context.Context) *tMpMessageDo {
	return t.tMpMessageDo.WithContext(ctx)
}

func (t tMpMessage) TableName() string { return t.tMpMessageDo.TableName() }

func (t tMpMessage) Alias() string { return t.tMpMessageDo.Alias() }

func (t *tMpMessage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tMpMessage) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 18)
	t.fieldMap["id"] = t.Id
	t.fieldMap["push_type"] = t.PushType
	t.fieldMap["message_type"] = t.MessageType
	t.fieldMap["push_to"] = t.PushTo
	t.fieldMap["push_mode"] = t.PushMode
	t.fieldMap["push_status"] = t.PushStatus
	t.fieldMap["agent_type"] = t.AgentType
	t.fieldMap["push_time"] = t.PushTime
	t.fieldMap["expire_hour"] = t.ExpireHour
	t.fieldMap["action_type"] = t.ActionType
	t.fieldMap["tpl_code"] = t.TplCode
	t.fieldMap["push_params"] = t.PushParams
	t.fieldMap["target_ids"] = t.TargetIds
	t.fieldMap["did"] = t.Did
	t.fieldMap["product_key"] = t.ProductKey
	t.fieldMap["content"] = t.Content
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
}

func (t tMpMessage) clone(db *gorm.DB) tMpMessage {
	t.tMpMessageDo.ReplaceDB(db)
	return t
}

type tMpMessageDo struct{ gen.DO }

func (t tMpMessageDo) Debug() *tMpMessageDo {
	return t.withDO(t.DO.Debug())
}

func (t tMpMessageDo) WithContext(ctx context.Context) *tMpMessageDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tMpMessageDo) Clauses(conds ...clause.Expression) *tMpMessageDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tMpMessageDo) Returning(value interface{}, columns ...string) *tMpMessageDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tMpMessageDo) Not(conds ...gen.Condition) *tMpMessageDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tMpMessageDo) Or(conds ...gen.Condition) *tMpMessageDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tMpMessageDo) Select(conds ...field.Expr) *tMpMessageDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tMpMessageDo) Where(conds ...gen.Condition) *tMpMessageDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tMpMessageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tMpMessageDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tMpMessageDo) Order(conds ...field.Expr) *tMpMessageDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tMpMessageDo) Distinct(cols ...field.Expr) *tMpMessageDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tMpMessageDo) Omit(cols ...field.Expr) *tMpMessageDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tMpMessageDo) Join(table schema.Tabler, on ...field.Expr) *tMpMessageDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tMpMessageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tMpMessageDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tMpMessageDo) RightJoin(table schema.Tabler, on ...field.Expr) *tMpMessageDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tMpMessageDo) Group(cols ...field.Expr) *tMpMessageDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tMpMessageDo) Having(conds ...gen.Condition) *tMpMessageDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tMpMessageDo) Limit(limit int) *tMpMessageDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tMpMessageDo) Offset(offset int) *tMpMessageDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tMpMessageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tMpMessageDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tMpMessageDo) Unscoped() *tMpMessageDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tMpMessageDo) Create(values ...*model.TMpMessage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tMpMessageDo) CreateInBatches(values []*model.TMpMessage, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tMpMessageDo) Save(values ...*model.TMpMessage) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tMpMessageDo) First() (*model.TMpMessage, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessage), nil
	}
}

func (t tMpMessageDo) Take() (*model.TMpMessage, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessage), nil
	}
}

func (t tMpMessageDo) Last() (*model.TMpMessage, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessage), nil
	}
}

func (t tMpMessageDo) Find() ([]*model.TMpMessage, error) {
	result, err := t.DO.Find()
	return result.([]*model.TMpMessage), err
}

func (t tMpMessageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TMpMessage, err error) {
	buf := make([]*model.TMpMessage, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tMpMessageDo) FindInBatches(result *[]*model.TMpMessage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tMpMessageDo) Attrs(attrs ...field.AssignExpr) *tMpMessageDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tMpMessageDo) Assign(attrs ...field.AssignExpr) *tMpMessageDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tMpMessageDo) Joins(field field.RelationField) *tMpMessageDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tMpMessageDo) Preload(field field.RelationField) *tMpMessageDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tMpMessageDo) FirstOrInit() (*model.TMpMessage, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessage), nil
	}
}

func (t tMpMessageDo) FirstOrCreate() (*model.TMpMessage, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessage), nil
	}
}

func (t tMpMessageDo) FindByPage(offset int, limit int) (result []*model.TMpMessage, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tMpMessageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tMpMessageDo) withDO(do gen.Dao) *tMpMessageDo {
	t.DO = *do.(*gen.DO)
	return t
}
