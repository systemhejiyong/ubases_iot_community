// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_message/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTMsNoticeRecord(db *gorm.DB) tMsNoticeRecord {
	_tMsNoticeRecord := tMsNoticeRecord{}

	_tMsNoticeRecord.tMsNoticeRecordDo.UseDB(db)
	_tMsNoticeRecord.tMsNoticeRecordDo.UseModel(&model.TMsNoticeRecord{})

	tableName := _tMsNoticeRecord.tMsNoticeRecordDo.TableName()
	_tMsNoticeRecord.ALL = field.NewField(tableName, "*")
	_tMsNoticeRecord.Id = field.NewInt64(tableName, "id")
	_tMsNoticeRecord.Lang = field.NewString(tableName, "lang")
	_tMsNoticeRecord.Platform = field.NewInt32(tableName, "platform")
	_tMsNoticeRecord.Account = field.NewString(tableName, "account")
	_tMsNoticeRecord.Method = field.NewInt32(tableName, "method")
	_tMsNoticeRecord.SmsSupplier = field.NewInt32(tableName, "sms_supplier")
	_tMsNoticeRecord.Type = field.NewInt32(tableName, "type")
	_tMsNoticeRecord.ThirdparyCode = field.NewString(tableName, "thirdpary_code")
	_tMsNoticeRecord.NoticeTempateId = field.NewInt64(tableName, "notice_tempate_id")
	_tMsNoticeRecord.Title = field.NewString(tableName, "title")
	_tMsNoticeRecord.Content = field.NewString(tableName, "content")
	_tMsNoticeRecord.AppKey = field.NewString(tableName, "app_key")
	_tMsNoticeRecord.TenantId = field.NewString(tableName, "tenant_id")
	_tMsNoticeRecord.Status = field.NewInt32(tableName, "status")
	_tMsNoticeRecord.SendErrMsg = field.NewString(tableName, "send_err_msg")
	_tMsNoticeRecord.CreatedBy = field.NewInt64(tableName, "created_by")
	_tMsNoticeRecord.CreatedAt = field.NewTime(tableName, "created_at")

	_tMsNoticeRecord.fillFieldMap()

	return _tMsNoticeRecord
}

type tMsNoticeRecord struct {
	tMsNoticeRecordDo tMsNoticeRecordDo

	ALL             field.Field
	Id              field.Int64
	Lang            field.String
	Platform        field.Int32
	Account         field.String
	Method          field.Int32
	SmsSupplier     field.Int32
	Type            field.Int32
	ThirdparyCode   field.String
	NoticeTempateId field.Int64
	Title           field.String
	Content         field.String
	AppKey          field.String
	TenantId        field.String
	Status          field.Int32
	SendErrMsg      field.String
	CreatedBy       field.Int64
	CreatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (t tMsNoticeRecord) Table(newTableName string) *tMsNoticeRecord {
	t.tMsNoticeRecordDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tMsNoticeRecord) As(alias string) *tMsNoticeRecord {
	t.tMsNoticeRecordDo.DO = *(t.tMsNoticeRecordDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tMsNoticeRecord) updateTableName(table string) *tMsNoticeRecord {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Lang = field.NewString(table, "lang")
	t.Platform = field.NewInt32(table, "platform")
	t.Account = field.NewString(table, "account")
	t.Method = field.NewInt32(table, "method")
	t.SmsSupplier = field.NewInt32(table, "sms_supplier")
	t.Type = field.NewInt32(table, "type")
	t.ThirdparyCode = field.NewString(table, "thirdpary_code")
	t.NoticeTempateId = field.NewInt64(table, "notice_tempate_id")
	t.Title = field.NewString(table, "title")
	t.Content = field.NewString(table, "content")
	t.AppKey = field.NewString(table, "app_key")
	t.TenantId = field.NewString(table, "tenant_id")
	t.Status = field.NewInt32(table, "status")
	t.SendErrMsg = field.NewString(table, "send_err_msg")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")

	t.fillFieldMap()

	return t
}

func (t *tMsNoticeRecord) WithContext(ctx context.Context) *tMsNoticeRecordDo {
	return t.tMsNoticeRecordDo.WithContext(ctx)
}

func (t tMsNoticeRecord) TableName() string { return t.tMsNoticeRecordDo.TableName() }

func (t tMsNoticeRecord) Alias() string { return t.tMsNoticeRecordDo.Alias() }

func (t *tMsNoticeRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tMsNoticeRecord) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 17)
	t.fieldMap["id"] = t.Id
	t.fieldMap["lang"] = t.Lang
	t.fieldMap["platform"] = t.Platform
	t.fieldMap["account"] = t.Account
	t.fieldMap["method"] = t.Method
	t.fieldMap["sms_supplier"] = t.SmsSupplier
	t.fieldMap["type"] = t.Type
	t.fieldMap["thirdpary_code"] = t.ThirdparyCode
	t.fieldMap["notice_tempate_id"] = t.NoticeTempateId
	t.fieldMap["title"] = t.Title
	t.fieldMap["content"] = t.Content
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["status"] = t.Status
	t.fieldMap["send_err_msg"] = t.SendErrMsg
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
}

func (t tMsNoticeRecord) clone(db *gorm.DB) tMsNoticeRecord {
	t.tMsNoticeRecordDo.ReplaceDB(db)
	return t
}

type tMsNoticeRecordDo struct{ gen.DO }

func (t tMsNoticeRecordDo) Debug() *tMsNoticeRecordDo {
	return t.withDO(t.DO.Debug())
}

func (t tMsNoticeRecordDo) WithContext(ctx context.Context) *tMsNoticeRecordDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tMsNoticeRecordDo) Clauses(conds ...clause.Expression) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tMsNoticeRecordDo) Returning(value interface{}, columns ...string) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tMsNoticeRecordDo) Not(conds ...gen.Condition) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tMsNoticeRecordDo) Or(conds ...gen.Condition) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tMsNoticeRecordDo) Select(conds ...field.Expr) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tMsNoticeRecordDo) Where(conds ...gen.Condition) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tMsNoticeRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tMsNoticeRecordDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tMsNoticeRecordDo) Order(conds ...field.Expr) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tMsNoticeRecordDo) Distinct(cols ...field.Expr) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tMsNoticeRecordDo) Omit(cols ...field.Expr) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tMsNoticeRecordDo) Join(table schema.Tabler, on ...field.Expr) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tMsNoticeRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tMsNoticeRecordDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tMsNoticeRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *tMsNoticeRecordDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tMsNoticeRecordDo) Group(cols ...field.Expr) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tMsNoticeRecordDo) Having(conds ...gen.Condition) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tMsNoticeRecordDo) Limit(limit int) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tMsNoticeRecordDo) Offset(offset int) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tMsNoticeRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tMsNoticeRecordDo) Unscoped() *tMsNoticeRecordDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tMsNoticeRecordDo) Create(values ...*model.TMsNoticeRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tMsNoticeRecordDo) CreateInBatches(values []*model.TMsNoticeRecord, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tMsNoticeRecordDo) Save(values ...*model.TMsNoticeRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tMsNoticeRecordDo) First() (*model.TMsNoticeRecord, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMsNoticeRecord), nil
	}
}

func (t tMsNoticeRecordDo) Take() (*model.TMsNoticeRecord, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMsNoticeRecord), nil
	}
}

func (t tMsNoticeRecordDo) Last() (*model.TMsNoticeRecord, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMsNoticeRecord), nil
	}
}

func (t tMsNoticeRecordDo) Find() ([]*model.TMsNoticeRecord, error) {
	result, err := t.DO.Find()
	return result.([]*model.TMsNoticeRecord), err
}

func (t tMsNoticeRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TMsNoticeRecord, err error) {
	buf := make([]*model.TMsNoticeRecord, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tMsNoticeRecordDo) FindInBatches(result *[]*model.TMsNoticeRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tMsNoticeRecordDo) Attrs(attrs ...field.AssignExpr) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tMsNoticeRecordDo) Assign(attrs ...field.AssignExpr) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tMsNoticeRecordDo) Joins(field field.RelationField) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tMsNoticeRecordDo) Preload(field field.RelationField) *tMsNoticeRecordDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tMsNoticeRecordDo) FirstOrInit() (*model.TMsNoticeRecord, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMsNoticeRecord), nil
	}
}

func (t tMsNoticeRecordDo) FirstOrCreate() (*model.TMsNoticeRecord, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMsNoticeRecord), nil
	}
}

func (t tMsNoticeRecordDo) FindByPage(offset int, limit int) (result []*model.TMsNoticeRecord, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tMsNoticeRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tMsNoticeRecordDo) withDO(do gen.Dao) *tMsNoticeRecordDo {
	t.DO = *do.(*gen.DO)
	return t
}
