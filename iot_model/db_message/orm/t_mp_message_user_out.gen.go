// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_message/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTMpMessageUserOut(db *gorm.DB) tMpMessageUserOut {
	_tMpMessageUserOut := tMpMessageUserOut{}

	_tMpMessageUserOut.tMpMessageUserOutDo.UseDB(db)
	_tMpMessageUserOut.tMpMessageUserOutDo.UseModel(&model.TMpMessageUserOut{})

	tableName := _tMpMessageUserOut.tMpMessageUserOutDo.TableName()
	_tMpMessageUserOut.ALL = field.NewField(tableName, "*")
	_tMpMessageUserOut.Id = field.NewInt64(tableName, "id")
	_tMpMessageUserOut.Lang = field.NewString(tableName, "lang")
	_tMpMessageUserOut.MessageType = field.NewInt32(tableName, "message_type")
	_tMpMessageUserOut.ActionType = field.NewInt32(tableName, "action_type")
	_tMpMessageUserOut.PushMode = field.NewInt32(tableName, "push_mode")
	_tMpMessageUserOut.TplCode = field.NewString(tableName, "tpl_code")
	_tMpMessageUserOut.MessageId = field.NewInt64(tableName, "message_id")
	_tMpMessageUserOut.Did = field.NewString(tableName, "did")
	_tMpMessageUserOut.UserId = field.NewInt64(tableName, "user_id")
	_tMpMessageUserOut.LinkType = field.NewInt32(tableName, "link_type")
	_tMpMessageUserOut.LinkFunctionCode = field.NewString(tableName, "link_function_code")
	_tMpMessageUserOut.LinkUrl = field.NewString(tableName, "link_url")
	_tMpMessageUserOut.Dynamic = field.NewString(tableName, "dynamic")
	_tMpMessageUserOut.PushTitle = field.NewString(tableName, "push_title")
	_tMpMessageUserOut.PushContent = field.NewString(tableName, "push_content")
	_tMpMessageUserOut.ExternalId = field.NewString(tableName, "external_id")
	_tMpMessageUserOut.ExternalStatus = field.NewInt32(tableName, "external_status")
	_tMpMessageUserOut.ExternalErrorMessage = field.NewString(tableName, "external_error_message")
	_tMpMessageUserOut.CreatedBy = field.NewInt64(tableName, "created_by")
	_tMpMessageUserOut.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tMpMessageUserOut.CreatedAt = field.NewTime(tableName, "created_at")
	_tMpMessageUserOut.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tMpMessageUserOut.DeletedAt = field.NewField(tableName, "deleted_at")

	_tMpMessageUserOut.fillFieldMap()

	return _tMpMessageUserOut
}

type tMpMessageUserOut struct {
	tMpMessageUserOutDo tMpMessageUserOutDo

	ALL                  field.Field
	Id                   field.Int64
	Lang                 field.String
	MessageType          field.Int32
	ActionType           field.Int32
	PushMode             field.Int32
	TplCode              field.String
	MessageId            field.Int64
	Did                  field.String
	UserId               field.Int64
	LinkType             field.Int32
	LinkFunctionCode     field.String
	LinkUrl              field.String
	Dynamic              field.String
	PushTitle            field.String
	PushContent          field.String
	ExternalId           field.String
	ExternalStatus       field.Int32
	ExternalErrorMessage field.String
	CreatedBy            field.Int64
	UpdatedBy            field.Int64
	CreatedAt            field.Time
	UpdatedAt            field.Time
	DeletedAt            field.Field

	fieldMap map[string]field.Expr
}

func (t tMpMessageUserOut) Table(newTableName string) *tMpMessageUserOut {
	t.tMpMessageUserOutDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tMpMessageUserOut) As(alias string) *tMpMessageUserOut {
	t.tMpMessageUserOutDo.DO = *(t.tMpMessageUserOutDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tMpMessageUserOut) updateTableName(table string) *tMpMessageUserOut {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Lang = field.NewString(table, "lang")
	t.MessageType = field.NewInt32(table, "message_type")
	t.ActionType = field.NewInt32(table, "action_type")
	t.PushMode = field.NewInt32(table, "push_mode")
	t.TplCode = field.NewString(table, "tpl_code")
	t.MessageId = field.NewInt64(table, "message_id")
	t.Did = field.NewString(table, "did")
	t.UserId = field.NewInt64(table, "user_id")
	t.LinkType = field.NewInt32(table, "link_type")
	t.LinkFunctionCode = field.NewString(table, "link_function_code")
	t.LinkUrl = field.NewString(table, "link_url")
	t.Dynamic = field.NewString(table, "dynamic")
	t.PushTitle = field.NewString(table, "push_title")
	t.PushContent = field.NewString(table, "push_content")
	t.ExternalId = field.NewString(table, "external_id")
	t.ExternalStatus = field.NewInt32(table, "external_status")
	t.ExternalErrorMessage = field.NewString(table, "external_error_message")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tMpMessageUserOut) WithContext(ctx context.Context) *tMpMessageUserOutDo {
	return t.tMpMessageUserOutDo.WithContext(ctx)
}

func (t tMpMessageUserOut) TableName() string { return t.tMpMessageUserOutDo.TableName() }

func (t tMpMessageUserOut) Alias() string { return t.tMpMessageUserOutDo.Alias() }

func (t *tMpMessageUserOut) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tMpMessageUserOut) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 23)
	t.fieldMap["id"] = t.Id
	t.fieldMap["lang"] = t.Lang
	t.fieldMap["message_type"] = t.MessageType
	t.fieldMap["action_type"] = t.ActionType
	t.fieldMap["push_mode"] = t.PushMode
	t.fieldMap["tpl_code"] = t.TplCode
	t.fieldMap["message_id"] = t.MessageId
	t.fieldMap["did"] = t.Did
	t.fieldMap["user_id"] = t.UserId
	t.fieldMap["link_type"] = t.LinkType
	t.fieldMap["link_function_code"] = t.LinkFunctionCode
	t.fieldMap["link_url"] = t.LinkUrl
	t.fieldMap["dynamic"] = t.Dynamic
	t.fieldMap["push_title"] = t.PushTitle
	t.fieldMap["push_content"] = t.PushContent
	t.fieldMap["external_id"] = t.ExternalId
	t.fieldMap["external_status"] = t.ExternalStatus
	t.fieldMap["external_error_message"] = t.ExternalErrorMessage
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tMpMessageUserOut) clone(db *gorm.DB) tMpMessageUserOut {
	t.tMpMessageUserOutDo.ReplaceDB(db)
	return t
}

type tMpMessageUserOutDo struct{ gen.DO }

func (t tMpMessageUserOutDo) Debug() *tMpMessageUserOutDo {
	return t.withDO(t.DO.Debug())
}

func (t tMpMessageUserOutDo) WithContext(ctx context.Context) *tMpMessageUserOutDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tMpMessageUserOutDo) Clauses(conds ...clause.Expression) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tMpMessageUserOutDo) Returning(value interface{}, columns ...string) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tMpMessageUserOutDo) Not(conds ...gen.Condition) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tMpMessageUserOutDo) Or(conds ...gen.Condition) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tMpMessageUserOutDo) Select(conds ...field.Expr) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tMpMessageUserOutDo) Where(conds ...gen.Condition) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tMpMessageUserOutDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tMpMessageUserOutDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tMpMessageUserOutDo) Order(conds ...field.Expr) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tMpMessageUserOutDo) Distinct(cols ...field.Expr) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tMpMessageUserOutDo) Omit(cols ...field.Expr) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tMpMessageUserOutDo) Join(table schema.Tabler, on ...field.Expr) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tMpMessageUserOutDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tMpMessageUserOutDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tMpMessageUserOutDo) RightJoin(table schema.Tabler, on ...field.Expr) *tMpMessageUserOutDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tMpMessageUserOutDo) Group(cols ...field.Expr) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tMpMessageUserOutDo) Having(conds ...gen.Condition) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tMpMessageUserOutDo) Limit(limit int) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tMpMessageUserOutDo) Offset(offset int) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tMpMessageUserOutDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tMpMessageUserOutDo) Unscoped() *tMpMessageUserOutDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tMpMessageUserOutDo) Create(values ...*model.TMpMessageUserOut) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tMpMessageUserOutDo) CreateInBatches(values []*model.TMpMessageUserOut, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tMpMessageUserOutDo) Save(values ...*model.TMpMessageUserOut) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tMpMessageUserOutDo) First() (*model.TMpMessageUserOut, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessageUserOut), nil
	}
}

func (t tMpMessageUserOutDo) Take() (*model.TMpMessageUserOut, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessageUserOut), nil
	}
}

func (t tMpMessageUserOutDo) Last() (*model.TMpMessageUserOut, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessageUserOut), nil
	}
}

func (t tMpMessageUserOutDo) Find() ([]*model.TMpMessageUserOut, error) {
	result, err := t.DO.Find()
	return result.([]*model.TMpMessageUserOut), err
}

func (t tMpMessageUserOutDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TMpMessageUserOut, err error) {
	buf := make([]*model.TMpMessageUserOut, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tMpMessageUserOutDo) FindInBatches(result *[]*model.TMpMessageUserOut, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tMpMessageUserOutDo) Attrs(attrs ...field.AssignExpr) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tMpMessageUserOutDo) Assign(attrs ...field.AssignExpr) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tMpMessageUserOutDo) Joins(field field.RelationField) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tMpMessageUserOutDo) Preload(field field.RelationField) *tMpMessageUserOutDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tMpMessageUserOutDo) FirstOrInit() (*model.TMpMessageUserOut, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessageUserOut), nil
	}
}

func (t tMpMessageUserOutDo) FirstOrCreate() (*model.TMpMessageUserOut, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessageUserOut), nil
	}
}

func (t tMpMessageUserOutDo) FindByPage(offset int, limit int) (result []*model.TMpMessageUserOut, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tMpMessageUserOutDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tMpMessageUserOutDo) withDO(do gen.Dao) *tMpMessageUserOutDo {
	t.DO = *do.(*gen.DO)
	return t
}
