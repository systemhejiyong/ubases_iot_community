// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_message/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTMpMessageRedDot(db *gorm.DB) tMpMessageRedDot {
	_tMpMessageRedDot := tMpMessageRedDot{}

	_tMpMessageRedDot.tMpMessageRedDotDo.UseDB(db)
	_tMpMessageRedDot.tMpMessageRedDotDo.UseModel(&model.TMpMessageRedDot{})

	tableName := _tMpMessageRedDot.tMpMessageRedDotDo.TableName()
	_tMpMessageRedDot.ALL = field.NewField(tableName, "*")
	_tMpMessageRedDot.Id = field.NewInt64(tableName, "id")
	_tMpMessageRedDot.UserId = field.NewInt64(tableName, "user_id")
	_tMpMessageRedDot.HomeMsg = field.NewInt32(tableName, "home_msg")
	_tMpMessageRedDot.SystemMsg = field.NewInt32(tableName, "system_msg")
	_tMpMessageRedDot.SystemMsgId = field.NewInt64(tableName, "system_msg_id")
	_tMpMessageRedDot.DeviceMsg = field.NewInt32(tableName, "device_msg")
	_tMpMessageRedDot.PublicMsg = field.NewInt64(tableName, "public_msg")
	_tMpMessageRedDot.FeedbackMsg = field.NewInt32(tableName, "feedback_msg")
	_tMpMessageRedDot.CreatedBy = field.NewInt64(tableName, "created_by")
	_tMpMessageRedDot.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tMpMessageRedDot.CreatedAt = field.NewTime(tableName, "created_at")
	_tMpMessageRedDot.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tMpMessageRedDot.SystemMsgNum = field.NewInt32(tableName, "system_msg_num")
	_tMpMessageRedDot.DeviceMsgNum = field.NewInt32(tableName, "device_msg_num")
	_tMpMessageRedDot.PublicMsgNum = field.NewInt32(tableName, "public_msg_num")
	_tMpMessageRedDot.HomeMsgNum = field.NewInt32(tableName, "home_msg_num")
	_tMpMessageRedDot.FeedbackMsgNum = field.NewInt32(tableName, "feedback_msg_num")

	_tMpMessageRedDot.fillFieldMap()

	return _tMpMessageRedDot
}

type tMpMessageRedDot struct {
	tMpMessageRedDotDo tMpMessageRedDotDo

	ALL            field.Field
	Id             field.Int64
	UserId         field.Int64
	HomeMsg        field.Int32
	SystemMsg      field.Int32
	SystemMsgId    field.Int64
	DeviceMsg      field.Int32
	PublicMsg      field.Int64
	FeedbackMsg    field.Int32
	CreatedBy      field.Int64
	UpdatedBy      field.Int64
	CreatedAt      field.Time
	UpdatedAt      field.Time
	SystemMsgNum   field.Int32
	DeviceMsgNum   field.Int32
	PublicMsgNum   field.Int32
	HomeMsgNum     field.Int32
	FeedbackMsgNum field.Int32

	fieldMap map[string]field.Expr
}

func (t tMpMessageRedDot) Table(newTableName string) *tMpMessageRedDot {
	t.tMpMessageRedDotDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tMpMessageRedDot) As(alias string) *tMpMessageRedDot {
	t.tMpMessageRedDotDo.DO = *(t.tMpMessageRedDotDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tMpMessageRedDot) updateTableName(table string) *tMpMessageRedDot {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.UserId = field.NewInt64(table, "user_id")
	t.HomeMsg = field.NewInt32(table, "home_msg")
	t.SystemMsg = field.NewInt32(table, "system_msg")
	t.SystemMsgId = field.NewInt64(table, "system_msg_id")
	t.DeviceMsg = field.NewInt32(table, "device_msg")
	t.PublicMsg = field.NewInt64(table, "public_msg")
	t.FeedbackMsg = field.NewInt32(table, "feedback_msg")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.SystemMsgNum = field.NewInt32(table, "system_msg_num")
	t.DeviceMsgNum = field.NewInt32(table, "device_msg_num")
	t.PublicMsgNum = field.NewInt32(table, "public_msg_num")
	t.HomeMsgNum = field.NewInt32(table, "home_msg_num")
	t.FeedbackMsgNum = field.NewInt32(table, "feedback_msg_num")

	t.fillFieldMap()

	return t
}

func (t *tMpMessageRedDot) WithContext(ctx context.Context) *tMpMessageRedDotDo {
	return t.tMpMessageRedDotDo.WithContext(ctx)
}

func (t tMpMessageRedDot) TableName() string { return t.tMpMessageRedDotDo.TableName() }

func (t tMpMessageRedDot) Alias() string { return t.tMpMessageRedDotDo.Alias() }

func (t *tMpMessageRedDot) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tMpMessageRedDot) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 17)
	t.fieldMap["id"] = t.Id
	t.fieldMap["user_id"] = t.UserId
	t.fieldMap["home_msg"] = t.HomeMsg
	t.fieldMap["system_msg"] = t.SystemMsg
	t.fieldMap["system_msg_id"] = t.SystemMsgId
	t.fieldMap["device_msg"] = t.DeviceMsg
	t.fieldMap["public_msg"] = t.PublicMsg
	t.fieldMap["feedback_msg"] = t.FeedbackMsg
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["system_msg_num"] = t.SystemMsgNum
	t.fieldMap["device_msg_num"] = t.DeviceMsgNum
	t.fieldMap["public_msg_num"] = t.PublicMsgNum
	t.fieldMap["home_msg_num"] = t.HomeMsgNum
	t.fieldMap["feedback_msg_num"] = t.FeedbackMsgNum
}

func (t tMpMessageRedDot) clone(db *gorm.DB) tMpMessageRedDot {
	t.tMpMessageRedDotDo.ReplaceDB(db)
	return t
}

type tMpMessageRedDotDo struct{ gen.DO }

func (t tMpMessageRedDotDo) Debug() *tMpMessageRedDotDo {
	return t.withDO(t.DO.Debug())
}

func (t tMpMessageRedDotDo) WithContext(ctx context.Context) *tMpMessageRedDotDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tMpMessageRedDotDo) Clauses(conds ...clause.Expression) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tMpMessageRedDotDo) Returning(value interface{}, columns ...string) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tMpMessageRedDotDo) Not(conds ...gen.Condition) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tMpMessageRedDotDo) Or(conds ...gen.Condition) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tMpMessageRedDotDo) Select(conds ...field.Expr) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tMpMessageRedDotDo) Where(conds ...gen.Condition) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tMpMessageRedDotDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tMpMessageRedDotDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tMpMessageRedDotDo) Order(conds ...field.Expr) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tMpMessageRedDotDo) Distinct(cols ...field.Expr) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tMpMessageRedDotDo) Omit(cols ...field.Expr) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tMpMessageRedDotDo) Join(table schema.Tabler, on ...field.Expr) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tMpMessageRedDotDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tMpMessageRedDotDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tMpMessageRedDotDo) RightJoin(table schema.Tabler, on ...field.Expr) *tMpMessageRedDotDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tMpMessageRedDotDo) Group(cols ...field.Expr) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tMpMessageRedDotDo) Having(conds ...gen.Condition) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tMpMessageRedDotDo) Limit(limit int) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tMpMessageRedDotDo) Offset(offset int) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tMpMessageRedDotDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tMpMessageRedDotDo) Unscoped() *tMpMessageRedDotDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tMpMessageRedDotDo) Create(values ...*model.TMpMessageRedDot) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tMpMessageRedDotDo) CreateInBatches(values []*model.TMpMessageRedDot, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tMpMessageRedDotDo) Save(values ...*model.TMpMessageRedDot) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tMpMessageRedDotDo) First() (*model.TMpMessageRedDot, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessageRedDot), nil
	}
}

func (t tMpMessageRedDotDo) Take() (*model.TMpMessageRedDot, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessageRedDot), nil
	}
}

func (t tMpMessageRedDotDo) Last() (*model.TMpMessageRedDot, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessageRedDot), nil
	}
}

func (t tMpMessageRedDotDo) Find() ([]*model.TMpMessageRedDot, error) {
	result, err := t.DO.Find()
	return result.([]*model.TMpMessageRedDot), err
}

func (t tMpMessageRedDotDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TMpMessageRedDot, err error) {
	buf := make([]*model.TMpMessageRedDot, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tMpMessageRedDotDo) FindInBatches(result *[]*model.TMpMessageRedDot, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tMpMessageRedDotDo) Attrs(attrs ...field.AssignExpr) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tMpMessageRedDotDo) Assign(attrs ...field.AssignExpr) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tMpMessageRedDotDo) Joins(field field.RelationField) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tMpMessageRedDotDo) Preload(field field.RelationField) *tMpMessageRedDotDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tMpMessageRedDotDo) FirstOrInit() (*model.TMpMessageRedDot, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessageRedDot), nil
	}
}

func (t tMpMessageRedDotDo) FirstOrCreate() (*model.TMpMessageRedDot, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TMpMessageRedDot), nil
	}
}

func (t tMpMessageRedDotDo) FindByPage(offset int, limit int) (result []*model.TMpMessageRedDot, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tMpMessageRedDotDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tMpMessageRedDotDo) withDO(do gen.Dao) *tMpMessageRedDotDo {
	t.DO = *do.(*gen.DO)
	return t
}
