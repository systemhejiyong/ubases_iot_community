// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app_oem/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOemAppFlashScreenUser(db *gorm.DB) tOemAppFlashScreenUser {
	_tOemAppFlashScreenUser := tOemAppFlashScreenUser{}

	_tOemAppFlashScreenUser.tOemAppFlashScreenUserDo.UseDB(db)
	_tOemAppFlashScreenUser.tOemAppFlashScreenUserDo.UseModel(&model.TOemAppFlashScreenUser{})

	tableName := _tOemAppFlashScreenUser.tOemAppFlashScreenUserDo.TableName()
	_tOemAppFlashScreenUser.ALL = field.NewField(tableName, "*")
	_tOemAppFlashScreenUser.Id = field.NewInt64(tableName, "id")
	_tOemAppFlashScreenUser.FlashScreenId = field.NewInt64(tableName, "flash_screen_id")
	_tOemAppFlashScreenUser.Account = field.NewString(tableName, "account")

	_tOemAppFlashScreenUser.fillFieldMap()

	return _tOemAppFlashScreenUser
}

type tOemAppFlashScreenUser struct {
	tOemAppFlashScreenUserDo tOemAppFlashScreenUserDo

	ALL           field.Field
	Id            field.Int64
	FlashScreenId field.Int64
	Account       field.String

	fieldMap map[string]field.Expr
}

func (t tOemAppFlashScreenUser) Table(newTableName string) *tOemAppFlashScreenUser {
	t.tOemAppFlashScreenUserDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOemAppFlashScreenUser) As(alias string) *tOemAppFlashScreenUser {
	t.tOemAppFlashScreenUserDo.DO = *(t.tOemAppFlashScreenUserDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOemAppFlashScreenUser) updateTableName(table string) *tOemAppFlashScreenUser {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.FlashScreenId = field.NewInt64(table, "flash_screen_id")
	t.Account = field.NewString(table, "account")

	t.fillFieldMap()

	return t
}

func (t *tOemAppFlashScreenUser) WithContext(ctx context.Context) *tOemAppFlashScreenUserDo {
	return t.tOemAppFlashScreenUserDo.WithContext(ctx)
}

func (t tOemAppFlashScreenUser) TableName() string { return t.tOemAppFlashScreenUserDo.TableName() }

func (t *tOemAppFlashScreenUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOemAppFlashScreenUser) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["id"] = t.Id
	t.fieldMap["flash_screen_id"] = t.FlashScreenId
	t.fieldMap["account"] = t.Account
}

func (t tOemAppFlashScreenUser) clone(db *gorm.DB) tOemAppFlashScreenUser {
	t.tOemAppFlashScreenUserDo.ReplaceDB(db)
	return t
}

type tOemAppFlashScreenUserDo struct{ gen.DO }

func (t tOemAppFlashScreenUserDo) Debug() *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Debug())
}

func (t tOemAppFlashScreenUserDo) WithContext(ctx context.Context) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOemAppFlashScreenUserDo) Clauses(conds ...clause.Expression) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOemAppFlashScreenUserDo) Returning(value interface{}, columns ...string) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOemAppFlashScreenUserDo) Not(conds ...gen.Condition) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOemAppFlashScreenUserDo) Or(conds ...gen.Condition) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOemAppFlashScreenUserDo) Select(conds ...field.Expr) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOemAppFlashScreenUserDo) Where(conds ...gen.Condition) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOemAppFlashScreenUserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOemAppFlashScreenUserDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOemAppFlashScreenUserDo) Order(conds ...field.Expr) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOemAppFlashScreenUserDo) Distinct(cols ...field.Expr) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOemAppFlashScreenUserDo) Omit(cols ...field.Expr) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOemAppFlashScreenUserDo) Join(table schema.Tabler, on ...field.Expr) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOemAppFlashScreenUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOemAppFlashScreenUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOemAppFlashScreenUserDo) Group(cols ...field.Expr) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOemAppFlashScreenUserDo) Having(conds ...gen.Condition) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOemAppFlashScreenUserDo) Limit(limit int) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOemAppFlashScreenUserDo) Offset(offset int) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOemAppFlashScreenUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOemAppFlashScreenUserDo) Unscoped() *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOemAppFlashScreenUserDo) Create(values ...*model.TOemAppFlashScreenUser) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOemAppFlashScreenUserDo) CreateInBatches(values []*model.TOemAppFlashScreenUser, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOemAppFlashScreenUserDo) Save(values ...*model.TOemAppFlashScreenUser) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOemAppFlashScreenUserDo) First() (*model.TOemAppFlashScreenUser, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppFlashScreenUser), nil
	}
}

func (t tOemAppFlashScreenUserDo) Take() (*model.TOemAppFlashScreenUser, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppFlashScreenUser), nil
	}
}

func (t tOemAppFlashScreenUserDo) Last() (*model.TOemAppFlashScreenUser, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppFlashScreenUser), nil
	}
}

func (t tOemAppFlashScreenUserDo) Find() ([]*model.TOemAppFlashScreenUser, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOemAppFlashScreenUser), err
}

func (t tOemAppFlashScreenUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOemAppFlashScreenUser, err error) {
	buf := make([]*model.TOemAppFlashScreenUser, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOemAppFlashScreenUserDo) FindInBatches(result *[]*model.TOemAppFlashScreenUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOemAppFlashScreenUserDo) Attrs(attrs ...field.AssignExpr) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOemAppFlashScreenUserDo) Assign(attrs ...field.AssignExpr) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOemAppFlashScreenUserDo) Joins(field field.RelationField) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOemAppFlashScreenUserDo) Preload(field field.RelationField) *tOemAppFlashScreenUserDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOemAppFlashScreenUserDo) FirstOrInit() (*model.TOemAppFlashScreenUser, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppFlashScreenUser), nil
	}
}

func (t tOemAppFlashScreenUserDo) FirstOrCreate() (*model.TOemAppFlashScreenUser, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppFlashScreenUser), nil
	}
}

func (t tOemAppFlashScreenUserDo) FindByPage(offset int, limit int) (result []*model.TOemAppFlashScreenUser, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOemAppFlashScreenUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOemAppFlashScreenUserDo) withDO(do gen.Dao) *tOemAppFlashScreenUserDo {
	t.DO = *do.(*gen.DO)
	return t
}
