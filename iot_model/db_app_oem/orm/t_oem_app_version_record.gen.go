// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app_oem/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOemAppVersionRecord(db *gorm.DB) tOemAppVersionRecord {
	_tOemAppVersionRecord := tOemAppVersionRecord{}

	_tOemAppVersionRecord.tOemAppVersionRecordDo.UseDB(db)
	_tOemAppVersionRecord.tOemAppVersionRecordDo.UseModel(&model.TOemAppVersionRecord{})

	tableName := _tOemAppVersionRecord.tOemAppVersionRecordDo.TableName()
	_tOemAppVersionRecord.ALL = field.NewField(tableName, "*")
	_tOemAppVersionRecord.AppId = field.NewInt64(tableName, "app_id")
	_tOemAppVersionRecord.Version = field.NewString(tableName, "version")
	_tOemAppVersionRecord.Status = field.NewInt32(tableName, "status")
	_tOemAppVersionRecord.UpdatedAt = field.NewTime(tableName, "updated_at")

	_tOemAppVersionRecord.fillFieldMap()

	return _tOemAppVersionRecord
}

type tOemAppVersionRecord struct {
	tOemAppVersionRecordDo tOemAppVersionRecordDo

	ALL       field.Field
	AppId     field.Int64
	Version   field.String
	Status    field.Int32
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (t tOemAppVersionRecord) Table(newTableName string) *tOemAppVersionRecord {
	t.tOemAppVersionRecordDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOemAppVersionRecord) As(alias string) *tOemAppVersionRecord {
	t.tOemAppVersionRecordDo.DO = *(t.tOemAppVersionRecordDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOemAppVersionRecord) updateTableName(table string) *tOemAppVersionRecord {
	t.ALL = field.NewField(table, "*")
	t.AppId = field.NewInt64(table, "app_id")
	t.Version = field.NewString(table, "version")
	t.Status = field.NewInt32(table, "status")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *tOemAppVersionRecord) WithContext(ctx context.Context) *tOemAppVersionRecordDo {
	return t.tOemAppVersionRecordDo.WithContext(ctx)
}

func (t tOemAppVersionRecord) TableName() string { return t.tOemAppVersionRecordDo.TableName() }

func (t tOemAppVersionRecord) Alias() string { return t.tOemAppVersionRecordDo.Alias() }

func (t *tOemAppVersionRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOemAppVersionRecord) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 4)
	t.fieldMap["app_id"] = t.AppId
	t.fieldMap["version"] = t.Version
	t.fieldMap["status"] = t.Status
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t tOemAppVersionRecord) clone(db *gorm.DB) tOemAppVersionRecord {
	t.tOemAppVersionRecordDo.ReplaceDB(db)
	return t
}

type tOemAppVersionRecordDo struct{ gen.DO }

func (t tOemAppVersionRecordDo) Debug() *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Debug())
}

func (t tOemAppVersionRecordDo) WithContext(ctx context.Context) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOemAppVersionRecordDo) Clauses(conds ...clause.Expression) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOemAppVersionRecordDo) Returning(value interface{}, columns ...string) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOemAppVersionRecordDo) Not(conds ...gen.Condition) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOemAppVersionRecordDo) Or(conds ...gen.Condition) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOemAppVersionRecordDo) Select(conds ...field.Expr) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOemAppVersionRecordDo) Where(conds ...gen.Condition) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOemAppVersionRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOemAppVersionRecordDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOemAppVersionRecordDo) Order(conds ...field.Expr) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOemAppVersionRecordDo) Distinct(cols ...field.Expr) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOemAppVersionRecordDo) Omit(cols ...field.Expr) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOemAppVersionRecordDo) Join(table schema.Tabler, on ...field.Expr) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOemAppVersionRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOemAppVersionRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOemAppVersionRecordDo) Group(cols ...field.Expr) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOemAppVersionRecordDo) Having(conds ...gen.Condition) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOemAppVersionRecordDo) Limit(limit int) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOemAppVersionRecordDo) Offset(offset int) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOemAppVersionRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOemAppVersionRecordDo) Unscoped() *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOemAppVersionRecordDo) Create(values ...*model.TOemAppVersionRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOemAppVersionRecordDo) CreateInBatches(values []*model.TOemAppVersionRecord, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOemAppVersionRecordDo) Save(values ...*model.TOemAppVersionRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOemAppVersionRecordDo) First() (*model.TOemAppVersionRecord, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppVersionRecord), nil
	}
}

func (t tOemAppVersionRecordDo) Take() (*model.TOemAppVersionRecord, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppVersionRecord), nil
	}
}

func (t tOemAppVersionRecordDo) Last() (*model.TOemAppVersionRecord, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppVersionRecord), nil
	}
}

func (t tOemAppVersionRecordDo) Find() ([]*model.TOemAppVersionRecord, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOemAppVersionRecord), err
}

func (t tOemAppVersionRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOemAppVersionRecord, err error) {
	buf := make([]*model.TOemAppVersionRecord, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOemAppVersionRecordDo) FindInBatches(result *[]*model.TOemAppVersionRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOemAppVersionRecordDo) Attrs(attrs ...field.AssignExpr) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOemAppVersionRecordDo) Assign(attrs ...field.AssignExpr) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOemAppVersionRecordDo) Joins(field field.RelationField) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOemAppVersionRecordDo) Preload(field field.RelationField) *tOemAppVersionRecordDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOemAppVersionRecordDo) FirstOrInit() (*model.TOemAppVersionRecord, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppVersionRecord), nil
	}
}

func (t tOemAppVersionRecordDo) FirstOrCreate() (*model.TOemAppVersionRecord, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppVersionRecord), nil
	}
}

func (t tOemAppVersionRecordDo) FindByPage(offset int, limit int) (result []*model.TOemAppVersionRecord, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOemAppVersionRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOemAppVersionRecordDo) withDO(do gen.Dao) *tOemAppVersionRecordDo {
	t.DO = *do.(*gen.DO)
	return t
}
