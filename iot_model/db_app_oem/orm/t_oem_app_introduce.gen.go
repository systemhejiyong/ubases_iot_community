// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app_oem/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOemAppIntroduce(db *gorm.DB) tOemAppIntroduce {
	_tOemAppIntroduce := tOemAppIntroduce{}

	_tOemAppIntroduce.tOemAppIntroduceDo.UseDB(db)
	_tOemAppIntroduce.tOemAppIntroduceDo.UseModel(&model.TOemAppIntroduce{})

	tableName := _tOemAppIntroduce.tOemAppIntroduceDo.TableName()
	_tOemAppIntroduce.ALL = field.NewField(tableName, "*")
	_tOemAppIntroduce.Id = field.NewInt64(tableName, "id")
	_tOemAppIntroduce.Content = field.NewString(tableName, "content")
	_tOemAppIntroduce.ContentUrl = field.NewString(tableName, "content_url")
	_tOemAppIntroduce.Lang = field.NewString(tableName, "lang")
	_tOemAppIntroduce.Status = field.NewInt32(tableName, "status")
	_tOemAppIntroduce.ContentType = field.NewInt32(tableName, "content_type")
	_tOemAppIntroduce.AppId = field.NewInt64(tableName, "app_id")
	_tOemAppIntroduce.AppKey = field.NewString(tableName, "app_key")
	_tOemAppIntroduce.Version = field.NewString(tableName, "version")
	_tOemAppIntroduce.VoiceCode = field.NewString(tableName, "voice_code")
	_tOemAppIntroduce.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOemAppIntroduce.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOemAppIntroduce.CreatedAt = field.NewTime(tableName, "created_at")
	_tOemAppIntroduce.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOemAppIntroduce.DeletedAt = field.NewField(tableName, "deleted_at")
	_tOemAppIntroduce.Abstract = field.NewString(tableName, "abstract")

	_tOemAppIntroduce.fillFieldMap()

	return _tOemAppIntroduce
}

type tOemAppIntroduce struct {
	tOemAppIntroduceDo tOemAppIntroduceDo

	ALL         field.Field
	Id          field.Int64
	Content     field.String
	ContentUrl  field.String
	Lang        field.String
	Status      field.Int32
	ContentType field.Int32
	AppId       field.Int64
	AppKey      field.String
	Version     field.String
	VoiceCode   field.String
	CreatedBy   field.Int64
	UpdatedBy   field.Int64
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Abstract    field.String

	fieldMap map[string]field.Expr
}

func (t tOemAppIntroduce) Table(newTableName string) *tOemAppIntroduce {
	t.tOemAppIntroduceDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOemAppIntroduce) As(alias string) *tOemAppIntroduce {
	t.tOemAppIntroduceDo.DO = *(t.tOemAppIntroduceDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOemAppIntroduce) updateTableName(table string) *tOemAppIntroduce {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Content = field.NewString(table, "content")
	t.ContentUrl = field.NewString(table, "content_url")
	t.Lang = field.NewString(table, "lang")
	t.Status = field.NewInt32(table, "status")
	t.ContentType = field.NewInt32(table, "content_type")
	t.AppId = field.NewInt64(table, "app_id")
	t.AppKey = field.NewString(table, "app_key")
	t.Version = field.NewString(table, "version")
	t.VoiceCode = field.NewString(table, "voice_code")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.Abstract = field.NewString(table, "abstract")

	t.fillFieldMap()

	return t
}

func (t *tOemAppIntroduce) WithContext(ctx context.Context) *tOemAppIntroduceDo {
	return t.tOemAppIntroduceDo.WithContext(ctx)
}

func (t tOemAppIntroduce) TableName() string { return t.tOemAppIntroduceDo.TableName() }

func (t *tOemAppIntroduce) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOemAppIntroduce) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 16)
	t.fieldMap["id"] = t.Id
	t.fieldMap["content"] = t.Content
	t.fieldMap["content_url"] = t.ContentUrl
	t.fieldMap["lang"] = t.Lang
	t.fieldMap["status"] = t.Status
	t.fieldMap["content_type"] = t.ContentType
	t.fieldMap["app_id"] = t.AppId
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["version"] = t.Version
	t.fieldMap["voice_code"] = t.VoiceCode
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["abstract"] = t.Abstract
}

func (t tOemAppIntroduce) clone(db *gorm.DB) tOemAppIntroduce {
	t.tOemAppIntroduceDo.ReplaceDB(db)
	return t
}

type tOemAppIntroduceDo struct{ gen.DO }

func (t tOemAppIntroduceDo) Debug() *tOemAppIntroduceDo {
	return t.withDO(t.DO.Debug())
}

func (t tOemAppIntroduceDo) WithContext(ctx context.Context) *tOemAppIntroduceDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOemAppIntroduceDo) Clauses(conds ...clause.Expression) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOemAppIntroduceDo) Returning(value interface{}, columns ...string) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOemAppIntroduceDo) Not(conds ...gen.Condition) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOemAppIntroduceDo) Or(conds ...gen.Condition) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOemAppIntroduceDo) Select(conds ...field.Expr) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOemAppIntroduceDo) Where(conds ...gen.Condition) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOemAppIntroduceDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOemAppIntroduceDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOemAppIntroduceDo) Order(conds ...field.Expr) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOemAppIntroduceDo) Distinct(cols ...field.Expr) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOemAppIntroduceDo) Omit(cols ...field.Expr) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOemAppIntroduceDo) Join(table schema.Tabler, on ...field.Expr) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOemAppIntroduceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOemAppIntroduceDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOemAppIntroduceDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOemAppIntroduceDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOemAppIntroduceDo) Group(cols ...field.Expr) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOemAppIntroduceDo) Having(conds ...gen.Condition) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOemAppIntroduceDo) Limit(limit int) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOemAppIntroduceDo) Offset(offset int) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOemAppIntroduceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOemAppIntroduceDo) Unscoped() *tOemAppIntroduceDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOemAppIntroduceDo) Create(values ...*model.TOemAppIntroduce) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOemAppIntroduceDo) CreateInBatches(values []*model.TOemAppIntroduce, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOemAppIntroduceDo) Save(values ...*model.TOemAppIntroduce) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOemAppIntroduceDo) First() (*model.TOemAppIntroduce, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppIntroduce), nil
	}
}

func (t tOemAppIntroduceDo) Take() (*model.TOemAppIntroduce, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppIntroduce), nil
	}
}

func (t tOemAppIntroduceDo) Last() (*model.TOemAppIntroduce, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppIntroduce), nil
	}
}

func (t tOemAppIntroduceDo) Find() ([]*model.TOemAppIntroduce, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOemAppIntroduce), err
}

func (t tOemAppIntroduceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOemAppIntroduce, err error) {
	buf := make([]*model.TOemAppIntroduce, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOemAppIntroduceDo) FindInBatches(result *[]*model.TOemAppIntroduce, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOemAppIntroduceDo) Attrs(attrs ...field.AssignExpr) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOemAppIntroduceDo) Assign(attrs ...field.AssignExpr) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOemAppIntroduceDo) Joins(field field.RelationField) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOemAppIntroduceDo) Preload(field field.RelationField) *tOemAppIntroduceDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOemAppIntroduceDo) FirstOrInit() (*model.TOemAppIntroduce, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppIntroduce), nil
	}
}

func (t tOemAppIntroduceDo) FirstOrCreate() (*model.TOemAppIntroduce, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppIntroduce), nil
	}
}

func (t tOemAppIntroduceDo) FindByPage(offset int, limit int) (result []*model.TOemAppIntroduce, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOemAppIntroduceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOemAppIntroduceDo) withDO(do gen.Dao) *tOemAppIntroduceDo {
	t.DO = *do.(*gen.DO)
	return t
}
