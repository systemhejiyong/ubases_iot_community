// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app_oem/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOemAppAssistRelease(db *gorm.DB) tOemAppAssistRelease {
	_tOemAppAssistRelease := tOemAppAssistRelease{}

	_tOemAppAssistRelease.tOemAppAssistReleaseDo.UseDB(db)
	_tOemAppAssistRelease.tOemAppAssistReleaseDo.UseModel(&model.TOemAppAssistRelease{})

	tableName := _tOemAppAssistRelease.tOemAppAssistReleaseDo.TableName()
	_tOemAppAssistRelease.ALL = field.NewField(tableName, "*")
	_tOemAppAssistRelease.Id = field.NewInt64(tableName, "id")
	_tOemAppAssistRelease.DevelopId = field.NewInt64(tableName, "develop_id")
	_tOemAppAssistRelease.TenantId = field.NewString(tableName, "tenant_id")
	_tOemAppAssistRelease.DevelopPhone = field.NewString(tableName, "develop_phone")
	_tOemAppAssistRelease.AppKey = field.NewString(tableName, "app_key")
	_tOemAppAssistRelease.AppVersion = field.NewString(tableName, "app_version")
	_tOemAppAssistRelease.AppTemplateId = field.NewInt64(tableName, "app_template_id")
	_tOemAppAssistRelease.AppTemplateVersion = field.NewString(tableName, "app_template_version")
	_tOemAppAssistRelease.SkinId = field.NewInt64(tableName, "skin_id")
	_tOemAppAssistRelease.StartTime = field.NewTime(tableName, "start_time")
	_tOemAppAssistRelease.EndTime = field.NewTime(tableName, "end_time")
	_tOemAppAssistRelease.Status = field.NewInt32(tableName, "status")
	_tOemAppAssistRelease.Remark = field.NewString(tableName, "remark")
	_tOemAppAssistRelease.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOemAppAssistRelease.CreatedAt = field.NewTime(tableName, "created_at")
	_tOemAppAssistRelease.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOemAppAssistRelease.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOemAppAssistRelease.DeletedAt = field.NewField(tableName, "deleted_at")

	_tOemAppAssistRelease.fillFieldMap()

	return _tOemAppAssistRelease
}

type tOemAppAssistRelease struct {
	tOemAppAssistReleaseDo tOemAppAssistReleaseDo

	ALL                field.Field
	Id                 field.Int64
	DevelopId          field.Int64
	TenantId           field.String
	DevelopPhone       field.String
	AppKey             field.String
	AppVersion         field.String
	AppTemplateId      field.Int64
	AppTemplateVersion field.String
	SkinId             field.Int64
	StartTime          field.Time
	EndTime            field.Time
	Status             field.Int32
	Remark             field.String
	CreatedBy          field.Int64
	CreatedAt          field.Time
	UpdatedBy          field.Int64
	UpdatedAt          field.Time
	DeletedAt          field.Field

	fieldMap map[string]field.Expr
}

func (t tOemAppAssistRelease) Table(newTableName string) *tOemAppAssistRelease {
	t.tOemAppAssistReleaseDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOemAppAssistRelease) As(alias string) *tOemAppAssistRelease {
	t.tOemAppAssistReleaseDo.DO = *(t.tOemAppAssistReleaseDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOemAppAssistRelease) updateTableName(table string) *tOemAppAssistRelease {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.DevelopId = field.NewInt64(table, "develop_id")
	t.TenantId = field.NewString(table, "tenant_id")
	t.DevelopPhone = field.NewString(table, "develop_phone")
	t.AppKey = field.NewString(table, "app_key")
	t.AppVersion = field.NewString(table, "app_version")
	t.AppTemplateId = field.NewInt64(table, "app_template_id")
	t.AppTemplateVersion = field.NewString(table, "app_template_version")
	t.SkinId = field.NewInt64(table, "skin_id")
	t.StartTime = field.NewTime(table, "start_time")
	t.EndTime = field.NewTime(table, "end_time")
	t.Status = field.NewInt32(table, "status")
	t.Remark = field.NewString(table, "remark")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tOemAppAssistRelease) WithContext(ctx context.Context) *tOemAppAssistReleaseDo {
	return t.tOemAppAssistReleaseDo.WithContext(ctx)
}

func (t tOemAppAssistRelease) TableName() string { return t.tOemAppAssistReleaseDo.TableName() }

func (t *tOemAppAssistRelease) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOemAppAssistRelease) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 18)
	t.fieldMap["id"] = t.Id
	t.fieldMap["develop_id"] = t.DevelopId
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["develop_phone"] = t.DevelopPhone
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["app_version"] = t.AppVersion
	t.fieldMap["app_template_id"] = t.AppTemplateId
	t.fieldMap["app_template_version"] = t.AppTemplateVersion
	t.fieldMap["skin_id"] = t.SkinId
	t.fieldMap["start_time"] = t.StartTime
	t.fieldMap["end_time"] = t.EndTime
	t.fieldMap["status"] = t.Status
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tOemAppAssistRelease) clone(db *gorm.DB) tOemAppAssistRelease {
	t.tOemAppAssistReleaseDo.ReplaceDB(db)
	return t
}

type tOemAppAssistReleaseDo struct{ gen.DO }

func (t tOemAppAssistReleaseDo) Debug() *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Debug())
}

func (t tOemAppAssistReleaseDo) WithContext(ctx context.Context) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOemAppAssistReleaseDo) Clauses(conds ...clause.Expression) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOemAppAssistReleaseDo) Returning(value interface{}, columns ...string) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOemAppAssistReleaseDo) Not(conds ...gen.Condition) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOemAppAssistReleaseDo) Or(conds ...gen.Condition) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOemAppAssistReleaseDo) Select(conds ...field.Expr) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOemAppAssistReleaseDo) Where(conds ...gen.Condition) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOemAppAssistReleaseDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOemAppAssistReleaseDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOemAppAssistReleaseDo) Order(conds ...field.Expr) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOemAppAssistReleaseDo) Distinct(cols ...field.Expr) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOemAppAssistReleaseDo) Omit(cols ...field.Expr) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOemAppAssistReleaseDo) Join(table schema.Tabler, on ...field.Expr) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOemAppAssistReleaseDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOemAppAssistReleaseDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOemAppAssistReleaseDo) Group(cols ...field.Expr) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOemAppAssistReleaseDo) Having(conds ...gen.Condition) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOemAppAssistReleaseDo) Limit(limit int) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOemAppAssistReleaseDo) Offset(offset int) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOemAppAssistReleaseDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOemAppAssistReleaseDo) Unscoped() *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOemAppAssistReleaseDo) Create(values ...*model.TOemAppAssistRelease) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOemAppAssistReleaseDo) CreateInBatches(values []*model.TOemAppAssistRelease, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOemAppAssistReleaseDo) Save(values ...*model.TOemAppAssistRelease) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOemAppAssistReleaseDo) First() (*model.TOemAppAssistRelease, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppAssistRelease), nil
	}
}

func (t tOemAppAssistReleaseDo) Take() (*model.TOemAppAssistRelease, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppAssistRelease), nil
	}
}

func (t tOemAppAssistReleaseDo) Last() (*model.TOemAppAssistRelease, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppAssistRelease), nil
	}
}

func (t tOemAppAssistReleaseDo) Find() ([]*model.TOemAppAssistRelease, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOemAppAssistRelease), err
}

func (t tOemAppAssistReleaseDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOemAppAssistRelease, err error) {
	buf := make([]*model.TOemAppAssistRelease, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOemAppAssistReleaseDo) FindInBatches(result *[]*model.TOemAppAssistRelease, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOemAppAssistReleaseDo) Attrs(attrs ...field.AssignExpr) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOemAppAssistReleaseDo) Assign(attrs ...field.AssignExpr) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOemAppAssistReleaseDo) Joins(field field.RelationField) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOemAppAssistReleaseDo) Preload(field field.RelationField) *tOemAppAssistReleaseDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOemAppAssistReleaseDo) FirstOrInit() (*model.TOemAppAssistRelease, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppAssistRelease), nil
	}
}

func (t tOemAppAssistReleaseDo) FirstOrCreate() (*model.TOemAppAssistRelease, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppAssistRelease), nil
	}
}

func (t tOemAppAssistReleaseDo) FindByPage(offset int, limit int) (result []*model.TOemAppAssistRelease, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOemAppAssistReleaseDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOemAppAssistReleaseDo) withDO(do gen.Dao) *tOemAppAssistReleaseDo {
	t.DO = *do.(*gen.DO)
	return t
}
