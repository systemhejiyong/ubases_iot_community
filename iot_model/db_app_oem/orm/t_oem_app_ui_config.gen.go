// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app_oem/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOemAppUiConfig(db *gorm.DB) tOemAppUiConfig {
	_tOemAppUiConfig := tOemAppUiConfig{}

	_tOemAppUiConfig.tOemAppUiConfigDo.UseDB(db)
	_tOemAppUiConfig.tOemAppUiConfigDo.UseModel(&model.TOemAppUiConfig{})

	tableName := _tOemAppUiConfig.tOemAppUiConfigDo.TableName()
	_tOemAppUiConfig.ALL = field.NewField(tableName, "*")
	_tOemAppUiConfig.Id = field.NewInt64(tableName, "id")
	_tOemAppUiConfig.AppId = field.NewInt64(tableName, "app_id")
	_tOemAppUiConfig.Version = field.NewString(tableName, "version")
	_tOemAppUiConfig.IconUrl = field.NewString(tableName, "icon_url")
	_tOemAppUiConfig.IosLaunchScreen = field.NewString(tableName, "ios_launch_screen")
	_tOemAppUiConfig.AndroidLaunchScreen = field.NewString(tableName, "android_launch_screen")
	_tOemAppUiConfig.ThemeColors = field.NewString(tableName, "theme_colors")
	_tOemAppUiConfig.BottomMenu = field.NewString(tableName, "bottom_menu")
	_tOemAppUiConfig.Personalize = field.NewString(tableName, "personalize")
	_tOemAppUiConfig.Room = field.NewString(tableName, "room")
	_tOemAppUiConfig.RoomIcons = field.NewString(tableName, "room_icons")

	_tOemAppUiConfig.fillFieldMap()

	return _tOemAppUiConfig
}

type tOemAppUiConfig struct {
	tOemAppUiConfigDo tOemAppUiConfigDo

	ALL                 field.Field
	Id                  field.Int64
	AppId               field.Int64
	Version             field.String
	IconUrl             field.String
	IosLaunchScreen     field.String
	AndroidLaunchScreen field.String
	ThemeColors         field.String
	BottomMenu          field.String
	Personalize         field.String
	Room                field.String
	RoomIcons           field.String

	fieldMap map[string]field.Expr
}

func (t tOemAppUiConfig) Table(newTableName string) *tOemAppUiConfig {
	t.tOemAppUiConfigDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOemAppUiConfig) As(alias string) *tOemAppUiConfig {
	t.tOemAppUiConfigDo.DO = *(t.tOemAppUiConfigDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOemAppUiConfig) updateTableName(table string) *tOemAppUiConfig {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.AppId = field.NewInt64(table, "app_id")
	t.Version = field.NewString(table, "version")
	t.IconUrl = field.NewString(table, "icon_url")
	t.IosLaunchScreen = field.NewString(table, "ios_launch_screen")
	t.AndroidLaunchScreen = field.NewString(table, "android_launch_screen")
	t.ThemeColors = field.NewString(table, "theme_colors")
	t.BottomMenu = field.NewString(table, "bottom_menu")
	t.Personalize = field.NewString(table, "personalize")
	t.Room = field.NewString(table, "room")
	t.RoomIcons = field.NewString(table, "room_icons")

	t.fillFieldMap()

	return t
}

func (t *tOemAppUiConfig) WithContext(ctx context.Context) *tOemAppUiConfigDo {
	return t.tOemAppUiConfigDo.WithContext(ctx)
}

func (t tOemAppUiConfig) TableName() string { return t.tOemAppUiConfigDo.TableName() }

func (t tOemAppUiConfig) Alias() string { return t.tOemAppUiConfigDo.Alias() }

func (t *tOemAppUiConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOemAppUiConfig) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.Id
	t.fieldMap["app_id"] = t.AppId
	t.fieldMap["version"] = t.Version
	t.fieldMap["icon_url"] = t.IconUrl
	t.fieldMap["ios_launch_screen"] = t.IosLaunchScreen
	t.fieldMap["android_launch_screen"] = t.AndroidLaunchScreen
	t.fieldMap["theme_colors"] = t.ThemeColors
	t.fieldMap["bottom_menu"] = t.BottomMenu
	t.fieldMap["personalize"] = t.Personalize
	t.fieldMap["room"] = t.Room
	t.fieldMap["room_icons"] = t.RoomIcons
}

func (t tOemAppUiConfig) clone(db *gorm.DB) tOemAppUiConfig {
	t.tOemAppUiConfigDo.ReplaceDB(db)
	return t
}

type tOemAppUiConfigDo struct{ gen.DO }

func (t tOemAppUiConfigDo) Debug() *tOemAppUiConfigDo {
	return t.withDO(t.DO.Debug())
}

func (t tOemAppUiConfigDo) WithContext(ctx context.Context) *tOemAppUiConfigDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOemAppUiConfigDo) Clauses(conds ...clause.Expression) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOemAppUiConfigDo) Returning(value interface{}, columns ...string) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOemAppUiConfigDo) Not(conds ...gen.Condition) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOemAppUiConfigDo) Or(conds ...gen.Condition) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOemAppUiConfigDo) Select(conds ...field.Expr) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOemAppUiConfigDo) Where(conds ...gen.Condition) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOemAppUiConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOemAppUiConfigDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOemAppUiConfigDo) Order(conds ...field.Expr) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOemAppUiConfigDo) Distinct(cols ...field.Expr) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOemAppUiConfigDo) Omit(cols ...field.Expr) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOemAppUiConfigDo) Join(table schema.Tabler, on ...field.Expr) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOemAppUiConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOemAppUiConfigDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOemAppUiConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOemAppUiConfigDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOemAppUiConfigDo) Group(cols ...field.Expr) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOemAppUiConfigDo) Having(conds ...gen.Condition) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOemAppUiConfigDo) Limit(limit int) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOemAppUiConfigDo) Offset(offset int) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOemAppUiConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOemAppUiConfigDo) Unscoped() *tOemAppUiConfigDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOemAppUiConfigDo) Create(values ...*model.TOemAppUiConfig) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOemAppUiConfigDo) CreateInBatches(values []*model.TOemAppUiConfig, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOemAppUiConfigDo) Save(values ...*model.TOemAppUiConfig) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOemAppUiConfigDo) First() (*model.TOemAppUiConfig, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppUiConfig), nil
	}
}

func (t tOemAppUiConfigDo) Take() (*model.TOemAppUiConfig, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppUiConfig), nil
	}
}

func (t tOemAppUiConfigDo) Last() (*model.TOemAppUiConfig, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppUiConfig), nil
	}
}

func (t tOemAppUiConfigDo) Find() ([]*model.TOemAppUiConfig, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOemAppUiConfig), err
}

func (t tOemAppUiConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOemAppUiConfig, err error) {
	buf := make([]*model.TOemAppUiConfig, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOemAppUiConfigDo) FindInBatches(result *[]*model.TOemAppUiConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOemAppUiConfigDo) Attrs(attrs ...field.AssignExpr) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOemAppUiConfigDo) Assign(attrs ...field.AssignExpr) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOemAppUiConfigDo) Joins(field field.RelationField) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOemAppUiConfigDo) Preload(field field.RelationField) *tOemAppUiConfigDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOemAppUiConfigDo) FirstOrInit() (*model.TOemAppUiConfig, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppUiConfig), nil
	}
}

func (t tOemAppUiConfigDo) FirstOrCreate() (*model.TOemAppUiConfig, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppUiConfig), nil
	}
}

func (t tOemAppUiConfigDo) FindByPage(offset int, limit int) (result []*model.TOemAppUiConfig, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOemAppUiConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOemAppUiConfigDo) withDO(do gen.Dao) *tOemAppUiConfigDo {
	t.DO = *do.(*gen.DO)
	return t
}
