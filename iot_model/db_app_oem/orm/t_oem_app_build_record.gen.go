// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app_oem/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOemAppBuildRecord(db *gorm.DB) tOemAppBuildRecord {
	_tOemAppBuildRecord := tOemAppBuildRecord{}

	_tOemAppBuildRecord.tOemAppBuildRecordDo.UseDB(db)
	_tOemAppBuildRecord.tOemAppBuildRecordDo.UseModel(&model.TOemAppBuildRecord{})

	tableName := _tOemAppBuildRecord.tOemAppBuildRecordDo.TableName()
	_tOemAppBuildRecord.ALL = field.NewField(tableName, "*")
	_tOemAppBuildRecord.Id = field.NewInt64(tableName, "id")
	_tOemAppBuildRecord.BuildId = field.NewString(tableName, "build_id")
	_tOemAppBuildRecord.AppId = field.NewInt64(tableName, "app_id")
	_tOemAppBuildRecord.Version = field.NewString(tableName, "version")
	_tOemAppBuildRecord.ResUrl = field.NewString(tableName, "res_url")
	_tOemAppBuildRecord.ResMd5 = field.NewString(tableName, "res_md5")
	_tOemAppBuildRecord.Os = field.NewInt32(tableName, "os")
	_tOemAppBuildRecord.Region = field.NewInt32(tableName, "region")
	_tOemAppBuildRecord.Status = field.NewInt32(tableName, "status")
	_tOemAppBuildRecord.CommitId = field.NewString(tableName, "commit_id")
	_tOemAppBuildRecord.BuildProgress = field.NewInt32(tableName, "build_progress")
	_tOemAppBuildRecord.BuildResult = field.NewInt32(tableName, "build_result")
	_tOemAppBuildRecord.BuildResultMsg = field.NewString(tableName, "build_result_msg")
	_tOemAppBuildRecord.PkgUrl = field.NewString(tableName, "pkg_url")
	_tOemAppBuildRecord.StartTime = field.NewTime(tableName, "start_time")
	_tOemAppBuildRecord.EndTime = field.NewTime(tableName, "end_time")
	_tOemAppBuildRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOemAppBuildRecord.AppTemplateId = field.NewInt64(tableName, "app_template_id")
	_tOemAppBuildRecord.AppTemplateVersion = field.NewString(tableName, "app_template_version")

	_tOemAppBuildRecord.fillFieldMap()

	return _tOemAppBuildRecord
}

type tOemAppBuildRecord struct {
	tOemAppBuildRecordDo tOemAppBuildRecordDo

	ALL                field.Field
	Id                 field.Int64
	BuildId            field.String
	AppId              field.Int64
	Version            field.String
	ResUrl             field.String
	ResMd5             field.String
	Os                 field.Int32
	Region             field.Int32
	Status             field.Int32
	CommitId           field.String
	BuildProgress      field.Int32
	BuildResult        field.Int32
	BuildResultMsg     field.String
	PkgUrl             field.String
	StartTime          field.Time
	EndTime            field.Time
	UpdatedAt          field.Time
	AppTemplateId      field.Int64
	AppTemplateVersion field.String

	fieldMap map[string]field.Expr
}

func (t tOemAppBuildRecord) Table(newTableName string) *tOemAppBuildRecord {
	t.tOemAppBuildRecordDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOemAppBuildRecord) As(alias string) *tOemAppBuildRecord {
	t.tOemAppBuildRecordDo.DO = *(t.tOemAppBuildRecordDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOemAppBuildRecord) updateTableName(table string) *tOemAppBuildRecord {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.BuildId = field.NewString(table, "build_id")
	t.AppId = field.NewInt64(table, "app_id")
	t.Version = field.NewString(table, "version")
	t.ResUrl = field.NewString(table, "res_url")
	t.ResMd5 = field.NewString(table, "res_md5")
	t.Os = field.NewInt32(table, "os")
	t.Region = field.NewInt32(table, "region")
	t.Status = field.NewInt32(table, "status")
	t.CommitId = field.NewString(table, "commit_id")
	t.BuildProgress = field.NewInt32(table, "build_progress")
	t.BuildResult = field.NewInt32(table, "build_result")
	t.BuildResultMsg = field.NewString(table, "build_result_msg")
	t.PkgUrl = field.NewString(table, "pkg_url")
	t.StartTime = field.NewTime(table, "start_time")
	t.EndTime = field.NewTime(table, "end_time")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.AppTemplateId = field.NewInt64(table, "app_template_id")
	t.AppTemplateVersion = field.NewString(table, "app_template_version")

	t.fillFieldMap()

	return t
}

func (t *tOemAppBuildRecord) WithContext(ctx context.Context) *tOemAppBuildRecordDo {
	return t.tOemAppBuildRecordDo.WithContext(ctx)
}

func (t tOemAppBuildRecord) TableName() string { return t.tOemAppBuildRecordDo.TableName() }

func (t *tOemAppBuildRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOemAppBuildRecord) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 19)
	t.fieldMap["id"] = t.Id
	t.fieldMap["build_id"] = t.BuildId
	t.fieldMap["app_id"] = t.AppId
	t.fieldMap["version"] = t.Version
	t.fieldMap["res_url"] = t.ResUrl
	t.fieldMap["res_md5"] = t.ResMd5
	t.fieldMap["os"] = t.Os
	t.fieldMap["region"] = t.Region
	t.fieldMap["status"] = t.Status
	t.fieldMap["commit_id"] = t.CommitId
	t.fieldMap["build_progress"] = t.BuildProgress
	t.fieldMap["build_result"] = t.BuildResult
	t.fieldMap["build_result_msg"] = t.BuildResultMsg
	t.fieldMap["pkg_url"] = t.PkgUrl
	t.fieldMap["start_time"] = t.StartTime
	t.fieldMap["end_time"] = t.EndTime
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["app_template_id"] = t.AppTemplateId
	t.fieldMap["app_template_version"] = t.AppTemplateVersion
}

func (t tOemAppBuildRecord) clone(db *gorm.DB) tOemAppBuildRecord {
	t.tOemAppBuildRecordDo.ReplaceDB(db)
	return t
}

type tOemAppBuildRecordDo struct{ gen.DO }

func (t tOemAppBuildRecordDo) Debug() *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Debug())
}

func (t tOemAppBuildRecordDo) WithContext(ctx context.Context) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOemAppBuildRecordDo) Clauses(conds ...clause.Expression) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOemAppBuildRecordDo) Returning(value interface{}, columns ...string) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOemAppBuildRecordDo) Not(conds ...gen.Condition) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOemAppBuildRecordDo) Or(conds ...gen.Condition) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOemAppBuildRecordDo) Select(conds ...field.Expr) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOemAppBuildRecordDo) Where(conds ...gen.Condition) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOemAppBuildRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOemAppBuildRecordDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOemAppBuildRecordDo) Order(conds ...field.Expr) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOemAppBuildRecordDo) Distinct(cols ...field.Expr) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOemAppBuildRecordDo) Omit(cols ...field.Expr) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOemAppBuildRecordDo) Join(table schema.Tabler, on ...field.Expr) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOemAppBuildRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOemAppBuildRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOemAppBuildRecordDo) Group(cols ...field.Expr) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOemAppBuildRecordDo) Having(conds ...gen.Condition) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOemAppBuildRecordDo) Limit(limit int) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOemAppBuildRecordDo) Offset(offset int) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOemAppBuildRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOemAppBuildRecordDo) Unscoped() *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOemAppBuildRecordDo) Create(values ...*model.TOemAppBuildRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOemAppBuildRecordDo) CreateInBatches(values []*model.TOemAppBuildRecord, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOemAppBuildRecordDo) Save(values ...*model.TOemAppBuildRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOemAppBuildRecordDo) First() (*model.TOemAppBuildRecord, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppBuildRecord), nil
	}
}

func (t tOemAppBuildRecordDo) Take() (*model.TOemAppBuildRecord, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppBuildRecord), nil
	}
}

func (t tOemAppBuildRecordDo) Last() (*model.TOemAppBuildRecord, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppBuildRecord), nil
	}
}

func (t tOemAppBuildRecordDo) Find() ([]*model.TOemAppBuildRecord, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOemAppBuildRecord), err
}

func (t tOemAppBuildRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOemAppBuildRecord, err error) {
	buf := make([]*model.TOemAppBuildRecord, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOemAppBuildRecordDo) FindInBatches(result *[]*model.TOemAppBuildRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOemAppBuildRecordDo) Attrs(attrs ...field.AssignExpr) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOemAppBuildRecordDo) Assign(attrs ...field.AssignExpr) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOemAppBuildRecordDo) Joins(field field.RelationField) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOemAppBuildRecordDo) Preload(field field.RelationField) *tOemAppBuildRecordDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOemAppBuildRecordDo) FirstOrInit() (*model.TOemAppBuildRecord, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppBuildRecord), nil
	}
}

func (t tOemAppBuildRecordDo) FirstOrCreate() (*model.TOemAppBuildRecord, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppBuildRecord), nil
	}
}

func (t tOemAppBuildRecordDo) FindByPage(offset int, limit int) (result []*model.TOemAppBuildRecord, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOemAppBuildRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOemAppBuildRecordDo) withDO(do gen.Dao) *tOemAppBuildRecordDo {
	t.DO = *do.(*gen.DO)
	return t
}
