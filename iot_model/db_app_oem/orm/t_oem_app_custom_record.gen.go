// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app_oem/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOemAppCustomRecord(db *gorm.DB) tOemAppCustomRecord {
	_tOemAppCustomRecord := tOemAppCustomRecord{}

	_tOemAppCustomRecord.tOemAppCustomRecordDo.UseDB(db)
	_tOemAppCustomRecord.tOemAppCustomRecordDo.UseModel(&model.TOemAppCustomRecord{})

	tableName := _tOemAppCustomRecord.tOemAppCustomRecordDo.TableName()
	_tOemAppCustomRecord.ALL = field.NewField(tableName, "*")
	_tOemAppCustomRecord.Id = field.NewInt64(tableName, "id")
	_tOemAppCustomRecord.AppId = field.NewInt64(tableName, "app_id")
	_tOemAppCustomRecord.Version = field.NewString(tableName, "version")
	_tOemAppCustomRecord.PkgUrl = field.NewString(tableName, "pkg_url")
	_tOemAppCustomRecord.PkgMd5 = field.NewString(tableName, "pkg_md5")
	_tOemAppCustomRecord.Os = field.NewInt32(tableName, "os")
	_tOemAppCustomRecord.Status = field.NewInt32(tableName, "status")
	_tOemAppCustomRecord.Description = field.NewString(tableName, "description")
	_tOemAppCustomRecord.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOemAppCustomRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_tOemAppCustomRecord.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOemAppCustomRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOemAppCustomRecord.PlistUrl = field.NewString(tableName, "plist_url")
	_tOemAppCustomRecord.LaunchMarkets = field.NewString(tableName, "launch_markets")
	_tOemAppCustomRecord.RemindMode = field.NewInt32(tableName, "remind_mode")
	_tOemAppCustomRecord.RemindDesc = field.NewString(tableName, "remind_desc")
	_tOemAppCustomRecord.RemindDescEn = field.NewString(tableName, "remind_desc_en")

	_tOemAppCustomRecord.fillFieldMap()

	return _tOemAppCustomRecord
}

type tOemAppCustomRecord struct {
	tOemAppCustomRecordDo tOemAppCustomRecordDo

	ALL           field.Field
	Id            field.Int64
	AppId         field.Int64
	Version       field.String
	PkgUrl        field.String
	PkgMd5        field.String
	Os            field.Int32
	Status        field.Int32
	Description   field.String
	CreatedBy     field.Int64
	CreatedAt     field.Time
	UpdatedBy     field.Int64
	UpdatedAt     field.Time
	PlistUrl      field.String
	LaunchMarkets field.String
	RemindMode    field.Int32
	RemindDesc    field.String
	RemindDescEn  field.String

	fieldMap map[string]field.Expr
}

func (t tOemAppCustomRecord) Table(newTableName string) *tOemAppCustomRecord {
	t.tOemAppCustomRecordDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOemAppCustomRecord) As(alias string) *tOemAppCustomRecord {
	t.tOemAppCustomRecordDo.DO = *(t.tOemAppCustomRecordDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOemAppCustomRecord) updateTableName(table string) *tOemAppCustomRecord {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.AppId = field.NewInt64(table, "app_id")
	t.Version = field.NewString(table, "version")
	t.PkgUrl = field.NewString(table, "pkg_url")
	t.PkgMd5 = field.NewString(table, "pkg_md5")
	t.Os = field.NewInt32(table, "os")
	t.Status = field.NewInt32(table, "status")
	t.Description = field.NewString(table, "description")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.PlistUrl = field.NewString(table, "plist_url")
	t.LaunchMarkets = field.NewString(table, "launch_markets")
	t.RemindMode = field.NewInt32(table, "remind_mode")
	t.RemindDesc = field.NewString(table, "remind_desc")
	t.RemindDescEn = field.NewString(table, "remind_desc_en")

	t.fillFieldMap()

	return t
}

func (t *tOemAppCustomRecord) WithContext(ctx context.Context) *tOemAppCustomRecordDo {
	return t.tOemAppCustomRecordDo.WithContext(ctx)
}

func (t tOemAppCustomRecord) TableName() string { return t.tOemAppCustomRecordDo.TableName() }

func (t tOemAppCustomRecord) Alias() string { return t.tOemAppCustomRecordDo.Alias() }

func (t *tOemAppCustomRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOemAppCustomRecord) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 17)
	t.fieldMap["id"] = t.Id
	t.fieldMap["app_id"] = t.AppId
	t.fieldMap["version"] = t.Version
	t.fieldMap["pkg_url"] = t.PkgUrl
	t.fieldMap["pkg_md5"] = t.PkgMd5
	t.fieldMap["os"] = t.Os
	t.fieldMap["status"] = t.Status
	t.fieldMap["description"] = t.Description
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["plist_url"] = t.PlistUrl
	t.fieldMap["launch_markets"] = t.LaunchMarkets
	t.fieldMap["remind_mode"] = t.RemindMode
	t.fieldMap["remind_desc"] = t.RemindDesc
	t.fieldMap["remind_desc_en"] = t.RemindDescEn
}

func (t tOemAppCustomRecord) clone(db *gorm.DB) tOemAppCustomRecord {
	t.tOemAppCustomRecordDo.ReplaceDB(db)
	return t
}

type tOemAppCustomRecordDo struct{ gen.DO }

func (t tOemAppCustomRecordDo) Debug() *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Debug())
}

func (t tOemAppCustomRecordDo) WithContext(ctx context.Context) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOemAppCustomRecordDo) Clauses(conds ...clause.Expression) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOemAppCustomRecordDo) Returning(value interface{}, columns ...string) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOemAppCustomRecordDo) Not(conds ...gen.Condition) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOemAppCustomRecordDo) Or(conds ...gen.Condition) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOemAppCustomRecordDo) Select(conds ...field.Expr) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOemAppCustomRecordDo) Where(conds ...gen.Condition) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOemAppCustomRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOemAppCustomRecordDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOemAppCustomRecordDo) Order(conds ...field.Expr) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOemAppCustomRecordDo) Distinct(cols ...field.Expr) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOemAppCustomRecordDo) Omit(cols ...field.Expr) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOemAppCustomRecordDo) Join(table schema.Tabler, on ...field.Expr) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOemAppCustomRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOemAppCustomRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOemAppCustomRecordDo) Group(cols ...field.Expr) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOemAppCustomRecordDo) Having(conds ...gen.Condition) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOemAppCustomRecordDo) Limit(limit int) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOemAppCustomRecordDo) Offset(offset int) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOemAppCustomRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOemAppCustomRecordDo) Unscoped() *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOemAppCustomRecordDo) Create(values ...*model.TOemAppCustomRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOemAppCustomRecordDo) CreateInBatches(values []*model.TOemAppCustomRecord, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOemAppCustomRecordDo) Save(values ...*model.TOemAppCustomRecord) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOemAppCustomRecordDo) First() (*model.TOemAppCustomRecord, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppCustomRecord), nil
	}
}

func (t tOemAppCustomRecordDo) Take() (*model.TOemAppCustomRecord, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppCustomRecord), nil
	}
}

func (t tOemAppCustomRecordDo) Last() (*model.TOemAppCustomRecord, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppCustomRecord), nil
	}
}

func (t tOemAppCustomRecordDo) Find() ([]*model.TOemAppCustomRecord, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOemAppCustomRecord), err
}

func (t tOemAppCustomRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOemAppCustomRecord, err error) {
	buf := make([]*model.TOemAppCustomRecord, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOemAppCustomRecordDo) FindInBatches(result *[]*model.TOemAppCustomRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOemAppCustomRecordDo) Attrs(attrs ...field.AssignExpr) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOemAppCustomRecordDo) Assign(attrs ...field.AssignExpr) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOemAppCustomRecordDo) Joins(field field.RelationField) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOemAppCustomRecordDo) Preload(field field.RelationField) *tOemAppCustomRecordDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOemAppCustomRecordDo) FirstOrInit() (*model.TOemAppCustomRecord, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppCustomRecord), nil
	}
}

func (t tOemAppCustomRecordDo) FirstOrCreate() (*model.TOemAppCustomRecord, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppCustomRecord), nil
	}
}

func (t tOemAppCustomRecordDo) FindByPage(offset int, limit int) (result []*model.TOemAppCustomRecord, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOemAppCustomRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOemAppCustomRecordDo) withDO(do gen.Dao) *tOemAppCustomRecordDo {
	t.DO = *do.(*gen.DO)
	return t
}
