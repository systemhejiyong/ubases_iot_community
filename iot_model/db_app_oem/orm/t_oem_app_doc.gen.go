// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app_oem/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOemAppDoc(db *gorm.DB) tOemAppDoc {
	_tOemAppDoc := tOemAppDoc{}

	_tOemAppDoc.tOemAppDocDo.UseDB(db)
	_tOemAppDoc.tOemAppDocDo.UseModel(&model.TOemAppDoc{})

	tableName := _tOemAppDoc.tOemAppDocDo.TableName()
	_tOemAppDoc.ALL = field.NewField(tableName, "*")
	_tOemAppDoc.Id = field.NewInt64(tableName, "id")
	_tOemAppDoc.Name = field.NewString(tableName, "name")
	_tOemAppDoc.Apps = field.NewString(tableName, "apps")
	_tOemAppDoc.Langs = field.NewString(tableName, "langs")
	_tOemAppDoc.RemainLang = field.NewString(tableName, "remain_lang")
	_tOemAppDoc.IsSucceedPubDoc = field.NewInt32(tableName, "is_succeed_pub_doc")
	_tOemAppDoc.SucceedPubDoc = field.NewString(tableName, "succeed_pub_doc")
	_tOemAppDoc.TenantId = field.NewString(tableName, "tenant_id")
	_tOemAppDoc.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOemAppDoc.CreatedAt = field.NewTime(tableName, "created_at")
	_tOemAppDoc.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOemAppDoc.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOemAppDoc.DeletedAt = field.NewField(tableName, "deleted_at")
	_tOemAppDoc.HelpCenterName = field.NewString(tableName, "help_center_name")
	_tOemAppDoc.Version = field.NewString(tableName, "version")

	_tOemAppDoc.fillFieldMap()

	return _tOemAppDoc
}

type tOemAppDoc struct {
	tOemAppDocDo tOemAppDocDo

	ALL             field.Field
	Id              field.Int64
	Name            field.String
	Apps            field.String
	Langs           field.String
	RemainLang      field.String
	IsSucceedPubDoc field.Int32
	SucceedPubDoc   field.String
	TenantId        field.String
	CreatedBy       field.Int64
	CreatedAt       field.Time
	UpdatedBy       field.Int64
	UpdatedAt       field.Time
	DeletedAt       field.Field
	HelpCenterName  field.String
	Version         field.String

	fieldMap map[string]field.Expr
}

func (t tOemAppDoc) Table(newTableName string) *tOemAppDoc {
	t.tOemAppDocDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOemAppDoc) As(alias string) *tOemAppDoc {
	t.tOemAppDocDo.DO = *(t.tOemAppDocDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOemAppDoc) updateTableName(table string) *tOemAppDoc {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.Apps = field.NewString(table, "apps")
	t.Langs = field.NewString(table, "langs")
	t.RemainLang = field.NewString(table, "remain_lang")
	t.IsSucceedPubDoc = field.NewInt32(table, "is_succeed_pub_doc")
	t.SucceedPubDoc = field.NewString(table, "succeed_pub_doc")
	t.TenantId = field.NewString(table, "tenant_id")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.HelpCenterName = field.NewString(table, "help_center_name")
	t.Version = field.NewString(table, "version")

	t.fillFieldMap()

	return t
}

func (t *tOemAppDoc) WithContext(ctx context.Context) *tOemAppDocDo {
	return t.tOemAppDocDo.WithContext(ctx)
}

func (t tOemAppDoc) TableName() string { return t.tOemAppDocDo.TableName() }

func (t tOemAppDoc) Alias() string { return t.tOemAppDocDo.Alias() }

func (t *tOemAppDoc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOemAppDoc) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 15)
	t.fieldMap["id"] = t.Id
	t.fieldMap["name"] = t.Name
	t.fieldMap["apps"] = t.Apps
	t.fieldMap["langs"] = t.Langs
	t.fieldMap["remain_lang"] = t.RemainLang
	t.fieldMap["is_succeed_pub_doc"] = t.IsSucceedPubDoc
	t.fieldMap["succeed_pub_doc"] = t.SucceedPubDoc
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["help_center_name"] = t.HelpCenterName
	t.fieldMap["version"] = t.Version
}

func (t tOemAppDoc) clone(db *gorm.DB) tOemAppDoc {
	t.tOemAppDocDo.ReplaceDB(db)
	return t
}

type tOemAppDocDo struct{ gen.DO }

func (t tOemAppDocDo) Debug() *tOemAppDocDo {
	return t.withDO(t.DO.Debug())
}

func (t tOemAppDocDo) WithContext(ctx context.Context) *tOemAppDocDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOemAppDocDo) Clauses(conds ...clause.Expression) *tOemAppDocDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOemAppDocDo) Returning(value interface{}, columns ...string) *tOemAppDocDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOemAppDocDo) Not(conds ...gen.Condition) *tOemAppDocDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOemAppDocDo) Or(conds ...gen.Condition) *tOemAppDocDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOemAppDocDo) Select(conds ...field.Expr) *tOemAppDocDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOemAppDocDo) Where(conds ...gen.Condition) *tOemAppDocDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOemAppDocDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOemAppDocDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOemAppDocDo) Order(conds ...field.Expr) *tOemAppDocDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOemAppDocDo) Distinct(cols ...field.Expr) *tOemAppDocDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOemAppDocDo) Omit(cols ...field.Expr) *tOemAppDocDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOemAppDocDo) Join(table schema.Tabler, on ...field.Expr) *tOemAppDocDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOemAppDocDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOemAppDocDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOemAppDocDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOemAppDocDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOemAppDocDo) Group(cols ...field.Expr) *tOemAppDocDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOemAppDocDo) Having(conds ...gen.Condition) *tOemAppDocDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOemAppDocDo) Limit(limit int) *tOemAppDocDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOemAppDocDo) Offset(offset int) *tOemAppDocDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOemAppDocDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOemAppDocDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOemAppDocDo) Unscoped() *tOemAppDocDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOemAppDocDo) Create(values ...*model.TOemAppDoc) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOemAppDocDo) CreateInBatches(values []*model.TOemAppDoc, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOemAppDocDo) Save(values ...*model.TOemAppDoc) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOemAppDocDo) First() (*model.TOemAppDoc, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppDoc), nil
	}
}

func (t tOemAppDocDo) Take() (*model.TOemAppDoc, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppDoc), nil
	}
}

func (t tOemAppDocDo) Last() (*model.TOemAppDoc, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppDoc), nil
	}
}

func (t tOemAppDocDo) Find() ([]*model.TOemAppDoc, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOemAppDoc), err
}

func (t tOemAppDocDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOemAppDoc, err error) {
	buf := make([]*model.TOemAppDoc, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOemAppDocDo) FindInBatches(result *[]*model.TOemAppDoc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOemAppDocDo) Attrs(attrs ...field.AssignExpr) *tOemAppDocDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOemAppDocDo) Assign(attrs ...field.AssignExpr) *tOemAppDocDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOemAppDocDo) Joins(field field.RelationField) *tOemAppDocDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOemAppDocDo) Preload(field field.RelationField) *tOemAppDocDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOemAppDocDo) FirstOrInit() (*model.TOemAppDoc, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppDoc), nil
	}
}

func (t tOemAppDocDo) FirstOrCreate() (*model.TOemAppDoc, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppDoc), nil
	}
}

func (t tOemAppDocDo) FindByPage(offset int, limit int) (result []*model.TOemAppDoc, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOemAppDocDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOemAppDocDo) withDO(do gen.Dao) *tOemAppDocDo {
	t.DO = *do.(*gen.DO)
	return t
}
