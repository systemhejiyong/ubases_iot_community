// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app_oem/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOemAppTemplateFunction(db *gorm.DB) tOemAppTemplateFunction {
	_tOemAppTemplateFunction := tOemAppTemplateFunction{}

	_tOemAppTemplateFunction.tOemAppTemplateFunctionDo.UseDB(db)
	_tOemAppTemplateFunction.tOemAppTemplateFunctionDo.UseModel(&model.TOemAppTemplateFunction{})

	tableName := _tOemAppTemplateFunction.tOemAppTemplateFunctionDo.TableName()
	_tOemAppTemplateFunction.ALL = field.NewField(tableName, "*")
	_tOemAppTemplateFunction.Id = field.NewInt64(tableName, "id")
	_tOemAppTemplateFunction.Name = field.NewString(tableName, "name")
	_tOemAppTemplateFunction.NameEn = field.NewString(tableName, "name_en")
	_tOemAppTemplateFunction.Code = field.NewString(tableName, "code")
	_tOemAppTemplateFunction.Sort = field.NewInt32(tableName, "sort")
	_tOemAppTemplateFunction.AppTemplateId = field.NewInt64(tableName, "app_template_id")
	_tOemAppTemplateFunction.DefaultValueMode = field.NewInt32(tableName, "default_value_mode")
	_tOemAppTemplateFunction.DefaultValue = field.NewString(tableName, "default_value")
	_tOemAppTemplateFunction.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOemAppTemplateFunction.CreatedAt = field.NewTime(tableName, "created_at")
	_tOemAppTemplateFunction.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOemAppTemplateFunction.UpdatedAt = field.NewTime(tableName, "updated_at")

	_tOemAppTemplateFunction.fillFieldMap()

	return _tOemAppTemplateFunction
}

type tOemAppTemplateFunction struct {
	tOemAppTemplateFunctionDo tOemAppTemplateFunctionDo

	ALL              field.Field
	Id               field.Int64
	Name             field.String
	NameEn           field.String
	Code             field.String
	Sort             field.Int32
	AppTemplateId    field.Int64
	DefaultValueMode field.Int32
	DefaultValue     field.String
	CreatedBy        field.Int64
	CreatedAt        field.Time
	UpdatedBy        field.Int64
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (t tOemAppTemplateFunction) Table(newTableName string) *tOemAppTemplateFunction {
	t.tOemAppTemplateFunctionDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOemAppTemplateFunction) As(alias string) *tOemAppTemplateFunction {
	t.tOemAppTemplateFunctionDo.DO = *(t.tOemAppTemplateFunctionDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOemAppTemplateFunction) updateTableName(table string) *tOemAppTemplateFunction {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.NameEn = field.NewString(table, "name_en")
	t.Code = field.NewString(table, "code")
	t.Sort = field.NewInt32(table, "sort")
	t.AppTemplateId = field.NewInt64(table, "app_template_id")
	t.DefaultValueMode = field.NewInt32(table, "default_value_mode")
	t.DefaultValue = field.NewString(table, "default_value")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *tOemAppTemplateFunction) WithContext(ctx context.Context) *tOemAppTemplateFunctionDo {
	return t.tOemAppTemplateFunctionDo.WithContext(ctx)
}

func (t tOemAppTemplateFunction) TableName() string { return t.tOemAppTemplateFunctionDo.TableName() }

func (t tOemAppTemplateFunction) Alias() string { return t.tOemAppTemplateFunctionDo.Alias() }

func (t *tOemAppTemplateFunction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOemAppTemplateFunction) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.Id
	t.fieldMap["name"] = t.Name
	t.fieldMap["name_en"] = t.NameEn
	t.fieldMap["code"] = t.Code
	t.fieldMap["sort"] = t.Sort
	t.fieldMap["app_template_id"] = t.AppTemplateId
	t.fieldMap["default_value_mode"] = t.DefaultValueMode
	t.fieldMap["default_value"] = t.DefaultValue
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t tOemAppTemplateFunction) clone(db *gorm.DB) tOemAppTemplateFunction {
	t.tOemAppTemplateFunctionDo.ReplaceDB(db)
	return t
}

type tOemAppTemplateFunctionDo struct{ gen.DO }

func (t tOemAppTemplateFunctionDo) Debug() *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Debug())
}

func (t tOemAppTemplateFunctionDo) WithContext(ctx context.Context) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOemAppTemplateFunctionDo) Clauses(conds ...clause.Expression) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOemAppTemplateFunctionDo) Returning(value interface{}, columns ...string) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOemAppTemplateFunctionDo) Not(conds ...gen.Condition) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOemAppTemplateFunctionDo) Or(conds ...gen.Condition) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOemAppTemplateFunctionDo) Select(conds ...field.Expr) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOemAppTemplateFunctionDo) Where(conds ...gen.Condition) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOemAppTemplateFunctionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOemAppTemplateFunctionDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOemAppTemplateFunctionDo) Order(conds ...field.Expr) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOemAppTemplateFunctionDo) Distinct(cols ...field.Expr) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOemAppTemplateFunctionDo) Omit(cols ...field.Expr) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOemAppTemplateFunctionDo) Join(table schema.Tabler, on ...field.Expr) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOemAppTemplateFunctionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOemAppTemplateFunctionDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOemAppTemplateFunctionDo) Group(cols ...field.Expr) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOemAppTemplateFunctionDo) Having(conds ...gen.Condition) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOemAppTemplateFunctionDo) Limit(limit int) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOemAppTemplateFunctionDo) Offset(offset int) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOemAppTemplateFunctionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOemAppTemplateFunctionDo) Unscoped() *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOemAppTemplateFunctionDo) Create(values ...*model.TOemAppTemplateFunction) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOemAppTemplateFunctionDo) CreateInBatches(values []*model.TOemAppTemplateFunction, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOemAppTemplateFunctionDo) Save(values ...*model.TOemAppTemplateFunction) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOemAppTemplateFunctionDo) First() (*model.TOemAppTemplateFunction, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppTemplateFunction), nil
	}
}

func (t tOemAppTemplateFunctionDo) Take() (*model.TOemAppTemplateFunction, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppTemplateFunction), nil
	}
}

func (t tOemAppTemplateFunctionDo) Last() (*model.TOemAppTemplateFunction, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppTemplateFunction), nil
	}
}

func (t tOemAppTemplateFunctionDo) Find() ([]*model.TOemAppTemplateFunction, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOemAppTemplateFunction), err
}

func (t tOemAppTemplateFunctionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOemAppTemplateFunction, err error) {
	buf := make([]*model.TOemAppTemplateFunction, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOemAppTemplateFunctionDo) FindInBatches(result *[]*model.TOemAppTemplateFunction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOemAppTemplateFunctionDo) Attrs(attrs ...field.AssignExpr) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOemAppTemplateFunctionDo) Assign(attrs ...field.AssignExpr) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOemAppTemplateFunctionDo) Joins(field field.RelationField) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOemAppTemplateFunctionDo) Preload(field field.RelationField) *tOemAppTemplateFunctionDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOemAppTemplateFunctionDo) FirstOrInit() (*model.TOemAppTemplateFunction, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppTemplateFunction), nil
	}
}

func (t tOemAppTemplateFunctionDo) FirstOrCreate() (*model.TOemAppTemplateFunction, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppTemplateFunction), nil
	}
}

func (t tOemAppTemplateFunctionDo) FindByPage(offset int, limit int) (result []*model.TOemAppTemplateFunction, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOemAppTemplateFunctionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOemAppTemplateFunctionDo) withDO(do gen.Dao) *tOemAppTemplateFunctionDo {
	t.DO = *do.(*gen.DO)
	return t
}
