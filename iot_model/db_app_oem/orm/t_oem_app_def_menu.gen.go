// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app_oem/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOemAppDefMenu(db *gorm.DB) tOemAppDefMenu {
	_tOemAppDefMenu := tOemAppDefMenu{}

	_tOemAppDefMenu.tOemAppDefMenuDo.UseDB(db)
	_tOemAppDefMenu.tOemAppDefMenuDo.UseModel(&model.TOemAppDefMenu{})

	tableName := _tOemAppDefMenu.tOemAppDefMenuDo.TableName()
	_tOemAppDefMenu.ALL = field.NewField(tableName, "*")
	_tOemAppDefMenu.Id = field.NewInt64(tableName, "id")
	_tOemAppDefMenu.Name = field.NewString(tableName, "name")
	_tOemAppDefMenu.MenuKey = field.NewString(tableName, "menu_key")
	_tOemAppDefMenu.Position = field.NewInt32(tableName, "position")
	_tOemAppDefMenu.DefImage = field.NewString(tableName, "def_image")
	_tOemAppDefMenu.SelImage = field.NewString(tableName, "sel_image")
	_tOemAppDefMenu.Required = field.NewInt32(tableName, "required")
	_tOemAppDefMenu.Status = field.NewInt32(tableName, "status")
	_tOemAppDefMenu.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOemAppDefMenu.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOemAppDefMenu.CreatedAt = field.NewTime(tableName, "created_at")
	_tOemAppDefMenu.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOemAppDefMenu.DeletedAt = field.NewField(tableName, "deleted_at")

	_tOemAppDefMenu.fillFieldMap()

	return _tOemAppDefMenu
}

type tOemAppDefMenu struct {
	tOemAppDefMenuDo tOemAppDefMenuDo

	ALL       field.Field
	Id        field.Int64
	Name      field.String
	MenuKey   field.String
	Position  field.Int32
	DefImage  field.String
	SelImage  field.String
	Required  field.Int32
	Status    field.Int32
	CreatedBy field.Int64
	UpdatedBy field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (t tOemAppDefMenu) Table(newTableName string) *tOemAppDefMenu {
	t.tOemAppDefMenuDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOemAppDefMenu) As(alias string) *tOemAppDefMenu {
	t.tOemAppDefMenuDo.DO = *(t.tOemAppDefMenuDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOemAppDefMenu) updateTableName(table string) *tOemAppDefMenu {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.MenuKey = field.NewString(table, "menu_key")
	t.Position = field.NewInt32(table, "position")
	t.DefImage = field.NewString(table, "def_image")
	t.SelImage = field.NewString(table, "sel_image")
	t.Required = field.NewInt32(table, "required")
	t.Status = field.NewInt32(table, "status")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tOemAppDefMenu) WithContext(ctx context.Context) *tOemAppDefMenuDo {
	return t.tOemAppDefMenuDo.WithContext(ctx)
}

func (t tOemAppDefMenu) TableName() string { return t.tOemAppDefMenuDo.TableName() }

func (t *tOemAppDefMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOemAppDefMenu) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.Id
	t.fieldMap["name"] = t.Name
	t.fieldMap["menu_key"] = t.MenuKey
	t.fieldMap["position"] = t.Position
	t.fieldMap["def_image"] = t.DefImage
	t.fieldMap["sel_image"] = t.SelImage
	t.fieldMap["required"] = t.Required
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tOemAppDefMenu) clone(db *gorm.DB) tOemAppDefMenu {
	t.tOemAppDefMenuDo.ReplaceDB(db)
	return t
}

type tOemAppDefMenuDo struct{ gen.DO }

func (t tOemAppDefMenuDo) Debug() *tOemAppDefMenuDo {
	return t.withDO(t.DO.Debug())
}

func (t tOemAppDefMenuDo) WithContext(ctx context.Context) *tOemAppDefMenuDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOemAppDefMenuDo) Clauses(conds ...clause.Expression) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOemAppDefMenuDo) Returning(value interface{}, columns ...string) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOemAppDefMenuDo) Not(conds ...gen.Condition) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOemAppDefMenuDo) Or(conds ...gen.Condition) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOemAppDefMenuDo) Select(conds ...field.Expr) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOemAppDefMenuDo) Where(conds ...gen.Condition) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOemAppDefMenuDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOemAppDefMenuDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOemAppDefMenuDo) Order(conds ...field.Expr) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOemAppDefMenuDo) Distinct(cols ...field.Expr) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOemAppDefMenuDo) Omit(cols ...field.Expr) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOemAppDefMenuDo) Join(table schema.Tabler, on ...field.Expr) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOemAppDefMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOemAppDefMenuDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOemAppDefMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOemAppDefMenuDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOemAppDefMenuDo) Group(cols ...field.Expr) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOemAppDefMenuDo) Having(conds ...gen.Condition) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOemAppDefMenuDo) Limit(limit int) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOemAppDefMenuDo) Offset(offset int) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOemAppDefMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOemAppDefMenuDo) Unscoped() *tOemAppDefMenuDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOemAppDefMenuDo) Create(values ...*model.TOemAppDefMenu) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOemAppDefMenuDo) CreateInBatches(values []*model.TOemAppDefMenu, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOemAppDefMenuDo) Save(values ...*model.TOemAppDefMenu) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOemAppDefMenuDo) First() (*model.TOemAppDefMenu, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppDefMenu), nil
	}
}

func (t tOemAppDefMenuDo) Take() (*model.TOemAppDefMenu, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppDefMenu), nil
	}
}

func (t tOemAppDefMenuDo) Last() (*model.TOemAppDefMenu, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppDefMenu), nil
	}
}

func (t tOemAppDefMenuDo) Find() ([]*model.TOemAppDefMenu, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOemAppDefMenu), err
}

func (t tOemAppDefMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOemAppDefMenu, err error) {
	buf := make([]*model.TOemAppDefMenu, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOemAppDefMenuDo) FindInBatches(result *[]*model.TOemAppDefMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOemAppDefMenuDo) Attrs(attrs ...field.AssignExpr) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOemAppDefMenuDo) Assign(attrs ...field.AssignExpr) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOemAppDefMenuDo) Joins(field field.RelationField) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOemAppDefMenuDo) Preload(field field.RelationField) *tOemAppDefMenuDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOemAppDefMenuDo) FirstOrInit() (*model.TOemAppDefMenu, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppDefMenu), nil
	}
}

func (t tOemAppDefMenuDo) FirstOrCreate() (*model.TOemAppDefMenu, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppDefMenu), nil
	}
}

func (t tOemAppDefMenuDo) FindByPage(offset int, limit int) (result []*model.TOemAppDefMenu, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOemAppDefMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOemAppDefMenuDo) withDO(do gen.Dao) *tOemAppDefMenuDo {
	t.DO = *do.(*gen.DO)
	return t
}
