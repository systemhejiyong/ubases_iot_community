// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app_oem/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOemAppTemplateUi(db *gorm.DB) tOemAppTemplateUi {
	_tOemAppTemplateUi := tOemAppTemplateUi{}

	_tOemAppTemplateUi.tOemAppTemplateUiDo.UseDB(db)
	_tOemAppTemplateUi.tOemAppTemplateUiDo.UseModel(&model.TOemAppTemplateUi{})

	tableName := _tOemAppTemplateUi.tOemAppTemplateUiDo.TableName()
	_tOemAppTemplateUi.ALL = field.NewField(tableName, "*")
	_tOemAppTemplateUi.Id = field.NewInt64(tableName, "id")
	_tOemAppTemplateUi.Type = field.NewInt32(tableName, "type")
	_tOemAppTemplateUi.Name = field.NewString(tableName, "name")
	_tOemAppTemplateUi.NameEn = field.NewString(tableName, "name_en")
	_tOemAppTemplateUi.Code = field.NewString(tableName, "code")
	_tOemAppTemplateUi.Sort = field.NewInt32(tableName, "sort")
	_tOemAppTemplateUi.PageJson = field.NewString(tableName, "page_json")
	_tOemAppTemplateUi.AppTemplateId = field.NewInt64(tableName, "app_template_id")
	_tOemAppTemplateUi.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOemAppTemplateUi.CreatedAt = field.NewTime(tableName, "created_at")
	_tOemAppTemplateUi.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOemAppTemplateUi.UpdatedAt = field.NewTime(tableName, "updated_at")

	_tOemAppTemplateUi.fillFieldMap()

	return _tOemAppTemplateUi
}

type tOemAppTemplateUi struct {
	tOemAppTemplateUiDo tOemAppTemplateUiDo

	ALL           field.Field
	Id            field.Int64
	Type          field.Int32
	Name          field.String
	NameEn        field.String
	Code          field.String
	Sort          field.Int32
	PageJson      field.String
	AppTemplateId field.Int64
	CreatedBy     field.Int64
	CreatedAt     field.Time
	UpdatedBy     field.Int64
	UpdatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (t tOemAppTemplateUi) Table(newTableName string) *tOemAppTemplateUi {
	t.tOemAppTemplateUiDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOemAppTemplateUi) As(alias string) *tOemAppTemplateUi {
	t.tOemAppTemplateUiDo.DO = *(t.tOemAppTemplateUiDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOemAppTemplateUi) updateTableName(table string) *tOemAppTemplateUi {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Type = field.NewInt32(table, "type")
	t.Name = field.NewString(table, "name")
	t.NameEn = field.NewString(table, "name_en")
	t.Code = field.NewString(table, "code")
	t.Sort = field.NewInt32(table, "sort")
	t.PageJson = field.NewString(table, "page_json")
	t.AppTemplateId = field.NewInt64(table, "app_template_id")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *tOemAppTemplateUi) WithContext(ctx context.Context) *tOemAppTemplateUiDo {
	return t.tOemAppTemplateUiDo.WithContext(ctx)
}

func (t tOemAppTemplateUi) TableName() string { return t.tOemAppTemplateUiDo.TableName() }

func (t tOemAppTemplateUi) Alias() string { return t.tOemAppTemplateUiDo.Alias() }

func (t *tOemAppTemplateUi) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOemAppTemplateUi) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.Id
	t.fieldMap["type"] = t.Type
	t.fieldMap["name"] = t.Name
	t.fieldMap["name_en"] = t.NameEn
	t.fieldMap["code"] = t.Code
	t.fieldMap["sort"] = t.Sort
	t.fieldMap["page_json"] = t.PageJson
	t.fieldMap["app_template_id"] = t.AppTemplateId
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t tOemAppTemplateUi) clone(db *gorm.DB) tOemAppTemplateUi {
	t.tOemAppTemplateUiDo.ReplaceDB(db)
	return t
}

type tOemAppTemplateUiDo struct{ gen.DO }

func (t tOemAppTemplateUiDo) Debug() *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Debug())
}

func (t tOemAppTemplateUiDo) WithContext(ctx context.Context) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOemAppTemplateUiDo) Clauses(conds ...clause.Expression) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOemAppTemplateUiDo) Returning(value interface{}, columns ...string) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOemAppTemplateUiDo) Not(conds ...gen.Condition) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOemAppTemplateUiDo) Or(conds ...gen.Condition) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOemAppTemplateUiDo) Select(conds ...field.Expr) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOemAppTemplateUiDo) Where(conds ...gen.Condition) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOemAppTemplateUiDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOemAppTemplateUiDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOemAppTemplateUiDo) Order(conds ...field.Expr) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOemAppTemplateUiDo) Distinct(cols ...field.Expr) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOemAppTemplateUiDo) Omit(cols ...field.Expr) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOemAppTemplateUiDo) Join(table schema.Tabler, on ...field.Expr) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOemAppTemplateUiDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOemAppTemplateUiDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOemAppTemplateUiDo) Group(cols ...field.Expr) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOemAppTemplateUiDo) Having(conds ...gen.Condition) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOemAppTemplateUiDo) Limit(limit int) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOemAppTemplateUiDo) Offset(offset int) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOemAppTemplateUiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOemAppTemplateUiDo) Unscoped() *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOemAppTemplateUiDo) Create(values ...*model.TOemAppTemplateUi) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOemAppTemplateUiDo) CreateInBatches(values []*model.TOemAppTemplateUi, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOemAppTemplateUiDo) Save(values ...*model.TOemAppTemplateUi) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOemAppTemplateUiDo) First() (*model.TOemAppTemplateUi, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppTemplateUi), nil
	}
}

func (t tOemAppTemplateUiDo) Take() (*model.TOemAppTemplateUi, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppTemplateUi), nil
	}
}

func (t tOemAppTemplateUiDo) Last() (*model.TOemAppTemplateUi, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppTemplateUi), nil
	}
}

func (t tOemAppTemplateUiDo) Find() ([]*model.TOemAppTemplateUi, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOemAppTemplateUi), err
}

func (t tOemAppTemplateUiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOemAppTemplateUi, err error) {
	buf := make([]*model.TOemAppTemplateUi, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOemAppTemplateUiDo) FindInBatches(result *[]*model.TOemAppTemplateUi, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOemAppTemplateUiDo) Attrs(attrs ...field.AssignExpr) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOemAppTemplateUiDo) Assign(attrs ...field.AssignExpr) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOemAppTemplateUiDo) Joins(field field.RelationField) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOemAppTemplateUiDo) Preload(field field.RelationField) *tOemAppTemplateUiDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOemAppTemplateUiDo) FirstOrInit() (*model.TOemAppTemplateUi, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppTemplateUi), nil
	}
}

func (t tOemAppTemplateUiDo) FirstOrCreate() (*model.TOemAppTemplateUi, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppTemplateUi), nil
	}
}

func (t tOemAppTemplateUiDo) FindByPage(offset int, limit int) (result []*model.TOemAppTemplateUi, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOemAppTemplateUiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOemAppTemplateUiDo) withDO(do gen.Dao) *tOemAppTemplateUiDo {
	t.DO = *do.(*gen.DO)
	return t
}
