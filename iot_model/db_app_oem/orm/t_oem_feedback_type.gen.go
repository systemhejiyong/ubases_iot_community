// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app_oem/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOemFeedbackType(db *gorm.DB) tOemFeedbackType {
	_tOemFeedbackType := tOemFeedbackType{}

	_tOemFeedbackType.tOemFeedbackTypeDo.UseDB(db)
	_tOemFeedbackType.tOemFeedbackTypeDo.UseModel(&model.TOemFeedbackType{})

	tableName := _tOemFeedbackType.tOemFeedbackTypeDo.TableName()
	_tOemFeedbackType.ALL = field.NewField(tableName, "*")
	_tOemFeedbackType.Id = field.NewInt64(tableName, "id")
	_tOemFeedbackType.Name = field.NewString(tableName, "name")
	_tOemFeedbackType.AppId = field.NewInt64(tableName, "app_id")
	_tOemFeedbackType.AppKey = field.NewString(tableName, "app_key")
	_tOemFeedbackType.Sort = field.NewInt32(tableName, "sort")
	_tOemFeedbackType.CreatedAt = field.NewTime(tableName, "created_at")
	_tOemFeedbackType.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOemFeedbackType.DeletedAt = field.NewField(tableName, "deleted_at")

	_tOemFeedbackType.fillFieldMap()

	return _tOemFeedbackType
}

type tOemFeedbackType struct {
	tOemFeedbackTypeDo tOemFeedbackTypeDo

	ALL       field.Field
	Id        field.Int64
	Name      field.String
	AppId     field.Int64
	AppKey    field.String
	Sort      field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (t tOemFeedbackType) Table(newTableName string) *tOemFeedbackType {
	t.tOemFeedbackTypeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOemFeedbackType) As(alias string) *tOemFeedbackType {
	t.tOemFeedbackTypeDo.DO = *(t.tOemFeedbackTypeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOemFeedbackType) updateTableName(table string) *tOemFeedbackType {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.AppId = field.NewInt64(table, "app_id")
	t.AppKey = field.NewString(table, "app_key")
	t.Sort = field.NewInt32(table, "sort")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tOemFeedbackType) WithContext(ctx context.Context) *tOemFeedbackTypeDo {
	return t.tOemFeedbackTypeDo.WithContext(ctx)
}

func (t tOemFeedbackType) TableName() string { return t.tOemFeedbackTypeDo.TableName() }

func (t *tOemFeedbackType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOemFeedbackType) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.Id
	t.fieldMap["name"] = t.Name
	t.fieldMap["app_id"] = t.AppId
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["sort"] = t.Sort
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tOemFeedbackType) clone(db *gorm.DB) tOemFeedbackType {
	t.tOemFeedbackTypeDo.ReplaceDB(db)
	return t
}

type tOemFeedbackTypeDo struct{ gen.DO }

func (t tOemFeedbackTypeDo) Debug() *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Debug())
}

func (t tOemFeedbackTypeDo) WithContext(ctx context.Context) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOemFeedbackTypeDo) Clauses(conds ...clause.Expression) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOemFeedbackTypeDo) Returning(value interface{}, columns ...string) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOemFeedbackTypeDo) Not(conds ...gen.Condition) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOemFeedbackTypeDo) Or(conds ...gen.Condition) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOemFeedbackTypeDo) Select(conds ...field.Expr) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOemFeedbackTypeDo) Where(conds ...gen.Condition) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOemFeedbackTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOemFeedbackTypeDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOemFeedbackTypeDo) Order(conds ...field.Expr) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOemFeedbackTypeDo) Distinct(cols ...field.Expr) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOemFeedbackTypeDo) Omit(cols ...field.Expr) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOemFeedbackTypeDo) Join(table schema.Tabler, on ...field.Expr) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOemFeedbackTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOemFeedbackTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOemFeedbackTypeDo) Group(cols ...field.Expr) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOemFeedbackTypeDo) Having(conds ...gen.Condition) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOemFeedbackTypeDo) Limit(limit int) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOemFeedbackTypeDo) Offset(offset int) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOemFeedbackTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOemFeedbackTypeDo) Unscoped() *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOemFeedbackTypeDo) Create(values ...*model.TOemFeedbackType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOemFeedbackTypeDo) CreateInBatches(values []*model.TOemFeedbackType, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOemFeedbackTypeDo) Save(values ...*model.TOemFeedbackType) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOemFeedbackTypeDo) First() (*model.TOemFeedbackType, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemFeedbackType), nil
	}
}

func (t tOemFeedbackTypeDo) Take() (*model.TOemFeedbackType, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemFeedbackType), nil
	}
}

func (t tOemFeedbackTypeDo) Last() (*model.TOemFeedbackType, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemFeedbackType), nil
	}
}

func (t tOemFeedbackTypeDo) Find() ([]*model.TOemFeedbackType, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOemFeedbackType), err
}

func (t tOemFeedbackTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOemFeedbackType, err error) {
	buf := make([]*model.TOemFeedbackType, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOemFeedbackTypeDo) FindInBatches(result *[]*model.TOemFeedbackType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOemFeedbackTypeDo) Attrs(attrs ...field.AssignExpr) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOemFeedbackTypeDo) Assign(attrs ...field.AssignExpr) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOemFeedbackTypeDo) Joins(field field.RelationField) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOemFeedbackTypeDo) Preload(field field.RelationField) *tOemFeedbackTypeDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOemFeedbackTypeDo) FirstOrInit() (*model.TOemFeedbackType, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemFeedbackType), nil
	}
}

func (t tOemFeedbackTypeDo) FirstOrCreate() (*model.TOemFeedbackType, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemFeedbackType), nil
	}
}

func (t tOemFeedbackTypeDo) FindByPage(offset int, limit int) (result []*model.TOemFeedbackType, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOemFeedbackTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOemFeedbackTypeDo) withDO(do gen.Dao) *tOemFeedbackTypeDo {
	t.DO = *do.(*gen.DO)
	return t
}
