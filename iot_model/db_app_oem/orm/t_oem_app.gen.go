// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app_oem/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOemApp(db *gorm.DB) tOemApp {
	_tOemApp := tOemApp{}

	_tOemApp.tOemAppDo.UseDB(db)
	_tOemApp.tOemAppDo.UseModel(&model.TOemApp{})

	tableName := _tOemApp.tOemAppDo.TableName()
	_tOemApp.ALL = field.NewField(tableName, "*")
	_tOemApp.Id = field.NewInt64(tableName, "id")
	_tOemApp.AppKey = field.NewString(tableName, "app_key")
	_tOemApp.AppSecret = field.NewString(tableName, "app_secret")
	_tOemApp.Name = field.NewString(tableName, "name")
	_tOemApp.Version = field.NewString(tableName, "version")
	_tOemApp.IosPkgName = field.NewString(tableName, "ios_pkg_name")
	_tOemApp.AndroidPkgName = field.NewString(tableName, "android_pkg_name")
	_tOemApp.Channel = field.NewString(tableName, "channel")
	_tOemApp.Status = field.NewInt32(tableName, "status")
	_tOemApp.AmapKey = field.NewString(tableName, "amap_key")
	_tOemApp.GooglemapKey = field.NewString(tableName, "googlemap_key")
	_tOemApp.Region = field.NewInt32(tableName, "region")
	_tOemApp.CurrentStep = field.NewInt32(tableName, "current_step")
	_tOemApp.TenantId = field.NewString(tableName, "tenant_id")
	_tOemApp.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOemApp.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOemApp.CreatedAt = field.NewTime(tableName, "created_at")
	_tOemApp.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOemApp.DeletedAt = field.NewField(tableName, "deleted_at")
	_tOemApp.IsListed = field.NewInt32(tableName, "is_listed")
	_tOemApp.NameEn = field.NewString(tableName, "name_en")
	_tOemApp.AppTemplateId = field.NewInt64(tableName, "app_template_id")
	_tOemApp.AppTemplateVersion = field.NewString(tableName, "app_template_version")
	_tOemApp.AppType = field.NewInt32(tableName, "app_type")
	_tOemApp.AppDevType = field.NewInt32(tableName, "app_dev_type")
	_tOemApp.AppIconUrl = field.NewString(tableName, "app_icon_url")
	_tOemApp.IosVersion = field.NewString(tableName, "ios_version")
	_tOemApp.AndroidInterVersion = field.NewString(tableName, "android_inter_version")
	_tOemApp.AndroidOuterVersion = field.NewString(tableName, "android_outer_version")
	_tOemApp.AppBuildVersion = field.NewInt32(tableName, "app_build_version")
	_tOemApp.LastBuildTime = field.NewTime(tableName, "last_build_time")
	_tOemApp.LastCertUpdateTime = field.NewTime(tableName, "last_cert_update_time")
	_tOemApp.LastAndroidCertUpdateTime = field.NewTime(tableName, "last_android_cert_update_time")
	_tOemApp.ThemeJson = field.NewString(tableName, "theme_json")
	_tOemApp.LastIosCertUpdateTime = field.NewTime(tableName, "last_ios_cert_update_time")
	_tOemApp.IsDefault = field.NewInt32(tableName, "is_default")
	_tOemApp.LastUiUpdateTime = field.NewTime(tableName, "last_ui_update_time")
	_tOemApp.IosTeamId = field.NewString(tableName, "ios_team_id")

	_tOemApp.fillFieldMap()

	return _tOemApp
}

type tOemApp struct {
	tOemAppDo tOemAppDo

	ALL                       field.Field
	Id                        field.Int64
	AppKey                    field.String
	AppSecret                 field.String
	Name                      field.String
	Version                   field.String
	IosPkgName                field.String
	AndroidPkgName            field.String
	Channel                   field.String
	Status                    field.Int32
	AmapKey                   field.String
	GooglemapKey              field.String
	Region                    field.Int32
	CurrentStep               field.Int32
	TenantId                  field.String
	CreatedBy                 field.Int64
	UpdatedBy                 field.Int64
	CreatedAt                 field.Time
	UpdatedAt                 field.Time
	DeletedAt                 field.Field
	IsListed                  field.Int32
	NameEn                    field.String
	AppTemplateId             field.Int64
	AppTemplateVersion        field.String
	AppType                   field.Int32
	AppDevType                field.Int32
	AppIconUrl                field.String
	IosVersion                field.String
	AndroidInterVersion       field.String
	AndroidOuterVersion       field.String
	AppBuildVersion           field.Int32
	LastBuildTime             field.Time
	LastCertUpdateTime        field.Time
	LastAndroidCertUpdateTime field.Time
	ThemeJson                 field.String
	LastIosCertUpdateTime     field.Time
	IsDefault                 field.Int32
	LastUiUpdateTime          field.Time
	IosTeamId                 field.String

	fieldMap map[string]field.Expr
}

func (t tOemApp) Table(newTableName string) *tOemApp {
	t.tOemAppDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOemApp) As(alias string) *tOemApp {
	t.tOemAppDo.DO = *(t.tOemAppDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOemApp) updateTableName(table string) *tOemApp {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.AppKey = field.NewString(table, "app_key")
	t.AppSecret = field.NewString(table, "app_secret")
	t.Name = field.NewString(table, "name")
	t.Version = field.NewString(table, "version")
	t.IosPkgName = field.NewString(table, "ios_pkg_name")
	t.AndroidPkgName = field.NewString(table, "android_pkg_name")
	t.Channel = field.NewString(table, "channel")
	t.Status = field.NewInt32(table, "status")
	t.AmapKey = field.NewString(table, "amap_key")
	t.GooglemapKey = field.NewString(table, "googlemap_key")
	t.Region = field.NewInt32(table, "region")
	t.CurrentStep = field.NewInt32(table, "current_step")
	t.TenantId = field.NewString(table, "tenant_id")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.IsListed = field.NewInt32(table, "is_listed")
	t.NameEn = field.NewString(table, "name_en")
	t.AppTemplateId = field.NewInt64(table, "app_template_id")
	t.AppTemplateVersion = field.NewString(table, "app_template_version")
	t.AppType = field.NewInt32(table, "app_type")
	t.AppDevType = field.NewInt32(table, "app_dev_type")
	t.AppIconUrl = field.NewString(table, "app_icon_url")
	t.IosVersion = field.NewString(table, "ios_version")
	t.AndroidInterVersion = field.NewString(table, "android_inter_version")
	t.AndroidOuterVersion = field.NewString(table, "android_outer_version")
	t.AppBuildVersion = field.NewInt32(table, "app_build_version")
	t.LastBuildTime = field.NewTime(table, "last_build_time")
	t.LastCertUpdateTime = field.NewTime(table, "last_cert_update_time")
	t.LastAndroidCertUpdateTime = field.NewTime(table, "last_android_cert_update_time")
	t.ThemeJson = field.NewString(table, "theme_json")
	t.LastIosCertUpdateTime = field.NewTime(table, "last_ios_cert_update_time")
	t.IsDefault = field.NewInt32(table, "is_default")
	t.LastUiUpdateTime = field.NewTime(table, "last_ui_update_time")
	t.IosTeamId = field.NewString(table, "ios_team_id")

	t.fillFieldMap()

	return t
}

func (t *tOemApp) WithContext(ctx context.Context) *tOemAppDo { return t.tOemAppDo.WithContext(ctx) }

func (t tOemApp) TableName() string { return t.tOemAppDo.TableName() }

func (t tOemApp) Alias() string { return t.tOemAppDo.Alias() }

func (t *tOemApp) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOemApp) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 38)
	t.fieldMap["id"] = t.Id
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["app_secret"] = t.AppSecret
	t.fieldMap["name"] = t.Name
	t.fieldMap["version"] = t.Version
	t.fieldMap["ios_pkg_name"] = t.IosPkgName
	t.fieldMap["android_pkg_name"] = t.AndroidPkgName
	t.fieldMap["channel"] = t.Channel
	t.fieldMap["status"] = t.Status
	t.fieldMap["amap_key"] = t.AmapKey
	t.fieldMap["googlemap_key"] = t.GooglemapKey
	t.fieldMap["region"] = t.Region
	t.fieldMap["current_step"] = t.CurrentStep
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["is_listed"] = t.IsListed
	t.fieldMap["name_en"] = t.NameEn
	t.fieldMap["app_template_id"] = t.AppTemplateId
	t.fieldMap["app_template_version"] = t.AppTemplateVersion
	t.fieldMap["app_type"] = t.AppType
	t.fieldMap["app_dev_type"] = t.AppDevType
	t.fieldMap["app_icon_url"] = t.AppIconUrl
	t.fieldMap["ios_version"] = t.IosVersion
	t.fieldMap["android_inter_version"] = t.AndroidInterVersion
	t.fieldMap["android_outer_version"] = t.AndroidOuterVersion
	t.fieldMap["app_build_version"] = t.AppBuildVersion
	t.fieldMap["last_build_time"] = t.LastBuildTime
	t.fieldMap["last_cert_update_time"] = t.LastCertUpdateTime
	t.fieldMap["last_android_cert_update_time"] = t.LastAndroidCertUpdateTime
	t.fieldMap["theme_json"] = t.ThemeJson
	t.fieldMap["last_ios_cert_update_time"] = t.LastIosCertUpdateTime
	t.fieldMap["is_default"] = t.IsDefault
	t.fieldMap["last_ui_update_time"] = t.LastUiUpdateTime
	t.fieldMap["ios_team_id"] = t.IosTeamId
}

func (t tOemApp) clone(db *gorm.DB) tOemApp {
	t.tOemAppDo.ReplaceDB(db)
	return t
}

type tOemAppDo struct{ gen.DO }

func (t tOemAppDo) Debug() *tOemAppDo {
	return t.withDO(t.DO.Debug())
}

func (t tOemAppDo) WithContext(ctx context.Context) *tOemAppDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOemAppDo) Clauses(conds ...clause.Expression) *tOemAppDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOemAppDo) Returning(value interface{}, columns ...string) *tOemAppDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOemAppDo) Not(conds ...gen.Condition) *tOemAppDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOemAppDo) Or(conds ...gen.Condition) *tOemAppDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOemAppDo) Select(conds ...field.Expr) *tOemAppDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOemAppDo) Where(conds ...gen.Condition) *tOemAppDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOemAppDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOemAppDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOemAppDo) Order(conds ...field.Expr) *tOemAppDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOemAppDo) Distinct(cols ...field.Expr) *tOemAppDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOemAppDo) Omit(cols ...field.Expr) *tOemAppDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOemAppDo) Join(table schema.Tabler, on ...field.Expr) *tOemAppDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOemAppDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOemAppDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOemAppDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOemAppDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOemAppDo) Group(cols ...field.Expr) *tOemAppDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOemAppDo) Having(conds ...gen.Condition) *tOemAppDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOemAppDo) Limit(limit int) *tOemAppDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOemAppDo) Offset(offset int) *tOemAppDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOemAppDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOemAppDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOemAppDo) Unscoped() *tOemAppDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOemAppDo) Create(values ...*model.TOemApp) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOemAppDo) CreateInBatches(values []*model.TOemApp, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOemAppDo) Save(values ...*model.TOemApp) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOemAppDo) First() (*model.TOemApp, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemApp), nil
	}
}

func (t tOemAppDo) Take() (*model.TOemApp, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemApp), nil
	}
}

func (t tOemAppDo) Last() (*model.TOemApp, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemApp), nil
	}
}

func (t tOemAppDo) Find() ([]*model.TOemApp, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOemApp), err
}

func (t tOemAppDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOemApp, err error) {
	buf := make([]*model.TOemApp, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOemAppDo) FindInBatches(result *[]*model.TOemApp, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOemAppDo) Attrs(attrs ...field.AssignExpr) *tOemAppDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOemAppDo) Assign(attrs ...field.AssignExpr) *tOemAppDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOemAppDo) Joins(field field.RelationField) *tOemAppDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOemAppDo) Preload(field field.RelationField) *tOemAppDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOemAppDo) FirstOrInit() (*model.TOemApp, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemApp), nil
	}
}

func (t tOemAppDo) FirstOrCreate() (*model.TOemApp, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemApp), nil
	}
}

func (t tOemAppDo) FindByPage(offset int, limit int) (result []*model.TOemApp, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOemAppDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOemAppDo) withDO(do gen.Dao) *tOemAppDo {
	t.DO = *do.(*gen.DO)
	return t
}
