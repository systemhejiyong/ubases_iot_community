// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app_oem/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOemAppPushCert(db *gorm.DB) tOemAppPushCert {
	_tOemAppPushCert := tOemAppPushCert{}

	_tOemAppPushCert.tOemAppPushCertDo.UseDB(db)
	_tOemAppPushCert.tOemAppPushCertDo.UseModel(&model.TOemAppPushCert{})

	tableName := _tOemAppPushCert.tOemAppPushCertDo.TableName()
	_tOemAppPushCert.ALL = field.NewField(tableName, "*")
	_tOemAppPushCert.Id = field.NewInt64(tableName, "id")
	_tOemAppPushCert.AppId = field.NewInt64(tableName, "app_id")
	_tOemAppPushCert.Version = field.NewString(tableName, "version")
	_tOemAppPushCert.Apns = field.NewString(tableName, "apns")
	_tOemAppPushCert.Jpush = field.NewString(tableName, "jpush")
	_tOemAppPushCert.Fcm = field.NewString(tableName, "fcm")
	_tOemAppPushCert.Huawei = field.NewString(tableName, "huawei")
	_tOemAppPushCert.Xiaomi = field.NewString(tableName, "xiaomi")
	_tOemAppPushCert.Vivo = field.NewString(tableName, "vivo")
	_tOemAppPushCert.Oppo = field.NewString(tableName, "oppo")
	_tOemAppPushCert.Honor = field.NewString(tableName, "honor")

	_tOemAppPushCert.fillFieldMap()

	return _tOemAppPushCert
}

type tOemAppPushCert struct {
	tOemAppPushCertDo tOemAppPushCertDo

	ALL     field.Field
	Id      field.Int64
	AppId   field.Int64
	Version field.String
	Apns    field.String
	Jpush   field.String
	Fcm     field.String
	Huawei  field.String
	Xiaomi  field.String
	Vivo    field.String
	Oppo    field.String
	Honor   field.String

	fieldMap map[string]field.Expr
}

func (t tOemAppPushCert) Table(newTableName string) *tOemAppPushCert {
	t.tOemAppPushCertDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOemAppPushCert) As(alias string) *tOemAppPushCert {
	t.tOemAppPushCertDo.DO = *(t.tOemAppPushCertDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOemAppPushCert) updateTableName(table string) *tOemAppPushCert {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.AppId = field.NewInt64(table, "app_id")
	t.Version = field.NewString(table, "version")
	t.Apns = field.NewString(table, "apns")
	t.Jpush = field.NewString(table, "jpush")
	t.Fcm = field.NewString(table, "fcm")
	t.Huawei = field.NewString(table, "huawei")
	t.Xiaomi = field.NewString(table, "xiaomi")
	t.Vivo = field.NewString(table, "vivo")
	t.Oppo = field.NewString(table, "oppo")
	t.Honor = field.NewString(table, "honor")

	t.fillFieldMap()

	return t
}

func (t *tOemAppPushCert) WithContext(ctx context.Context) *tOemAppPushCertDo {
	return t.tOemAppPushCertDo.WithContext(ctx)
}

func (t tOemAppPushCert) TableName() string { return t.tOemAppPushCertDo.TableName() }

func (t tOemAppPushCert) Alias() string { return t.tOemAppPushCertDo.Alias() }

func (t *tOemAppPushCert) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOemAppPushCert) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.Id
	t.fieldMap["app_id"] = t.AppId
	t.fieldMap["version"] = t.Version
	t.fieldMap["apns"] = t.Apns
	t.fieldMap["jpush"] = t.Jpush
	t.fieldMap["fcm"] = t.Fcm
	t.fieldMap["huawei"] = t.Huawei
	t.fieldMap["xiaomi"] = t.Xiaomi
	t.fieldMap["vivo"] = t.Vivo
	t.fieldMap["oppo"] = t.Oppo
	t.fieldMap["honor"] = t.Honor
}

func (t tOemAppPushCert) clone(db *gorm.DB) tOemAppPushCert {
	t.tOemAppPushCertDo.ReplaceDB(db)
	return t
}

type tOemAppPushCertDo struct{ gen.DO }

func (t tOemAppPushCertDo) Debug() *tOemAppPushCertDo {
	return t.withDO(t.DO.Debug())
}

func (t tOemAppPushCertDo) WithContext(ctx context.Context) *tOemAppPushCertDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOemAppPushCertDo) Clauses(conds ...clause.Expression) *tOemAppPushCertDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOemAppPushCertDo) Returning(value interface{}, columns ...string) *tOemAppPushCertDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOemAppPushCertDo) Not(conds ...gen.Condition) *tOemAppPushCertDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOemAppPushCertDo) Or(conds ...gen.Condition) *tOemAppPushCertDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOemAppPushCertDo) Select(conds ...field.Expr) *tOemAppPushCertDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOemAppPushCertDo) Where(conds ...gen.Condition) *tOemAppPushCertDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOemAppPushCertDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOemAppPushCertDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOemAppPushCertDo) Order(conds ...field.Expr) *tOemAppPushCertDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOemAppPushCertDo) Distinct(cols ...field.Expr) *tOemAppPushCertDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOemAppPushCertDo) Omit(cols ...field.Expr) *tOemAppPushCertDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOemAppPushCertDo) Join(table schema.Tabler, on ...field.Expr) *tOemAppPushCertDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOemAppPushCertDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOemAppPushCertDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOemAppPushCertDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOemAppPushCertDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOemAppPushCertDo) Group(cols ...field.Expr) *tOemAppPushCertDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOemAppPushCertDo) Having(conds ...gen.Condition) *tOemAppPushCertDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOemAppPushCertDo) Limit(limit int) *tOemAppPushCertDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOemAppPushCertDo) Offset(offset int) *tOemAppPushCertDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOemAppPushCertDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOemAppPushCertDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOemAppPushCertDo) Unscoped() *tOemAppPushCertDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOemAppPushCertDo) Create(values ...*model.TOemAppPushCert) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOemAppPushCertDo) CreateInBatches(values []*model.TOemAppPushCert, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOemAppPushCertDo) Save(values ...*model.TOemAppPushCert) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOemAppPushCertDo) First() (*model.TOemAppPushCert, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppPushCert), nil
	}
}

func (t tOemAppPushCertDo) Take() (*model.TOemAppPushCert, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppPushCert), nil
	}
}

func (t tOemAppPushCertDo) Last() (*model.TOemAppPushCert, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppPushCert), nil
	}
}

func (t tOemAppPushCertDo) Find() ([]*model.TOemAppPushCert, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOemAppPushCert), err
}

func (t tOemAppPushCertDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOemAppPushCert, err error) {
	buf := make([]*model.TOemAppPushCert, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOemAppPushCertDo) FindInBatches(result *[]*model.TOemAppPushCert, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOemAppPushCertDo) Attrs(attrs ...field.AssignExpr) *tOemAppPushCertDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOemAppPushCertDo) Assign(attrs ...field.AssignExpr) *tOemAppPushCertDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOemAppPushCertDo) Joins(field field.RelationField) *tOemAppPushCertDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOemAppPushCertDo) Preload(field field.RelationField) *tOemAppPushCertDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOemAppPushCertDo) FirstOrInit() (*model.TOemAppPushCert, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppPushCert), nil
	}
}

func (t tOemAppPushCertDo) FirstOrCreate() (*model.TOemAppPushCert, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppPushCert), nil
	}
}

func (t tOemAppPushCertDo) FindByPage(offset int, limit int) (result []*model.TOemAppPushCert, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOemAppPushCertDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOemAppPushCertDo) withDO(do gen.Dao) *tOemAppPushCertDo {
	t.DO = *do.(*gen.DO)
	return t
}
