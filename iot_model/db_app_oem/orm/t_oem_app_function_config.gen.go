// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app_oem/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOemAppFunctionConfig(db *gorm.DB) tOemAppFunctionConfig {
	_tOemAppFunctionConfig := tOemAppFunctionConfig{}

	_tOemAppFunctionConfig.tOemAppFunctionConfigDo.UseDB(db)
	_tOemAppFunctionConfig.tOemAppFunctionConfigDo.UseModel(&model.TOemAppFunctionConfig{})

	tableName := _tOemAppFunctionConfig.tOemAppFunctionConfigDo.TableName()
	_tOemAppFunctionConfig.ALL = field.NewField(tableName, "*")
	_tOemAppFunctionConfig.Id = field.NewInt64(tableName, "id")
	_tOemAppFunctionConfig.AppId = field.NewInt64(tableName, "app_id")
	_tOemAppFunctionConfig.Version = field.NewString(tableName, "version")
	_tOemAppFunctionConfig.AboutUs = field.NewInt32(tableName, "about_us")
	_tOemAppFunctionConfig.Eula = field.NewInt32(tableName, "eula")
	_tOemAppFunctionConfig.PrivacyPolicy = field.NewInt32(tableName, "privacy_policy")
	_tOemAppFunctionConfig.Weather = field.NewInt32(tableName, "weather")
	_tOemAppFunctionConfig.Voices = field.NewString(tableName, "voices")
	_tOemAppFunctionConfig.Thirds = field.NewString(tableName, "thirds")
	_tOemAppFunctionConfig.AutoUpgrade = field.NewString(tableName, "auto_upgrade")
	_tOemAppFunctionConfig.Geo = field.NewInt32(tableName, "geo")

	_tOemAppFunctionConfig.fillFieldMap()

	return _tOemAppFunctionConfig
}

type tOemAppFunctionConfig struct {
	tOemAppFunctionConfigDo tOemAppFunctionConfigDo

	ALL           field.Field
	Id            field.Int64
	AppId         field.Int64
	Version       field.String
	AboutUs       field.Int32
	Eula          field.Int32
	PrivacyPolicy field.Int32
	Weather       field.Int32
	Voices        field.String
	Thirds        field.String
	AutoUpgrade   field.String
	Geo           field.Int32

	fieldMap map[string]field.Expr
}

func (t tOemAppFunctionConfig) Table(newTableName string) *tOemAppFunctionConfig {
	t.tOemAppFunctionConfigDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOemAppFunctionConfig) As(alias string) *tOemAppFunctionConfig {
	t.tOemAppFunctionConfigDo.DO = *(t.tOemAppFunctionConfigDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOemAppFunctionConfig) updateTableName(table string) *tOemAppFunctionConfig {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.AppId = field.NewInt64(table, "app_id")
	t.Version = field.NewString(table, "version")
	t.AboutUs = field.NewInt32(table, "about_us")
	t.Eula = field.NewInt32(table, "eula")
	t.PrivacyPolicy = field.NewInt32(table, "privacy_policy")
	t.Weather = field.NewInt32(table, "weather")
	t.Voices = field.NewString(table, "voices")
	t.Thirds = field.NewString(table, "thirds")
	t.AutoUpgrade = field.NewString(table, "auto_upgrade")
	t.Geo = field.NewInt32(table, "geo")

	t.fillFieldMap()

	return t
}

func (t *tOemAppFunctionConfig) WithContext(ctx context.Context) *tOemAppFunctionConfigDo {
	return t.tOemAppFunctionConfigDo.WithContext(ctx)
}

func (t tOemAppFunctionConfig) TableName() string { return t.tOemAppFunctionConfigDo.TableName() }

func (t tOemAppFunctionConfig) Alias() string { return t.tOemAppFunctionConfigDo.Alias() }

func (t *tOemAppFunctionConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOemAppFunctionConfig) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 11)
	t.fieldMap["id"] = t.Id
	t.fieldMap["app_id"] = t.AppId
	t.fieldMap["version"] = t.Version
	t.fieldMap["about_us"] = t.AboutUs
	t.fieldMap["eula"] = t.Eula
	t.fieldMap["privacy_policy"] = t.PrivacyPolicy
	t.fieldMap["weather"] = t.Weather
	t.fieldMap["voices"] = t.Voices
	t.fieldMap["thirds"] = t.Thirds
	t.fieldMap["auto_upgrade"] = t.AutoUpgrade
	t.fieldMap["geo"] = t.Geo
}

func (t tOemAppFunctionConfig) clone(db *gorm.DB) tOemAppFunctionConfig {
	t.tOemAppFunctionConfigDo.ReplaceDB(db)
	return t
}

type tOemAppFunctionConfigDo struct{ gen.DO }

func (t tOemAppFunctionConfigDo) Debug() *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Debug())
}

func (t tOemAppFunctionConfigDo) WithContext(ctx context.Context) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOemAppFunctionConfigDo) Clauses(conds ...clause.Expression) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOemAppFunctionConfigDo) Returning(value interface{}, columns ...string) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOemAppFunctionConfigDo) Not(conds ...gen.Condition) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOemAppFunctionConfigDo) Or(conds ...gen.Condition) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOemAppFunctionConfigDo) Select(conds ...field.Expr) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOemAppFunctionConfigDo) Where(conds ...gen.Condition) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOemAppFunctionConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOemAppFunctionConfigDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOemAppFunctionConfigDo) Order(conds ...field.Expr) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOemAppFunctionConfigDo) Distinct(cols ...field.Expr) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOemAppFunctionConfigDo) Omit(cols ...field.Expr) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOemAppFunctionConfigDo) Join(table schema.Tabler, on ...field.Expr) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOemAppFunctionConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOemAppFunctionConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOemAppFunctionConfigDo) Group(cols ...field.Expr) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOemAppFunctionConfigDo) Having(conds ...gen.Condition) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOemAppFunctionConfigDo) Limit(limit int) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOemAppFunctionConfigDo) Offset(offset int) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOemAppFunctionConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOemAppFunctionConfigDo) Unscoped() *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOemAppFunctionConfigDo) Create(values ...*model.TOemAppFunctionConfig) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOemAppFunctionConfigDo) CreateInBatches(values []*model.TOemAppFunctionConfig, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOemAppFunctionConfigDo) Save(values ...*model.TOemAppFunctionConfig) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOemAppFunctionConfigDo) First() (*model.TOemAppFunctionConfig, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppFunctionConfig), nil
	}
}

func (t tOemAppFunctionConfigDo) Take() (*model.TOemAppFunctionConfig, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppFunctionConfig), nil
	}
}

func (t tOemAppFunctionConfigDo) Last() (*model.TOemAppFunctionConfig, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppFunctionConfig), nil
	}
}

func (t tOemAppFunctionConfigDo) Find() ([]*model.TOemAppFunctionConfig, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOemAppFunctionConfig), err
}

func (t tOemAppFunctionConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOemAppFunctionConfig, err error) {
	buf := make([]*model.TOemAppFunctionConfig, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOemAppFunctionConfigDo) FindInBatches(result *[]*model.TOemAppFunctionConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOemAppFunctionConfigDo) Attrs(attrs ...field.AssignExpr) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOemAppFunctionConfigDo) Assign(attrs ...field.AssignExpr) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOemAppFunctionConfigDo) Joins(field field.RelationField) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOemAppFunctionConfigDo) Preload(field field.RelationField) *tOemAppFunctionConfigDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOemAppFunctionConfigDo) FirstOrInit() (*model.TOemAppFunctionConfig, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppFunctionConfig), nil
	}
}

func (t tOemAppFunctionConfigDo) FirstOrCreate() (*model.TOemAppFunctionConfig, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppFunctionConfig), nil
	}
}

func (t tOemAppFunctionConfigDo) FindByPage(offset int, limit int) (result []*model.TOemAppFunctionConfig, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOemAppFunctionConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOemAppFunctionConfigDo) withDO(do gen.Dao) *tOemAppFunctionConfigDo {
	t.DO = *do.(*gen.DO)
	return t
}
