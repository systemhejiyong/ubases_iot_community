// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app_oem/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOemAppTemplate(db *gorm.DB) tOemAppTemplate {
	_tOemAppTemplate := tOemAppTemplate{}

	_tOemAppTemplate.tOemAppTemplateDo.UseDB(db)
	_tOemAppTemplate.tOemAppTemplateDo.UseModel(&model.TOemAppTemplate{})

	tableName := _tOemAppTemplate.tOemAppTemplateDo.TableName()
	_tOemAppTemplate.ALL = field.NewField(tableName, "*")
	_tOemAppTemplate.Id = field.NewInt64(tableName, "id")
	_tOemAppTemplate.Name = field.NewString(tableName, "name")
	_tOemAppTemplate.NameEn = field.NewString(tableName, "name_en")
	_tOemAppTemplate.Type = field.NewInt32(tableName, "type")
	_tOemAppTemplate.Version = field.NewString(tableName, "version")
	_tOemAppTemplate.GitUrl = field.NewString(tableName, "git_url")
	_tOemAppTemplate.Status = field.NewInt32(tableName, "status")
	_tOemAppTemplate.Remark = field.NewString(tableName, "remark")
	_tOemAppTemplate.OpenRangeType = field.NewInt32(tableName, "open_range_type")
	_tOemAppTemplate.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOemAppTemplate.CreatedAt = field.NewTime(tableName, "created_at")
	_tOemAppTemplate.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOemAppTemplate.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tOemAppTemplate.DeletedAt = field.NewField(tableName, "deleted_at")
	_tOemAppTemplate.UseCount = field.NewInt32(tableName, "use_count")

	_tOemAppTemplate.fillFieldMap()

	return _tOemAppTemplate
}

type tOemAppTemplate struct {
	tOemAppTemplateDo tOemAppTemplateDo

	ALL           field.Field
	Id            field.Int64
	Name          field.String
	NameEn        field.String
	Type          field.Int32
	Version       field.String
	GitUrl        field.String
	Status        field.Int32
	Remark        field.String
	OpenRangeType field.Int32
	CreatedBy     field.Int64
	CreatedAt     field.Time
	UpdatedBy     field.Int64
	UpdatedAt     field.Time
	DeletedAt     field.Field
	UseCount      field.Int32

	fieldMap map[string]field.Expr
}

func (t tOemAppTemplate) Table(newTableName string) *tOemAppTemplate {
	t.tOemAppTemplateDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOemAppTemplate) As(alias string) *tOemAppTemplate {
	t.tOemAppTemplateDo.DO = *(t.tOemAppTemplateDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOemAppTemplate) updateTableName(table string) *tOemAppTemplate {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.NameEn = field.NewString(table, "name_en")
	t.Type = field.NewInt32(table, "type")
	t.Version = field.NewString(table, "version")
	t.GitUrl = field.NewString(table, "git_url")
	t.Status = field.NewInt32(table, "status")
	t.Remark = field.NewString(table, "remark")
	t.OpenRangeType = field.NewInt32(table, "open_range_type")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.UseCount = field.NewInt32(table, "use_count")

	t.fillFieldMap()

	return t
}

func (t *tOemAppTemplate) WithContext(ctx context.Context) *tOemAppTemplateDo {
	return t.tOemAppTemplateDo.WithContext(ctx)
}

func (t tOemAppTemplate) TableName() string { return t.tOemAppTemplateDo.TableName() }

func (t *tOemAppTemplate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOemAppTemplate) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 15)
	t.fieldMap["id"] = t.Id
	t.fieldMap["name"] = t.Name
	t.fieldMap["name_en"] = t.NameEn
	t.fieldMap["type"] = t.Type
	t.fieldMap["version"] = t.Version
	t.fieldMap["git_url"] = t.GitUrl
	t.fieldMap["status"] = t.Status
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["open_range_type"] = t.OpenRangeType
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["use_count"] = t.UseCount
}

func (t tOemAppTemplate) clone(db *gorm.DB) tOemAppTemplate {
	t.tOemAppTemplateDo.ReplaceDB(db)
	return t
}

type tOemAppTemplateDo struct{ gen.DO }

func (t tOemAppTemplateDo) Debug() *tOemAppTemplateDo {
	return t.withDO(t.DO.Debug())
}

func (t tOemAppTemplateDo) WithContext(ctx context.Context) *tOemAppTemplateDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOemAppTemplateDo) Clauses(conds ...clause.Expression) *tOemAppTemplateDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOemAppTemplateDo) Returning(value interface{}, columns ...string) *tOemAppTemplateDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOemAppTemplateDo) Not(conds ...gen.Condition) *tOemAppTemplateDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOemAppTemplateDo) Or(conds ...gen.Condition) *tOemAppTemplateDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOemAppTemplateDo) Select(conds ...field.Expr) *tOemAppTemplateDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOemAppTemplateDo) Where(conds ...gen.Condition) *tOemAppTemplateDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOemAppTemplateDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOemAppTemplateDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOemAppTemplateDo) Order(conds ...field.Expr) *tOemAppTemplateDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOemAppTemplateDo) Distinct(cols ...field.Expr) *tOemAppTemplateDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOemAppTemplateDo) Omit(cols ...field.Expr) *tOemAppTemplateDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOemAppTemplateDo) Join(table schema.Tabler, on ...field.Expr) *tOemAppTemplateDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOemAppTemplateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOemAppTemplateDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOemAppTemplateDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOemAppTemplateDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOemAppTemplateDo) Group(cols ...field.Expr) *tOemAppTemplateDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOemAppTemplateDo) Having(conds ...gen.Condition) *tOemAppTemplateDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOemAppTemplateDo) Limit(limit int) *tOemAppTemplateDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOemAppTemplateDo) Offset(offset int) *tOemAppTemplateDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOemAppTemplateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOemAppTemplateDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOemAppTemplateDo) Unscoped() *tOemAppTemplateDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOemAppTemplateDo) Create(values ...*model.TOemAppTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOemAppTemplateDo) CreateInBatches(values []*model.TOemAppTemplate, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOemAppTemplateDo) Save(values ...*model.TOemAppTemplate) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOemAppTemplateDo) First() (*model.TOemAppTemplate, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppTemplate), nil
	}
}

func (t tOemAppTemplateDo) Take() (*model.TOemAppTemplate, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppTemplate), nil
	}
}

func (t tOemAppTemplateDo) Last() (*model.TOemAppTemplate, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppTemplate), nil
	}
}

func (t tOemAppTemplateDo) Find() ([]*model.TOemAppTemplate, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOemAppTemplate), err
}

func (t tOemAppTemplateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOemAppTemplate, err error) {
	buf := make([]*model.TOemAppTemplate, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOemAppTemplateDo) FindInBatches(result *[]*model.TOemAppTemplate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOemAppTemplateDo) Attrs(attrs ...field.AssignExpr) *tOemAppTemplateDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOemAppTemplateDo) Assign(attrs ...field.AssignExpr) *tOemAppTemplateDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOemAppTemplateDo) Joins(field field.RelationField) *tOemAppTemplateDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOemAppTemplateDo) Preload(field field.RelationField) *tOemAppTemplateDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOemAppTemplateDo) FirstOrInit() (*model.TOemAppTemplate, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppTemplate), nil
	}
}

func (t tOemAppTemplateDo) FirstOrCreate() (*model.TOemAppTemplate, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppTemplate), nil
	}
}

func (t tOemAppTemplateDo) FindByPage(offset int, limit int) (result []*model.TOemAppTemplate, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOemAppTemplateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOemAppTemplateDo) withDO(do gen.Dao) *tOemAppTemplateDo {
	t.DO = *do.(*gen.DO)
	return t
}
