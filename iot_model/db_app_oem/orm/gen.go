// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                         db,
		TOemApp:                    newTOemApp(db),
		TOemAppAndroidCert:         newTOemAppAndroidCert(db),
		TOemAppAssistRelease:       newTOemAppAssistRelease(db),
		TOemAppAssistReleaseMarket: newTOemAppAssistReleaseMarket(db),
		TOemAppBasicUiSetting:      newTOemAppBasicUiSetting(db),
		TOemAppBuildRecord:         newTOemAppBuildRecord(db),
		TOemAppCustomRecord:        newTOemAppCustomRecord(db),
		TOemAppDebugger:            newTOemAppDebugger(db),
		TOemAppDefMenu:             newTOemAppDefMenu(db),
		TOemAppDoc:                 newTOemAppDoc(db),
		TOemAppDocDir:              newTOemAppDocDir(db),
		TOemAppDocRelation:         newTOemAppDocRelation(db),
		TOemAppEntry:               newTOemAppEntry(db),
		TOemAppEntrySeting:         newTOemAppEntrySeting(db),
		TOemAppFlashScreen:         newTOemAppFlashScreen(db),
		TOemAppFlashScreenUser:     newTOemAppFlashScreenUser(db),
		TOemAppFunctionConfig:      newTOemAppFunctionConfig(db),
		TOemAppIntroduce:           newTOemAppIntroduce(db),
		TOemAppIosCert:             newTOemAppIosCert(db),
		TOemAppMallLink:            newTOemAppMallLink(db),
		TOemAppPushCert:            newTOemAppPushCert(db),
		TOemAppTemplate:            newTOemAppTemplate(db),
		TOemAppTemplateDeveloper:   newTOemAppTemplateDeveloper(db),
		TOemAppTemplateFunction:    newTOemAppTemplateFunction(db),
		TOemAppTemplateMenu:        newTOemAppTemplateMenu(db),
		TOemAppTemplateSkin:        newTOemAppTemplateSkin(db),
		TOemAppTemplateThirdParty:  newTOemAppTemplateThirdParty(db),
		TOemAppTemplateUi:          newTOemAppTemplateUi(db),
		TOemAppUiConfig:            newTOemAppUiConfig(db),
		TOemAppVersionRecord:       newTOemAppVersionRecord(db),
		TOemFeedbackType:           newTOemFeedbackType(db),
		TPublicAppVersion:          newTPublicAppVersion(db),
	}
}

type Query struct {
	db *gorm.DB

	TOemApp                    tOemApp
	TOemAppAndroidCert         tOemAppAndroidCert
	TOemAppAssistRelease       tOemAppAssistRelease
	TOemAppAssistReleaseMarket tOemAppAssistReleaseMarket
	TOemAppBasicUiSetting      tOemAppBasicUiSetting
	TOemAppBuildRecord         tOemAppBuildRecord
	TOemAppCustomRecord        tOemAppCustomRecord
	TOemAppDebugger            tOemAppDebugger
	TOemAppDefMenu             tOemAppDefMenu
	TOemAppDoc                 tOemAppDoc
	TOemAppDocDir              tOemAppDocDir
	TOemAppDocRelation         tOemAppDocRelation
	TOemAppEntry               tOemAppEntry
	TOemAppEntrySeting         tOemAppEntrySeting
	TOemAppFlashScreen         tOemAppFlashScreen
	TOemAppFlashScreenUser     tOemAppFlashScreenUser
	TOemAppFunctionConfig      tOemAppFunctionConfig
	TOemAppIntroduce           tOemAppIntroduce
	TOemAppIosCert             tOemAppIosCert
	TOemAppMallLink            tOemAppMallLink
	TOemAppPushCert            tOemAppPushCert
	TOemAppTemplate            tOemAppTemplate
	TOemAppTemplateDeveloper   tOemAppTemplateDeveloper
	TOemAppTemplateFunction    tOemAppTemplateFunction
	TOemAppTemplateMenu        tOemAppTemplateMenu
	TOemAppTemplateSkin        tOemAppTemplateSkin
	TOemAppTemplateThirdParty  tOemAppTemplateThirdParty
	TOemAppTemplateUi          tOemAppTemplateUi
	TOemAppUiConfig            tOemAppUiConfig
	TOemAppVersionRecord       tOemAppVersionRecord
	TOemFeedbackType           tOemFeedbackType
	TPublicAppVersion          tPublicAppVersion
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                         db,
		TOemApp:                    q.TOemApp.clone(db),
		TOemAppAndroidCert:         q.TOemAppAndroidCert.clone(db),
		TOemAppAssistRelease:       q.TOemAppAssistRelease.clone(db),
		TOemAppAssistReleaseMarket: q.TOemAppAssistReleaseMarket.clone(db),
		TOemAppBasicUiSetting:      q.TOemAppBasicUiSetting.clone(db),
		TOemAppBuildRecord:         q.TOemAppBuildRecord.clone(db),
		TOemAppCustomRecord:        q.TOemAppCustomRecord.clone(db),
		TOemAppDebugger:            q.TOemAppDebugger.clone(db),
		TOemAppDefMenu:             q.TOemAppDefMenu.clone(db),
		TOemAppDoc:                 q.TOemAppDoc.clone(db),
		TOemAppDocDir:              q.TOemAppDocDir.clone(db),
		TOemAppDocRelation:         q.TOemAppDocRelation.clone(db),
		TOemAppEntry:               q.TOemAppEntry.clone(db),
		TOemAppEntrySeting:         q.TOemAppEntrySeting.clone(db),
		TOemAppFlashScreen:         q.TOemAppFlashScreen.clone(db),
		TOemAppFlashScreenUser:     q.TOemAppFlashScreenUser.clone(db),
		TOemAppFunctionConfig:      q.TOemAppFunctionConfig.clone(db),
		TOemAppIntroduce:           q.TOemAppIntroduce.clone(db),
		TOemAppIosCert:             q.TOemAppIosCert.clone(db),
		TOemAppMallLink:            q.TOemAppMallLink.clone(db),
		TOemAppPushCert:            q.TOemAppPushCert.clone(db),
		TOemAppTemplate:            q.TOemAppTemplate.clone(db),
		TOemAppTemplateDeveloper:   q.TOemAppTemplateDeveloper.clone(db),
		TOemAppTemplateFunction:    q.TOemAppTemplateFunction.clone(db),
		TOemAppTemplateMenu:        q.TOemAppTemplateMenu.clone(db),
		TOemAppTemplateSkin:        q.TOemAppTemplateSkin.clone(db),
		TOemAppTemplateThirdParty:  q.TOemAppTemplateThirdParty.clone(db),
		TOemAppTemplateUi:          q.TOemAppTemplateUi.clone(db),
		TOemAppUiConfig:            q.TOemAppUiConfig.clone(db),
		TOemAppVersionRecord:       q.TOemAppVersionRecord.clone(db),
		TOemFeedbackType:           q.TOemFeedbackType.clone(db),
		TPublicAppVersion:          q.TPublicAppVersion.clone(db),
	}
}

type queryCtx struct {
	TOemApp                    tOemAppDo
	TOemAppAndroidCert         tOemAppAndroidCertDo
	TOemAppAssistRelease       tOemAppAssistReleaseDo
	TOemAppAssistReleaseMarket tOemAppAssistReleaseMarketDo
	TOemAppBasicUiSetting      tOemAppBasicUiSettingDo
	TOemAppBuildRecord         tOemAppBuildRecordDo
	TOemAppCustomRecord        tOemAppCustomRecordDo
	TOemAppDebugger            tOemAppDebuggerDo
	TOemAppDefMenu             tOemAppDefMenuDo
	TOemAppDoc                 tOemAppDocDo
	TOemAppDocDir              tOemAppDocDirDo
	TOemAppDocRelation         tOemAppDocRelationDo
	TOemAppEntry               tOemAppEntryDo
	TOemAppEntrySeting         tOemAppEntrySetingDo
	TOemAppFlashScreen         tOemAppFlashScreenDo
	TOemAppFlashScreenUser     tOemAppFlashScreenUserDo
	TOemAppFunctionConfig      tOemAppFunctionConfigDo
	TOemAppIntroduce           tOemAppIntroduceDo
	TOemAppIosCert             tOemAppIosCertDo
	TOemAppMallLink            tOemAppMallLinkDo
	TOemAppPushCert            tOemAppPushCertDo
	TOemAppTemplate            tOemAppTemplateDo
	TOemAppTemplateDeveloper   tOemAppTemplateDeveloperDo
	TOemAppTemplateFunction    tOemAppTemplateFunctionDo
	TOemAppTemplateMenu        tOemAppTemplateMenuDo
	TOemAppTemplateSkin        tOemAppTemplateSkinDo
	TOemAppTemplateThirdParty  tOemAppTemplateThirdPartyDo
	TOemAppTemplateUi          tOemAppTemplateUiDo
	TOemAppUiConfig            tOemAppUiConfigDo
	TOemAppVersionRecord       tOemAppVersionRecordDo
	TOemFeedbackType           tOemFeedbackTypeDo
	TPublicAppVersion          tPublicAppVersionDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		TOemApp:                    *q.TOemApp.WithContext(ctx),
		TOemAppAndroidCert:         *q.TOemAppAndroidCert.WithContext(ctx),
		TOemAppAssistRelease:       *q.TOemAppAssistRelease.WithContext(ctx),
		TOemAppAssistReleaseMarket: *q.TOemAppAssistReleaseMarket.WithContext(ctx),
		TOemAppBasicUiSetting:      *q.TOemAppBasicUiSetting.WithContext(ctx),
		TOemAppBuildRecord:         *q.TOemAppBuildRecord.WithContext(ctx),
		TOemAppCustomRecord:        *q.TOemAppCustomRecord.WithContext(ctx),
		TOemAppDebugger:            *q.TOemAppDebugger.WithContext(ctx),
		TOemAppDefMenu:             *q.TOemAppDefMenu.WithContext(ctx),
		TOemAppDoc:                 *q.TOemAppDoc.WithContext(ctx),
		TOemAppDocDir:              *q.TOemAppDocDir.WithContext(ctx),
		TOemAppDocRelation:         *q.TOemAppDocRelation.WithContext(ctx),
		TOemAppEntry:               *q.TOemAppEntry.WithContext(ctx),
		TOemAppEntrySeting:         *q.TOemAppEntrySeting.WithContext(ctx),
		TOemAppFlashScreen:         *q.TOemAppFlashScreen.WithContext(ctx),
		TOemAppFlashScreenUser:     *q.TOemAppFlashScreenUser.WithContext(ctx),
		TOemAppFunctionConfig:      *q.TOemAppFunctionConfig.WithContext(ctx),
		TOemAppIntroduce:           *q.TOemAppIntroduce.WithContext(ctx),
		TOemAppIosCert:             *q.TOemAppIosCert.WithContext(ctx),
		TOemAppMallLink:            *q.TOemAppMallLink.WithContext(ctx),
		TOemAppPushCert:            *q.TOemAppPushCert.WithContext(ctx),
		TOemAppTemplate:            *q.TOemAppTemplate.WithContext(ctx),
		TOemAppTemplateDeveloper:   *q.TOemAppTemplateDeveloper.WithContext(ctx),
		TOemAppTemplateFunction:    *q.TOemAppTemplateFunction.WithContext(ctx),
		TOemAppTemplateMenu:        *q.TOemAppTemplateMenu.WithContext(ctx),
		TOemAppTemplateSkin:        *q.TOemAppTemplateSkin.WithContext(ctx),
		TOemAppTemplateThirdParty:  *q.TOemAppTemplateThirdParty.WithContext(ctx),
		TOemAppTemplateUi:          *q.TOemAppTemplateUi.WithContext(ctx),
		TOemAppUiConfig:            *q.TOemAppUiConfig.WithContext(ctx),
		TOemAppVersionRecord:       *q.TOemAppVersionRecord.WithContext(ctx),
		TOemFeedbackType:           *q.TOemFeedbackType.WithContext(ctx),
		TPublicAppVersion:          *q.TPublicAppVersion.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
