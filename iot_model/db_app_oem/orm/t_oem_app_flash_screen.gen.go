// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app_oem/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTOemAppFlashScreen(db *gorm.DB) tOemAppFlashScreen {
	_tOemAppFlashScreen := tOemAppFlashScreen{}

	_tOemAppFlashScreen.tOemAppFlashScreenDo.UseDB(db)
	_tOemAppFlashScreen.tOemAppFlashScreenDo.UseModel(&model.TOemAppFlashScreen{})

	tableName := _tOemAppFlashScreen.tOemAppFlashScreenDo.TableName()
	_tOemAppFlashScreen.ALL = field.NewField(tableName, "*")
	_tOemAppFlashScreen.Id = field.NewInt64(tableName, "id")
	_tOemAppFlashScreen.TenantId = field.NewString(tableName, "tenant_id")
	_tOemAppFlashScreen.Name = field.NewString(tableName, "name")
	_tOemAppFlashScreen.AppName = field.NewString(tableName, "app_name")
	_tOemAppFlashScreen.AppKey = field.NewString(tableName, "app_key")
	_tOemAppFlashScreen.AppVersion = field.NewString(tableName, "app_version")
	_tOemAppFlashScreen.PutinUser = field.NewInt32(tableName, "putin_user")
	_tOemAppFlashScreen.OpenPageType = field.NewInt32(tableName, "open_page_type")
	_tOemAppFlashScreen.AppPageType = field.NewInt32(tableName, "app_page_type")
	_tOemAppFlashScreen.OpenPageUrl = field.NewString(tableName, "open_page_url")
	_tOemAppFlashScreen.StartTime = field.NewTime(tableName, "start_time")
	_tOemAppFlashScreen.EndTime = field.NewTime(tableName, "end_time")
	_tOemAppFlashScreen.ShowTime = field.NewInt32(tableName, "show_time")
	_tOemAppFlashScreen.PutinImgUrls = field.NewString(tableName, "putin_img_urls")
	_tOemAppFlashScreen.Status = field.NewInt32(tableName, "status")
	_tOemAppFlashScreen.CreatedBy = field.NewInt64(tableName, "created_by")
	_tOemAppFlashScreen.CreatedAt = field.NewTime(tableName, "created_at")
	_tOemAppFlashScreen.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tOemAppFlashScreen.UpdatedAt = field.NewTime(tableName, "updated_at")

	_tOemAppFlashScreen.fillFieldMap()

	return _tOemAppFlashScreen
}

type tOemAppFlashScreen struct {
	tOemAppFlashScreenDo tOemAppFlashScreenDo

	ALL          field.Field
	Id           field.Int64
	TenantId     field.String
	Name         field.String
	AppName      field.String
	AppKey       field.String
	AppVersion   field.String
	PutinUser    field.Int32
	OpenPageType field.Int32
	AppPageType  field.Int32
	OpenPageUrl  field.String
	StartTime    field.Time
	EndTime      field.Time
	ShowTime     field.Int32
	PutinImgUrls field.String
	Status       field.Int32
	CreatedBy    field.Int64
	CreatedAt    field.Time
	UpdatedBy    field.Int64
	UpdatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (t tOemAppFlashScreen) Table(newTableName string) *tOemAppFlashScreen {
	t.tOemAppFlashScreenDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tOemAppFlashScreen) As(alias string) *tOemAppFlashScreen {
	t.tOemAppFlashScreenDo.DO = *(t.tOemAppFlashScreenDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tOemAppFlashScreen) updateTableName(table string) *tOemAppFlashScreen {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.TenantId = field.NewString(table, "tenant_id")
	t.Name = field.NewString(table, "name")
	t.AppName = field.NewString(table, "app_name")
	t.AppKey = field.NewString(table, "app_key")
	t.AppVersion = field.NewString(table, "app_version")
	t.PutinUser = field.NewInt32(table, "putin_user")
	t.OpenPageType = field.NewInt32(table, "open_page_type")
	t.AppPageType = field.NewInt32(table, "app_page_type")
	t.OpenPageUrl = field.NewString(table, "open_page_url")
	t.StartTime = field.NewTime(table, "start_time")
	t.EndTime = field.NewTime(table, "end_time")
	t.ShowTime = field.NewInt32(table, "show_time")
	t.PutinImgUrls = field.NewString(table, "putin_img_urls")
	t.Status = field.NewInt32(table, "status")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *tOemAppFlashScreen) WithContext(ctx context.Context) *tOemAppFlashScreenDo {
	return t.tOemAppFlashScreenDo.WithContext(ctx)
}

func (t tOemAppFlashScreen) TableName() string { return t.tOemAppFlashScreenDo.TableName() }

func (t *tOemAppFlashScreen) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tOemAppFlashScreen) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 19)
	t.fieldMap["id"] = t.Id
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["name"] = t.Name
	t.fieldMap["app_name"] = t.AppName
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["app_version"] = t.AppVersion
	t.fieldMap["putin_user"] = t.PutinUser
	t.fieldMap["open_page_type"] = t.OpenPageType
	t.fieldMap["app_page_type"] = t.AppPageType
	t.fieldMap["open_page_url"] = t.OpenPageUrl
	t.fieldMap["start_time"] = t.StartTime
	t.fieldMap["end_time"] = t.EndTime
	t.fieldMap["show_time"] = t.ShowTime
	t.fieldMap["putin_img_urls"] = t.PutinImgUrls
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t tOemAppFlashScreen) clone(db *gorm.DB) tOemAppFlashScreen {
	t.tOemAppFlashScreenDo.ReplaceDB(db)
	return t
}

type tOemAppFlashScreenDo struct{ gen.DO }

func (t tOemAppFlashScreenDo) Debug() *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Debug())
}

func (t tOemAppFlashScreenDo) WithContext(ctx context.Context) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tOemAppFlashScreenDo) Clauses(conds ...clause.Expression) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tOemAppFlashScreenDo) Returning(value interface{}, columns ...string) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tOemAppFlashScreenDo) Not(conds ...gen.Condition) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tOemAppFlashScreenDo) Or(conds ...gen.Condition) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tOemAppFlashScreenDo) Select(conds ...field.Expr) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tOemAppFlashScreenDo) Where(conds ...gen.Condition) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tOemAppFlashScreenDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tOemAppFlashScreenDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tOemAppFlashScreenDo) Order(conds ...field.Expr) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tOemAppFlashScreenDo) Distinct(cols ...field.Expr) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tOemAppFlashScreenDo) Omit(cols ...field.Expr) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tOemAppFlashScreenDo) Join(table schema.Tabler, on ...field.Expr) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tOemAppFlashScreenDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tOemAppFlashScreenDo) RightJoin(table schema.Tabler, on ...field.Expr) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tOemAppFlashScreenDo) Group(cols ...field.Expr) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tOemAppFlashScreenDo) Having(conds ...gen.Condition) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tOemAppFlashScreenDo) Limit(limit int) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tOemAppFlashScreenDo) Offset(offset int) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tOemAppFlashScreenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tOemAppFlashScreenDo) Unscoped() *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tOemAppFlashScreenDo) Create(values ...*model.TOemAppFlashScreen) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tOemAppFlashScreenDo) CreateInBatches(values []*model.TOemAppFlashScreen, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tOemAppFlashScreenDo) Save(values ...*model.TOemAppFlashScreen) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tOemAppFlashScreenDo) First() (*model.TOemAppFlashScreen, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppFlashScreen), nil
	}
}

func (t tOemAppFlashScreenDo) Take() (*model.TOemAppFlashScreen, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppFlashScreen), nil
	}
}

func (t tOemAppFlashScreenDo) Last() (*model.TOemAppFlashScreen, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppFlashScreen), nil
	}
}

func (t tOemAppFlashScreenDo) Find() ([]*model.TOemAppFlashScreen, error) {
	result, err := t.DO.Find()
	return result.([]*model.TOemAppFlashScreen), err
}

func (t tOemAppFlashScreenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TOemAppFlashScreen, err error) {
	buf := make([]*model.TOemAppFlashScreen, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tOemAppFlashScreenDo) FindInBatches(result *[]*model.TOemAppFlashScreen, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tOemAppFlashScreenDo) Attrs(attrs ...field.AssignExpr) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tOemAppFlashScreenDo) Assign(attrs ...field.AssignExpr) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tOemAppFlashScreenDo) Joins(field field.RelationField) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tOemAppFlashScreenDo) Preload(field field.RelationField) *tOemAppFlashScreenDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tOemAppFlashScreenDo) FirstOrInit() (*model.TOemAppFlashScreen, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppFlashScreen), nil
	}
}

func (t tOemAppFlashScreenDo) FirstOrCreate() (*model.TOemAppFlashScreen, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TOemAppFlashScreen), nil
	}
}

func (t tOemAppFlashScreenDo) FindByPage(offset int, limit int) (result []*model.TOemAppFlashScreen, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tOemAppFlashScreenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tOemAppFlashScreenDo) withDO(do gen.Dao) *tOemAppFlashScreenDo {
	t.DO = *do.(*gen.DO)
	return t
}
