// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTUcHome(db *gorm.DB) tUcHome {
	_tUcHome := tUcHome{}

	_tUcHome.tUcHomeDo.UseDB(db)
	_tUcHome.tUcHomeDo.UseModel(&model.TUcHome{})

	tableName := _tUcHome.tUcHomeDo.TableName()
	_tUcHome.ALL = field.NewField(tableName, "*")
	_tUcHome.Id = field.NewInt64(tableName, "id")
	_tUcHome.Name = field.NewString(tableName, "name")
	_tUcHome.IconUrl = field.NewString(tableName, "icon_url")
	_tUcHome.Sid = field.NewInt64(tableName, "sid")
	_tUcHome.Lat = field.NewFloat64(tableName, "lat")
	_tUcHome.Lng = field.NewFloat64(tableName, "lng")
	_tUcHome.Country = field.NewString(tableName, "country")
	_tUcHome.Province = field.NewString(tableName, "province")
	_tUcHome.City = field.NewString(tableName, "city")
	_tUcHome.District = field.NewString(tableName, "district")
	_tUcHome.Address = field.NewString(tableName, "address")
	_tUcHome.CoordType = field.NewInt32(tableName, "coord_type")
	_tUcHome.CreatedBy = field.NewInt64(tableName, "created_by")
	_tUcHome.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tUcHome.CreatedAt = field.NewTime(tableName, "created_at")
	_tUcHome.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tUcHome.DeletedAt = field.NewField(tableName, "deleted_at")
	_tUcHome.CountryId = field.NewInt64(tableName, "country_id")
	_tUcHome.ProvinceId = field.NewInt64(tableName, "province_id")
	_tUcHome.CityId = field.NewInt64(tableName, "city_id")

	_tUcHome.fillFieldMap()

	return _tUcHome
}

type tUcHome struct {
	tUcHomeDo tUcHomeDo

	ALL        field.Field
	Id         field.Int64
	Name       field.String
	IconUrl    field.String
	Sid        field.Int64
	Lat        field.Float64
	Lng        field.Float64
	Country    field.String
	Province   field.String
	City       field.String
	District   field.String
	Address    field.String
	CoordType  field.Int32
	CreatedBy  field.Int64
	UpdatedBy  field.Int64
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	CountryId  field.Int64
	ProvinceId field.Int64
	CityId     field.Int64

	fieldMap map[string]field.Expr
}

func (t tUcHome) Table(newTableName string) *tUcHome {
	t.tUcHomeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tUcHome) As(alias string) *tUcHome {
	t.tUcHomeDo.DO = *(t.tUcHomeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tUcHome) updateTableName(table string) *tUcHome {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.IconUrl = field.NewString(table, "icon_url")
	t.Sid = field.NewInt64(table, "sid")
	t.Lat = field.NewFloat64(table, "lat")
	t.Lng = field.NewFloat64(table, "lng")
	t.Country = field.NewString(table, "country")
	t.Province = field.NewString(table, "province")
	t.City = field.NewString(table, "city")
	t.District = field.NewString(table, "district")
	t.Address = field.NewString(table, "address")
	t.CoordType = field.NewInt32(table, "coord_type")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.CountryId = field.NewInt64(table, "country_id")
	t.ProvinceId = field.NewInt64(table, "province_id")
	t.CityId = field.NewInt64(table, "city_id")

	t.fillFieldMap()

	return t
}

func (t *tUcHome) WithContext(ctx context.Context) *tUcHomeDo { return t.tUcHomeDo.WithContext(ctx) }

func (t tUcHome) TableName() string { return t.tUcHomeDo.TableName() }

func (t tUcHome) Alias() string { return t.tUcHomeDo.Alias() }

func (t *tUcHome) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tUcHome) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 20)
	t.fieldMap["id"] = t.Id
	t.fieldMap["name"] = t.Name
	t.fieldMap["icon_url"] = t.IconUrl
	t.fieldMap["sid"] = t.Sid
	t.fieldMap["lat"] = t.Lat
	t.fieldMap["lng"] = t.Lng
	t.fieldMap["country"] = t.Country
	t.fieldMap["province"] = t.Province
	t.fieldMap["city"] = t.City
	t.fieldMap["district"] = t.District
	t.fieldMap["address"] = t.Address
	t.fieldMap["coord_type"] = t.CoordType
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["country_id"] = t.CountryId
	t.fieldMap["province_id"] = t.ProvinceId
	t.fieldMap["city_id"] = t.CityId
}

func (t tUcHome) clone(db *gorm.DB) tUcHome {
	t.tUcHomeDo.ReplaceDB(db)
	return t
}

type tUcHomeDo struct{ gen.DO }

func (t tUcHomeDo) Debug() *tUcHomeDo {
	return t.withDO(t.DO.Debug())
}

func (t tUcHomeDo) WithContext(ctx context.Context) *tUcHomeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tUcHomeDo) Clauses(conds ...clause.Expression) *tUcHomeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tUcHomeDo) Returning(value interface{}, columns ...string) *tUcHomeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tUcHomeDo) Not(conds ...gen.Condition) *tUcHomeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tUcHomeDo) Or(conds ...gen.Condition) *tUcHomeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tUcHomeDo) Select(conds ...field.Expr) *tUcHomeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tUcHomeDo) Where(conds ...gen.Condition) *tUcHomeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tUcHomeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tUcHomeDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tUcHomeDo) Order(conds ...field.Expr) *tUcHomeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tUcHomeDo) Distinct(cols ...field.Expr) *tUcHomeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tUcHomeDo) Omit(cols ...field.Expr) *tUcHomeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tUcHomeDo) Join(table schema.Tabler, on ...field.Expr) *tUcHomeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tUcHomeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tUcHomeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tUcHomeDo) RightJoin(table schema.Tabler, on ...field.Expr) *tUcHomeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tUcHomeDo) Group(cols ...field.Expr) *tUcHomeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tUcHomeDo) Having(conds ...gen.Condition) *tUcHomeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tUcHomeDo) Limit(limit int) *tUcHomeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tUcHomeDo) Offset(offset int) *tUcHomeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tUcHomeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tUcHomeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tUcHomeDo) Unscoped() *tUcHomeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tUcHomeDo) Create(values ...*model.TUcHome) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tUcHomeDo) CreateInBatches(values []*model.TUcHome, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tUcHomeDo) Save(values ...*model.TUcHome) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tUcHomeDo) First() (*model.TUcHome, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcHome), nil
	}
}

func (t tUcHomeDo) Take() (*model.TUcHome, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcHome), nil
	}
}

func (t tUcHomeDo) Last() (*model.TUcHome, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcHome), nil
	}
}

func (t tUcHomeDo) Find() ([]*model.TUcHome, error) {
	result, err := t.DO.Find()
	return result.([]*model.TUcHome), err
}

func (t tUcHomeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUcHome, err error) {
	buf := make([]*model.TUcHome, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tUcHomeDo) FindInBatches(result *[]*model.TUcHome, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tUcHomeDo) Attrs(attrs ...field.AssignExpr) *tUcHomeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tUcHomeDo) Assign(attrs ...field.AssignExpr) *tUcHomeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tUcHomeDo) Joins(field field.RelationField) *tUcHomeDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tUcHomeDo) Preload(field field.RelationField) *tUcHomeDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tUcHomeDo) FirstOrInit() (*model.TUcHome, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcHome), nil
	}
}

func (t tUcHomeDo) FirstOrCreate() (*model.TUcHome, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcHome), nil
	}
}

func (t tUcHomeDo) FindByPage(offset int, limit int) (result []*model.TUcHome, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tUcHomeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tUcHomeDo) withDO(do gen.Dao) *tUcHomeDo {
	t.DO = *do.(*gen.DO)
	return t
}
