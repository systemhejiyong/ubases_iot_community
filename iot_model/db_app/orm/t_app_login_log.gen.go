// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTAppLoginLog(db *gorm.DB) tAppLoginLog {
	_tAppLoginLog := tAppLoginLog{}

	_tAppLoginLog.tAppLoginLogDo.UseDB(db)
	_tAppLoginLog.tAppLoginLogDo.UseModel(&model.TAppLoginLog{})

	tableName := _tAppLoginLog.tAppLoginLogDo.TableName()
	_tAppLoginLog.ALL = field.NewField(tableName, "*")
	_tAppLoginLog.Id = field.NewInt64(tableName, "id")
	_tAppLoginLog.LoginName = field.NewString(tableName, "login_name")
	_tAppLoginLog.Ipaddr = field.NewString(tableName, "ipaddr")
	_tAppLoginLog.LoginLocation = field.NewString(tableName, "login_location")
	_tAppLoginLog.TenantId = field.NewString(tableName, "tenant_id")
	_tAppLoginLog.AppKey = field.NewString(tableName, "app_key")
	_tAppLoginLog.Browser = field.NewString(tableName, "browser")
	_tAppLoginLog.Os = field.NewString(tableName, "os")
	_tAppLoginLog.Status = field.NewInt32(tableName, "status")
	_tAppLoginLog.Msg = field.NewString(tableName, "msg")
	_tAppLoginLog.LoginTime = field.NewTime(tableName, "login_time")
	_tAppLoginLog.Module = field.NewString(tableName, "module")
	_tAppLoginLog.RegionServerId = field.NewInt64(tableName, "region_server_id")

	_tAppLoginLog.fillFieldMap()

	return _tAppLoginLog
}

type tAppLoginLog struct {
	tAppLoginLogDo tAppLoginLogDo

	ALL            field.Field
	Id             field.Int64
	LoginName      field.String
	Ipaddr         field.String
	LoginLocation  field.String
	TenantId       field.String
	AppKey         field.String
	Browser        field.String
	Os             field.String
	Status         field.Int32
	Msg            field.String
	LoginTime      field.Time
	Module         field.String
	RegionServerId field.Int64

	fieldMap map[string]field.Expr
}

func (t tAppLoginLog) Table(newTableName string) *tAppLoginLog {
	t.tAppLoginLogDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tAppLoginLog) As(alias string) *tAppLoginLog {
	t.tAppLoginLogDo.DO = *(t.tAppLoginLogDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tAppLoginLog) updateTableName(table string) *tAppLoginLog {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.LoginName = field.NewString(table, "login_name")
	t.Ipaddr = field.NewString(table, "ipaddr")
	t.LoginLocation = field.NewString(table, "login_location")
	t.TenantId = field.NewString(table, "tenant_id")
	t.AppKey = field.NewString(table, "app_key")
	t.Browser = field.NewString(table, "browser")
	t.Os = field.NewString(table, "os")
	t.Status = field.NewInt32(table, "status")
	t.Msg = field.NewString(table, "msg")
	t.LoginTime = field.NewTime(table, "login_time")
	t.Module = field.NewString(table, "module")
	t.RegionServerId = field.NewInt64(table, "region_server_id")

	t.fillFieldMap()

	return t
}

func (t *tAppLoginLog) WithContext(ctx context.Context) *tAppLoginLogDo {
	return t.tAppLoginLogDo.WithContext(ctx)
}

func (t tAppLoginLog) TableName() string { return t.tAppLoginLogDo.TableName() }

func (t tAppLoginLog) Alias() string { return t.tAppLoginLogDo.Alias() }

func (t *tAppLoginLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tAppLoginLog) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.Id
	t.fieldMap["login_name"] = t.LoginName
	t.fieldMap["ipaddr"] = t.Ipaddr
	t.fieldMap["login_location"] = t.LoginLocation
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["browser"] = t.Browser
	t.fieldMap["os"] = t.Os
	t.fieldMap["status"] = t.Status
	t.fieldMap["msg"] = t.Msg
	t.fieldMap["login_time"] = t.LoginTime
	t.fieldMap["module"] = t.Module
	t.fieldMap["region_server_id"] = t.RegionServerId
}

func (t tAppLoginLog) clone(db *gorm.DB) tAppLoginLog {
	t.tAppLoginLogDo.ReplaceDB(db)
	return t
}

type tAppLoginLogDo struct{ gen.DO }

func (t tAppLoginLogDo) Debug() *tAppLoginLogDo {
	return t.withDO(t.DO.Debug())
}

func (t tAppLoginLogDo) WithContext(ctx context.Context) *tAppLoginLogDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tAppLoginLogDo) Clauses(conds ...clause.Expression) *tAppLoginLogDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tAppLoginLogDo) Returning(value interface{}, columns ...string) *tAppLoginLogDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tAppLoginLogDo) Not(conds ...gen.Condition) *tAppLoginLogDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tAppLoginLogDo) Or(conds ...gen.Condition) *tAppLoginLogDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tAppLoginLogDo) Select(conds ...field.Expr) *tAppLoginLogDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tAppLoginLogDo) Where(conds ...gen.Condition) *tAppLoginLogDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tAppLoginLogDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tAppLoginLogDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tAppLoginLogDo) Order(conds ...field.Expr) *tAppLoginLogDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tAppLoginLogDo) Distinct(cols ...field.Expr) *tAppLoginLogDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tAppLoginLogDo) Omit(cols ...field.Expr) *tAppLoginLogDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tAppLoginLogDo) Join(table schema.Tabler, on ...field.Expr) *tAppLoginLogDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tAppLoginLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tAppLoginLogDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tAppLoginLogDo) RightJoin(table schema.Tabler, on ...field.Expr) *tAppLoginLogDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tAppLoginLogDo) Group(cols ...field.Expr) *tAppLoginLogDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tAppLoginLogDo) Having(conds ...gen.Condition) *tAppLoginLogDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tAppLoginLogDo) Limit(limit int) *tAppLoginLogDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tAppLoginLogDo) Offset(offset int) *tAppLoginLogDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tAppLoginLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tAppLoginLogDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tAppLoginLogDo) Unscoped() *tAppLoginLogDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tAppLoginLogDo) Create(values ...*model.TAppLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tAppLoginLogDo) CreateInBatches(values []*model.TAppLoginLog, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tAppLoginLogDo) Save(values ...*model.TAppLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tAppLoginLogDo) First() (*model.TAppLoginLog, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppLoginLog), nil
	}
}

func (t tAppLoginLogDo) Take() (*model.TAppLoginLog, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppLoginLog), nil
	}
}

func (t tAppLoginLogDo) Last() (*model.TAppLoginLog, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppLoginLog), nil
	}
}

func (t tAppLoginLogDo) Find() ([]*model.TAppLoginLog, error) {
	result, err := t.DO.Find()
	return result.([]*model.TAppLoginLog), err
}

func (t tAppLoginLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAppLoginLog, err error) {
	buf := make([]*model.TAppLoginLog, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tAppLoginLogDo) FindInBatches(result *[]*model.TAppLoginLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tAppLoginLogDo) Attrs(attrs ...field.AssignExpr) *tAppLoginLogDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tAppLoginLogDo) Assign(attrs ...field.AssignExpr) *tAppLoginLogDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tAppLoginLogDo) Joins(field field.RelationField) *tAppLoginLogDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tAppLoginLogDo) Preload(field field.RelationField) *tAppLoginLogDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tAppLoginLogDo) FirstOrInit() (*model.TAppLoginLog, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppLoginLog), nil
	}
}

func (t tAppLoginLogDo) FirstOrCreate() (*model.TAppLoginLog, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppLoginLog), nil
	}
}

func (t tAppLoginLogDo) FindByPage(offset int, limit int) (result []*model.TAppLoginLog, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tAppLoginLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tAppLoginLogDo) withDO(do gen.Dao) *tAppLoginLogDo {
	t.DO = *do.(*gen.DO)
	return t
}
