// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTUcUserOperate(db *gorm.DB) tUcUserOperate {
	_tUcUserOperate := tUcUserOperate{}

	_tUcUserOperate.tUcUserOperateDo.UseDB(db)
	_tUcUserOperate.tUcUserOperateDo.UseModel(&model.TUcUserOperate{})

	tableName := _tUcUserOperate.tUcUserOperateDo.TableName()
	_tUcUserOperate.ALL = field.NewField(tableName, "*")
	_tUcUserOperate.Id = field.NewInt64(tableName, "id")
	_tUcUserOperate.TenantId = field.NewString(tableName, "tenant_id")
	_tUcUserOperate.AppKey = field.NewString(tableName, "app_key")
	_tUcUserOperate.UserId = field.NewInt64(tableName, "user_id")
	_tUcUserOperate.Account = field.NewString(tableName, "account")
	_tUcUserOperate.RequestUri = field.NewString(tableName, "request_uri")
	_tUcUserOperate.Ip = field.NewString(tableName, "ip")
	_tUcUserOperate.OptTime = field.NewTime(tableName, "opt_time")

	_tUcUserOperate.fillFieldMap()

	return _tUcUserOperate
}

type tUcUserOperate struct {
	tUcUserOperateDo tUcUserOperateDo

	ALL        field.Field
	Id         field.Int64
	TenantId   field.String
	AppKey     field.String
	UserId     field.Int64
	Account    field.String
	RequestUri field.String
	Ip         field.String
	OptTime    field.Time

	fieldMap map[string]field.Expr
}

func (t tUcUserOperate) Table(newTableName string) *tUcUserOperate {
	t.tUcUserOperateDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tUcUserOperate) As(alias string) *tUcUserOperate {
	t.tUcUserOperateDo.DO = *(t.tUcUserOperateDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tUcUserOperate) updateTableName(table string) *tUcUserOperate {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.TenantId = field.NewString(table, "tenant_id")
	t.AppKey = field.NewString(table, "app_key")
	t.UserId = field.NewInt64(table, "user_id")
	t.Account = field.NewString(table, "account")
	t.RequestUri = field.NewString(table, "request_uri")
	t.Ip = field.NewString(table, "ip")
	t.OptTime = field.NewTime(table, "opt_time")

	t.fillFieldMap()

	return t
}

func (t *tUcUserOperate) WithContext(ctx context.Context) *tUcUserOperateDo {
	return t.tUcUserOperateDo.WithContext(ctx)
}

func (t tUcUserOperate) TableName() string { return t.tUcUserOperateDo.TableName() }

func (t tUcUserOperate) Alias() string { return t.tUcUserOperateDo.Alias() }

func (t *tUcUserOperate) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tUcUserOperate) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.Id
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["user_id"] = t.UserId
	t.fieldMap["account"] = t.Account
	t.fieldMap["request_uri"] = t.RequestUri
	t.fieldMap["ip"] = t.Ip
	t.fieldMap["opt_time"] = t.OptTime
}

func (t tUcUserOperate) clone(db *gorm.DB) tUcUserOperate {
	t.tUcUserOperateDo.ReplaceDB(db)
	return t
}

type tUcUserOperateDo struct{ gen.DO }

func (t tUcUserOperateDo) Debug() *tUcUserOperateDo {
	return t.withDO(t.DO.Debug())
}

func (t tUcUserOperateDo) WithContext(ctx context.Context) *tUcUserOperateDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tUcUserOperateDo) Clauses(conds ...clause.Expression) *tUcUserOperateDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tUcUserOperateDo) Returning(value interface{}, columns ...string) *tUcUserOperateDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tUcUserOperateDo) Not(conds ...gen.Condition) *tUcUserOperateDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tUcUserOperateDo) Or(conds ...gen.Condition) *tUcUserOperateDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tUcUserOperateDo) Select(conds ...field.Expr) *tUcUserOperateDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tUcUserOperateDo) Where(conds ...gen.Condition) *tUcUserOperateDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tUcUserOperateDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tUcUserOperateDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tUcUserOperateDo) Order(conds ...field.Expr) *tUcUserOperateDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tUcUserOperateDo) Distinct(cols ...field.Expr) *tUcUserOperateDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tUcUserOperateDo) Omit(cols ...field.Expr) *tUcUserOperateDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tUcUserOperateDo) Join(table schema.Tabler, on ...field.Expr) *tUcUserOperateDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tUcUserOperateDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tUcUserOperateDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tUcUserOperateDo) RightJoin(table schema.Tabler, on ...field.Expr) *tUcUserOperateDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tUcUserOperateDo) Group(cols ...field.Expr) *tUcUserOperateDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tUcUserOperateDo) Having(conds ...gen.Condition) *tUcUserOperateDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tUcUserOperateDo) Limit(limit int) *tUcUserOperateDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tUcUserOperateDo) Offset(offset int) *tUcUserOperateDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tUcUserOperateDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tUcUserOperateDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tUcUserOperateDo) Unscoped() *tUcUserOperateDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tUcUserOperateDo) Create(values ...*model.TUcUserOperate) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tUcUserOperateDo) CreateInBatches(values []*model.TUcUserOperate, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tUcUserOperateDo) Save(values ...*model.TUcUserOperate) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tUcUserOperateDo) First() (*model.TUcUserOperate, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserOperate), nil
	}
}

func (t tUcUserOperateDo) Take() (*model.TUcUserOperate, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserOperate), nil
	}
}

func (t tUcUserOperateDo) Last() (*model.TUcUserOperate, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserOperate), nil
	}
}

func (t tUcUserOperateDo) Find() ([]*model.TUcUserOperate, error) {
	result, err := t.DO.Find()
	return result.([]*model.TUcUserOperate), err
}

func (t tUcUserOperateDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUcUserOperate, err error) {
	buf := make([]*model.TUcUserOperate, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tUcUserOperateDo) FindInBatches(result *[]*model.TUcUserOperate, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tUcUserOperateDo) Attrs(attrs ...field.AssignExpr) *tUcUserOperateDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tUcUserOperateDo) Assign(attrs ...field.AssignExpr) *tUcUserOperateDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tUcUserOperateDo) Joins(field field.RelationField) *tUcUserOperateDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tUcUserOperateDo) Preload(field field.RelationField) *tUcUserOperateDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tUcUserOperateDo) FirstOrInit() (*model.TUcUserOperate, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserOperate), nil
	}
}

func (t tUcUserOperateDo) FirstOrCreate() (*model.TUcUserOperate, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserOperate), nil
	}
}

func (t tUcUserOperateDo) FindByPage(offset int, limit int) (result []*model.TUcUserOperate, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tUcUserOperateDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tUcUserOperateDo) withDO(do gen.Dao) *tUcUserOperateDo {
	t.DO = *do.(*gen.DO)
	return t
}
