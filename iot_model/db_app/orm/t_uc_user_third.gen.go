// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTUcUserThird(db *gorm.DB) tUcUserThird {
	_tUcUserThird := tUcUserThird{}

	_tUcUserThird.tUcUserThirdDo.UseDB(db)
	_tUcUserThird.tUcUserThirdDo.UseModel(&model.TUcUserThird{})

	tableName := _tUcUserThird.tUcUserThirdDo.TableName()
	_tUcUserThird.ALL = field.NewField(tableName, "*")
	_tUcUserThird.Id = field.NewInt64(tableName, "id")
	_tUcUserThird.UserId = field.NewInt64(tableName, "user_id")
	_tUcUserThird.ThirdType = field.NewInt32(tableName, "third_type")
	_tUcUserThird.ThirdUserId = field.NewString(tableName, "third_user_id")
	_tUcUserThird.Nickname = field.NewString(tableName, "nickname")
	_tUcUserThird.CreatedBy = field.NewInt64(tableName, "created_by")
	_tUcUserThird.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tUcUserThird.CreatedAt = field.NewTime(tableName, "created_at")
	_tUcUserThird.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tUcUserThird.DeletedAt = field.NewField(tableName, "deleted_at")
	_tUcUserThird.AppKey = field.NewString(tableName, "app_key")
	_tUcUserThird.TenantId = field.NewString(tableName, "tenant_id")
	_tUcUserThird.RegionServerId = field.NewInt64(tableName, "region_server_id")

	_tUcUserThird.fillFieldMap()

	return _tUcUserThird
}

type tUcUserThird struct {
	tUcUserThirdDo tUcUserThirdDo

	ALL            field.Field
	Id             field.Int64
	UserId         field.Int64
	ThirdType      field.Int32
	ThirdUserId    field.String
	Nickname       field.String
	CreatedBy      field.Int64
	UpdatedBy      field.Int64
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field
	AppKey         field.String
	TenantId       field.String
	RegionServerId field.Int64

	fieldMap map[string]field.Expr
}

func (t tUcUserThird) Table(newTableName string) *tUcUserThird {
	t.tUcUserThirdDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tUcUserThird) As(alias string) *tUcUserThird {
	t.tUcUserThirdDo.DO = *(t.tUcUserThirdDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tUcUserThird) updateTableName(table string) *tUcUserThird {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.UserId = field.NewInt64(table, "user_id")
	t.ThirdType = field.NewInt32(table, "third_type")
	t.ThirdUserId = field.NewString(table, "third_user_id")
	t.Nickname = field.NewString(table, "nickname")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.AppKey = field.NewString(table, "app_key")
	t.TenantId = field.NewString(table, "tenant_id")
	t.RegionServerId = field.NewInt64(table, "region_server_id")

	t.fillFieldMap()

	return t
}

func (t *tUcUserThird) WithContext(ctx context.Context) *tUcUserThirdDo {
	return t.tUcUserThirdDo.WithContext(ctx)
}

func (t tUcUserThird) TableName() string { return t.tUcUserThirdDo.TableName() }

func (t tUcUserThird) Alias() string { return t.tUcUserThirdDo.Alias() }

func (t *tUcUserThird) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tUcUserThird) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.Id
	t.fieldMap["user_id"] = t.UserId
	t.fieldMap["third_type"] = t.ThirdType
	t.fieldMap["third_user_id"] = t.ThirdUserId
	t.fieldMap["nickname"] = t.Nickname
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["region_server_id"] = t.RegionServerId
}

func (t tUcUserThird) clone(db *gorm.DB) tUcUserThird {
	t.tUcUserThirdDo.ReplaceDB(db)
	return t
}

type tUcUserThirdDo struct{ gen.DO }

func (t tUcUserThirdDo) Debug() *tUcUserThirdDo {
	return t.withDO(t.DO.Debug())
}

func (t tUcUserThirdDo) WithContext(ctx context.Context) *tUcUserThirdDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tUcUserThirdDo) Clauses(conds ...clause.Expression) *tUcUserThirdDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tUcUserThirdDo) Returning(value interface{}, columns ...string) *tUcUserThirdDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tUcUserThirdDo) Not(conds ...gen.Condition) *tUcUserThirdDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tUcUserThirdDo) Or(conds ...gen.Condition) *tUcUserThirdDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tUcUserThirdDo) Select(conds ...field.Expr) *tUcUserThirdDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tUcUserThirdDo) Where(conds ...gen.Condition) *tUcUserThirdDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tUcUserThirdDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tUcUserThirdDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tUcUserThirdDo) Order(conds ...field.Expr) *tUcUserThirdDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tUcUserThirdDo) Distinct(cols ...field.Expr) *tUcUserThirdDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tUcUserThirdDo) Omit(cols ...field.Expr) *tUcUserThirdDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tUcUserThirdDo) Join(table schema.Tabler, on ...field.Expr) *tUcUserThirdDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tUcUserThirdDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tUcUserThirdDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tUcUserThirdDo) RightJoin(table schema.Tabler, on ...field.Expr) *tUcUserThirdDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tUcUserThirdDo) Group(cols ...field.Expr) *tUcUserThirdDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tUcUserThirdDo) Having(conds ...gen.Condition) *tUcUserThirdDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tUcUserThirdDo) Limit(limit int) *tUcUserThirdDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tUcUserThirdDo) Offset(offset int) *tUcUserThirdDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tUcUserThirdDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tUcUserThirdDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tUcUserThirdDo) Unscoped() *tUcUserThirdDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tUcUserThirdDo) Create(values ...*model.TUcUserThird) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tUcUserThirdDo) CreateInBatches(values []*model.TUcUserThird, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tUcUserThirdDo) Save(values ...*model.TUcUserThird) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tUcUserThirdDo) First() (*model.TUcUserThird, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserThird), nil
	}
}

func (t tUcUserThirdDo) Take() (*model.TUcUserThird, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserThird), nil
	}
}

func (t tUcUserThirdDo) Last() (*model.TUcUserThird, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserThird), nil
	}
}

func (t tUcUserThirdDo) Find() ([]*model.TUcUserThird, error) {
	result, err := t.DO.Find()
	return result.([]*model.TUcUserThird), err
}

func (t tUcUserThirdDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUcUserThird, err error) {
	buf := make([]*model.TUcUserThird, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tUcUserThirdDo) FindInBatches(result *[]*model.TUcUserThird, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tUcUserThirdDo) Attrs(attrs ...field.AssignExpr) *tUcUserThirdDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tUcUserThirdDo) Assign(attrs ...field.AssignExpr) *tUcUserThirdDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tUcUserThirdDo) Joins(field field.RelationField) *tUcUserThirdDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tUcUserThirdDo) Preload(field field.RelationField) *tUcUserThirdDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tUcUserThirdDo) FirstOrInit() (*model.TUcUserThird, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserThird), nil
	}
}

func (t tUcUserThirdDo) FirstOrCreate() (*model.TUcUserThird, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserThird), nil
	}
}

func (t tUcUserThirdDo) FindByPage(offset int, limit int) (result []*model.TUcUserThird, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tUcUserThirdDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tUcUserThirdDo) withDO(do gen.Dao) *tUcUserThirdDo {
	t.DO = *do.(*gen.DO)
	return t
}
