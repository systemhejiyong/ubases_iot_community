// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTUcUserFeedback(db *gorm.DB) tUcUserFeedback {
	_tUcUserFeedback := tUcUserFeedback{}

	_tUcUserFeedback.tUcUserFeedbackDo.UseDB(db)
	_tUcUserFeedback.tUcUserFeedbackDo.UseModel(&model.TUcUserFeedback{})

	tableName := _tUcUserFeedback.tUcUserFeedbackDo.TableName()
	_tUcUserFeedback.ALL = field.NewField(tableName, "*")
	_tUcUserFeedback.Id = field.NewInt64(tableName, "id")
	_tUcUserFeedback.UserId = field.NewInt64(tableName, "user_id")
	_tUcUserFeedback.QuestionTypeId = field.NewInt64(tableName, "question_type_id")
	_tUcUserFeedback.ProductId = field.NewInt64(tableName, "product_id")
	_tUcUserFeedback.FeedbackTime = field.NewTime(tableName, "feedback_time")
	_tUcUserFeedback.FeedbackContent = field.NewString(tableName, "feedback_content")
	_tUcUserFeedback.Status = field.NewInt32(tableName, "status")
	_tUcUserFeedback.CreatedBy = field.NewInt64(tableName, "created_by")
	_tUcUserFeedback.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tUcUserFeedback.CreatedAt = field.NewTime(tableName, "created_at")
	_tUcUserFeedback.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tUcUserFeedback.DeletedAt = field.NewField(tableName, "deleted_at")
	_tUcUserFeedback.Pictures = field.NewString(tableName, "pictures")
	_tUcUserFeedback.Videos = field.NewString(tableName, "videos")
	_tUcUserFeedback.Contact = field.NewString(tableName, "contact")
	_tUcUserFeedback.Did = field.NewString(tableName, "did")
	_tUcUserFeedback.ProductKey = field.NewString(tableName, "productKey")
	_tUcUserFeedback.AppKey = field.NewString(tableName, "app_key")
	_tUcUserFeedback.TenantId = field.NewString(tableName, "tenant_id")
	_tUcUserFeedback.AppVersion = field.NewString(tableName, "app_version")
	_tUcUserFeedback.MobileLang = field.NewString(tableName, "mobile_lang")
	_tUcUserFeedback.MobileModel = field.NewString(tableName, "mobile_model")
	_tUcUserFeedback.MobileSystem = field.NewString(tableName, "mobile_system")

	_tUcUserFeedback.fillFieldMap()

	return _tUcUserFeedback
}

type tUcUserFeedback struct {
	tUcUserFeedbackDo tUcUserFeedbackDo

	ALL             field.Field
	Id              field.Int64
	UserId          field.Int64
	QuestionTypeId  field.Int64
	ProductId       field.Int64
	FeedbackTime    field.Time
	FeedbackContent field.String
	Status          field.Int32
	CreatedBy       field.Int64
	UpdatedBy       field.Int64
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	Pictures        field.String
	Videos          field.String
	Contact         field.String
	Did             field.String
	ProductKey      field.String
	AppKey          field.String
	TenantId        field.String
	AppVersion      field.String
	MobileLang      field.String
	MobileModel     field.String
	MobileSystem    field.String

	fieldMap map[string]field.Expr
}

func (t tUcUserFeedback) Table(newTableName string) *tUcUserFeedback {
	t.tUcUserFeedbackDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tUcUserFeedback) As(alias string) *tUcUserFeedback {
	t.tUcUserFeedbackDo.DO = *(t.tUcUserFeedbackDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tUcUserFeedback) updateTableName(table string) *tUcUserFeedback {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.UserId = field.NewInt64(table, "user_id")
	t.QuestionTypeId = field.NewInt64(table, "question_type_id")
	t.ProductId = field.NewInt64(table, "product_id")
	t.FeedbackTime = field.NewTime(table, "feedback_time")
	t.FeedbackContent = field.NewString(table, "feedback_content")
	t.Status = field.NewInt32(table, "status")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.Pictures = field.NewString(table, "pictures")
	t.Videos = field.NewString(table, "videos")
	t.Contact = field.NewString(table, "contact")
	t.Did = field.NewString(table, "did")
	t.ProductKey = field.NewString(table, "productKey")
	t.AppKey = field.NewString(table, "app_key")
	t.TenantId = field.NewString(table, "tenant_id")
	t.AppVersion = field.NewString(table, "app_version")
	t.MobileLang = field.NewString(table, "mobile_lang")
	t.MobileModel = field.NewString(table, "mobile_model")
	t.MobileSystem = field.NewString(table, "mobile_system")

	t.fillFieldMap()

	return t
}

func (t *tUcUserFeedback) WithContext(ctx context.Context) *tUcUserFeedbackDo {
	return t.tUcUserFeedbackDo.WithContext(ctx)
}

func (t tUcUserFeedback) TableName() string { return t.tUcUserFeedbackDo.TableName() }

func (t tUcUserFeedback) Alias() string { return t.tUcUserFeedbackDo.Alias() }

func (t *tUcUserFeedback) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tUcUserFeedback) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 23)
	t.fieldMap["id"] = t.Id
	t.fieldMap["user_id"] = t.UserId
	t.fieldMap["question_type_id"] = t.QuestionTypeId
	t.fieldMap["product_id"] = t.ProductId
	t.fieldMap["feedback_time"] = t.FeedbackTime
	t.fieldMap["feedback_content"] = t.FeedbackContent
	t.fieldMap["status"] = t.Status
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["pictures"] = t.Pictures
	t.fieldMap["videos"] = t.Videos
	t.fieldMap["contact"] = t.Contact
	t.fieldMap["did"] = t.Did
	t.fieldMap["productKey"] = t.ProductKey
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["app_version"] = t.AppVersion
	t.fieldMap["mobile_lang"] = t.MobileLang
	t.fieldMap["mobile_model"] = t.MobileModel
	t.fieldMap["mobile_system"] = t.MobileSystem
}

func (t tUcUserFeedback) clone(db *gorm.DB) tUcUserFeedback {
	t.tUcUserFeedbackDo.ReplaceDB(db)
	return t
}

type tUcUserFeedbackDo struct{ gen.DO }

func (t tUcUserFeedbackDo) Debug() *tUcUserFeedbackDo {
	return t.withDO(t.DO.Debug())
}

func (t tUcUserFeedbackDo) WithContext(ctx context.Context) *tUcUserFeedbackDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tUcUserFeedbackDo) Clauses(conds ...clause.Expression) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tUcUserFeedbackDo) Returning(value interface{}, columns ...string) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tUcUserFeedbackDo) Not(conds ...gen.Condition) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tUcUserFeedbackDo) Or(conds ...gen.Condition) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tUcUserFeedbackDo) Select(conds ...field.Expr) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tUcUserFeedbackDo) Where(conds ...gen.Condition) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tUcUserFeedbackDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tUcUserFeedbackDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tUcUserFeedbackDo) Order(conds ...field.Expr) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tUcUserFeedbackDo) Distinct(cols ...field.Expr) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tUcUserFeedbackDo) Omit(cols ...field.Expr) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tUcUserFeedbackDo) Join(table schema.Tabler, on ...field.Expr) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tUcUserFeedbackDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tUcUserFeedbackDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tUcUserFeedbackDo) RightJoin(table schema.Tabler, on ...field.Expr) *tUcUserFeedbackDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tUcUserFeedbackDo) Group(cols ...field.Expr) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tUcUserFeedbackDo) Having(conds ...gen.Condition) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tUcUserFeedbackDo) Limit(limit int) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tUcUserFeedbackDo) Offset(offset int) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tUcUserFeedbackDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tUcUserFeedbackDo) Unscoped() *tUcUserFeedbackDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tUcUserFeedbackDo) Create(values ...*model.TUcUserFeedback) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tUcUserFeedbackDo) CreateInBatches(values []*model.TUcUserFeedback, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tUcUserFeedbackDo) Save(values ...*model.TUcUserFeedback) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tUcUserFeedbackDo) First() (*model.TUcUserFeedback, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserFeedback), nil
	}
}

func (t tUcUserFeedbackDo) Take() (*model.TUcUserFeedback, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserFeedback), nil
	}
}

func (t tUcUserFeedbackDo) Last() (*model.TUcUserFeedback, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserFeedback), nil
	}
}

func (t tUcUserFeedbackDo) Find() ([]*model.TUcUserFeedback, error) {
	result, err := t.DO.Find()
	return result.([]*model.TUcUserFeedback), err
}

func (t tUcUserFeedbackDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUcUserFeedback, err error) {
	buf := make([]*model.TUcUserFeedback, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tUcUserFeedbackDo) FindInBatches(result *[]*model.TUcUserFeedback, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tUcUserFeedbackDo) Attrs(attrs ...field.AssignExpr) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tUcUserFeedbackDo) Assign(attrs ...field.AssignExpr) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tUcUserFeedbackDo) Joins(field field.RelationField) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tUcUserFeedbackDo) Preload(field field.RelationField) *tUcUserFeedbackDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tUcUserFeedbackDo) FirstOrInit() (*model.TUcUserFeedback, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserFeedback), nil
	}
}

func (t tUcUserFeedbackDo) FirstOrCreate() (*model.TUcUserFeedback, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserFeedback), nil
	}
}

func (t tUcUserFeedbackDo) FindByPage(offset int, limit int) (result []*model.TUcUserFeedback, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tUcUserFeedbackDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tUcUserFeedbackDo) withDO(do gen.Dao) *tUcUserFeedbackDo {
	t.DO = *do.(*gen.DO)
	return t
}
