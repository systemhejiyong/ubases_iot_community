// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTUcUserFeedbackResult(db *gorm.DB) tUcUserFeedbackResult {
	_tUcUserFeedbackResult := tUcUserFeedbackResult{}

	_tUcUserFeedbackResult.tUcUserFeedbackResultDo.UseDB(db)
	_tUcUserFeedbackResult.tUcUserFeedbackResultDo.UseModel(&model.TUcUserFeedbackResult{})

	tableName := _tUcUserFeedbackResult.tUcUserFeedbackResultDo.TableName()
	_tUcUserFeedbackResult.ALL = field.NewField(tableName, "*")
	_tUcUserFeedbackResult.Id = field.NewInt64(tableName, "id")
	_tUcUserFeedbackResult.FeedbackId = field.NewInt64(tableName, "feedback_id")
	_tUcUserFeedbackResult.HandleStatus = field.NewInt32(tableName, "handle_status")
	_tUcUserFeedbackResult.HandleResult = field.NewString(tableName, "handle_result")
	_tUcUserFeedbackResult.NotifyFlag = field.NewInt32(tableName, "notify_flag")
	_tUcUserFeedbackResult.NotifyContent = field.NewString(tableName, "notify_content")
	_tUcUserFeedbackResult.CreatedBy = field.NewInt64(tableName, "created_by")
	_tUcUserFeedbackResult.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tUcUserFeedbackResult.CreatedAt = field.NewTime(tableName, "created_at")
	_tUcUserFeedbackResult.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tUcUserFeedbackResult.DeletedAt = field.NewField(tableName, "deleted_at")
	_tUcUserFeedbackResult.Pictures = field.NewString(tableName, "pictures")
	_tUcUserFeedbackResult.Videos = field.NewString(tableName, "videos")

	_tUcUserFeedbackResult.fillFieldMap()

	return _tUcUserFeedbackResult
}

type tUcUserFeedbackResult struct {
	tUcUserFeedbackResultDo tUcUserFeedbackResultDo

	ALL           field.Field
	Id            field.Int64
	FeedbackId    field.Int64
	HandleStatus  field.Int32
	HandleResult  field.String
	NotifyFlag    field.Int32
	NotifyContent field.String
	CreatedBy     field.Int64
	UpdatedBy     field.Int64
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Pictures      field.String
	Videos        field.String

	fieldMap map[string]field.Expr
}

func (t tUcUserFeedbackResult) Table(newTableName string) *tUcUserFeedbackResult {
	t.tUcUserFeedbackResultDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tUcUserFeedbackResult) As(alias string) *tUcUserFeedbackResult {
	t.tUcUserFeedbackResultDo.DO = *(t.tUcUserFeedbackResultDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tUcUserFeedbackResult) updateTableName(table string) *tUcUserFeedbackResult {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.FeedbackId = field.NewInt64(table, "feedback_id")
	t.HandleStatus = field.NewInt32(table, "handle_status")
	t.HandleResult = field.NewString(table, "handle_result")
	t.NotifyFlag = field.NewInt32(table, "notify_flag")
	t.NotifyContent = field.NewString(table, "notify_content")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")
	t.Pictures = field.NewString(table, "pictures")
	t.Videos = field.NewString(table, "videos")

	t.fillFieldMap()

	return t
}

func (t *tUcUserFeedbackResult) WithContext(ctx context.Context) *tUcUserFeedbackResultDo {
	return t.tUcUserFeedbackResultDo.WithContext(ctx)
}

func (t tUcUserFeedbackResult) TableName() string { return t.tUcUserFeedbackResultDo.TableName() }

func (t tUcUserFeedbackResult) Alias() string { return t.tUcUserFeedbackResultDo.Alias() }

func (t *tUcUserFeedbackResult) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tUcUserFeedbackResult) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 13)
	t.fieldMap["id"] = t.Id
	t.fieldMap["feedback_id"] = t.FeedbackId
	t.fieldMap["handle_status"] = t.HandleStatus
	t.fieldMap["handle_result"] = t.HandleResult
	t.fieldMap["notify_flag"] = t.NotifyFlag
	t.fieldMap["notify_content"] = t.NotifyContent
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
	t.fieldMap["pictures"] = t.Pictures
	t.fieldMap["videos"] = t.Videos
}

func (t tUcUserFeedbackResult) clone(db *gorm.DB) tUcUserFeedbackResult {
	t.tUcUserFeedbackResultDo.ReplaceDB(db)
	return t
}

type tUcUserFeedbackResultDo struct{ gen.DO }

func (t tUcUserFeedbackResultDo) Debug() *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Debug())
}

func (t tUcUserFeedbackResultDo) WithContext(ctx context.Context) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tUcUserFeedbackResultDo) Clauses(conds ...clause.Expression) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tUcUserFeedbackResultDo) Returning(value interface{}, columns ...string) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tUcUserFeedbackResultDo) Not(conds ...gen.Condition) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tUcUserFeedbackResultDo) Or(conds ...gen.Condition) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tUcUserFeedbackResultDo) Select(conds ...field.Expr) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tUcUserFeedbackResultDo) Where(conds ...gen.Condition) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tUcUserFeedbackResultDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tUcUserFeedbackResultDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tUcUserFeedbackResultDo) Order(conds ...field.Expr) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tUcUserFeedbackResultDo) Distinct(cols ...field.Expr) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tUcUserFeedbackResultDo) Omit(cols ...field.Expr) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tUcUserFeedbackResultDo) Join(table schema.Tabler, on ...field.Expr) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tUcUserFeedbackResultDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tUcUserFeedbackResultDo) RightJoin(table schema.Tabler, on ...field.Expr) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tUcUserFeedbackResultDo) Group(cols ...field.Expr) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tUcUserFeedbackResultDo) Having(conds ...gen.Condition) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tUcUserFeedbackResultDo) Limit(limit int) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tUcUserFeedbackResultDo) Offset(offset int) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tUcUserFeedbackResultDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tUcUserFeedbackResultDo) Unscoped() *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tUcUserFeedbackResultDo) Create(values ...*model.TUcUserFeedbackResult) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tUcUserFeedbackResultDo) CreateInBatches(values []*model.TUcUserFeedbackResult, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tUcUserFeedbackResultDo) Save(values ...*model.TUcUserFeedbackResult) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tUcUserFeedbackResultDo) First() (*model.TUcUserFeedbackResult, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserFeedbackResult), nil
	}
}

func (t tUcUserFeedbackResultDo) Take() (*model.TUcUserFeedbackResult, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserFeedbackResult), nil
	}
}

func (t tUcUserFeedbackResultDo) Last() (*model.TUcUserFeedbackResult, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserFeedbackResult), nil
	}
}

func (t tUcUserFeedbackResultDo) Find() ([]*model.TUcUserFeedbackResult, error) {
	result, err := t.DO.Find()
	return result.([]*model.TUcUserFeedbackResult), err
}

func (t tUcUserFeedbackResultDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUcUserFeedbackResult, err error) {
	buf := make([]*model.TUcUserFeedbackResult, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tUcUserFeedbackResultDo) FindInBatches(result *[]*model.TUcUserFeedbackResult, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tUcUserFeedbackResultDo) Attrs(attrs ...field.AssignExpr) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tUcUserFeedbackResultDo) Assign(attrs ...field.AssignExpr) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tUcUserFeedbackResultDo) Joins(field field.RelationField) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tUcUserFeedbackResultDo) Preload(field field.RelationField) *tUcUserFeedbackResultDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tUcUserFeedbackResultDo) FirstOrInit() (*model.TUcUserFeedbackResult, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserFeedbackResult), nil
	}
}

func (t tUcUserFeedbackResultDo) FirstOrCreate() (*model.TUcUserFeedbackResult, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserFeedbackResult), nil
	}
}

func (t tUcUserFeedbackResultDo) FindByPage(offset int, limit int) (result []*model.TUcUserFeedbackResult, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tUcUserFeedbackResultDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tUcUserFeedbackResultDo) withDO(do gen.Dao) *tUcUserFeedbackResultDo {
	t.DO = *do.(*gen.DO)
	return t
}
