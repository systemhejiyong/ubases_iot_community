// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTAppConfig(db *gorm.DB) tAppConfig {
	_tAppConfig := tAppConfig{}

	_tAppConfig.tAppConfigDo.UseDB(db)
	_tAppConfig.tAppConfigDo.UseModel(&model.TAppConfig{})

	tableName := _tAppConfig.tAppConfigDo.TableName()
	_tAppConfig.ALL = field.NewField(tableName, "*")
	_tAppConfig.Id = field.NewInt64(tableName, "id")
	_tAppConfig.AppCode = field.NewString(tableName, "app_code")
	_tAppConfig.FunctionCode = field.NewString(tableName, "function_code")
	_tAppConfig.FunctionName = field.NewString(tableName, "function_name")
	_tAppConfig.Sort = field.NewInt32(tableName, "sort")
	_tAppConfig.ResourceUrl = field.NewString(tableName, "resource_url")
	_tAppConfig.Title = field.NewString(tableName, "title")
	_tAppConfig.LinkType = field.NewInt32(tableName, "link_type")
	_tAppConfig.LinkParams = field.NewString(tableName, "link_params")
	_tAppConfig.Remark = field.NewString(tableName, "remark")
	_tAppConfig.CreatedBy = field.NewInt64(tableName, "created_by")
	_tAppConfig.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tAppConfig.CreatedAt = field.NewTime(tableName, "created_at")
	_tAppConfig.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tAppConfig.DeletedAt = field.NewField(tableName, "deleted_at")

	_tAppConfig.fillFieldMap()

	return _tAppConfig
}

type tAppConfig struct {
	tAppConfigDo tAppConfigDo

	ALL          field.Field
	Id           field.Int64
	AppCode      field.String
	FunctionCode field.String
	FunctionName field.String
	Sort         field.Int32
	ResourceUrl  field.String
	Title        field.String
	LinkType     field.Int32
	LinkParams   field.String
	Remark       field.String
	CreatedBy    field.Int64
	UpdatedBy    field.Int64
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (t tAppConfig) Table(newTableName string) *tAppConfig {
	t.tAppConfigDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tAppConfig) As(alias string) *tAppConfig {
	t.tAppConfigDo.DO = *(t.tAppConfigDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tAppConfig) updateTableName(table string) *tAppConfig {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.AppCode = field.NewString(table, "app_code")
	t.FunctionCode = field.NewString(table, "function_code")
	t.FunctionName = field.NewString(table, "function_name")
	t.Sort = field.NewInt32(table, "sort")
	t.ResourceUrl = field.NewString(table, "resource_url")
	t.Title = field.NewString(table, "title")
	t.LinkType = field.NewInt32(table, "link_type")
	t.LinkParams = field.NewString(table, "link_params")
	t.Remark = field.NewString(table, "remark")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tAppConfig) WithContext(ctx context.Context) *tAppConfigDo {
	return t.tAppConfigDo.WithContext(ctx)
}

func (t tAppConfig) TableName() string { return t.tAppConfigDo.TableName() }

func (t tAppConfig) Alias() string { return t.tAppConfigDo.Alias() }

func (t *tAppConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tAppConfig) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 15)
	t.fieldMap["id"] = t.Id
	t.fieldMap["app_code"] = t.AppCode
	t.fieldMap["function_code"] = t.FunctionCode
	t.fieldMap["function_name"] = t.FunctionName
	t.fieldMap["sort"] = t.Sort
	t.fieldMap["resource_url"] = t.ResourceUrl
	t.fieldMap["title"] = t.Title
	t.fieldMap["link_type"] = t.LinkType
	t.fieldMap["link_params"] = t.LinkParams
	t.fieldMap["remark"] = t.Remark
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tAppConfig) clone(db *gorm.DB) tAppConfig {
	t.tAppConfigDo.ReplaceDB(db)
	return t
}

type tAppConfigDo struct{ gen.DO }

func (t tAppConfigDo) Debug() *tAppConfigDo {
	return t.withDO(t.DO.Debug())
}

func (t tAppConfigDo) WithContext(ctx context.Context) *tAppConfigDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tAppConfigDo) Clauses(conds ...clause.Expression) *tAppConfigDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tAppConfigDo) Returning(value interface{}, columns ...string) *tAppConfigDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tAppConfigDo) Not(conds ...gen.Condition) *tAppConfigDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tAppConfigDo) Or(conds ...gen.Condition) *tAppConfigDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tAppConfigDo) Select(conds ...field.Expr) *tAppConfigDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tAppConfigDo) Where(conds ...gen.Condition) *tAppConfigDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tAppConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tAppConfigDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tAppConfigDo) Order(conds ...field.Expr) *tAppConfigDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tAppConfigDo) Distinct(cols ...field.Expr) *tAppConfigDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tAppConfigDo) Omit(cols ...field.Expr) *tAppConfigDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tAppConfigDo) Join(table schema.Tabler, on ...field.Expr) *tAppConfigDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tAppConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tAppConfigDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tAppConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) *tAppConfigDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tAppConfigDo) Group(cols ...field.Expr) *tAppConfigDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tAppConfigDo) Having(conds ...gen.Condition) *tAppConfigDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tAppConfigDo) Limit(limit int) *tAppConfigDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tAppConfigDo) Offset(offset int) *tAppConfigDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tAppConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tAppConfigDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tAppConfigDo) Unscoped() *tAppConfigDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tAppConfigDo) Create(values ...*model.TAppConfig) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tAppConfigDo) CreateInBatches(values []*model.TAppConfig, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tAppConfigDo) Save(values ...*model.TAppConfig) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tAppConfigDo) First() (*model.TAppConfig, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppConfig), nil
	}
}

func (t tAppConfigDo) Take() (*model.TAppConfig, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppConfig), nil
	}
}

func (t tAppConfigDo) Last() (*model.TAppConfig, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppConfig), nil
	}
}

func (t tAppConfigDo) Find() ([]*model.TAppConfig, error) {
	result, err := t.DO.Find()
	return result.([]*model.TAppConfig), err
}

func (t tAppConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAppConfig, err error) {
	buf := make([]*model.TAppConfig, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tAppConfigDo) FindInBatches(result *[]*model.TAppConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tAppConfigDo) Attrs(attrs ...field.AssignExpr) *tAppConfigDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tAppConfigDo) Assign(attrs ...field.AssignExpr) *tAppConfigDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tAppConfigDo) Joins(field field.RelationField) *tAppConfigDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tAppConfigDo) Preload(field field.RelationField) *tAppConfigDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tAppConfigDo) FirstOrInit() (*model.TAppConfig, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppConfig), nil
	}
}

func (t tAppConfigDo) FirstOrCreate() (*model.TAppConfig, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppConfig), nil
	}
}

func (t tAppConfigDo) FindByPage(offset int, limit int) (result []*model.TAppConfig, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tAppConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tAppConfigDo) withDO(do gen.Dao) *tAppConfigDo {
	t.DO = *do.(*gen.DO)
	return t
}
