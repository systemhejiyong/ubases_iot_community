// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTUcUserPrizeCollect(db *gorm.DB) tUcUserPrizeCollect {
	_tUcUserPrizeCollect := tUcUserPrizeCollect{}

	_tUcUserPrizeCollect.tUcUserPrizeCollectDo.UseDB(db)
	_tUcUserPrizeCollect.tUcUserPrizeCollectDo.UseModel(&model.TUcUserPrizeCollect{})

	tableName := _tUcUserPrizeCollect.tUcUserPrizeCollectDo.TableName()
	_tUcUserPrizeCollect.ALL = field.NewField(tableName, "*")
	_tUcUserPrizeCollect.Id = field.NewInt64(tableName, "id")
	_tUcUserPrizeCollect.TenantId = field.NewString(tableName, "tenant_id")
	_tUcUserPrizeCollect.UserId = field.NewInt64(tableName, "user_id")
	_tUcUserPrizeCollect.Account = field.NewString(tableName, "account")
	_tUcUserPrizeCollect.Title = field.NewString(tableName, "title")
	_tUcUserPrizeCollect.AppName = field.NewString(tableName, "app_name")
	_tUcUserPrizeCollect.AppKey = field.NewString(tableName, "app_key")
	_tUcUserPrizeCollect.Content = field.NewString(tableName, "content")
	_tUcUserPrizeCollect.ImageUrlList = field.NewString(tableName, "image_url_list")
	_tUcUserPrizeCollect.VideoUrlList = field.NewString(tableName, "video_url_list")
	_tUcUserPrizeCollect.CreatedAt = field.NewTime(tableName, "created_at")
	_tUcUserPrizeCollect.Contact = field.NewString(tableName, "contact")

	_tUcUserPrizeCollect.fillFieldMap()

	return _tUcUserPrizeCollect
}

type tUcUserPrizeCollect struct {
	tUcUserPrizeCollectDo tUcUserPrizeCollectDo

	ALL          field.Field
	Id           field.Int64
	TenantId     field.String
	UserId       field.Int64
	Account      field.String
	Title        field.String
	AppName      field.String
	AppKey       field.String
	Content      field.String
	ImageUrlList field.String
	VideoUrlList field.String
	CreatedAt    field.Time
	Contact      field.String

	fieldMap map[string]field.Expr
}

func (t tUcUserPrizeCollect) Table(newTableName string) *tUcUserPrizeCollect {
	t.tUcUserPrizeCollectDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tUcUserPrizeCollect) As(alias string) *tUcUserPrizeCollect {
	t.tUcUserPrizeCollectDo.DO = *(t.tUcUserPrizeCollectDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tUcUserPrizeCollect) updateTableName(table string) *tUcUserPrizeCollect {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.TenantId = field.NewString(table, "tenant_id")
	t.UserId = field.NewInt64(table, "user_id")
	t.Account = field.NewString(table, "account")
	t.Title = field.NewString(table, "title")
	t.AppName = field.NewString(table, "app_name")
	t.AppKey = field.NewString(table, "app_key")
	t.Content = field.NewString(table, "content")
	t.ImageUrlList = field.NewString(table, "image_url_list")
	t.VideoUrlList = field.NewString(table, "video_url_list")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.Contact = field.NewString(table, "contact")

	t.fillFieldMap()

	return t
}

func (t *tUcUserPrizeCollect) WithContext(ctx context.Context) *tUcUserPrizeCollectDo {
	return t.tUcUserPrizeCollectDo.WithContext(ctx)
}

func (t tUcUserPrizeCollect) TableName() string { return t.tUcUserPrizeCollectDo.TableName() }

func (t tUcUserPrizeCollect) Alias() string { return t.tUcUserPrizeCollectDo.Alias() }

func (t *tUcUserPrizeCollect) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tUcUserPrizeCollect) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.Id
	t.fieldMap["tenant_id"] = t.TenantId
	t.fieldMap["user_id"] = t.UserId
	t.fieldMap["account"] = t.Account
	t.fieldMap["title"] = t.Title
	t.fieldMap["app_name"] = t.AppName
	t.fieldMap["app_key"] = t.AppKey
	t.fieldMap["content"] = t.Content
	t.fieldMap["image_url_list"] = t.ImageUrlList
	t.fieldMap["video_url_list"] = t.VideoUrlList
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["contact"] = t.Contact
}

func (t tUcUserPrizeCollect) clone(db *gorm.DB) tUcUserPrizeCollect {
	t.tUcUserPrizeCollectDo.ReplaceDB(db)
	return t
}

type tUcUserPrizeCollectDo struct{ gen.DO }

func (t tUcUserPrizeCollectDo) Debug() *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Debug())
}

func (t tUcUserPrizeCollectDo) WithContext(ctx context.Context) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tUcUserPrizeCollectDo) Clauses(conds ...clause.Expression) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tUcUserPrizeCollectDo) Returning(value interface{}, columns ...string) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tUcUserPrizeCollectDo) Not(conds ...gen.Condition) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tUcUserPrizeCollectDo) Or(conds ...gen.Condition) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tUcUserPrizeCollectDo) Select(conds ...field.Expr) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tUcUserPrizeCollectDo) Where(conds ...gen.Condition) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tUcUserPrizeCollectDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tUcUserPrizeCollectDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tUcUserPrizeCollectDo) Order(conds ...field.Expr) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tUcUserPrizeCollectDo) Distinct(cols ...field.Expr) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tUcUserPrizeCollectDo) Omit(cols ...field.Expr) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tUcUserPrizeCollectDo) Join(table schema.Tabler, on ...field.Expr) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tUcUserPrizeCollectDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tUcUserPrizeCollectDo) RightJoin(table schema.Tabler, on ...field.Expr) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tUcUserPrizeCollectDo) Group(cols ...field.Expr) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tUcUserPrizeCollectDo) Having(conds ...gen.Condition) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tUcUserPrizeCollectDo) Limit(limit int) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tUcUserPrizeCollectDo) Offset(offset int) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tUcUserPrizeCollectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tUcUserPrizeCollectDo) Unscoped() *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tUcUserPrizeCollectDo) Create(values ...*model.TUcUserPrizeCollect) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tUcUserPrizeCollectDo) CreateInBatches(values []*model.TUcUserPrizeCollect, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tUcUserPrizeCollectDo) Save(values ...*model.TUcUserPrizeCollect) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tUcUserPrizeCollectDo) First() (*model.TUcUserPrizeCollect, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserPrizeCollect), nil
	}
}

func (t tUcUserPrizeCollectDo) Take() (*model.TUcUserPrizeCollect, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserPrizeCollect), nil
	}
}

func (t tUcUserPrizeCollectDo) Last() (*model.TUcUserPrizeCollect, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserPrizeCollect), nil
	}
}

func (t tUcUserPrizeCollectDo) Find() ([]*model.TUcUserPrizeCollect, error) {
	result, err := t.DO.Find()
	return result.([]*model.TUcUserPrizeCollect), err
}

func (t tUcUserPrizeCollectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUcUserPrizeCollect, err error) {
	buf := make([]*model.TUcUserPrizeCollect, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tUcUserPrizeCollectDo) FindInBatches(result *[]*model.TUcUserPrizeCollect, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tUcUserPrizeCollectDo) Attrs(attrs ...field.AssignExpr) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tUcUserPrizeCollectDo) Assign(attrs ...field.AssignExpr) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tUcUserPrizeCollectDo) Joins(field field.RelationField) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tUcUserPrizeCollectDo) Preload(field field.RelationField) *tUcUserPrizeCollectDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tUcUserPrizeCollectDo) FirstOrInit() (*model.TUcUserPrizeCollect, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserPrizeCollect), nil
	}
}

func (t tUcUserPrizeCollectDo) FirstOrCreate() (*model.TUcUserPrizeCollect, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcUserPrizeCollect), nil
	}
}

func (t tUcUserPrizeCollectDo) FindByPage(offset int, limit int) (result []*model.TUcUserPrizeCollect, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tUcUserPrizeCollectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tUcUserPrizeCollectDo) withDO(do gen.Dao) *tUcUserPrizeCollectDo {
	t.DO = *do.(*gen.DO)
	return t
}
