// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		TAppConfig:            newTAppConfig(db),
		TAppLoginLog:          newTAppLoginLog(db),
		TAppUpgrade:           newTAppUpgrade(db),
		TUcAppleidInfo:        newTUcAppleidInfo(db),
		TUcHome:               newTUcHome(db),
		TUcHomeRoom:           newTUcHomeRoom(db),
		TUcHomeUser:           newTUcHomeUser(db),
		TUcUser:               newTUcUser(db),
		TUcUserFeedback:       newTUcUserFeedback(db),
		TUcUserFeedbackResult: newTUcUserFeedbackResult(db),
		TUcUserOperate:        newTUcUserOperate(db),
		TUcUserPrizeCollect:   newTUcUserPrizeCollect(db),
		TUcUserThird:          newTUcUserThird(db),
	}
}

type Query struct {
	db *gorm.DB

	TAppConfig            tAppConfig
	TAppLoginLog          tAppLoginLog
	TAppUpgrade           tAppUpgrade
	TUcAppleidInfo        tUcAppleidInfo
	TUcHome               tUcHome
	TUcHomeRoom           tUcHomeRoom
	TUcHomeUser           tUcHomeUser
	TUcUser               tUcUser
	TUcUserFeedback       tUcUserFeedback
	TUcUserFeedbackResult tUcUserFeedbackResult
	TUcUserOperate        tUcUserOperate
	TUcUserPrizeCollect   tUcUserPrizeCollect
	TUcUserThird          tUcUserThird
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                    db,
		TAppConfig:            q.TAppConfig.clone(db),
		TAppLoginLog:          q.TAppLoginLog.clone(db),
		TAppUpgrade:           q.TAppUpgrade.clone(db),
		TUcAppleidInfo:        q.TUcAppleidInfo.clone(db),
		TUcHome:               q.TUcHome.clone(db),
		TUcHomeRoom:           q.TUcHomeRoom.clone(db),
		TUcHomeUser:           q.TUcHomeUser.clone(db),
		TUcUser:               q.TUcUser.clone(db),
		TUcUserFeedback:       q.TUcUserFeedback.clone(db),
		TUcUserFeedbackResult: q.TUcUserFeedbackResult.clone(db),
		TUcUserOperate:        q.TUcUserOperate.clone(db),
		TUcUserPrizeCollect:   q.TUcUserPrizeCollect.clone(db),
		TUcUserThird:          q.TUcUserThird.clone(db),
	}
}

type queryCtx struct {
	TAppConfig            tAppConfigDo
	TAppLoginLog          tAppLoginLogDo
	TAppUpgrade           tAppUpgradeDo
	TUcAppleidInfo        tUcAppleidInfoDo
	TUcHome               tUcHomeDo
	TUcHomeRoom           tUcHomeRoomDo
	TUcHomeUser           tUcHomeUserDo
	TUcUser               tUcUserDo
	TUcUserFeedback       tUcUserFeedbackDo
	TUcUserFeedbackResult tUcUserFeedbackResultDo
	TUcUserOperate        tUcUserOperateDo
	TUcUserPrizeCollect   tUcUserPrizeCollectDo
	TUcUserThird          tUcUserThirdDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		TAppConfig:            *q.TAppConfig.WithContext(ctx),
		TAppLoginLog:          *q.TAppLoginLog.WithContext(ctx),
		TAppUpgrade:           *q.TAppUpgrade.WithContext(ctx),
		TUcAppleidInfo:        *q.TUcAppleidInfo.WithContext(ctx),
		TUcHome:               *q.TUcHome.WithContext(ctx),
		TUcHomeRoom:           *q.TUcHomeRoom.WithContext(ctx),
		TUcHomeUser:           *q.TUcHomeUser.WithContext(ctx),
		TUcUser:               *q.TUcUser.WithContext(ctx),
		TUcUserFeedback:       *q.TUcUserFeedback.WithContext(ctx),
		TUcUserFeedbackResult: *q.TUcUserFeedbackResult.WithContext(ctx),
		TUcUserOperate:        *q.TUcUserOperate.WithContext(ctx),
		TUcUserPrizeCollect:   *q.TUcUserPrizeCollect.WithContext(ctx),
		TUcUserThird:          *q.TUcUserThird.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
