// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTAppUpgrade(db *gorm.DB) tAppUpgrade {
	_tAppUpgrade := tAppUpgrade{}

	_tAppUpgrade.tAppUpgradeDo.UseDB(db)
	_tAppUpgrade.tAppUpgradeDo.UseModel(&model.TAppUpgrade{})

	tableName := _tAppUpgrade.tAppUpgradeDo.TableName()
	_tAppUpgrade.ALL = field.NewField(tableName, "*")
	_tAppUpgrade.Id = field.NewInt64(tableName, "id")
	_tAppUpgrade.Name = field.NewString(tableName, "name")
	_tAppUpgrade.Type = field.NewInt32(tableName, "type")
	_tAppUpgrade.Version = field.NewString(tableName, "version")
	_tAppUpgrade.UpgradeMode = field.NewInt32(tableName, "upgrade_mode")
	_tAppUpgrade.UpgradePrompt = field.NewString(tableName, "upgrade_prompt")
	_tAppUpgrade.UploadTime = field.NewTime(tableName, "upload_time")
	_tAppUpgrade.PublishTime = field.NewTime(tableName, "publish_time")
	_tAppUpgrade.PublishType = field.NewInt32(tableName, "publish_type")
	_tAppUpgrade.Url = field.NewString(tableName, "url")
	_tAppUpgrade.AppstoreUrl = field.NewString(tableName, "appstore_url")
	_tAppUpgrade.MinimumRequired = field.NewString(tableName, "minimum_required")
	_tAppUpgrade.ForceUpgradeVersion = field.NewString(tableName, "force_upgrade_version")
	_tAppUpgrade.FileMd5 = field.NewString(tableName, "file_md5")
	_tAppUpgrade.CreatedBy = field.NewInt64(tableName, "created_by")
	_tAppUpgrade.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tAppUpgrade.CreatedAt = field.NewTime(tableName, "created_at")
	_tAppUpgrade.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tAppUpgrade.DeletedAt = field.NewField(tableName, "deleted_at")

	_tAppUpgrade.fillFieldMap()

	return _tAppUpgrade
}

type tAppUpgrade struct {
	tAppUpgradeDo tAppUpgradeDo

	ALL                 field.Field
	Id                  field.Int64
	Name                field.String
	Type                field.Int32
	Version             field.String
	UpgradeMode         field.Int32
	UpgradePrompt       field.String
	UploadTime          field.Time
	PublishTime         field.Time
	PublishType         field.Int32
	Url                 field.String
	AppstoreUrl         field.String
	MinimumRequired     field.String
	ForceUpgradeVersion field.String
	FileMd5             field.String
	CreatedBy           field.Int64
	UpdatedBy           field.Int64
	CreatedAt           field.Time
	UpdatedAt           field.Time
	DeletedAt           field.Field

	fieldMap map[string]field.Expr
}

func (t tAppUpgrade) Table(newTableName string) *tAppUpgrade {
	t.tAppUpgradeDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tAppUpgrade) As(alias string) *tAppUpgrade {
	t.tAppUpgradeDo.DO = *(t.tAppUpgradeDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tAppUpgrade) updateTableName(table string) *tAppUpgrade {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.Name = field.NewString(table, "name")
	t.Type = field.NewInt32(table, "type")
	t.Version = field.NewString(table, "version")
	t.UpgradeMode = field.NewInt32(table, "upgrade_mode")
	t.UpgradePrompt = field.NewString(table, "upgrade_prompt")
	t.UploadTime = field.NewTime(table, "upload_time")
	t.PublishTime = field.NewTime(table, "publish_time")
	t.PublishType = field.NewInt32(table, "publish_type")
	t.Url = field.NewString(table, "url")
	t.AppstoreUrl = field.NewString(table, "appstore_url")
	t.MinimumRequired = field.NewString(table, "minimum_required")
	t.ForceUpgradeVersion = field.NewString(table, "force_upgrade_version")
	t.FileMd5 = field.NewString(table, "file_md5")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tAppUpgrade) WithContext(ctx context.Context) *tAppUpgradeDo {
	return t.tAppUpgradeDo.WithContext(ctx)
}

func (t tAppUpgrade) TableName() string { return t.tAppUpgradeDo.TableName() }

func (t tAppUpgrade) Alias() string { return t.tAppUpgradeDo.Alias() }

func (t *tAppUpgrade) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tAppUpgrade) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 19)
	t.fieldMap["id"] = t.Id
	t.fieldMap["name"] = t.Name
	t.fieldMap["type"] = t.Type
	t.fieldMap["version"] = t.Version
	t.fieldMap["upgrade_mode"] = t.UpgradeMode
	t.fieldMap["upgrade_prompt"] = t.UpgradePrompt
	t.fieldMap["upload_time"] = t.UploadTime
	t.fieldMap["publish_time"] = t.PublishTime
	t.fieldMap["publish_type"] = t.PublishType
	t.fieldMap["url"] = t.Url
	t.fieldMap["appstore_url"] = t.AppstoreUrl
	t.fieldMap["minimum_required"] = t.MinimumRequired
	t.fieldMap["force_upgrade_version"] = t.ForceUpgradeVersion
	t.fieldMap["file_md5"] = t.FileMd5
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tAppUpgrade) clone(db *gorm.DB) tAppUpgrade {
	t.tAppUpgradeDo.ReplaceDB(db)
	return t
}

type tAppUpgradeDo struct{ gen.DO }

func (t tAppUpgradeDo) Debug() *tAppUpgradeDo {
	return t.withDO(t.DO.Debug())
}

func (t tAppUpgradeDo) WithContext(ctx context.Context) *tAppUpgradeDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tAppUpgradeDo) Clauses(conds ...clause.Expression) *tAppUpgradeDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tAppUpgradeDo) Returning(value interface{}, columns ...string) *tAppUpgradeDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tAppUpgradeDo) Not(conds ...gen.Condition) *tAppUpgradeDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tAppUpgradeDo) Or(conds ...gen.Condition) *tAppUpgradeDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tAppUpgradeDo) Select(conds ...field.Expr) *tAppUpgradeDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tAppUpgradeDo) Where(conds ...gen.Condition) *tAppUpgradeDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tAppUpgradeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tAppUpgradeDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tAppUpgradeDo) Order(conds ...field.Expr) *tAppUpgradeDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tAppUpgradeDo) Distinct(cols ...field.Expr) *tAppUpgradeDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tAppUpgradeDo) Omit(cols ...field.Expr) *tAppUpgradeDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tAppUpgradeDo) Join(table schema.Tabler, on ...field.Expr) *tAppUpgradeDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tAppUpgradeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tAppUpgradeDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tAppUpgradeDo) RightJoin(table schema.Tabler, on ...field.Expr) *tAppUpgradeDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tAppUpgradeDo) Group(cols ...field.Expr) *tAppUpgradeDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tAppUpgradeDo) Having(conds ...gen.Condition) *tAppUpgradeDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tAppUpgradeDo) Limit(limit int) *tAppUpgradeDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tAppUpgradeDo) Offset(offset int) *tAppUpgradeDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tAppUpgradeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tAppUpgradeDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tAppUpgradeDo) Unscoped() *tAppUpgradeDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tAppUpgradeDo) Create(values ...*model.TAppUpgrade) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tAppUpgradeDo) CreateInBatches(values []*model.TAppUpgrade, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tAppUpgradeDo) Save(values ...*model.TAppUpgrade) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tAppUpgradeDo) First() (*model.TAppUpgrade, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppUpgrade), nil
	}
}

func (t tAppUpgradeDo) Take() (*model.TAppUpgrade, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppUpgrade), nil
	}
}

func (t tAppUpgradeDo) Last() (*model.TAppUpgrade, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppUpgrade), nil
	}
}

func (t tAppUpgradeDo) Find() ([]*model.TAppUpgrade, error) {
	result, err := t.DO.Find()
	return result.([]*model.TAppUpgrade), err
}

func (t tAppUpgradeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TAppUpgrade, err error) {
	buf := make([]*model.TAppUpgrade, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tAppUpgradeDo) FindInBatches(result *[]*model.TAppUpgrade, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tAppUpgradeDo) Attrs(attrs ...field.AssignExpr) *tAppUpgradeDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tAppUpgradeDo) Assign(attrs ...field.AssignExpr) *tAppUpgradeDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tAppUpgradeDo) Joins(field field.RelationField) *tAppUpgradeDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tAppUpgradeDo) Preload(field field.RelationField) *tAppUpgradeDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tAppUpgradeDo) FirstOrInit() (*model.TAppUpgrade, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppUpgrade), nil
	}
}

func (t tAppUpgradeDo) FirstOrCreate() (*model.TAppUpgrade, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TAppUpgrade), nil
	}
}

func (t tAppUpgradeDo) FindByPage(offset int, limit int) (result []*model.TAppUpgrade, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tAppUpgradeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tAppUpgradeDo) withDO(do gen.Dao) *tAppUpgradeDo {
	t.DO = *do.(*gen.DO)
	return t
}
