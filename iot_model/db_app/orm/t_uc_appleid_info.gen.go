// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package orm

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"cloud_platform/iot_model/db_app/model"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newTUcAppleidInfo(db *gorm.DB) tUcAppleidInfo {
	_tUcAppleidInfo := tUcAppleidInfo{}

	_tUcAppleidInfo.tUcAppleidInfoDo.UseDB(db)
	_tUcAppleidInfo.tUcAppleidInfoDo.UseModel(&model.TUcAppleidInfo{})

	tableName := _tUcAppleidInfo.tUcAppleidInfoDo.TableName()
	_tUcAppleidInfo.ALL = field.NewField(tableName, "*")
	_tUcAppleidInfo.Id = field.NewInt64(tableName, "id")
	_tUcAppleidInfo.ThirdUserId = field.NewString(tableName, "third_user_id")
	_tUcAppleidInfo.Nickname = field.NewString(tableName, "nickname")
	_tUcAppleidInfo.CreatedBy = field.NewInt64(tableName, "created_by")
	_tUcAppleidInfo.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_tUcAppleidInfo.CreatedAt = field.NewTime(tableName, "created_at")
	_tUcAppleidInfo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tUcAppleidInfo.DeletedAt = field.NewField(tableName, "deleted_at")

	_tUcAppleidInfo.fillFieldMap()

	return _tUcAppleidInfo
}

type tUcAppleidInfo struct {
	tUcAppleidInfoDo tUcAppleidInfoDo

	ALL         field.Field
	Id          field.Int64
	ThirdUserId field.String
	Nickname    field.String
	CreatedBy   field.Int64
	UpdatedBy   field.Int64
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (t tUcAppleidInfo) Table(newTableName string) *tUcAppleidInfo {
	t.tUcAppleidInfoDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tUcAppleidInfo) As(alias string) *tUcAppleidInfo {
	t.tUcAppleidInfoDo.DO = *(t.tUcAppleidInfoDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tUcAppleidInfo) updateTableName(table string) *tUcAppleidInfo {
	t.ALL = field.NewField(table, "*")
	t.Id = field.NewInt64(table, "id")
	t.ThirdUserId = field.NewString(table, "third_user_id")
	t.Nickname = field.NewString(table, "nickname")
	t.CreatedBy = field.NewInt64(table, "created_by")
	t.UpdatedBy = field.NewInt64(table, "updated_by")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.DeletedAt = field.NewField(table, "deleted_at")

	t.fillFieldMap()

	return t
}

func (t *tUcAppleidInfo) WithContext(ctx context.Context) *tUcAppleidInfoDo {
	return t.tUcAppleidInfoDo.WithContext(ctx)
}

func (t tUcAppleidInfo) TableName() string { return t.tUcAppleidInfoDo.TableName() }

func (t tUcAppleidInfo) Alias() string { return t.tUcAppleidInfoDo.Alias() }

func (t *tUcAppleidInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tUcAppleidInfo) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 8)
	t.fieldMap["id"] = t.Id
	t.fieldMap["third_user_id"] = t.ThirdUserId
	t.fieldMap["nickname"] = t.Nickname
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["deleted_at"] = t.DeletedAt
}

func (t tUcAppleidInfo) clone(db *gorm.DB) tUcAppleidInfo {
	t.tUcAppleidInfoDo.ReplaceDB(db)
	return t
}

type tUcAppleidInfoDo struct{ gen.DO }

func (t tUcAppleidInfoDo) Debug() *tUcAppleidInfoDo {
	return t.withDO(t.DO.Debug())
}

func (t tUcAppleidInfoDo) WithContext(ctx context.Context) *tUcAppleidInfoDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tUcAppleidInfoDo) Clauses(conds ...clause.Expression) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tUcAppleidInfoDo) Returning(value interface{}, columns ...string) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tUcAppleidInfoDo) Not(conds ...gen.Condition) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tUcAppleidInfoDo) Or(conds ...gen.Condition) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tUcAppleidInfoDo) Select(conds ...field.Expr) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tUcAppleidInfoDo) Where(conds ...gen.Condition) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tUcAppleidInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tUcAppleidInfoDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tUcAppleidInfoDo) Order(conds ...field.Expr) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tUcAppleidInfoDo) Distinct(cols ...field.Expr) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tUcAppleidInfoDo) Omit(cols ...field.Expr) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tUcAppleidInfoDo) Join(table schema.Tabler, on ...field.Expr) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tUcAppleidInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tUcAppleidInfoDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tUcAppleidInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *tUcAppleidInfoDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tUcAppleidInfoDo) Group(cols ...field.Expr) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tUcAppleidInfoDo) Having(conds ...gen.Condition) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tUcAppleidInfoDo) Limit(limit int) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tUcAppleidInfoDo) Offset(offset int) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tUcAppleidInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tUcAppleidInfoDo) Unscoped() *tUcAppleidInfoDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tUcAppleidInfoDo) Create(values ...*model.TUcAppleidInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tUcAppleidInfoDo) CreateInBatches(values []*model.TUcAppleidInfo, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tUcAppleidInfoDo) Save(values ...*model.TUcAppleidInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tUcAppleidInfoDo) First() (*model.TUcAppleidInfo, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcAppleidInfo), nil
	}
}

func (t tUcAppleidInfoDo) Take() (*model.TUcAppleidInfo, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcAppleidInfo), nil
	}
}

func (t tUcAppleidInfoDo) Last() (*model.TUcAppleidInfo, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcAppleidInfo), nil
	}
}

func (t tUcAppleidInfoDo) Find() ([]*model.TUcAppleidInfo, error) {
	result, err := t.DO.Find()
	return result.([]*model.TUcAppleidInfo), err
}

func (t tUcAppleidInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TUcAppleidInfo, err error) {
	buf := make([]*model.TUcAppleidInfo, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tUcAppleidInfoDo) FindInBatches(result *[]*model.TUcAppleidInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tUcAppleidInfoDo) Attrs(attrs ...field.AssignExpr) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tUcAppleidInfoDo) Assign(attrs ...field.AssignExpr) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tUcAppleidInfoDo) Joins(field field.RelationField) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Joins(field))
}

func (t tUcAppleidInfoDo) Preload(field field.RelationField) *tUcAppleidInfoDo {
	return t.withDO(t.DO.Preload(field))
}

func (t tUcAppleidInfoDo) FirstOrInit() (*model.TUcAppleidInfo, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcAppleidInfo), nil
	}
}

func (t tUcAppleidInfoDo) FirstOrCreate() (*model.TUcAppleidInfo, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TUcAppleidInfo), nil
	}
}

func (t tUcAppleidInfoDo) FindByPage(offset int, limit int) (result []*model.TUcAppleidInfo, count int64, err error) {
	if limit <= 0 {
		count, err = t.Count()
		return
	}

	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tUcAppleidInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t *tUcAppleidInfoDo) withDO(do gen.Dao) *tUcAppleidInfoDo {
	t.DO = *do.(*gen.DO)
	return t
}
